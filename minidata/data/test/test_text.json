"@Override protected void onPreExecute(){   mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);   mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);   findViewById(R.id.ok).setEnabled(false); } "
"public AppTest(String testName){   super(testName); } "
"public int hashCode(XMLGrammarDescription desc){   if (desc instanceof XMLSchemaDescription) {     final XMLSchemaDescription sd=(XMLSchemaDescription)desc;     final String targetNamespace=sd.getTargetNamespace();     final String expandedSystemId=sd.getExpandedSystemId();     int hash=(targetNamespace != null) ? targetNamespace.hashCode() : 0;     hash^=(expandedSystemId != null) ? expandedSystemId.hashCode() : 0;     return hash;   }   return desc.hashCode(); } "
"@Override public void apply(NexusStreamParser np) throws Exception { } "
"public void testDeploymentEvents() throws Exception {   Deployment deployment=null;   try {     listener.clearEventsReceived();     deployment=repositoryService.createDeployment().addClasspathResource(\"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml\").deploy();     assertNotNull(deployment);     assertEquals(2,listener.getEventsReceived().size());     assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);     ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());     assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());     assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiEntityEvent);     event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);     assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());     assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());     listener.clearEventsReceived();     repositoryService.setDeploymentCategory(deployment.getId(),\"test\");     assertEquals(1,listener.getEventsReceived().size());     assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);     event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());     assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());     assertEquals(\"test\",((Deployment)event.getEntity()).getCategory());     listener.clearEventsReceived();     repositoryService.deleteDeployment(deployment.getId(),true);     assertEquals(1,listener.getEventsReceived().size());     assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);     event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());     assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());     listener.clearEventsReceived();   }   finally {     if (deployment != null && repositoryService.createDeploymentQuery().deploymentId(deployment.getId()).count() > 0) {       repositoryService.deleteDeployment(deployment.getId(),true);     }   } } "
"public void back() throws JSONException {   if (usePrevious || index <= 0) {     throw new JSONException(\"Stepping back two steps is not supported\");   }   this.index-=1;   this.character-=1;   this.usePrevious=true;   this.eof=false; } "
"protected void addRecognizedParamsAndSetDefaults(XMLComponent component){   String[] recognizedFeatures=component.getRecognizedFeatures();   addRecognizedFeatures(recognizedFeatures);   String[] recognizedProperties=component.getRecognizedProperties();   addRecognizedProperties(recognizedProperties);   if (recognizedFeatures != null) {     for (int i=0; i < recognizedFeatures.length; ++i) {       String featureId=recognizedFeatures[i];       Boolean state=component.getFeatureDefault(featureId);       if (state != null) {         if (!fFeatures.containsKey(featureId)) {           fFeatures.put(featureId,state);           fConfigUpdated=true;         }       }     }   }   if (recognizedProperties != null) {     for (int i=0; i < recognizedProperties.length; ++i) {       String propertyId=recognizedProperties[i];       Object value=component.getPropertyDefault(propertyId);       if (value != null) {         if (!fProperties.containsKey(propertyId)) {           fProperties.put(propertyId,value);           fConfigUpdated=true;         }       }     }   } } "
"private TimeUUIDs(){ } "
"public AccountLookupContactsQuery returnAll(Boolean value){   return unsafeParam(\"return_all\",value); } "
"public static Object invokeStaticMethod(Class<?> clazz,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {   return invokeStaticMethod(clazz,name,null,null); } "
"public static void dropAllTables(SQLiteDatabase db,boolean ifExists){   UserInfoDao.dropTable(db,ifExists);   BookInfoDao.dropTable(db,ifExists); } "
"public Object directLocalReadById(Object id,String typeName,QueryResultTypeInternal queryResultType){   if (!_isLocalCache)   throw new EngineInternalSpaceException(\"Supported only in local cache\");   final IServerTypeDesc serverTypeDesc=_typeManager.getServerTypeDesc(typeName);   if (serverTypeDesc == null)   return null;   Object res=null;   boolean noUid=true;   if (serverTypeDesc.isActive()) {     if (serverTypeDesc.getTypeDesc().getIdPropertyName() == null)     return null;     if (serverTypeDesc.getTypeDesc().isAutoGenerateId())     noUid=false;     IEntryHolder entryHolder=noUid ? _cacheManager.getEntryByIdFromPureCache(id,serverTypeDesc) : directLocalReadByUidForClass((String)id,typeName);     res=getUserObjectFromEntryHolder(entryHolder,queryResultType);   }   if (res != null || !noUid)   return res;   IServerTypeDesc[] subTypes=serverTypeDesc.getAssignableTypes();   for (int i=1; i < subTypes.length; i++) {     IServerTypeDesc subType=_typeManager.getServerTypeDesc(subTypes[i].getTypeName());     if (subType == null || subType.isInactive())     continue;     if (subType.getTypeDesc().getIdPropertyName() == null)     return null;     IEntryHolder entryHolder=_cacheManager.getEntryByIdFromPureCache(id,subType);     res=getUserObjectFromEntryHolder(entryHolder,queryResultType);     if (res != null)     return res;   }   return null; } "
"public void importXLIFF(Long assetId,String xliffContent,boolean updateTM){   Asset asset=assetRepository.findOne(assetId);   ImportExportedXliffStep importExportedXliffStep=new ImportExportedXliffStep(asset,xliffContent,updateTM);   importXLIFF(importExportedXliffStep,xliffContent); } "
"private void updateButtonState(boolean enabled){   btnConnect.setEnabled(enabled);   connectionComboBox.setEnabled(enabled);   btnEditConnection.setEnabled(enabled); } "
"public void init$Children(){   children=new ASTNode[6];   setChild(new List(),2);   setChild(new List(),3);   setChild(new Opt(),4);   setChild(new Opt(),5); } "
"public static String parseCharset(Map<String,String> headers,String defaultCharset){   String contentType=headers.get(HTTP.CONTENT_TYPE);   if (contentType != null) {     String[] params=contentType.split(\";\");     for (int i=1; i < params.length; i++) {       String[] pair=params[i].trim().split(\"=\");       if (pair.length == 2) {         if (pair[0].equals(\"charset\")) {           return pair[1];         }       }     }   }   return defaultCharset; } "
"public ScanRangeSplits build(){   ImmutableList.Builder<SplitGroup> splitGroups=ImmutableList.builder();   for (  Map.Entry<String,Map<String,ImmutableList.Builder<ScanRange>>> splitGroupRow : _scanRangesByGroupAndAndTokenRange.rowMap().entrySet()) {     ImmutableList.Builder<TokenRange> tokenRanges=ImmutableList.builder();     for (    ImmutableList.Builder<ScanRange> scanRange : splitGroupRow.getValue().values()) {       tokenRanges.add(new TokenRange(scanRange.build()));     }     splitGroups.add(new SplitGroup(tokenRanges.build()));   }   return new ScanRangeSplits(splitGroups.build()); } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"set keep1=\");   boolean value=np.getBoolean();   np.matchIgnoreCase(\";\");   CompareWindow viewer=(CompareWindow)getParent();   viewer.setKeep1(value); } "
"public JSONObject(){   this.map=new HashMap(); } "
"private Optional<Secret> prepareExistingSecret(){   val annotations=ImmutableMap.of(REQUEST_ANNOTATION,\"[\\\"existing.k8s.io\\\"]\");   val secretMeta=Mockito.mock(ObjectMeta.class);   when(secretMeta.getName()).thenReturn(EXISTING_CERT);   when(secretMeta.getAnnotations()).thenReturn(annotations);   val secret=Mockito.mock(Secret.class);   when(secret.getMetadata()).thenReturn(secretMeta);   return Optional.of(secret); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_REWARD_ITEM(int objectNameId,int rewardItemNameId){   return new SM_SYSTEM_MESSAGE(1401263,calculateNameId(objectNameId),new DescriptionId(rewardItemNameId)); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public GenericConstructorDecl fullCopy(){   GenericConstructorDecl tree=(GenericConstructorDecl)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public void convertSymbols(Rule rule,String layerName,int transparency,JsonElement element){   if (element == null)   return;   JsonObject jsonSymbol=element.getAsJsonObject();   boolean found=false;   for (  String symbolType : symbolMap.keySet()) {     JsonElement obj=jsonSymbol.get(symbolType);     if (obj != null) {       EsriSymbolInterface esriSymbol=symbolMap.get(symbolType);       esriSymbol.convert(rule,obj,layerName,transparency);       found=true;       break;     }   }   if (!found) {     ConsoleManager.getInstance().error(this,\"Unsupported symbol : \" + SymbolUtils.extractName(element));   } } "
"public void mapToScreen(List<Double> rulerMap){   if ((this.from < rulerMap.get(0) && this.to < rulerMap.get(0)) || (this.from > rulerMap.get(rulerMap.size() - 1)) && this.to > rulerMap.get(rulerMap.size() - 1)) {     this.screenFrom=-1;     this.screenTo=-1;     return;   }   if (this.from <= rulerMap.get(0) && this.to >= rulerMap.get(rulerMap.size() - 1)) {     this.screenFrom=0;     this.screenTo=rulerMap.size() - 1;     return;   }   screenFrom=Utils.getIndexOfclosestValue(this.from,rulerMap);   screenTo=Utils.getIndexOfclosestValue(this.to,rulerMap);   if (screenFrom == -1) {     screenFrom=0;   }   if (screenTo == -1) {     screenTo=rulerMap.size() - 1;   }   if (screenFrom == -1 || screenTo == -1) {     System.err.println(\"Unexpected mapping of features to ruler.\");     System.exit(1);   } } "
"public Vector3f scaleAdd(float scalar,Vector3f mult,Vector3f add){   this.x=mult.x * scalar + add.x;   this.y=mult.y * scalar + add.y;   this.z=mult.z * scalar + add.z;   return this; } "
"@SuppressWarnings(\"resource\") public boolean connectServer(ServerInfo server){   Socket sock;   if (server.sock != null) {     return true;   }   try {     sock=new Socket();     sock.setReuseAddress(true);     sock.setSoTimeout(ClientGlobal.g_network_timeout);     sock.connect(server.address,ClientGlobal.g_network_timeout);     server.sock=sock;     return true;   }  catch (  IOException ex) {     System.err.println(\"connect to server \" + server.address.getAddress().getHostAddress() + \":\"+ server.address.getPort()+ \" fail, error info: \"+ ex.getMessage());     return false;   } } "
"@Override public void onPageScrollStateChanged(int state){ } "
"public final void close(AionServerPacket closePacket,boolean forced){ synchronized (guard) {     if (isWriteDisabled()) {       return;     }     pendingClose=true;     isForcedClosing=forced;     sendMsgQueue.clear();     sendMsgQueue.addLast(closePacket);     enableWriteInterest();   } } "
"public double normF(){   double f=0;   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       f=Maths.hypot(f,A[i][j]);     }   }   return f; } "
"public TransitionBasedParserMLP(JavaSparkContext jsc,String classifierFileName,FeatureFrame featureFrame){   this.featureFrame=featureFrame;   this.classifier=TransitionClassifier.load(jsc,new Path(classifierFileName,\"data\").toString());   this.pipelineModel=PipelineModel.load(new Path(classifierFileName,\"pipelineModel\").toString());   this.transitionName=((StringIndexerModel)pipelineModel.stages()[2]).labels();   String[] features=((CountVectorizerModel)(pipelineModel.stages()[1])).vocabulary();   this.featureMap=new HashMap<String,Integer>();   for (int j=0; j < features.length; j++) {     this.featureMap.put(features[j],j);   } } "
"public long size(){   return mSizeInBytes.get(); } "
"public void initialiseSelectedSymbolizerIndex(){   this.selectedSymbolizerIndex=0; } "
"private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){   String stringId=String.valueOf(id);   database.beginTransaction();   final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null);   if (cursor != null && cursor.moveToFirst()) {     int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);     int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex);     int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek;     if (Math.abs(weekDiff) >= NUM_WEEKS) {       deleteEntry(database,stringId);       if (bumpCount) {         createNewPlayedEntry(database,id);       }     }  else     if (weekDiff != 0) {       int[] playCounts=new int[NUM_WEEKS];       if (weekDiff > 0) {         for (int i=0; i < NUM_WEEKS - weekDiff; i++) {           playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i));         }       }  else       if (weekDiff < 0) {         for (int i=0; i < NUM_WEEKS + weekDiff; i++) {           playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff));         }       }       if (bumpCount) {         playCounts[0]++;       }       float score=calculateScore(playCounts);       if (score < .01f) {         deleteEntry(database,stringId);       }  else {         ContentValues values=new ContentValues(NUM_WEEKS + 2);         values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);         values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);         for (int i=0; i < NUM_WEEKS; i++) {           values.put(getColumnNameForWeek(i),playCounts[i]);         }         database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});       }     }  else     if (bumpCount) {       ContentValues values=new ContentValues(2);       int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE);       float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);       values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);       values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1);       database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});     }     cursor.close();   }  else   if (bumpCount) {     createNewPlayedEntry(database,id);   }   database.setTransactionSuccessful();   database.endTransaction(); } "
"public Node addRoot(){   throw new UnsupportedOperationException(\"Changes to tree structure not allowed for spanning trees.\"); } "
"public Env<T> open(final File path,final EnvFlags... flags){   return open(path,0664,flags); } "
"public static double[] xVals(double[] vector){   if (vector == null)   return null;   double[] x=new double[vector.length / 2];   int count=0;   for (int i=0; i < vector.length; i++) {     if (i % 2 != 0)     x[count++]=vector[i];   }   return x; } "
"protected Criteria createCriteriaInternal(){   Criteria criteria=new Criteria();   return criteria; } "
"private BookKeeperClientBuilder(){ } "
"@Override @Test public void testConstant(){   double[] noVariance=new double[]{1,1,1,1};   double[] values=new double[]{1,2,3,4};   Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance,values))); } "
"public static byte[] decrypt(final SecretKeySpec key,final byte[] iv,final byte[] decodedCipherText) throws GeneralSecurityException {   final Cipher cipher=Cipher.getInstance(AES_MODE);   IvParameterSpec ivSpec=new IvParameterSpec(iv);   cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);   byte[] decryptedBytes=cipher.doFinal(decodedCipherText);   return decryptedBytes; } "
"public ScriptHealthDetector(final IKBus eventBus,final Script script,final Executor executor){   this.script=script;   this.eventBus=eventBus;   this.executor=executor; } "
"@Override public boolean equals(Object obj){   if (this == obj) {     return true;   }   if (obj == null) {     return false;   }   if (!(obj instanceof AbsoluteTableIdentifier)) {     return false;   }   AbsoluteTableIdentifier other=(AbsoluteTableIdentifier)obj;   if (carbonTableIdentifier == null) {     if (other.carbonTableIdentifier != null) {       return false;     }   }  else   if (!carbonTableIdentifier.equals(other.carbonTableIdentifier)) {     return false;   }   if (storePath == null) {     if (other.storePath != null) {       return false;     }   }  else   if (!storePath.equals(other.storePath)) {     return false;   }   return true; } "
"public Complex[] transform(final Complex[] f,final TransformType type){   final double[][] dataRI=TransformUtils.createRealImaginaryArray(f);   transformInPlace(dataRI,normalization,type);   return TransformUtils.createComplexArray(dataRI); } "
"public void discovered(DiscoveryEvent e){   ServiceRegistrar[] proxys=e.getRegistrars();   Map groupsMap=e.getGroups();   HashMap discoveredGroupsMap=new HashMap(proxys.length);   HashMap changedGroupsMap=new HashMap(proxys.length);   for (int i=0; i < proxys.length; i++) { synchronized (discoveredSet) {       ProxyReg reg=findReg(proxys[i]);       if (reg == null) {         reg=new ProxyReg(proxys[i],(String[])(groupsMap.get(proxys[i])),FROM_GROUP);         addDiscoveredSet(reg);         discoveredGroupsMap.put(proxys[i],groupsMap.get(proxys[i]));       }  else {         String[] oldGroups=reg.getMemberGroups();         String[] newGroups=(String[])groupsMap.get(reg.proxy);         if (groupSetsEqual(oldGroups,newGroups)) {           reg.addFrom(FROM_GROUP);         }  else {           reg.setMemberGroups(newGroups);           changedGroupsMap.put(reg.proxy,newGroups);         }       }     }   }   notifyListener(discoveredGroupsMap,DISCOVERED);   notifyListener(changedGroupsMap,CHANGED); } "
"public short[] toNativeArray(){   return toNativeArray(0,_pos); } "
"public BoardGetTopicsQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"@Override public LSInput resolveResource(String type,String namespaceURI,String publicId,String systemId,String baseURI){   String resolvedId=null;   try {     if (namespaceURI != null) {       resolvedId=resolveURI(namespaceURI);     }     if (!getUseLiteralSystemId() && baseURI != null) {       try {         URI uri=new URI(new URI(baseURI),systemId);         systemId=uri.toString();       }  catch (      URI.MalformedURIException ex) {       }     }     if (resolvedId == null) {       if (publicId != null && systemId != null) {         resolvedId=resolvePublic(publicId,systemId);       }  else       if (systemId != null) {         resolvedId=resolveSystem(systemId);       }     }   }  catch (  IOException ex) {   }   if (resolvedId != null) {     return new DOMInputImpl(publicId,resolvedId,baseURI);   }   return null; } "
"public GroupsSearchQuery future(Boolean value){   return unsafeParam(\"future\",value); } "
"private boolean promptForQuickDiffAnnotate(){   final IPreferenceStore store=SVNUIPlugin.getPlugin().getPreferenceStore();   final String option=store.getString(ISVNUIConstants.PREF_USE_QUICKDIFFANNOTATE);   if (option.equals(MessageDialogWithToggle.ALWAYS))   return true;  else   if (option.equals(MessageDialogWithToggle.NEVER))   return false;   final MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(Utils.getShell(null),Policy.bind(\"AnnotateOperation_QDAnnotateTitle\"),Policy.bind(\"AnnotateOperation_QDAnnotateMessage\"),Policy.bind(\"AnnotateOperation_4\"),false,store,ISVNUIConstants.PREF_USE_QUICKDIFFANNOTATE);   final int result=dialog.getReturnCode(); switch (result) { case IDialogConstants.YES_ID: case IDialogConstants.OK_ID:     return true; } return false; } "
"private String positiveInteger2RelativeValues(String rateAttribute){   double positiveNumber=(new Float(rateAttribute)).doubleValue();   double relativePercentage=(positiveNumber * 100.0);   if (relativePercentage > 100) {     return \"+\" + df.format((relativePercentage - 100)) + \"%\";   }   return \"-\" + df.format((100 - relativePercentage)) + \"%\"; } "
"private static void logThrow(Level level,String sourceMethod,String msg,Object[] params,Throwable e){   LogRecord r=new LogRecord(level,msg);   r.setLoggerName(logger.getName());   r.setSourceClassName(LeaseRenewalManager.class.getName());   r.setSourceMethodName(sourceMethod);   r.setParameters(params);   r.setThrown(e);   logger.log(r); } "
"private void parseParameters(String parameters){   Log.v(\"HttpHeader\",\"HttpAuthHeader.parseParameters():\" + \" parameters: \" + parameters);   if (parameters != null) {     int i;     do {       i=parameters.indexOf(',');       if (i < 0) {         parseParameter(parameters);       }  else {         parseParameter(parameters.substring(0,i));         parameters=parameters.substring(i + 1);       }     }  while (i >= 0);   } } "
"public long optLong(String key){   LazyNode token=getOptionalFieldToken(key);   if (token == null)   return 0l;   if (token.type == LazyNode.VALUE_NULL)   return 0l;   return token.getLongValue(cbuf); } "
"private static void closeKey(Integer keyHandle){   if (keyHandle == null)   return;   Integer result=invokeRegistryMethod(_closeKeyMethod,keyHandle);   if (result != ERROR_SUCCESS)   throw new WindowsRegistryException(\"Error. Code=\" + result); } "
"private static void createStore(Player activePlayer){   if (activePlayer.isInState(CreatureState.RESTING)) {     return;   }   activePlayer.setStore(new PrivateStore(activePlayer));   activePlayer.setState(CreatureState.PRIVATE_SHOP);   PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.OPEN_PRIVATESHOP,0,0),true); } "
"@Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){   updateButtonState(geometryType); } "
"public long leafCellsCovered(){   long numLeaves=0;   for (  S2CellId cellId : cellIds) {     int invertedLevel=S2CellId.MAX_LEVEL - cellId.level();     numLeaves+=(1L << (invertedLevel << 1));   }   return numLeaves; } "
"private void blockUntilShutdown() throws InterruptedException {   if (server != null) {     server.awaitTermination();   } } "
"public GroupsSetCallbackSettingsQuery wallPostNew(Boolean value){   return unsafeParam(\"wall_post_new\",value); } "
"public EntityQuery from(DynamicViewEntity dynamicViewEntity){   this.dynamicViewEntity=dynamicViewEntity;   this.entityName=null;   return this; } "
"protected FriendsDeleteListQuery listId(int value){   return unsafeParam(\"list_id\",value); } "
"public Complex solve(Complex coefficients[],Complex initial) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {   if (coefficients == null) {     throw new NullArgumentException();   }   final int n=coefficients.length - 1;   if (n == 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.POLYNOMIAL);   }   final double absoluteAccuracy=getAbsoluteAccuracy();   final double relativeAccuracy=getRelativeAccuracy();   final double functionValueAccuracy=getFunctionValueAccuracy();   final Complex nC=new Complex(n,0);   final Complex n1C=new Complex(n - 1,0);   Complex z=initial;   Complex oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);   while (true) {     Complex pv=coefficients[n];     Complex dv=Complex.ZERO;     Complex d2v=Complex.ZERO;     for (int j=n - 1; j >= 0; j--) {       d2v=dv.add(z.multiply(d2v));       dv=pv.add(z.multiply(dv));       pv=coefficients[j].add(z.multiply(pv));     }     d2v=d2v.multiply(new Complex(2.0,0.0));     final double tolerance=FastMath.max(relativeAccuracy * z.abs(),absoluteAccuracy);     if ((z.subtract(oldz)).abs() <= tolerance) {       return z;     }     if (pv.abs() <= functionValueAccuracy) {       return z;     }     final Complex G=dv.divide(pv);     final Complex G2=G.multiply(G);     final Complex H=G2.subtract(d2v.divide(pv));     final Complex delta=n1C.multiply((nC.multiply(H)).subtract(G2));     final Complex deltaSqrt=delta.sqrt();     final Complex dplus=G.add(deltaSqrt);     final Complex dminus=G.subtract(deltaSqrt);     final Complex denominator=dplus.abs() > dminus.abs() ? dplus : dminus;     if (denominator.equals(new Complex(0.0,0.0))) {       z=z.add(new Complex(absoluteAccuracy,absoluteAccuracy));       oldz=new Complex(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY);     }  else {       oldz=z;       z=z.subtract(nC.divide(denominator));     }     incrementEvaluationCount();   } } "
"@Requires(Resolved.class) @Nullable public EnumValue lookupValue(String name){   return valueByName.get(name); } "
"public static UserFeedback createFromJSONString(String json){   return new GsonBuilder().create().fromJson(json,UserFeedback.class); } "
"public void centerViewTo(float xIndex,float yValue,AxisDependency axis){   float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();   float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();   Runnable job=new MoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this);   addViewportJob(job); } "
"public Builder className(String className){   this.className=className;   return this; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stagger_END_A_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200910,skilltarget); } "
"public static float tan(float fValue){   return (float)Math.tan(fValue); } "
"public void addService(String service,String className){   PluginEntry entry=new PluginEntry(service,className,false);   this.addService(entry); } "
"public VideoGetCatalogQuery itemsCount(Integer value){   return unsafeParam(\"items_count\",value); } "
"public JSONWriter array() throws JSONException {   if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {     this.push(null);     this.append(\"[\");     this.comma=false;     return this;   }   throw new JSONException(\"Misplaced array.\"); } "
"private static String parseRefSeqId(String aLine){   int pos=aLine.indexOf(IdParser.REFSEQ_TAG);   if (pos != -1) {     int start=pos + IdParser.REFSEQ_TAG.length();     int end=start;     while (end < aLine.length() && (Character.isLetterOrDigit(aLine.charAt(end)) || aLine.charAt(end) == '_'))     end++;     if (end > start)     return aLine.substring(start,end);   }   return null; } "
"public static SM_SYSTEM_MESSAGE STR_PARTY_HE_IS_ALREADY_MEMBER_OF_OTHER_PARTY(String value0){   return new SM_SYSTEM_MESSAGE(1300169,value0); } "
"@Override public TDistribution makeDistribution(){   return new TDistribution(5.0); } "
"public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BOSS_KILLED(String value1,String value0){   return new SM_SYSTEM_MESSAGE(1400295,value1,value0); } "
"@Override protected final Object clone(){   return this; } "
"public XorPredicate(){ } "
"public static double gymOffense(final Pokemon p){   return gymOffense(p.getPokemonId(),p.getMove1(),p.getMove2(),p.getIndividualAttack()); } "
"public static void showProfile(Fragment fragment,@Nullable HashMap<String,String> extras){   showProfile(fragment,AirMap.getUserId(),extras); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_A_TO_ME(String skillname,String skillcaster){   return new SM_SYSTEM_MESSAGE(1201272,skillname,skillcaster); } "
"protected void bindIconToView(boolean showImage,RecipientEntry entry,ImageView view,AdapterType type){   if (view == null) {     return;   }   if (showImage) { switch (type) { case BASE_RECIPIENT:       byte[] photoBytes=entry.getPhotoBytes();     if (photoBytes != null && photoBytes.length > 0) {       final Bitmap photo=ChipsUtil.getClip(BitmapFactory.decodeByteArray(photoBytes,0,photoBytes.length));       view.setImageBitmap(photo);     }  else {       BaseRecipientAdapter.tryFetchPhoto(entry,mContext.getContentResolver(),null,true,-1);       view.setImageResource(getDefaultPhotoResId());     }   break; case RECIPIENT_ALTERNATES: Uri thumbnailUri=entry.getPhotoThumbnailUri(); if (thumbnailUri != null) { view.setImageURI(thumbnailUri); }  else { view.setImageResource(getDefaultPhotoResId()); } break; case SINGLE_RECIPIENT: default : break; } view.setVisibility(View.VISIBLE); }  else { view.setVisibility(View.GONE); } } "
"@Override public boolean isApplicable(){   return true; } "
"public FriendsEditQuery listIds(List<Integer> value){   return unsafeParam(\"list_ids\",value); } "
"@Override public void readCatalog(Catalog catalog,InputStream is) throws IOException, CatalogException {   DocumentBuilderFactory factory=null;   DocumentBuilder builder=null;   factory=DocumentBuilderFactory.newInstance();   factory.setNamespaceAware(false);   factory.setValidating(false);   try {     builder=factory.newDocumentBuilder();   }  catch (  ParserConfigurationException pce) {     throw new CatalogException(CatalogException.UNPARSEABLE);   }   Document doc=null;   try {     doc=builder.parse(is);   }  catch (  SAXException se) {     throw new CatalogException(CatalogException.UNKNOWN_FORMAT);   }   Element root=doc.getDocumentElement();   String namespaceURI=Namespaces.getNamespaceURI(root);   String localName=Namespaces.getLocalName(root);   String domParserClass=getCatalogParser(namespaceURI,localName);   if (domParserClass == null) {     if (namespaceURI == null) {       catalog.getCatalogManager().debug.message(1,\"No Catalog parser for \" + localName);     }  else {       catalog.getCatalogManager().debug.message(1,\"No Catalog parser for \" + \"{\" + namespaceURI + \"}\"+ localName);     }     return;   }   DOMCatalogParser domParser=null;   try {     domParser=(DOMCatalogParser)Class.forName(domParserClass).newInstance();   }  catch (  ClassNotFoundException cnfe) {     catalog.getCatalogManager().debug.message(1,\"Cannot load XML Catalog Parser class\",domParserClass);     throw new CatalogException(CatalogException.UNPARSEABLE);   } catch (  InstantiationException ie) {     catalog.getCatalogManager().debug.message(1,\"Cannot instantiate XML Catalog Parser class\",domParserClass);     throw new CatalogException(CatalogException.UNPARSEABLE);   } catch (  IllegalAccessException iae) {     catalog.getCatalogManager().debug.message(1,\"Cannot access XML Catalog Parser class\",domParserClass);     throw new CatalogException(CatalogException.UNPARSEABLE);   } catch (  ClassCastException cce) {     catalog.getCatalogManager().debug.message(1,\"Cannot cast XML Catalog Parser class\",domParserClass);     throw new CatalogException(CatalogException.UNPARSEABLE);   }   Node node=root.getFirstChild();   while (node != null) {     domParser.parseCatalogEntry(catalog,node);     node=node.getNextSibling();   } } "
"public Trap newTrap(SootClass exception,Unit beginUnit,Unit endUnit,Unit handlerUnit){   return new BTrap(exception,beginUnit,endUnit,handlerUnit); } "
"public void removeColumn(String columnName){   if (featureCollection != null) {     if (columnList.contains(columnName)) {       columnList.remove(columnName);       SimpleFeatureTypeBuilder featureTypeBuilder=new SimpleFeatureTypeBuilder();       featureTypeBuilder.init(featureCollection.getSchema());       featureTypeBuilder.remove(columnName);       SimpleFeatureType newFeatureType=featureTypeBuilder.buildFeatureType();       int attributeToRemoveIndex=0;       for (      AttributeDescriptor descriptor : newFeatureType.getAttributeDescriptors()) {         if (descriptor.getLocalName().compareTo(columnName) == 0) {           break;         }         attributeToRemoveIndex++;       }       String typeName=userLayer.getInlineFeatureType().getTypeName();       try {         SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);         SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(newFeatureType);         ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();         SimpleFeatureIterator it=featureSource.getFeatures().features();         try {           while (it.hasNext()) {             SimpleFeature sf=it.next();             List<Object> attributes=sf.getAttributes();             attributes.remove(attributeToRemoveIndex);             sfb.addAll(attributes);             featureList.add(sfb.buildFeature(null));           }         }   finally {           it.close();         }         SimpleFeatureCollection collection=new ListFeatureCollection(newFeatureType,featureList);         DataStore dataStore=DataUtilities.dataStore(collection);         featureCollection=collection;         cachedFeature=null;         lastRow=-1;         userLayer.setInlineFeatureDatastore(dataStore);         userLayer.setInlineFeatureType(newFeatureType);       }  catch (      IOException e) {         ConsoleManager.getInstance().exception(this,e);       }       this.fireTableStructureChanged();       this.fireTableDataChanged();       if (parentObj != null) {         parentObj.inlineFeatureUpdated();       }     }   } } "
"private static void recordHistogram(int result){   RecordHistogram.recordEnumeratedHistogram(\"Geolocation.HeaderSentOrNot\",result,UMA_MAX); } "
"private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){   encode3to4(threeBytes,0,numSigBytes,b4,0,options);   return b4; } "
"public static void init(Configuration conf){   try {     _conf=conf;     classLoader=new GClassLoader(Module.class.getClassLoader());     Thread thread=Thread.currentThread();     thread.setContextClassLoader(classLoader);     File f=new File(Model.HOME + \"/modules/\");     if (f.exists()) {       File[] list=f.listFiles();       if (list != null) {         for (        File f1 : list) {           if (f1.isDirectory()) {             Module m=load(f1.getName());             if (m == null) {               log.info(\"[\" + f1.getName() + \"] is not a valid module\");             }  else             if (!m.enabled) {               log.info(\"[\" + f1.getName() + \"] is disabled\");             }  else             if (modules.containsKey(m.id)) {               log.error(\"the [id] duplicated, [\" + m.name + \", \"+ modules.get(m.id).name+ \"], ignore the [\"+ m.name+ \"]\");               m.error=Language.getLanguage().get(\"module.error.duplicatedid\");             }  else             if (!X.isSame(m.name,f1.getName())) {               log.error(\"the [name] is invlaid, folder=\" + f1.getName() + \", module=\"+ m.name);               m.error=Language.getLanguage().get(\"module.error.name\");             }  else {               modules.put(m.id,m);             }           }         }       }     }  else {       log.error(\"giiwa modules missed, please re-install it, modules=\" + f.getCanonicalPath());     }     if (modules.size() > 0) {       home=modules.lastEntry().getValue();     }     log.debug(\"modules=\" + modules);     Menu.reset();     for (    Module m : modules.values()) {       m.initModels();       m._init(_conf);     }     Menu.cleanup();     String locale=null;     Module f1=home;     while (locale == null && f1 != null) {       locale=f1.get(\"default.locale\");       f1=f1.floor();     }     if (locale != null) {       Locale.setDefault(new Locale(locale));     }     boolean changed=false;     List<String> names=Jar.loadAll(W.create());     if (names != null && names.size() > 0) {       for (      Object name : names) {         List<String> modules=Jar.load(name.toString());         boolean used=false;         if (modules != null && modules.size() > 0) {           for (          Object m1 : modules) {             Module m2=Module.load(m1.toString());             if (m2 != null) {               used=true;             }           }         }         if (!used) {           File f2=new File(Model.HOME + File.separator + \"WEB-INF\"+ File.separator+ \"lib\"+ File.separator+ name);           if (f2.exists()) {             log.info(\"as not module used the jar, delete it, [\" + name + \"]\");             f2.delete();             changed=true;           }           Jar.remove(name.toString());         }       }     }     if (changed) {       log.warn(\"jar files changed, restarting again...\");       System.exit(0);     }   }  catch (  Exception e) {     log.error(e.getMessage(),e);   } } "
"public static double information(double[] probabilities){   double total=0.0;   for (  double d : probabilities) {     total+=(-1.0 * log2(d) * d);   }   return total; } "
"private void createColumns(Table table,TableLayout layout){   TableColumn col;   col=new TableColumn(table,SWT.NONE);   col.setResizable(false);   layout.addColumnData(new ColumnWeightData(1,true));   col=new TableColumn(table,SWT.NONE);   col.setResizable(true);   col.setText(Policy.bind(\"SvnPropertiesView.propertyName\"));   layout.addColumnData(new ColumnWeightData(60,true));   col=new TableColumn(table,SWT.NONE);   col.setResizable(true);   col.setText(Policy.bind(\"SvnPropertiesView.propertyValue\"));   layout.addColumnData(new ColumnWeightData(120,true)); } "
"public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){   super(configuration); } "
"private LangUtils(){ } "
"public static FramePath parsePath(String path){   return new FramePath().addFrame(path); } "
"public boolean isValidTree(){   int nnodes=getNodeCount();   int nedges=getEdgeCount();   if (nnodes != nedges + 1) {     s_logger.warning(\"Node/edge counts incorrect.\");     return false;   }   int root=getRootRow();   IntIterator nodes=getNodeTable().rows();   while (nodes.hasNext()) {     int n=nodes.nextInt();     int id=getInDegree(n);     if (n == root && id > 0) {       s_logger.warning(\"Root node has a parent.\");       return false;     }  else     if (id > 1) {       s_logger.warning(\"Node \" + n + \" has multiple parents.\");       return false;     }   }   int[] counts=new int[]{0,nedges};   isValidHelper(getRootRow(),counts);   if (counts[0] > nedges) {     s_logger.warning(\"The tree has non-tree edges in it.\");     return false;   }   if (counts[0] < nedges) {     s_logger.warning(\"Not all of the tree was visited. \" + \"Only \" + counts[0] + \"/\"+ nedges+ \" edges encountered\");     return false;   }   return true; } "
"public void requestSetFailedNode(int nodeId){   enqueue(new ReplaceFailedNodeMessageClass().doRequest(nodeId)); } "
"public static boolean isConfigured(){   return ds != null; } "
"protected String generateCreateTableSQL(TableModel tableModel){   return generateCreateTableSQL(tableModel.getTableName(),tableModel.getColumnModels(),true); } "
"void bind(String name,Object value){   Preconditions.checkNotNull(value);   locals.peek().put(name,value); } "
"public static boolean isSemitonesDelta(String string){   String s=string.trim();   if (s.length() < 4)   return false;   return s.substring(s.length() - 2).equals(\"st\") && isNumberDelta(s.substring(0,s.length() - 2)); } "
"private Interceptor[] createInterceptors(Interceptors aroundAnnotation){   Interceptor[] result=null;   Class<Interceptor>[] interceptorClasses=(Class<Interceptor>[])aroundAnnotation.value();   if (interceptorClasses != null && interceptorClasses.length > 0) {     result=new Interceptor[interceptorClasses.length];     for (int i=0; i < result.length; i++) {       result[i]=intersMap.get(interceptorClasses[i]);       if (result[i] != null)       continue;       try {         result[i]=interceptorClasses[i].newInstance();         intersMap.put(interceptorClasses[i],result[i]);       }  catch (      Exception e) {         throw new InterceptorException(e.getMessage(),e);       }     }   }   return result; } "
"public void startSync(){ } "
"public IdentityStmt newIdentityStmt(Value local,Value identityRef){   return new GIdentityStmt(local,identityRef); } "
"public boolean number_nodes(){   return soot.PhaseOptions.getBoolean(options,\"number-nodes\"); } "
"public FloatElemValPair(String name,char kind,float val){   super(name,kind);   this.val=new FloatCP(val); } "
"public void config(Configuration config,String prefix,String name){   items=config.getPrefixPropertyList(prefix,name + \".Items\"); } "
"private PacScriptMethods buildParser(){   PacScriptMethods result=new PacScriptMethods();   Calendar cal=Calendar.getInstance();   cal.set(Calendar.YEAR,1994);   cal.set(Calendar.MONTH,Calendar.DECEMBER);   cal.set(Calendar.DAY_OF_MONTH,15);   cal.set(Calendar.HOUR_OF_DAY,12);   cal.set(Calendar.MINUTE,00);   cal.set(Calendar.SECOND,00);   cal.set(Calendar.MILLISECOND,00);   result.setCurrentTime(cal);   return result; } "
"public void update(final Long pId,final Object pValue,final String pValueDesc,final Timestamp pTimestamp){   final RuleBufferObject bufferObj;   LOG.trace(pId + \" entering update()\"); synchronized (BUFFER_LOCK) {     if (!RULE_OBJECT_BUF.containsKey(pId)) {       bufferObj=new RuleBufferObject(pId,pValue,pValueDesc,pTimestamp);       RULE_OBJECT_BUF.put(pId,bufferObj);     }  else {       bufferObj=(RuleBufferObject)RULE_OBJECT_BUF.get(pId);       bufferObj.update(pValue,pValueDesc,pTimestamp);     }     scheduleCacheUpdaterTask(pId);   }   LOG.trace(pId + \" leaving update()\"); } "
"public static byte[] decode(String s,int options) throws java.io.IOException {   if (s == null) {     throw new NullPointerException(\"Input string was null.\");   }   byte[] bytes;   try {     bytes=s.getBytes(PREFERRED_ENCODING);   }  catch (  java.io.UnsupportedEncodingException uee) {     bytes=s.getBytes();   }   bytes=decode(bytes,0,bytes.length,options);   boolean dontGunzip=(options & DONT_GUNZIP) != 0;   if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {     int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);     if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {       java.io.ByteArrayInputStream bais=null;       java.util.zip.GZIPInputStream gzis=null;       java.io.ByteArrayOutputStream baos=null;       byte[] buffer=new byte[2048];       int length=0;       try {         baos=new java.io.ByteArrayOutputStream();         bais=new java.io.ByteArrayInputStream(bytes);         gzis=new java.util.zip.GZIPInputStream(bais);         while ((length=gzis.read(buffer)) >= 0) {           baos.write(buffer,0,length);         }         bytes=baos.toByteArray();       }  catch (      java.io.IOException e) {         e.printStackTrace();       }  finally {         try {           baos.close();         }  catch (        Exception e) {         }         try {           gzis.close();         }  catch (        Exception e) {         }         try {           bais.close();         }  catch (        Exception e) {         }       }     }   }   return bytes; } "
"public static boolean isAcceptCsvGzip(HttpServletRequest request){   return request != null && ((request.getPathInfo() != null && request.getPathInfo().endsWith(\".gz\")) || (request.getHeader(\"Accept\") != null && request.getHeader(\"Accept\").contains(\"application/csv+gzip\"))); } "
"private void createUI(){   readConfigFile(null,this,\"geoserver/GeoServerLabel.xml\"); } "
"public void init$Children(){   children=new ASTNode[1];   setChild(new List(),0); } "
"public static <E>Stream<Map.Entry<E,E>> crossProductNoDoubles(Stream<E> stream){   Objects.requireNonNull(stream);   CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.noDoubles(stream.spliterator());   return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null); } "
"public void removeAllRoles(){   Helper.delete(W.create(\"uid\",this.getId()),UserRole.class); } "
"public static final String readString(byte[] bytes,int offset,int length,String charset) throws IOException {   return readString(bytes,0,bytes.length,Charset.forName(charset)); } "
"private static boolean checkComplexDerivation(XSComplexTypeDecl derived,XSTypeDefinition base,short block){   if (derived == base)   return true;   if ((derived.fDerivedBy & block) != 0)   return false;   XSTypeDefinition directBase=derived.fBaseType;   if (directBase == base)   return true;   if (directBase == SchemaGrammar.fAnyType || directBase == SchemaGrammar.fAnySimpleType) {     return false;   }   if (directBase.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE)   return checkComplexDerivation((XSComplexTypeDecl)directBase,base,block);   if (directBase.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {     if (base.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {       if (base == SchemaGrammar.fAnyType)       base=SchemaGrammar.fAnySimpleType;  else       return false;     }     return checkSimpleDerivation((XSSimpleType)directBase,(XSSimpleType)base,block);   }   return false; } "
"public MqttSubscriptionViewManager(final IKBus eventBus,final IConfigurationManager configurationManager,final MqttViewManager viewManager,final EventQueueManager<FormattedMqttMessage> uiEventQueue){   this.eventBus=eventBus;   this.configurationManager=configurationManager;   this.viewManager=viewManager;   this.uiEventQueue=uiEventQueue; } "
"public boolean isExclusiveReadLockOperation(){   return ((_templateOperation == SpaceOperations.READ || _templateOperation == SpaceOperations.READ_IE) && ReadModifiers.isExclusiveReadLock(_operationModifiers) && getXidOriginatedTransaction() != null); } "
"public void action(){ synchronized (myAgent) {     NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;     ACLMessage msg=new ACLMessage(ACLMessage.AGREE);     msg.setSender(a.getAID());     msg.addReceiver(a.ResultConsumer);     try {       msg.setContentObject(a.getName());     }  catch (    IOException ex) {       System.err.println(\"Cannot send move completion message. Sending empty message.\");       ex.printStackTrace(System.err);     }     a.send(msg);     if (!a.Silent) { synchronized (System.err) {         System.err.println(\"Sending move completion message\");       }     }     a.addBehaviour(new ReceiveTextsBehaviour(a,100));   } } "
"public BKLogSegmentWriter startLogSegment(long txId,boolean bestEffort,boolean allowMaxTxID) throws IOException {   Stopwatch stopwatch=Stopwatch.createStarted();   boolean success=false;   try {     BKLogSegmentWriter writer=doStartLogSegment(txId,bestEffort,allowMaxTxID);     success=true;     return writer;   }   finally {     if (success) {       openOpStats.registerSuccessfulEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));     }  else {       openOpStats.registerFailedEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));     }   } } "
"@Nullable(\"when haystack doesn't end with needle\") @Contract(pure=true) public static String trimEndOrNullize(@NotNull String haystack,@NotNull String needle){   if (haystack.endsWith(needle)) {     return haystack.substring(0,haystack.length() - needle.length());   }   return null; } "
"public void process(Document doc){   TreeWalker tw=DomUtils.createTreeWalker(doc,MaryXML.PROSODY);   Element e=null;   while ((e=(Element)tw.nextNode()) != null) {     Log.d(Mary.LOG,\"Found prosody element around '\" + DomUtils.getPlainTextBelow(e) + \"'\");     boolean hasRateAttribute=e.hasAttribute(\"rate\");     boolean hasContourAttribute=e.hasAttribute(\"contour\");     boolean hasPitchAttribute=e.hasAttribute(\"pitch\");     NodeList nl=e.getElementsByTagName(\"ph\");     if (nl.getLength() == 0) {       continue;     }     if (hasRateAttribute) {       applySpeechRateSpecifications(nl,e.getAttribute(\"rate\"));     }     if (hasPitchAttribute || hasContourAttribute) {       double[] f0Contour=getF0Contour(nl);       double[] coeffs=Polynomial.fitPolynomial(f0Contour,1);       double[] baseF0Contour=Polynomial.generatePolynomialValues(coeffs,F0CONTOUR_LENGTH,0,1);       double[] diffF0Contour=new double[F0CONTOUR_LENGTH];       for (int i=0; i < f0Contour.length; i++) {         diffF0Contour[i]=f0Contour[i] - baseF0Contour[i];       }       if (hasPitchAttribute) {         baseF0Contour=applyPitchSpecifications(nl,baseF0Contour,e.getAttribute(\"pitch\"));       }       if (hasContourAttribute) {         baseF0Contour=applyContourSpecifications(nl,baseF0Contour,e.getAttribute(\"contour\"));       }       for (int i=0; i < f0Contour.length; i++) {         f0Contour[i]=diffF0Contour[i] + baseF0Contour[i];       }       setModifiedContour(nl,f0Contour);     }   } } "
"private static String[] makeColumnNames(ColumnType types[]){   String[] header=new String[types.length];   for (int i=0; i < types.length; i++) {     header[i]=\"C\" + i;   }   return header; } "
"public String formatValue(Object value){   if (value == null) {     return EMPTY;   }   if (value instanceof Number) {     try {       return FORMAT_VALUE.format(value);     }  catch (    IllegalArgumentException ex) {       return NAN;     }   }  else {     return String.valueOf(value);   } } "
"public EqException(final String descr){   this(-1,descr); } "
"private void throwNotMutableException(){   throw new UnsupportedOperationException(\"This instance is not mutable\"); } "
"public QueryAnswers resolve(MatchQuery inputQuery,boolean materialise){   Query query=new ReasonerMatchQuery(inputQuery,graph);   return resolveQuery(query,materialise); } "
"public void beforeMemberAdded(MemberAddedEvent memberAddedEvent){ } "
"public Object parse(final String value,final Field field) throws NoSimpleValueParseException {   Object parsedValue=null;   Class<?> clazz=field.getType();   if (clazz.isAssignableFrom(Short.class) || clazz.isAssignableFrom(Short.TYPE)) {     parsedValue=Short.parseShort(value);   }  else   if (clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(Integer.TYPE)) {     parsedValue=Integer.parseInt(value);   }  else   if (clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(Float.TYPE)) {     parsedValue=Float.parseFloat(value);   }  else   if (clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(Double.TYPE)) {     parsedValue=Double.parseDouble(value);   }  else   if (clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(Long.TYPE)) {     parsedValue=Long.parseLong(value);   }  else   if (clazz.isAssignableFrom(Byte.class) || clazz.isAssignableFrom(Byte.TYPE)) {     parsedValue=Byte.parseByte(value);   }  else   if (clazz.isAssignableFrom(Character.class) || clazz.isAssignableFrom(Character.TYPE)) {     parsedValue=value.charAt(0);   }  else   if (clazz.isAssignableFrom(Boolean.class) || clazz.isAssignableFrom(Boolean.TYPE)) {     parsedValue=Boolean.parseBoolean(value);   }  else   if (clazz.isAssignableFrom(String.class)) {     parsedValue=value;   }  else   if (clazz.isEnum()) {     Object[] enumConstants=clazz.getEnumConstants();     for (    Object enumConstant : enumConstants) {       if (enumConstant.toString().equals(value)) {         parsedValue=enumConstant;       }     }   }   if (parsedValue == null) {     throw new NoSimpleValueParseException();   }   return parsedValue; } "
"@Nullable public static NlComponent findComponent(@NotNull ScreenView view,@SwingCoordinate int swingX,@SwingCoordinate int swingY){   return view.getModel().findLeafAt(getAndroidX(view,swingX),getAndroidY(view,swingY),false); } "
"protected boolean checkAttributes(Element currentRulePart,Element token){   NamedNodeMap attNodes=currentRulePart.getAttributes();   if (token == null)   return false;   for (int z=0; z < attNodes.getLength(); z++) {     Node el=attNodes.item(z);     String currentAtt=el.getNodeName();     String currentVal=el.getNodeValue();     if (!token.hasAttribute(currentAtt)) {       if (currentVal.equals(\"!\")) {         return true;       }       return false;     }     if (currentVal.equals(\"!\")) {       return false;     }     if (currentVal.equals(\"\")) {       return true;     }     if (!currentVal.startsWith(\"INLIST\") && !currentVal.startsWith(\"INFSTLIST\") && !currentVal.startsWith(\"!INLIST\")&& !currentVal.startsWith(\"!INFSTLIST\")) {       if (!currentVal.startsWith(\"!\")) {         if (!token.getAttribute(currentAtt).equals(currentVal)) {           return false;         }       }  else {         currentVal=currentVal.substring(1,currentVal.length());         if (token.getAttribute(currentAtt).equals(currentVal)) {           return false;         }       }     }  else {       return checkList(currentVal,token.getAttribute(currentAtt));     }   }   return true; } "
"public void actionPerformed(ActionEvent ev){   execute(\"load taxonomyFile=ncbi.tre mapfile=ncbi.map;collapse level=2;\"); } "
"@Override public KeyStore loadKeyStore(File file,String keyStoreType,String password){   KeyStore keyStore;   try {     keyStore=KeyStore.getInstance(keyStoreType);   }  catch (  KeyStoreException e) {     throw new KeyStoreAccessException(\"Unable to get KeyStore instance of type: \" + keyStoreType,e);   }   try {     InputStream keystoreAsStream=new FileInputStream(file);     keyStore.load(keystoreAsStream,password.toCharArray());   }  catch (  IOException e) {     throw new ImportException(\"Unable to read KeyStore from file: \" + file.getName(),e);   } catch (  CertificateException|NoSuchAlgorithmException e) {     throw new ImportException(\"Error while reading KeyStore\",e);   }   return keyStore; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_A_TO_SELF(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200793,skillcaster,skillname); } "
"public static void launchActivity(Activity context,Class<? extends Activity> activity,boolean closeCurrentActivity){   ActivityUtils.launchActivity(context,activity,closeCurrentActivity,null,null); } "
"void testCloseShouldNotFlushIfInErrorState(int rcToFailComplete) throws Exception {   DistributedLogConfiguration confLocal=newLocalConf();   confLocal.setImmediateFlushEnabled(false);   confLocal.setOutputBufferSize(Integer.MAX_VALUE);   confLocal.setPeriodicFlushFrequencyMilliSeconds(0);   ZKDistributedLock lock=createLock(\"/test/lock-\" + runtime.getMethodName(),zkc,true);   BKLogSegmentWriter writer=createLogSegmentWriter(confLocal,0L,-1L,lock);   ZKDistributedLock lock0=createLock(\"/test/lock-\" + runtime.getMethodName(),zkc0,false);   Future<ZKDistributedLock> lockFuture0=lock0.asyncAcquire();   int numRecords=10;   List<Future<DLSN>> futureList=new ArrayList<Future<DLSN>>(numRecords);   for (int i=0; i < numRecords; i++) {     futureList.add(writer.asyncWrite(DLMTestUtil.getLogRecordInstance(i)));   }   assertEquals(\"Last tx id should be \" + (numRecords - 1),numRecords - 1,writer.getLastTxId());   assertEquals(\"Last acked tx id should be -1\",-1L,writer.getLastTxIdAcknowledged());   assertEquals(\"Last DLSN should be \" + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());   assertEquals(\"Position should be \" + numRecords,10,writer.getPositionWithinLogSegment());   writer.setTransmitResult(rcToFailComplete);   try {     closeWriterAndLock(writer,lock);     fail(\"Close a log segment writer in error state should throw exception\");   }  catch (  BKTransmitException bkte) {     assertEquals(\"Inconsistent rc is thrown\",rcToFailComplete,bkte.getBKResultCode());   }   Await.result(lockFuture0);   lock0.checkOwnership();   assertEquals(\"Last tx id should still be \" + (numRecords - 1),numRecords - 1,writer.getLastTxId());   assertEquals(\"Last acked tx id should still be \" + (numRecords - 1),-1L,writer.getLastTxIdAcknowledged());   assertEquals(\"Last DLSN should still be \" + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());   assertEquals(\"Position should still be \" + numRecords,10,writer.getPositionWithinLogSegment());   for (int i=0; i < numRecords; i++) {     try {       Await.result(futureList.get(i));       fail(\"Should be aborted record \" + i + \" with transmit exception\");     }  catch (    WriteCancelledException wce) {       assertTrue(\"Record \" + i + \" should be aborted because of ledger fenced\",wce.getCause() instanceof BKTransmitException);       BKTransmitException bkte=(BKTransmitException)wce.getCause();       assertEquals(\"Record \" + i + \" should be aborted\",rcToFailComplete,bkte.getBKResultCode());     }   }   LedgerHandle lh=getLedgerHandle(writer);   LedgerHandle readLh=openLedgerNoRecovery(lh);   assertFalse(\"Ledger \" + lh.getId() + \" should not be closed\",readLh.isClosed());   assertEquals(\"There should be no entries in ledger \" + lh.getId(),LedgerHandle.INVALID_ENTRY_ID,readLh.getLastAddConfirmed()); } "
"private boolean isAttributeComboBoxPopulated(){   return !populatingAttributeComboBox; } "
"public boolean isCritical(){   return true; } "
"@Override public boolean next(){   boolean hasmore2=ss2.next();   if (hasmore2 && ss2.getVal(fldName2).equals(joinVal))   return true;   boolean hasmore1=ss1.next();   if (hasmore1 && ss1.getVal(fldName1).equals(joinVal)) {     ss2.restorePosition();     return true;   }   while (hasmore1 && hasmore2) {     Constant v1=ss1.getVal(fldName1);     Constant v2=ss2.getVal(fldName2);     if (v1.compareTo(v2) < 0)     hasmore1=ss1.next();  else     if (v1.compareTo(v2) > 0)     hasmore2=ss2.next();  else {       ss2.savePosition();       joinVal=ss2.getVal(fldName2);       return true;     }   }   return false; } "
"public static boolean checkRootPermission(){   return execCommand(\"echo root\",true,false,null).result == 0; } "
"public static void triggerForAllResourcePools(Service sender){   Query rpQuery=Query.Builder.create().addKindFieldClause(ResourcePoolState.class).build();   QueryTask rpQueryTask=QueryTask.Builder.createDirectTask().setQuery(rpQuery).build();   Operation.createPost(sender.getHost(),ServiceUriPaths.CORE_QUERY_TASKS).setBody(rpQueryTask).setCompletion(null).sendWith(sender); } "
"protected void maximizePanel(StateChangeReason reason){   animatePanelToState(PanelState.MAXIMIZED,reason); } "
"public VideoEditQuery privacyView(String... value){   return unsafeParam(\"privacy_view\",value); } "
"public void updateSceneLayer(ResourceManager resourceManager){ } "
"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {   in.defaultReadObject();   if (name == null)   throw new InvalidObjectException(\"name cannot be null\");   if (hash == 0)   throw new InvalidObjectException(\"hash cannot be zero\");   integrity=MarshalledWrapper.integrityEnforced(in); } "
"public OutgoingEmail(String subject,List<String> fromAddresses,List<String> toAddresses,List<String> bccAddresses,List<String> ccAddresses,List<String> replyToAddresses,EmailBody body,List<EmailAttachment> attachments,Map<String,String> headers){   this.subject=subject;   this.sentDate=now();   this.toAddresses=copyOf(toAddresses);   this.ccAddresses=copyOf(ccAddresses);   this.bccAddresses=copyOf(bccAddresses);   this.fromAddresses=copyOf(fromAddresses);   this.replyToAddresses=copyOf(replyToAddresses);   this.body=body;   this.attachments=copyOf(attachments);   this.headers=ImmutableMap.copyOf(headers); } "
"public static void pickImage(Activity activity){   pickImage(activity,REQUEST_PICK); } "
"public synchronized int status(){   return this.status; } "
"public RMIExtendedSocketFactory(String hostIpAddress) throws UnknownHostException {   if (hostIpAddress != null && hostIpAddress.length() >= 7) {     String[] octets=hostIpAddress.split(\"\\\\.\");     if (octets == null || octets.length != 4) {       throw new UnknownHostException(\"Invalid IP address: \" + hostIpAddress);     }     byte[] ipAddr=new byte[4];     for (int i=0; i < octets.length; i++) {       try {         ipAddr[i]=(byte)Integer.parseInt(octets[i]);       }  catch (      NumberFormatException nfEx) {         throw new UnknownHostException(\"Invalid IP address: \" + hostIpAddress);       }     }     hostInetAddress=InetAddress.getByAddress(ipAddr);   } } "
"public PassresetExample(){   oredCriteria=new ArrayList<Criteria>(); } "
"public UsersSearchQuery universityYear(Integer value){   return unsafeParam(\"university_year\",value); } "
"public boolean canBatch(Entry e){   return (!renewalsDone() && !e.renewalsDone() && sameConstraints(lease,e.lease)&& lease.canBatch(e.lease)&& (renewDuration == Lease.ANY || renew - e.renew <= renewalRTT / 2 || endTime - e.renew <= renewDuration / 2)&& (e.renewDuration == Lease.ANY || e.renew > renew - e.renewDuration || e.renew >= e.expiration - e.renewDuration)); } "
"private void loadSettings(){   Properties pIn=new Properties();   try {     if (!(new File(\"AutoSummENGGUI.properties\").exists()))     return;     FileInputStream fsIn=new FileInputStream(\"AutoSummENGGUI.properties\");     pIn.loadFromXML(fsIn);     fsIn.close();   }  catch (  IOException ioe) {     ioe.printStackTrace(System.err);     return;   }   try {     ModelsRootDirEdt.setText(pIn.getProperty(\"ModelDir\",\"./models\"));     SummariesRootDirEdt.setText(pIn.getProperty(\"SummaryDir\",\"./summaries\"));     OutputFileEdt.setText(pIn.getProperty(\"OutputFile\",\"./jinsect.table\"));     ThreadCntEdt.setValue(Integer.valueOf(pIn.getProperty(\"Threads\",\"2\")));     SilentChk.setSelected(Boolean.valueOf(pIn.getProperty(\"Silent\",Boolean.TRUE.toString())));     ProgressChk.setSelected(Boolean.valueOf(pIn.getProperty(\"ShowProgress\",Boolean.TRUE.toString())));     DoWordChk.setSelected(Boolean.valueOf(pIn.getProperty(\"DoWord\",Boolean.TRUE.toString())));     DoWordChkStateChanged(new ChangeEvent(DoWordChk));     DoCharChk.setSelected(Boolean.valueOf(pIn.getProperty(\"DoChar\",Boolean.TRUE.toString())));     DoCharChkStateChanged(new ChangeEvent(DoCharChk));     if (pIn.getProperty(\"Use\",\"Occurences\").equals(\"Occurences\"))     OccurencesChk.setSelected(true);  else     DistrosChk.setSelected(true);     CharMinEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharMin\",\"3\")));     CharMaxEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharMax\",\"3\")));     CharDistEdt.setValue(Integer.valueOf(pIn.getProperty(\"CharDist\",\"3\")));     WordMinEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordMin\",\"1\")));     WordMaxEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordMax\",\"2\")));     WordDistEdt.setValue(Integer.valueOf(pIn.getProperty(\"WordDist\",\"3\")));   }  catch (  Exception e) {     System.err.println(\"Could not load settings...\");     return;   }   PerformanceTableModel tTmp=new PerformanceTableModel();   DetailedResultsTbl.setModel(tTmp); } "
"@RequestMapping(value=\"/apps/del\",method=RequestMethod.POST) public JsonResponse delApp(@RequestParam(\"appName\") String appName){   Response<Boolean> delResp=appService.delete(appName);   if (!delResp.isSuccess()) {     Logs.error(\"failed to delete app({}), cause: {}\",appName,delResp.getErr());   }   return JsonResponse.ok(delResp.getData()); } "
"public SpaceStoppedException(String spaceMemberName,String s){   super(spaceMemberName,s); } "
"@PUT @Path(\"{table}/{key}\") @Consumes(MediaType.APPLICATION_JSON) @RequiresPermissions(\"sor|update|{table}\") @Timed(name=\"bv.emodb.sor.DataStoreResource1.replace\",absolute=true) @ApiOperation(value=\"Creates or replaces a piece of content in the data store.\",notes=\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" + \" version of the content, if it exists.  Expects a literal JSON representation\\n\" + \" of the object.\",response=SuccessResponse.class) public SuccessResponse replace(@PathParam(\"table\") String table,@PathParam(\"key\") String key,@QueryParam(\"changeId\") TimeUUIDParam changeIdParam,Map<String,Object> json,@QueryParam(\"audit\") AuditParam auditParam,@QueryParam(\"consistency\") @DefaultValue(\"STRONG\") WriteConsistencyParam consistency,@QueryParam(\"tag\") List<String> tags,@QueryParam(\"debug\") BooleanParam debug,@Authenticated Subject subject){   Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);   return doUpdate(table,key,changeIdParam,Deltas.literal(json),auditParam,consistency,debug,false,subject,tagsSet); } "
"public VideoSearchQueryWithExtended date(Integer value){   return unsafeParam(\"date\",value); } "
"public String sampa2voice(String sampaPhoneme){   if (sampa2voiceMap != null && sampa2voiceMap.containsKey(sampaPhoneme))   return sampa2voiceMap.get(sampaPhoneme);  else   return sampaPhoneme; } "
"public static ValueGetterSpacePredicate<ServerEntry> propertyNotNull(String propertyName){   return property(propertyName,isNotNull()); } "
"public boolean enabled(){   return soot.PhaseOptions.getBoolean(options,\"enabled\"); } "
"public AwsIotCompletion(long timeout,boolean isAsync){   super(null,null);   this.request=null;   this.timeout=timeout;   this.isAsync=isAsync; } "
"public Element createElementNS(String namespaceURI,String qualifiedName,String localpart) throws DOMException {   return new ElementNSImpl(this,namespaceURI,qualifiedName,localpart); } "
"BarcodeRow(int width){   this.row=new byte[width];   currentLocation=0; } "
"public boolean isApplicable(){   return true; } "
"@VisibleForTesting static OMAInfo parseDownloadDescriptor(InputStream is){   try {     XmlPullParserFactory factory=XmlPullParserFactory.newInstance();     factory.setNamespaceAware(true);     XmlPullParser parser=factory.newPullParser();     parser.setInput(is,null);     int eventType=parser.getEventType();     String currentAttribute=null;     OMAInfo info=new OMAInfo();     StringBuilder sb=null;     List<String> attributeList=new ArrayList<String>(Arrays.asList(OMA_TYPE,OMA_SIZE,OMA_OBJECT_URI,OMA_INSTALL_NOTIFY_URI,OMA_NEXT_URL,OMA_DD_VERSION,OMA_NAME,OMA_DESCRIPTION,OMA_VENDOR,OMA_INFO_URL,OMA_ICON_URI,OMA_INSTALL_PARAM));     while (eventType != XmlPullParser.END_DOCUMENT) {       if (eventType == XmlPullParser.START_DOCUMENT) {         if (!info.isEmpty())         return null;       }  else       if (eventType == XmlPullParser.START_TAG) {         String tagName=parser.getName();         if (attributeList.contains(tagName)) {           if (currentAttribute != null) {             Log.w(TAG,\"Nested attributes was found in the download descriptor\");             return null;           }           sb=new StringBuilder();           currentAttribute=tagName;         }       }  else       if (eventType == XmlPullParser.END_TAG) {         if (currentAttribute != null) {           if (!currentAttribute.equals(parser.getName())) {             Log.w(TAG,\"Nested attributes was found in the download descriptor\");             return null;           }           info.addAttributeValue(currentAttribute,sb.toString().trim());           currentAttribute=null;           sb=null;         }       }  else       if (eventType == XmlPullParser.TEXT) {         if (currentAttribute != null) {           sb.append(parser.getText());         }       }       eventType=parser.next();     }     return info;   }  catch (  XmlPullParserException e) {     Log.w(TAG,\"Failed to parse download descriptor.\",e);     return null;   } catch (  IOException e) {     Log.w(TAG,\"Failed to read download descriptor.\",e);     return null;   } } "
"private static boolean isGnome(){   return System.getenv(\"GNOME_DESKTOP_SESSION_ID\") != null; } "
"public ConfigurationParser(ClassLoader loader) throws ParserConfigurationException {   this(false,loader); } "
"public DatabaseGetSchoolsQuery(VkApiClient client,int cityId){   super(client,\"database.getSchools\",GetSchoolsResponse.class);   cityId(cityId); } "
"public static void mruAddByEntityName(String entityName,GenericEntity pk,Map<String,LifoSet<Object>> lookupCaches){   String cacheEntityName=entityName;   LifoSet<Object> lkupCache=lookupCaches.get(cacheEntityName);   if (lkupCache == null) {     lkupCache=new LifoSet<Object>();     lookupCaches.put(cacheEntityName,lkupCache);   }   lkupCache.add(pk.getPrimaryKey());   if (Debug.infoOn())   Debug.logInfo(\"in mruAddByEntityName, entityName:\" + entityName + \" lifoSet.size()\"+ lkupCache.size(),module); } "
"public boolean isRange(int start,int end,boolean value){   if (end < start) {     throw new IllegalArgumentException();   }   if (end == start) {     return true;   }   end--;   int firstInt=start / 32;   int lastInt=end / 32;   for (int i=firstInt; i <= lastInt; i++) {     int firstBit=i > firstInt ? 0 : start & 0x1F;     int lastBit=i < lastInt ? 31 : end & 0x1F;     int mask;     if (firstBit == 0 && lastBit == 31) {       mask=-1;     }  else {       mask=0;       for (int j=firstBit; j <= lastBit; j++) {         mask|=1 << j;       }     }     if ((bits[i] & mask) != (value ? mask : 0)) {       return false;     }   }   return true; } "
"public static void startMe(Context _context){   Intent intent=new Intent(_context,BucketActivity.class);   intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);   _context.startActivity(intent); } "
"public void startDocumentFragment(){   if (DEBUG_METHODS) {     System.out.println(toString() + \"#startDocumentFragment(\" + \")\");   }   fMatchedString=null;   for (int i=0; i < fLocationPaths.length; i++) {     fStepIndexes[i].clear();     fCurrentStep[i]=0;     fNoMatchDepth[i]=0;     fMatched[i]=0;   } } "
"public static SM_SYSTEM_MESSAGE STR_ARTIFACT_WIN_FORT_TO_ME(String value0){   return new SM_SYSTEM_MESSAGE(1390207,value0); } "
"public static List<? extends Element> childElementList(Element element,Set<String> childElementNames){   if (element == null)   return null;   List<Element> elements=new LinkedList<Element>();   if (childElementNames == null)   return elements;   Node node=element.getFirstChild();   if (node != null) {     do {       if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {         Element childElement=(Element)node;         elements.add(childElement);       }     }  while ((node=node.getNextSibling()) != null);   }   return elements; } "
"private void maybePerformMigrationTasks(){   if (DocumentModeManager.getInstance(this).isOptOutCleanUpPending()) {     cleanUpChromeRecents(DocumentModeManager.getInstance(this).isOptedOutOfDocumentMode());     DocumentModeManager.getInstance(this).setOptOutCleanUpPending(false);   } } "
"@Override public void startElement(String name,AttributeList atts) throws SAXException {   allowXMLCatalogPI=false;   if (documentHandler != null) {     documentHandler.startElement(name,atts);   } } "
"protected Map<String,Object> runService(MapMessage message){   Map<String,? extends Object> context=null;   String serviceName=null;   String xmlContext=null;   try {     serviceName=message.getString(\"serviceName\");     xmlContext=message.getString(\"serviceContext\");     if (serviceName == null || xmlContext == null) {       Debug.logError(\"Message received is not an OFB service message. Ignored!\",module);       return null;     }     Object o=XmlSerializer.deserialize(xmlContext,dispatcher.getDelegator());     if (Debug.verboseOn())     Debug.logVerbose(\"De-Serialized Context --> \" + o,module);     if (ObjectType.instanceOf(o,\"java.util.Map\"))     context=UtilGenerics.checkMap(o);   }  catch (  JMSException je) {     Debug.logError(je,\"Problems reading message.\",module);   } catch (  Exception e) {     Debug.logError(e,\"Problems deserializing the service context.\",module);   }   try {     ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);     if (!model.export) {       Debug.logWarning(\"Attempt to invoke a non-exported service: \" + serviceName,module);       return null;     }   }  catch (  GenericServiceException e) {     Debug.logError(e,\"Unable to get ModelService for service : \" + serviceName,module);   }   if (Debug.verboseOn())   Debug.logVerbose(\"Running service: \" + serviceName,module);   Map<String,Object> result=null;   if (context != null) {     try {       result=dispatcher.runSync(serviceName,context);     }  catch (    GenericServiceException gse) {       Debug.logError(gse,\"Problems with service invocation.\",module);     }   }   return result; } "
"private SubHyperplane<Euclidean3D> recurseFirstIntersection(final BSPTree<Euclidean3D> node,final Vector3D point,final Line line){   final SubHyperplane<Euclidean3D> cut=node.getCut();   if (cut == null) {     return null;   }   final BSPTree<Euclidean3D> minus=node.getMinus();   final BSPTree<Euclidean3D> plus=node.getPlus();   final Plane plane=(Plane)cut.getHyperplane();   final double offset=plane.getOffset((Point<Euclidean3D>)point);   final boolean in=FastMath.abs(offset) < getTolerance();   final BSPTree<Euclidean3D> near;   final BSPTree<Euclidean3D> far;   if (offset < 0) {     near=minus;     far=plus;   }  else {     near=plus;     far=minus;   }   if (in) {     final SubHyperplane<Euclidean3D> facet=boundaryFacet(point,node);     if (facet != null) {       return facet;     }   }   final SubHyperplane<Euclidean3D> crossed=recurseFirstIntersection(near,point,line);   if (crossed != null) {     return crossed;   }   if (!in) {     final Vector3D hit3D=plane.intersection(line);     if (hit3D != null && line.getAbscissa(hit3D) > line.getAbscissa(point)) {       final SubHyperplane<Euclidean3D> facet=boundaryFacet(hit3D,node);       if (facet != null) {         return facet;       }     }   }   return recurseFirstIntersection(far,point,line); } "
"private void clean(){   SREntry entry=(SREntry)fReferenceQueue.poll();   while (entry != null) {     removeEntry(entry);     entry=(SREntry)fReferenceQueue.poll();   } } "
"@Override public final int size(){   return getAll().size(); } "
"public static DefaultColumnEntity of(String name,Column... columns){   if (columns.length == 0) {     return new DefaultColumnEntity(name);   }   return of(name,Arrays.asList(columns)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200734,skillcaster,skillname); } "
"public static MutableContextSet empty(){   return new MutableContextSet(); } "
"public CallableTaskAdapter(Callable<T> callable){   this.callable=callable; } "
"public boolean hasAuthorities(){   for (  UserAuthorityGroup group : userAuthorityGroups) {     if (group != null && group.getAuthorities() != null && !group.getAuthorities().isEmpty()) {       return true;     }   }   return false; } "
"public boolean isValueOnly(){   return valueOnly; } "
"private void checkConfiguration(){   if (configuration == null) {     throw new IllegalStateException(ERROR_NOT_INIT);   } } "
"private Var addProperty(VarProperty property){   if (property.isUnique()) {     testUniqueProperty((UniqueVarProperty)property);   }   properties.add(property);   return this; } "
"@Override public void printStackTrace(){   printStackTrace(System.err); } "
"public static ISpaceQuery create(Class<?> entryClass,ISpacePredicate... predicates){   return new CustomSpaceQuery(entryClass,new AllSpacePredicate(predicates)); } "
"public static void o(Z[] a){   o(a,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces); } "
"public Buffer create(int level){   if (!canCreate()) {     return null;   }   Buffer buffer=new Buffer(bufferSize,level,randomGenerator);   List<Buffer> bufferList=bufferMap.get(level);   if (bufferList == null) {     bufferList=new ArrayList<Buffer>();     bufferMap.put(level,bufferList);   }   bufferList.add(buffer);   count++;   if (level > maxLevel) {     maxLevel=level;   }   return buffer; } "
"private float computeCorrelationCoefficentTransposed(String seriesNameX,String seriesNameY){   final ArrayList<Double> xValues=new ArrayList<>(getChartData().getClassNames().size());   final ArrayList<Double> yValues=new ArrayList<>(getChartData().getClassNames().size());   for (  String className : getChartData().getClassNames()) {     xValues.add(getChartData().getValueAsDouble(seriesNameX,className));     yValues.add(getChartData().getValueAsDouble(seriesNameY,className));   }   return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues); } "
"public GSBytesMessageImpl(GSSessionImpl session,byte[] bytesArray) throws JMSException {   super(session,GSMessageImpl.BYTES);   Body=bytesArray; } "
"public List<String> concernPackages(){   return null; } "
"public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){   this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;   this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;   return this; } "
"public ZWaveWakeUpCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint);   versionMax=MAX_SUPPORTED_VERSION;   wakeUpQueue=new ArrayBlockingQueue<SerialMessage>(MAX_BUFFFER_SIZE,true);   timer=new Timer(); } "
"public UrlSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){   validate();   urlSpaceFactoryBean.leaderSelector(leaderSelectorConfig);   return this; } "
"public final boolean forall(P2SetVisitor v){   for (BitSetIterator it=bits.iterator(); it.hasNext(); ) {     v.visit((Node)pag.getAllocNodeNumberer().get(it.next()));   }   return v.getReturnValue(); } "
"public void onRelease(K key,R resource){ } "
"private void sendCrashLog2PM(String fileName){   if (!new File(fileName).exists()) {     return;   }   FileInputStream fis=null;   BufferedReader reader=null;   String s=null;   try {     fis=new FileInputStream(fileName);     reader=new BufferedReader(new InputStreamReader(fis,\"GBK\"));     while (true) {       s=reader.readLine();       if (s == null)       break;       Log.i(\"info\",s.toString());     }   }  catch (  FileNotFoundException e) {     e.printStackTrace();   } catch (  IOException e) {     e.printStackTrace();   }  finally {     try {       reader.close();       fis.close();     }  catch (    IOException e) {       e.printStackTrace();     }   } } "
"public void removeEnvVar(int rowIndex){   EnvVar envVar=dataList.get(rowIndex);   if (this.envMgr != null) {     this.envMgr.removeEnvVar(envVar);   }   dataList.remove(rowIndex);   this.fireTableDataChanged(); } "
"public void addContactMech(String contactMechPurposeTypeId,String contactMechId){   if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException(\"You must specify a contactMechPurposeTypeId to add a ContactMech\");   contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId); } "
"public boolean hasValidOTP(){   return makeOTP().length() == 4; } "
"public boolean isSetBackToTop(boolean home){   if (home) {     return !backValue.equals(\"none\");   }  else {     return backValue.equals(\"all\");   } } "
"protected void initConfig(KadminProducerConfig config){ } "
"public QuestRewardCursor queryQuestRewardItem(long id){   return mHelper.queryQuestRewardItem(id); } "
"public static LineIterator lineIterator(File file) throws IOException {   return lineIterator(file,null); } "
"public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){   GenericPK newPK=new GenericPK();   newPK.init(delegator,modelEntity,singlePkValue);   return newPK; } "
"@Override public void redoAction(UndoInterface undoRedoObject){   if (groupCheckbox != null) {     Boolean newValue=(Boolean)undoRedoObject.getNewValue();     groupCheckbox.setSelected(newValue.booleanValue());     enableSubGroups(newValue.booleanValue());   } } "
"public SubLine(final Vector2D start,final Vector2D end,final double tolerance){   super(new Line(start,end,tolerance),buildIntervalSet(start,end,tolerance)); } "
"public static boolean isNumber(Object s){   if (s == null) {     return false;   }   if (s instanceof Number) {     return true;   }   String s1=s.toString();   if (s1.length() == 0) {     return false;   }   int dot=0;   for (int i=0; i < s1.length(); i++) {     char c=s1.charAt(i);     if (c == '.') {       dot++;       if (dot > 1) {         return false;       }     }  else     if (c == '-' && i == 0) {       continue;     }  else     if (c < '0' || c > '9') {       return false;     }   }   return true; } "
"private static boolean ignoreUsage(UsageInfo usage){   if (usage.getReference() instanceof GlobReference && usage instanceof SafeDeleteUsageInfo) {     PsiElement referencedElement=((SafeDeleteUsageInfo)usage).getReferencedElement();     PsiFileSystemItem file=ResolveUtil.asFileSystemItemSearch(referencedElement);     String relativePath=getBlazePackageRelativePathToFile(file);     if (relativePath == null) {       return false;     }     return !((GlobReference)usage.getReference()).matchesDirectly(relativePath,file.isDirectory());   }   return false; } "
"private void scroll(float x,float y,float amountX,float amountY,boolean isTilt){   if ((!mScroller.isFinished() && isTilt) || mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.UNDISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.ENTER_STACK)) {     return;   }   float amountScreen=mCurrentMode == Orientation.PORTRAIT ? amountY : amountX;   float amountScroll=amountScreen;   float amountEvenOut=amountScreen;   float tabScrollSpaceFinal=0;   if (mScrollingTab == null || isTilt) {     mScrollingTab=getTabAtPositon(x,y);   }   if (mScrollingTab == null && mInSwipe && mStackTabs != null) {     int index=mTabModel.index();     if (index >= 0 && index <= mStackTabs.length)     mScrollingTab=mStackTabs[index];   }   if (mScrollingTab == null) {     if (!isTilt) {       amountScroll=0;       amountEvenOut=0;     }   }  else   if (mScrollingTab.getIndex() == 0) {     amountEvenOut=0;   }  else {     float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;     float tabScreen=scrollToScreen(tabScrollSpace);     tabScrollSpaceFinal=screenToScroll(tabScreen + amountScreen);     amountScroll=tabScrollSpaceFinal - tabScrollSpace;     amountScroll=Math.signum(amountScreen) * MathUtils.clamp(Math.abs(amountScroll),Math.abs(amountScreen) * 0.5f,Math.abs(amountScreen) * 2.0f);   }   if (evenOutTabs(amountEvenOut,false) && mScrollingTab.getIndex() > 0) {     float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;     amountScroll=tabScrollSpaceFinal - tabScrollSpace;   }   setScrollTarget(mScrollTarget + amountScroll,false); } "
"private Vector resolveLocalSystemReverse(String systemId){   Vector map=new Vector();   String osname=System.getProperty(\"os.name\");   boolean windows=(osname.indexOf(\"Windows\") >= 0);   Enumeration en=catalogEntries.elements();   while (en.hasMoreElements()) {     CatalogEntry e=(CatalogEntry)en.nextElement();     if (e.getEntryType() == SYSTEM && (e.getEntryArg(1).equals(systemId) || (windows && e.getEntryArg(1).equalsIgnoreCase(systemId)))) {       map.addElement(e.getEntryArg(0));     }   }   if (map.size() == 0) {     return null;   }  else {     return map;   } } "
"public Observable<Bitmap> captureRx(){   return captureRx(null); } "
"protected boolean isOlderUpdate(final SourceDataTagQuality newSDQuality,final SourceDataTagQuality currentSDQuality,final long newTimestamp,final long currentTimestamp){   this.equipmentLogger.debug(\"isOlderUpdate - entering isOlderUpdate()\");   if (newTimestamp < currentTimestamp) {     this.equipmentLogger.trace(\"isOlderUpdate - New timestamp is older or equal than current TS (\" + newTimestamp + \", \"+ currentTimestamp+ \")\");     if (currentSDQuality.getQualityCode() == SourceDataTagQualityCode.DATA_UNAVAILABLE) {       if (newSDQuality.isValid()) {         this.equipmentLogger.trace(\"isOlderUpdate - The current value has DATA_UNAVAILABLE Quality but new value has Good Quality. Not filter\");         return false;       }  else {         this.equipmentLogger.trace(\"isOlderUpdate - The current value has DATA_UNAVAILABLE Quality and new value has Bad Quality. Filter out \");         return true;       }     }  else {       this.equipmentLogger.trace(\"isOlderUpdate - The current value quality is different to DATA_UNAVAILABLE. Filter out \");       return true;     }   }   this.equipmentLogger.trace(\"isOlderUpdate - New timestamp is newer or equal than current TS. Not filter\");   return false; } "
"public static void initCatalogMgr(boolean isNew,Transaction tx){   catalogMgr=new CatalogMgr(isNew,tx); } "
"private Response buildJSONResponse(Object o) throws JsonProcessingException {   return newFixedLengthResponse(MAPPER.writeValueAsString(o)); } "
"public static <E>ForkJoinTask<E> forEach(Collection<E> list,Predicate<E> operation){   if (list.size() > 0) {     @SuppressWarnings(\"unchecked\") E[] objects=list.toArray((E[])new Object[list.size()]);     CountedCompleter<E> completer=new ForEach<E>(null,operation,0,objects.length,objects);     return completer;   }   return null; } "
"public void onTouchSearchContentViewAck(){   mHasContentBeenTouched=true; } "
"static public void syncFormattingFromViewer2Summary(ClassificationViewer classificationViewer,DataTable table){   final String classificationName=classificationViewer.getClassName();   if (classificationViewer.getDirtyNodeIds().size() > 0) {     StringBuilder buf=new StringBuilder();     for (    Integer fviewerId : classificationViewer.getDirtyNodeIds()) {       try {         Node v=classificationViewer.getANode(fviewerId);         if (v != null) {           String format=classificationViewer.getNV(v).toString(false);           buf.append(fviewerId).append(\":\").append(format);         }       }  catch (      NotOwnerException ex) {       }     }     table.setNodeFormats(classificationName,buf.toString());   }  else   table.setNodeFormats(classificationName,null);   if (classificationViewer.getDirtyEdgeIds().size() > 0) {     StringBuilder buf=new StringBuilder();     for (    Pair<Integer,Integer> pair : classificationViewer.getDirtyEdgeIds()) {       Edge e=null;       Set<Node> nodes=classificationViewer.getNodes(pair.getFirst());       if (nodes != null) {         for (        Node v : nodes) {           for (          Node w : classificationViewer.getNodes(pair.getSecond())) {             e=v.getCommonEdge(w);             if (e != null)             break;           }           if (e != null)           break;         }       }       if (e != null) {         String format=classificationViewer.getEV(e).toString(false);         buf.append(pair.getFirst()).append(\",\").append(pair.getSecond()).append(\":\").append(format);       }     }     table.setEdgeFormats(classificationName,buf.toString());   }  else   table.setEdgeFormats(classificationName,null);   table.setNodeStyle(classificationName,classificationViewer.getNodeDrawer().getStyle().toString());   Set<Integer> collapsed=new HashSet<>();   collapsed.addAll(classificationViewer.getCollapsedIds());   if (collapsed.size() == 0)   collapsed.add(-1);   table.setCollapsed(classificationName,collapsed); } "
"public static String toString(InputStream input,String encoding) throws IOException {   return toString(input,Charsets.toCharset(encoding)); } "
"private boolean checkDependencies(){   if (scalaLibraryDirectory == null || !scalaLibraryDirectory.isDirectory()) {     LOGGER.warning(\"Unable to identify scala library directory \" + scalaLibraryDirectory.getAbsolutePath());     return false;   }   for (  String libraryName : SCALA_JARS) {     String library=FileUtility.joinPath(scalaLibraryDirectory.getAbsolutePath(),libraryName);     if (!new File(library).canRead()) {       LOGGER.warning(\"Missing or inaccessible library \" + library);       return false;     }   }   return true; } "
"public boolean update(final TagValueUpdate tagValueUpdate){   Tag clone=null;   boolean valid=false;   updateTagLock.writeLock().lock();   try {     valid=isValidUpdate(tagValueUpdate);     if (valid) {       doUpdateValues(tagValueUpdate);       clone=this.clone();     }   }   finally {     updateTagLock.writeLock().unlock();   }   if (clone != null) {     notifyListeners(clone);   }   return valid; } "
"protected void drawDataSet(Canvas c,IRadarDataSet dataSet,int mostEntries){   float phaseX=mAnimator.getPhaseX();   float phaseY=mAnimator.getPhaseY();   float sliceangle=mChart.getSliceAngle();   float factor=mChart.getFactor();   PointF center=mChart.getCenterOffsets();   Path surface=new Path();   boolean hasMovedToPoint=false;   for (int j=0; j < dataSet.getEntryCount(); j++) {     mRenderPaint.setColor(dataSet.getColor(j));     Entry e=dataSet.getEntryForIndex(j);     PointF p=Utils.getPosition(center,(e.getVal() - mChart.getYChartMin()) * factor * phaseY,sliceangle * j * phaseX + mChart.getRotationAngle());     if (Float.isNaN(p.x))     continue;     if (!hasMovedToPoint) {       surface.moveTo(p.x,p.y);       hasMovedToPoint=true;     }  else     surface.lineTo(p.x,p.y);   }   if (dataSet.getEntryCount() > mostEntries) {     surface.lineTo(center.x,center.y);   }   surface.close();   if (dataSet.isDrawFilledEnabled()) {     final Drawable drawable=dataSet.getFillDrawable();     if (drawable != null) {       drawFilledPath(c,surface,drawable);     }  else {       drawFilledPath(c,surface,dataSet.getFillColor(),dataSet.getFillAlpha());     }   }   mRenderPaint.setStrokeWidth(dataSet.getLineWidth());   mRenderPaint.setStyle(Paint.Style.STROKE);   if (!dataSet.isDrawFilledEnabled() || dataSet.getFillAlpha() < 255)   c.drawPath(surface,mRenderPaint); } "
"public void denyAll(PermissionFlag flag,Message message){   generalPermissions.put(flag,message);   strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null); } "
"public boolean isApplicable(){   return getViewer() instanceof MainViewer && getDir().getDocument().getNumberOfSamples() > 0; } "
"public AdamsBashforthFieldIntegrator(final Field<T> field,final int nSteps,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance) throws MathIllegalArgumentException {   super(field,METHOD_NAME,nSteps,nSteps,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance); } "
"private static URL fileToURL(File file) throws MalformedURLException {   String name;   try {     name=file.getCanonicalPath();   }  catch (  IOException e) {     name=file.getAbsolutePath();   }   name=name.replace(File.separatorChar,'/');   if (!name.startsWith(\"/\")) {     name=\"/\" + name;   }   if (!file.isFile()) {     name=name + \"/\";   }   return new URL(\"file\",\"\",name); } "
"public static byte[] toByteArray(URI uri) throws IOException {   return IOUtils.toByteArray(uri.toURL()); } "
"public MediaFormat(){   mMap=new HashMap<String,Object>(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1201254,skillcaster,skillname); } "
"@Override public void justSelected(){   setCachedExpression(generateExpression());   checkSymbolIsValid(); } "
"public void put(Object key,Object value){   int bucket=(key.hashCode() & 0x7FFFFFFF) % fTableSize;   Entry entry=search(key,bucket);   if (entry != null) {     entry.value=value;   }  else {     entry=new Entry(key,value,fBuckets[bucket]);     fBuckets[bucket]=entry;     fNum++;   } } "
"public void addSuperInterfaceId(Access node){   List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();   list.addChild(node); } "
"String calculateRawEncoding(String bomEnc,String xmlGuessEnc,String xmlEnc) throws IOException {   if (bomEnc == null) {     if (xmlGuessEnc == null || xmlEnc == null) {       return defaultEncoding == null ? UTF_8 : defaultEncoding;     }     if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {       return xmlGuessEnc;     }     return xmlEnc;   }   if (bomEnc.equals(UTF_8)) {     if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     return bomEnc;   }   if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {     if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     return bomEnc;   }   if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {     if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {       String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});       throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);     }     return bomEnc;   }   String msg=MessageFormat.format(RAW_EX_2,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});   throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc); } "
"public static boolean onRender(Entity entity,double x,double y,double z,float yaw,float partialTicks){   GlStateManager.pushMatrix();   final boolean successful=OpenModLoader.getEventBus().post(new Shadows(entity,x,y,z,yaw,partialTicks));   GlStateManager.popMatrix();   return successful; } "
"@Override public void beforeFirst(){   s.beforeFirst();   isLhsEmpty=!s.next();   if (!isLhsEmpty)   resetIndex(); } "
"private static String queryKeyValue(Integer keyHandle,String valueName){   byte[] rawValueName=toByteArray(valueName);   byte[] rawResult=invokeRegistryMethod(_queryValueMethod,keyHandle,rawValueName);   if (rawResult == null)   return null;   String result=new String(rawResult,0,rawResult.length - 1);   return result; } "
"@Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException { } "
"@Nullable public static PsiFileSystemItem asFileSystemItemSearch(PsiElement elementToSearch){   if (elementToSearch instanceof PsiFileSystemItem) {     return (PsiFileSystemItem)elementToSearch;   }   return asFileSearch(elementToSearch); } "
"private Set<String> loadAndroidCallbacks() throws IOException {   Set<String> androidCallbacks=new HashSet<String>();   BufferedReader rdr=null;   try {     String fileName=JadeCfg.getCallback_file();     if (!new File(fileName).exists()) {       fileName=\"../soot-infoflow-android/AndroidCallbacks.txt\";       if (!new File(fileName).exists())       throw new RuntimeException(\"Callback definition file not found\");     }     rdr=new BufferedReader(new FileReader(fileName));     String line;     while ((line=rdr.readLine()) != null)     if (!line.isEmpty())     androidCallbacks.add(line);   }   finally {     if (rdr != null)     rdr.close();   }   return androidCallbacks; } "
"private long[] helperHuntingRewardMonster(long id){   ArrayList<Long> ids=new ArrayList<Long>();   ids.add(id);   MonsterCursor monsterCursor=mHelper.queryMonster(id);   monsterCursor.moveToFirst();   String name=monsterCursor.getMonster().getName();   monsterCursor.close();   monsterCursor=mHelper.queryMonsterTrait(name);   monsterCursor.moveToFirst();   while (!monsterCursor.isAfterLast()) {     ids.add(monsterCursor.getMonster().getId());     monsterCursor.moveToNext();   }   monsterCursor.close();   long[] idArray=new long[ids.size()];   for (int i=0; i < idArray.length; i++) {     idArray[i]=ids.get(i);   }   return idArray; } "
"public static boolean useDarkTheme(){   return sDarkTheme; } "
"protected boolean canTriggerWalking(){   return false; } "
"private String printGFormat(double x){   String sx, sy, sz, ret;   int savePrecision=precision;   int i;   char[] ca4, ca5;   boolean noDigits=false;   if (Double.isInfinite(x)) {     if (x == Double.POSITIVE_INFINITY) {       if (leadingSign)       ca4=\"+Inf\".toCharArray();  else       if (leadingSpace)       ca4=\" Inf\".toCharArray();  else       ca4=\"Inf\".toCharArray();     }  else     ca4=\"-Inf\".toCharArray();     noDigits=true;   }  else   if (Double.isNaN(x)) {     if (leadingSign)     ca4=\"+NaN\".toCharArray();  else     if (leadingSpace)     ca4=\" NaN\".toCharArray();  else     ca4=\"NaN\".toCharArray();     noDigits=true;   }  else {     if (!precisionSet)     precision=defaultDigits;     if (precision == 0)     precision=1;     int ePos=-1;     if (conversionCharacter == 'g') {       sx=eFormatString(x,'e').trim();       ePos=sx.indexOf('e');     }  else {       sx=eFormatString(x,'E').trim();       ePos=sx.indexOf('E');     }     i=ePos + 1;     int expon=0;     if (sx.charAt(i) == '-') {       for (++i; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;       if (i < sx.length())       expon=-Integer.parseInt(sx.substring(i));     }  else {       if (sx.charAt(i) == '+')       ++i;       for (; i < sx.length(); i++)       if (sx.charAt(i) != '0')       break;       if (i < sx.length())       expon=Integer.parseInt(sx.substring(i));     }     if (!alternateForm) {       if (expon >= -4 && expon < precision)       sy=fFormatString(x).trim();  else       sy=sx.substring(0,ePos);       i=sy.length() - 1;       for (; i >= 0; i--)       if (sy.charAt(i) != '0')       break;       if (i >= 0 && sy.charAt(i) == '.')       i--;       if (i == -1)       sz=\"0\";  else       if (!Character.isDigit(sy.charAt(i)))       sz=sy.substring(0,i + 1) + \"0\";  else       sz=sy.substring(0,i + 1);       if (expon >= -4 && expon < precision)       ret=sz;  else       ret=sz + sx.substring(ePos);     }  else {       if (expon >= -4 && expon < precision)       ret=fFormatString(x).trim();  else       ret=sx;     }     if (leadingSpace)     if (x >= 0)     ret=\" \" + ret;     ca4=ret.toCharArray();   }   ca5=applyFloatPadding(ca4,false);   precision=savePrecision;   return new String(ca5); } "
"public Builder dashArray(String dashArray){   this.dashArray=dashArray;   return this; } "
"private void extrapolate(final int offset,final int k,final double[][] diag,final double[] last){   for (int j=1; j < k; ++j) {     for (int i=0; i < last.length; ++i) {       diag[k - j - 1][i]=diag[k - j][i] + coeff[k + offset][j - 1] * (diag[k - j][i] - diag[k - j - 1][i]);     }   }   for (int i=0; i < last.length; ++i) {     last[i]=diag[0][i] + coeff[k + offset][k - 1] * (diag[0][i] - last[i]);   } } "
"public static int count(Iterator tuples,String field){   int i=0;   for (; tuples.hasNext(); ++i, tuples.next())   ;   return i; } "
"public DocumentTypeImpl(CoreDocumentImpl ownerDocument,String qualifiedName,String publicID,String systemID){   this(ownerDocument,qualifiedName);   this.publicID=publicID;   this.systemID=systemID; } "
"@Override public boolean equals(Object o){   return o instanceof AirMapAircraft && getAircraftId().equals(((AirMapAircraft)o).getAircraftId()); } "
"@Override public int hashCode(){   final int prime=31;   int result=1;   result=prime * result + ((carbonTableIdentifier == null) ? 0 : carbonTableIdentifier.hashCode());   result=prime * result + ((storePath == null) ? 0 : storePath.hashCode());   return result; } "
"public void createOutFile(String filePath) throws IOException {   this.outFile=new ExifInterface(filePath); } "
"public ArraySet(ArraySet<E> set){   this();   if (set != null) {     addAll(set);   } } "
"public static RoundedBitmapDrawable bitmapToCircularBitmapDrawable(Resources resources,Bitmap bitmap){   RoundedBitmapDrawable roundedBitmap=RoundedBitmapDrawableFactory.create(resources,bitmap);   roundedBitmap.setCircular(true);   return roundedBitmap; } "
"public void cancelConfirmationWindow(){   clickButton(NO_BUTTON_TEXT); } "
"@Override public int read(byte[] bytes,int offset,int length) throws IOException {   if (eof) {     throw new IOException(\"Read after end of file\");   }   if (position == size) {     return doEndOfFile();   }   position+=length;   int returnLength=length;   if (position > size) {     returnLength=length - (int)(position - size);     position=size;   }   processBytes(bytes,offset,returnLength);   return returnLength; } "
"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {   String simpleMethodName=method.getName();   Class[] params=method.getParameterTypes();   if (\"equals\".equals(simpleMethodName) && params.length == 1 && params[0].equals(Object.class)) {     Object value=args[0];     if (value == null || !Proxy.isProxyClass(value.getClass())) {       return Boolean.FALSE;     }     FastServletProxyInvocationHandler handler=(FastServletProxyInvocationHandler)Proxy.getInvocationHandler(value);     return this.url.equals(handler.getURL()) ? Boolean.TRUE : Boolean.FALSE;   }   if (\"hashCode\".equals(simpleMethodName) && params.length == 0) {     return Integer.valueOf(this.url.hashCode());   }   if (\"toString\".equals(simpleMethodName) && params.length == 0) {     return \"[FastServletProxyInvocationHandler \" + this.url + \"]\";   }   return this.invokeRemoteMethod(proxy,method,args); } "
"public static void delete(long uid,String sid){   delete(W.create(\"uid\",uid).and(\"sid\",sid)); } "
"private UnivariatePointValuePair best(UnivariatePointValuePair a,UnivariatePointValuePair b,boolean isMinim){   if (a == null) {     return b;   }   if (b == null) {     return a;   }   if (isMinim) {     return a.getValue() <= b.getValue() ? a : b;   }  else {     return a.getValue() >= b.getValue() ? a : b;   } } "
"public static void close(URLConnection conn){   if (conn instanceof HttpURLConnection) {     ((HttpURLConnection)conn).disconnect();   } } "
"public FieldConfigFeatureTypeConstraint(FieldConfigCommonData commonData){   super(commonData);   filterModel=new FeatureTypeConstraintModel(this);   extentModel=new ExtentModel(this); } "
"public void addModifier(ItemIdOuterClass.ItemId item) throws LoginFailedException, RemoteServerException {   AsyncHelper.toBlocking(addModifierAsync(item)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_ME_TO_SELF(String skillname){   return new SM_SYSTEM_MESSAGE(1200353,skillname); } "
"public static <T>CopyOnWriteArrayList<T> copyOnWriteArrayList(){   return new CopyOnWriteArrayList<T>(); } "
"public void outputComplete(){   final int bufferIndex=(int)(outputCnt % bufferSize);   inputs.set(bufferIndex,null);   outputs.set(bufferIndex,null);   outputCnt++;   outputThreadLock.unlock(); } "
"public void addRenderer(RenderSymbolInterface renderer){   if (!rendererList.contains(renderer)) {     rendererList.add(renderer);   } } "
"protected boolean isXml(HttpServletRequest request){   String type=request.getContentType();   type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;   if (request.getPathInfo().endsWith(\".xml\")) {     type=MediaType.APPLICATION_XML_VALUE;   }   return isCompatibleWith(type,MediaType.APPLICATION_XML); } "
"@SuppressWarnings(\"WeakerAccess\") public boolean hasHeader(){   return header != null; } "
"public static void main(String[] args){   FileSystemExtension mgr=new FileSystemExtension();   mgr.initialise(null,null);   JPanel panel=mgr.getPanel();   JFrame frame=new JFrame();   frame.getContentPane().add(panel);   frame.setVisible(true);   frame.setSize(400,600); } "
"public static int[] calculateRGB(String accountName) throws UnsupportedEncodingException, NoSuchAlgorithmException {   String username=AccountUtils.getAccountUsername(accountName);   byte[] seed=username.getBytes(\"UTF-8\");   MessageDigest md=MessageDigest.getInstance(\"MD5\");   Integer seedMd5Int=String.format(Locale.ROOT,\"%032x\",new BigInteger(1,md.digest(seed))).hashCode();   double maxRange=Integer.MAX_VALUE;   float hue=(float)(seedMd5Int / maxRange * 360);   return BitmapUtils.HSLtoRGB(hue,90.0f,65.0f,1.0f); } "
"public boolean all_reachable(){   return soot.PhaseOptions.getBoolean(options,\"all-reachable\"); } "
"public void startPause(){   if (mTimer.hasStarted()) {     if (mTimer.isRunning()) {       mTimer.pause();     }  else {       mTimer.resume();     }   }  else {     mTimer.start();   }   update(); } "
"public char readChar() throws JMSException {   initializeReading();   try {     this.dataIn.mark(Integer.MAX_VALUE);     return this.dataIn.readChar();   }  catch (  EOFException eof) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageEOFException(eof.toString());     jmsEx.setLinkedException(eof);     throw jmsEx;   } catch (  IOException ioe) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());     jmsEx.setLinkedException(ioe);     throw jmsEx;   } } "
"public boolean contains(T obj){   lock.lock();   try {     if (_objectsMap != null) {       return _objectsMap.containsKey(obj);     }     return contains_impl(obj);   }   finally {     lock.unlock();   } } "
"private void parseActions(){   StringTokenizer st=new StringTokenizer(actions,\" ,\",true);   boolean comma=false;   while (st.hasMoreTokens()) {     String act=st.nextToken();     if (act.equals(\" \")) {       continue;     }  else     if (comma) {       if (!act.equals(\",\")) {         comma=false;         break;       }     }  else     if (act.equalsIgnoreCase(\"connect\")) {       mask|=CONNECT;     }  else     if (act.equalsIgnoreCase(\"accept\")) {       mask|=ACCEPT;     }  else     if (act.equalsIgnoreCase(\"delegate\")) {       mask|=DELEGATE;     }  else     if (act.equalsIgnoreCase(\"listen\")) {       mask|=LISTEN;     }  else {       break;     }     comma=!comma;   }   if (!comma) {     throw new IllegalArgumentException(\"invalid actions\");   } } "
"public XMLErrorCode(String domain,String key){   fDomain=domain;   fKey=key; } "
"public VideoGetAlbumsQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"@Override public void onTxEndStatement(Transaction tx){   lockTbl.releaseAll(txNum,true); } "
"public MessagesDeleteDialogQuery(VkApiClient client,Actor actor){   super(client,\"messages.deleteDialog\",OkResponse.class);   accessToken(actor.getAccessToken()); } "
"public static Class forName(String name) throws ClassNotFoundException {   return forName(name,getDefaultClassLoader()); } "
"public static boolean isConstantAttribute(String attributeValue){   if (attributeValue.length() > 0) {     return !FlexibleStringExpander.containsExpression(FlexibleStringExpander.getInstance(attributeValue));   }   return true; } "
"@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {   float[] pScalesArray={1.0f};   float[] tScalesArray={1.0f};   float[] tScalesTimes={1.0f};   float[] pScalesTimes={1.0f};   return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft); } "
"public long validate(long actual,long max,long min,long defaultVal){   if (actual <= max && actual >= min) {     return actual;   }   return defaultVal; } "
"public static boolean isValidIANAEncoding(String ianaEncoding){   if (ianaEncoding != null) {     int length=ianaEncoding.length();     if (length > 0) {       char c=ianaEncoding.charAt(0);       if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {         for (int i=1; i < length; i++) {           c=ianaEncoding.charAt(i);           if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {             return false;           }         }         return true;       }     }   }   return false; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200671,skillcaster,skillname); } "
"public Builder maxZoom(Number maxZoom){   this.maxZoom=maxZoom;   return this; } "
"private Object handleRuleWithInvalidTags(final Map<Long,Object> pInputParams) throws RuleEvaluationException {   final Object result=tryToIgnoreInvalidTags(pInputParams);   if (isResultInvalid(result)) {     throw new RuleEvaluationException(\"Cannot evaluate rule: Invalid tags found!\");   }   return result; } "
"public SM_UPDATE_SESSION(SessionKey key){   super(0x0c);   this.accountId=key.accountId;   this.loginOk=key.loginOk; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_ME_TO_B(String skilltarget,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200559,skilltarget,value0,skillname); } "
"public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){   if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {     int tempSpec=widthMeasureSpec;     widthMeasureSpec=heightMeasureSpec;     heightMeasureSpec=tempSpec;   }   int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);   int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);   if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {     width=widthMeasureSpec;     height=heightMeasureSpec;   }  else   if (mVideoWidth > 0 && mVideoHeight > 0) {     int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);     int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);     int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);     int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);     if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {       float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;       float displayAspectRatio; switch (mCurrentAspectRatio) { case IRenderView.AR_16_9_FIT_PARENT:         displayAspectRatio=16.0f / 9.0f;       if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;     break; case IRenderView.AR_4_3_FIT_PARENT:   displayAspectRatio=4.0f / 3.0f; if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio; break; case IRenderView.AR_ASPECT_FIT_PARENT: case IRenderView.AR_ASPECT_FILL_PARENT: case IRenderView.AR_ASPECT_WRAP_CONTENT: default : displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight; if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen; break; } boolean shouldBeWider=displayAspectRatio > specAspectRatio; switch (mCurrentAspectRatio) { case IRenderView.AR_ASPECT_FIT_PARENT: case IRenderView.AR_16_9_FIT_PARENT: case IRenderView.AR_4_3_FIT_PARENT: if (shouldBeWider) { width=widthSpecSize; height=(int)(width / displayAspectRatio); }  else { height=heightSpecSize; width=(int)(height * displayAspectRatio); } break; case IRenderView.AR_ASPECT_FILL_PARENT: if (shouldBeWider) { height=heightSpecSize; width=(int)(height * displayAspectRatio); }  else { width=widthSpecSize; height=(int)(width / displayAspectRatio); } break; case IRenderView.AR_ASPECT_WRAP_CONTENT: default : if (shouldBeWider) { width=Math.min(mVideoWidth,widthSpecSize); height=(int)(width / displayAspectRatio); }  else { height=Math.min(mVideoHeight,heightSpecSize); width=(int)(height * displayAspectRatio); } break; } }  else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) { width=widthSpecSize; height=heightSpecSize; if (mVideoWidth * height < width * mVideoHeight) { width=height * mVideoWidth / mVideoHeight; }  else if (mVideoWidth * height > width * mVideoHeight) { height=width * mVideoHeight / mVideoWidth; } }  else if (widthSpecMode == View.MeasureSpec.EXACTLY) { width=widthSpecSize; height=width * mVideoHeight / mVideoWidth; if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) { height=heightSpecSize; } }  else if (heightSpecMode == View.MeasureSpec.EXACTLY) { height=heightSpecSize; width=height * mVideoWidth / mVideoHeight; if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) { width=widthSpecSize; } }  else { width=mVideoWidth; height=mVideoHeight; if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) { height=heightSpecSize; width=height * mVideoWidth / mVideoHeight; } if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) { width=widthSpecSize; height=width * mVideoHeight / mVideoWidth; } } }  else { } mMeasuredWidth=width; mMeasuredHeight=height; } "
"public ShortArrayCodeOutput(int initSize){   if (initSize < 0) {     throw new IllegalArgumentException(\"initSize < 0\");   }   this.array=new short[initSize]; } "
"@SuppressLint(\"DefaultLocale\") public static String doublePrecision(int time){   return String.format(\"%02d\",time); } "
"@Override public void onShadowUpdate(String jsonState){   super.onShadowUpdate(jsonState); } "
"public String missingMergeTipText(){   return \"Distribute counts for missing values. Counts are distributed \" + \"across other values in proportion to their frequency. Otherwise, \" + \"missing is treated as a separate value.\"; } "
"public boolean isAssignableFrom(EntryClass cls){   for (EntryClass sup=cls; sup != null; sup=sup.superclass) {     if (hash == sup.hash)     return true;   }   return false; } "
"public Map<String,AbstractIndex> loadAndGetTaskIdToSegmentsMap(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier) throws IndexBuilderException {   Map<String,AbstractIndex> taskIdToTableSegmentMap=new HashMap<String,AbstractIndex>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   addLockObject(absoluteTableIdentifier);   Iterator<Entry<String,List<TableBlockInfo>>> iteratorOverSegmentBlocksInfos=segmentToTableBlocksInfos.entrySet().iterator();   Map<String,Map<String,AbstractIndex>> tableSegmentMapTemp=addTableSegmentMap(absoluteTableIdentifier);   Map<String,AbstractIndex> taskIdToSegmentIndexMap=null;   String segmentId=null;   String taskId=null;   try {     while (iteratorOverSegmentBlocksInfos.hasNext()) {       Entry<String,List<TableBlockInfo>> next=iteratorOverSegmentBlocksInfos.next();       Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=mappedAndGetTaskIdToTableBlockInfo(segmentToTableBlocksInfos);       segmentId=next.getKey();       taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);       if (taskIdToSegmentIndexMap == null) {         Object segmentLoderLockObject=segmentLockMap.get(segmentId);         if (null == segmentLoderLockObject) {           segmentLoderLockObject=addAndGetSegmentLock(segmentId);         } synchronized (segmentLoderLockObject) {           taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);           if (null == taskIdToSegmentIndexMap) {             taskIdToSegmentIndexMap=new ConcurrentHashMap<String,AbstractIndex>();             Iterator<Entry<String,List<TableBlockInfo>>> iterator=taskIdToTableBlockInfoMap.entrySet().iterator();             while (iterator.hasNext()) {               Entry<String,List<TableBlockInfo>> taskToBlockInfoList=iterator.next();               taskId=taskToBlockInfoList.getKey();               taskIdToSegmentIndexMap.put(taskId,loadBlocks(taskId,taskToBlockInfoList.getValue(),absoluteTableIdentifier));             }             tableSegmentMapTemp.put(next.getKey(),taskIdToSegmentIndexMap);             segmentLockMap.remove(segmentId);           }         }         taskIdToTableSegmentMap.putAll(taskIdToSegmentIndexMap);       }     }   }  catch (  CarbonUtilException e) {     LOGGER.error(\"Problem while loading the segment\");     throw new IndexBuilderException(e);   }   return taskIdToTableSegmentMap; } "
"public void dismissLoadingDialog(){   final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);   if (frag != null) {     LoadingDialog loading=(LoadingDialog)frag;     loading.dismissAllowingStateLoss();   } } "
"private int pathPositionAtLevel(int orgUnitLevel){   return (orgUnitLevel - 1) * 12 + 2; } "
"public void registerEvent(Object object,Method method){   noParamMap.put(object,method); } "
"public void toggleMaximize(@NotNull Component comp){   assert mComponentInfoMap.containsKey(comp);   ComponentInfo info=mComponentInfoMap.get(comp);   setStateInternal(comp,info,info.state == AccordionState.MAXIMIZE ? AccordionState.PREFERRED : AccordionState.MAXIMIZE); } "
"@PostConstruct public void init(){   listenerContainer=cacheRegistrationService.registerToAlarms(this); } "
"public TLongObjectHashMap(int initialCapacity){   super(initialCapacity); } "
"protected void initConfig(KadminConsumerConfig config){ } "
"protected void writeShort(int value) throws IOException {   out.write(value & 0xff);   out.write((value >> 8) & 0xff); } "
"public static boolean isCoordinate(String value){   try {     String[] lnglat=value.trim().split(\",\");     float lng=Float.parseFloat(lnglat[0]);     float lat=Float.parseFloat(lnglat[1]);     return (lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90);   }  catch (  Exception x) {     return false;   } } "
"public static String showPasswordHint(HttpServletRequest request,HttpServletResponse response){   Delegator delegator=(Delegator)request.getAttribute(\"delegator\");   String userLoginId=request.getParameter(\"USERNAME\");   String errMsg=null;   if ((userLoginId != null) && (\"true\".equals(EntityUtilProperties.getPropertyValue(\"security.properties\",\"username.lowercase\",delegator)))) {     userLoginId=userLoginId.toLowerCase();   }   if (!UtilValidate.isNotEmpty(userLoginId)) {     errMsg=UtilProperties.getMessage(resource,\"loginevents.username_was_empty_reenter\",UtilHttp.getLocale(request));     request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);     return \"error\";   }   GenericValue supposedUserLogin=null;   try {     supposedUserLogin=EntityQuery.use(delegator).from(\"UserLogin\").where(\"userLoginId\",userLoginId).queryOne();   }  catch (  GenericEntityException gee) {     Debug.logWarning(gee,\"\",module);   }   if (supposedUserLogin == null) {     errMsg=UtilProperties.getMessage(resource,\"loginevents.username_not_found_reenter\",UtilHttp.getLocale(request));     request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);     return \"error\";   }   String passwordHint=supposedUserLogin.getString(\"passwordHint\");   if (!UtilValidate.isNotEmpty(passwordHint)) {     errMsg=UtilProperties.getMessage(resource,\"loginevents.no_password_hint_specified_try_password_emailed\",UtilHttp.getLocale(request));     request.setAttribute(\"_ERROR_MESSAGE_\",errMsg);     return \"error\";   }   Map<String,String> messageMap=UtilMisc.toMap(\"passwordHint\",passwordHint);   errMsg=UtilProperties.getMessage(resource,\"loginevents.password_hint_is\",messageMap,UtilHttp.getLocale(request));   request.setAttribute(\"_EVENT_MESSAGE_\",errMsg);   return \"success\"; } "
"public static ServiceClient createServiceClient(SSLContext sslContext){   return createServiceClient(sslContext,0); } "
"public GiftsGetQuery userId(Integer value){   return unsafeParam(\"user_id\",value); } "
"public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){   MinSize=iMinSize;   MaxSize=iMaxSize;   CorrelationWindow=iCorrelationWindow;   InitGraphs(); } "
"public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,FieldMatrix<? extends FieldElement<?>> observed){   Assert.assertNotNull(\"Observed should not be null\",observed);   if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {     StringBuilder messageBuffer=new StringBuilder();     messageBuffer.append(\"Observed has incorrect dimensions.\");     messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() + \" x \"+ observed.getColumnDimension());     messageBuffer.append(\"\\nexpected \" + expected.getRowDimension() + \" x \"+ expected.getColumnDimension());     Assert.fail(messageBuffer.toString());   }   for (int i=0; i < expected.getRowDimension(); ++i) {     for (int j=0; j < expected.getColumnDimension(); ++j) {       FieldElement<?> eij=expected.getEntry(i,j);       FieldElement<?> oij=observed.getEntry(i,j);       Assert.assertEquals(eij,oij);     }   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_ME_TO_B(String skillcaster,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200524,skillcaster,skilltarget,skillname); } "
"public Object readObject() throws JMSException {   initializeReading();   try {     if (this.dataIn.available() == 0) {       throw new MessageEOFException(\"reached end of data\");     }     this.dataIn.mark(65);     int type=this.dataIn.read();     if (type == _NULL) {       return null;     }     if (type == _STRING) {       return this.dataIn.readUTF();     }     if (type == _LONG) {       return Long.valueOf(this.dataIn.readLong());     }     if (type == _INT) {       return Integer.valueOf(this.dataIn.readInt());     }     if (type == _SHORT) {       return Short.valueOf(this.dataIn.readShort());     }     if (type == _BYTE) {       return Byte.valueOf(this.dataIn.readByte());     }     if (type == _FLOAT) {       return Float.valueOf(this.dataIn.readFloat());     }     if (type == _DOUBLE) {       return Double.valueOf(this.dataIn.readDouble());     }     if (type == _BOOLEAN) {       return Boolean.valueOf(this.dataIn.readBoolean());     }     if (type == _CHAR) {       return new Character(this.dataIn.readChar());     }     if (type == _BYTES) {       int len=this.dataIn.readInt();       byte[] value=new byte[len];       this.dataIn.read(value);       return value;     }  else {       this.dataIn.reset();       throw new MessageFormatException(\"unknown type\");     }   }  catch (  NumberFormatException mfe) {     try {       this.dataIn.reset();     }  catch (    IOException ioe) {       JMSException jmsEx=new JMSException(\"reset failed\");       jmsEx.setLinkedException(ioe);     }     throw mfe;   } catch (  EOFException e) {     JMSException jmsEx=new MessageEOFException(e.toString());     jmsEx.setLinkedException(e);     throw jmsEx;   } catch (  IOException e) {     JMSException jmsEx=new MessageFormatException(e.toString());     jmsEx.setLinkedException(e);     throw jmsEx;   } } "
"public String[] build(TimedTextObject tto){   if (!tto.isBuilt()) {     return null;   }   int index=0;   ArrayList<String> file=new ArrayList<>(20 + 2 * tto.getCaptions().size());   file.add(index++,\"Scenarist_SCC V1.0\\n\");   String line;   Caption oldC;   Caption newC=new Caption();   newC.setEnd(new Time(\"h:mm:ss.cs\",\"0:00:00.00\"));   Iterator<Caption> itrC=tto.getCaptions().values().iterator();   while (itrC.hasNext()) {     line=\"\";     oldC=newC;     newC=itrC.next();     if (oldC.getEnd().getMseconds() > newC.getStart().getMseconds()) {       newC.setContent(newC.getContent() + \"<br />\" + oldC.getContent());       newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));       line+=newC.getStart().getTime(\"hh:mm:ss:ff/29.97\") + \"\\t942c 942c \";       newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));       line+=\"94ae 94ae 9420 9420 \";     }  else     if (oldC.getEnd().getMseconds() < newC.getStart().getMseconds()) {       line+=oldC.getEnd().getTime(\"hh:mm:ss:ff/29.97\") + \"\\t942c 942c\\n\\n\";       newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));       line+=newC.getStart().getTime(\"hh:mm:ss:ff/29.97\") + \"\\t94ae 94ae 9420 9420 \";       newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));     }  else {       newC.getStart().setMseconds(newC.getStart().getMseconds() - (int)(1000 / 29.97));       line+=newC.getStart().getTime(\"hh:mm:ss:ff/29.97\") + \"\\t942c 942c 94ae 94ae 9420 9420 \";       newC.getStart().setMseconds(newC.getStart().getMseconds() + (int)(1000 / 29.97));     }     line+=codeText(newC);     line+=\"8080 8080 942f 942f\\n\";     file.add(index++,line);   }   file.add(index++,\"\");   return file.toArray(new String[0]); } "
"public Scroller(Context context,Interpolator interpolator,boolean flywheel){   mFinished=true;   mInterpolator=interpolator;   mPpi=context.getResources().getDisplayMetrics().density * 160.0f;   mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());   mFlywheel=flywheel; } "
"public void onAccuracyChanged(Sensor sensor,int accuracy){   if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {     return;   }   if (this.status == AccelListener.STOPPED) {     return;   }   this.accuracy=accuracy; } "
"public static Temp create(String name){   Temp t=new Temp();   t.name=name;   t.id=UID.id(System.currentTimeMillis(),UID.random());   t.file=get(t.id,name);   if (t.file.exists()) {     t.file.delete();   }  else {     t.file.getParentFile().mkdirs();   }   return t; } "
"public void parse(byte[] aLine,int length) throws IOException {   int numberOfTokens=0;   int start=0;   while (start < length) {     int end=start;     while (aLine[end] != '\\t' && end < length)     end++;     if (numberOfTokens == tokens.length) {       String[] tmp=new String[2 * tokens.length];       System.arraycopy(tokens,0,tmp,0,tokens.length);       tokens=tmp;     }     tokens[numberOfTokens++]=Basic.toString(aLine,start,end - start);     start=end + 1;   }   parse(tokens,numberOfTokens); } "
"private static void configureSystemProperties() throws IOException {   File sandbox=new File(getTmpDirFile(),\"_intellij_test_sandbox\");   setSandboxPath(\"idea.home.path\",new File(sandbox,\"home\"));   setSandboxPath(\"idea.config.path\",new File(sandbox,\"config\"));   setSandboxPath(\"idea.system.path\",new File(sandbox,\"system\"));   setIfEmpty(PlatformUtils.PLATFORM_PREFIX_KEY,\"Idea\");   setIfEmpty(\"idea.classpath.index.enabled\",\"false\");   PluginManagerCore.BUILD_NUMBER=readApiVersionNumber();   VfsRootAccess.allowRootAccess(RUNFILES_PATH);   String platformApi=getPlatformApiPath();   if (platformApi != null) {     VfsRootAccess.allowRootAccess(platformApi);   }   List<String> pluginJars=Lists.newArrayList();   try {     Enumeration<URL> urls=BlazeTestSystemPropertiesRule.class.getClassLoader().getResources(\"META-INF/plugin.xml\");     while (urls.hasMoreElements()) {       URL url=urls.nextElement();       addArchiveFile(url,pluginJars);     }   }  catch (  IOException e) {     System.err.println(\"Cannot find plugin.xml resources\");     e.printStackTrace();   }   setIfEmpty(\"idea.plugins.path\",Joiner.on(File.pathSeparator).join(pluginJars)); } "
"@Override public ListenableFuture<LeaseKeepAliveResponse> keepAliveOnce(long leaseId){   StreamObserver<LeaseKeepAliveRequest> requestObserver=this.leaseStub.leaseKeepAlive(keepAliveResponseStreamObserver);   requestObserver.onNext(newKeepAliveRequest(leaseId));   requestObserver.onCompleted();   throw new UnsupportedOperationException(); } "
"public SimpleValueChecker(final double relativeThreshold,final double absoluteThreshold,final int maxIter){   super(relativeThreshold,absoluteThreshold);   if (maxIter <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxIter,0);   }   maxIterationCount=maxIter; } "
"public int findLastCompletelyVisibleItemPosition(){   final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);   return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child); } "
"@SuppressWarnings(\"unchecked\") public List<String> onTabComplete(Sender sender,List<String> args){   final List<MainCommand> mains=mainCommands.stream().filter(null).collect(Collectors.toList());   if (args.size() <= 1) {     if (args.isEmpty() || args.get(0).equalsIgnoreCase(\"\")) {       return mains.stream().map(null).collect(Collectors.toList());     }     return mains.stream().map(null).filter(null).collect(Collectors.toList());   }   Optional<MainCommand> o=mains.stream().filter(null).limit(1).findAny();   if (!o.isPresent()) {     return Collections.emptyList();   }   return o.get().onTabComplete(sender,args.subList(1,args.size()),plugin); } "
"public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_INVENTORY_ITEM(DescriptionId descriptionId){   return new SM_SYSTEM_MESSAGE(1300594,descriptionId); } "
"public JsonArray add(boolean value){   values.add(Json.value(value));   return this; } "
"@Override public long toLong(){   throw new UnsupportedOperationException(); } "
"public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){   this(Method.GET,url,listener,errorListener); } "
"private boolean isSyncNeeded(long referenceTimeInMillis){   myProject.putUserData(PROJECT_EXTERNAL_BUILD_FILES_CHANGED,null);   assert referenceTimeInMillis > 0;   if (isSyncInProgress()) {     return false;   }   FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();   File settingsFilePath=new File(getBaseDirPath(myProject),FN_SETTINGS_GRADLE);   if (settingsFilePath.exists()) {     VirtualFile settingsFile=findFileByIoFile(settingsFilePath,true);     if (settingsFile != null && fileDocumentManager.isFileModified(settingsFile)) {       return true;     }     if (settingsFilePath.lastModified() > referenceTimeInMillis) {       return true;     }   }   ModuleManager moduleManager=ModuleManager.getInstance(myProject);   for (  Module module : moduleManager.getModules()) {     VirtualFile buildFile=getGradleBuildFile(module);     if (buildFile != null) {       if (fileDocumentManager.isFileModified(buildFile)) {         return true;       }       File buildFilePath=virtualToIoFile(buildFile);       if (buildFilePath.lastModified() > referenceTimeInMillis) {         return true;       }     }     NativeAndroidGradleModel nativeAndroidModel=NativeAndroidGradleModel.get(module);     if (nativeAndroidModel != null) {       for (      File externalBuildFile : nativeAndroidModel.getNativeAndroidProject().getBuildFiles()) {         VirtualFile virtualFile=findFileByIoFile(externalBuildFile,true);         if ((virtualFile != null && fileDocumentManager.isFileModified(virtualFile)) || externalBuildFile.lastModified() > referenceTimeInMillis) {           myProject.putUserData(PROJECT_EXTERNAL_BUILD_FILES_CHANGED,true);           return true;         }       }     }   }   return false; } "
"final boolean isReflex(EarClippingVertex vertex){   Vector2 p=vertex.point;   Vector2 p0=vertex.prev.point;   Vector2 p1=vertex.next.point;   Vector2 v1=p.to(p0);   Vector2 v2=p.to(p1);   if (v1.cross(v2) < 0.0) {     return false;   }  else {     return true;   } } "
"public WallGetCommentsQueryWithExtended allowGroupComments(Boolean value){   return unsafeParam(\"allow_group_comments\",value); } "
"public static double[] normalize(final double... sample){   DescriptiveStatistics stats=new DescriptiveStatistics();   for (int i=0; i < sample.length; i++) {     stats.addValue(sample[i]);   }   double mean=stats.getMean();   double standardDeviation=stats.getStandardDeviation();   double[] standardizedSample=new double[sample.length];   for (int i=0; i < sample.length; i++) {     standardizedSample[i]=(sample[i] - mean) / standardDeviation;   }   return standardizedSample; } "
"@Override public IScanListIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive,boolean ordered){   ordered|=FORCE_ORDERED_SCAN;   long startTime=_recentExtendedIndexUpdates != null ? System.currentTimeMillis() : 0;   IScanListIterator<IEntryCacheInfo> res=ordered ? establishScanOrdered(startPos,relation,endPos,endPosInclusive) : establishScanUnOrdered(startPos,relation,endPos,endPosInclusive);   if (_recentExtendedIndexUpdates != null && !_recentExtendedIndexUpdates.isEmpty()) {     MultiStoredList<IEntryCacheInfo> msl=new MultiStoredList<IEntryCacheInfo>();     msl.add(res);     msl.add(_recentExtendedIndexUpdates.iterator(startTime,(ExtendedIndexIterator)res));     return msl;   }  else   return res; } "
"@Override public Object validate(Object content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {   if (context == null)   context=fEmptyContext;   if (validatedInfo == null)   validatedInfo=new ValidatedInfo();  else   validatedInfo.memberType=null;   boolean needNormalize=context == null || context.needToNormalize();   Object ob=getActualValue(content,context,validatedInfo,needNormalize);   validate(context,validatedInfo);   return ob; } "
"private static boolean pingURL(String url,int timeout){   try {     HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();     connection.setConnectTimeout(timeout);     connection.setReadTimeout(timeout);     connection.setRequestMethod(\"GET\");     int responseCode=connection.getResponseCode();     return (200 <= responseCode && responseCode <= 399);   }  catch (  IOException exception) {     exception.printStackTrace();     return false;   } } "
"public VideoRestoreCommentQuery restoreComment(UserActor actor,int commentId){   return new VideoRestoreCommentQuery(getClient(),actor,commentId); } "
"public UsersGetSubscriptionsQueryWithExtended(VkApiClient client,UserActor actor){   super(client,\"users.getSubscriptions\",GetSubscriptionsExtendedResponse.class);   accessToken(actor.getAccessToken());   extended(true); } "
"@Override public void actionPerformed(ActionEvent ev){   executeImmediately(getSyntax()); } "
"protected void drawFilledPath(Canvas c,Path filledPath,int fillColor,int fillAlpha){   int color=(fillAlpha << 24) | (fillColor & 0xffffff);   if (clipPathSupported()) {     c.save();     c.clipPath(filledPath);     c.drawColor(color);     c.restore();   }  else {     Paint.Style previous=mRenderPaint.getStyle();     int previousColor=mRenderPaint.getColor();     mRenderPaint.setStyle(Paint.Style.FILL);     mRenderPaint.setColor(color);     c.drawPath(filledPath,mRenderPaint);     mRenderPaint.setColor(previousColor);     mRenderPaint.setStyle(previous);   } } "
"public VirtualEntryIntrospector(){   throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\"); } "
"public SecureGetSMSHistoryQuery userId(Integer value){   return unsafeParam(\"user_id\",value); } "
"public IntersectsExtended(Expression expression1,Expression expression2){   super(expression1,expression2); } "
"public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){   bundle.putParcelableArrayList(key,value);   return this; } "
"public static int readInt(DataInputStream dis,boolean isBigEndian) throws IOException {   if (!isBigEndian) {     return readLittleEndianInt(dis);   }  else {     return dis.readInt();   } } "
"@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private List filterResourcesForLookup(Iterable resources,ResourceField field){   List results=new ArrayList();   Iterator iterator=resources.iterator();   while (iterator.hasNext()) {     Object resource=iterator.next();     Object property=PropertyUtils.getProperty(resource,field.getUnderlyingName());     LookupIncludeBehavior lookupIncludeBehavior=field.getLookupIncludeAutomatically();     if (lookupIncludeBehavior == LookupIncludeBehavior.AUTOMATICALLY_ALWAYS || (property == null && lookupIncludeBehavior == LookupIncludeBehavior.AUTOMATICALLY_WHEN_NULL)) {       results.add(resource);     }   }   return results; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_ME_TO_SELF(String skillname){   return new SM_SYSTEM_MESSAGE(1201265,skillname); } "
"public static Column min(DataFrame dataFrame,String columnName){   return dataFrame.groupBy(columnName).agg(functions.min(columnName)).col(columnName); } "
"public StatelessHibernateSpaceDataSourceConfigurer fetchSize(int fetchSize){   this.fetchSize=fetchSize;   return this; } "
"private static void buildProperty(Node node,Map<String,String> prop,boolean isConvertFromSystemProperty){   Stack<String> inverseKey=new Stack<String>();   StringBuilder key=new StringBuilder();   String propertyValue=node.getNodeValue();   while (node.getParentNode() != null && node.getParentNode().getNodeType() != Node.DOCUMENT_NODE) {     inverseKey.push(node.getParentNode().getNodeName());     node=node.getParentNode();   }   while (!inverseKey.isEmpty()) {     key.append(inverseKey.pop()).append('.');   }   if (key.charAt(key.length() - 1) == '.') {     key=key.deleteCharAt(key.length() - 1);   }   propertyValue=propertyValue.trim();   if (isConvertFromSystemProperty)   propertyValue=getPropertyFromSystem(propertyValue);   String propKey=key.toString();   prop.put(propKey,propertyValue); } "
"public void dumpRelations(String title){   dump(new PrintWriter(System.out),0,title,true); } "
"@Override public Throwable fillInStackTrace(){   return null; } "
"@Override public final void writeAsciiString(final String s){   write(s.getBytes(ASCII)); } "
"public int signum(){   return signum; } "
"public Clock startClock(){   this.start();   return this; } "
"public void shutdown(){   try {     shutdown(-1,TimeUnit.MILLISECONDS);   }  catch (  final TimeoutException e) {     exceptionHandler.handleOnShutdownException(e);   } } "
"public void pause(){ } "
"public static ProbeItemDescriptor discreteFillItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){   return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,null,DEFAULT_COLOR); } "
"private void saveFile() throws FileNotFoundException {   PrintStream psStream=new PrintStream(new FileOutputStream(clusterConfigFile));   JSpaceUtilities.domWriter(m_rootDoc.getDocumentElement(),psStream,\"\");   psStream.close(); } "
"public GroupsInviteQuery(VkApiClient client,UserActor actor,int groupId,int userId){   super(client,\"groups.invite\",OkResponse.class);   accessToken(actor.getAccessToken());   groupId(groupId);   userId(userId); } "
"public static int createAndLinkProgram(final int vertexShaderHandle,final int fragmentShaderHandle,final String[] attributes){   int programHandle=GLES20.glCreateProgram();   if (programHandle != 0) {     GLES20.glAttachShader(programHandle,vertexShaderHandle);     GLES20.glAttachShader(programHandle,fragmentShaderHandle);     if (attributes != null) {       final int size=attributes.length;       for (int i=0; i < size; i++) {         GLES20.glBindAttribLocation(programHandle,i,attributes[i]);       }     }     GLES20.glLinkProgram(programHandle);     final int[] linkStatus=new int[1];     GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);     if (linkStatus[0] == 0) {       Log.e(TAG,\"Error compiling program: \" + GLES20.glGetProgramInfoLog(programHandle));       GLES20.glDeleteProgram(programHandle);       programHandle=0;     }   }   if (programHandle == 0) {     throw new RuntimeException(\"Error creating program.\");   }   return programHandle; } "
"protected void handleAndroidResourceFiles(String apk,Set<String> fileNameFilter,IResourceHandler handler){   File apkF=new File(apk);   if (!apkF.exists())   throw new RuntimeException(\"file '\" + apk + \"' does not exist!\");   try {     ZipFile archive=null;     try {       archive=new ZipFile(apkF);       Enumeration<?> entries=archive.entries();       while (entries.hasMoreElements()) {         ZipEntry entry=(ZipEntry)entries.nextElement();         String entryName=entry.getName();         handler.handleResourceFile(entryName,fileNameFilter,archive.getInputStream(entry));       }     }   finally {       if (archive != null)       archive.close();     }   }  catch (  Exception e) {     System.err.println(\"Error when looking for XML resource files in apk \" + apk + \": \"+ e);     e.printStackTrace();     if (e instanceof RuntimeException)     throw (RuntimeException)e;  else     throw new RuntimeException(e);   } } "
"private void loadHeaderAndData(DataInputStream dis){   try {     if (!General.readWord(dis).equals(\"EST_File\") || !General.readWord(dis).equals(\"Track\")) {       throw new Error(\"The given data input stream is not an EST Track file.\");     }     String token=General.readWord(dis);     while (!token.equals(\"EST_Header_End\")) {       if (token.equals(\"DataType\")) {         isBinary=General.readWord(dis).equals(\"binary\");       }  else       if (token.equals(\"ByteOrder\")) {         isBigEndian=General.readWord(dis).equals(\"10\");       }  else       if (token.equals(\"NumFrames\")) {         numFrames=Integer.parseInt(General.readWord(dis));       }  else       if (token.equals(\"NumChannels\")) {         numChannels=Integer.parseInt(General.readWord(dis));       }       token=General.readWord(dis);     }     times=new float[numFrames];     frames=new float[numFrames][numChannels];     if (isBinary) {       loadBinaryData(dis);     }  else {       loadTextData(dis);     }   }  catch (  IOException ioe) {     throw new Error(\"IO Exception while parsing EST Track file: \" + ioe.getMessage());   } } "
"@Override public void run(){   logger.finest(\"LookupDiscovery - Requestor thread started\");   int count;   try {     if (delayFlag && (initialMulticastRequestDelayRange > 0) && (multicastRequestMax >= 0)) {       Thread.sleep((long)(Math.random() * initialMulticastRequestDelayRange));     }     for (count=multicastRequestMax; --count >= 0 && !isInterrupted(); ) {       DatagramPacket[] reqs=encodeMulticastRequest(new MulticastRequest(multicastRequestHost,responsePort,groups,getServiceIDs()));       sendPacketByNIC(sock,reqs);       Thread.sleep(count > 0 ? multicastRequestInterval : finalMulticastRequestInterval);     }   }  catch (  InterruptedException e) {   } catch (  InterruptedIOException e) {   } catch (  Exception e) {     logger.log(Level.INFO,\"exception while marshalling outgoing \" + \"multicast request\",e);   }  finally { synchronized (requestors) {       requestors.remove(Thread.currentThread());       if (respondeeThread != null && requestors.isEmpty()) {         respondeeThread.interrupt();         respondeeThread=null;       }     }     sock.close();     logger.finest(\"LookupDiscovery - Requestor thread completed\");   } } "
"public static void mainQuickTest2(String[] args) throws UnsupportedAudioFileException, IOException {   String wavBaseFolder=\"/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/\";   String sourceTag=\"source\";   String targetTag=\"target\";   String method=\"F\";   BaselinePreprocessor pp=new BaselinePreprocessor();   BaselineFeatureExtractor fe=new BaselineFeatureExtractor();   BaselinePostprocessor po=new BaselinePostprocessor();   JointGMMTransformerParams pa=new JointGMMTransformerParams();   int numTrainingFiles=99;   int i;   boolean isContextualGMMs=false;   int contextClassificationType=ContextualGMMParams.NO_PHONEME_CLASS;   int[] numComponents={10};   String inputFolder=wavBaseFolder + \"/\" + sourceTag+ \"/wav/\";   String outputBaseFolder;   if (!isContextualGMMs) {     outputBaseFolder=wavBaseFolder + \"output/\" + sourceTag+ \"2\"+ targetTag+ \"/gmm\"+ method+ \"_\"+ String.valueOf(numTrainingFiles);   }  else {     outputBaseFolder=wavBaseFolder + \"output/\" + sourceTag+ \"2\"+ targetTag+ \"/gmm\"+ method+ \"_\"+ String.valueOf(numTrainingFiles)+ \"_\"+ \"context\"+ String.valueOf(contextClassificationType);     for (i=0; i < numComponents.length; i++)     outputBaseFolder+=\"_\" + String.valueOf(numComponents[i]);   }   String baseFile=wavBaseFolder + \"output/\" + sourceTag+ \"2\"+ targetTag+ \"/\"+ sourceTag+ method+ \"_X_\"+ targetTag+ method+ \"_\"+ String.valueOf(numTrainingFiles);   pa.isForcedAnalysis=false;   pa.isSourceVocalTractSpectrumFromModel=false;   pa.isVocalTractTransformation=true;   pa.isResynthesizeVocalTractFromSourceModel=false;   pa.isVocalTractMatchUsingTargetModel=false;   pa.isTemporalSmoothing=true;   pa.smoothingNumNeighbours=10;   if (!pa.isTemporalSmoothing)   pa.smoothingNumNeighbours=0;   pa.smoothingMethod=SmoothingDefinitions.TRANSFORMATION_FILTER_SMOOTHING;   pa.isDisplayProcessingFrameCount=true;   pa.inputFolder=inputFolder;   pa.outputBaseFolder=outputBaseFolder;   if (!isContextualGMMs)   pa.jointGmmFile=baseFile + \"_\" + String.valueOf(numComponents[0])+ JointGMMSet.DEFAULT_EXTENSION;  else {     pa.jointGmmFile=baseFile + \"_context\" + String.valueOf(contextClassificationType);     for (i=0; i < numComponents.length; i++)     pa.jointGmmFile+=\"_\" + String.valueOf(numComponents[i]);     pa.jointGmmFile+=JointGMMSet.DEFAULT_EXTENSION;   }   pa.pitchMappingFile=baseFile + PitchMappingFile.DEFAULT_EXTENSION;   pa.outputFolderInfoString=\"isSrc\" + String.valueOf(pa.isSourceVocalTractSpectrumFromModel ? 1 : 0) + \"_smooth\"+ String.valueOf(pa.isTemporalSmoothing ? 1 : 0)+ \"_\"+ String.valueOf(pa.smoothingNumNeighbours);   pa.isSeparateProsody=false;   pa.isSaveVocalTractOnlyVersion=false;   pa.isFixedRateVocalTractConversion=true;   pa.prosodyParams.pitchStatisticsType=PitchStatistics.STATISTICS_IN_HERTZ;   pa.prosodyParams.durationTransformationMethod=ProsodyTransformerParams.NO_TRANSFORMATION;   pa.prosodyParams.isUseInputMeanPitch=false;   pa.prosodyParams.isUseInputStdDevPitch=false;   pa.prosodyParams.isUseInputRangePitch=false;   pa.prosodyParams.isUseInputInterceptPitch=false;   pa.prosodyParams.isUseInputSlopePitch=false;   pa.isPitchFromTargetFile=false;   pa.isDurationFromTargetFile=false;   pa.isEnergyFromTargetFile=false;   pa.targetAlignmentFileType=BaselineTransformerParams.LABELS;   JointGMMTransformer t=new JointGMMTransformer(pp,fe,po,pa);   t.run(); } "
"public EntityQuery select(String... fields){   this.fieldsToSelect=UtilMisc.toSetArray(fields);   return this; } "
"public XPath(String xpath,SymbolTable symbolTable,NamespaceContext context) throws XPathException {   super(fixupXPath(xpath),symbolTable,context);   for (int i=0; i < fLocationPaths.length; i++) {     for (int j=0; j < fLocationPaths[i].steps.length; j++) {       mf.org.apache.xerces.impl.xpath.XPath.Axis axis=fLocationPaths[i].steps[j].axis;       if (axis.type == XPath.Axis.ATTRIBUTE && (j < fLocationPaths[i].steps.length - 1)) {         throw new XPathException(\"c-fields-xpaths\");       }     }   } } "
"public void resetOriginals(){   mStartingStartTrim=0;   mStartingEndTrim=0;   mStartingRotation=0;   setStartTrim(0);   setEndTrim(0);   setRotation(0); } "
"@Override public String addSymbol(char[] buffer,int offset,int length){   if (fSymbolTable.containsSymbol(buffer,offset,length)) {     return fSymbolTable.addSymbol(buffer,offset,length);   }   return super.addSymbol(buffer,offset,length); } "
"private void updateQrCode(int pos){   MultiFormatWriter multiFormatWriter=new MultiFormatWriter();   try {     BitMatrix bitMatrix=multiFormatWriter.encode(couponsList.get(pos).getCouponCode(),BarcodeFormat.QR_CODE,200,200);     BarcodeEncoder barcodeEncoder=new BarcodeEncoder();     Bitmap bitmap=barcodeEncoder.createBitmap(bitMatrix);     qrCodeImage.setImageBitmap(bitmap);   }  catch (  WriterException e) {     e.printStackTrace();   } } "
"@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {   executor.execute(this,space,txn,readModifier,max); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysNoResist_A_TO_SELF(String skilltarget,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200787,skilltarget,skillcaster,skillname); } "
"Node(){   key=null;   hash=-1;   next=prev=this; } "
"public void save(String key,String value){   prefs.edit().putString(key,value).apply(); } "
"public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){   super(client,\"messages.getChat\",Utils.buildParametrizedType(List.class,Chat.class));   accessToken(actor.getAccessToken());   chatIds(chatIds); } "
"@Bean public Auth0Client auth0Client(){   return new Auth0Client(clientId,issuer); } "
"public boolean isWarehouseManaged(String facilityId){   boolean isWarehouseManaged=false;   try {     if (\"WIP\".equals(getProduct().getString(\"productTypeId\"))) {       return false;     }     List<GenericValue> pfs=null;     if (UtilValidate.isEmpty(facilityId)) {       pfs=getProduct().getRelated(\"ProductFacility\",null,null,true);     }  else {       pfs=getProduct().getRelated(\"ProductFacility\",UtilMisc.toMap(\"facilityId\",facilityId),null,true);     }     if (UtilValidate.isEmpty(pfs)) {       if (getSubstitutedNode() != null && getSubstitutedNode().getProduct() != null) {         if (UtilValidate.isEmpty(facilityId)) {           pfs=getSubstitutedNode().getProduct().getRelated(\"ProductFacility\",null,null,true);         }  else {           pfs=getSubstitutedNode().getProduct().getRelated(\"ProductFacility\",UtilMisc.toMap(\"facilityId\",facilityId),null,true);         }       }     }     if (UtilValidate.isNotEmpty(pfs)) {       for (int i=0; i < pfs.size(); i++) {         GenericValue pf=pfs.get(i);         if (UtilValidate.isNotEmpty(pf.get(\"minimumStock\")) && UtilValidate.isNotEmpty(pf.get(\"reorderQuantity\"))) {           isWarehouseManaged=true;           break;         }       }     }   }  catch (  GenericEntityException gee) {     Debug.logError(\"Problem in BOMNode.isWarehouseManaged()\",module);   }   return isWarehouseManaged; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_DODGE(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1240219,value0,value1); } "
"public JSONObject increment(String key) throws JSONException {   Object value=opt(key);   if (value == null) {     put(key,1);   }  else {     if (value instanceof Integer) {       put(key,((Integer)value).intValue() + 1);     }  else     if (value instanceof Long) {       put(key,((Long)value).longValue() + 1);     }  else     if (value instanceof Double) {       put(key,((Double)value).doubleValue() + 1);     }  else     if (value instanceof Float) {       put(key,((Float)value).floatValue() + 1);     }  else {       throw new JSONException(\"Unable to increment [\" + key + \"].\");     }   }   return this; } "
"public static void with(@NonNull Application application,@NonNull ShakeDelegate delegate){   LifecycleCallbacks lifecycleCallbacks=new LifecycleCallbacks(application,delegate);   application.registerActivityLifecycleCallbacks(lifecycleCallbacks); } "
"public ShimpleLocalUses(ShimpleBody sb){   if (!sb.isSSA())   throw new RuntimeException(\"ShimpleBody is not in proper SSA form as required by ShimpleLocalUses.  You may need to rebuild it or use SimpleLocalUses instead.\");   localToUses=new HashMap<Local,ArrayList>();   Iterator localsIt=sb.getLocals().iterator();   while (localsIt.hasNext()) {     Local local=(Local)localsIt.next();     localToUses.put(local,new ArrayList());   }   Iterator unitsIt=sb.getUnits().iterator();   while (unitsIt.hasNext()) {     Unit unit=(Unit)unitsIt.next();     Iterator boxIt=unit.getUseBoxes().iterator();     while (boxIt.hasNext()) {       ValueBox box=(ValueBox)boxIt.next();       Value value=box.getValue();       if (!(value instanceof Local))       continue;       List<UnitValueBoxPair> useList=localToUses.get(value);       useList.add(new UnitValueBoxPair(unit,box));     }   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_INTERVAL_TO_ME(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201069,num0,skillname); } "
"public AemList clear(){   for (  AemListItem item : this) {     removeItem(item);   }   return this; } "
"private void printStatementsInBody(Body body,java.io.PrintWriter out){   LabeledUnitPrinter up=new NormalUnitPrinter(body);   Map<Unit,String> stmtToName=up.labels();   Chain<Unit> units=body.getUnits();   ExceptionalUnitGraph exceptionalUnitGraph=new soot.toolkits.graph.ExceptionalUnitGraph(body);   LiveLocals sll=new SimpleLiveLocals(exceptionalUnitGraph);   String cleanMethodName=cleanMethod(body.getMethod().getName());   Iterator<Unit> unitIt=units.iterator();   Unit currentStmt=null;   String currentLabel=\"default\";   long statementCount=0;   long labelCount=0;   long labelID=0;   Vector<String> useList=new Vector<String>();   Vector<Vector<Long>> useDataList=new Vector<Vector<Long>>();   Vector<String> defList=new Vector<String>();   Vector<Vector<Long>> defDataList=new Vector<Vector<Long>>();   Vector<Vector<String>> paramData=new Vector<Vector<String>>();   Vector<XMLLabel> xmlLabelsList=new Vector<XMLLabel>();   long maxStmtCount=0;   XMLNode methodNode=xmlNode.addChild(\"method\",new String[]{\"name\",\"returntype\",\"class\"},new String[]{cleanMethodName,body.getMethod().getReturnType().toString(),body.getMethod().getDeclaringClass().getName().toString()});   String declarationStr=body.getMethod().getDeclaration().toString().trim();   methodNode.addChild(\"declaration\",toCDATA(declarationStr),new String[]{\"length\"},new String[]{declarationStr.length() + \"\"});   XMLNode parametersNode=methodNode.addChild(\"parameters\",new String[]{\"method\"},new String[]{cleanMethodName});   XMLNode localsNode=methodNode.addChild(\"locals\");   XMLNode labelsNode=methodNode.addChild(\"labels\");   XMLNode stmtsNode=methodNode.addChild(\"statements\");   XMLLabel xmlLabel=new XMLLabel(labelCount,cleanMethodName,currentLabel);   labelsNode.addChild(\"label\",new String[]{\"id\",\"name\",\"method\"},new String[]{(labelCount++) + \"\",currentLabel,cleanMethodName});   while (unitIt.hasNext()) {     currentStmt=(Unit)unitIt.next();     if (stmtToName.containsKey(currentStmt)) {       currentLabel=stmtToName.get(currentStmt).toString();       xmlLabel.stmtCount=labelID;       xmlLabel.stmtPercentage=new Float((new Float(labelID).floatValue() / new Float(units.size()).intValue()) * 100.0).longValue();       if (xmlLabel.stmtPercentage > maxStmtCount)       maxStmtCount=xmlLabel.stmtPercentage;       xmlLabelsList.addElement(xmlLabel);       xmlLabel=new XMLLabel(labelCount,cleanMethodName,currentLabel);       labelsNode.addChild(\"label\",new String[]{\"id\",\"name\",\"method\"},new String[]{labelCount + \"\",currentLabel,cleanMethodName});       labelCount++;       labelID=0;     }     XMLNode stmtNode=stmtsNode.addChild(\"statement\",new String[]{\"id\",\"label\",\"method\",\"labelid\"},new String[]{statementCount + \"\",currentLabel,cleanMethodName,labelID + \"\"});     XMLNode sootstmtNode=stmtNode.addChild(\"soot_statement\",new String[]{\"branches\",\"fallsthrough\"},new String[]{boolToString(currentStmt.branches()),boolToString(currentStmt.fallsThrough())});     int j=0;     Iterator<ValueBox> boxIt=currentStmt.getUseBoxes().iterator();     while (boxIt.hasNext()) {       ValueBox box=(ValueBox)boxIt.next();       if (box.getValue() instanceof Local) {         String local=cleanLocal(((Local)box.getValue()).toString());         sootstmtNode.addChild(\"uses\",new String[]{\"id\",\"local\",\"method\"},new String[]{j + \"\",local,cleanMethodName});         j++;         Vector<Long> tempVector=null;         int useIndex=useList.indexOf(local);         if (useIndex == -1) {           useDataList.addElement(tempVector);           useList.addElement(local);           useIndex=useList.indexOf(local);         }         if (useDataList.size() > useIndex) {           tempVector=useDataList.elementAt(useIndex);           if (tempVector == null) {             tempVector=new Vector<Long>();           }           tempVector.addElement(new Long(statementCount));           useDataList.setElementAt(tempVector,useIndex);         }       }     }     j=0;     boxIt=currentStmt.getDefBoxes().iterator();     while (boxIt.hasNext()) {       ValueBox box=(ValueBox)boxIt.next();       if (box.getValue() instanceof Local) {         String local=cleanLocal(((Local)box.getValue()).toString());         sootstmtNode.addChild(\"defines\",new String[]{\"id\",\"local\",\"method\"},new String[]{j + \"\",local,cleanMethodName});         j++;         Vector<Long> tempVector=null;         int defIndex=defList.indexOf(local);         if (defIndex == -1) {           defDataList.addElement(tempVector);           defList.addElement(local);           defIndex=defList.indexOf(local);         }         if (defDataList.size() > defIndex) {           tempVector=defDataList.elementAt(defIndex);           if (tempVector == null) {             tempVector=new Vector<Long>();           }           tempVector.addElement(new Long(statementCount));           defDataList.setElementAt(tempVector,defIndex);         }       }     }     List<Local> liveLocalsIn=sll.getLiveLocalsBefore(currentStmt);     List<Local> liveLocalsOut=sll.getLiveLocalsAfter(currentStmt);     XMLNode livevarsNode=sootstmtNode.addChild(\"livevariables\",new String[]{\"incount\",\"outcount\"},new String[]{liveLocalsIn.size() + \"\",liveLocalsOut.size() + \"\"});     for (int i=0; i < liveLocalsIn.size(); i++) {       livevarsNode.addChild(\"in\",new String[]{\"id\",\"local\",\"method\"},new String[]{i + \"\",cleanLocal(liveLocalsIn.get(i).toString()),cleanMethodName});     }     for (int i=0; i < liveLocalsOut.size(); i++) {       livevarsNode.addChild(\"out\",new String[]{\"id\",\"local\",\"method\"},new String[]{i + \"\",cleanLocal(liveLocalsOut.get(i).toString()),cleanMethodName});     }     for (int i=0; i < body.getMethod().getParameterTypes().size(); i++) {       Vector<String> tempVec=new Vector<String>();       paramData.addElement(tempVec);     }     currentStmt.toString(up);     String jimpleStr=up.toString().trim();     if (currentStmt instanceof soot.jimple.IdentityStmt && jimpleStr.indexOf(\"@parameter\") != -1) {       String tempStr=jimpleStr.substring(jimpleStr.indexOf(\"@parameter\") + 10);       if (tempStr.indexOf(\":\") != -1)       tempStr=tempStr.substring(0,tempStr.indexOf(\":\")).trim();       if (tempStr.indexOf(\" \") != -1)       tempStr=tempStr.substring(0,tempStr.indexOf(\" \")).trim();       int paramIndex=new Integer(tempStr).intValue();       Vector<String> tempVec=paramData.elementAt(paramIndex);       if (tempVec != null)       tempVec.addElement(Long.toString(statementCount));       paramData.setElementAt(tempVec,paramIndex);     }     sootstmtNode.addChild(\"jimple\",toCDATA(jimpleStr),new String[]{\"length\"},new String[]{(jimpleStr.length() + 1) + \"\"});     labelID++;     statementCount++;   }   stmtsNode.addAttribute(\"count\",statementCount + \"\");   parametersNode.addAttribute(\"count\",body.getMethod().getParameterCount() + \"\");   for (int i=0; i < body.getMethod().getParameterTypes().size(); i++) {     XMLNode paramNode=parametersNode.addChild(\"parameter\",new String[]{\"id\",\"type\",\"method\",\"name\"},new String[]{i + \"\",body.getMethod().getParameterTypes().get(i).toString(),cleanMethodName,\"_parameter\" + i});     XMLNode sootparamNode=paramNode.addChild(\"soot_parameter\");     Vector<String> tempVec=paramData.elementAt(i);     for (int k=0; k < tempVec.size(); k++) {       sootparamNode.addChild(\"use\",new String[]{\"id\",\"line\",\"method\"},new String[]{k + \"\",String.valueOf(tempVec.elementAt(k)) + \"\",cleanMethodName});     }     sootparamNode.addAttribute(\"uses\",tempVec.size() + \"\");   }   xmlLabel.stmtCount=labelID;   xmlLabel.stmtPercentage=new Float((new Float(labelID).floatValue() / new Float(units.size()).floatValue()) * 100.0).longValue();   if (xmlLabel.stmtPercentage > maxStmtCount)   maxStmtCount=xmlLabel.stmtPercentage;   xmlLabelsList.addElement(xmlLabel);   Collection<Local> locals=body.getLocals();   Iterator<Local> localsIterator=locals.iterator();   Vector<String> localTypes=new Vector<String>();   Vector<Vector<XMLNode>> typedLocals=new Vector<Vector<XMLNode>>();   Vector<Integer> typeCounts=new Vector<Integer>();   int j=0;   int currentType=0;   while (localsIterator.hasNext()) {     int useCount=0;     int defineCount=0;     Local localData=(Local)localsIterator.next();     String local=cleanLocal((String)localData.toString());     String localType=localData.getType().toString();     if (!localTypes.contains(localType)) {       localTypes.addElement(localType);       typedLocals.addElement(new Vector<XMLNode>());       typeCounts.addElement(new Integer(0));     }     XMLNode localNode=new XMLNode(\"local\",\"\",new String[]{\"id\",\"method\",\"name\",\"type\"},new String[]{j + \"\",cleanMethodName,local,localType});     XMLNode sootlocalNode=localNode.addChild(\"soot_local\");     currentType=0;     for (int k=0; k < localTypes.size(); k++) {       if (localType.equalsIgnoreCase(localTypes.elementAt(k))) {         currentType=k;         Integer tempInt=new Integer(typeCounts.elementAt(k).intValue() + 1);         typeCounts.setElementAt(tempInt,k);         break;       }     }     for (int k=0; k < useList.size(); k++) {       String query=useList.elementAt(k);       if (query.equalsIgnoreCase(local)) {         Vector<Long> tempVector=useDataList.elementAt(useList.indexOf(local));         for (int i=0; i < tempVector.size(); i++) {           sootlocalNode.addChild(\"use\",new String[]{\"id\",\"line\",\"method\"},new String[]{i + \"\",((Long)tempVector.elementAt(i)).toString(),cleanMethodName});         }         useCount=tempVector.size();         break;       }     }     for (int k=0; k < defList.size(); k++) {       String query=(defList.elementAt(k));       if (query.equalsIgnoreCase(local)) {         Vector<Long> tempVector=defDataList.elementAt(defList.indexOf(local));         for (int i=0; i < tempVector.size(); i++) {           sootlocalNode.addChild(\"definition\",new String[]{\"id\",\"line\",\"method\"},new String[]{i + \"\",((Long)tempVector.elementAt(i)).toString(),cleanMethodName});         }         defineCount=tempVector.size();         break;       }     }     sootlocalNode.addAttribute(\"uses\",useCount + \"\");     sootlocalNode.addAttribute(\"defines\",defineCount + \"\");     Vector<XMLNode> list=typedLocals.elementAt(currentType);     list.addElement(localNode);     typedLocals.setElementAt(list,currentType);     localsNode.addChild((XMLNode)localNode.clone());     j++;   }   localsNode.addAttribute(\"count\",locals.size() + \"\");   XMLNode typesNode=localsNode.addChild(\"types\",new String[]{\"count\"},new String[]{localTypes.size() + \"\"});   for (int i=0; i < localTypes.size(); i++) {     String type=localTypes.elementAt(i);     XMLNode typeNode=typesNode.addChild(\"type\",new String[]{\"id\",\"type\",\"count\"},new String[]{i + \"\",type,typeCounts.elementAt(i) + \"\"});     Vector<XMLNode> list=typedLocals.elementAt(i);     for (j=0; j < list.size(); j++) {       typeNode.addChild(list.elementAt(j));     }   }   labelsNode.addAttribute(\"count\",labelCount + \"\");   XMLNode current=labelsNode.child;   for (int i=0; i < xmlLabelsList.size(); i++) {     XMLLabel tempLabel=xmlLabelsList.elementAt(i);     tempLabel.stmtPercentage=new Float((new Float(tempLabel.stmtPercentage).floatValue() / new Float(maxStmtCount).floatValue()) * 100.0).longValue();     if (current != null) {       current.addAttribute(\"stmtcount\",tempLabel.stmtCount + \"\");       current.addAttribute(\"stmtpercentage\",tempLabel.stmtPercentage + \"\");       current=current.next;     }   }   statementCount=0;   XMLNode exceptionsNode=methodNode.addChild(\"exceptions\");   Iterator<Trap> trapIt=body.getTraps().iterator();   if (trapIt.hasNext()) {     while (trapIt.hasNext()) {       Trap trap=trapIt.next();       XMLNode catchNode=exceptionsNode.addChild(\"exception\",new String[]{\"id\",\"method\",\"type\"},new String[]{(statementCount++) + \"\",cleanMethodName,Scene.v().quotedNameOf(trap.getException().getName())});       catchNode.addChild(\"begin\",new String[]{\"label\"},new String[]{stmtToName.get(trap.getBeginUnit()).toString()});       catchNode.addChild(\"end\",new String[]{\"label\"},new String[]{stmtToName.get(trap.getEndUnit()).toString()});       catchNode.addChild(\"handler\",new String[]{\"label\"},new String[]{stmtToName.get(trap.getHandlerUnit()).toString()});     }   }   exceptionsNode.addAttribute(\"count\",exceptionsNode.getNumberOfChildren() + \"\");   return; } "
"public static IntIterator rows(Table t,Predicate p){   IntIterator iter=null;   iter=getOptimizedIterator(t,p);   if (iter == null) {     iter=new FilterRowIterator(t.rows(),t,p);   }   return iter; } "
"public static Bitmap byteToBitmap(byte[] b){   return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length); } "
"private BSPTree<Euclidean1D> leafAfter(BSPTree<Euclidean1D> node){   node=childAfter(node);   while (node.getCut() != null) {     node=childBefore(node);   }   return node; } "
"JSONStringer open(Scope empty,String openBracket) throws JSONException {   if (stack.isEmpty() && out.length() > 0) {     throw new JSONException(\"Nesting problem: multiple top-level roots\");   }   beforeValue();   stack.add(empty);   out.append(openBracket);   return this; } "
"public StorageGetQuery userId(Integer value){   return unsafeParam(\"user_id\",value); } "
"private void doScroll(int delta){   scrollingOffset+=delta;   int itemHeight=getItemHeight();   int count=scrollingOffset / itemHeight;   int pos=currentItem - count;   int itemCount=viewAdapter.getItemsCount();   int fixPos=scrollingOffset % itemHeight;   if (Math.abs(fixPos) <= itemHeight / 2) {     fixPos=0;   }   if (isCyclic && itemCount > 0) {     if (fixPos > 0) {       pos--;       count++;     }  else     if (fixPos < 0) {       pos++;       count--;     }     while (pos < 0) {       pos+=itemCount;     }     pos%=itemCount;   }  else {     if (pos < 0) {       count=currentItem;       pos=0;     }  else     if (pos >= itemCount) {       count=currentItem - itemCount + 1;       pos=itemCount - 1;     }  else     if (pos > 0 && fixPos > 0) {       pos--;       count++;     }  else     if (pos < itemCount - 1 && fixPos < 0) {       pos++;       count--;     }   }   int offset=scrollingOffset;   if (pos != currentItem) {     setCurrentItem(pos,false);   }  else {     invalidate();   }   scrollingOffset=offset - count * itemHeight;   if (scrollingOffset > getHeight()) {     scrollingOffset=scrollingOffset % getHeight() + getHeight();   } } "
"public static void d(String tag,String msg){   if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {     Log.d(tag,buildMsg(msg));   } } "
"private static String doGetPath(String filename,int separatorAdd){   if (filename == null) {     return null;   }   int prefix=getPrefixLength(filename);   if (prefix < 0) {     return null;   }   int index=indexOfLastSeparator(filename);   int endIndex=index + separatorAdd;   if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {     return \"\";   }   return filename.substring(prefix,endIndex); } "
"public static String upperCaseFirst(String input){   if (input.charAt(0) >= 'a' && input.charAt(0) <= 'z') {     return (\"\" + input.charAt(0)).toUpperCase() + input.substring(1);   }  else {     return input;   } } "
"static int compact(@JobConstraint int[] constraints){   int result=0;   for (  int c : constraints) {     result|=c;   }   return result; } "
"public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {   if (lines == null) {     return;   }   if (lineEnding == null) {     lineEnding=LINE_SEPARATOR;   }   Charset cs=Charsets.toCharset(encoding);   for (  Object line : lines) {     if (line != null) {       output.write(StringCodingUtils.getBytes(line.toString(),cs));     }     output.write(StringCodingUtils.getBytes(lineEnding,cs));   } } "
"private static final void funnyShit(byte inputByte,byte[] in){   byte a=in[1];   byte b=inputByte;   byte c=funnyBytes[(int)a & 0xFF];   c-=inputByte;   in[0]+=c;   c=in[2];   c^=funnyBytes[(int)b & 0xFF];   a-=(int)c & 0xFF;   in[1]=a;   a=in[3];   c=a;   a-=(int)in[0] & 0xFF;   c=funnyBytes[(int)c & 0xFF];   c+=inputByte;   c^=in[2];   in[2]=c;   a+=(int)funnyBytes[(int)b & 0xFF] & 0xFF;   in[3]=a;   int d=((int)in[0]) & 0xFF;   d|=(in[1] << 8) & 0xFF00;   d|=(in[2] << 16) & 0xFF0000;   d|=(in[3] << 24) & 0xFF000000;   int ret_value=d >>> 0x1d;   d<<=3;   ret_value|=d;   in[0]=(byte)(ret_value & 0xFF);   in[1]=(byte)((ret_value >> 8) & 0xFF);   in[2]=(byte)((ret_value >> 16) & 0xFF);   in[3]=(byte)((ret_value >> 24) & 0xFF); } "
"protected void onEntityEvent(ActivitiEvent event){ } "
"@Override public void reset() throws XNIException {   super.reset();   fInDTD=false;   fVersion=\"1.0\";   fStandalone=false;   fNamespaces=fConfiguration.getFeature(NAMESPACES);   fAugmentations=null;   fDeclaredAttrs=null; } "
"public static SM_SYSTEM_MESSAGE STR_ABYSS_PVP_OFF(DescriptionId descriptionId){   return new SM_SYSTEM_MESSAGE(1301041,descriptionId); } "
"protected Criteria createCriteriaInternal(){   Criteria criteria=new Criteria();   return criteria; } "
"private static List<RangeWithCount> cleanup_(List<RangeWithCount> imed){   final Comparator<RangeWithCount> cmp=Comparator.comparing(null).thenComparing(Comparator.comparing(null));   final List<RangeWithCount> result=new ArrayList<>(imed.size());   sort(imed,cmp);   while (imed.size() >= 2) {     final RangeWithCount head=imed.remove(0);     final RangeWithCount succ=imed.get(0);     if (head.getRange().equals(succ.getRange())) {       succ.setCount(succ.getCount() + head.getCount());       continue;     }     if (head.getRange().getFloor() == succ.getRange().getFloor()) {       final double mid=head.getRange().getCeil();       final double ceil=succ.getRange().getCeil();       final double succ_range=succ.getRange().getWidth();       final double succ_left_fraction=(mid - succ.getRange().getFloor()) / succ_range;       final double succ_right_fraction=1 - succ_left_fraction;       head.setCount(head.getCount() + succ_left_fraction * succ.getCount());       succ.setCount(succ_right_fraction * succ.getCount());       succ.setRange(new Range(mid,ceil));       imed.add(0,head);       sort(imed,cmp);       continue;     }     if (head.getRange().getCeil() <= succ.getRange().getFloor()) {       if (Math.signum(head.getCount()) != 0)       result.add(head);       continue;     }     assert (head.getRange().getFloor() < succ.getRange().getFloor());     assert (succ.getRange().getFloor() < head.getRange().getCeil());     final double floor=head.getRange().getFloor();     final double ceil=succ.getRange().getFloor();     final double head_range=head.getRange().getWidth();     final double head_left_fraction=(ceil - floor) / head_range;     final double head_right_fraction=1 - head_left_fraction;     imed.add(0,head);     imed.add(0,new RangeWithCount(new Range(floor,ceil),head_left_fraction * head.getCount()));     head.setRange(new Range(ceil,head.getRange().getCeil()));     head.setCount(head_right_fraction * head.getCount());     sort(imed,cmp);   }   imed.stream().filter(null).forEach(null);   for (int i=0; i < result.size() - 1; ) {     final RangeWithCount pred=result.get(i);     final RangeWithCount succ=result.get(i + 1);     final double pred_range=pred.getRange().getWidth();     final double succ_range=succ.getRange().getWidth();     if (pred.getRange().getCeil() == succ.getRange().getFloor() && pred.getCount() * succ_range == succ.getCount() * pred_range) {       result.remove(i);       succ.setRange(new Range(pred.getRange().getFloor(),succ.getRange().getCeil()));       succ.setCount(succ.getCount() + pred.getCount());     }  else {       ++i;     }   }   return result; } "
"@Override public boolean accept(File file){   return file.isFile(); } "
"@Override protected boolean access(long time){   boolean access=super.access(time);   _data.setLastAccessed(_data.getAccessed());   _data.setAccessed(time);   _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (time + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));   return access; } "
"public void addListener(LegendOptionDataUpdateInterface listener){   if (listener != null) {     listenerList.add(listener);   } } "
"public long available(){   return arr.length - pos; } "
"public DataParseException(Throwable cause){   super(cause); } "
"public void testApp(){   assertTrue(true); } "
"public static void main(String[] args){   File destinationDirectory=Compiler.NO_DESTINATION_DIRECTORY;   File[] optionalSourcePath=null;   File[] classPath={new File(\".\")};   File[] optionalExtDirs=null;   File[] optionalBootClassPath=null;   String optionalCharacterEncoding=null;   boolean verbose=false;   boolean debugSource=true;   boolean debugLines=true;   boolean debugVars=false;   StringPattern[] warningHandlePatterns=Compiler.DEFAULT_WARNING_HANDLE_PATTERNS;   boolean rebuild=false;   int i;   for (i=0; i < args.length; ++i) {     String arg=args[i];     if (arg.charAt(0) != '-')     break;     if (\"-d\".equals(arg)) {       destinationDirectory=new File(args[++i]);     }  else     if (\"-sourcepath\".equals(arg)) {       optionalSourcePath=PathResourceFinder.parsePath(args[++i]);     }  else     if (\"-classpath\".equals(arg)) {       classPath=PathResourceFinder.parsePath(args[++i]);     }  else     if (\"-extdirs\".equals(arg)) {       optionalExtDirs=PathResourceFinder.parsePath(args[++i]);     }  else     if (\"-bootclasspath\".equals(arg)) {       optionalBootClassPath=PathResourceFinder.parsePath(args[++i]);     }  else     if (\"-encoding\".equals(arg)) {       optionalCharacterEncoding=args[++i];     }  else     if (\"-verbose\".equals(arg)) {       verbose=true;     }  else     if (\"-g\".equals(arg)) {       debugSource=true;       debugLines=true;       debugVars=true;     }  else     if (arg.startsWith(\"-g:\")) {       if (arg.indexOf(\"none\") != -1)       debugSource=(debugLines=(debugVars=false));       if (arg.indexOf(\"source\") != -1)       debugSource=true;       if (arg.indexOf(\"lines\") != -1)       debugLines=true;       if (arg.indexOf(\"vars\") != -1)       debugVars=true;     }  else     if (arg.startsWith(\"-warn:\")) {       warningHandlePatterns=StringPattern.parseCombinedPattern(arg.substring(6));     }  else     if (\"-rebuild\".equals(arg)) {       rebuild=true;     }  else     if (\"-help\".equals(arg)) {       System.out.printf(Compiler.USAGE,(Object[])null);       System.exit(1);     }  else {       System.err.println(\"Unrecognized command line option \\\"\" + arg + \"\\\"; try \\\"-help\\\".\");       System.exit(1);     }   }   if (i == args.length) {     System.err.println(\"No source files given on command line; try \\\"-help\\\".\");     System.exit(1);   }   File[] sourceFiles=new File[args.length - i];   for (int j=i; j < args.length; ++j)   sourceFiles[j - i]=new File(args[j]);   final Compiler compiler=new Compiler(optionalSourcePath,classPath,optionalExtDirs,optionalBootClassPath,destinationDirectory,optionalCharacterEncoding,verbose,debugSource,debugLines,debugVars,warningHandlePatterns,rebuild);   try {     compiler.compile(sourceFiles);   }  catch (  Exception e) {     if (verbose) {       e.printStackTrace();     }  else {       System.err.println(e.toString());     }     System.exit(1);   } } "
"private boolean checkFiltering(final SourceDataTag currentSourceDataTag,final ValueUpdate castedUpdate){   SourceDataTagQuality newSDQuality=new SourceDataTagQuality();   FilterType filterType=this.dataTagValueFilter.isCandidateForFiltering(currentSourceDataTag,castedUpdate,newSDQuality);   this.equipmentLogger.debug(\"checkFiltering - tag #\" + currentSourceDataTag.getId() + \" with Filter Type \"+ filterType);   if (!isFilterOk(filterType,currentSourceDataTag.getId())) {     this.equipmentSenderFilterModule.sendToFilterModule(currentSourceDataTag,castedUpdate,filterType.getNumber());     return false;   }  else {     return true;   } } "
"public static String collapseNewlines(String str){   return collapseCharacter(str,'\\n'); } "
"public void insert(final T object,final int index){ synchronized (mLock) {     mList.add(index,object);   }   notifyDataSetChanged(); } "
"private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){   try {     PackageManager pm=context.getPackageManager();     List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);     if (handlers == null || handlers.size() == 0) {       return false;     }     for (    ResolveInfo resolveInfo : handlers) {       IntentFilter filter=resolveInfo.filter;       if (filter == null)       continue;       if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;       if (resolveInfo.activityInfo == null)       continue;       return true;     }   }  catch (  RuntimeException e) {     Logger.e(\"CustomTabsHelper\",\"Runtime exception while getting specialized handlers\");   }   return false; } "
"public Builder minWidth(Number minWidth){   this.minWidth=minWidth;   return this; } "
"public void updateDisplayName(){   setDisplayName(computeDisplayName()); } "
"public Argument(String name){   _name=name; } "
"public ExperimentMissingHypothesisException(ErrorCode errorCode,String detailMessage){   super(errorCode,detailMessage); } "
"@Deployment public void ActivitiEventType() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"variableProcess\");   assertNotNull(processInstance);   assertEquals(3,listener.getEventsReceived().size());   ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);   assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getExecutionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertNull(event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(123,event.getVariableValue());   event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);   assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getExecutionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertNull(event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(456,event.getVariableValue());   event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);   assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getExecutionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertNull(event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(456,event.getVariableValue()); } "
"public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){   if (reference == null) {     throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));   }   return reference; } "
"public void store(String path,Storable obj) throws IOException {   store(new File(path),obj); } "
"@Override public Pair<Aggregation,Aggregation> nest(){   throw new UnsupportedOperationException(\"Cardinality aggregators cannot support dynamic nesting.\"); } "
"public static PageRespJson buildFailureResponse(String errorMsg,Integer reqId){   PageRespJson respJson=new PageRespJson();   respJson.setCode(ResponseCode.FAILURE.getCode());   respJson.setMsg(errorMsg);   respJson.setReqId(reqId);   respJson.setRecordsTotal(0L);   respJson.setRecordsFiltered(0L);   return respJson; } "
"protected int addBaseLine(NlComponent node,String id){   int baselineY=node.getBaseline();   if (baselineY != -1) {     Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);     myHorizontalEdges.add(new Segment(b.y + baselineY,b.x,x2(b),node,id,SegmentType.BASELINE,NO_MARGIN));   }   return baselineY; } "
"public PanControl(int mouseButton,boolean panOverItem){   m_button=mouseButton;   m_panOverItem=panOverItem; } "
"private Object invokeTrustEquivalenceMethod(Object proxy,Method method,Object[] args){   String name=method.getName();   if (name.equals(\"checkTrustEquivalence\")) {     Object obj=args[0];     boolean b=proxy == obj || (obj != null && sameProxyClass(proxy,obj) && checkTrustEquivalence(Proxy.getInvocationHandler(obj)));     return Boolean.valueOf(b);   }  else {     throw new AssertionError(method);   } } "
"public VideoEditQuery(VkApiClient client,UserActor actor,int videoId){   super(client,\"video.edit\",OkResponse.class);   accessToken(actor.getAccessToken());   videoId(videoId); } "
"public void createContainerFromWidgets(ArrayList<ConstraintWidget> widgets,ConstraintWidgetContainer containerInstance,String name){   Collections.sort(widgets,null);   if (widgets.size() == 0) {     return;   }   for (  ConstraintWidget w : mWidgets.values()) {     for (    ConstraintWidget widget : widgets) {       w.disconnectWidget(widget);       widget.resetAnchors();       widget.setHorizontalBiasPercent(0.5f);       widget.setVerticalBiasPercent(0.5f);     }   }   WidgetContainer parent=(WidgetContainer)widgets.get(0).getParent();   if (parent == null) {     parent=mRoot;   }   ConstraintWidgetContainer container=ConstraintWidgetContainer.createContainer(containerInstance,name,widgets,8);   if (container != null) {     if (container.getCompanionWidget() == null) {       container.setCompanionWidget(WidgetCompanion.create(container));     }     parent.add(container);     setWidget(container);     boolean previousAnimationState=Animator.doAnimation();     Animator.setAnimationEnabled(false);     mRoot.layout();     Animator.setAnimationEnabled(previousAnimationState);   } } "
"private String convertPrivateKeytoWIF(byte[] privatekey){   byte[] step1=concateByteArray(new byte[]{(byte)0x80},privatekey);   byte[] step2to3=SHA256hash(SHA256hash(step1));   byte[] checksum=getCheckSum(step2to3);   byte[] step5=concateByteArray(step1,checksum);   return base58encode(step5); } "
"public void denyAll(PermissionFlag flag){   denyAll(flag,defaultMessage); } "
"public void registerCustomizer(JmxConnectionCustomizer customizer){   JmxConnectionSupportImpl.registerCustomizer(customizer); } "
"public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){   if (oldSampleRate == newSampleRate) {     return samples;   }   int newLength=Math.round(((float)samples.length / oldSampleRate * newSampleRate));   float lengthMultiplier=(float)newLength / samples.length;   short[] interpolatedSamples=new short[newLength];   for (int i=0; i < newLength; i++) {     float currentPosition=i / lengthMultiplier;     int nearestLeftPosition=(int)currentPosition;     int nearestRightPosition=nearestLeftPosition + 1;     if (nearestRightPosition >= samples.length) {       nearestRightPosition=samples.length - 1;     }     float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];     float positionFromLeft=currentPosition - nearestLeftPosition;     interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);   }   return interpolatedSamples; } "
"private Utils(){ } "
"@Override public Packet read(PacketBuffer buf){   PacketSpec spec=getSpec(buf.readInt());   Packet packet=new Packet(new PacketBuilder(this,spec));   packet.read(buf);   return packet; } "
"private void exportToYSLD(){   SLDWriterInterface ysldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.YSLD);   for (  SLDDataInterface sldData : sldDataList) {     StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);     String layerName=sldData.getLayerNameWithOutSuffix();     if (sld != null) {       String sldString=ysldWriter.encodeSLD(sldData.getResourceLocator(),sld);       String ysldFilename=layerName + \".\" + YSLDTool.YSLD_FILE_EXTENSION;       String destinationFolder=sldData.getSLDFile().getParent();       File fileToSave=new File(destinationFolder,ysldFilename);       if (fileToSave.exists()) {         ConsoleManager.getInstance().error(this,Localisation.getField(YSLDTool.class,\"YSLDTool.destinationAlreadyExists\") + \" \" + ysldFilename);       }  else {         ConsoleManager.getInstance().information(this,Localisation.getField(YSLDTool.class,\"YSLDTool.exportToYSLDMsg\") + \" \" + ysldFilename);         BufferedWriter out;         try {           out=new BufferedWriter(new FileWriter(fileToSave));           out.write(sldString);           out.close();         }  catch (        IOException e) {           ConsoleManager.getInstance().exception(this,e);         }       }     }   } } "
"public void resetOriginals(){   mStartingStartTrim=0;   mStartingEndTrim=0;   mStartingRotation=0;   setStartTrim(0);   setEndTrim(0);   setRotation(0); } "
"private void callRedirect(String url,HttpServletResponse resp,HttpServletRequest req,String statusCodeString) throws RequestHandlerException {   if (Debug.infoOn())   Debug.logInfo(\"Sending redirect to: [\" + url + \"], sessionId=\"+ UtilHttp.getSessionId(req),module);   if (url == null || url.isEmpty()) {     Debug.logError(\"Scipio: Redirect URL is empty\",module);     throw new RequestHandlerException(\"Scipio: Redirect URL is empty\");   }   Enumeration<String> attributeNameEnum=UtilGenerics.cast(req.getAttributeNames());   Map<String,Object> reqAttrMap=new HashMap<String,Object>();   Integer statusCode;   try {     statusCode=Integer.valueOf(statusCodeString);   }  catch (  NumberFormatException e) {     statusCode=303;   }   while (attributeNameEnum.hasMoreElements()) {     String name=attributeNameEnum.nextElement();     Object obj=req.getAttribute(name);     if (obj instanceof Serializable) {       reqAttrMap.put(name,obj);     }   }   if (reqAttrMap.size() > 0) {     reqAttrMap.remove(\"_REQUEST_HANDLER_\");     byte[] reqAttrMapBytes=UtilObject.getBytes(reqAttrMap);     if (reqAttrMapBytes != null) {       req.getSession().setAttribute(\"_REQ_ATTR_MAP_\",StringUtil.toHexString(reqAttrMapBytes));     }   }   try {     resp.setStatus(statusCode);     resp.setHeader(\"Location\",url);     resp.setHeader(\"Connection\",\"close\");   }  catch (  IllegalStateException ise) {     throw new RequestHandlerException(ise.getMessage(),ise);   } } "
"public void rootModified(ISVNRepositoryLocation root){   Iterator it=listeners.iterator();   while (it.hasNext()) {     IRepositoryListener listener=(IRepositoryListener)it.next();     listener.repositoryModified(root);   } } "
"public Sequence(final long initialValue){   UNSAFE.putOrderedLong(this,VALUE_OFFSET,initialValue); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200707,skillcaster,skillname); } "
"public void delete() throws IOException {   close();   deleteContents(directory); } "
"@Override public void apply(NexusStreamParser np) throws Exception { } "
"public Builder takeLastColumns(String... columns){   return add(ReduceOp.TakeLast,columns); } "
"public Boolean deleteCustomerReview(EntityManager em,String customerReviewId){   Boolean status=true;   CustomerReview customerReview=null;   try {     if (!em.getTransaction().isActive()) {       em.getTransaction().begin();     }     customerReview=em.find(CustomerReview.class,customerReviewId);     if (customerReview != null) {       em.remove(customerReview);       em.getTransaction().commit();     }  else {       logger.info(\"CustomerReview \" + customerReviewId + \" does not exist in the db\");       status=false;     }   }  catch (  Exception e) {     status=false;     logger.error(\"Error occured during deletion of customer review. Detailed info: \" + e);   }   return status; } "
"public Boolean isEncoded(){   return encoded; } "
"public AdsCreateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,String name){   super(client,\"ads.createTargetGroup\",CreateTargetGroupResponse.class);   accessToken(actor.getAccessToken());   accountId(accountId);   name(name); } "
"public static void toJrxml(Grid grid,Map<?,?> params,Writer writer){   render(grid,params,writer,JASPER_TEMPLATE); } "
"public void backup(int amount){   inBuf+=amount;   if ((bufpos-=amount) < 0)   bufpos+=bufsize; } "
"public CMUDiphoneVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){   super(name,gender,age,description,locale,domain,organization,lexicon);   setRate(150f);   setPitch(100F);   setPitchRange(11F);   this.database=database; } "
"public Matrix arrayRightDivide(Matrix B){   checkMatrixDimensions(B);   Matrix X=new Matrix(m,n);   double[][] C=X.getArray();   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       C[i][j]=A[i][j] / B.A[i][j];     }   }   return X; } "
"private static String encode64(byte[] Input){   int iLen=Input.length;   int oDataLen=(iLen * 4 + 2) / 3;   int oLen=((iLen + 2) / 3) * 4;   char[] out=new char[oLen];   int ip=0;   int op=0;   while (ip < iLen) {     int i0=Input[ip++] & 0xff;     int i1=ip < iLen ? Input[ip++] & 0xff : 0;     int i2=ip < iLen ? Input[ip++] & 0xff : 0;     int o0=i0 >>> 2;     int o1=((i0 & 3) << 4) | (i1 >>> 4);     int o2=((i1 & 0xf) << 2) | (i2 >>> 6);     int o3=i2 & 0x3F;     out[op++]=iota64[o0];     out[op++]=iota64[o1];     out[op]=op < oDataLen ? iota64[o2] : '=';     op++;     out[op]=op < oDataLen ? iota64[o3] : '=';     op++;   }   return new String(out); } "
"public XPointerParserConfiguration(SymbolTable symbolTable){   this(symbolTable,null,null); } "
"public GroupsBanUserQuery banUser(UserActor actor,int groupId,int userId){   return new GroupsBanUserQuery(getClient(),actor,groupId,userId); } "
"public Bundle onSaveInstanceState(){   Bundle state=new Bundle();   state.putInt(\"destType\",this.destType);   state.putInt(\"srcType\",this.srcType);   state.putInt(\"mQuality\",this.mQuality);   state.putInt(\"targetWidth\",this.targetWidth);   state.putInt(\"targetHeight\",this.targetHeight);   state.putInt(\"encodingType\",this.encodingType);   state.putInt(\"mediaType\",this.mediaType);   state.putInt(\"numPics\",this.numPics);   state.putBoolean(\"allowEdit\",this.allowEdit);   state.putBoolean(\"correctOrientation\",this.correctOrientation);   state.putBoolean(\"saveToPhotoAlbum\",this.saveToPhotoAlbum);   if (this.croppedUri != null) {     state.putString(\"croppedUri\",this.croppedUri.toString());   }   if (this.imageUri != null) {     state.putString(\"imageUri\",this.imageUri.toString());   }   return state; } "
"private static ColumnType selectType(List<ColumnType> typeCandidates){   if (typeCandidates.isEmpty()) {     return CATEGORY;   }  else {     return typeCandidates.get(0);   } } "
"public static SM_SYSTEM_MESSAGE STR_STIGMA_RETURN(int num0sp){   return new SM_SYSTEM_MESSAGE(1300412,num0sp); } "
"private void format(){   Editable text=getText();   CharSequence formatted=WhatsappViewCompat.extractFlagsForEditText(text);   removeTextChangedListener(mEditTextWatcher);   int selectionEnd=getSelectionEnd();   int selectionStart=getSelectionStart();   setText(formatted);   setSelection(selectionStart,selectionEnd);   Editable formattedEditableText=getText();   sendAfterTextChanged(formattedEditableText);   addTextChangedListener(mEditTextWatcher); } "
"@Override public void actionPerformed(ActionEvent ev){   final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();   final megan.remote.ServicePanel servicePanel=remoteServiceBrowser.getServicePanel();   if (servicePanel != null) {     final Collection<String> selectedFiles=remoteServiceBrowser.getServicePanel().getSelectedFiles();     if (selectedFiles.size() > 1) {       CompareWindow compareWindow=new CompareWindow(getViewer().getFrame(),remoteServiceBrowser.getDir(),selectedFiles);       if (!compareWindow.isCanceled()) {         final Director newDir=Director.newProject();         newDir.getMainViewer().getFrame().setVisible(true);         newDir.getMainViewer().setDoReInduce(true);         newDir.getMainViewer().setDoReset(true);         final String command=compareWindow.getCommand();         if (command != null)         newDir.execute(command,newDir.getCommandManager());       }     }   } } "
"public BoundedInputStream(InputStream in,long size){   this.max=size;   this.in=in; } "
"@Override public void onUIRefreshBegin(PtrFrameLayout frame){   mDrawable.setAlpha(255);   mDrawable.start(); } "
"private double[][] generatePartition(double[] sample){   final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);   final int length=sample.length;   final double[][] out=new double[5][];   int cur=0;   int offset=0;   int sampleCount=0;   for (int i=0; i < 5; i++) {     if (cur == length || offset == length) {       break;     }     final int next;     if (i == 4 || cur == length - 1) {       next=length - 1;     }  else {       next=randomDataGenerator.nextInt(cur,length - 1);     }     final int subLength=next - cur + 1;     out[i]=new double[subLength];     System.arraycopy(sample,offset,out[i],0,subLength);     cur=next + 1;     sampleCount++;     offset+=subLength;   }   if (sampleCount < 5) {     double[][] out2=new double[sampleCount][];     for (int j=0; j < sampleCount; j++) {       final int curSize=out[j].length;       out2[j]=new double[curSize];       System.arraycopy(out[j],0,out2[j],0,curSize);     }     return out2;   }  else {     return out;   } } "
"public BoardRestoreCommentQuery restoreComment(UserActor actor,int groupId,int topicId,int commentId){   return new BoardRestoreCommentQuery(getClient(),actor,groupId,topicId,commentId); } "
"default void writeAttribute(NamespaceManager ns,AttributeId attributeId,DataValue value,String indexRange) throws UaException {   AttributeWriter.writeAttribute(ns,this,attributeId,value,indexRange); } "
"public Object clone(){   return new DeadlockAvoidanceEdge(sc); } "
"public static void writeFileRaw(String fileName,byte[][] contents) throws IOException {   try (OutputStream output=new BufferedOutputStream(new FileOutputStream(fileName))){     for (    byte[] content : contents) {       output.write(content);     }     output.flush();   }  } "
"public boolean hasDataRecords(){   long blkNum=(Long)getVal(OFFSET_TS_BLOCKID,BIGINT).asJavaVal();   return blkNum != NO_SLOT_BLOCKID ? true : false; } "
"private void requestAudioPermissions(){   if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(),AUDIO_PERMS)) {     showPermissionRationale();   }  else {     ActivityCompat.requestPermissions(this.getActivity(),new String[]{AUDIO_PERMS},REQUEST_AUDIO_PERMS);   } } "
"public void unLock(File targetFile){   File lockFile=new File(targetFile.getParentFile().getAbsolutePath().concat(\"/lock\"));   if (!lockFile.exists()) {     return;   }   if (this.mRefCountMap.containsKey(lockFile.getAbsolutePath())) {     FileLockCount fileLockCount=this.mRefCountMap.get(lockFile.getAbsolutePath());     if (fileLockCount != null) {       java.nio.channels.FileLock fileLock=fileLockCount.mFileLock;       RandomAccessFile randomAccessFile=fileLockCount.fOs;       FileChannel fileChannel=fileLockCount.fChannel;       try {         if (RefCntDec(lockFile.getAbsolutePath()) <= 0) {           if (fileLock != null && fileLock.isValid()) {             fileLock.release();           }           if (randomAccessFile != null) {             randomAccessFile.close();           }           if (fileChannel != null) {             fileChannel.close();           }         }       }  catch (      IOException e) {         e.printStackTrace();       }     }   } } "
"private void addResizeHandles(){   mResizeHandles.add(mLeftTop);   mResizeHandles.add(mLeftBottom);   mResizeHandles.add(mRightTop);   mResizeHandles.add(mRightBottom);   if (mWidget instanceof Guideline) {     mResizeHandles.add(mLeftSide);     mResizeHandles.add(mTopSide);   }  else {     if (USE_SIDE_RESIZE) {       mResizeHandles.add(mLeftSide);       mResizeHandles.add(mTopSide);       mResizeHandles.add(mRightSide);       mResizeHandles.add(mBottomSide);     }   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_A_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200904,skilltarget); } "
"public CollapsedSubtreeLayout(String group,int orientation){   super(group);   m_orientation=orientation; } "
"private static float drawDash(Path2D.Float path,float dashPercentage,long prevX,long prevY,long nextX,long nextY,double currXNorm,double currYNorm){   if (prevX == nextX && prevY == nextY) {     return dashPercentage;   }   double xd, yd;   double prevXNorm=path.getCurrentPoint().getX();   double prevYNorm=path.getCurrentPoint().getY();   float pathLength=(float)Point2D.distance(prevXNorm,prevYNorm,currXNorm,currYNorm);   float dashLength=computeDashLength(DASH_LENGTH,X_TO_Y_RATIO,prevX,prevY,nextX,nextY,prevXNorm,prevYNorm,currXNorm,currYNorm);   float drawLength=dashLength / 2;   float currentDashPosition=dashPercentage * dashLength;   while (pathLength > 0) {     xd=currXNorm - prevXNorm;     yd=currYNorm - prevYNorm;     if (currentDashPosition > drawLength) {       float currentDrawLength=currentDashPosition - drawLength;       float pathLengthToDraw=pathLength > currentDrawLength ? currentDrawLength : pathLength;       path.lineTo(prevXNorm + xd * pathLengthToDraw / pathLength,prevYNorm + yd * pathLengthToDraw / pathLength);       currentDashPosition-=pathLengthToDraw;       pathLength-=pathLengthToDraw;     }  else {       float pathLengthToDraw=pathLength > currentDashPosition ? currentDashPosition : pathLength;       path.moveTo(prevXNorm + xd * pathLengthToDraw / pathLength,prevYNorm + yd * pathLengthToDraw / pathLength);       currentDashPosition-=pathLengthToDraw;       pathLength-=pathLengthToDraw;     }     prevXNorm=path.getCurrentPoint().getX();     prevYNorm=path.getCurrentPoint().getY();     if (currentDashPosition == 0) {       currentDashPosition=dashLength;     }   }   return currentDashPosition / dashLength; } "
"public final int establishedFusionMode(){   return establishedFusionMode; } "
"public void testApp(){   assertTrue(true); } "
"public FaveGetUsersQuery(VkApiClient client,UserActor actor){   super(client,\"fave.getUsers\",GetUsersResponse.class);   accessToken(actor.getAccessToken()); } "
"public Response<?> response(){   return response; } "
"@Override public void onUIRefreshComplete(PtrFrameLayout frame){   mDrawable.stop(); } "
"public Iterator tuples(IntIterator rows){   return m_tuples.iterator(rows); } "
"private void typeAlphabetic(char c){   if (Character.isUpperCase(c)) {     controller.keyPress(KeyEvent.VK_SHIFT);   }   controller.keyPress(Character.toUpperCase(c));   controller.keyRelease(Character.toUpperCase(c));   if (Character.isUpperCase(c)) {     controller.keyRelease(KeyEvent.VK_SHIFT);   } } "
"private static Complex[] dft(final Complex[] x,final int sgn){   final int n=x.length;   final double[] cos=new double[n];   final double[] sin=new double[n];   final Complex[] y=new Complex[n];   for (int i=0; i < n; i++) {     final double arg=2.0 * FastMath.PI * i / n;     cos[i]=FastMath.cos(arg);     sin[i]=FastMath.sin(arg);   }   for (int i=0; i < n; i++) {     double yr=0.0;     double yi=0.0;     for (int j=0; j < n; j++) {       final int index=(i * j) % n;       final double c=cos[index];       final double s=sin[index];       final double xr=x[j].getReal();       final double xi=x[j].getImaginary();       yr+=c * xr - sgn * s * xi;       yi+=sgn * s * xr + c * xi;     }     y[i]=new Complex(yr,yi);   }   return y; } "
"@Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(ClearMapEvent event){   nianticManager.cancelPendingSearches();   clearMarkers();   MarkerRefreshController.getInstance().clear(); } "
"public DataSourceField(String name,Class<?> fieldType){   super();   this.name=name;   this.fieldType=fieldType; } "
"public int size(){   return size; } "
"public void clearLastReceivedHeaders(){   this.lastReceivedHeaders=null; } "
"public boolean findFirst(String regularExpression){   return findAndUncollapseNext(regularExpression,false,false) > 0; } "
"public static void write(byte[] data,OutputStream output) throws IOException {   if (data != null) {     output.write(data);   } } "
"public static boolean hasProvisionMethod(DeclaredType moduleType){   TypeElement moduleElement=(TypeElement)moduleType.asElement();   Preconditions.checkArgument(moduleElement.getAnnotation(Module.class) != null,String.format(\"not module: %s.\",moduleType));   for (  Element element : moduleElement.getEnclosedElements()) {     if (element.getKind().equals(ElementKind.METHOD) && (element.getAnnotation(Provides.class) != null)) {       return true;     }   }   return false; } "
"public int compare(File file1,File file2){   return delegate.compare(file2,file1); } "
"public synchronized void checkOwnershipAndReacquire() throws LockingException {   if (null == lockAcquireFuture || !lockAcquireFuture.isDefined()) {     throw new LockingException(lockPath,\"check ownership before acquiring\");   }   if (haveLock()) {     return;   }   reacquireLock(true); } "
"public SyntaxView(Element element,Configuration config,String prefix){   super(element);   singleColorSelect=config.getPrefixBoolean(prefix,PROPERTY_SINGLE_COLOR_SELECT,false);   rightMarginColor=new Color(config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLOR,0xFF7777));   rightMarginColumn=config.getPrefixInteger(prefix,PROPERTY_RIGHT_MARGIN_COLUMN,0);   String textaa=config.getPrefixProperty(prefix,PROPERTY_TEXTAA,\"DEFAULT\");   textAAHint=TEXT_AA_HINT_NAMES.get(textaa); } "
"public Matrix(double vals[],int m){   this.m=m;   n=(m != 0 ? vals.length / m : 0);   if (m * n != vals.length) {     throw new IllegalArgumentException(\"Array length must be a multiple of m.\");   }   A=new double[m][n];   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       A[i][j]=vals[i + j * m];     }   } } "
"public static String generateStackInfo(boolean keepInnerClass,int stackOffset){   StackTraceElement[] currentStack=getCurrentStack();   StackTraceElement element=currentStack[stackOffset];   String className=element.getClassName();   String pkgPath[]=className.split(\"\\\\.\");   if (pkgPath.length > 0) {     className=pkgPath[pkgPath.length - 1];   }   int innerclassSymbolIndex=className.indexOf(\"$\");   String innerClassName=null;   if (innerclassSymbolIndex != -1) {     innerClassName=className.substring(innerclassSymbolIndex + 1);     className=className.substring(0,innerclassSymbolIndex);   }   String methodName=element.getMethodName();   int lineNum=element.getLineNumber();   if (keepInnerClass && (!TextUtils.isEmpty(innerClassName))) {     methodName=String.format(\"$%s#%s()\",innerClassName,methodName);   }  else {     methodName=String.format(\"#%s()\",methodName);   }   return String.format(\"[(%s.java:%s)%s]\",className,lineNum,methodName); } "
"public void clearBasicAuth(){   this.httpClient.getCredentialsProvider().clear(); } "
"public static int interp(int c1,int c2,double frac){   double ifrac=1 - frac;   return rgba((int)Math.round(frac * red(c2) + ifrac * red(c1)),(int)Math.round(frac * green(c2) + ifrac * green(c1)),(int)Math.round(frac * blue(c2) + ifrac * blue(c1)),(int)Math.round(frac * alpha(c2) + ifrac * alpha(c1))); } "
"public boolean isNavBarTintEnabled(){   return mNavBarTintEnabled; } "
"public static void install(Context context,String filename){   install(context,BIN_DIR_NAME,filename); } "
"protected final void fireExpressionChange(){   Object[] lstnrs=m_listeners.getArray();   for (int i=0; i < lstnrs.length; ++i) {     ((ExpressionListener)lstnrs[i]).expressionChanged(this);   } } "
"public ReversePseudoTopologicalOrderer(){   super();   setReverseOrder(true); } "
"public static InputStream toInputStream(String input,String encoding) throws IOException {   byte[] bytes=StringCodingUtils.getBytes(input,Charsets.toCharset(encoding));   return new ByteArrayInputStream(bytes); } "
"public static Object[] ordinalArray(Iterator tuples,String field){   return DataLib.ordinalArray(tuples,field,DefaultLiteralComparator.getInstance()); } "
"public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){   List<Target> targets=new ArrayList<Target>();   if (segmentsAndBoundaries.size() == 0)   return targets;   Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);   if (!last.getTagName().equals(MaryXML.BOUNDARY)) {     Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);     Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);     Element parent=(Element)token.getParentNode();     parent.appendChild(finalPause);     segmentsAndBoundaries.add(finalPause);   }   for (  Element sOrB : segmentsAndBoundaries) {     String phone=UnitSelector.getPhoneSymbol(sOrB);     Target t=(Target)sOrB.getUserData(\"target\");     if (t == null) {       t=new Target(phone,sOrB);       sOrB.setUserData(\"target\",t,Target.targetFeatureCloner);     }     targets.add(t);   }   return targets; } "
"public static void dumpRecipes(String filename) throws IOException {   FileOutputStream fos=new FileOutputStream(filename);   OutputStreamWriter osw=new OutputStreamWriter(fos,\"utf-8\");   BufferedWriter writer=new BufferedWriter(osw);   List<?> recipes=CraftingManager.getInstance().getRecipeList();   for (  Object obj : recipes) {     if (obj == null)     continue;     if (obj instanceof IRecipe) {       ItemStack is=((IRecipe)obj).getRecipeOutput();       if (is == null)       continue;       String s=is.stackSize + \"x\" + is.getUnlocalizedName()+ \" = \";       List<ItemStack> ingredients=getIngredients((IRecipe)obj);       boolean first=true;       for (      ItemStack isIngredient : ingredients) {         if (!first)         s+=\", \";         s+=isIngredient.stackSize + \"x\" + isIngredient.getUnlocalizedName();         s+=\"(\" + isIngredient.getDisplayName() + \")\";         first=false;       }       s+=\"\\n\";       writer.write(s);     }   }   Iterator<?> furnaceIt=FurnaceRecipes.instance().getSmeltingList().keySet().iterator();   while (furnaceIt.hasNext()) {     ItemStack isInput=(ItemStack)furnaceIt.next();     ItemStack isOutput=(ItemStack)FurnaceRecipes.instance().getSmeltingList().get(isInput);     String s=isOutput.stackSize + \"x\" + isOutput.getUnlocalizedName()+ \" = FUEL + \"+ isInput.stackSize+ \"x\"+ isInput.getUnlocalizedName()+ \"\\n\";     writer.write(s);   }   writer.close(); } "
"public static byte[] ledgerId2Bytes(long ledgerId){   return Long.toString(ledgerId).getBytes(UTF_8); } "
"private void registerMetricsAppender(){   LoggerContext factory=(LoggerContext)LoggerFactory.getILoggerFactory();   Logger rootLogger=factory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);   InstrumentedAppender appender=new InstrumentedAppender(MetricRegistryFactory.getRegistry());   appender.setContext(rootLogger.getLoggerContext());   appender.start();   rootLogger.addAppender(appender); } "
"private void determineProsodicSettings(Document doc){   NodeList prosodies=doc.getElementsByTagName(MaryXML.PROSODY);   for (int i=0; i < prosodies.getLength(); i++) {     Element prosody=(Element)prosodies.item(i);     ProsodicSettings settings=new ProsodicSettings();     ProsodicSettings parentSettings=new ProsodicSettings();     Element ancestor=(Element)DomUtils.getAncestor(prosody,MaryXML.PROSODY);     if (ancestor != null) {       ProsodicSettings testSettings=(ProsodicSettings)prosodyMap.get(ancestor);       if (testSettings != null) {         parentSettings=testSettings;       }     }     settings.setRate(parentSettings.rate() + getPercentageDelta(prosody.getAttribute(\"rate\")));     settings.setAccentProminence(parentSettings.accentProminence() + getPercentageDelta(prosody.getAttribute(\"accent-prominence\")));     settings.setAccentSlope(parentSettings.accentSlope() + getPercentageDelta(prosody.getAttribute(\"accent-slope\")));     settings.setNumberOfPauses(parentSettings.numberOfPauses() + getPercentageDelta(prosody.getAttribute(\"number-of-pauses\")));     settings.setPauseDuration(parentSettings.pauseDuration() + getPercentageDelta(prosody.getAttribute(\"pause-duration\")));     settings.setVowelDuration(parentSettings.vowelDuration() + getPercentageDelta(prosody.getAttribute(\"vowel-duration\")));     settings.setPlosiveDuration(parentSettings.plosiveDuration() + getPercentageDelta(prosody.getAttribute(\"plosive-duration\")));     settings.setFricativeDuration(parentSettings.fricativeDuration() + getPercentageDelta(prosody.getAttribute(\"fricative-duration\")));     settings.setNasalDuration(parentSettings.nasalDuration() + getPercentageDelta(prosody.getAttribute(\"nasal-duration\")));     settings.setLiquidDuration(parentSettings.liquidDuration() + getPercentageDelta(prosody.getAttribute(\"liquid-duration\")));     settings.setGlideDuration(parentSettings.glideDuration() + getPercentageDelta(prosody.getAttribute(\"glide-duration\")));     String sVolume=prosody.getAttribute(\"volume\");     if (sVolume.equals(\"\")) {       settings.setVolume(parentSettings.volume());     }  else     if (isPercentageDelta(sVolume)) {       int newVolume=parentSettings.volume() + getPercentageDelta(sVolume);       if (newVolume < 0)       newVolume=0;  else       if (newVolume > 100)       newVolume=100;       settings.setVolume(newVolume);     }  else     if (isUnsignedNumber(sVolume)) {       settings.setVolume(getUnsignedNumber(sVolume));     }  else     if (sVolume.equals(\"silent\")) {       settings.setVolume(0);     }  else     if (sVolume.equals(\"soft\")) {       settings.setVolume(25);     }  else     if (sVolume.equals(\"medium\")) {       settings.setVolume(50);     }  else     if (sVolume.equals(\"loud\")) {       settings.setVolume(75);     }     prosodyMap.put(prosody,settings);   } } "
"public static void process(List<Packages> pkgList) throws Exception {   init();   String[] temps=templates.split(\",\");   String[] vmFiles=new String[temps.length];   for (int i=0; i < temps.length; i++) {     vmFiles[i]=temps[i] + \".vm\";   }   for (  Packages pkg : pkgList) {     for (    String vmFile : vmFiles) {       generator(vmFile,pkg);     }   } } "
"public double similarityTo(Distribution dOther){   TreeMap tOverAll=new TreeMap();   Iterator iThisIter=hDistro.entrySet().iterator();   Iterator iOtherIter=dOther.asTreeMap().entrySet().iterator();   while (iThisIter.hasNext()) {     java.util.Map.Entry e=(java.util.Map.Entry)iThisIter.next();     Double[] dVals=new Double[2];     dVals[0]=(Double)e.getValue();     dVals[1]=0.0;     tOverAll.put(e.getKey(),dVals);   }   while (iOtherIter.hasNext()) {     Double[] dVals=new Double[2];     java.util.Map.Entry e=(java.util.Map.Entry)iOtherIter.next();     if (tOverAll.containsKey(e.getKey())) {       dVals=(Double[])tOverAll.get(e.getKey());       dVals[1]=(Double)e.getValue();     }  else {       dVals=new Double[2];       dVals[0]=0.0;       dVals[1]=(Double)e.getValue();     }     tOverAll.put(e.getKey(),dVals);   }   Iterator iIter=tOverAll.entrySet().iterator();   double dDiff=0.0;   while (iIter.hasNext()) {     java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();     Double[] dVals=(Double[])e.getValue();     dDiff+=Math.abs(dVals[1] - dVals[0]);   }   return 1.0 - (dDiff / (calcTotalValues() + dOther.calcTotalValues())); } "
"protected AdsGetBudgetQuery accountId(int value){   return unsafeParam(\"account_id\",value); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_PET_SUMMONED(String value0){   return new SM_SYSTEM_MESSAGE(1400645,value0); } "
"public static boolean hasAndroidGradleFacet(@NotNull JpsProject project){   for (  JpsModule module : project.getModules()) {     if (getExtension(module) != null) {       return true;     }   }   return false; } "
"public boolean isValidTld(String tld){   tld=unicodeToASCII(tld);   if (allowLocal && isValidLocalTld(tld)) {     return true;   }   return isValidInfrastructureTld(tld) || isValidGenericTld(tld) || isValidCountryCodeTld(tld); } "
"@Override public String toString(){   return MoreObjects.toStringHelper(this).add(\"id\",getId()).add(\"name\",getName()).add(\"url\",getUrl()).add(\"openSource\",getOpenSource()).toString(); } "
"protected NewsfeedSearchQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"private int singleUpdateView(GenericEntity entity,ModelViewEntity modelViewEntity,List<ModelField> fieldsToSave,SQLProcessor sqlP) throws GenericEntityException {   Delegator delegator=entity.getDelegator();   int retVal=0;   ModelEntity memberModelEntity=null;   for (  ModelViewEntity.ModelMemberEntity modelMemberEntity : modelViewEntity.getMemberModelMemberEntities().values()) {     String meName=modelMemberEntity.getEntityName();     String meAlias=modelMemberEntity.getEntityAlias();     if (Debug.verboseOn())     Debug.logVerbose(\"[singleUpdateView]: Processing MemberEntity \" + meName + \" with Alias \"+ meAlias,module);     try {       memberModelEntity=delegator.getModelReader().getModelEntity(meName);     }  catch (    GenericEntityException e) {       throw new GenericEntityException(\"Failed to get model entity for \" + meName,e);     }     Map<String,Object> findByMap=new HashMap<String,Object>();     Iterator<ModelViewEntity.ModelViewLink> linkIter=modelViewEntity.getViewLinksIterator();     while (linkIter != null && linkIter.hasNext()) {       ModelViewEntity.ModelViewLink modelViewLink=linkIter.next();       if (modelViewLink.getEntityAlias().equals(meAlias) || modelViewLink.getRelEntityAlias().equals(meAlias)) {         Iterator<ModelKeyMap> kmIter=modelViewLink.getKeyMapsIterator();         while (kmIter != null && kmIter.hasNext()) {           ModelKeyMap keyMap=kmIter.next();           String fieldName=\"\";           if (modelViewLink.getEntityAlias().equals(meAlias)) {             fieldName=keyMap.getFieldName();           }  else {             fieldName=keyMap.getRelFieldName();           }           if (Debug.verboseOn())           Debug.logVerbose(\"[singleUpdateView]: --- Found field to set: \" + meAlias + \".\"+ fieldName,module);           Object value=null;           if (modelViewEntity.isField(keyMap.getFieldName())) {             value=entity.get(keyMap.getFieldName());             if (Debug.verboseOn())             Debug.logVerbose(\"[singleUpdateView]: --- Found map value: \" + value.toString(),module);           }  else           if (modelViewEntity.isField(keyMap.getRelFieldName())) {             value=entity.get(keyMap.getRelFieldName());             if (Debug.verboseOn())             Debug.logVerbose(\"[singleUpdateView]: --- Found map value: \" + value.toString(),module);           }  else {             throw new GenericNotImplementedException(\"Update on view entities: no direct link found, unable to update\");           }           findByMap.put(fieldName,value);         }       }     }     List<GenericValue> meResult=null;     try {       meResult=EntityQuery.use(delegator).from(meName).where(findByMap).queryList();     }  catch (    GenericEntityException e) {       throw new GenericEntityException(\"Error while retrieving partial results for entity member: \" + meName,e);     }     if (Debug.verboseOn())     Debug.logVerbose(\"[singleUpdateView]: --- Found \" + meResult.size() + \" results for entity member \"+ meName,module);     GenericValue meGenericValue=null;     if (meResult.size() == 0) {       try {         meGenericValue=delegator.makeValue(meName,findByMap);       }  catch (      Exception e) {         throw new GenericEntityException(\"Could not create new value for member entity\" + meName + \" of view \"+ modelViewEntity.getEntityName(),e);       }     }  else     if (meResult.size() == 1) {       meGenericValue=meResult.iterator().next();     }  else {       throw new GenericEntityException(\"Found more than one result for member entity \" + meName + \" in view \"+ modelViewEntity.getEntityName()+ \" - this is no updatable view\");     }     List<ModelField> meFieldsToSave=new LinkedList<ModelField>();     for (    ModelField modelField : fieldsToSave) {       if (memberModelEntity.isField(modelField.getName())) {         ModelField meModelField=memberModelEntity.getField(modelField.getName());         if (meModelField != null) {           meGenericValue.set(meModelField.getName(),entity.get(modelField.getName()));           meFieldsToSave.add(meModelField);           if (Debug.verboseOn())           Debug.logVerbose(\"[singleUpdateView]: --- Added field to save: \" + meModelField.getName() + \" with value \"+ meGenericValue.get(meModelField.getName()),module);         }  else {           throw new GenericEntityException(\"Could not get field \" + modelField.getName() + \" from model entity \"+ memberModelEntity.getEntityName());         }       }     }     if (meResult.size() == 0) {       retVal+=singleInsert(meGenericValue,memberModelEntity,memberModelEntity.getFieldsUnmodifiable(),sqlP);     }  else {       if (meFieldsToSave.size() > 0) {         retVal+=singleUpdate(meGenericValue,memberModelEntity,meFieldsToSave,sqlP);       }  else {         if (Debug.verboseOn())         Debug.logVerbose(\"[singleUpdateView]: No update on member entity \" + memberModelEntity.getEntityName() + \" needed\",module);       }     }   }   return retVal; } "
"public void testSortByVirtualFieldStraight() throws Exception {   deleteAllDocs();   send(\"addDocument\",\"{fields: {id: 0, boost: 1.0}}\");   send(\"addDocument\",\"{fields: {id: 1, boost: 2.0}}\");   send(\"search\",\"{query: MatchAllDocsQuery, sort: {fields: [{field: logboost}]}, retrieveFields: [id]}\");   assertEquals(2,getInt(\"totalHits\"));   assertEquals(0,getInt(\"hits[0].fields.id\"));   assertEquals(1,getInt(\"hits[1].fields.id\"));   assertEquals(0.0f,getFloat(\"hits[0].fields.sortFields.logboost\"),.0001f);   assertEquals(.6931f,getFloat(\"hits[1].fields.sortFields.logboost\"),.0001f); } "
"protected void drawYAxis(Graphics2D gc,Dimension size){   if (inUpdateCoordinates)   return;   if (isTranspose()) {     drawYAxisTransposed(gc,size);     return;   }   final int numberOfClasses=(classNames == null ? 0 : classNames.length);   if (numberOfClasses > 0) {     SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);     gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));     final boolean doDraw=(size == null);     Rectangle bbox=null;     int x0=leftMargin;     int x1=getWidth() - rightMargin;     int y0=getHeight() - bottomMargin;     int y1=topMargin;     if (viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;     int longest=0;     for (    String className : classNames) {       longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);     }     int right=Math.max(leftMargin,longest + 5);     if (doDraw)     gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));     double yStep=(y0 - y1) / (double)numberOfClasses;     int c=numberOfClasses - 1;     for (    String className : classNames) {       Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();       int x=right - labelSize.width - 4;       int y=(int)Math.round(y0 - (c + 0.5) * yStep);       if (doDraw) {         if (getChartData().getChartSelection().isSelected(null,className)) {           gc.setColor(ProgramProperties.SELECTION_COLOR);           fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);         }         gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));         gc.drawString(className,x,y);       }  else {         Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);         if (bbox == null)         bbox=rect;  else         bbox.add(rect);       }       if (sgc != null) {         sgc.setCurrentItem(new String[]{null,className});         drawRect(gc,x,y,labelSize.width,labelSize.height,0);         sgc.clearCurrentItem();       }       c--;     }     if (size != null && bbox != null) {       size.setSize(bbox.width + 3,bbox.height);     }   } } "
"protected static ObjectReader initRaw(){   return init(CsvSchema.emptySchema().withoutQuoteChar()); } "
"public DocumentNGramGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){   MinSize=iMinSize;   MaxSize=iMaxSize;   CorrelationWindow=iCorrelationWindow;   InitGraphs(); } "
"public static void dropTable(SQLiteDatabase db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"CUSTOMER\\\"\";   db.execSQL(sql); } "
"public View bindView(View convertView,ViewGroup parent,RecipientEntry entry,int position,AdapterType type,String constraint){   String displayName=entry.getDisplayName();   String destination=entry.getDestination();   boolean showImage=true;   CharSequence destinationType=getDestinationType(entry);   final View itemView=reuseOrInflateView(convertView,parent,type);   final ViewHolder viewHolder=new ViewHolder(itemView); switch (type) { case BASE_RECIPIENT:     if (TextUtils.isEmpty(displayName) || TextUtils.equals(displayName,destination)) {       displayName=destination;       if (entry.isFirstLevel()) {         destination=null;       }     }   if (!entry.isFirstLevel()) {     displayName=null;     showImage=false;   } break; case RECIPIENT_ALTERNATES: if (position != 0) { displayName=null; showImage=false; } break; case SINGLE_RECIPIENT: destination=Rfc822Tokenizer.tokenize(entry.getDestination())[0].getAddress(); destinationType=null; } if (displayName == null && !showImage) { viewHolder.destinationView.setPadding(mContext.getResources().getDimensionPixelSize(R.dimen.padding_no_picture),0,0,0); }  else { viewHolder.destinationView.setPadding(0,0,0,0); } bindTextToView(displayName,viewHolder.displayNameView); bindTextToView(destination,viewHolder.destinationView); bindTextToView(\"(\" + destinationType + \")\",viewHolder.destinationTypeView); bindIconToView(showImage,entry,viewHolder.imageView,type); return itemView; } "
"public static AccessToken createAccessToken(){   return new AccessToken(); } "
"public Builder alt(String alt){   this.alt=alt;   return this; } "
"@Override public long limit(){   return fileLength; } "
"public static double cos(double x){   int quadrant=0;   double xa=x;   if (x < 0) {     xa=-xa;   }   if (xa != xa || xa == Double.POSITIVE_INFINITY) {     return Double.NaN;   }   double xb=0;   if (xa > 3294198.0) {     double reduceResults[]=new double[3];     reducePayneHanek(xa,reduceResults);     quadrant=((int)reduceResults[0]) & 3;     xa=reduceResults[1];     xb=reduceResults[2];   }  else   if (xa > 1.5707963267948966) {     final CodyWaite cw=new CodyWaite(xa);     quadrant=cw.getK() & 3;     xa=cw.getRemA();     xb=cw.getRemB();   } switch (quadrant) { case 0:     return cosQ(xa,xb); case 1:   return -sinQ(xa,xb); case 2: return -cosQ(xa,xb); case 3: return sinQ(xa,xb); default : return Double.NaN; } } "
"private double smartAdd(double a,double b){   final double _a=FastMath.abs(a);   final double _b=FastMath.abs(b);   if (_a > _b) {     final double eps=_a * Precision.EPSILON;     if (_b > eps) {       return a + b;     }     return a;   }  else {     final double eps=_b * Precision.EPSILON;     if (_a > eps) {       return a + b;     }     return b;   } } "
"public GenericGF(int primitive,int size,int b){   this.primitive=primitive;   this.size=size;   this.generatorBase=b;   expTable=new int[size];   logTable=new int[size];   int x=1;   for (int i=0; i < size; i++) {     expTable[i]=x;     x*=2;     if (x >= size) {       x^=primitive;       x&=size - 1;     }   }   for (int i=0; i < size - 1; i++) {     logTable[expTable[i]]=i;   }   zero=new GenericGFPoly(this,new int[]{0});   one=new GenericGFPoly(this,new int[]{1}); } "
"public void draw(GL10 gl){   GLES10.glClear(GLES10.GL_COLOR_BUFFER_BIT | GLES10.GL_DEPTH_BUFFER_BIT); } "
"public boolean deleteChildren(@NotNull NlComponent parent,@NotNull List<NlComponent> deleted){   return false; } "
"@Override public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {   if (errorChecking && !isXMLName(target,xml11Version)) {     String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"INVALID_CHARACTER_ERR\",null);     throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);   }   return new ProcessingInstructionImpl(this,target,data); } "
"protected MarketRemoveFromAlbumQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   doGet(request,response); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_ME_TO_SELF(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200336,num0,skillname); } "
"protected void updateEnablements(){   int type=getSaveType();   browseButton.setEnabled(type == FILESYSTEM);   filenameCombo.setEnabled(type == FILESYSTEM);   wsPathText.setEnabled(type == WORKSPACE);   wsBrowseButton.setEnabled(type == WORKSPACE);   if (type == WORKSPACE)   wsBrowsed=false; } "
"private synchronized void connect(){   while (!connected && !shutdownRequested) {     try {       connection=jmsConnectionFactory.createConnection();       refreshSubscriptions();       connection.setExceptionListener(this);       connection.start();       connected=true;     }  catch (    Exception e) {       LOGGER.error(\"Exception caught while trying to refresh the JMS connection; sleeping 5s before retrying.\",e);       try {         Thread.sleep(SLEEP_BETWEEN_CONNECTION_ATTEMPTS);       }  catch (      InterruptedException interEx) {         LOGGER.error(\"InterruptedException caught while waiting to reconnect.\",interEx);       }     }   }   if (connected) {     notifyConnectionListenerOnConnection();   } } "
"private static void handleEOD(EncoderContext context,CharSequence buffer){   try {     int count=buffer.length();     if (count == 0) {       return;     }     if (count == 1) {       context.updateSymbolInfo();       int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();       int remaining=context.getRemainingCharacters();       if (remaining == 0 && available <= 2) {         return;       }     }     if (count > 4) {       throw new IllegalStateException(\"Count must not exceed 4\");     }     int restChars=count - 1;     String encoded=encodeToCodewords(buffer,0);     boolean endOfSymbolReached=!context.hasMoreCharacters();     boolean restInAscii=endOfSymbolReached && restChars <= 2;     if (restChars <= 2) {       context.updateSymbolInfo(context.getCodewordCount() + restChars);       int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();       if (available >= 3) {         restInAscii=false;         context.updateSymbolInfo(context.getCodewordCount() + encoded.length());       }     }     if (restInAscii) {       context.resetSymbolInfo();       context.pos-=restChars;     }  else {       context.writeCodewords(encoded);     }   }   finally {     context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);   } } "
"public void onDirectoryChange(final File directory){ } "
"public AsyncHttpClient(int httpPort){   this(false,httpPort,443); } "
"public static SM_SYSTEM_MESSAGE STR_DECOMPOUND_ERROR_NOT_AVAILABLE(int i){   return new SM_SYSTEM_MESSAGE(1400373,new DescriptionId(i)); } "
"protected NotesGetCommentsQuery noteId(int value){   return unsafeParam(\"note_id\",value); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_A_TO_SELF(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200785,skillcaster,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_CANT_CHANGE_SKIN_OPPOSITE_REQUIREMENT(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1400290,value0,value1); } "
"@Override public int compareTo(PlayerHouseBid o){   return (int)(time.getTime() - o.getTime().getTime()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_TO_B(String skilltarget,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201158,skilltarget,num0,skillname); } "
"public IndexInfo(String idxName,String tblName,String fldName,int idxType){   if (idxType != IDX_HASH && idxType != IDX_BTREE)   throw new IllegalArgumentException();   this.tblName=tblName;   this.idxName=idxName;   this.fldName=fldName;   this.idxType=idxType; } "
"public String leaveDTD() throws IOException {   if (_writer == _dtdWriter) {     flushLine(false);     _writer=_docWriter;     return _dtdWriter.toString();   }   return null; } "
"@Override protected void fillUtterance(Utterance utterance,Element sentence){   fillUtterance(utterance,sentence,true,false,false); } "
"private int sampleLine(ResultPoint p1,ResultPoint p2,int size){   int result=0;   float d=distance(p1,p2);   float moduleSize=d / size;   float px=p1.getX();   float py=p1.getY();   float dx=moduleSize * (p2.getX() - p1.getX()) / d;   float dy=moduleSize * (p2.getY() - p1.getY()) / d;   for (int i=0; i < size; i++) {     if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {       result|=1 << (size - i - 1);     }   }   return result; } "
"public static void reloadTime(int time){   ThreadPoolManager.getInstance().purge();   instance=new GameTime(time);   clockStarted=false;   startClock();   log.info(\"Game time changed by admin and clock restarted...\"); } "
"public String upload_file1(String master_file_id,String prefix_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {   String[] parts=new String[2];   this.errno=this.split_file_id(master_file_id,parts);   if (this.errno != 0) {     return null;   }   parts=this.upload_file(parts[0],parts[1],prefix_name,file_size,callback,file_ext_name,meta_list);   if (parts != null) {     return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];   }  else {     return null;   } } "
"@Override public boolean onPassphraseEntered(String passphrase){   if (!passphrase.isEmpty() && ProfileSyncService.get().setDecryptionPassphrase(passphrase)) {     finish();     return true;   }   return false; } "
"public S2CellId prev(){   return new S2CellId(id - (lowestOnBit() << 1)); } "
"public static double intPow(double b,int e){   if (e == 0) {     return 1;   }   float result=1;   double currPow=b;   do {     if ((e & 1) == 1)     result*=currPow;     currPow=currPow * currPow;     e>>=1;   }  while (e > 0);   return result; } "
"public DotGraph(String graphname){   this.graphname=graphname;   this.isSubGraph=false;   this.nodes=new HashMap<String,DotGraphNode>(100);   this.drawElements=new LinkedList<Renderable>();   this.attributes=new LinkedList<DotGraphAttribute>(); } "
"public AccessToken(){ } "
"private Entry findEntry(Lease lease) throws UnknownLeaseException {   Entry e=findEntryDo(lease);   if (e != null && (e.renew < e.endTime || SystemTime.timeMillis() < e.endTime)) {     return e;   }   throw new UnknownLeaseException(); } "
"private void addChatMatchSpecToRewardStructure(ChatMatchSpec c){   Float reward=c.getReward().floatValue();   Pattern pattern=Pattern.compile(c.getRegex(),Pattern.CASE_INSENSITIVE);   patternMap.put(pattern,reward); } "
"public int readLargeUleb128(){   return readUleb128(true); } "
"void insertedText(CharacterDataImpl node,int offset,int count){ } "
"public void startDocumentParsing(XMLEntityHandler scanner,short version){   if (version == Constants.XML_VERSION_1_0) {     fEntityManager.setScannerVersion(Constants.XML_VERSION_1_0);   }  else {     fEntityManager.setScannerVersion(Constants.XML_VERSION_1_1);   }   fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());   fEntityManager.setEntityHandler(scanner);   scanner.startEntity(fXMLSymbol,fEntityManager.getCurrentResourceIdentifier(),fEncoding,null); } "
"private void initFxLater(JFXPanel jfxPanel){   if (!initialized) { synchronized (lock) {       if (!initialized) {         try {           final BorderPane rootNode=new BorderPane();           jfxPanel.setScene(new Scene(rootNode,600,600));           final Node main=createMainNode();           rootNode.setCenter(main);           BorderPane.setMargin(main,new Insets(3,3,3,3));           String css=NotificationsInSwing.getControlStylesheetURL();           if (css != null)           jfxPanel.getScene().getStylesheets().add(css);           css=getControlStylesheetURL();           if (css != null) {             jfxPanel.getScene().getStylesheets().add(css);             spreadsheetView.getStylesheets().add(css);           }           columnContextMenu=new PopupMenuFX(GUIConfiguration.getAttributeColumnHeaderPopupConfiguration(),samplesViewer.getCommandManager());           rowContextMenu=new PopupMenuFX(GUIConfiguration.getSampleRowHeaderPopupConfiguration(),samplesViewer.getCommandManager());           originalRowContextMenuLength=rowContextMenu.getItems().size();         }   finally {           initialized=true;         }       }     }   } } "
"private static void checkAllFiniteReal(final double[] values){   for (int i=0; i < values.length; i++) {     MathUtils.checkFinite(values[i]);   } } "
"public boolean hasSuperClassAccess(){   return getSuperClassAccessOpt().getNumChild() != 0; } "
"public void addActionListener(ActionListener actionListener){   this.listenerList.add(ActionListener.class,actionListener); } "
"public static FileDescriptorSet generate(Service normalizedService){   DescriptorGenerator generator=new DescriptorGenerator();   generator.analyzeService(normalizedService);   return generator.generate(); } "
"public static <T>T checkNotNull(T object,String message){   if (object == null) {     throw new NullPointerException(message);   }   return object; } "
"private static Stream<Method> extractMethods(Class clazz){   try {     Method[] methods=clazz.getMethods();     if (methods.length > 0) {       return Stream.of(methods);     }   }  catch (  Exception|Error e) {     LOG.warn(\"Problems loading class at startup: {}\",clazz,e);   }   return Stream.empty(); } "
"@Override public void onAddDataTag(final ISourceDataTag sourceDataTag,final ChangeReport changeReport){   changeReport.appendError(\"The equipment has no implementation to\" + \" add data tags. You have to restart the DAQ.\");   changeReport.setState(CHANGE_STATE.REBOOT); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_ME_TO_SELF(String value0d,String skillname){   return new SM_SYSTEM_MESSAGE(1200341,value0d,skillname); } "
"public static boolean writeFile(String filePath,InputStream stream){   return writeFile(filePath,stream,false); } "
"public static void showError(String message){   showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000); } "
"public boolean equals(Object other){   if (!(other instanceof TObjectIntHashMap)) {     return false;   }   TObjectIntHashMap that=(TObjectIntHashMap)other;   if (that.size() != this.size()) {     return false;   }   return forEachEntry(new EqProcedure(that)); } "
"public static void writeVLong(DataOutput stream,long i) throws IOException {   WritableUtils.writeVLong(stream,i); } "
"public static void put(Context context,String fileName,String key,Object ser){   put(context,fileName,key,ser,null); } "
"@Override public boolean accept(File directory,String fileName){   if (!super.accept(directory,fileName))   return false;   String firstLine=Basic.getFirstLineFromFile(new File(fileName));   return firstLine != null && firstLine.startsWith(\"Reading from fasta file\"); } "
"private ImmutableList<BlazeSourceDirectory> calculateSourceDirectoriesForContentRoot(BlazeContext context,WorkspaceRoot workspaceRoot,ArtifactLocationDecoder artifactLocationDecoder,SourceTestConfig sourceTestConfig,WorkspacePath directoryRoot,Collection<SourceArtifact> sourceArtifacts,Collection<JavaPackageReader> javaPackageReaders){   List<SourceArtifact> javaArtifacts=Lists.newArrayList();   for (  SourceArtifact sourceArtifact : sourceArtifacts) {     if (isJavaFile(sourceArtifact.artifactLocation)) {       javaArtifacts.add(sourceArtifact);     }   }   List<BlazeSourceDirectory> result=Lists.newArrayList();   calculateJavaSourceDirectories(context,workspaceRoot,artifactLocationDecoder,directoryRoot,sourceTestConfig,javaArtifacts,javaPackageReaders,result);   Collections.sort(result,BlazeSourceDirectory.COMPARATOR);   return ImmutableList.copyOf(result); } "
"private static void redirectBranch(Unit node,Unit oldTarget,Unit newTarget){   for (  UnitBox targetBox : node.getUnitBoxes()) {     Unit target=targetBox.getUnit();     if (target == oldTarget)     targetBox.setUnit(newTarget);   } } "
"public Bitmap put(String key,Bitmap value){   return cache.put(key,value); } "
"public static String readFileToString(File file,Charset encoding) throws IOException {   InputStream in=null;   try {     in=openInputStream(file);     return IOUtils.toString(in,Charsets.toCharset(encoding));   }   finally {     IOUtils.closeQuietly(in);   } } "
"@Override public Double fractionOfData(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2,final double effect_size){   SymmetricInputValidation(number_impressions_1,number_actions_1,number_impressions_2,number_actions_2);   if (effect_size < -1.0 || effect_size > 1.0) {     throw new IllegalArgumentException(\"Effect size must be in the interval [-1, 1].\");   }   double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);   double pooled_rate=1.0 * (number_actions_1 + number_actions_2) / (number_impressions_1 + number_impressions_2);   return 1 / (pooled_rate * (1 - pooled_rate) * (1.0 / number_impressions_1 + 1.0 / number_impressions_2)* zval* zval / effect_size / effect_size); } "
"public void cancel(){   debugPrint(\"cancelling...\");   if (audioMetrics) {     timer.start(\"audioCancel\");   }   if (cancelDelay > 0) {     try {       Thread.sleep(cancelDelay);     }  catch (    InterruptedException ie) {       ie.printStackTrace();     }   } synchronized (lineLock) {     if (line != null && line.isRunning()) {       line.stop();       line.flush();     }   } synchronized (this) {     cancelled=true;     notify();   }   if (audioMetrics) {     timer.stop(\"audioCancel\");     timer.getTimer(\"audioCancel\").showTimesShortTitle(\"\");     timer.getTimer(\"audioCancel\").showTimesShort(0);   }   debugPrint(\"...cancelled\"); } "
"NewExpr newNewExpr(RefType type){   return Jimple.v().newNewExpr(type); } "
"public Builder integerToCategorical(String columnName,Map<Integer,String> categoryIndexNameMap){   return transform(new IntegerToCategoricalTransform(columnName,categoryIndexNameMap)); } "
"public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {   if (lines == null) {     return;   }   if (lineEnding == null) {     lineEnding=LINE_SEPARATOR;   }   Charset cs=Charsets.toCharset(encoding);   for (  Object line : lines) {     if (line != null) {       output.write(StringCodingUtils.getBytes(line.toString(),cs));     }     output.write(StringCodingUtils.getBytes(lineEnding,cs));   } } "
"private synchronized void rebuildJournal() throws IOException {   if (journalWriter != null) {     journalWriter.close();   }   Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);   writer.write(MAGIC);   writer.write(\"\\n\");   writer.write(VERSION_1);   writer.write(\"\\n\");   writer.write(Integer.toString(appVersion));   writer.write(\"\\n\");   writer.write(Integer.toString(valueCount));   writer.write(\"\\n\");   writer.write(\"\\n\");   for (  Entry entry : lruEntries.values()) {     if (entry.currentEditor != null) {       writer.write(DIRTY + ' ' + entry.key+ '\\n');     }  else {       writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\\n');     }   }   writer.close();   journalFileTmp.renameTo(journalFile);   journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE); } "
"public static void export(String type,OutputStream out,JasperPrint jasperPrint) throws JRException {   if (TYPE_XLS.equals(type)) {     SimpleXlsReportConfiguration config=new SimpleXlsReportConfiguration();     config.setDetectCellType(true);     config.setRemoveEmptySpaceBetweenRows(true);     config.setRemoveEmptySpaceBetweenRows(true);     config.setCollapseRowSpan(true);     config.setWhitePageBackground(false);     JRXlsExporter exporter=new JRXlsExporter();     exporter.setExporterInput(new SimpleExporterInput(jasperPrint));     exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(out));     exporter.setConfiguration(config);     exporter.exportReport();   }  else   if (TYPE_PDF.equals(type)) {     JRPdfExporter exporter=new JRPdfExporter();     exporter.setExporterInput(new SimpleExporterInput(jasperPrint));     exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(out));     exporter.exportReport();   } } "
"public static boolean isSequence(final double start,final double mid,final double end){   return (start < mid) && (mid < end); } "
"public static ViewTapTarget forView(View view,CharSequence title){   return forView(view,title,null); } "
"public BlockBTreeLeafNode(BTreeBuilderInfo builderInfos,int metadataIndex,long nodeNumber){   DataFileFooter footer=builderInfos.getFooterList().get(metadataIndex);   BlockletMinMaxIndex minMaxIndex=footer.getBlockletIndex().getMinMaxIndex();   maxKeyOfColumns=minMaxIndex.getMaxValues();   minKeyOfColumns=minMaxIndex.getMinValues();   numberOfKeys=1;   this.nodeNumber=nodeNumber;   this.blockInfo=footer.getBlockInfo(); } "
"public void quit(){   mQuit=true;   interrupt(); } "
"public static ContextConfigAspect create(Model model){   return new ContextConfigAspect(model); } "
"private boolean isNotUnresponsive(Proxy proxy){   Long lastFailTime=this.failedDelayCache.get(proxy.address());   return retryDelayHasPassedBy(lastFailTime); } "
"public Config(String file){   this(new File(CONFIG_DIR,file.contains(\".\") ? file : file.concat(\".conf\"))); } "
"public synchronized AggregateTable addAggregates(String group){   return addAggregates(group,VisualItem.SCHEMA); } "
"public Boolean createCustomerReview(EntityManager em,String customerReviewId){   Boolean status=true;   Date date=null;   CustomerReview customerReview=new CustomerReview();   Calendar cal=Calendar.getInstance();   DateFormat formatter=new SimpleDateFormat(\"yyyymmdd\");   try {     date=formatter.parse(\"19770707\");     cal.setTime(date);     em.getTransaction().begin();     customerReview.setCustomerReviewId(customerReviewId);     customerReview.setComment(\"This product is really great. I like especially the design, speed and performance\");     customerReview.setRating(5);     customerReview.setFirstName(\"John\");     customerReview.setLastName(\"Smith\");     customerReview.setProductId(\"HT-2001\");     customerReview.setCreationDate(cal);     em.persist(customerReview);     em.getTransaction().commit();   }  catch (  Exception e) {     status=false;     logger.error(\"Error occured during creation of customer review. Detailed info: \" + e);   }   return status; } "
"public static void isNotNull(Object object){   isNotNull(object,\"\"); } "
"public boolean hasResourceParameter(ResourceContextParameters resourceParameter,ContextInfo contextInfo){   return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.RESOURCE,resourceParameter.getName()),contextInfo); } "
"@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {   return decode(image,null); } "
"public void testSetValueMinSdk(){   VirtualFile file=myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_3.xml\",\"res/values/styles.xml\");   myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_3.xml\",\"res/values-v17/styles.xml\");   myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_4.xml\",\"res/values-v19/styles.xml\");   myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_3.xml\",\"res/values-v22/styles.xml\");   ItemResourceValue item=new ItemResourceValue(\"colorBackgroundCacheHint\",true,\"#000000\",false,null);   checkSetValue(file,item,\"\",\"-v17\",\"-v19\",\"-v22\"); } "
"public WallSearchQueryWithExtended searchExtended(UserActor actor){   return new WallSearchQueryWithExtended(getClient(),actor); } "
"@Override public Filter createFilter(){   return new IntersectsExtended(); } "
"public void validate(){   if (isEmpty()) {     setError(mAlertMessage);   }  else {     if (getError() != null)     setError(null);   } } "
"public static String encodeURN(String publicId){   String urn=PublicId.normalize(publicId);   urn=PublicId.stringReplace(urn,\"%\",\"%25\");   urn=PublicId.stringReplace(urn,\";\",\"%3B\");   urn=PublicId.stringReplace(urn,\"'\",\"%27\");   urn=PublicId.stringReplace(urn,\"?\",\"%3F\");   urn=PublicId.stringReplace(urn,\"#\",\"%23\");   urn=PublicId.stringReplace(urn,\"+\",\"%2B\");   urn=PublicId.stringReplace(urn,\" \",\"+\");   urn=PublicId.stringReplace(urn,\"::\",\";\");   urn=PublicId.stringReplace(urn,\":\",\"%3A\");   urn=PublicId.stringReplace(urn,\"//\",\":\");   urn=PublicId.stringReplace(urn,\"/\",\"%2F\");   return \"urn:publicid:\" + urn; } "
"public <E extends Element>void registerLintRule(LintRule<E> rule){   lintRules.put(rule.getElementClass(),rule);   registerLintRuleName(rule.getName()); } "
"private void checkDimensionsEquality(final int d1,final int d2) throws MathIllegalArgumentException {   if (d1 != d2) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,d2,d1);   } } "
"public SLDDataFlavour(Class<?> representationClass,String humanPresentableName){   super(representationClass,humanPresentableName); } "
"public AppsDeleteAppRequestsQuery deleteAppRequests(UserActor actor){   return new AppsDeleteAppRequestsQuery(getClient(),actor); } "
"@Override public void write(byte[] value) throws IOException {   if (isFirstTime) {     init();     isFirstTime=false;   }   checkAndWriteDictionaryChunkToFile();   oneDictionaryChunkList.add(ByteBuffer.wrap(value));   totalRecordCount++; } "
"public boolean containsKey(Object key){   return doGet(key) != null; } "
"private static void convertActivityToTranslucentAfterL(Activity activity){   try {     Method getActivityOptions=Activity.class.getDeclaredMethod(\"getActivityOptions\");     getActivityOptions.setAccessible(true);     Object options=getActivityOptions.invoke(activity);     Class<?>[] classes=Activity.class.getDeclaredClasses();     Class<?> translucentConversionListenerClazz=null;     for (    Class clazz : classes) {       if (clazz.getSimpleName().contains(\"TranslucentConversionListener\")) {         translucentConversionListenerClazz=clazz;       }     }     Method convertToTranslucent=Activity.class.getDeclaredMethod(\"convertToTranslucent\",translucentConversionListenerClazz,ActivityOptions.class);     convertToTranslucent.setAccessible(true);     convertToTranslucent.invoke(activity,null,options);   }  catch (  Throwable t) {   } } "
"protected IViewFinder createViewFinderView(Context context){   return new ViewFinderView(context); } "
"private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){   if (x > left && x < right && y > top && y < bottom) {     return true;   }   return false; } "
"public void init$Children(){ } "
"protected synchronized void startAuthenticationFlow() throws AuthenticationException {   logger.debug(\"Getting authenticated session\");   logger.debug(\"Start by loading up the login form to get a valid unauthenticated session and CSRF token\");   ResponseEntity<String> loginResponseEntity=restTemplateForAuthenticationFlow.getForEntity(authRestTemplate.getURIForResource(formLoginConfig.getLoginFormPath()),String.class);   latestCsrfToken=getCsrfTokenFromLoginHtml(loginResponseEntity.getBody());   latestSessionIdForLatestCsrfToken=getAuthenticationSessionIdFromCookieStore();   logger.debug(\"Update CSRF token for interceptor ({}) from login form\",latestCsrfToken.getToken());   MultiValueMap<String,Object> loginPostParams=new LinkedMultiValueMap<>();   loginPostParams.add(\"username\",credentialProvider.getUsername());   loginPostParams.add(\"password\",credentialProvider.getPassword());   logger.debug(\"Post to login url to startAuthenticationFlow with user={}, pwd={}\",credentialProvider.getUsername(),credentialProvider.getPassword());   ResponseEntity<String> postLoginResponseEntity=restTemplateForAuthenticationFlow.postForEntity(authRestTemplate.getURIForResource(formLoginConfig.getLoginFormPath()),loginPostParams,String.class);   URI locationURI=URI.create(postLoginResponseEntity.getHeaders().get(\"Location\").get(0));   String expectedLocation=\"/\" + formLoginConfig.getLoginRedirectPath();   if (postLoginResponseEntity.getStatusCode().equals(HttpStatus.FOUND) && expectedLocation.equals(locationURI.getPath())) {     latestCsrfToken=getCsrfTokenFromEndpoint(authRestTemplate.getURIForResource(formLoginConfig.getCsrfTokenPath()));     latestSessionIdForLatestCsrfToken=getAuthenticationSessionIdFromCookieStore();     logger.debug(\"Update CSRF token interceptor in AuthRestTempplate ({})\",latestCsrfToken.getToken());   }  else {     throw new SessionAuthenticationException(\"Authentication failed.  Post login status code = \" + postLoginResponseEntity.getStatusCode() + \", location = [\"+ locationURI.getPath()+ \"], expected location = [\"+ formLoginConfig.getLoginRedirectPath()+ \"]\");   } } "
"public void plus(){   plus(ANIMATION_DURATION_MS); } "
"public static void writeVLong(DataOutput stream,long i) throws IOException {   if (i >= -112 && i <= 127) {     stream.writeByte((byte)i);     return;   }   int len=-112;   if (i < 0) {     i^=-1L;     len=-120;   }   long tmp=i;   while (tmp != 0) {     tmp=tmp >> 8;     len--;   }   stream.writeByte((byte)len);   len=(len < -120) ? -(len + 120) : -(len + 112);   for (int idx=len; idx != 0; idx--) {     int shiftbits=(idx - 1) * 8;     long mask=0xFFL << shiftbits;     stream.writeByte((byte)((i & mask) >> shiftbits));   } } "
"@SuppressFBWarnings(\"LI_LAZY_INIT_UPDATE_STATIC\") static void refreshLastKnownLocation(Context context,long maxAge){   ThreadUtils.assertOnUiThread();   if (sListener != null)   return;   LocationManager locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);   Location location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);   if (location == null || getLocationAge(location) > maxAge) {     String provider=LocationManager.NETWORK_PROVIDER;     if (locationManager.isProviderEnabled(provider)) {       sListener=new SelfCancelingListener(locationManager);       locationManager.requestSingleUpdate(provider,sListener,null);     }   } } "
"public void delete(int slot){   currentBuff.lockFlushing();   try {     for (int i=slot + 1; i < getNumRecords(); i++)     copyRecordWithoutLogging(i,i - 1);     setNumRecordsWithoutLogging(getNumRecords() - 1);   }   finally {     currentBuff.unlockFlushing();   } } "
"public RegexFileFilter(Pattern pattern){   if (pattern == null) {     throw new IllegalArgumentException(\"Pattern is missing\");   }   this.pattern=pattern; } "
"protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){   int l=(int)(4 / normalisedTransitionBandwidth);   if (l % 2 == 0)   l++;   return l; } "
"public static final void greatestLowerBounds(ArrayList types){   for (int i=0; i < types.size(); i++) {     TypeDecl U=(TypeDecl)types.get(i);     for (int j=i + 1; j < types.size(); j++) {       TypeDecl V=(TypeDecl)types.get(j);       if (U == null || V == null)       continue;       if (U.instanceOf(V))       types.set(j,null);  else       if (V.instanceOf(U))       types.set(i,null);     }   }   removeNullValues(types); } "
"public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,ColumnIdentifier columnIdentifier,DataType dataType){   this(carbonTableIdentifier,columnIdentifier);   this.dataType=dataType; } "
"public boolean remove(JobStatus jobStatus){   boolean removed=mJobSet.remove(jobStatus);   if (!removed) {     if (DEBUG) {     }     return false;   }   if (jobStatus.isPersisted()) {     maybeWriteStatusToDiskAsync();   }   return removed; } "
"protected BaseSecantSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy,final Method method){   super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);   this.allowed=AllowedSolution.ANY_SIDE;   this.method=method; } "
"public void indexDocsByDelta(Path path,String repoName,String repoLocations,String repoRemoteLocation,RepositoryChanged repositoryChanged){   SearchcodeLib scl=Singleton.getSearchCodeLib();   Queue<CodeIndexDocument> codeIndexDocumentQueue=Singleton.getCodeIndexQueue();   String fileRepoLocations=FilenameUtils.separatorsToUnix(repoLocations);   List<String[]> reportList=new ArrayList<>();   for (  String changedFile : repositoryChanged.getChangedFiles()) {     if (this.shouldJobPauseOrTerminate() == true) {       return;     }     String[] split=changedFile.split(\"/\");     String fileName=split[split.length - 1];     changedFile=fileRepoLocations + \"/\" + repoName+ \"/\"+ changedFile;     String md5Hash=Values.EMPTYSTRING;     List<String> codeLines=null;     try {       codeLines=Helpers.readFileLinesGuessEncoding(changedFile,this.MAXFILELINEDEPTH);     }  catch (    IOException ex) {       Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \"+ this.getClass()+ \"\\n with message: \"+ ex.getMessage());       reportList.add(new String[]{changedFile,\"excluded\",\"unable to guess guess file encoding\"});       break;     }     if (scl.isMinified(codeLines)) {       Singleton.getLogger().info(\"Appears to be minified will not index  \" + changedFile);       reportList.add(new String[]{changedFile,\"excluded\",\"appears to be minified\"});       break;     }     if (codeLines.isEmpty()) {       Singleton.getLogger().info(\"Unable to guess encoding type or file is empty \" + changedFile);       reportList.add(new String[]{changedFile,\"excluded\",\"empty file\"});       break;     }     if (this.determineBinary(changedFile,fileName,codeLines,reportList)) {       break;     }     md5Hash=this.getFileMd5(changedFile);     String languageName=scl.languageGuesser(changedFile,codeLines);     String fileLocation=changedFile.replace(fileRepoLocations,Values.EMPTYSTRING).replace(fileName,Values.EMPTYSTRING);     String fileLocationFilename=changedFile.replace(fileRepoLocations,Values.EMPTYSTRING);     String repoLocationRepoNameLocationFilename=changedFile;     String newString=this.getBlameFilePath(fileLocationFilename);     String codeOwner=getCodeOwner(codeLines,newString,repoName,fileRepoLocations,scl);     reportList.add(new String[]{changedFile,\"included\",\"\"});     if (codeLines != null) {       if (this.LOWMEMORY) {         try {           CodeIndexer.indexDocument(new CodeIndexDocument(repoLocationRepoNameLocationFilename,repoName,fileName,fileLocation,fileLocationFilename,md5Hash,languageName,codeLines.size(),StringUtils.join(codeLines,\" \"),repoRemoteLocation,codeOwner));         }  catch (        IOException ex) {           Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \"+ this.getClass()+ \"\\n with message: \"+ ex.getMessage());         }       }  else {         Singleton.incrementCodeIndexLinesCount(codeLines.size());         codeIndexDocumentQueue.add(new CodeIndexDocument(repoLocationRepoNameLocationFilename,repoName,fileName,fileLocation,fileLocationFilename,md5Hash,languageName,codeLines.size(),StringUtils.join(codeLines,\" \"),repoRemoteLocation,codeOwner));       }     }   }   if (this.LOGINDEXED && reportList.isEmpty() == false) {     this.logIndexed(repoName + \"_delta\",reportList);   }   for (  String deletedFile : repositoryChanged.getDeletedFiles()) {     Singleton.getLogger().info(\"Missing from disk, removing from index \" + deletedFile);     try {       CodeIndexer.deleteByFileLocationFilename(deletedFile);     }  catch (    IOException ex) {       Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \"+ this.getClass()+ \" indexDocsByDelta deleteByFileLocationFilename for \"+ repoName+ \" \"+ deletedFile+ \"\\n with message: \"+ ex.getMessage());     }   } } "
"public static List<String> parseRegexGroup(final String string,final String regex){   List<String> groupList=null;   if (string != null && regex != null) {     Pattern pattern=Pattern.compile(regex);     Matcher matcher=pattern.matcher(string);     int groupCount=matcher.groupCount();     int count=1;     groupList=new ArrayList<String>();     if (matcher.find()) {       while (count <= groupCount) {         groupList.add(matcher.group(count));         count++;       }     }   }   return groupList; } "
"public static void startComm(AirMapFlight flight,@Nullable AirMapCallback<AirMapComm> callback){   FlightService.getCommKey(flight,callback); } "
"@SuppressLint(\"NewApi\") public final void makeFullScreenAfterKitKat(boolean enable){   try {     View decorView=getWindow().getDecorView();     if (enable) {       int uiOptionsEnable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;       decorView.setSystemUiVisibility(uiOptionsEnable);     }  else {       int uiOptionsDisable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;       decorView.setSystemUiVisibility(uiOptionsDisable);     }   }  catch (  Exception e) {     WindowManager.LayoutParams lp=getWindow().getAttributes();     if (enable) {       lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;     }  else {       lp.flags&=(~WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);     }     getWindow().setAttributes(lp);   } } "
"private Vector appendVector(Vector vec,Vector appvec){   if (appvec != null) {     for (int count=0; count < appvec.size(); count++) {       vec.addElement(appvec.elementAt(count));     }   }   return vec; } "
"public static SparseGradient atan2(final SparseGradient y,final SparseGradient x){   return y.atan2(x); } "
"public boolean isApplicable(){   return getDoc().getNumberOfReads() > 0; } "
"public static void logTapsSinceOpenForUndecided(int tapsSinceOpen){   RecordHistogram.recordCountHistogram(\"Search.ContextualSearchTapsSinceOpenUndecided\",tapsSinceOpen); } "
"public static final void show(Window owner,SandboxBody body){   EditBodyDialog dialog=new EditBodyDialog(owner,body);   dialog.setLocationRelativeTo(owner);   dialog.setIconImage(Icons.EDIT_BODY.getImage());   dialog.setVisible(true);   if (!dialog.canceled) {     SandboxBody bodyChanges=dialog.body;     body.setOutlineColor(bodyChanges.getOutlineColor());     body.setFillColor(bodyChanges.getFillColor());     body.setActive(bodyChanges.isActive());     body.setAngularDamping(bodyChanges.getAngularDamping());     body.setAngularVelocity(bodyChanges.getAngularVelocity());     body.setAsleep(bodyChanges.isAsleep());     body.setAutoSleep(bodyChanges.isAutoSleepingEnabled());     body.setBullet(bodyChanges.isBullet());     body.setGravityScale(bodyChanges.getGravityScale());     body.setLinearDamping(bodyChanges.getLinearDamping());     body.setMass(new Mass(bodyChanges.getMass()));     body.setName(bodyChanges.getName());     body.setLinearVelocity(bodyChanges.getLinearVelocity().copy());     body.setMassExplicit(bodyChanges.isMassExplicit());     Transform transform=body.getTransform();     transform.setRotation(dialog.pnlTransform.getRotation());     transform.setTranslation(dialog.pnlTransform.getTranslation());   } } "
"protected void init(Table table,Graph graph,int row){   m_table=table;   m_row=m_table.isValidRow(row) ? row : -1; } "
"public Vector process(AudioPreProcessor in) throws IllegalArgumentException, IOException {   if (in == null)   throw new IllegalArgumentException(\"the audio preprocessor must not be a null value\");   if (in.getSampleRate() != sampleRate)   throw new IllegalArgumentException(\"sample rates of inputstream differs from sample rate of the sone processor\");   Vector mfcc=new Vector();   int samplesRead=in.append(inputData,hopSize,hopSize);   while (samplesRead == hopSize) {     for (int i=hopSize, j=0; i < windowSize; j++, i++)     inputData[j]=inputData[i];     samplesRead=in.append(inputData,hopSize,hopSize);     mfcc.add(processWindow(inputData,0));   }   return mfcc; } "
"public void output(Node input) throws TransformerException {   output(new DOMSource(input)); } "
"@Override public void onError(Throwable responseException){   if (responseException instanceof ResponseException) {     ResponseException resException=(ResponseException)responseException;     publishResponse(httpResponseMaker.buildErrorResponse(resException.getStatusCode(),resException.getReason(),resException.getDescription(),resException.getDruidQuery()));   }  else {     LOG.error(\"Failed to publish error Response\",responseException);     throw new RuntimeException(\"Failed to publish error Response\",responseException);   } } "
"public void remoteResourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){   for (  ISVNListener listener : repositoryListeners) {     listener.remoteResourceCopied(source,destination);   } } "
"@Override public final short readShort() throws IOException {   dis.readFully(work,0,2);   return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff)); } "
"public RecurrenceInfo(GenericValue info) throws RecurrenceInfoException {   this.info=info;   if (!info.getEntityName().equals(\"RecurrenceInfo\"))   throw new RecurrenceInfoException(\"Invalid RecurrenceInfo Value object.\");   init(); } "
"public void addMember(InternalMapObject member){   this.members.add(member); } "
"public static int[] shuffle(int[] intArray,int shuffleCount){   int length;   if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {     return null;   }   int[] out=new int[shuffleCount];   for (int i=1; i <= shuffleCount; i++) {     int random=getRandom(length - i);     out[i - 1]=intArray[random];     int temp=intArray[length - i];     intArray[length - i]=intArray[random];     intArray[random]=temp;   }   return out; } "
"public static BufferedImage toBufferedImage(Image image){   return ImageTransform.toBufferedImage(image,BufferedImage.TYPE_INT_ARGB_PRE); } "
"public void visitPhpMethod(Method method){   this.inspectCallable(method); } "
"@Override public void write(double value){   double[] buffer=new double[1];   buffer[0]=value;   write(buffer,0,1); } "
"private static double computeCorrelationDistanceBetweenClasses(String classA,String classB,Table<String,String,Double> seriesAndClass2Value){   final Set<String> series=seriesAndClass2Value.rowKeySet();   final ArrayList<Double> xValues=new ArrayList<>(series.size());   final ArrayList<Double> yValues=new ArrayList<>(series.size());   for (  String seriesName : series) {     xValues.add(seriesAndClass2Value.get(seriesName,classA));     yValues.add(seriesAndClass2Value.get(seriesName,classB));   }   return 1 - Correlation.computePersonsCorrelationCoefficent(series.size(),xValues,yValues); } "
"public static boolean checkHasGetSetMethod(VariableElement var){   List<? extends Element> elements=var.getEnclosingElement().getEnclosedElements();   ExecutableElement getMethod=null;   ExecutableElement setMethod=null;   String getMethodName=Utils.combineGetMethodName(var.getSimpleName().toString());   String setMethodName=Utils.combineSetMethodName(var.getSimpleName().toString());   for (  Element ele : elements) {     if (ele.getKind() != ElementKind.METHOD)     continue;     if (ele.getModifiers().contains(Modifier.PRIVATE))     continue;     String methodName=ele.getSimpleName().toString();     if (getMethodName.equals(methodName)) {       getMethod=(ExecutableElement)ele;     }  else     if (setMethodName.equals(methodName)) {       setMethod=(ExecutableElement)ele;     }   }   if (getMethod == null || setMethod == null) {     throw new ParcelException(String.format(\"The field %s should has get/set method while it is modified by private\",var.getSimpleName()),var);   }   String fieldType=var.asType().toString();   if (getMethod.getParameters().size() != 0 || !getMethod.getReturnType().toString().equals(fieldType)) {     throw new ParcelException(String.format(\"The get-method %s can not matched with field %s\",getMethod.getSimpleName(),var.getSimpleName()),getMethod);   }   if (!(setMethod.getParameters().size() == 1 && setMethod.getParameters().get(0).asType().toString().equals(fieldType))) {     throw new ParcelException(String.format(\"The set-method %s can not matched with field %s\",setMethod.getSimpleName(),var.getSimpleName()),setMethod);   }   return true; } "
"public boolean isCritical(){   return true; } "
"public PhotosCreateCommentQuery createComment(UserActor actor,int photoId){   return new PhotosCreateCommentQuery(getClient(),actor,photoId); } "
"public static boolean supports(String db,int majorVersion,int minorVersion){   return MYSQL_DB_NAME.equals(db) && majorVersion == 5; } "
"public JsonObject add(String name,int value){   add(name,Json.value(value));   return this; } "
"@Override public void printStackTrace(PrintStream ps){   super.printStackTrace(ps); } "
"@Override protected boolean processTU(ITextUnit textUnit){   Property note=textUnit.getProperty(Property.NOTE);   if (note != null) {     String comments=note.toString();     char quote=\"\\\"\".charAt(0);     comments=StringUtils.trimLeadingCharacter(comments,quote);     comments=StringUtils.trimTrailingCharacter(comments,quote);     note.setValue(comments);   }   return super.processTU(textUnit); } "
"private void rInflate(XmlPullParser parser,Preference parent,final AttributeSet attrs) throws XmlPullParserException, IOException {   final int depth=parser.getDepth();   int type;   while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {     if (type != XmlPullParser.START_TAG) {       continue;     }     final String name=parser.getName();     if (INTENT_TAG_NAME.equals(name)) {       final Intent intent;       try {         intent=Intent.parseIntent(getContext().getResources(),parser,attrs);       }  catch (      IOException e) {         XmlPullParserException ex=new XmlPullParserException(\"Error parsing preference\");         ex.initCause(e);         throw ex;       }       parent.setIntent(intent);     }  else     if (EXTRA_TAG_NAME.equals(name)) {       getContext().getResources().parseBundleExtra(EXTRA_TAG_NAME,attrs,parent.getExtras());       try {         skipCurrentTag(parser);       }  catch (      IOException e) {         XmlPullParserException ex=new XmlPullParserException(\"Error parsing preference\");         ex.initCause(e);         throw ex;       }     }  else {       final Preference item=createItemFromTag(name,attrs);       ((PreferenceGroup)parent).addItemFromInflater(item);       rInflate(parser,item,attrs);     }   } } "
"public ComparableWeakReference(T referent){   super(referent); } "
"public TicTacTocPoint(int x,int y){   super();   this.x=x;   this.y=y; } "
"public boolean removeTuple(Tuple t){   throw new UnsupportedOperationException(\"Changes to graph structure not allowed for spanning trees.\"); } "
"@Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {   if (context.useNamespaces()) {     if (!XML11Char.isXML11ValidNCName(content)) {       throw new InvalidDatatypeValueException(\"IDREFInvalidWithNamespaces\",new Object[]{content});     }   }  else {     if (!XML11Char.isXML11ValidName(content)) {       throw new InvalidDatatypeValueException(\"IDREFInvalid\",new Object[]{content});     }   }   context.addIdRef(content); } "
"public boolean isDistinct(){   return distinct; } "
"private void handleIncomingResponseMessage(SerialMessage incomingMessage) throws ZWaveSerialMessageException {   logger.trace(\"Incoming Message type = RESPONSE\");   ZWaveCommandProcessor processor=ZWaveCommandProcessor.getMessageDispatcher(incomingMessage.getMessageClass());   if (processor == null) {     logger.warn(String.format(\"TODO: Implement processing of Response Message = %s (0x%02X)\",incomingMessage.getMessageClass().getLabel(),incomingMessage.getMessageClass().getKey()));     return;   }   boolean result=processor.handleResponse(this,lastSentMessage,incomingMessage);   if (processor.isTransactionComplete()) {     notifyEventListeners(new ZWaveTransactionCompletedEvent(this.lastSentMessage,result));     transactionCompleted.release();     logger.trace(\"Released. Transaction completed permit count -> {}\",transactionCompleted.availablePermits());   } switch (incomingMessage.getMessageClass()) { case GetVersion:     this.zWaveVersion=((GetVersionMessageClass)processor).getVersion();   this.ZWaveLibraryType=((GetVersionMessageClass)processor).getLibraryType(); break; case MemoryGetId: this.ownNodeId=((MemoryGetIdMessageClass)processor).getNodeId(); this.homeId=((MemoryGetIdMessageClass)processor).getHomeId(); break; case GetSucNodeId: sucID=((GetSucNodeIdMessageClass)processor).getSucNodeId(); if (setSUC == true && sucID == 0) { enqueue(new EnableSucMessageClass().doRequest(EnableSucMessageClass.SUCType.SERVER)); enqueue(new SetSucNodeMessageClass().doRequest(ownNodeId,SetSucNodeMessageClass.SUCType.SERVER)); }  else if (setSUC == false && sucID == ownNodeId) { enqueue(new EnableSucMessageClass().doRequest(EnableSucMessageClass.SUCType.NONE)); enqueue(new SetSucNodeMessageClass().doRequest(ownNodeId,SetSucNodeMessageClass.SUCType.NONE)); } enqueue(new GetControllerCapabilitiesMessageClass().doRequest()); break; case GetControllerCapabilities: controllerType=((GetControllerCapabilitiesMessageClass)processor).getDeviceType(); break; case SerialApiGetCapabilities: serialAPIVersion=((SerialApiGetCapabilitiesMessageClass)processor).getSerialAPIVersion(); manufactureId=((SerialApiGetCapabilitiesMessageClass)processor).getManufactureId(); deviceId=((SerialApiGetCapabilitiesMessageClass)processor).getDeviceId(); deviceType=((SerialApiGetCapabilitiesMessageClass)processor).getDeviceType(); apiCapabilities=((SerialApiGetCapabilitiesMessageClass)processor).getApiCapabilities(); enqueue(new SerialApiGetInitDataMessageClass().doRequest()); break; case SerialApiGetInitData: for (Integer nodeId : ((SerialApiGetInitDataMessageClass)processor).getNodes()) { addNode(nodeId); } notifyEventListeners(new ZWaveNetworkStateEvent(true)); break; default : break; } } "
"@Override public void prepare() throws IllegalStateException, IOException {   Log.d(SBMP_TAG,\"prepare() 444\");   Log.d(SBMP_TAG,\"onPreparedCallback is: \" + ((this.mOnPreparedCallback == null) ? \"null\" : \"non-null\"));   if (pmInterface == null) {     Log.d(SBMP_TAG,\"prepare: pmInterface is null\");     if (!ConnectPlayMediaService()) {       Log.d(SBMP_TAG,\"prepare: Failed to connect play media service\");       ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);     }   }   if (pmInterface != null) {     Log.d(SBMP_TAG,\"prepare: pmInterface isn't null\");     try {       Log.d(SBMP_TAG,\"prepare: Remote invoke pmInterface.prepare(\" + ServiceBackedMediaPlayer.this.sessionId + \")\");       pmInterface.prepare(ServiceBackedMediaPlayer.this.sessionId);       Log.d(SBMP_TAG,\"prepare: prepared\");     }  catch (    RemoteException e) {       Log.d(SBMP_TAG,\"prepare: RemoteException\");       e.printStackTrace();       throw new IllegalStateException();     }   }   Log.d(SBMP_TAG,\"Done with prepare()\"); } "
"@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {   executor.execute(this,space,txn,readModifier,max); } "
"public FaveGetPhotosQuery photoSizes(Boolean value){   return unsafeParam(\"photo_sizes\",value); } "
"public void dumpWagonCART(CART cart,String destFile) throws IOException {   System.out.println(\"Dumping CART to \" + destFile + \" ...\");   DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));   MaryHeader hdr=new MaryHeader(MaryHeader.CARTS);   hdr.writeTo(out);   out.writeInt(cart.getNumNodes());   String name=\"\";   out.writeUTF(name);   dumpBinary(cart,out);   out.close();   System.out.println(\" ... done\\n\"); } "
"private static boolean equal(Object o1,Object o2){   if (o1 == o2)   return true;   if (o1 == null || o2 == null)   return false;   Class c=o1.getClass();   if (c == String.class || c == Integer.class || c == Boolean.class || c == Character.class || c == Long.class || c == Float.class || c == Double.class || c == Byte.class || c == Short.class)   return o1.equals(o2);   try {     return new MarshalledObject(o1).equals(new MarshalledObject(o2));   }  catch (  IOException ex) {     throw new IllegalArgumentException(\"unexpected IOException\");   } } "
"public void goToNextColor(){   setColorIndex(getNextColorIndex()); } "
"protected AuthRestoreQuery phone(String value){   return unsafeParam(\"phone\",value); } "
"public Webster(String roots) throws BindException {   this.port=Integer.getInteger(WEBSTER_PORT,0);   initialize(roots); } "
"public static boolean isNetworkAvailable(Context context){   ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);   if (null == manager)   return false;   NetworkInfo info=manager.getActiveNetworkInfo();   if (null == info || !info.isAvailable())   return false;   return true; } "
"public int hashCode(){   int hash=37;   hash=37 * hash + Float.floatToIntBits(m00);   hash=37 * hash + Float.floatToIntBits(m01);   hash=37 * hash + Float.floatToIntBits(m02);   hash=37 * hash + Float.floatToIntBits(m10);   hash=37 * hash + Float.floatToIntBits(m11);   hash=37 * hash + Float.floatToIntBits(m12);   hash=37 * hash + Float.floatToIntBits(m20);   hash=37 * hash + Float.floatToIntBits(m21);   hash=37 * hash + Float.floatToIntBits(m22);   return hash; } "
"public void sample(int column,String value){   rangeCheck(column,true);   ((ParserFactory)m_factories.get(column)).sample(value); } "
"@PostConstruct public void initApplication(){   if (env.getActiveProfiles().length == 0) {     log.warn(\"No Spring profile configured, running with default configuration\");   }  else {     log.info(\"Running with Spring profile(s) : {}\",Arrays.toString(env.getActiveProfiles()));     Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());     if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {       log.error(\"You have misconfigured your application! It should not run \" + \"with both the 'dev' and 'prod' profiles at the same time.\");     }     if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {       log.error(\"You have misconfigured your application! It should not\" + \"run with both the 'dev' and 'cloud' profiles at the same time.\");     }   } } "
"public static PacProxySelector buildPacSelectorForUrl(String url){   PacProxySelector result=null;   PacScriptSource pacSource=new UrlPacScriptSource(url);   if (pacSource.isScriptValid()) {     result=new PacProxySelector(pacSource);   }   return result; } "
"public boolean hasPermissionByInternalId(String internalId,String permission){   Permission resolvedPermission=getPermissionResolver().resolvePermission(permission);   return hasPermissionByInternalId(internalId,resolvedPermission); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public boolean catchableException(TypeDecl type){   Object _parameters=type;   if (catchableException_TypeDecl_values == null)   catchableException_TypeDecl_values=new java.util.HashMap(4);   if (catchableException_TypeDecl_values.containsKey(_parameters)) {     return ((Boolean)catchableException_TypeDecl_values.get(_parameters)).booleanValue();   }   ASTNode$State state=state();   int num=state.boundariesCrossed;   boolean isFinal=this.is$Final();   boolean catchableException_TypeDecl_value=catchableException_compute(type);   if (isFinal && num == state().boundariesCrossed)   catchableException_TypeDecl_values.put(_parameters,Boolean.valueOf(catchableException_TypeDecl_value));   return catchableException_TypeDecl_value; } "
"private void zzScanError(int errorCode){   String message;   try {     message=ZZ_ERROR_MSG[errorCode];   }  catch (  ArrayIndexOutOfBoundsException e) {     message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];   }   throw new Error(message); } "
"@Override public Decimal64 log10(){   return new Decimal64(FastMath.log10(value)); } "
"private static double[] computeSimpsonReciprocal(MainViewer mainViewer,ProgressListener progressListener) throws IOException, CanceledException {   progressListener.setMaximum(2 * mainViewer.getSelectedNodes().size());   progressListener.setProgress(0);   int numberOfDatasets=mainViewer.getDir().getDocument().getNumberOfSamples();   double[] total=new double[numberOfDatasets];   for (  Node v : mainViewer.getSelectedNodes()) {     int[] summarized=mainViewer.getNodeData(v).getSummarized();     for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];     progressListener.incrementProgress();   }   double[] result=new double[numberOfDatasets];   for (  Node v : mainViewer.getSelectedNodes()) {     int[] summarized=mainViewer.getNodeData(v).getSummarized();     for (int i=0; i < summarized.length; i++) {       double p=summarized[i] / total[i];       result[i]+=p * p;     }     progressListener.incrementProgress();   }   for (int i=0; i < result.length; i++)   result[i]=result[i] > 0 ? 1.0 / result[i] : 0;   return result; } "
"protected void recoverAfterListenerSetupFailure(){   refreshConnectionUntilSuccessful(); } "
"public static Map<String,Object> alwaysBadExpireProcessor(DispatchContext dctx,Map<String,? extends Object> context){   Locale locale=(Locale)context.get(\"locale\");   Map<String,Object> result=ServiceUtil.returnSuccess();   BigDecimal processAmount=(BigDecimal)context.get(\"processAmount\");   Debug.logInfo(\"Test Processor Bad Expire Date Credit Card\",module);   String refNum=UtilDateTime.nowAsString();   result.put(\"authResult\",Boolean.FALSE);   result.put(\"resultBadExpire\",Boolean.TRUE);   result.put(\"processAmount\",processAmount);   result.put(\"authRefNum\",refNum);   result.put(\"authAltRefNum\",refNum);   result.put(\"authFlag\",\"E\");   result.put(\"authMessage\",UtilProperties.getMessage(resource,\"AccountingPaymentTestProcessor\",locale));   return result; } "
"@Override public void renderSymbol(){   dataEditedFlag=true;   notifySLDEditorFileHasUpdated(); } "
"public static String readFileToString(File file,String encoding) throws IOException {   return readFileToString(file,Charsets.toCharset(encoding)); } "
"@Nullable public DragHandler createDragHandler(@NotNull ViewEditor editor,@NotNull NlComponent layout,@NotNull List<NlComponent> components,@NotNull DragType type){   return null; } "
"private static byte[] sign(byte[] data,final byte[] key) throws AWSIotException {   try {     Mac mac=Mac.getInstance(HMAC_ALGORITHM);     mac.init(new SecretKeySpec(key,HMAC_ALGORITHM));     return mac.doFinal(data);   }  catch (  Exception e) {     throw new AWSIotException(\"Unable to calculate a request signature: \" + e.getMessage());   } } "
"public String providePath(){   return \"/blockcanary/\"; } "
"public final boolean isLoading(){   return (mLoadFooter == getChildAt(getChildCount() - 1) && mLoadFooter.getHeight() > 0); } "
"public void incrementSelectedFTSIndex(){   this.selectedFTSIndex++; } "
"private void checkNoCharactersMissing(int totalLength,List<Token> tokens){   if (!tokens.isEmpty() && tokens.get(tokens.size() - 1).right != totalLength) {     String error=String.format(\"Lengths don't match: %s instead of %s\",tokens.get(tokens.size() - 1).right,totalLength);     throw new RuntimeException(error);   }   int start=0;   for (int i=0; i < tokens.size(); i++) {     Token token=tokens.get(i);     if (token.left != start) {       throw new RuntimeException(\"Gap/inconsistency at: \" + start);     }     start=token.right;   } } "
"public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_GIVEUP(){   return new SM_SYSTEM_MESSAGE(1300610); } "
"public PhotosEditAlbumQuery title(String value){   return unsafeParam(\"title\",value); } "
"public final void addValidationState(ValidationState vs){   fVSs.add(vs); } "
"public static SharePasswordDialogFragment newInstance(OCFile file,boolean createShare){   SharePasswordDialogFragment frag=new SharePasswordDialogFragment();   Bundle args=new Bundle();   args.putParcelable(ARG_FILE,file);   args.putBoolean(ARG_CREATE_SHARE,createShare);   frag.setArguments(args);   return frag; } "
"int readUtah(int row,int column,int numRows,int numColumns){   int currentByte=0;   if (readModule(row - 2,column - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row - 2,column - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row - 1,column - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row - 1,column - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row - 1,column,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row,column - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row,column - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(row,column,numRows,numColumns)) {     currentByte|=1;   }   return currentByte; } "
"public Iterator<PDGNode> iterator(){   return new ChildPDGFlowIterator(this.m_nodes); } "
"public static Boolean booleanValueIndicator(Object value){   if (value == null || value instanceof Boolean) {     return (Boolean)value;   }  else   if (\"Y\".equals(value)) {     return Boolean.TRUE;   }  else   if (\"N\".equals(value)) {     return Boolean.FALSE;   }  else {     return null;   } } "
"private void writeThriftObject(TBase dictionaryThriftObject) throws IOException {   dictionaryThriftWriter.write(dictionaryThriftObject); } "
"public EntityQuery where(EntityCondition... entityCondition){   this.whereEntityCondition=EntityCondition.makeCondition(Arrays.asList(entityCondition));   return this; } "
"public SyncHttpClient(SchemeRegistry schemeRegistry){   super(schemeRegistry); } "
"private void addTabId(int index,int tabId){   assert tabId != Tab.INVALID_TAB_ID;   if (mTabIdList.contains(tabId))   return;   mTabIdList.add(index,tabId); } "
"public AppsGetFriendsListQuery fields(List<EnumParam> value){   return unsafeParam(\"fields\",value); } "
"private void hanning(int size){   int start=(windowFunction.length - size) / 2;   int stop=(windowFunction.length + size) / 2;   double factor=twoPI / (size - 1.0d);   for (int i=0; start < stop; start++, i++)   windowFunction[i]=0.5 * (1 - Math.cos(factor * i)); } "
"public boolean isDrawValueAboveBarEnabled(){   return mDrawValueAboveBar; } "
"private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){   if (mListeners != null) {     for (int i=0; i < mListeners.size(); i++) {       mListeners.get(i).beforeTextChanged(s,start,count,after);     }   } } "
"public ShapelessRecipe removeIngredient(int count,Material ingredient){   return removeIngredient(count,ingredient,0); } "
"public int writeDebugInfoItem(DebugInfoItem debugInfoItem){   int off=data.position();   writeUleb128(debugInfoItem.lineStart);   int parametersSize=debugInfoItem.parameterNames.length;   writeUleb128(parametersSize);   for (int i=0; i < parametersSize; ++i) {     int parameterName=debugInfoItem.parameterNames[i];     writeUleb128p1(parameterName);   }   write(debugInfoItem.infoSTM);   return off; } "
"public boolean isOptional(){   return isOptional; } "
"@Override protected void fillUtterance(Utterance utterance,Element sentence){   fillUtterance(utterance,sentence,true,false,false); } "
"@Provides @Singleton @AdHocThrottleMapStore MapStore<AdHocThrottle> provideAdHocThrottleMapStore(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle){   CuratorFramework webCurator=withComponentNamespace(curator,\"web\");   return lifeCycle.manage(new ZkMapStore<>(webCurator,\"/adhoc-throttles\",new ZkAdHocThrottleSerializer())); } "
"public CassandraExperiment(ColumnList<String> columns){   super();   super.setID(Preconditions.checkNotNull(columns.getValue(\"id\",ExperimentIDSerializer.get(),null)));   super.setDescription(columns.getStringValue(\"description\",null));   super.setHypothesisIsCorrect(columns.getStringValue(\"hypothesis_is_correct\",null));   super.setResults(columns.getStringValue(\"results\",null));   super.setRule(columns.getStringValue(\"rule\",null));   super.setRuleJson(convertRuleToJson(columns.getStringValue(\"rule\",null)));   super.setSamplingPercent(Preconditions.checkNotNull(columns.getDoubleValue(\"sample_percent\",null)));   super.setStartTime(Preconditions.checkNotNull(columns.getDateValue(\"start_time\",null)));   super.setEndTime(Preconditions.checkNotNull(columns.getDateValue(\"end_time\",null)));   super.setState(State.valueOf(Preconditions.checkNotNull(columns.getStringValue(\"state\",null))));   super.setLabel(Experiment.Label.valueOf(Preconditions.checkNotNull(columns.getStringValue(\"label\",null))));   super.setApplicationName(Application.Name.valueOf(Preconditions.checkNotNull(columns.getStringValue(\"app_name\",null))));   super.setCreationTime(Preconditions.checkNotNull(columns.getDateValue(\"created\",null)));   super.setModificationTime(Preconditions.checkNotNull(columns.getDateValue(\"modified\",null)));   super.setIsPersonalizationEnabled(Preconditions.checkNotNull(columns.getBooleanValue(\"is_personalized\",false)));   super.setModelName(Preconditions.checkNotNull(columns.getStringValue(\"model_name\",\"\")));   super.setModelVersion(Preconditions.checkNotNull(columns.getStringValue(\"model_version\",\"\")));   super.setIsRapidExperiment(Preconditions.checkNotNull(columns.getBooleanValue(\"is_rapid_experiment\",false)));   super.setUserCap(Preconditions.checkNotNull(columns.getIntegerValue(\"user_cap\",Integer.MAX_VALUE)));   super.setCreatorID(columns.getStringValue(\"creatorid\",null)); } "
"public void allow(PermissionFlag flag){   generalPermissions.remove(flag); } "
"public static void loadImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource){   getBitmapLoader(_context,_imageUrl,_placeHolderResource).centerCrop().into(_imageView); } "
"@Override public int hashCode(){   if (fExpandedSystemId != null) {     return fExpandedSystemId.hashCode();   }   if (fPublicId != null) {     return fPublicId.hashCode();   }   return 0; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public BytecodeTypeAccess fullCopy(){   BytecodeTypeAccess tree=(BytecodeTypeAccess)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public static String clearCart(HttpServletRequest request,HttpServletResponse response){   ShoppingCart cart=getCartObject(request);   cart.clear();   HttpSession session=request.getSession();   GenericValue userLogin=(GenericValue)session.getAttribute(\"userLogin\");   if (userLogin != null && \"anonymous\".equals(userLogin.get(\"userLoginId\"))) {     Locale locale=UtilHttp.getLocale(session);     session.invalidate();     session=request.getSession(true);     if (null != locale) {       UtilHttp.setLocale(session,locale);     }     request.setAttribute(\"temporaryAnonymousUserLogin\",userLogin);     session.setAttribute(\"userLogin\",userLogin);     Debug.logInfo(\"Scipio: Doing clearCart for anonymous user, but leaving anonymous user login in session (partyId: '\" + userLogin.getString(\"partyId\") + \"'\",module);   }   return \"success\"; } "
"public int addEdge(int s,int t){   long key1=getKey(s);   long key2=getKey(t);   Table edges=getEdgeTable();   int r=edges.addRow();   if (m_longKey) {     edges.setLong(r,m_skey,key1);     edges.setLong(r,m_tkey,key2);   }  else {     edges.setInt(r,m_skey,(int)key1);     edges.setInt(r,m_tkey,(int)key2);   }   return r; } "
"@Override protected void parseOptimizationData(OptimizationData... optData){   super.parseOptimizationData(optData);   for (  OptimizationData data : optData) {     if (data instanceof AbstractSimplex) {       simplex=(AbstractSimplex)data;       break;     }   } } "
"public static void showCreateAircraft(Activity activity,int requestCode){   Intent intent=new Intent(activity,CreateEditAircraftActivity.class);   activity.startActivityForResult(intent,requestCode); } "
"public static String hashKeyForDisk(String key){   String cacheKey;   try {     final MessageDigest mDigest=MessageDigest.getInstance(\"MD5\");     mDigest.update(key.getBytes());     cacheKey=bytesToHexString(mDigest.digest());   }  catch (  NoSuchAlgorithmException e) {     cacheKey=String.valueOf(key.hashCode());   }   return cacheKey; } "
"@Override public void readAttributes(DataSourceAttributeListInterface attributeData){ } "
"public void flushBase64() throws java.io.IOException {   if (position > 0) {     if (encode) {       out.write(encode3to4(b4,buffer,position,options));       position=0;     }  else {       throw new java.io.IOException(\"Base64 input not properly padded.\");     }   } } "
"public boolean class_method_var(){   return soot.PhaseOptions.getBoolean(options,\"class-method-var\"); } "
"private void removeReadsFromSets(SortedSet<Pair<String,List<Pair<IReadBlock,IMatchBlock>>>> sorted,Pair<String,List<Pair<IReadBlock,IMatchBlock>>> current){   Set<IReadBlock> reads=new HashSet<>();   for (  Pair<IReadBlock,IMatchBlock> readAndMatch : current.getSecond()) {     reads.add(readAndMatch.getFirst());   }   List<Pair<String,List<Pair<IReadBlock,IMatchBlock>>>> toModify=new LinkedList<>();   for (  Pair<String,List<Pair<IReadBlock,IMatchBlock>>> refReadMatches : sorted) {     for (    Pair<IReadBlock,IMatchBlock> readMatch : refReadMatches.getSecond()) {       if (reads.contains(readMatch.getFirst())) {         toModify.add(refReadMatches);         break;       }     }   }   for (  Pair<String,List<Pair<IReadBlock,IMatchBlock>>> refReadMatches : toModify) {     sorted.remove(refReadMatches);     List<Pair<IReadBlock,IMatchBlock>> toDelete=new LinkedList<>();     for (    Pair<IReadBlock,IMatchBlock> readMatch : refReadMatches.getSecond()) {       if (reads.contains(readMatch.getFirst())) {         toDelete.add(readMatch);       }     }     refReadMatches.getSecond().removeAll(toDelete);     if (refReadMatches.getSecond().size() > 0)     sorted.add(refReadMatches);   } } "
"public Vector3f multAcross(Vector3f vec,Vector3f store){   if (null == vec) {     logger.info(\"Source vector is null, null result returned.\");     return null;   }   if (store == null) {     store=new Vector3f();   }   float vx=vec.x, vy=vec.y, vz=vec.z;   store.x=m00 * vx + m10 * vy + m20 * vz + m30 * 1;   store.y=m01 * vx + m11 * vy + m21 * vz + m31 * 1;   store.z=m02 * vx + m12 * vy + m22 * vz + m32 * 1;   return store; } "
"public static Map<String,Object> createNote(DispatchContext ctx,Map<String,?> context){   Delegator delegator=ctx.getDelegator();   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   Timestamp noteDate=(Timestamp)context.get(\"noteDate\");   String partyId=(String)context.get(\"partyId\");   String noteName=(String)context.get(\"noteName\");   String note=(String)context.get(\"note\");   String noteId=delegator.getNextSeqId(\"NoteData\");   Locale locale=(Locale)context.get(\"locale\");   if (noteDate == null) {     noteDate=UtilDateTime.nowTimestamp();   }   if (partyId == null) {     if (userLogin != null && userLogin.get(\"partyId\") != null)     partyId=userLogin.getString(\"partyId\");   }   Map<String,Object> fields=UtilMisc.toMap(\"noteId\",noteId,\"noteName\",noteName,\"noteInfo\",note,\"noteParty\",partyId,\"noteDateTime\",noteDate);   try {     GenericValue newValue=delegator.makeValue(\"NoteData\",fields);     delegator.create(newValue);   }  catch (  GenericEntityException e) {     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"CommonNoteCannotBeUpdated\",UtilMisc.toMap(\"errorString\",e.getMessage()),locale));   }   Map<String,Object> result=ServiceUtil.returnSuccess();   result.put(\"noteId\",noteId);   result.put(\"partyId\",partyId);   return result; } "
"public OrSpacePredicate(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){   super(leftPredicate,rightPredicate); } "
"public static String toHexString(byte... bytes){   char[] DIGITS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};   char[] buffer=new char[bytes.length * 2];   for (int i=0, j=0; i < bytes.length; ++i) {     int u=bytes[i] < 0 ? bytes[i] + 256 : bytes[i];     buffer[j++]=DIGITS[u >>> 4];     buffer[j++]=DIGITS[u & 0xf];   }   return new String(buffer); } "
"private void internal_populateIntegerField(Map<String,String> options,FieldIdEnum fieldId,String key){   if ((options != null) && options.containsKey(key)) {     String storedValue=options.get(key);     Integer value=Integer.valueOf(storedValue);     fieldConfigVisitor.populateIntegerField(fieldId,value);   }  else {     setDefaultValue(fieldId);   } } "
"@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){   FieldConfigColourMap copy=null;   if (fieldConfigBase != null) {     copy=new FieldConfigColourMap(fieldConfigBase.getCommonData());   }   return copy; } "
"public ZWaveAlarmSensorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"public static long dateToMilliseconds(Date date){   return date.getTime(); } "
"public DotGraphNode drawNode(String name){   DotGraphNode node=getNode(name);   if (node == null)   throw new RuntimeException(\"Assertion failed.\");   if (!this.drawElements.contains(node))   this.drawElements.add(node);   return node; } "
"private void refreshState(){   updateSummaries();   rebuildProfileList();   rebuildCreditCardList(); } "
"public boolean isDataType(DataType dataType){   return this.dataType != null && this.dataType.equals(dataType); } "
"public void readFrom(Reader from) throws ParserConfigurationException, SAXException, IOException {   String inputData=FileUtils.getReaderAsString(from);   setData(inputData); } "
"public static String readKeyValueLocalMachine(String keyPath,String valueName){   return readKeyValue(HKEY_LOCAL_MACHINE,keyPath,valueName); } "
"static String[] splitOnTokens(String text){   if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {     return new String[]{text};   }   char[] array=text.toCharArray();   ArrayList<String> list=new ArrayList<String>();   StringBuilder buffer=new StringBuilder();   for (int i=0; i < array.length; i++) {     if (array[i] == '?' || array[i] == '*') {       if (buffer.length() != 0) {         list.add(buffer.toString());         buffer.setLength(0);       }       if (array[i] == '?') {         list.add(\"?\");       }  else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals(\"*\") == false) {         list.add(\"*\");       }     }  else {       buffer.append(array[i]);     }   }   if (buffer.length() != 0) {     list.add(buffer.toString());   }   return list.toArray(new String[list.size()]); } "
"public static boolean isNotEmpty(String str){   return !isEmpty(str); } "
"private static boolean snapVerticalGrid(Point candidatePoint){   int y=candidatePoint.y;   y=(y / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;   candidatePoint.y=y;   return true; } "
"protected void noteUpdate(K key,V newValue,V oldValue){   for (  CacheListener<K,V> listener : listeners) {     listener.noteKeyUpdate(this,key,newValue,oldValue);   } } "
"public VideoGetAlbumsQuery(VkApiClient client,UserActor actor){   super(client,\"video.getAlbums\",GetAlbumsResponse.class);   accessToken(actor.getAccessToken()); } "
"public static void drawLine(Point p1,Point p2,Canvas canvas,Paint paint){   canvas.save();   canvas.drawLine(p1.x,p1.y,p2.x,p2.y,paint);   canvas.restore(); } "
"public static DataFrame zeromeanUnitVariance(DataFrame frame,List<String> skipColumns){   String[] columnNames=frame.columns();   for (  String columnName : columnNames) {     if (skipColumns.contains(columnName))     continue;     DataFrame meanStd=frame.select(columnName).agg(mean(columnName),stddev(columnName));     Row r=meanStd.collect()[0];     double mean=((Number)r.get(0)).doubleValue();     double std=((Number)r.get(1)).doubleValue();     if (std == 0.0)     std=1;     frame=frame.withColumn(columnName,frame.col(columnName).minus(mean).divide(std));   }   return frame; } "
"public void ensureCapacity(int capacity){   if (mGarbage && mSize >= mKeys.length) {     gc();   }   if (mKeys.length < capacity) {     int[] nkeys=new int[capacity];     Object[] nvalues=new Object[capacity];     System.arraycopy(mKeys,0,nkeys,0,mKeys.length);     System.arraycopy(mValues,0,nvalues,0,mValues.length);     mKeys=nkeys;     mValues=nvalues;   } } "
"public IObjectInfo<T> add(T subject){   lock.lock();   try {     IObjectInfo<T> oi=store_impl(subject);     updateHashAfterInsertion(oi);     return oi;   }   finally {     lock.unlock();   } } "
"public static final void restMode(final Summon summon){   summon.getController().cancelCurrentSkill();   summon.setMode(SummonMode.REST);   Player master=summon.getMaster();   PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_REST_MODE(summon.getNameId()));   PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));   summon.getLifeStats().triggerRestoreTask(); } "
"protected void drawYAxis(Graphics2D gc,Dimension size){   SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);   gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));   boolean doDraw=(size == null);   Rectangle bbox=null;   int x0=leftMargin;   int x1=getWidth() - rightMargin;   int y0=getHeight() - bottomMargin;   int y1=topMargin;   if (isTranspose()) {     if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;     if (x0 >= x1)     return;     final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);     if (numberOfSeries > 0) {       int longest=0;       for (      String series : seriesNames) {         String label=seriesLabelGetter.getLabel(series);         longest=Math.max(longest,Basic.getStringSize(gc,label,gc.getFont()).getSize().width);       }       int right=Math.max(leftMargin,longest + 5);       if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));       int numberOfDataSets=getChartData().getNumberOfSeries();       double yStep=(y0 - y1) / (numberOfDataSets);       int d=numberOfSeries - 1;       for (      String series : seriesNames) {         String label=seriesLabelGetter.getLabel(series);         Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();         int x=right - labelSize.width - 4;         int y=(int)Math.round(y0 - (d + 0.5) * yStep);         if (doDraw) {           if (getChartData().getChartSelection().isSelectedSeries(series)) {             gc.setColor(ProgramProperties.SELECTION_COLOR);             fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);           }           gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));           gc.drawString(label,x,y);         }  else {           Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);           if (bbox == null)           bbox=rect;  else           bbox.add(rect);         }         if (sgc != null) {           sgc.setCurrentItem(new String[]{series,null});           drawRect(gc,x,y,labelSize.width,labelSize.height,0);           sgc.clearCurrentItem();         }         d--;       }     }   }  else {     if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering())     y1+=topTreeSpace;     final int numberOfClasses=(classNames == null ? 0 : classNames.length);     if (numberOfClasses > 0) {       int longest=0;       for (      String className : classNames) {         longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);       }       int right=Math.max(leftMargin,longest + 5);       if (doDraw)       gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));       double yStep=(y0 - y1) / (double)numberOfClasses;       int c=numberOfClasses - 1;       for (      String className : classNames) {         Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();         int x=right - labelSize.width - 4;         int y=(int)Math.round(y0 - (c + 0.5) * yStep);         if (doDraw) {           if (getChartData().getChartSelection().isSelectedClass(className)) {             gc.setColor(ProgramProperties.SELECTION_COLOR);             fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);           }           gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));           gc.drawString(className,x,y);         }  else {           Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);           if (bbox == null)           bbox=rect;  else           bbox.add(rect);         }         c--;         if (sgc != null) {           sgc.setCurrentItem(new String[]{null,className});           drawRect(gc,x,y,labelSize.width,labelSize.height,0);           sgc.clearCurrentItem();         }       }     }   }   if (size != null && bbox != null) {     size.setSize(bbox.width + 3,bbox.height);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_ME_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200473,skilltarget); } "
"public boolean isCutOffApproximation(){   return this.cutOffApproximation; } "
"public boolean isSubsetOf(XSWildcardDecl superWildcard){   if (superWildcard == null)   return false;   if (superWildcard.fType == NSCONSTRAINT_ANY) {     return true;   }   if (fType == NSCONSTRAINT_NOT) {     if (superWildcard.fType == NSCONSTRAINT_NOT && fNamespaceList[0] == superWildcard.fNamespaceList[0]) {       return true;     }   }   if (fType == NSCONSTRAINT_LIST) {     if (superWildcard.fType == NSCONSTRAINT_LIST && subset2sets(fNamespaceList,superWildcard.fNamespaceList)) {       return true;     }     if (superWildcard.fType == NSCONSTRAINT_NOT && !elementInSet(superWildcard.fNamespaceList[0],fNamespaceList) && !elementInSet(ABSENT,fNamespaceList)) {       return true;     }   }   return false; } "
"public ValidEdgePredicate(Graph g){   m_g=g; } "
"public ObjectFactory(){ } "
"@NonNull public static String joinAddresses(String firstPart,String secondPart){   return escape(firstPart) + \"&\" + escape(secondPart); } "
"private Set<Aggregation> mergeAggregations(Set<Aggregation> set1,Set<Aggregation> set2){   Map<String,Aggregation> resultAggregationsByName=new LinkedHashMap<>();   for (  Aggregation agg : set1) {     if (resultAggregationsByName.put(agg.getName(),agg) != null) {       String message=String.format(\"Duplicate name %s in aggregation set %s\",agg.getName(),set1);       LOG.error(message);       throw new IllegalArgumentException(message);     }   }   for (  Aggregation thatOne : set2) {     Aggregation thisOne=resultAggregationsByName.get(thatOne.getName());     if (thisOne == null || thisOne.equals(thatOne)) {       resultAggregationsByName.put(thatOne.getName(),thatOne);       continue;     }     if (thisOne.isSketch() && thatOne.isSketch() && thisOne.getFieldName().equals(thatOne.getFieldName())) {       SketchAggregation converted=FieldConverterSupplier.sketchConverter.asInnerSketch((SketchAggregation)thisOne);       resultAggregationsByName.remove(thisOne.getName());       resultAggregationsByName.put(converted.getName(),converted);       continue;     }     String message=\"Attempt to merge sketch aggregations with the same name, but over different field names\";     LOG.error(message);     throw new IllegalArgumentException(message);   }   return new LinkedHashSet<>(resultAggregationsByName.values()); } "
"public boolean isResubscribe(){   return resubscribe; } "
"IEntryCacheInfo internalInsertEntryToCache(Context context,IEntryHolder entryHolder,boolean newEntry,TypeData typeData,IEntryCacheInfo pEntry,boolean pin){   IEntryCacheInfo res=null;   boolean recheckedTypeData=false;   boolean alreadyIn=false;   boolean insertedToEvictionStrategy=false;   boolean applySequenceNumber=newEntry && typeData.hasSequenceNumber() && !context.isFromReplication()&& !_engine.isLocalCache();   if (newEntry && typeData.isFifoSupport()) {     long xtnNum=getLatestTTransactionTerminationNum();     setFifoCreationXtnInfoForEntry(entryHolder,xtnNum);     if (context.getRecentFifoObject() != null)     context.getRecentFifoObject().setFifoXtnNumber(xtnNum);   }   try {     while (true) {       insertedToEvictionStrategy=false;       alreadyIn=false;       IEntryCacheInfo oldEntry=_entries.putIfAbsent(pEntry.getUID(),pEntry);       if (oldEntry == null)       break;       alreadyIn=true;       if (useRecentDeletes() && newEntry && oldEntry.isRecentDelete()) {         if (_entries.replace(pEntry.getUID(),oldEntry,pEntry)) {           removeFromRecentDeletes(pEntry.getEntryHolder(this));           alreadyIn=false;           break;         }         throw new RuntimeException(\"internalInsertEntryToCache: recent deletes cannot be replaced uid=\" + pEntry.getUID());       }       if (isEvictableCachePolicy() && oldEntry.isRemoving()) {         if (_evictionStrategy.requiresConcurrencyProtection())         ((EvictableEntryCacheInfo)oldEntry).verifyEntryRemovedFromStrategy();         _entries.remove(pEntry.getUID(),oldEntry);         continue;       }       if (useRecentDeletes() && !newEntry && oldEntry.isRecentDelete()) {         return null;       }       if (newEntry)       return (res=_entryAlreadyInSpaceIndication);       if (pin && !oldEntry.setPinned(true,!isMemorySpace())) {         continue;       }       return (res=oldEntry);     }     insertEntryReferences(context,pEntry,typeData,applySequenceNumber);     if (!recheckedTypeData && typeData.supportsDynamicIndexing() && typeData.isTypeDataReplaced()) {       recheckedTypeData=true;       typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());       TypeDataIndex.reindexEntry(this,pEntry,typeData);     }     long expiration=pEntry.getEntryHolder(this).getEntryData().getExpirationTime();     int version=pEntry.getEntryHolder(this).getEntryData().getVersion();     _leaseManager.registerEntryLease(pEntry,expiration);     context.setWriteResult(new WriteEntryResult(pEntry.getUID(),version,expiration));     if (isEvictableCachePolicy())     addToEvictionStrategy(pEntry,newEntry);     insertedToEvictionStrategy=true;     if (newEntry && pEntry.getEntryHolder(this).getXidOriginated() != null) {       XtnData pXtn=pEntry.getEntryHolder(this).getXidOriginated().getXtnData();       pXtn.getNewEntries(true).add(pEntry);       lockEntry(pXtn,pEntry,context.getOperationID());       pEntry.getEntryHolder(this).getXidOriginated().setOperatedUpon();     }     if (isEvictableCachePolicy())     _cacheSize.incrementAndGet();     if (newEntry && pEntry.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed())     _engine.getReplicationNode().getDirectPesistencySyncHandler().getEmbeddedSyncHandler().onSpaceOpRemovePhantomIfExists(pEntry.getUID());     return (res=pEntry);   }  catch (  Exception ex) {     pEntry.setRemoved();     pEntry.getEntryHolder(this).setDeleted(true);     try {       removeEntryReferences(pEntry,typeData,context.getNumOfIndexesInserted());     }  catch (    Exception ex1) {     }     _entries.remove(pEntry.getUID(),pEntry);     if (isEvictableCachePolicy())     ((EvictableEntryCacheInfo)pEntry).notifyWaitersOnFailure();     if (newEntry && pEntry.getEntryHolder(this).getXidOriginated() != null) {       try {         disconnectEntryFromXtn(context,entryHolder,pEntry.getEntryHolder(this).getXidOriginated(),false);       }  catch (      Exception ex1) {       }     }     if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,\" insertion entry problem uid=\" + entryHolder.getUID() + \" new=\"+ newEntry+ \" pin=\"+ pin,ex);     if (ex instanceof RuntimeException)     throw (RuntimeException)ex;  else     throw new RuntimeException(ex);   }  finally {     if (res != pEntry && insertedToEvictionStrategy)     removeFromEvictionStrategy(pEntry);     if (newEntry && res == _entryAlreadyInSpaceIndication && typeData.isFifoSupport())     removeFifoXtnInfoForEntry(entryHolder);     if (res != null && res != _entryAlreadyInSpaceIndication && !alreadyIn && !pin && !pEntry.isRemoved()) {       if (isEvictableCachePolicy())       res.setInCache(!isMemorySpace());     }   } } "
"public ChangePassword(String email){   Email=email;   System.out.println(\"change password\" + Email);   Name=sql_object.retunnNameByEmail(Email);   System.out.println(\"change password\" + Name);   frame=new JFrame();   frame.getContentPane().setFont(new Font(\"Tahoma\",Font.PLAIN,17));   frame.setSize(6000,5000);   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   frame.getContentPane().setLayout(null);   JLabel lblChangePassword=new JLabel(\"Change Password :\");   lblChangePassword.setFont(new Font(\"Tahoma\",Font.BOLD,30));   lblChangePassword.setBounds(125,11,359,64);   frame.getContentPane().add(lblChangePassword);   JButton btnNewButton=new JButton(\"Log Out\");   btnNewButton.addActionListener(this);   btnNewButton.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   btnNewButton.setBounds(1099,31,232,29);   frame.getContentPane().add(btnNewButton);   JButton btnMyAccount=new JButton(\"My Account\");   btnMyAccount.addActionListener(this);   btnMyAccount.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   btnMyAccount.setBounds(1099,90,232,29);   frame.getContentPane().add(btnMyAccount);   passwordField=new JPasswordField();   passwordField.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   passwordField.setBounds(438,217,177,29);   frame.getContentPane().add(passwordField);   JLabel lblOldPassword=new JLabel(\"Old Password\");   lblOldPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   lblOldPassword.setBounds(205,217,157,29);   frame.getContentPane().add(lblOldPassword);   JLabel lblNewPassword=new JLabel(\"New Password\");   lblNewPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   lblNewPassword.setBounds(205,301,157,29);   frame.getContentPane().add(lblNewPassword);   passwordField_1=new JPasswordField();   passwordField_1.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   passwordField_1.setBounds(438,301,177,29);   frame.getContentPane().add(passwordField_1);   JLabel lblConfirmPassword=new JLabel(\"Confirm Password\");   lblConfirmPassword.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   lblConfirmPassword.setBounds(205,384,157,29);   frame.getContentPane().add(lblConfirmPassword);   passwordField_2=new JPasswordField();   passwordField_2.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   passwordField_2.setBounds(438,384,177,27);   frame.getContentPane().add(passwordField_2);   JButton btnNewButton_1=new JButton(\"Confirm\");   btnNewButton_1.addActionListener(this);   btnNewButton_1.setFont(new Font(\"Tahoma\",Font.PLAIN,17));   btnNewButton_1.setBounds(540,484,205,38);   frame.getContentPane().add(btnNewButton_1);   JLabel lblNewLabel=new JLabel(\"Hi \" + Name);   lblNewLabel.setFont(new Font(\"Tahoma\",Font.PLAIN,22));   lblNewLabel.setBounds(642,31,232,55);   frame.getContentPane().add(lblNewLabel); } "
"public static Schema createSchema(final String schemaLocation) throws XMLException {   Schema schema=null;   final SchemaFactory schemaFactory=SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);   try {     final File file=new File(schemaLocation);     if (file.exists()) {       schema=schemaFactory.newSchema(file);     }  else {       final InputStream resourceAsStream=XMLParser.class.getResourceAsStream(schemaLocation);       if (resourceAsStream == null) {         throw new XMLException(\"Cannot load the schema from file or classpath - fix the schema or amend the location: \" + schemaLocation);       }       schema=schemaFactory.newSchema(new StreamSource(resourceAsStream));     }     return schema;   }  catch (  SAXException e) {     throw new XMLException(\"Cannot set the schema - please fix the schema or the location\",e);   } } "
"public static boolean isIntegerType(Class type){   return (type == byte.class || type == short.class || type == int.class || type == long.class); } "
"public boolean contains(Object o){   Object[] elements=getArray();   return indexOf(o,elements,0,elements.length) >= 0; } "
"public JpaRelationshipRepository(JpaModule module,Class<S> sourceResourceClass,Class<T> targetResourceClass){   super(module,targetResourceClass);   this.sourceResourceClass=sourceResourceClass;   JpaMapping<?,S> sourceMapping=module.getMapping(sourceResourceClass);   if (sourceMapping != null) {     this.sourceEntityClass=sourceMapping.getEntityClass();     this.sourceMapper=sourceMapping.getMapper();   }  else {     this.sourceEntityClass=sourceResourceClass;     this.sourceMapper=IdentityMapper.newInstance();   }   this.entityMeta=module.getMetaLookup().getMeta(sourceEntityClass).asEntity(); } "
"public static long calculateDifferentSecond(long startTimeMillis,long endTimeMillis){   return calculateDifference(startTimeMillis,endTimeMillis,DifferenceMode.Second); } "
"public MovePageWindow typeDestinationPath(String destinationPath){   AemPathWindow pathWindow=lookupField.openPathWindow();   pathWindow.getContentTree().selectPath(destinationPath);   pathWindow.clickOk();   return this; } "
"public void updateView(String what){   isUpToDate=false;   commandManager.updateEnableState();   isUpToDate=true; } "
"public Element(ElementType type,boolean defaultAttributes){   theType=type;   if (defaultAttributes)   theAtts=new AttributesImpl(type.atts());  else   theAtts=new AttributesImpl();   theNext=null;   preclosed=false; } "
"void onLoadFailed(int errorCode){   if (mRestoreStartedAtMillis != -1 && mLastShowMillis >= mRestoreStartedAtMillis) {     recordTabRestoreResult(false,-1,-1,errorCode);   }   mRestoreStartedAtMillis=-1; } "
"public static final int binarySearch(Object[] a,Object key,Comparator cp,int length){   int x1=0;   int x2=length;   int i=x2 / 2, c;   while (x1 < x2) {     c=cp.compare(a[i],key);     if (c == 0) {       return i;     }  else     if (c < 0) {       x1=i + 1;     }  else {       x2=i;     }     i=x1 + (x2 - x1) / 2;   }   return -1 * (i + 1); } "
"@SuppressWarnings(\"deprecation\") @Override public void onFailure(int statusCode,Header[] headers,byte[] binaryData,Throwable error){   onFailure(statusCode,error,null); } "
"public void resetOriginals(){   mStartingStartTrim=0;   mStartingEndTrim=0;   mStartingRotation=0;   setStartTrim(0);   setEndTrim(0);   setRotation(0); } "
"public Matrix(double vals[],int m){   this.m=m;   n=(m != 0 ? vals.length / m : 0);   if (m * n != vals.length) {     throw new IllegalArgumentException(\"Array length must be a multiple of m.\");   }   A=new double[m][n];   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       A[i][j]=vals[i + j * m];     }   } } "
"public ContinousQuery(Class<T> type,String sqlExpression,QueryResultType queryResultType){   super(type,sqlExpression,queryResultType); } "
"@Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {   if (DEBUG_EVENTS) {     System.out.println(\"==>unparsedEntityDecl: \" + name);     if (DEBUG_BASEURI) {       System.out.println(\"   expandedSystemId:\" + identifier.getExpandedSystemId());       System.out.println(\"   baseURI:\" + identifier.getBaseSystemId());     }   }   String publicId=identifier.getPublicId();   String literalSystemId=identifier.getLiteralSystemId();   if (fInternalSubset != null && !fInDTDExternalSubset) {     fInternalSubset.append(\"<!ENTITY \");     fInternalSubset.append(name);     fInternalSubset.append(' ');     if (publicId != null) {       fInternalSubset.append(\"PUBLIC '\");       fInternalSubset.append(publicId);       if (literalSystemId != null) {         fInternalSubset.append(\"' '\");         fInternalSubset.append(literalSystemId);       }     }  else {       fInternalSubset.append(\"SYSTEM '\");       fInternalSubset.append(literalSystemId);     }     fInternalSubset.append(\"' NDATA \");     fInternalSubset.append(notation);     fInternalSubset.append(\">\\n\");   }   if (fDocumentType != null) {     NamedNodeMap entities=fDocumentType.getEntities();     EntityImpl entity=(EntityImpl)entities.getNamedItem(name);     if (entity == null) {       entity=(EntityImpl)fDocumentImpl.createEntity(name);       entity.setPublicId(publicId);       entity.setSystemId(literalSystemId);       entity.setNotationName(notation);       entity.setBaseURI(identifier.getBaseSystemId());       entities.setNamedItem(entity);     }   }   if (fDocumentTypeIndex != -1) {     boolean found=false;     int nodeIndex=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);     while (nodeIndex != -1) {       short nodeType=fDeferredDocumentImpl.getNodeType(nodeIndex,false);       if (nodeType == Node.ENTITY_NODE) {         String nodeName=fDeferredDocumentImpl.getNodeName(nodeIndex,false);         if (nodeName.equals(name)) {           found=true;           break;         }       }       nodeIndex=fDeferredDocumentImpl.getRealPrevSibling(nodeIndex,false);     }     if (!found) {       int entityIndex=fDeferredDocumentImpl.createDeferredEntity(name,publicId,literalSystemId,notation,identifier.getBaseSystemId());       fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,entityIndex);     }   } } "
"private boolean checkAndRequestWeatherPermissions(){   if (ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {     if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION)) {       ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},MY_PERMISSION_LOCATION);     }  else {       Log.i(TAG,\"Permission previously denied and app shouldn't ask again.  Skipping\" + \" weather snapshot.\");     }     return false;   }  else {     return true;   } } "
"public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){   super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener); } "
"private void populateCRSList(){   if (crsDataList.isEmpty()) {     Hints hints=null;     for (    AuthorityFactory factory : ReferencingFactoryFinder.getCRSAuthorityFactories(hints)) {       String authorityCode=\"\";       Citation citation=factory.getAuthority();       if (citation != null) {         @SuppressWarnings(\"unchecked\") Collection<Identifier> identifierList=(Collection<Identifier>)citation.getIdentifiers();         authorityCode=identifierList.iterator().next().getCode();       }       Set<String> codeList;       try {         codeList=factory.getAuthorityCodes(CoordinateReferenceSystem.class);         VendorOptionVersion vendorOptionVersion=VendorOptionManager.getInstance().getDefaultVendorOptionVersion();         for (        String code : codeList) {           String fullCode=String.format(\"%s:%s\",authorityCode,code);           String descriptionText=factory.getDescriptionText(code).toString();           String text=String.format(\"%s - %s\",fullCode,descriptionText);           ValueComboBoxData value=new ValueComboBoxData(fullCode,text,vendorOptionVersion);           crsDataList.add(value);           crsMap.put(fullCode,value);         }       }  catch (      NoSuchAuthorityCodeException e) {       } catch (      FactoryException e) {         ConsoleManager.getInstance().exception(this,e);       }     }   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_USER_KICKED_BY_TIMEOUT(String durationtime0){   return new SM_SYSTEM_MESSAGE(1400261,durationtime0); } "
"public boolean isExportResults(){   return exportResults; } "
"@Override public boolean parse(boolean complete) throws XNIException, IOException {   if (fInputSource != null) {     try {       reset();       fScanner.setInputSource(fInputSource);       fInputSource=null;     }  catch (    XNIException ex) {       if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();       throw ex;     } catch (    IOException ex) {       if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();       throw ex;     } catch (    RuntimeException ex) {       if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();       throw ex;     } catch (    Exception ex) {       if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();       throw new XNIException(ex);     }   }   try {     return fScanner.scanDocument(complete);   }  catch (  XNIException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  IOException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  RuntimeException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  Exception ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw new XNIException(ex);   } } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"public static String base64EncodeByteArray(byte[] bytes){   try {     byte[] encodeBase64=Base64.encodeBase64(bytes);     return new String(encodeBase64,\"UTF-8\");   }  catch (  Exception e) {     throw new RuntimeException(\"Exception while encoding bytes: \" + Arrays.toString(bytes));   } } "
"public static Vector3D crossProduct(final Vector3D v1,final Vector3D v2){   return v1.crossProduct(v2); } "
"@ObjectiveCName(\"parse:client:\") static List<Message> parse(String message,DeepstreamClientAbstract client){   List<Message> messages=new ArrayList<>();   String[] rawMessages=message.split(MS);   Message parsedMessage;   for (  String rawMessage : rawMessages) {     parsedMessage=parseMessage(rawMessage,client);     if (parsedMessage != null) {       messages.add(parsedMessage);     }   }   return messages; } "
"private void skipToEndOfLine(){   for (; pos < in.length(); pos++) {     char c=in.charAt(pos);     if (c == '\\r' || c == '\\n') {       pos++;       break;     }   } } "
"private Launch validate(String launchId,String projectName){   Launch launch=launchRepository.findOne(launchId);   expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,launchId);   expect(launch.getProjectRef(),equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier(\"Specified launch with id '{}' not referenced to specified project '{}'\",launchId,projectName));   return launch; } "
"private void storeLegion(Legion legion,boolean newLegion){   if (newLegion) {     addCachedLegion(legion);     DAOManager.getDAO(LegionDAO.class).saveNewLegion(legion);   }  else {     DAOManager.getDAO(LegionDAO.class).storeLegion(legion);     DAOManager.getDAO(LegionDAO.class).storeLegionEmblem(legion.getLegionId(),legion.getLegionEmblem());   } } "
"public TopNMetric(TopNMetricType type,String previousStop,SortDirection order){   this(type,previousStop);   if (order == SortDirection.ASC) {     this.type=TopNMetricType.INVERTED;     this.nested=Optional.of(new TopNMetric(type,previousStop));     this.previousStop=Optional.empty();   } } "
"public FileAlterationObserver(String directoryName,FileFilter fileFilter){   this(new File(directoryName),fileFilter); } "
"@SuppressWarnings(\"unchecked\") public Block(Header header,List<? extends MerkleTreeNode> transactions){   this.header=header;   this.nodes=Collections.unmodifiableList(transactions);   int pruned=0;   for (  MerkleTreeNode n : transactions) {     if (!(n instanceof Transaction))     ++pruned;   }   if (pruned > 0) {     this.transactions=new ArrayList<>(nodes.size() - pruned);     for (    MerkleTreeNode n : transactions) {       if (n instanceof Transaction)       this.transactions.add((Transaction)n);     }     this.transactions=Collections.unmodifiableList(this.transactions);   }  else {     this.transactions=(List<Transaction>)nodes;   } } "
"public PlacesAddQuery(VkApiClient client,UserActor actor,String title,float latitude,float longitude){   super(client,\"places.add\",AddResponse.class);   accessToken(actor.getAccessToken());   title(title);   latitude(latitude);   longitude(longitude); } "
"final public void response(JSON jo){   if (jo == null) {     responseJson(\"{}\");   }  else {     responseJson(jo.toString());   } } "
"public Uuid(long bits0,long bits1){   this.bits0=bits0;   this.bits1=bits1; } "
"public static boolean begin() throws GenericTransactionException {   return begin(0); } "
"public Allophone(Element a,String[] featureNames){   name=a.getAttribute(\"ph\");   String vc;   String isTone;   if (name.equals(\"\"))   throw new IllegalArgumentException(\"Element must have a 'ph' attribute\");   if (a.getTagName().equals(\"consonant\")) {     vc=\"-\";     isTone=\"-\";   }  else   if (a.getTagName().equals(\"vowel\")) {     vc=\"+\";     isTone=\"-\";   }  else   if (a.getTagName().equals(\"silence\")) {     vc=\"0\";     isTone=\"-\";   }  else   if (a.getTagName().equals(\"tone\")) {     vc=\"0\";     isTone=\"+\";   }  else {     throw new IllegalArgumentException(\"Element must be one of <vowel>, <consonant> and <silence>, but is <\" + a.getTagName() + \">\");   }   Map<String,String> feats=new HashMap<String,String>();   feats.put(\"vc\",vc);   feats.put(\"isTone\",isTone);   for (  String f : featureNames) {     feats.put(f,getAttribute(a,f));   }   this.features=Collections.unmodifiableMap(feats); } "
"public double searchDurInCartTree(HTSModel m,FeatureVector fv,HMMData htsData,double diffdur){   return searchDurInCartTree(m,fv,htsData,false,false,diffdur); } "
"void addFillComponents(Container panel,int[] cols,int[] rows){   Dimension filler=new Dimension(10,10);   boolean filled_cell_11=false;   CellConstraints cc=new CellConstraints();   if (cols.length > 0 && rows.length > 0) {     if (cols[0] == 1 && rows[0] == 1) {       panel.add(Box.createRigidArea(filler),cc.xy(1,1));       filled_cell_11=true;     }   }   for (int index=0; index < cols.length; index++) {     if (cols[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));   }   for (int index=0; index < rows.length; index++) {     if (rows[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));   } } "
"public SM_RIFT_ANNOUNCE(RVController rift,boolean isMaster){   this.rift=rift;   this.actionId=isMaster ? 2 : 3; } "
"public PhotosGetCommentsQueryWithExtended sort(PhotosGetCommentsSort value){   return unsafeParam(\"sort\",value); } "
"@Deployment public void testJobEntityEventsException() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"testJobEvents\");   Job theJob=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();   assertNotNull(theJob);   managementService.setTimerJobRetries(theJob.getId(),1);   Calendar tomorrow=Calendar.getInstance();   tomorrow.add(Calendar.DAY_OF_YEAR,1);   processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());   Job executableJob=managementService.moveTimerToExecutableJob(theJob.getId());   listener.clearEventsReceived();   try {     managementService.executeJob(executableJob.getId());     fail(\"Expected exception\");   }  catch (  Exception e) {   }   theJob=managementService.createDeadLetterJobQuery().processInstanceId(processInstance.getId()).singleResult();   assertNotNull(theJob);   assertEquals(8,listener.getEventsReceived().size());   ActivitiEvent event=listener.getEventsReceived().get(0);   assertEquals(ActivitiEventType.TIMER_FIRED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(1);   assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(2);   assertEquals(ActivitiEventType.JOB_EXECUTION_FAILURE,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(3);   assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(4);   assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(5);   assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(6);   assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());   checkEventContext(event,theJob);   event=listener.getEventsReceived().get(7);   assertEquals(ActivitiEventType.JOB_RETRIES_DECREMENTED,event.getType());   assertEquals(0,((Job)((ActivitiEntityEvent)event).getEntity()).getRetries());   checkEventContext(event,theJob); } "
"public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType,SpaceDocumentSupport documentSupport){   return addFixedProperty(propertyName,propertyType,documentSupport,StorageType.DEFAULT); } "
"public boolean contains(S2LatLngRect other){   return lat.contains(other.lat) && lng.contains(other.lng); } "
"public final boolean containsKey(String name){   return mMap.containsKey(name); } "
"protected AdsImportTargetContactsQuery targetGroupId(int value){   return unsafeParam(\"target_group_id\",value); } "
"public static Map<String,Object> scaleImage(BufferedImage bufImg,double imgHeight,double imgWidth,Map<String,Map<String,String>> dimensionMap,String sizeType,Locale locale){   BufferedImage bufNewImg;   double defaultHeight, defaultWidth, scaleFactor;   Map<String,Object> result=new LinkedHashMap<String,Object>();   if (dimensionMap.get(sizeType).containsKey(\"height\")) {     defaultHeight=Double.parseDouble(dimensionMap.get(sizeType).get(\"height\").toString());   }  else {     defaultHeight=-1;   }   if (dimensionMap.get(sizeType).containsKey(\"width\")) {     defaultWidth=Double.parseDouble(dimensionMap.get(sizeType).get(\"width\").toString());   }  else {     defaultWidth=-1;   }   if (defaultHeight == 0.0 || defaultWidth == 0.0) {     String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.one_default_dimension_is_null\",locale) + \" : defaultHeight = \" + defaultHeight+ \" ; defaultWidth = \"+ defaultWidth;     Debug.logError(errMsg,module);     result.put(\"errorMessage\",errMsg);     return result;   }   if (defaultHeight == -1) {     scaleFactor=defaultWidth / imgWidth;     if (scaleFactor == 0.0) {       String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.width_scale_factor_is_null\",locale) + \"  (defaultWidth = \" + defaultWidth+ \"; imgWidth = \"+ imgWidth;       Debug.logError(errMsg,module);       result.put(\"errorMessage\",errMsg);       return result;     }   }  else   if (defaultWidth == -1) {     scaleFactor=defaultHeight / imgHeight;     if (scaleFactor == 0.0) {       String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.height_scale_factor_is_null\",locale) + \"  (defaultHeight = \" + defaultHeight+ \"; imgHeight = \"+ imgHeight;       Debug.logError(errMsg,module);       result.put(\"errorMessage\",errMsg);       return result;     }   }  else   if (imgHeight > imgWidth) {     scaleFactor=defaultHeight / imgHeight;     if (scaleFactor == 0.0) {       String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.height_scale_factor_is_null\",locale) + \"  (defaultHeight = \" + defaultHeight+ \"; imgHeight = \"+ imgHeight;       Debug.logError(errMsg,module);       result.put(\"errorMessage\",errMsg);       return result;     }     if (defaultWidth < (imgWidth * scaleFactor)) {       scaleFactor=defaultWidth / imgWidth;     }   }  else {     scaleFactor=defaultWidth / imgWidth;     if (scaleFactor == 0.0) {       String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.width_scale_factor_is_null\",locale) + \"  (defaultWidth = \" + defaultWidth+ \"; imgWidth = \"+ imgWidth;       Debug.logError(errMsg,module);       result.put(\"errorMessage\",errMsg);       return result;     }     if (defaultHeight < (imgHeight * scaleFactor)) {       scaleFactor=defaultHeight / imgHeight;     }   }   if (scaleFactor == 0.0) {     String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.final_scale_factor_is_null\",locale) + \" = \" + scaleFactor;     Debug.logError(errMsg,module);     result.put(\"errorMessage\",errMsg);     return result;   }   int bufImgType;   if (BufferedImage.TYPE_CUSTOM == bufImg.getType()) {     String errMsg=UtilProperties.getMessage(resource,\"ImageTransform.unknown_buffered_image_type\",locale);     Debug.logWarning(errMsg,module);     bufImgType=BufferedImage.TYPE_INT_ARGB_PRE;   }  else {     bufImgType=bufImg.getType();   }   Image newImg=bufImg.getScaledInstance((int)(imgWidth * scaleFactor),(int)(imgHeight * scaleFactor),Image.SCALE_SMOOTH);   bufNewImg=ImageTransform.toBufferedImage(newImg,bufImgType);   result.put(\"responseMessage\",\"success\");   result.put(\"bufferedImage\",bufNewImg);   result.put(\"scaleFactor\",scaleFactor);   return result; } "
"protected static double[] differentiate(double[] coefficients) throws MathIllegalArgumentException, NullArgumentException {   MathUtils.checkNotNull(coefficients);   int n=coefficients.length;   if (n == 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);   }   if (n == 1) {     return new double[]{0};   }   double[] result=new double[n - 1];   for (int i=n - 1; i > 0; i--) {     result[i - 1]=i * coefficients[i];   }   return result; } "
"public Builder messageDigest(String messageDigest){   this.messageDigest=messageDigest;   return this; } "
"public void addCandy(PokemonFamilyId family,int amount){   if (candies.containsKey(family)) {     candies.put(family,candies.get(family) + amount);   }  else {     candies.put(family,amount);   } } "
"public static Edit parse(NexusStreamParser np) throws IOException {   if (np.peekMatchIgnoreCase(\"A\")) {     np.matchIgnoreCase(\"A\");     return new Edit(np.getInt(),np.getInt(),np.getWordRespectCase());   }  else   if (np.peekMatchIgnoreCase(\"D\")) {     np.matchIgnoreCase(\"D\");     return new Edit(np.getInt());   }  else   if (np.peekMatchIgnoreCase(\"R\")) {     np.matchIgnoreCase(\"R\");     return new Edit(np.getInt(),np.getWordRespectCase());   }  else   return null; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_A_TO_SELF(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200829,skillcaster,num0,skillname); } "
"public void writeChar(char value) throws JMSException {   initializeWriting();   try {     this.dataOut.write(_CHAR);     this.dataOut.writeChar(value);   }  catch (  IOException ioe) {     raise(ioe);   } } "
"public String toString(){   String s=\"{\";   for (int j=0; j < size(); j++)   s+=(j == 0 ? \"\" : \",\") + get(j);   return s + \"}\"; } "
"public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){   return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds); } "
"public static void expandOrdinal(String rawNumberString,WordRelation wordRelation,Item tokenItem){   String numberString=Utilities.deleteChar(rawNumberString,',');   expandNumber(numberString,wordRelation,tokenItem);   Item lastItem=wordRelation.getTail();   if (lastItem != null) {     FeatureSet featureSet=lastItem.getFeatures();     String lastNumber=featureSet.getString(\"name\");     String ordinal=findMatchInArray(lastNumber,digit2num,ord2num);     if (ordinal == null) {       ordinal=findMatchInArray(lastNumber,digit2teen,ord2teen);     }     if (ordinal == null) {       ordinal=findMatchInArray(lastNumber,digit2enty,ord2enty);     }     if (lastNumber.equals(\"hundred\")) {       ordinal=\"hundredth\";     }  else     if (lastNumber.equals(\"thousand\")) {       ordinal=\"thousandth\";     }  else     if (lastNumber.equals(\"billion\")) {       ordinal=\"billionth\";     }     if (ordinal != null) {       wordRelation.setLastWord(ordinal);     }   } } "
"public void explodeItems(List<ShoppingCartItem> shoppingCartItems,LocalDispatcher dispatcher){   if (dispatcher == null)   return; synchronized (cartLines) {     for (    ShoppingCartItem item : shoppingCartItems) {       try {         int thisIndex=items().indexOf(item);         List<ShoppingCartItem> explodedItems=item.explodeItem(this,dispatcher);         for (        ShoppingCartItem explodedItem : explodedItems) {           String orderItemSeqId=UtilFormatOut.formatPaddedNumber(nextItemSeq,5);           explodedItem.setOrderItemSeqId(orderItemSeqId);           addItemToEnd(explodedItem);           setItemShipGroupQty(explodedItem,BigDecimal.ONE,thisIndex);           nextItemSeq++;         }       }  catch (      CartItemModifyException e) {         Debug.logError(e,\"Problem exploding (unitizing) item! Item not exploded.\",module);       }     }   } } "
"public static int compareBytes(byte[] b1,int s1,int l1,byte[] b2,int s2,int l2){   return WritableComparator.compareBytes(b1,s1,l1,b2,s2,l2); } "
"@Deprecated protected boolean isRequired(AnnotationIntrospector intr){   return _metadata.isRequired(); } "
"public HeartbeatInfo(HeartbeatInfo other){   __isset_bit_vector.clear();   __isset_bit_vector.or(other.__isset_bit_vector);   if (other.isSetAppkey()) {     this.appkey=other.appkey;   }   this.sendTime=other.sendTime;   if (other.isSetLoadInfo()) {     this.loadInfo=new LoadInfo(other.loadInfo);   }   this.status=other.status; } "
"private FileUtils(){ } "
"private void initConnectivity(){   if (!isConnectivityLayoutOverridden()) {     if (connectivityText == null) {       connectivityText=(TextView)connectivityView.findViewById(R.id.connectivity_text);     }   }   if (mReceiver == null) {     mReceiver=new NetworkReceiver(this);     mContext.registerReceiver(mReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));   } } "
"public static void onSimpleFinishTalk(NpcAI2 npcAI,Creature creature){   Npc owner=npcAI.getOwner();   if (owner.isTargeting(creature.getObjectId()) && npcAI.setSubStateIfNot(AISubState.NONE)) {     owner.setTarget(null);   } } "
"public boolean unhideIsApplicable(){   try {     if (getSelectedColumns().size() == 1 && getSelectedAttributes().size() == 0) {       int which=0;       if (which < dataGrid.getAttributesOrder().size()) {         String next=dataGrid.getAttributesOrder().get(which);         if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next))         return true;       }       return false;     }     for (    String attribute : getSelectedAttributes()) {       int which=dataGrid.getAttributesOrder().indexOf(attribute) - 1;       if (which >= 0) {         String next=dataGrid.getAttributesOrder().get(which);         if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {           return true;         }       }       which=dataGrid.getAttributesOrder().indexOf(attribute) + 1;       if (which > 0 && which < dataGrid.getAttributesOrder().size()) {         String next=dataGrid.getAttributesOrder().get(which);         if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {           return true;         }       }     }   }  catch (  Exception ex) {     if (Platform.isFxApplicationThread())     Basic.caught(ex);   }   return false; } "
"public static LocalResourceStatus fromBytes(byte[] bytes) throws SVNException {   return ((bytes != null) && (bytes.length > 0)) ? new LocalResourceStatus(bytes) : null; } "
"@Override public final void run(){   try {     if (isValid()) {       runImpl();     }   }  catch (  Throwable e) {     String name=getConnection().getAccount().getName();     if (name == null) {       name=getConnection().getIP();     }     log.error(\"Error handling client (\" + name + \") message :\"+ this,e);   } } "
"public NewsfeedGetQuery(VkApiClient client,UserActor actor){   super(client,\"newsfeed.get\",GetResponse.class);   accessToken(actor.getAccessToken()); } "
"@SuppressWarnings(\"unchecked\") public JavaRDD<MapWritable> readDataES() throws IOException, PIRException {   logger.info(\"Reading data \");   JavaRDD<MapWritable> jsonRDD;   Job job=Job.getInstance();   String jobName=\"pirSpark_ES_\" + esQuery + \"_\"+ System.currentTimeMillis();   job.setJobName(jobName);   job.getConfiguration().set(\"es.nodes\",SystemConfiguration.getProperty(\"es.nodes\"));   job.getConfiguration().set(\"es.port\",SystemConfiguration.getProperty(\"es.port\"));   job.getConfiguration().set(\"es.resource\",esResource);   job.getConfiguration().set(\"es.query\",esQuery);   jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),EsInputFormat.class,Text.class,MapWritable.class).values().coalesce(numDataPartitions);   if (qSchema.getFilter() != null) {     return jsonRDD.filter(new FilterData(accum,bVars));   }  else {     logger.info(\"qSchema.getFilter() is null\");     return jsonRDD;   } } "
"@Override public List<CentroidCluster<T>> cluster(final Collection<T> points) throws MathIllegalArgumentException, MathIllegalStateException {   MathUtils.checkNotNull(points);   if (points.size() < k) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,points.size(),k);   }   List<CentroidCluster<T>> clusters=chooseInitialCenters(points);   int[] assignments=new int[points.size()];   assignPointsToClusters(clusters,points,assignments);   final int max=(maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;   for (int count=0; count < max; count++) {     boolean emptyCluster=false;     List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>();     for (    final CentroidCluster<T> cluster : clusters) {       final Clusterable newCenter;       if (cluster.getPoints().isEmpty()) { switch (emptyStrategy) { case LARGEST_VARIANCE:           newCenter=getPointFromLargestVarianceCluster(clusters);         break; case LARGEST_POINTS_NUMBER:       newCenter=getPointFromLargestNumberCluster(clusters);     break; case FARTHEST_POINT:   newCenter=getFarthestPoint(clusters); break; default : throw new MathIllegalStateException(LocalizedClusteringFormats.EMPTY_CLUSTER_IN_K_MEANS); } emptyCluster=true; }  else { newCenter=centroidOf(cluster.getPoints(),cluster.getCenter().getPoint().length); } newClusters.add(new CentroidCluster<T>(newCenter)); } int changes=assignPointsToClusters(newClusters,points,assignments); clusters=newClusters; if (changes == 0 && !emptyCluster) { return clusters; } } return clusters; } "
"private void populateConnectionComboBox(){   connectionComboBox.removeAllItems();   if (geoServerConnectionManager != null) {     List<GeoServerConnection> connectionList=geoServerConnectionManager.getConnectionList();     for (    GeoServerConnection connection : connectionList) {       connectionComboBox.addItem(connection.getConnectionName());       connectionMap.put(connection.getConnectionName(),connection);     }   } } "
"@Override public void onMessageReceived(RemoteMessage remoteMessage){   FCMManager.getInstance(getApplicationContext()).onMessage(remoteMessage); } "
"public float[] generateTransformedValuesLine(ILineDataSet data,float phaseX,float phaseY,int from,int to){   final int count=(int)Math.ceil((to - from) * phaseX) * 2;   float[] valuePoints=new float[count];   for (int j=0; j < count; j+=2) {     Entry e=data.getEntryForIndex(j / 2 + from);     if (e != null) {       valuePoints[j]=e.getXIndex();       valuePoints[j + 1]=e.getVal() * phaseY;     }   }   getValueToPixelMatrix().mapPoints(valuePoints);   return valuePoints; } "
"public void requestAutoFocus(Handler handler,int message){   if (camera != null && previewing) {     autoFocusCallback.setHandler(handler,message);     camera.autoFocus(autoFocusCallback);   } } "
"@Override public void splitNode(){   return; } "
"public final boolean isFinished(){   return mScrollerX.mFinished && mScrollerY.mFinished; } "
"public boolean isCritical(){   return false; } "
"public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected){   StringBuffer sb=new StringBuffer();   String sConnector;   boolean bDistroGraph=gTree instanceof DistributionGraph;   if (!bDirected) {     sb.append(\"graph {\\n\");     sConnector=\"--\";   }  else {     sb.append(\"digraph {\\n\");     sConnector=\"->\";   }   Iterator iIter=gTree.getEdgeSet().iterator();   while (iIter.hasNext()) {     Edge e=(Edge)iIter.next();     String sA=\"_\" + e.getVertexA().toString().replaceAll(\"\\\\W\",\"_\");     String sB=\"_\" + e.getVertexB().toString().replaceAll(\"\\\\W\",\"_\");     String sLabel=\"\";     if (e instanceof WeightedEdge) {       sLabel+=String.format(\"%4.2f\",((WeightedEdge)e).getWeight());     }     if (bDistroGraph) {       Distribution dTmp;       if ((dTmp=(Distribution)((DistributionGraph)gTree).EdgeDistros.get(e)) != null)       sLabel+=\" - Distro: \" + dTmp.toString();     }     if (e instanceof WeightedEdge)     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \" [label=\\\"\"+ sLabel.replaceAll(\"\\\\s+\",\" \")+ \"\\\"]\\n\");  else     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \"\\n\");     sb.append(\"\\t\" + sA + \" [label=\\\"\"+ sA+ \"\\\"] \"+ \"\\n\");   }   sb.append(\"}\");   return sb.toString(); } "
"public static User load(String name,String password){   password=encrypt(password);   log.debug(\"name=\" + name + \", passwd=\"+ password);   return Helper.load(W.create(\"name\",name).and(\"password\",password).and(\"deleted\",1,W.OP_NEQ),User.class); } "
"private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){   int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];   float centerJ=centerFromEnd(stateCount,j);   float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);   if (!Float.isNaN(centerI)) {     float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;     for (    AlignmentPattern center : possibleCenters) {       if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {         return center.combineEstimate(centerI,centerJ,estimatedModuleSize);       }     }     AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);     possibleCenters.add(point);     if (resultPointCallback != null) {       resultPointCallback.foundPossibleResultPoint(point);     }   }   return null; } "
"private void stopStateTag(final Long stateTagId,final Timestamp pTimestamp,final String message){   controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,pTimestamp); } "
"public void drawResultBitmap(Bitmap barcode){   resultBitmap=barcode;   invalidate(); } "
"public static boolean isPercentage(String value){   if (!isInteger(value)) {     return false;   }   Integer integer=Integer.valueOf(value);   return integer >= 0 && integer <= 100; } "
"public AudioReorderQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"private void processJournal() throws IOException {   deleteIfExists(journalFileTmp);   for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {     Entry entry=i.next();     if (entry.currentEditor == null) {       for (int t=0; t < valueCount; t++) {         size+=entry.lengths[t];       }     }  else {       entry.currentEditor=null;       for (int t=0; t < valueCount; t++) {         deleteIfExists(entry.getCleanFile(t));         deleteIfExists(entry.getDirtyFile(t));       }       i.remove();     }   } } "
"protected ZebraRolloverStrategy(final int minIndex,final int maxIndex,final boolean useMax,final int compressionLevel,final StrSubstitutor subst){   this.minIndex=minIndex;   this.maxIndex=maxIndex;   this.useMax=useMax;   this.compressionLevel=compressionLevel;   this.subst=subst; } "
"public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){   this.statusCode=statusCode;   this.data=data;   this.headers=headers;   this.notModified=notModified;   this.networkTimeMs=networkTimeMs; } "
"public PointValuePair(final double[] point,final double value,final boolean copyArray){   super(copyArray ? ((point == null) ? null : point.clone()) : point,value); } "
"public void clearHeaderCache(){   mHeaderCache.clear(); } "
"public GroupsDeleteLinkQuery deleteLink(UserActor actor,int groupId,int linkId){   return new GroupsDeleteLinkQuery(getClient(),actor,groupId,linkId); } "
"public byte[] hash(){   return md5.Final(); } "
"public static Configuration createRuleTag(){   Configuration configuration=new Configuration();   RuleTag ruleTag=RuleTag.create(\"RuleTag\",Integer.class,\"(#1000 < 0)|(#1000 > 200)[1],true[0]\").id(1500L).build();   configuration.addEntity(ruleTag);   return configuration; } "
"@Override public void attributeSelection(String field){   if (this.spinner != null) {     this.spinner.setEnabled(field == null);   } } "
"public void openAll(){   ArrayList<ItemIndex> lvl1Sections=getItemIndices(ItemType.LVL1_SECTION);   for (  ItemIndex itemIndex : lvl1Sections) {     openCloseLvl1Section(itemIndex,true);   }   ArrayList<ItemIndex> lvl2Sections=getItemIndices(ItemType.LVL2_SECTION);   for (  ItemIndex itemIndex : lvl2Sections) {     openCloseLvl2Section(itemIndex,true);   }   ArrayList<ItemIndex> lvl3Sections=getItemIndices(ItemType.LVL3_SECTION);   for (  ItemIndex itemIndex : lvl3Sections) {     openCloseLvl3Section(itemIndex,true);   } } "
"public boolean isEmpty(){   boolean parametersEmpty=true;   if (parameters != null)   for (  Set<AccessPathTuple> paramSet : this.parameters)   if (paramSet != null && !paramSet.isEmpty()) {     parametersEmpty=false;     break;   }   return (baseObjects == null || baseObjects.isEmpty()) && parametersEmpty && (returnValues == null || returnValues.isEmpty()); } "
"@Override public void writeExternal(ObjectOutput out) throws IOException {   PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();   writeExternal(out,version); } "
"public WheelVerticalView(Context context,AttributeSet attrs,int defStyle){   super(context,attrs,defStyle); } "
"@Override public void updateSymbol(TextSymbolizer textSymbolizer){ } "
"public AnnotationAttr(String type,ArrayList elems){   this.type=new AsciiCP(type);   this.list=elems; } "
"public TypeDecl lcta(TypeDecl X,TypeDecl Y){   if (!X.isWildcard() && !Y.isWildcard()) {     TypeDecl U=X;     TypeDecl V=Y;     return U == V ? U : lub(U,V).asWildcardExtends();   }  else   if (!X.isWildcard() && Y instanceof WildcardExtendsType) {     TypeDecl U=X;     TypeDecl V=((WildcardExtendsType)Y).getAccess().type();     return lub(U,V).asWildcardExtends();   }  else   if (!X.isWildcard() && Y instanceof WildcardSuperType) {     TypeDecl U=X;     TypeDecl V=((WildcardSuperType)Y).getAccess().type();     ArrayList bounds=new ArrayList();     bounds.add(U);     bounds.add(V);     return GLBTypeFactory.glb(bounds).asWildcardSuper();   }  else   if (X instanceof WildcardExtendsType && Y instanceof WildcardExtendsType) {     TypeDecl U=((WildcardExtendsType)X).getAccess().type();     TypeDecl V=((WildcardExtendsType)Y).getAccess().type();     return lub(U,V).asWildcardExtends();   }  else   if (X instanceof WildcardExtendsType && Y instanceof WildcardSuperType) {     TypeDecl U=((WildcardExtendsType)X).getAccess().type();     TypeDecl V=((WildcardSuperType)Y).getAccess().type();     return U == V ? U : U.typeWildcard();   }  else   if (X instanceof WildcardSuperType && Y instanceof WildcardSuperType) {     TypeDecl U=((WildcardSuperType)X).getAccess().type();     TypeDecl V=((WildcardSuperType)Y).getAccess().type();     ArrayList bounds=new ArrayList();     bounds.add(U);     bounds.add(V);     return GLBTypeFactory.glb(bounds).asWildcardSuper();   }  else   throw new Error(\"lcta not defined for (\" + X.getClass().getName() + \", \"+ Y.getClass().getName()); } "
"public static double pareto(double alpha){   if (!(alpha > 0.0))   throw new IllegalArgumentException(\"Shape parameter alpha must be positive\");   return Math.pow(1 - uniform(),-1.0 / alpha) - 1.0; } "
"private String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,Map<String,Object> extraParams,String anchor,Map<String,? extends Object> context){   StringBuilder sb=new StringBuilder();   Iterator<ModelForm.UpdateArea> updateAreaIter=updateAreas.iterator();   while (updateAreaIter.hasNext()) {     ModelForm.UpdateArea updateArea=updateAreaIter.next();     sb.append(updateArea.getAreaId()).append(\",\");     String ajaxTarget=updateArea.getAreaTarget(context);     String urlPath=UtilHttp.removeQueryStringFromTarget(ajaxTarget);     sb.append(this.rh.makeLink(this.request,this.response,urlPath)).append(\",\");     String queryString=UtilHttp.getQueryStringFromTarget(ajaxTarget).replace(\"?\",\"\");     Map<String,Object> parameters=UtilHttp.getQueryStringOnlyParameterMap(queryString);     Map<String,Object> ctx=UtilGenerics.checkMap(context);     Map<String,Object> updateParams=UtilGenerics.checkMap(updateArea.getParameterMap(ctx));     parameters.putAll(updateParams);     UtilHttp.canonicalizeParameterMap(parameters);     parameters.putAll(extraParams);     Iterator<Map.Entry<String,Object>> paramIter=parameters.entrySet().iterator();     while (paramIter.hasNext()) {       Map.Entry<String,Object> entry=paramIter.next();       sb.append(entry.getKey()).append(\"=\").append(entry.getValue());       if (paramIter.hasNext()) {         sb.append(\"&\");       }     }     if (anchor != null) {       sb.append(\"#\").append(anchor);     }     if (updateAreaIter.hasNext()) {       sb.append(\",\");     }   }   Locale locale=UtilMisc.ensureLocale(context.get(\"locale\"));   return FlexibleStringExpander.expandString(sb.toString(),context,locale); } "
"@AssistedInject public PublishPage(@Assisted String path){   this.path=path; } "
"private static void handlePhasePlugin(final PhasePluginDescription pluginDescription){   try {     Class<?> clazz=Class.forName(pluginDescription.getClassName());     Object instance=clazz.newInstance();     if (!(instance instanceof SootPhasePlugin)) {       throw new RuntimeException(\"The plugin class '\" + pluginDescription.getClassName() + \"' does not implement SootPhasePlugin.\");     }     final SootPhasePlugin phasePlugin=(SootPhasePlugin)instance;     phasePlugin.setDescription(pluginDescription);     final String packName=getPackName(pluginDescription.getPhaseName());     Transform transform=new Transform(pluginDescription.getPhaseName(),phasePlugin.getTransformer());     transform.setDeclaredOptions(concat(appendEnabled(phasePlugin.getDeclaredOptions())));     transform.setDefaultOptions(concat(phasePlugin.getDefaultOptions()));     PackManager.v().getPack(packName).add(transform);   }  catch (  final ClassNotFoundException e) {     throw new RuntimeException(\"Failed to load plugin class for \" + pluginDescription + \".\",e);   } catch (  final InstantiationException e) {     throw new RuntimeException(\"Failed to instanciate plugin class for \" + pluginDescription + \".\",e);   } catch (  final IllegalAccessException e) {     throw new RuntimeException(\"Not allowed to access plugin class for \" + pluginDescription + \".\",e);   } } "
"void write(BlockId blk,IoBuffer buffer){   try {     IoChannel fileChannel=getFileChannel(blk.fileName());     buffer.rewind();     fileChannel.write(buffer,blk.number() * BLOCK_SIZE);   }  catch (  IOException e) {     e.printStackTrace();     throw new RuntimeException(\"cannot write block\" + blk);   } } "
"@Override public boolean containsSymbol(String symbol){   int bucket=hash(symbol) % fTableSize;   int length=symbol.length();   OUTER:   for (SREntry entry=fBuckets[bucket]; entry != null; entry=entry.next) {     SREntryData data=(SREntryData)entry.get();     if (data == null) {       continue;     }     if (length == data.characters.length) {       for (int i=0; i < length; i++) {         if (symbol.charAt(i) != data.characters[i]) {           continue OUTER;         }       }       return true;     }   }   return false; } "
"public static <T>HashSet<T> hashSet(int initialCapacity){   return new HashSet<T>(initialCapacity); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_ME_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200453,skilltarget); } "
"@Override protected void checkFeature(String featureId) throws XMLConfigurationException {   if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {     final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();     if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {       return;     }     if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {       short type=XMLConfigurationException.NOT_SUPPORTED;       throw new XMLConfigurationException(type,featureId);     }     if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {       short type=XMLConfigurationException.NOT_SUPPORTED;       throw new XMLConfigurationException(type,featureId);     }     if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {       return;     }     if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {       return;     }     if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {       short type=XMLConfigurationException.NOT_SUPPORTED;       throw new XMLConfigurationException(type,featureId);     }     if (suffixLength == Constants.PARSER_SETTINGS.length() && featureId.endsWith(Constants.PARSER_SETTINGS)) {       short type=XMLConfigurationException.NOT_SUPPORTED;       throw new XMLConfigurationException(type,featureId);     }   }   super.checkFeature(featureId); } "
"@Override public void postEvent(EventLogEvent event){   String subject=emailTextProcessor.getSubject(event);   String msg=emailTextProcessor.getMessage(event);   Set<String> addressees=emailTextProcessor.getAddressees(event);   emailService.doSend(subject,msg,addressees.toArray(new String[addressees.size()])); } "
"public String toString(String enc) throws UnsupportedEncodingException {   return new String(toByteArray(),enc); } "
"private void testClass(FilterConfigInterface objUnderTest,int noOFExpectedFilters){   assertNotNull(objUnderTest.getFilterConfiguration());   assertNotNull(objUnderTest.createFilter());   assertNull(objUnderTest.createFilter(null));   LogicFilterImpl filter=(LogicFilterImpl)objUnderTest.createLogicFilter(null);   assertEquals(0,filter.getChildren().size());   List<Filter> filterList=new ArrayList<Filter>();   try {     filterList.add(CQL.toFilter(\"filter1 >= 5\"));   }  catch (  CQLException e) {     e.printStackTrace();     fail();   }   filter=(LogicFilterImpl)objUnderTest.createLogicFilter(filterList);   if (noOFExpectedFilters > 1) {     assertEquals(0,filter.getChildren().size());     try {       filterList.add(CQL.toFilter(\"filter2 >= 5\"));     }  catch (    CQLException e) {       e.printStackTrace();       fail();     }     filter=(LogicFilterImpl)objUnderTest.createLogicFilter(filterList);   }   assertEquals(noOFExpectedFilters,filter.getChildren().size());   System.out.println(filter.toString()); } "
"public static Having buildMetricHaving(LogicalMetric metric,Set<ApiHaving> havings){   LOG.trace(\"Building metric having using metric: {} \\n\\n and set of queries: {}\",metric,havings);   List<Having> orHavings=havings.stream().map(null).collect(Collectors.toList());   Having newHaving=orHavings.size() == 1 ? orHavings.get(0) : new AndHaving(orHavings);   LOG.trace(\"Filter: {}\",newHaving);   return newHaving; } "
"@Override public void onCreate(Bundle savedInstanceState){   super.onCreate(savedInstanceState);   TraceEvent.begin(\"ChromeLauncherActivity\");   IntentHandler.addTimestampToIntent(getIntent());   CommandLineInitUtil.initCommandLine(this,ChromeApplication.COMMAND_LINE_FILE);   PartnerBrowserCustomizations.initializeAsync(getApplicationContext(),PARTNER_BROWSER_CUSTOMIZATIONS_TIMEOUT_MS);   mIsInMultiInstanceMode=MultiWindowUtils.getInstance().shouldRunInMultiInstanceMode(this);   mIntentHandler=new IntentHandler(this,getPackageName());   maybePerformMigrationTasks();   mIsCustomTabIntent=isCustomTabIntent();   int tabId=IntentUtils.safeGetIntExtra(getIntent(),TabOpenType.BRING_TAB_TO_FRONT.name(),Tab.INVALID_TAB_ID);   if (WebappLauncherActivity.bringWebappToFront(tabId)) {     ApiCompatibilityUtils.finishAndRemoveTask(this);     return;   }   if (getIntent().hasCategory(Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCES)) {     NotificationUIManager.launchNotificationPreferences(this,getIntent());     finish();     return;   }   if (!mIsCustomTabIntent && !FeatureUtilities.isDocumentMode(this)) {     launchTabbedMode();     finish();     return;   }   if (TextUtils.equals(getIntent().getAction(),ACTION_CLOSE_ALL_INCOGNITO)) {     ChromeApplication.getDocumentTabModelSelector().getModel(true).closeAllTabs();     ApiCompatibilityUtils.finishAndRemoveTask(this);     return;   }   if (launchFirstRunExperience())   return;   if (mIsCustomTabIntent) {     launchCustomTabActivity();     finish();     return;   }   handleDocumentActivityIntent();   if (!mIsFinishDelayed)   ApiCompatibilityUtils.finishAndRemoveTask(this); } "
"void cancelPrerender(IBinder session){   ThreadUtils.assertOnUiThread();   if (mPrerender != null && (session == null || session.equals(mPrerender.mSession))) {     mExternalPrerenderHandler.cancelCurrentPrerender();     mPrerender.mWebContents.destroy();     mPrerender=null;   } } "
"public MessagesGetHistoryQuery userId(String value){   return unsafeParam(\"user_id\",value); } "
"private boolean matchStrings(String pattern,String str){   char[] patArr=pattern.toCharArray();   char[] strArr=str.toCharArray();   int patIdxStart=0;   int patIdxEnd=patArr.length - 1;   int strIdxStart=0;   int strIdxEnd=strArr.length - 1;   char ch;   boolean containsStar=false;   for (  char aPatArr : patArr) {     if (aPatArr == '*') {       containsStar=true;       break;     }   }   if (!containsStar) {     if (patIdxEnd != strIdxEnd) {       return false;     }     for (int i=0; i <= patIdxEnd; i++) {       ch=patArr[i];       if (ch != '?') {         if (ch != strArr[i]) {           return false;         }       }     }     return true;   }   if (patIdxEnd == 0) {     return true;   }   while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {     if (ch != '?') {       if (ch != strArr[strIdxStart]) {         return false;       }     }     patIdxStart++;     strIdxStart++;   }   if (strIdxStart > strIdxEnd) {     for (int i=patIdxStart; i <= patIdxEnd; i++) {       if (patArr[i] != '*') {         return false;       }     }     return true;   }   while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {     if (ch != '?') {       if (ch != strArr[strIdxEnd]) {         return false;       }     }     patIdxEnd--;     strIdxEnd--;   }   if (strIdxStart > strIdxEnd) {     for (int i=patIdxStart; i <= patIdxEnd; i++) {       if (patArr[i] != '*') {         return false;       }     }     return true;   }   while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {     int patIdxTmp=-1;     for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {       if (patArr[i] == '*') {         patIdxTmp=i;         break;       }     }     if (patIdxTmp == patIdxStart + 1) {       patIdxStart++;       continue;     }     int patLength=(patIdxTmp - patIdxStart - 1);     int strLength=(strIdxEnd - strIdxStart + 1);     int foundIdx=-1;     strLoop:     for (int i=0; i <= strLength - patLength; i++) {       for (int j=0; j < patLength; j++) {         ch=patArr[patIdxStart + j + 1];         if (ch != '?') {           if (ch != strArr[strIdxStart + i + j]) {             continue strLoop;           }         }       }       foundIdx=strIdxStart + i;       break;     }     if (foundIdx == -1) {       return false;     }     patIdxStart=patIdxTmp;     strIdxStart=foundIdx + patLength;   }   for (int i=patIdxStart; i <= patIdxEnd; i++) {     if (patArr[i] != '*') {       return false;     }   }   return true; } "
"@Override public double cost(Target target,Unit unit){   if (target instanceof HalfPhoneTarget)   return tcfForHalfphones.cost(target,unit);   if (!(target instanceof DiphoneTarget))   throw new IllegalArgumentException(\"This target cost function can only be called for diphone and half-phone targets!\");   if (!(unit instanceof DiphoneUnit))   throw new IllegalArgumentException(\"Diphone targets need diphone units!\");   DiphoneTarget dt=(DiphoneTarget)target;   DiphoneUnit du=(DiphoneUnit)unit;   return tcfForHalfphones.cost(dt.left,du.left) + tcfForHalfphones.cost(dt.right,du.right); } "
"public int toggle(long animationDurationMS){   state=state == FLAG_STATE_PLUS ? FLAG_STATE_CHECK : FLAG_STATE_PLUS;   percent=1 - percent;   ValueAnimator animator=ValueAnimator.ofFloat(percent,1);   animator.setInterpolator(new AccelerateDecelerateInterpolator());   animator.setDuration(animationDurationMS);   animator.addUpdateListener(animationListener);   animator.start();   return state; } "
"@Override public void delete(Constant key,RecordId dataRecordId,boolean doLogicalLogging){   if (tx.isReadOnly())   throw new UnsupportedOperationException();   search(ConstantRange.newInstance(key),DELETE);   if (doLogicalLogging)   tx.recoveryMgr().logLogicalStart();   leaf.delete(dataRecordId);   if (doLogicalLogging)   tx.recoveryMgr().logIndexDeletionEnd(ii.tableName(),ii.fieldName(),key,dataRecordId.block().number(),dataRecordId.id()); } "
"public Vector midpoint(Vector other){   x=(x + other.x) / 2;   y=(y + other.y) / 2;   z=(z + other.z) / 2;   return this; } "
"public Bundler putDouble(String key,double value){   bundle.putDouble(key,value);   return this; } "
"private static BufferedImage createImage(String word){   BufferedImage bImg=null;   try {     bImg=new BufferedImage(IMAGE_WIDTH,IMAGE_HEIGHT,BufferedImage.TYPE_INT_ARGB_PRE);     Graphics2D g2=bImg.createGraphics();     g2.setColor(Color.BLACK);     g2.fillRect(0,0,IMAGE_WIDTH,IMAGE_HEIGHT);     Font font=new Font(FONT_FAMILY_NAME,Font.BOLD,TEXT_SIZE);     g2.setFont(font);     g2.setColor(Color.WHITE);     g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);     char[] chars=word.toCharArray();     int x=10;     int y=IMAGE_HEIGHT / 2 + TEXT_SIZE / 2;     for (int i=0; i < chars.length; i++) {       char ch=chars[i];       g2.drawString(String.valueOf(ch),x + font.getSize() * i,y + (int)Math.pow(-1,i) * (TEXT_SIZE / 6));     }     g2.dispose();   }  catch (  Exception e) {     e.printStackTrace();     bImg=null;   }   return bImg; } "
"public void addSample(String sample,int sampleSize,BlastMode mode,int srcId,Map<String,Map<Integer,Integer[]>> sourceClassification2class2counts){   if (!Arrays.asList(this.getSampleNames()).contains(sample)) {     this.sampleSizes.add(sampleSize);     this.sampleNames.add(sample);     this.sampleUIds.add(System.currentTimeMillis());     this.blastModes.add(mode);     int tarId=Basic.getIndex(sample,this.sampleNames);     for (    String classification : sourceClassification2class2counts.keySet()) {       Map<Integer,Integer[]> sourceClass2counts=sourceClassification2class2counts.get(classification);       Map<Integer,Integer[]> targetClass2counts=this.classification2class2counts.get(classification);       if (targetClass2counts == null) {         targetClass2counts=new HashMap<>();         this.classification2class2counts.put(classification,targetClass2counts);       }       for (      Integer classId : sourceClass2counts.keySet()) {         Integer[] sourceCounts=sourceClass2counts.get(classId);         if (sourceCounts != null && srcId < sourceCounts.length && sourceCounts[srcId] != null) {           Integer[] targetCounts=targetClass2counts.get(classId);           Integer[] newCounts=new Integer[tarId + 1];           if (targetCounts != null) {             System.arraycopy(targetCounts,0,newCounts,0,targetCounts.length);           }           newCounts[tarId]=sourceCounts[srcId];           targetClass2counts.put(classId,newCounts);         }       }     }     if (this.totalReads >= 0)     this.totalReads+=sampleSize;  else     this.totalReads=sampleSize;   } } "
"public boolean processActionRequired(){   return changeEvent != null; } "
"@Override public void run(){   long time=0;   while (!isInterrupted()) {     try {       long nextTime=calcNextTime();       Thread.sleep(nextTime - time);       time=nextTime;       for (int i=0; i < _groups.length; i++) {         WatchdogGroup group=_groups[i];         if (group._doTimeout)         group.timeout();       }     }  catch (    InterruptedException ie) {       if (_logger.isLoggable(Level.FINEST)) {         _logger.log(Level.FINEST,this.getName() + \" interrupted.\",ie);       }       interrupt();       break;     } catch (    Throwable t) {       if (_logger.isLoggable(Level.SEVERE)) {         _logger.log(Level.SEVERE,\"Unexpected exception in watchdog thread.\",t);       }     }   } } "
"public int allocPage(){   byte[] masterBytes=this.masterPage.readBytes();   IntBuffer ib=ByteBuffer.wrap(masterBytes).asIntBuffer();   int[] pageCounts=new int[ib.capacity()];   ib.get(pageCounts);   Page headerPage=null;   int headerIndex=-1;   for (int i=0; i < numHeaderPages; i++) {     if (pageCounts[i] < Page.pageSize) {       headerPage=getHeadPage(i);       headerIndex=i;       break;     }   }   if (headerPage == null) {     throw new PageException(\"No free Pages Available\");   }   byte[] headerBytes=headerPage.readBytes();   int pageIndex=-1;   for (int i=0; i < Page.pageSize; i++) {     if (headerBytes[i] == 0) {       pageIndex=i;       break;     }   }   if (pageIndex == -1) {     throw new PageException(\"Header page should have free page but doesnt\");   }   int newCount=pageCounts[headerIndex] + 1;   byte[] newCountBytes=ByteBuffer.allocate(4).putInt(newCount).array();   this.masterPage.writeBytes(headerIndex * 4,4,newCountBytes);   headerPage.writeByte(pageIndex,(byte)1);   if (this.durable) {     this.masterPage.flush();     headerPage.flush();   }   int pageNum=headerIndex * Page.pageSize + pageIndex;   fetchPage(pageNum).wipe();   this.numPages+=1;   return pageNum; } "
"public Response writeFloat(float b){   return writeString(Float.toString(b)); } "
"public double[] nextSample(){   double upper_boundary=0;   double value=rnd.nextDouble();   for (int i=0; i < components.length; i++) {     upper_boundary+=components[i].getComponentWeight();     if (value < upper_boundary) {       return components[i].nextSample();     }   }   if (components.length - 1 >= 0)   return components[components.length - 1].nextSample();  else   throw new IllegalStateException(\"gaussian components of this mixture not yet defined;\"); } "
"private void updateTexts(DocumentEvent e){   Document doc=e.getDocument();   if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {     String projectName=projectNameTextField.getText();     String projectFolder=projectLocationTextField.getText();     createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);   }   panel.fireChangeEvent(); } "
"@Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException { } "
"public static int evaluateTransitionColor(float fraction,int startValue,int endValue){   int startInt=startValue;   int startA=(startInt >> 24) & 0xff;   int startR=(startInt >> 16) & 0xff;   int startG=(startInt >> 8) & 0xff;   int startB=startInt & 0xff;   int endInt=endValue;   int endA=(endInt >> 24) & 0xff;   int endR=(endInt >> 16) & 0xff;   int endG=(endInt >> 8) & 0xff;   int endB=endInt & 0xff;   return ((startA + (int)(fraction * (endA - startA))) << 24) | ((startR + (int)(fraction * (endR - startR))) << 16) | ((startG + (int)(fraction * (endG - startG))) << 8)| ((startB + (int)(fraction * (endB - startB)))); } "
"public boolean equals(Object obj){   return (obj instanceof Table) && dataMap.equals(obj); } "
"void addRow(int rowIndex,Table sourceTable){   for (int i=0; i < columnCount(); i++) {     Column column=column(i);     ColumnType type=column.type(); switch (type) { case FLOAT:       FloatColumn floatColumn=(FloatColumn)column;     floatColumn.add(sourceTable.floatColumn(i).get(rowIndex));   break; case INTEGER: IntColumn intColumn=(IntColumn)column; intColumn.add(sourceTable.intColumn(i).get(rowIndex)); break; case SHORT_INT: ShortColumn shortColumn=(ShortColumn)column; shortColumn.add(sourceTable.shortColumn(i).get(rowIndex)); break; case LONG_INT: LongColumn longColumn=(LongColumn)column; longColumn.add(sourceTable.longColumn(i).get(rowIndex)); break; case BOOLEAN: BooleanColumn booleanColumn=(BooleanColumn)column; booleanColumn.add(sourceTable.booleanColumn(i).get(rowIndex)); break; case LOCAL_DATE: DateColumn localDateColumn=(DateColumn)column; localDateColumn.add(sourceTable.dateColumn(i).getInt(rowIndex)); break; case LOCAL_TIME: TimeColumn timeColumn=(TimeColumn)column; timeColumn.add(sourceTable.timeColumn(i).getInt(rowIndex)); break; case LOCAL_DATE_TIME: DateTimeColumn localDateTimeColumn=(DateTimeColumn)column; localDateTimeColumn.add(sourceTable.dateTimeColumn(i).getLong(rowIndex)); break; case CATEGORY: CategoryColumn categoryColumn=(CategoryColumn)column; categoryColumn.add(sourceTable.categoryColumn(i).get(rowIndex)); break; default : throw new RuntimeException(\"Unhandled column type updating columns\"); } } } "
"public ArrayEnumeration(Object[] array){   this.array=array; } "
"public boolean freePage(Page p){   if (this.durable) {     p.flush();   }   int pageNum=p.getPageNum();   int headPageIndex=pageNum / Page.pageSize;   int dataPageIndex=pageNum % Page.pageSize;   Page headPage=getHeadPage(headPageIndex);   if (headPage.readByte(dataPageIndex) == 0) {     return false;   }   headPage.writeByte(dataPageIndex,(byte)0);   if (this.durable) {     headPage.flush();   }   byte[] countBytes=masterPage.readBytes(4 * headPageIndex,4);   int oldCount=ByteBuffer.wrap(countBytes).getInt();   int newCount=oldCount - 1;   byte[] newCountBytes=ByteBuffer.allocate(4).putInt(newCount).array();   masterPage.writeBytes(headPageIndex * 4,4,newCountBytes);   if (this.durable) {     masterPage.flush();   } synchronized (PageAllocator.class) {     if (pageLRU.containsKey(translatePageNum(pageNum))) {       pageLRU.remove(translatePageNum(pageNum));     }   }   this.numPages-=1;   return true; } "
"@Override public void onReset(){   if (this.status == AccelListener.RUNNING) {     this.stop();   } } "
"private static Dfp computePi(final Dfp one,final Dfp two,final Dfp three){   Dfp sqrt2=two.sqrt();   Dfp yk=sqrt2.subtract(one);   Dfp four=two.add(two);   Dfp two2kp3=two;   Dfp ak=two.multiply(three.subtract(two.multiply(sqrt2)));   for (int i=1; i < 20; i++) {     final Dfp ykM1=yk;     final Dfp y2=yk.multiply(yk);     final Dfp oneMinusY4=one.subtract(y2.multiply(y2));     final Dfp s=oneMinusY4.sqrt().sqrt();     yk=one.subtract(s).divide(one.add(s));     two2kp3=two2kp3.multiply(four);     final Dfp p=one.add(yk);     final Dfp p2=p.multiply(p);     ak=ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));     if (yk.equals(ykM1)) {       break;     }   }   return one.divide(ak); } "
"public boolean isCritical(){   return true; } "
"private void initModel(Activity a){   this.collectionsModel=new CollectionsObject(a);   this.loadModel=new LoadObject(LoadObject.LOADING_STATE);   this.scrollModel=new ScrollObject(); } "
"@Override protected void fillUtterance(Utterance utterance,Element sentence){   fillUtterance(utterance,sentence,true,true,false); } "
"public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor){   final int dim=getDimension();   visitor.start(dim,0,dim - 1);   for (int i=0; i < dim; i++) {     setEntry(i,visitor.visit(i,getEntry(i)));   }   return visitor.end(); } "
"public ObjectFactory(){ } "
"protected void shuffleTestAndTrainingSetTogether(){   ArrayList lOverall=new ArrayList(TestFiles.size() + TrainingFiles.size());   lOverall.addAll(TrainingFiles);   lOverall.addAll(TestFiles);   utils.shuffleList(lOverall);   TestFiles.clear();   TrainingFiles.clear();   TestFiles.addAll(lOverall.subList(0,TestFiles.size()));   TrainingFiles.addAll(lOverall.subList(TestFiles.size(),lOverall.size())); } "
"private void copyTo(ByteBuffer buf,OutputStream out) throws IOException {   if (!buf.hasRemaining()) {     return;   }   if (buf.hasArray()) {     out.write(buf.array(),buf.arrayOffset() + buf.position(),buf.remaining());   }  else {     byte[] bytes=new byte[4096];     do {       buf.get(bytes,0,Math.min(bytes.length,buf.remaining()));       out.write(bytes);     }  while (buf.hasRemaining());   } } "
"public static ConfigAspectBase create(Model model){   return new UsageConfigAspect(model); } "
"private ByteOrderMark find(){   for (  ByteOrderMark bom : boms) {     if (matches(bom)) {       return bom;     }   }   return null; } "
"public boolean hasSuperClassAccess(){   return getSuperClassAccessOpt().getNumChild() != 0; } "
"public StorageGetKeysQuery(VkApiClient client,UserActor actor){   super(client,\"storage.getKeys\",Utils.buildParametrizedType(List.class,String.class));   accessToken(actor.getAccessToken()); } "
"public BoolDataType(boolean b){   this.bool=b; } "
"public boolean isNavigationImageEnabled(){   return navigationImageEnabled; } "
"public List<LinkedList<Integer>> shortestPaths(){   Dijkstra dijkstra=new Dijkstra(edges);   List<LinkedList<Integer>> allPaths=dijkstra.shortestPaths();   if (verbose) {     if (allPaths.size() > 16) {       StringBuilder phrase=new StringBuilder();       for (      String syllable : syllables) {         phrase.append(syllable);         phrase.append(' ');       }       System.out.printf(\"This phrase is too ambiguous, giving %d shortest paths!\\n\\t%s\\n\",allPaths.size(),phrase.toString().trim());     }   }   return allPaths; } "
"@Deprecated public void clearDiscCache(){   clearDiskCache(); } "
"public synchronized void close() throws IOException {   if (journalWriter == null) {     return;   }   for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {     if (entry.currentEditor != null) {       entry.currentEditor.abort();     }   }   trimToSize();   trimToFileCount();   journalWriter.close();   journalWriter=null; } "
"public SchemaGrammar parseSchema(XMLInputSource is,XSDDescription desc,Hashtable locationPairs) throws IOException {   fLocationPairs=locationPairs;   fSchemaParser.resetNodePool();   SchemaGrammar grammar=null;   String schemaNamespace=null;   short referType=desc.getContextType();   if (referType != XSDDescription.CONTEXT_PREPARSE) {     if (fHonourAllSchemaLocations && referType == XSDDescription.CONTEXT_IMPORT && isExistingGrammar(desc,fNamespaceGrowth)) {       grammar=fGrammarBucket.getGrammar(desc.getTargetNamespace());     }  else {       grammar=findGrammar(desc,fNamespaceGrowth);     }     if (grammar != null) {       if (!fNamespaceGrowth) {         return grammar;       }  else {         try {           if (grammar.getDocumentLocations().contains(XMLEntityManager.expandSystemId(is.getSystemId(),is.getBaseSystemId(),false))) {             return grammar;           }         }  catch (        MalformedURIException e) {         }       }     }     schemaNamespace=desc.getTargetNamespace();     if (schemaNamespace != null) {       schemaNamespace=fSymbolTable.addSymbol(schemaNamespace);     }   }   prepareForParse();   Element schemaRoot=null;   if (is instanceof DOMInputSource) {     schemaRoot=getSchemaDocument(schemaNamespace,(DOMInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);   }  else   if (is instanceof SAXInputSource) {     schemaRoot=getSchemaDocument(schemaNamespace,(SAXInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);   }  else   if (is instanceof StAXInputSource) {     schemaRoot=getSchemaDocument(schemaNamespace,(StAXInputSource)is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);   }  else   if (is instanceof XSInputSource) {     schemaRoot=getSchemaDocument((XSInputSource)is,desc);   }  else {     schemaRoot=getSchemaDocument(schemaNamespace,is,referType == XSDDescription.CONTEXT_PREPARSE,referType,null);   }   if (schemaRoot == null) {     if (is instanceof XSInputSource) {       return fGrammarBucket.getGrammar(desc.getTargetNamespace());     }     return grammar;   }   if (referType == XSDDescription.CONTEXT_PREPARSE) {     Element schemaElem=schemaRoot;     schemaNamespace=DOMUtil.getAttrValue(schemaElem,SchemaSymbols.ATT_TARGETNAMESPACE);     if (schemaNamespace != null && schemaNamespace.length() > 0) {       schemaNamespace=fSymbolTable.addSymbol(schemaNamespace);       desc.setTargetNamespace(schemaNamespace);     }  else {       schemaNamespace=null;     }     grammar=findGrammar(desc,fNamespaceGrowth);     String schemaId=XMLEntityManager.expandSystemId(is.getSystemId(),is.getBaseSystemId(),false);     if (grammar != null) {       if (!fNamespaceGrowth || (schemaId != null && grammar.getDocumentLocations().contains(schemaId))) {         return grammar;       }     }     XSDKey key=new XSDKey(schemaId,referType,schemaNamespace);     fTraversed.put(key,schemaRoot);     if (schemaId != null) {       fDoc2SystemId.put(schemaRoot,schemaId);     }   }   prepareForTraverse();   fRoot=constructTrees(schemaRoot,is.getSystemId(),desc,grammar != null);   if (fRoot == null) {     return null;   }   buildGlobalNameRegistries();   ArrayList annotationInfo=fValidateAnnotations ? new ArrayList() : null;   traverseSchemas(annotationInfo);   traverseLocalElements();   resolveKeyRefs();   for (int i=fAllTNSs.size() - 1; i >= 0; i--) {     String tns=(String)fAllTNSs.elementAt(i);     Vector ins=(Vector)fImportMap.get(tns);     SchemaGrammar sg=fGrammarBucket.getGrammar(emptyString2Null(tns));     if (sg == null)     continue;     SchemaGrammar isg;     int count=0;     for (int j=0; j < ins.size(); j++) {       isg=fGrammarBucket.getGrammar((String)ins.elementAt(j));       if (isg != null)       ins.setElementAt(isg,count++);     }     ins.setSize(count);     sg.setImportedGrammars(ins);   }   if (fValidateAnnotations && annotationInfo.size() > 0) {     validateAnnotations(annotationInfo);   }   return fGrammarBucket.getGrammar(fRoot.fTargetNamespace); } "
"public ModelSubMenu cloneModelSubMenu(ModelMenu modelMenu,ModelMenuItem parentMenuItem,BuildArgs buildArgs){   return new ModelSubMenu(this,modelMenu,parentMenuItem,buildArgs); } "
"@Override public void attributeSelection(String field){ } "
"private void initLabels(){   CompareConfiguration cc=getCompareConfiguration();   String resourceName=resource.getName();   setTitle(Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\",new Object[]{resourceName}));   cc.setLeftEditable(true);   cc.setRightEditable(false);   String leftLabel=Policy.bind(\"SVNCompareRevisionsInput.workspace\",new Object[]{resourceName});   cc.setLeftLabel(leftLabel);   String rightLabel=Policy.bind(\"SVNCompareRevisionsInput.repository\",new Object[]{resourceName});   cc.setRightLabel(rightLabel); } "
"public static DoubleBuffer createDoubleBuffer(int size){   DoubleBuffer buf=ByteBuffer.allocateDirect(8 * size).order(ByteOrder.nativeOrder()).asDoubleBuffer();   buf.clear();   if (trackDirectMemory) {     trackingHash.put(buf,ref);   }   return buf; } "
"public void addAp(int additionalAp){   dailyAP+=additionalAp;   if (dailyAP < 0) {     dailyAP=0;   }   weeklyAP+=additionalAp;   if (weeklyAP < 0) {     weeklyAP=0;   }   int cappedCount=0;   if (CustomConfig.ENABLE_AP_CAP) {     cappedCount=(long)(currentAp + additionalAp) > CustomConfig.AP_CAP_VALUE ? (int)(CustomConfig.AP_CAP_VALUE - currentAp) : additionalAp;   }  else {     cappedCount=additionalAp;   }   currentAp+=cappedCount;   if (currentAp < 0) {     currentAp=0;   }   AbyssRankEnum newRank=AbyssRankEnum.getRankForAp(currentAp);   if (newRank.getId() <= 9) {     setRank(newRank);   }   setPersistentState(PersistentState.UPDATE_REQUIRED); } "
"public HilbertMatrix(final int n){   this.n=n; } "
"public static void dropAllTables(Database db,boolean ifExists){   CollectDao.dropTable(db,ifExists);   UserDao.dropTable(db,ifExists); } "
"private static String byteArrayToHexString(byte[] bytes){   StringBuilder sb=new StringBuilder(bytes.length * 2);   for (  byte element : bytes) {     int v=element & 0xff;     if (v < 16) {       sb.append('0');     }     sb.append(Integer.toHexString(v));   }   return sb.toString(); } "
"public @Nullable Uri insertItemTo(long playlistId,long audioId,int position){   ContentValues value=new ContentValues();   value.put(MediaStore.Audio.Playlists.Members.AUDIO_ID,audioId);   value.put(MediaStore.Audio.Playlists.Members.PLAY_ORDER,position);   return resolver.insert(MediaStore.Audio.Playlists.Members.getContentUri(\"external\",playlistId),value); } "
"@RequestMapping(value=\"/races\",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Race> createRace(@RequestBody Race race) throws URISyntaxException {   log.debug(\"REST request to save Race : {}\",race);   if (race.getRaceId() != null) {     return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(\"race\",\"idexists\",\"A new race cannot already have an ID\")).body(null);   }   Race result=raceRepository.save(race);   return ResponseEntity.created(new URI(\"/api/races/\" + result.getRaceId())).headers(HeaderUtil.createEntityCreationAlert(\"race\",result.getRaceId().toString())).body(result); } "
"private void loadOptions(String options){   String[] optionsParts=StringUtils.split(options,COMA_DELIMITER);   for (  String option : optionsParts) {     String[] optionsKeyValue=StringUtils.split(option,EQUAL,2);     String optionName=optionsKeyValue[0];     if (optionName.equals(DOMAIN_OPTION)) {       if (optionsKeyValue.length > 1) {         loadDomains(optionsKeyValue[1]);       }     }  else     if (optionName.equals(THIRD_PARTY_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.THIRD_PARTY,true);     }  else     if (optionName.equals(NOT_MARK + THIRD_PARTY_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.THIRD_PARTY,false);     }  else     if (optionName.equals(ELEMHIDE_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.ELEMHIDE,true);     }  else     if (optionName.equals(DOCUMENT_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.ELEMHIDE,true);       setUrlFilterRuleOption(UrlFilterRuleOption.CONTENT,true);       setUrlFilterRuleOption(UrlFilterRuleOption.JS_INJECT,true);       setUrlFilterRuleOption(UrlFilterRuleOption.URL_BLOCK,true);     }  else     if (optionName.equals(CONTENT_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.CONTENT,true);     }  else     if (optionName.equals(GENERIC_BLOCK_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.GENERIC_BLOCK,true);     }  else     if (optionName.equals(GENERIC_HIDE_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.GENERIC_HIDE,true);     }  else     if (optionName.equals(MATCH_CASE_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.MATCH_CASE,true);     }  else     if (optionName.equals(JSINJECT_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.JS_INJECT,true);     }  else     if (optionName.equals(URLBLOCK_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.URL_BLOCK,true);     }  else     if (optionName.equals(POPUP_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.BLOCK_POPUPS,true);     }  else     if (optionName.equals(MP4_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.MP4,true);     }  else     if (optionName.equals(EMPTY_OPTION)) {       setUrlFilterRuleOption(UrlFilterRuleOption.EMPTY_RESPONSE,true);     }  else     if (optionName.equals(CONTENT_SCRIPT_OPTION)) {       appendPermittedContentType(ContentType.SCRIPT);     }  else     if (optionName.equals(CONTENT_IMAGE_OPTION)) {       appendPermittedContentType(ContentType.IMAGE);     }  else     if (optionName.equals(CONTENT_OBJECT_OPTION)) {       appendPermittedContentType(ContentType.OBJECT);     }  else     if (optionName.equals(CONTENT_STYLESHEET_OPTION)) {       appendPermittedContentType(ContentType.STYLE);     }  else     if (optionName.equals(CONTENT_XMLHTTPREQUEST_OPTION)) {       appendPermittedContentType(ContentType.XML_HTTP_REQUEST);     }  else     if (optionName.equals(CONTENT_OBJECT_SUBREQUEST)) {       appendPermittedContentType(ContentType.OBJECT_SUBREQUEST);     }  else     if (optionName.equals(CONTENT_MEDIA_OPTION)) {       appendPermittedContentType(ContentType.MEDIA);     }  else     if (optionName.equals(CONTENT_FONT_OPTION)) {       appendPermittedContentType(ContentType.FONT);     }  else     if (optionName.equals(CONTENT_SUBDOCUMENT_OPTION)) {       appendPermittedContentType(ContentType.DOCUMENT);     }  else     if (optionName.equals(CONTENT_OTHER_OPTION)) {       appendPermittedContentType(ContentType.OTHER);     }  else     if (optionName.equals(NOT_MARK + CONTENT_SCRIPT_OPTION)) {       appendRestrictedContentType(ContentType.SCRIPT);     }  else     if (optionName.equals(NOT_MARK + CONTENT_IMAGE_OPTION)) {       appendRestrictedContentType(ContentType.IMAGE);     }  else     if (optionName.equals(NOT_MARK + CONTENT_OBJECT_OPTION)) {       appendRestrictedContentType(ContentType.OBJECT);     }  else     if (optionName.equals(NOT_MARK + CONTENT_STYLESHEET_OPTION)) {       appendRestrictedContentType(ContentType.STYLE);     }  else     if (optionName.equals(NOT_MARK + CONTENT_XMLHTTPREQUEST_OPTION)) {       appendRestrictedContentType(ContentType.XML_HTTP_REQUEST);     }  else     if (optionName.equals(NOT_MARK + CONTENT_OBJECT_SUBREQUEST)) {       appendRestrictedContentType(ContentType.OBJECT_SUBREQUEST);     }  else     if (optionName.equals(NOT_MARK + CONTENT_MEDIA_OPTION)) {       appendRestrictedContentType(ContentType.MEDIA);     }  else     if (optionName.equals(NOT_MARK + CONTENT_FONT_OPTION)) {       appendRestrictedContentType(ContentType.FONT);     }  else     if (optionName.equals(NOT_MARK + CONTENT_SUBDOCUMENT_OPTION)) {       appendRestrictedContentType(ContentType.DOCUMENT);     }  else     if (optionName.equals(NOT_MARK + CONTENT_OTHER_OPTION)) {       appendRestrictedContentType(ContentType.OTHER);     }  else     if (!IGNORED_OPTIONS.contains(optionName)) {       throw new IllegalArgumentException(\"Unknown option \" + optionName);     }   }   if (enabledOptions != null && (enabledOptions.contains(UrlFilterRuleOption.JS_INJECT) || enabledOptions.contains(UrlFilterRuleOption.ELEMHIDE) || enabledOptions.contains(UrlFilterRuleOption.URL_BLOCK)|| enabledOptions.contains(UrlFilterRuleOption.CONTENT)|| enabledOptions.contains(UrlFilterRuleOption.BLOCK_POPUPS))) {     permittedContentTypesMask=ContentType.DOCUMENT.getFlagValue();     documentLevelRule=true;   } } "
"public boolean isOptional(){   return this.optionalParams; } "
"public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){   Rect rect=getFramingRectInPreview();   if (rect == null) {     return null;   }   return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false); } "
"public static JpaModule newClientModule(String resourceSearchPackage){   return new JpaModule(resourceSearchPackage); } "
"@ReactMethod public void disableAutoRefresh(String placementId){   mAdsManagers.get(placementId).disableAutoRefresh(); } "
"public void initializeImages(URL baseURL,int iconSet){   createImageDescriptor(ISVNUIConstants.IMG_REPOSITORY,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_REFRESH,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_REFRESH_ENABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_REFRESH_DISABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_SYNCPANE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_PROPERTIES,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_URL_SOURCE_REPO,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_GET_ALL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_GET_NEXT,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FILTER_HISTORY,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FILTER_HISTORY_DISABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_COLLAPSE_ALL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_COLLAPSE_ALL_ENABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_EXPAND_ALL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_EXPAND_ALL_ENABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_NEWLOCATION,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_CLOUDFORGE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_BRANCH,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_CLEAR,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_CLEAR_DISABLED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_BRANCHES_CATEGORY,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_VERSIONS_CATEGORY,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_PROJECT_VERSION,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WARNING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SVN,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_RESOLVE_TREE_CONFLICT,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SHARE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SYNCH,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_DIFF,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_QUESTIONABLE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_CONFLICTED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_ADDED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_MOVED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_EXTERNAL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_LOCKED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_NEEDSLOCK,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_DELETED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_SWITCHED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_PROPERTY_CHANGED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_TEXT_CONFLICTED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_TREE_CONFLICT,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_PROPERTY_CONFLICTED,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_UPDATE_ALL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_COMMIT_ALL,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_SHOW_DELETED,baseURL);   createImageDescriptor(\"glyphs/glyph1.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph2.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph3.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph4.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph5.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph6.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph7.gif\",baseURL);   createImageDescriptor(\"glyphs/glyph8.gif\",baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FILEADD_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FILEDELETE_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FOLDERADD_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FOLDERDELETE_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FILEMODIFIED_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FOLDERMODIFIED_PENDING,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_FOLDER,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_TABLE_MODE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_FLAT_MODE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_COMPRESSED_MODE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_TREE_MODE,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_HORIZONTAL_LAYOUT,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_VERTICAL_LAYOUT,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_COMMENTS,baseURL);   createImageDescriptor(ISVNUIConstants.IMG_SVN_CONSOLE,baseURL); switch (iconSet) { case ISVNUIConstants.MENU_ICON_SET_TORTOISESVN:     createImageDescriptor(ISVNUIConstants.IMG_MENU_UPDATE,\"tortoise/update.gif\",baseURL);   createImageDescriptor(ISVNUIConstants.IMG_MENU_COMMIT,\"tortoise/commit.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SYNC,\"obj16/synch_synch.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_REVERT,\"tortoise/revert.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_ADD,\"tortoise/add.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_IGNORE,\"tortoise/ignore.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_PROPSET,\"ctool16/svn_prop_add.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWPROPERTY,\"cview16/props_view.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_RELOCATE,\"tortoise/relocate.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_CHECKOUTAS,\"tortoise/checkout.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_IMPORTFOLDER,\"tortoise/import.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_LOCK,\"tortoise/lock.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_UNLOCK,\"tortoise/unlock.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_CLEANUP,\"tortoise/cleanup.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_EXPORT,\"tortoise/export.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_DIFF,\"tortoise/diff.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_PROPDELETE,\"ctool16/delete.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_DELETE,\"ctool16/delete.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_BRANCHTAG,\"tortoise/copy.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_MOVE,\"tortoise/rename.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_COMPARE,\"tortoise/compare.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_RESOLVE,\"tortoise/resolve.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_EDITCONFLICT,\"tortoise/conflict.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SWITCH,\"tortoise/switch.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_MARKMERGED,\"tortoise/merge.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,\"tortoise/merge.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,\"cview16/history_view.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,\"cview16/annotate_view.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,\"ctool16/copy_edit.gif\",baseURL); break; case ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE: createImageDescriptor(ISVNUIConstants.IMG_MENU_UPDATE,\"subversive/update.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_COMMIT,\"subversive/commit.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SYNC,\"subversive/synch.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_REVERT,\"subversive/revert.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_CHECKOUTAS,\"subversive/checkout.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_LOCK,\"subversive/lock.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_UNLOCK,\"subversive/unlock.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_BRANCHTAG,\"subversive/branch.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SWITCH,\"subversive/switch.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,\"subversive/merge.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,\"subversive/showhistory.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_EXPORT,\"subversive/export.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_IMPORTFOLDER,\"subversive/import.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,\"subversive/annotate.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,\"subversive/copy.gif\",baseURL); break; default : createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,\"tortoise/merge.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,\"cview16/history_view.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,\"cview16/annotate_view.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,\"ctool16/copy_edit.gif\",baseURL); createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWPROPERTY,\"cview16/props_view.gif\",baseURL); break; } } "
"@Override protected void synchronizeData(){   needsSyncData(false);   DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();   data=ownerDocument.getNodeValueString(fNodeIndex);   isIgnorableWhitespace(ownerDocument.getNodeExtra(fNodeIndex) == 1); } "
"public void printBaseTable(ScoutWidget[] list){   System.out.println(\"----------------- CENTER TABLE --------------------\");   final int SIZE=10;   String padd=new String(new char[SIZE]).replace('\\0',' ');   System.out.print(\" \");   for (int i=0; i < len; i++) {     String dbg=\"[\" + i + \"] \"+ list[i]+ \"-------------------------\";     if (i == 0) {       dbg=padd + dbg.substring(0,20);     }  else {       dbg=dbg.substring(0,20);     }     System.out.print(dbg + ((i == len - 1) ? \"\\n\" : \"\"));   }   String str=\"[\";   for (int con=0; con < len * 2; con++) {     int opposite=con & 0x1;     str+=(con / 2 + ((opposite == 0) ? \"->\" : \"<-\") + \"           \").substring(0,10);   }   String header=(\"Connection \" + padd).substring(0,SIZE);   System.out.println(header + \" \" + str);   for (int i=1; i < len; i++) {     if (mProbability[i] == null) {       continue;     }     for (int dir=0; dir < mProbability[i].length; dir++) {       System.out.println(Utils.leftTrim(padd + i + \" \"+ Direction.toString(dir),SIZE) + \" \" + Utils.toS(mProbability[i][dir]));       System.out.println(padd + \" \" + Utils.toS(mMargin[i][dir]));     }   } } "
"@Override public synchronized void close(){   if (mIsInitializing)   throw new IllegalStateException(\"Closed during initialization\");   if (mDatabase != null && mDatabase.isOpen()) {     mDatabase.close();     mDatabase=null;   } } "
"public PhotosGetMarketUploadServerQuery cropX(Integer value){   return unsafeParam(\"crop_x\",value); } "
"private Map<TypeElement,ComponentInfo> calculateAllMappingFromComponentsToCoreInjectors(Set<TypeElement> components){   Map<TypeElement,ComponentInfo> componentScopeMap=new HashMap<>();   for (  TypeElement component : components) {     TypeElement scope=getScopeForComponent(component);     if (scope != null) {       componentScopeMap.put(component,new ComponentInfo(scope));     }   }   return componentScopeMap; } "
"public QueryParams buildQueryParams(QueryParamsParserContext context){   try {     return queryParamsParser.parse(context);   }  catch (  KatharsisException e) {     throw e;   } catch (  RuntimeException e) {     throw new ParametersDeserializationException(e.getMessage(),e);   } } "
"public boolean isVoiced(){   Allophone allophone=getAllophone();   return allophone.isVoiced(); } "
"public void cleanUp(){   cacheFragment=null; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_LEVEL_DOWN(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1400893,value0,value1); } "
"public boolean isSetMethodQpsMap(){   return this.methodQpsMap != null; } "
"private void populateDataMap(){   dataTypeMap.put(\"xs:int\",Integer.class);   dataTypeMap.put(\"xs:double\",Double.class);   dataTypeMap.put(\"xs:boolean\",Boolean.class);   dataTypeMap.put(\"xs:float\",Float.class);   dataTypeMap.put(\"xs:double\",Double.class);   dataTypeMap.put(\"xs:long\",Long.class);   dataTypeMap.put(GEOMETRY_NAME,Geometry.class);   dataTypeMap.put(BBOX_NAME,ReferencedEnvelope.class);   dataTypeMap.put(ENUMERATION_NAME,StringBuilder.class); } "
"public static LatLng translatePoint(LatLng point,double distance,double bearing){   distance=distance / 1000d;   double lat=Math.toRadians(point.latitude);   double lng=Math.toRadians(point.longitude);   bearing=Math.toRadians(bearing);   double Lat2=Math.asin((Math.sin(lat) * Math.cos(distance / EARTH)) + (Math.cos(lat) * Math.sin(distance / EARTH) * Math.cos(bearing)));   double Long2=lng + Math.atan2(Math.sin(bearing) * Math.sin(distance / EARTH) * Math.cos(lat),Math.cos(distance / EARTH) - (Math.sin(lat) * Math.sin(Lat2)));   Lat2=Math.toDegrees(Lat2);   Long2=Math.toDegrees(Long2);   return new LatLng(Lat2,Long2); } "
"public static Document parseDocument(String inputData,boolean validating) throws ParserConfigurationException, SAXException, IOException {   return parseDocument(new StringReader(inputData),validating); } "
"@SuppressWarnings(\"unchecked\") public void add(String key,String value){   if (key != null && value != null) {     Object params=urlParamsWithObjects.get(key);     if (params == null) {       params=new HashSet<String>();       this.put(key,params);     }     if (params instanceof List) {       ((List<Object>)params).add(value);     }  else     if (params instanceof Set) {       ((Set<Object>)params).add(value);     }   } } "
"public static void clickButtonTeamspeakConnect(){   RewiMod.getInstance().openUrl(\"ts3server://rewinside.tv\"); } "
"public PollsGetByIdQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"@Override public void onDone(){   mOverlay.remove(mGraphic); } "
"public double uniformRand(){   return (rand.nextBoolean()) ? 1.0 : -1.0; } "
"public boolean isApplicable(){   return true; } "
"public DefaultHibernateSpaceDataSourceConfigurer performOrderById(boolean performOrderById){   this.performOrderById=performOrderById;   return this; } "
"public static Long stringToLong(String val){   return Long.valueOf(trim(val)); } "
"private AudioOption createAudioOption(Object xmlOpt){   AudioOption option=null;   if (xmlOpt instanceof Option1AType) {     Option1AType opt1A=(Option1AType)xmlOpt;     option=createOption1A(opt1A.getTrack1().getL(),opt1A.getTrack1().getR(),opt1A.getTrack1().getC(),opt1A.getTrack1().getLFE(),opt1A.getTrack1().getLs(),opt1A.getTrack1().getRs(),opt1A.getTrack2().getLt(),opt1A.getTrack3().getRt());   }  else   if (xmlOpt instanceof Option2Type) {     Option2Type opt2=(Option2Type)xmlOpt;     option=createOption2(opt2.getTrack1().getL(),opt2.getTrack2().getR(),opt2.getTrack3().getC(),opt2.getTrack4().getLFE(),opt2.getTrack5().getLs(),opt2.getTrack6().getRs(),opt2.getTrack7().getLt(),opt2.getTrack8().getRt());   }  else   if (xmlOpt instanceof Option3Type) {     Option3Type opt3=(Option3Type)xmlOpt;     option=createOption3(opt3.getTrack1().getL(),opt3.getTrack1().getR(),opt3.getTrack1().getC(),opt3.getTrack1().getLFE(),opt3.getTrack1().getLs(),opt3.getTrack1().getRs(),opt3.getTrack2().getLt(),opt3.getTrack2().getRt());   }  else   if (xmlOpt instanceof Option4Type) {     Option4Type opt4=(Option4Type)xmlOpt;     option=createOption4(opt4.getTrack1().getL(),opt4.getTrack2().getR(),opt4.getTrack3().getC(),opt4.getTrack4().getLFE(),opt4.getTrack5().getLs(),opt4.getTrack6().getRs(),opt4.getTrack7().getLt(),opt4.getTrack7().getRt());   }  else   if (xmlOpt instanceof Option5Type) {     Option5Type opt5=(Option5Type)xmlOpt;     option=createOption5(opt5.getTrack1().getL(),opt5.getTrack2().getR());   }  else   if (xmlOpt instanceof Option6Type) {     Option6Type opt6=(Option6Type)xmlOpt;     option=createOption6(opt6.getTrack1().getL(),opt6.getTrack1().getR());   }  else {   }   return option; } "
"public void updateStackVisiblityValue(float stackVisibility){   mCacheStackVisibility=stackVisibility;   mOrderSortingValue=computeOrderSortingValue(mCachedIndexDistance,mCacheStackVisibility);   mVisiblitySortingValue=computeVisibilitySortingValue(mCachedVisibleArea,mOrderSortingValue,mCacheStackVisibility); } "
"public static void installTinker(ApplicationLike appLike){   if (isInstalled) {     TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");     return;   }   LoadReporter loadReporter=new SampleLoadReporter(appLike.getApplication());   PatchReporter patchReporter=new SamplePatchReporter(appLike.getApplication());   PatchListener patchListener=new SamplePatchListener(appLike.getApplication());   AbstractPatch upgradePatchProcessor=new UpgradePatch();   AbstractPatch repairPatchProcessor=new RepairPatch();   TinkerInstaller.install(appLike,loadReporter,patchReporter,patchListener,SampleResultService.class,upgradePatchProcessor,repairPatchProcessor);   isInstalled=true; } "
"public static void dropTable(Database db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"MY_COLLECTION\\\"\";   db.execSQL(sql); } "
"@Override public void undoAction(UndoInterface undoRedoObject){   if ((spinner != null) && (undoRedoObject != null)) {     if (undoRedoObject.getOldValue() instanceof Integer) {       Integer oldValue=(Integer)undoRedoObject.getOldValue();       internalSetValue(oldValue);     }   } } "
"protected Entity cacheLoadOrStore(Entity entity){   Entity cachedEntity=entityCache.findInCache(entity.getClass(),entity.getId());   if (cachedEntity != null) {     return cachedEntity;   }   entityCache.put(entity,true);   return entity; } "
"public boolean isPageOnTheList(String title){   boolean isOnTheList=getRowByTitle(title) != null;   if (!isOnTheList) {     LOG.debug(\"There were no page with title {} on the list\",title);   }   return isOnTheList; } "
"private FilterType isDifferentArrayValue(final SourceDataTag currentTag,final Object newValue){   FilterType filtering=null;   SourceDataTagValue currentSDValue=currentTag.getCurrentValue();   if (currentSDValue.getValue() == null && newValue != null) {     this.equipmentLogger.trace(\"isCandidateForFiltering - Tag \" + currentSDValue.getId() + \" - Current Value null but we have a New value. Not candidate for filtering\");     return FilterType.NO_FILTERING;   }  else   if (currentSDValue.getValue() != null && currentSDValue.getValue().getClass().isArray() && newValue.getClass().isArray()) {     if (!Arrays.equals((Object[])currentSDValue.getValue(),(Object[])newValue)) {       this.equipmentLogger.trace(\"isCandidateForFiltering - Tag \" + currentSDValue.getId() + \" - Both Values are different (Current vs New) = (\"+ currentSDValue.getValue()+ \" vs \"+ newValue+ \"). Not candidate for filtering\");       return FilterType.NO_FILTERING;     }   }  else   if (currentSDValue.getValue() != null) {     if (!currentSDValue.getValue().equals(newValue)) {       this.equipmentLogger.trace(\"isCandidateForFiltering - Tag \" + currentSDValue.getId() + \" - Both Values are different (Current vs New) = (\"+ currentSDValue.getValue()+ \" vs \"+ newValue+ \"). Not candidate for filtering\");       return FilterType.NO_FILTERING;     }   }   return filtering; } "
"public static String md5(byte[] source) throws NoSuchAlgorithmException {   char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};   java.security.MessageDigest md=java.security.MessageDigest.getInstance(\"MD5\");   md.update(source);   byte tmp[]=md.digest();   char str[]=new char[32];   int k=0;   for (int i=0; i < 16; i++) {     str[k++]=hexDigits[tmp[i] >>> 4 & 0xf];     str[k++]=hexDigits[tmp[i] & 0xf];   }   return new String(str); } "
"public static double toDegrees(double x){   if (Double.isInfinite(x) || x == 0.0) {     return x;   }   final double facta=57.2957763671875;   final double factb=3.145894820876798E-6;   double xa=doubleHighPart(x);   double xb=x - xa;   return xb * factb + xb * facta + xa * factb + xa * facta; } "
"@Deployment public void testSplitMergeNoWaitstates(){   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"forkJoinNoWaitStates\");   assertTrue(processInstance.isEnded()); } "
"private boolean limitTranslation(){   RectF bounds=mTransformedImageBounds;   bounds.set(mImageBounds);   mActiveTransform.mapRect(bounds);   float offsetLeft=getOffset(bounds.left,bounds.width(),mViewBounds.width());   float offsetTop=getOffset(bounds.top,bounds.height(),mViewBounds.height());   if (offsetLeft != bounds.left || offsetTop != bounds.top) {     mActiveTransform.postTranslate(offsetLeft - bounds.left,offsetTop - bounds.top);     return true;   }   return false; } "
"private static boolean checkSimpleDerivation(XSSimpleType derived,XSSimpleType base,short block){   if (derived == base)   return true;   if ((block & XSConstants.DERIVATION_RESTRICTION) != 0 || (derived.getBaseType().getFinal() & XSConstants.DERIVATION_RESTRICTION) != 0) {     return false;   }   XSSimpleType directBase=(XSSimpleType)derived.getBaseType();   if (directBase == base)   return true;   if (directBase != SchemaGrammar.fAnySimpleType && checkSimpleDerivation(directBase,base,block)) {     return true;   }   if ((derived.getVariety() == XSSimpleTypeDefinition.VARIETY_LIST || derived.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) && base == SchemaGrammar.fAnySimpleType) {     return true;   }   if (base.getVariety() == XSSimpleTypeDefinition.VARIETY_UNION) {     XSObjectList subUnionMemberDV=base.getMemberTypes();     int subUnionSize=subUnionMemberDV.getLength();     for (int i=0; i < subUnionSize; i++) {       base=(XSSimpleType)subUnionMemberDV.item(i);       if (checkSimpleDerivation(derived,base,block))       return true;     }   }   return false; } "
"@Override public boolean equals(Object other){   if (this == other) {     return true;   }   if (other instanceof DerivativeStructure) {     final DerivativeStructure rhs=(DerivativeStructure)other;     return (getFreeParameters() == rhs.getFreeParameters()) && (getOrder() == rhs.getOrder()) && MathArrays.equals(data,rhs.data);   }   return false; } "
"public static CertChainKeyPair generateSigned(String fqdn,X509Certificate issuerCertificate,PrivateKey issuerPrivateKey){   try {     return generateCertificateAndSign(fqdn,issuerCertificate,issuerPrivateKey,getServerExtensions(issuerCertificate));   }  catch (  CertificateException|OperatorCreationException|NoSuchAlgorithmException|IOException e) {     throw new RuntimeException(String.format(\"Failed to generate server certificate, reason: %s\",e.getMessage()),e);   } } "
"public boolean isTargetSpecificLayout(){   return myEditedConfig.getVersionQualifier() != null; } "
"public ApiFilter(@NotNull String filterQuery,LogicalTable table,DimensionDictionary dimensionDictionary) throws BadFilterException {   LOG.trace(\"Filter query: {}\\n\\n DimensionDictionary: {}\",filterQuery,dimensionDictionary);   Pattern pattern=Pattern.compile(\"([^\\\\|]+)\\\\|([^-]+)-([^\\\\[]+)\\\\[([^\\\\]]+)\\\\]?\");   Matcher matcher=pattern.matcher(filterQuery);   if (!matcher.matches()) {     LOG.debug(FILTER_INVALID.logFormat(filterQuery));     throw new BadFilterException(FILTER_INVALID.format(filterQuery));   }   try {     String filterDimensionName=matcher.group(1);     this.dimension=dimensionDictionary.findByApiName(filterDimensionName);     if (dimension == null) {       LOG.debug(FILTER_DIMENSION_UNDEFINED.logFormat(filterDimensionName));       throw new BadFilterException(FILTER_DIMENSION_UNDEFINED.format(filterDimensionName));     }     if (table != null && !table.getDimensions().contains(dimension)) {       LOG.debug(FILTER_DIMENSION_NOT_IN_TABLE.logFormat(filterDimensionName,table));       throw new BadFilterException(FILTER_DIMENSION_NOT_IN_TABLE.format(filterDimensionName,table.getName()));     }     String dimensionFieldName=matcher.group(2);     try {       this.dimensionField=this.dimension.getFieldByName(dimensionFieldName);     }  catch (    IllegalArgumentException ignored) {       LOG.debug(FILTER_FIELD_NOT_IN_DIMENSIONS.logFormat(dimensionFieldName,filterDimensionName));       throw new BadFilterException(FILTER_FIELD_NOT_IN_DIMENSIONS.format(dimensionFieldName,filterDimensionName));     }     String operationName=matcher.group(3);     try {       this.operation=FilterOperation.valueOf(operationName);     }  catch (    IllegalArgumentException ignored) {       LOG.debug(FILTER_OPERATOR_INVALID.logFormat(operationName));       throw new BadFilterException(FILTER_OPERATOR_INVALID.format(operationName));     }     this.values=new LinkedHashSet<>(FilterTokenizer.split(matcher.group(4).replaceAll(\"\\\\[\",\"\").replaceAll(\"\\\\]\",\"\").trim()));   }  catch (  IllegalArgumentException e) {     LOG.debug(FILTER_ERROR.logFormat(filterQuery,e.getMessage()),e);     throw new BadFilterException(FILTER_ERROR.format(filterQuery,e.getMessage()),e);   } } "
"public String lastError(){   try {     return response.jsonPath().get(\"error.message\");   }  catch (  IllegalArgumentException|JsonPathException e) {     return \"\";   } } "
"private void sendProcessConnectionRequest(){   EasyMock.expect(this.environmentMock.getProperty(EasyMock.<String>anyObject())).andReturn(PROCESS_NAME).times(1);   ;   EasyMock.replay(this.environmentMock,this.configurationControllerMock);   ProcessConnectionResponse processConnectionResponse=this.activeRequestSender.sendProcessConnectionRequest(PROCESS_NAME);   compareConnection(processConnectionResponse);   EasyMock.verify(this.configurationControllerMock); } "
"@Override public boolean shouldExecute(){   if (entity.getGrowingAge() < 1 && !entity.isInLove()) {     if (entity instanceof EntityWolf) {       if (!((EntityWolf)entity).isTamed())       return false;     }     BlockPos entityPos=entity.getPosition();     if (targetItem == null) {       List<EntityItem> entityItems=entity.getEntityWorld().getEntitiesWithinAABB(EntityItem.class,new AxisAlignedBB(entityPos,entityPos.add(1,1,1)).expand(5,5,5));       if (!entityItems.isEmpty()) {         for (        EntityItem item : entityItems) {           if (entity.isBreedingItem(item.getEntityItem())) {             targetItem=item;             break;           }         }       }     }     if (targetItem != null) {       BlockPos targetPos=targetItem.getPosition();       if (entityPos.getDistance(targetPos.getX(),targetPos.getY(),targetPos.getZ()) <= 2D && targetItem.getEntityItem().stackSize > 0) {         processItemEating();         return false;       }  else {         return true;       }     }   }   return false; } "
"public boolean enabled(){   return soot.PhaseOptions.getBoolean(options,\"enabled\"); } "
"public FriendsGetMutualQuery targetUids(Integer... value){   return unsafeParam(\"target_uids\",value); } "
"public boolean canGetDouble(){   return canGet(double.class); } "
"public static String computeShannonWeaver(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {   if (viewer instanceof MainViewer)   return toString(computeShannonWeaver((MainViewer)viewer,progressListener));  else   if (viewer instanceof ClassificationViewer)   return toString(computeShannonWeaver((ClassificationViewer)viewer,progressListener));  else   return null; } "
"public static String geFileFromRaw(Context context,int resId){   if (context == null) {     return null;   }   StringBuilder s=new StringBuilder();   try {     InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));     BufferedReader br=new BufferedReader(in);     String line;     while ((line=br.readLine()) != null) {       s.append(line);     }     return s.toString();   }  catch (  IOException e) {     e.printStackTrace();     return null;   } } "
"@Override public boolean isDataPresent(){   return true; } "
"public Code39Reader(boolean usingCheckDigit,boolean extendedMode){   this.usingCheckDigit=usingCheckDigit;   this.extendedMode=extendedMode;   decodeRowResult=new StringBuilder(20);   counters=new int[9]; } "
"public BinarySearchTree(){   this.root=null;   this.size=0;   this.selfBalancing=false; } "
"public void fileLoaded(){   reset(); } "
"public static Intent createDeepLinkIntent(Context context,VRDeepLinkParam param){   if (param == null || isStringNullOrEmpty(param.mediaFbId)) {     return null;   }   if (IsVideoDeepLink(param)) {     return createDeepLinkIntentForVideoContent(context,param);   }   return createDeepLinkIntentForPhotoContent(context,param); } "
"public static void moveStyleRefToP(TtEltype tt){   Set<Object> styles=new HashSet<>(tt.getBody().getStyle());   BodyEltype body=tt.getBody();   body.getStyle().clear();   setStyleListToNull(body);   tt.getBody().getDiv().stream().peek(null).flatMap(null).filter(null).map(null).forEachOrdered(null); } "
"private static byte[] readClass(final InputStream is) throws IOException {   if (is == null) {     throw new IOException(\"Class not found\");   }   byte[] b=new byte[is.available()];   int len=0;   while (true) {     int n=is.read(b,len,b.length - len);     if (n == -1) {       if (len < b.length) {         byte[] c=new byte[len];         System.arraycopy(b,0,c,0,len);         b=c;       }       return b;     }     len+=n;     if (len == b.length) {       byte[] c=new byte[b.length + 1000];       System.arraycopy(b,0,c,0,len);       b=c;     }   } } "
"public static void copyFile(File source,File target) throws IOException {   FileInputStream fis=new FileInputStream(source);   FileOutputStream fos=new FileOutputStream(target);   byte[] buf=new byte[1024];   int i=0;   while ((i=fis.read(buf)) != -1) {     fos.write(buf,0,i);   }   fis.close();   fos.close(); } "
"private void fixScrollOffset(){   if (offsetScroll < 0) {     offsetScroll=0;   }   if (offsetScroll > getMaxOffsetX()) {     offsetScroll=getMaxOffsetX();   } } "
"public static double[] apply(final double[][] points){   final int nPoints=points.length;   final double[] centroid=getMean(points);   final double xCenter=centroid[0];   final double yCenter=centroid[1];   final double[][] d1=new double[nPoints][3];   for (int i=0; i < nPoints; i++) {     final double xixC=points[i][0] - xCenter;     final double yiyC=points[i][1] - yCenter;     d1[i][0]=xixC * xixC;     d1[i][1]=xixC * yiyC;     d1[i][2]=yiyC * yiyC;   }   final Matrix D1=new Matrix(d1);   final double[][] d2=new double[nPoints][3];   for (int i=0; i < nPoints; i++) {     d2[i][0]=points[i][0] - xCenter;     d2[i][1]=points[i][1] - yCenter;     d2[i][2]=1;   }   final Matrix D2=new Matrix(d2);   final Matrix S1=D1.transpose().times(D1);   final Matrix S2=D1.transpose().times(D2);   final Matrix S3=D2.transpose().times(D2);   final Matrix T=(S3.inverse().times(-1)).times(S2.transpose());   final Matrix M=S1.plus(S2.times(T));   final double[][] m=M.getArray();   final double[][] n={{m[2][0] / 2,m[2][1] / 2,m[2][2] / 2},{-m[1][0],-m[1][1],-m[1][2]},{m[0][0] / 2,m[0][1] / 2,m[0][2] / 2}};   final Matrix N=new Matrix(n);   final EigenvalueDecomposition E=N.eig();   final Matrix eVec=E.getV();   final Matrix R1=eVec.getMatrix(0,0,0,2);   final Matrix R2=eVec.getMatrix(1,1,0,2);   final Matrix R3=eVec.getMatrix(2,2,0,2);   final Matrix cond=(R1.times(4)).arrayTimes(R3).minus(R2.arrayTimes(R2));   int firstPositiveIndex=0;   for (int i=0; i < 3; i++) {     if (cond.get(0,i) > 0) {       firstPositiveIndex=i;       break;     }   }   final Matrix A1=eVec.getMatrix(0,2,firstPositiveIndex,firstPositiveIndex);   final Matrix A=new Matrix(6,1);   A.setMatrix(0,2,0,0,A1);   A.setMatrix(3,5,0,0,T.times(A1));   final double[] a=A.getColumnPackedCopy();   final double a4=a[3] - 2 * a[0] * xCenter - a[1] * yCenter;   final double a5=a[4] - 2 * a[2] * yCenter - a[1] * xCenter;   final double a6=a[5] + a[0] * xCenter * xCenter + a[2] * yCenter * yCenter + a[1] * xCenter * yCenter - a[3] * xCenter - a[4] * yCenter;   A.set(3,0,a4);   A.set(4,0,a5);   A.set(5,0,a6);   final Matrix Anorm=A.times(1 / A.normF());   return Anorm.getColumnPackedCopy(); } "
"@Override TaskDomino<T,R,U> defaultScheduler(){   return new TaskDomino<T,R,U>(super.defaultScheduler()); } "
"public OutputQueue(){   this(DEFAULT_SIZE); } "
"public Iterator sortedKeys(){   return new TreeSet(this.map.keySet()).iterator(); } "
"public static int checkSignatureAndTinkerID(Context context,File patchFile,ShareSecurityCheck securityCheck){   if (!securityCheck.verifyPatchMetaSignature(patchFile)) {     return ShareConstants.ERROR_PACKAGE_CHECK_SIGNATURE_FAIL;   }   String oldTinkerId=getManifestTinkerID(context);   if (oldTinkerId == null) {     return ShareConstants.ERROR_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND;   }   HashMap<String,String> properties=securityCheck.getPackagePropertiesIfPresent();   if (properties == null) {     return ShareConstants.ERROR_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND;   }   String patchTinkerId=properties.get(ShareConstants.TINKER_ID);   if (patchTinkerId == null) {     return ShareConstants.ERROR_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND;   }   if (!oldTinkerId.equals(patchTinkerId)) {     return ShareConstants.ERROR_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL;   }   return ShareConstants.ERROR_PACKAGE_CHECK_OK; } "
"public XMLInputSource(String publicId,String systemId,String baseSystemId,Reader charStream,String encoding){   fPublicId=publicId;   fSystemId=systemId;   fBaseSystemId=baseSystemId;   fCharStream=charStream;   fEncoding=encoding; } "
"public static <T,D extends Number>D addAndGet(GigaSpace gigaSpace,IdQuery<T> idQuery,String path,D delta){   return addAndGet(gigaSpace,idQuery,path,delta,ChangeModifiers.NONE,0,TimeUnit.MILLISECONDS); } "
"private boolean matchesExpression(String toSearch,String expression){   if (toSearch == null || expression == null) {     return false;   }   int toSearchIndex=0;   int exprIndex=0;   while ((exprIndex < expression.length()) && (toSearchIndex < toSearch.length())) {     if (expression.charAt(exprIndex) == CHAR_MATCH_ESCAPE) {       exprIndex++;       if (exprIndex == expression.length()) {         return false;       }       if (expression.charAt(exprIndex) == toSearch.charAt(toSearchIndex)) {         exprIndex++;         toSearchIndex++;       }  else {         return false;       }     }  else     if (expression.charAt(exprIndex) == CHAR_MATCH_MANY) {       String partExpr=expression.substring(exprIndex + 1);       for (int j=toSearchIndex; j <= toSearch.length(); j++) {         if (matchesExpression(toSearch.substring(j),partExpr)) {           return true;         }       }       return false;     }  else     if (expression.charAt(exprIndex) == CHAR_MATCH_ONE) {       return matchesExpression(toSearch.substring(toSearchIndex + 1),expression.substring(exprIndex + 1));     }  else     if (toSearch.charAt(toSearchIndex) == expression.charAt(exprIndex)) {       toSearchIndex++;       exprIndex++;     }  else {       return false;     }   }   for (int i=exprIndex; i < expression.length(); i++) {     if (expression.charAt(i) != CHAR_MATCH_MANY) {       break;     }     exprIndex++;   }   return ((toSearch.length() == toSearchIndex) && (expression.length() == exprIndex)); } "
"private void tryScrollBackToTopAbortRefresh(){   tryScrollBackToTop(); } "
"public Event(String name){   this.setName(name); } "
"private void hidePublicShare(){   getShareViaLinkSwitch().setVisibility(View.GONE);   getExpirationDateSection().setVisibility(View.GONE);   getPasswordSection().setVisibility(View.GONE);   getEditPermissionSection().setVisibility(View.GONE);   getGetLinkButton().setVisibility(View.GONE);   getHideFileListingPermissionSection().setVisibility(View.GONE); } "
"private boolean typeSupportsConstants(Type returnType){   if (returnType == IntType.v() || returnType == LongType.v() || returnType == FloatType.v() || returnType == DoubleType.v())   return true;   if (returnType instanceof RefType)   if (((RefType)returnType).getClassName().equals(\"java.lang.String\"))   return true;   return false; } "
"private void clearIssueReferences(String launchId){   List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);   issuesRepository.delete(issues); } "
"private Singletons(){ } "
"public String[] upload_appender_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {   return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list); } "
"public void shouldShowFullBadgeText(boolean shouldShowBadgeWithNinePlus){   this.shouldShowBadgeWithNinePlus=shouldShowBadgeWithNinePlus; } "
"private TableDDL createTableDDL(String tableName){   TableMetadata tableMetadata=_keyspace.getKeyspaceMetadata().getTable(tableName);   String rowKeyColumnName=tableMetadata.getPrimaryKey().get(0).getName();   String timeSeriesColumnName=tableMetadata.getPrimaryKey().get(1).getName();   String valueColumnName=tableMetadata.getColumns().get(2).getName();   return new TableDDL(tableMetadata,rowKeyColumnName,timeSeriesColumnName,valueColumnName); } "
"public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT_BROADCAST(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1300138,value0,value1); } "
"public SootMethodAndClass parseSootMethodString(String parseString){   if (!parseString.startsWith(\"<\") || !parseString.endsWith(\">\")) {     throw new IllegalArgumentException(\"Illegal format of \" + parseString + \" (should use soot method representation)\");   }   String name=\"\";   String className=\"\";   String returnType=\"\";   Pattern pattern=Pattern.compile(\"<(.*?):\");   Matcher matcher=pattern.matcher(parseString);   if (matcher.find()) {     className=matcher.group(1);   }   pattern=Pattern.compile(\": (.*?) \");   matcher=pattern.matcher(parseString);   if (matcher.find()) {     returnType=matcher.group(1);     parseString=parseString.substring(matcher.end(1));   }   pattern=Pattern.compile(\" (.*?)\\\\(\");   matcher=pattern.matcher(parseString);   if (matcher.find()) {     name=matcher.group(1);   }   List<String> paramList=new ArrayList<String>();   pattern=Pattern.compile(\"\\\\((.*?)\\\\)\");   matcher=pattern.matcher(parseString);   if (matcher.find()) {     String params=matcher.group(1);     for (    String param : params.split(\",\"))     paramList.add(param.trim());   }   return new SootMethodAndClass(name,className,returnType,paramList); } "
"protected MarketEditQuery mainPhotoId(int value){   return unsafeParam(\"main_photo_id\",value); } "
"public int writeClassDef(ClassDef classDef){   int off=data.position();   writeInt(classDef.typeIndex);   writeInt(classDef.accessFlags);   writeInt(classDef.supertypeIndex);   writeInt(classDef.interfacesOffset);   writeInt(classDef.sourceFileIndex);   writeInt(classDef.annotationsOffset);   writeInt(classDef.classDataOffset);   writeInt(classDef.staticValuesOffset);   return off; } "
"@Override protected void decompose(double[][] qrt){   p=new int[qrt.length];   for (int i=0; i < p.length; i++) {     p[i]=i;   }   super.decompose(qrt); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_EX_ME(String value0){   return new SM_SYSTEM_MESSAGE(1390193,value0); } "
"public void add(Object o){   if (!contains(o)) {     elementSet.add(o);     elementVector.add(o);   } } "
"static boolean isSystemWindows(){   return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR; } "
"protected void propagate(D sourceVal,N target,D targetVal,N relatedCallSite,boolean isUnbalancedReturn,boolean forceRegister){   final PathEdge<N,D> edge=new PathEdge<N,D>(sourceVal,target,targetVal);   final D existingVal=(forceRegister || !enableMergePointChecking || isMergePoint(target)) ? jumpFn.addFunction(edge) : null;   if (existingVal != null) {     if (existingVal != targetVal)     existingVal.addNeighbor(targetVal);   }  else {     scheduleEdgeProcessing(edge);     if (targetVal != zeroValue)     logger.trace(\"EDGE: <{},{}> -> <{},{}>\",icfg.getMethodOf(target),sourceVal,target,targetVal);   } } "
"private static boolean isDataBindingLayout(@NotNull NlComponent component){   return component.getTagName().equals(TAG_LAYOUT); } "
"public static Uri createFileUri(String path){   if (path.startsWith(\"file://\")) {     return Uri.parse(path);   }   return Uri.fromFile(new File(path)); } "
"private static boolean isAppropriateMixer(Mixer mixer,Line.Info lineInfo,boolean isMixingRequired){   if (!mixer.isLineSupported(lineInfo)) {     return false;   }   Class lineClass=lineInfo.getLineClass();   if (isMixingRequired && (SourceDataLine.class.isAssignableFrom(lineClass) || Clip.class.isAssignableFrom(lineClass))) {     int maxLines=mixer.getMaxLines(lineInfo);     return ((maxLines == NOT_SPECIFIED) || (maxLines > 1));   }   return true; } "
"public StatsTrackVisitorQuery(VkApiClient client,UserActor actor){   super(client,\"stats.trackVisitor\",OkResponse.class);   accessToken(actor.getAccessToken()); } "
"public String process(String source,Location location,Element element){   if (Strings.isNullOrEmpty(source)) {     return source;   }   String result=source;   for (  DocumentationProcessor processor : processors) {     result=processor.process(result,location,element);   }   return result; } "
"public BackgroundPainter(Image image,boolean fixed,boolean tile){   m_img=image;   MediaTracker mt=new MediaTracker(new Container());   mt.addImage(m_img,0);   try {     mt.waitForID(0);   }  catch (  Exception e) {     e.printStackTrace();   }   mt.removeImage(m_img,0);   m_fixed=fixed;   m_tiled=tile; } "
"public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {   writeLines(file,null,lines,lineEnding,false); } "
"public boolean hasFilters(){   return filters != null && !filters.isEmpty(); } "
"private void submitInitialSeeds(){   for (  Entry<N,Set<D>> seed : tabulationProblem.initialSeeds().entrySet()) {     N startPoint=seed.getKey();     MethodAnalyzer<FieldRef,D,N,M> analyzer=methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));     for (    D val : seed.getValue()) {       analyzer.addInitialSeed(startPoint,val);       debugger.initialSeed(startPoint);     }   } } "
"public static void debug(){   DEBUG=true; } "
"static <T>T checkNotNull(T reference){   if (reference == null) {     throw new NullPointerException();   }   return reference; } "
"public void addBitmapToCache(final String data,final BitmapDrawable value,final boolean addBitmapToDisk){   if ((data == null) || (value == null)) {     return;   }   if (getBitmapFromMemCache(data) == null) {     mMemCache.put(data,value);   }   if (!addBitmapToDisk) {     return;   } synchronized (mDiskCacheLock) {     if (mDiskLruCache != null && mDiskLruCache.get(data) == null) {       mDiskLruCache.put(data,value.getBitmap());     }   } } "
"public boolean isSet(final OPTION option){   return options == null ? false : options.contains(option); } "
"protected short compareOrder(DateTimeData date1,DateTimeData date2){   if (date1.position < 1) {     if (date1.year < date2.year)     return -1;     if (date1.year > date2.year)     return 1;   }   if (date1.position < 2) {     if (date1.month < date2.month)     return -1;     if (date1.month > date2.month)     return 1;   }   if (date1.day < date2.day)   return -1;   if (date1.day > date2.day)   return 1;   if (date1.hour < date2.hour)   return -1;   if (date1.hour > date2.hour)   return 1;   if (date1.minute < date2.minute)   return -1;   if (date1.minute > date2.minute)   return 1;   if (date1.second < date2.second)   return -1;   if (date1.second > date2.second)   return 1;   if (date1.utc < date2.utc)   return -1;   if (date1.utc > date2.utc)   return 1;   return 0; } "
"private final void reapReachedMarkers(){   if (!_cacheManager.requiresEvictionReplicationProtection())   return;   int reapCount=0;   try {     long currentTime=SystemTime.timeMillis();     long expirationTime=currentTime - LM_CHECK_TIME_MARKERS_REPOSITORY_DEFAULT;     if (_force || _lastReapedMarkersRepository < expirationTime)     _lastReapedMarkersRepository=currentTime;  else     return;     reapCount=_cacheManager.getEvictionReplicationsMarkersRepository().reapUnused();   }  catch (  Exception ex) {     if (_logger.isLoggable(Level.SEVERE)) {       _logger.log(Level.SEVERE,this.getName() + \" - caught exception while reaping reached markers \",ex);     }   }   if (reapCount > 0 && _logger.isLoggable(Level.FINE)) {     _logger.fine(this.getName() + \" - Reaped reached markers. [Reaped: \" + reapCount+ \", Remaining:\"+ _cacheManager.getEvictionReplicationsMarkersRepository().size()+ \"]\");   } } "
"public float readFloat() throws JMSException {   initializeReading();   try {     this.dataIn.mark(Integer.MAX_VALUE);     return this.dataIn.readFloat();   }  catch (  EOFException eof) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageEOFException(eof.toString());     jmsEx.setLinkedException(eof);     throw jmsEx;   } catch (  IOException ioe) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());     jmsEx.setLinkedException(ioe);     throw jmsEx;   } } "
"private void emitError(LengthOfOutputStream stream,Throwable t){   Subject<Long,Long> lengthBroadcaster=stream.getLengthBroadcaster();   lengthBroadcaster.onNext(stream.getResponseLength());   lengthBroadcaster.onError(t); } "
"private static int findMnemonicAmpersand(String text){   int i=-1;   do {     i=text.indexOf('&',i + 1);     if ((i >= 0) && ((i + 1) < text.length())) {       if (text.charAt(i + 1) == ' ') {         continue;       }  else       if ((text.charAt(i + 1) == '\\'') && (i > 0) && (text.charAt(i - 1) == '\\'')) {         continue;       }       return i;     }   }  while (i >= 0);   return -1; } "
"public void computeAxis(float yMin,float yMax){   if (mViewPortHandler.contentHeight() > 10 && !mViewPortHandler.isFullyZoomedOutX()) {     PointD p1=mTrans.getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop());     PointD p2=mTrans.getValuesByTouchPoint(mViewPortHandler.contentRight(),mViewPortHandler.contentTop());     if (!mYAxis.isInverted()) {       yMin=(float)p1.x;       yMax=(float)p2.x;     }  else {       yMin=(float)p2.x;       yMax=(float)p1.x;     }   }   computeAxisValues(yMin,yMax); } "
"public SiteAdminPage deactivatePage(String title){   grid.deactivatePage(title);   waitForPageActivationStatus(title,ActivationStatus.DEACTIVATED);   return this; } "
"public boolean hasOnlyOneRule(){   boolean oneRule=false;   StyledLayer[] styledLayers=sld.getStyledLayers();   int noOfRules=0;   if (styledLayers != null) {     for (    StyledLayer styledLayer : styledLayers) {       List<Style> styleList=null;       if (styledLayer instanceof NamedLayerImpl) {         NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;         styleList=namedLayerImpl.styles();       }  else       if (styledLayer instanceof UserLayerImpl) {         UserLayerImpl userLayerImpl=(UserLayerImpl)styledLayer;         styleList=userLayerImpl.userStyles();       }       if (styleList != null) {         for (        Style style : styleList) {           for (          FeatureTypeStyle fts : style.featureTypeStyles()) {             noOfRules+=fts.rules().size();           }         }       }     }   }   oneRule=(noOfRules == 1);   logger.debug(String.format(\"Number of rules : %d\",noOfRules));   return oneRule; } "
"public final boolean canGetInt(String field){   return m_table.canGetInt(field); } "
"public Builder withLeaseId(long leaseId){   checkArgument(leaseId >= 0,\"leaseId should greater than or equal to zero: leaseId=%s\",leaseId);   this.leaseId=leaseId;   return this; } "
"private void drawLineProgress(Canvas canvas){   float unitDegrees=(float)(2.0f * Math.PI / mLineCount);   float outerCircleRadius=mRadius;   float interCircleRadius=mRadius - mLineWidth;   int progressLineCount=(int)((float)getProgress() / (float)getMax() * mLineCount);   for (int i=0; i < mLineCount; i++) {     float rotateDegrees=i * unitDegrees;     float startX=mCenterX + (float)Math.sin(rotateDegrees) * interCircleRadius;     float startY=mCenterX - (float)Math.cos(rotateDegrees) * interCircleRadius;     float stopX=mCenterX + (float)Math.sin(rotateDegrees) * outerCircleRadius;     float stopY=mCenterX - (float)Math.cos(rotateDegrees) * outerCircleRadius;     if (i < progressLineCount) {       canvas.drawLine(startX,startY,stopX,stopY,mProgressPaint);     }  else {       canvas.drawLine(startX,startY,stopX,stopY,mProgressBackgroundPaint);     }   } } "
"public Foliage(Biome biome,int original){   super(biome,original); } "
"public StatsGetQuery dateTo(String value){   return unsafeParam(\"date_to\",value); } "
"public static JsonArray array(float... values){   if (values == null) {     throw new NullPointerException(\"values is null\");   }   JsonArray array=new JsonArray();   for (  float value : values) {     array.add(value);   }   return array; } "
"public static void assertEqualModelItems(Map<? extends ModelItem,? extends ModelItem> actual,Map<? extends ModelItem,? extends ModelItem> expected){   assertEqualModelItems(actual,expected,null); } "
"private MotionEvent swapXY(MotionEvent ev){   float width=getWidth();   float height=getHeight();   float newX=(ev.getY() / height) * width;   float newY=(ev.getX() / width) * height;   ev.setLocation(newX,newY);   return ev; } "
"public boolean isEmpty(){   return (geometryType == null) || segmentList.isEmpty(); } "
"private static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){   if (bigDecimal.precision() > allowedPrecision) {     return null;   }   return bigDecimal; } "
"public void shutdown() throws DataSourceException {   if (createdSessionFactory) {     if (sessionFactory != null && !sessionFactory.isClosed()) {       try {         sessionFactory.close();       }   finally {         sessionFactory=null;       }     }   } } "
"@Override public void updateReport(AllTablesReportDelta delta){   checkNotNull(delta,\"delta\");   updateMetadata(delta);   if (delta.getTable().isPresent()) {     updateTableData(delta,delta.getTable().get());   } } "
"@Nullable private static File findManifestDirectory(@NotNull SourceProvider sourceProvider){   File manifestFile=sourceProvider.getManifestFile();   File manifestDir=manifestFile.getParentFile();   if (manifestDir != null) {     return manifestDir;   }   return null; } "
"public static Flowable<Integer> characters(CharSequence string){   return RxJavaPlugins.onAssembly(new FlowableCharSequence(string)); } "
"public boolean isNavBarTintEnabled(){   return mNavBarTintEnabled; } "
"public void handleDecode(Result rawResult){   inactivityTimer.onActivity();   beepManager.playBeepSoundAndVibrate();   handleDecodeExternally(rawResult); } "
"private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {   return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' ')); } "
"public void dismissAutoSigninSnackbar(){   if (mSnackbarManager.isShowing()) {     mSnackbarManager.dismissSnackbars(this);   } } "
"public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_CANCELED(int nameId){   return new SM_SYSTEM_MESSAGE(1300450,new DescriptionId(nameId)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_END_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200612,skillcaster,skillname); } "
"@Override public void onUserCancel(){   if (checkCB != null) {     checkCB.onUserCancel();   }   Recycler.release(this); } "
"public BigDecimal bigDecimalValue(final int scale,final int roundingMode){   return new BigDecimal(numerator).divide(new BigDecimal(denominator),scale,roundingMode); } "
"public KMeansPlusPlusClusterer(final int k,final int maxIterations,final DistanceMeasure measure,final RandomGenerator random,final EmptyClusterStrategy emptyStrategy){   super(measure);   this.k=k;   this.maxIterations=maxIterations;   this.random=random;   this.emptyStrategy=emptyStrategy; } "
"public PhotosEditAlbumQuery privacyComment(String... value){   return unsafeParam(\"privacy_comment\",value); } "
"private void adjustBottom(RectF rect,float bottom,RectF bounds,int viewHeight,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){   float newBottom=bottom;   if (newBottom > viewHeight) {     newBottom=viewHeight + (newBottom - viewHeight) / 1.05f;     mTouchOffset.y-=(newBottom - viewHeight) / 1.1f;   }   if (newBottom > bounds.bottom) {     mTouchOffset.y-=(newBottom - bounds.bottom) / 2f;   }   if (bounds.bottom - newBottom < snapMargin) {     newBottom=bounds.bottom;   }   if (newBottom - rect.top < mMinCropHeight) {     newBottom=rect.top + mMinCropHeight;   }   if (newBottom - rect.top > mMaxCropHeight) {     newBottom=rect.top + mMaxCropHeight;   }   if (bounds.bottom - newBottom < snapMargin) {     newBottom=bounds.bottom;   }   if (aspectRatio > 0) {     float newWidth=(newBottom - rect.top) * aspectRatio;     if (newWidth < mMinCropWidth) {       newBottom=Math.min(bounds.bottom,rect.top + mMinCropWidth / aspectRatio);       newWidth=(newBottom - rect.top) * aspectRatio;     }     if (newWidth > mMaxCropWidth) {       newBottom=Math.min(bounds.bottom,rect.top + mMaxCropWidth / aspectRatio);       newWidth=(newBottom - rect.top) * aspectRatio;     }     if (leftMoves && rightMoves) {       newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + bounds.width() / aspectRatio));     }  else {       if (leftMoves && rect.right - newWidth < bounds.left) {         newBottom=Math.min(bounds.bottom,rect.top + (rect.right - bounds.left) / aspectRatio);         newWidth=(newBottom - rect.top) * aspectRatio;       }       if (rightMoves && rect.left + newWidth > bounds.right) {         newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + (bounds.right - rect.left) / aspectRatio));       }     }   }   rect.bottom=newBottom; } "
"private void tabCreatedInForeground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){   LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NO_TITLE);   if (mLayoutTabs == null || mLayoutTabs.length == 0) {     mLayoutTabs=new LayoutTab[]{newLayoutTab};   }  else {     mLayoutTabs=new LayoutTab[]{mLayoutTabs[0],newLayoutTab};   }   updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));   newLayoutTab.setBorderAlpha(0.0f);   newLayoutTab.setStaticToViewBlend(1.f);   forceAnimationToFinish();   Interpolator interpolator=BakedBezierInterpolator.TRANSFORM_CURVE;   addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);   addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);   addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);   addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);   mTabModelSelector.selectModel(newIsIncognito);   startHiding(id,false); } "
"public static <K>MapStack<K> create(MapStack<K> source){   MapStack<K> newValue=new MapStack<K>();   newValue.stackList.addAll(source.stackList);   return newValue; } "
"public static int[] sortValues(Matrix m){   double[] v=new double[m.getColumnDimension()];   int[] index=new int[v.length];   for (int i=0; i < v.length; i++) {     v[i]=m.get(i,i);     index[i]=i;   }   for (int i=0; i < v.length; i++) {     for (int j=i + 1; j < v.length; j++) {       if (Math.abs(v[i]) < Math.abs(v[j])) {         double tmpValue=v[j];         v[j]=v[i];         v[i]=tmpValue;         int tmpIndex=index[j];         index[j]=index[i];         index[i]=tmpIndex;       }     }   }   return index; } "
"public R reduce(List<AsyncResult<T>> results) throws Exception {   return reducer.reduce(results); } "
"@Override public void endContentModel(Augmentations augmentations) throws XNIException { } "
"public void toNativeArray(short[] dest,int offset,int len){   if (len == 0) {     return;   }   if (offset < 0 || offset >= _pos) {     throw new ArrayIndexOutOfBoundsException(offset);   }   System.arraycopy(_data,offset,dest,0,len); } "
"public int[] calculateAspectRatio(int origWidth,int origHeight){   int newWidth=this.targetWidth;   int newHeight=this.targetHeight;   if (newWidth <= 0 && newHeight <= 0) {     newWidth=origWidth;     newHeight=origHeight;   }  else   if (newWidth > 0 && newHeight <= 0) {     newHeight=(newWidth * origHeight) / origWidth;   }  else   if (newWidth <= 0 && newHeight > 0) {     newWidth=(newHeight * origWidth) / origHeight;   }  else {     double newRatio=newWidth / (double)newHeight;     double origRatio=origWidth / (double)origHeight;     if (origRatio > newRatio) {       newHeight=(newWidth * origHeight) / origWidth;     }  else     if (origRatio < newRatio) {       newWidth=(newHeight * origWidth) / origHeight;     }   }   int[] retval=new int[2];   retval[0]=newWidth;   retval[1]=newHeight;   return retval; } "
"public static byte shortToUlaw(short sample){   final int[] exp_lut={0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};   int sign, exponent, mantissa;   short ulawbyte;   final short CLIP=32635;   final short BIAS=0x0084;   sign=(sample >> 8) & 0x80;   if (sign != 0) {     sample=(short)-sample;   }   if (sample > CLIP)   sample=CLIP;   sample=(short)(sample + BIAS);   exponent=exp_lut[(sample >> 7) & 0xFF];   mantissa=(sample >> (exponent + 3)) & 0x0F;   ulawbyte=(short)((~(sign | (exponent << 4) | mantissa)) & 0x00FF);   if (ulawbyte == 0)   ulawbyte=0x02;   return (byte)(ulawbyte - 128); } "
"public final TObjectType filter(TObjectType obj){   return obj; } "
"private int klattRule6(Element segment){   Element syllable=getSyllable(segment);   if (isInOnset(segment) && !isWordInitial(syllable)) {     return getPropertyAsInteger(\"rule6.onset\");   }  else   if (isInCoda(segment)) {     return getPropertyAsInteger(\"rule6.coda\");   }   return 100; } "
"public RepositoryChanged cloneGitRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String branch,boolean useCredentials){   boolean successful=false;   Singleton.getLogger().info(\"Attempting to clone \" + repoRemoteLocation);   try {     CloneCommand cloneCommand=Git.cloneRepository();     cloneCommand.setURI(repoRemoteLocation);     cloneCommand.setDirectory(new File(repoLocations + \"/\" + repoName+ \"/\"));     cloneCommand.setCloneAllBranches(true);     cloneCommand.setBranch(branch);     if (useCredentials) {       cloneCommand.setCredentialsProvider(new UsernamePasswordCredentialsProvider(repoUserName,repoPassword));     }     cloneCommand.call();     successful=true;   }  catch (  GitAPIException|InvalidPathException ex) {     successful=false;     Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \"+ this.getClass()+ \" cloneGitRepository for \"+ repoName+ \"\\n with message: \"+ ex.getMessage());   }   RepositoryChanged repositoryChanged=new RepositoryChanged(successful);   repositoryChanged.setClone(true);   return repositoryChanged; } "
"private static String[] toSuffixes(String[] extensions){   String[] suffixes=new String[extensions.length];   for (int i=0; i < extensions.length; i++) {     suffixes[i]=\".\" + extensions[i];   }   return suffixes; } "
"public MarketGetAlbumByIdQuery(VkApiClient client,UserActor actor,int ownerId,List<Integer> albumIds){   super(client,\"market.getAlbumById\",GetAlbumByIdResponse.class);   accessToken(actor.getAccessToken());   ownerId(ownerId);   albumIds(albumIds); } "
"public static void printSyntax(){   System.out.println(\"Syntax:\\n\" + HLDATextGenerator.class.getName() + \" [-inputDir=corpusPath] [-inputDirFlat] [-model=modelFile]\"+ \" [-docMatrix=docMatrixFile] [-levels=#] [-iters=#] [-burnIn=#] [-alpha=#.##] [-beta=#.##] [-threads=#]\"+ \" [-recalc] [-textMeanSize=#]\\n\"+ \"-inputDir=corpusPath\\tThe directory with the input documents. Can contain subdirectories for categories or not \"+ \"(see -inputDirFlat option).\\n\"+ \"-inputDirFlat\\tIf supplied expects that the input document directory contains the documents in itself, and\"+ \" not in subdirectories.\\n\"+ \"-model=modelFile\\t The modelfile that holds or should hold HLDA model data. If no such file exists, it is created.\\n\"+ \"-docMatrix=docMatrixFile\\t The modelfile that holds or should hold document word matric data.\\n\"+ \"If no such file exists, it is created.\\n\"+ \"-levels=#\\tThe levels of the hierarchy in the model.\\n\"+ \"-iters=#\\tThe iterations for the HLDA inference.\\n\"+ \"-burnIn=#\\tThe burn-in iterations for the HLDA inference.\\n\"+ \"-alpha=#\\tThe alpha parameter for the HLDA inference.\\n\"+ \"-beta=#\\tThe beta parameter for the HLDA inference.\\n\"+ \"-threads=#\\tThe number of threads to use for the inference.\\n\"+ \"-recalc\\tIf supplied, will ignore model and document matrix data and recalculate them.\\n\"+ \"-textMeanSize=#\\tThe mean number of words for the supplied texts.\"); } "
"private void testRotate(){   JniBitmapHolder holder=new JniBitmapHolder();   holder.storeBitmap(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));   holder.rotateBitmap180();   ImageView icon=new ImageView(this);   icon.setImageBitmap(holder.getBitmapAndFree());   Toast toast=new Toast(this);   toast.setView(icon);   toast.setDuration(Toast.LENGTH_LONG);   toast.show(); } "
"void restoreRotationState(@NonNull ContentResolver contentResolver){   Settings.System.putInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION,originalAccelerometer);   Settings.System.putInt(contentResolver,Settings.System.USER_ROTATION,originalUserRotation); } "
"public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE(String value0){   return new SM_SYSTEM_MESSAGE(1300619,value0); } "
"public byte[] toByteArray(){   try {     AxmlWriter aw=new AxmlWriter();     for (    AXmlNamespace ns : this.getDocument().getNamespaces())     aw.ns(ns.getPrefix(),ns.getUri(),ns.getLine());     writeNode(aw,this.getDocument().getRootNode());     return aw.toByteArray();   }  catch (  IOException e) {     e.printStackTrace();   }   return null; } "
"public void synthesisWithContinuousFeatureProcessors() throws Exception {   int i, j, n, t;   String feaFile=\"/project/mary/marcela/f0-hsmm-experiment/THAT_BALL.pfeats\";   HTSEngine hmm_tts=new HTSEngine();   HMMData htsData=new HMMData();   String MaryBase=\"/project/mary/marcela/openmary/\";   String voiceName=\"cmu-slt-hsmm\";   String voiceConfig=\"en_US-cmu-slt-hsmm.config\";   String outWavFile=MaryBase + \"tmp/tmp.wav\";   htsData.initHMMData(voiceName,MaryBase,voiceConfig);   htsData.setUseAcousticModels(true);   htsData.setUseGV(true);   htsData.setUseMixExc(true);   htsData.setUseFourierMag(true);   HTSUttModel um=new HTSUttModel();   HTSParameterGeneration pdf2par=new HTSParameterGeneration();   HTSVocoder par2speech=new HTSVocoder();   AudioInputStream ais;   try {     um=hmm_tts.processUttFromFile(feaFile,htsData);     boolean debug=false;     pdf2par.htsMaximumLikelihoodParameterGeneration(um,htsData);     ais=par2speech.htsMLSAVocoder(pdf2par,htsData);     System.out.println(\"saving to file: \" + outWavFile);     File fileOut=new File(outWavFile);     if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,ais)) {       AudioSystem.write(ais,AudioFileFormat.Type.WAVE,fileOut);     }     System.out.println(\"Calling audioplayer:\");     AudioPlayer player=new AudioPlayer(fileOut);     player.start();     player.join();     System.out.println(\"audioplayer finished...\");   }  catch (  Exception e) {     System.err.println(\"Exception: \" + e.getMessage());   } } "
"@Override public boolean accept(File file){   if (fileFilter != null) {     return fileFilter.accept(file);   }  else {     return super.accept(file);   } } "
"public void syncLocationManager2InfoSection(LocationManager locationManager) throws IOException {   if (textStoragePolicy != locationManager.getTextStoragePolicy())   throw new IOException(\"setLocationManager(): attempting to change textStoragePolicy from \" + textStoragePolicy + \" to \"+ locationManager.getTextStoragePolicy());   textStoragePolicy=locationManager.getTextStoragePolicy();   textFileNames=locationManager.getFileNames();   textFileSizes=locationManager.getFileSizes(); } "
"public void clear(){   oredCriteria.clear();   orderByClause=null;   distinct=false; } "
"public void addStatus(final ConfigConstants.Status pStatus){   if (pStatus.severity > status.severity) {     status=pStatus;   } } "
"@Nullable public static ModelWizardDialog createDialogForPaths(@Nullable Component parent,@NotNull Collection<String> requestedPaths,boolean backgroundable){   return createDialog(null,parent,requestedPaths,null,null,getSdkHandler(),backgroundable); } "
"private ReferentUuids(){   throw new AssertionError(); } "
"private void changeSize(float targetSize,float parentSize,View targetView){   ViewGroup.LayoutParams params=targetView.getLayoutParams();   if (targetSize != 0.0f) {     params.width=(int)targetSize;     params.height=(int)targetSize;   }  else {     if (parentSize != 0.0f) {       params.width=(int)parentSize;       params.height=(int)parentSize;     }   }   targetView.setLayoutParams(params); } "
"public boolean compareAndSet(final long expectedValue,final long newValue){   return UNSAFE.compareAndSwapLong(this,VALUE_OFFSET,expectedValue,newValue); } "
"public void testApp(){   assertTrue(true); } "
"public AdsUpdateTargetGroupQuery clientId(Integer value){   return unsafeParam(\"client_id\",value); } "
"public static Cursor query(ContentResolver cr){   return cr.query(CONTENT_URI,PROJECTION,WHERE,WHERE_ARGS,SORT_ORDER); } "
"public ByteArrayOutputStream(int size){   if (size < 0) {     throw new IllegalArgumentException(\"Negative initial size: \" + size);   } synchronized (this) {     needNewBuffer(size);   } } "
"public TObjectHash(TObjectHashingStrategy<T> strategy){   super();   this._hashingStrategy=strategy; } "
"public static Map<String,Object> updateAffiliate(DispatchContext ctx,Map<String,? extends Object> context){   Delegator delegator=ctx.getDelegator();   Locale locale=(Locale)context.get(\"locale\");   String partyId=getPartyId(context);   if (UtilValidate.isEmpty(partyId)) {     return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,\"serviceUtil.party_id_missing\",locale));   }   GenericValue affiliate=null;   try {     affiliate=EntityQuery.use(delegator).from(\"Affiliate\").where(\"partyId\",partyId).queryOne();   }  catch (  GenericEntityException e) {     Debug.logWarning(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"partyservices.could_not_update_affiliate_information_read\",UtilMisc.toMap(\"errMessage\",e.getMessage()),locale));   }   if (affiliate == null) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"partyservices.could_not_update_affiliate_information_not_found\",locale));   }   affiliate.setNonPKFields(context);   try {     affiliate.store();   }  catch (  GenericEntityException e) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"partyservices.could_not_update_affiliate_information_write\",UtilMisc.toMap(\"errMessage\",e.getMessage()),locale));   }   return ServiceUtil.returnSuccess(); } "
"public static void createAccessorMethods(Body body,Stmt before,Stmt after){   soot.util.Chain units=body.getUnits();   if (before != null && !units.contains(before))   throw new RuntimeException();   if (after != null && !units.contains(after))   throw new RuntimeException();   ArrayList<Unit> unitList=new ArrayList<Unit>();   unitList.addAll(units);   boolean bInside=before == null;   for (  Unit unit : unitList) {     Stmt s=(Stmt)unit;     if (bInside) {       if (s == after)       return;       if (!isAccessLegal(body.getMethod(),s))       createAccessorMethod(body.getMethod(),s);     }  else {       if (s == before)       bInside=true;     }   } } "
"Rows<Application.Name,String> cqlWithApplication(String cql,Application.Name applicationName){   try {     OperationResult<CqlResult<Application.Name,String>> result=driver.getKeyspace().prepareQuery(keyspace.auditlogCF()).withCql(cql).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).execute();     return result.getResult().getRows();   }  catch (  ConnectionException e) {     throw new RepositoryException(String.format(\"Can not retrieve auditlog for application %s.\",applicationName),e);   } } "
"public DefaultScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int from,int size){   super(sqlQuery,sessionFactory,fetchSize,performOrderById,from,size); } "
"public static Bitmap clipToCircle(Bitmap bitmap){   if (bitmap == null) {     return null;   }   final int width=bitmap.getWidth();   final int height=bitmap.getHeight();   final Bitmap outputBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);   final Path path=new Path();   path.addCircle((float)(width / 2),(float)(height / 2),(float)Math.min(width,(height / 2)),Path.Direction.CCW);   final Canvas canvas=new Canvas(outputBitmap);   canvas.clipPath(path);   canvas.drawBitmap(bitmap,0,0,null);   return outputBitmap; } "
"public GSMapMessageImpl(GSSessionImpl session) throws JMSException {   this(session,null); } "
"Domino<T,R> newThread(){   return schedule(new NewThreadScheduler()); } "
"public DefaultScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById){   super(entityName,sessionFactory,fetchSize,performOrderById); } "
"public SiteAdminPage waitForConfirmationWindow(){   siteAdminConfirmationWindow.waitToBeDisplayed();   return this; } "
"@Override public Object clone(){   try {     return super.clone();   }  catch (  CloneNotSupportedException ex) {     throw new InternalError();   } } "
"public void testCorpusFile(){   byte[] inputBytes=(\"title\\0one\\0\\0id\\000123\\0\\0content\\0body\\0text\\0\\0\\0\" + \"title\\0two\\0\\0id\\000456\\0\\0content\\0some\\0more\\0body\\0text\\0\\0\\0\" + \"\\0\").getBytes(StandardCharsets.UTF_8);   ByteArrayInputStream input=new ByteArrayInputStream(inputBytes);   ByteArrayOutputStream output=new ByteArrayOutputStream();   DocumentProcessor processor=new DocumentProcessor(output);   CorpusFile corpus=new CorpusFile(input);   corpus.process(processor);   byte[] outputBytes=output.toByteArray();   assertTrue(Arrays.equals(outputBytes,inputBytes)); } "
"ConcurrentSuiteRunnerScheduler(Class<?> clazz,Properties properties,ReportingHandler reportingHandler,WebDriverRegistry webDriverRegistry){   this.properties=properties;   this.reportingHandler=reportingHandler;   this.webDriverRegistry=webDriverRegistry;   executorService=Executors.newFixedThreadPool(determineNumberOfThreads(clazz),new NamedThreadFactory(clazz.getSimpleName()));   completionService=new ExecutorCompletionService<>(executorService); } "
"public static void w(String tag,String s,Object... args){   if (LOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args)); } "
"public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){   Rect rect=getFramingRectInPreview();   if (rect == null) {     return null;   }   return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false); } "
"@Override public String toString(){   StringBuffer str=new StringBuffer();   boolean comma=false;   if (prefix != null) {     str.append(\"prefix=\\\"\").append(prefix).append('\"');     comma=true;   }   if (localpart != null) {     if (comma) {       str.append(',');     }     str.append(\"localpart=\\\"\").append(localpart).append('\"');     comma=true;   }   if (rawname != null) {     if (comma) {       str.append(',');     }     str.append(\"rawname=\\\"\").append(rawname).append('\"');     comma=true;   }   if (uri != null) {     if (comma) {       str.append(',');     }     str.append(\"uri=\\\"\").append(uri).append('\"');   }   return str.toString(); } "
"public static boolean isExtension(String filename,String extension){   if (filename == null) {     return false;   }   if (extension == null || extension.length() == 0) {     return indexOfExtension(filename) == -1;   }   String fileExt=getExtension(filename);   return fileExt.equals(extension); } "
"public Criteria or(){   Criteria criteria=createCriteriaInternal();   oredCriteria.add(criteria);   return criteria; } "
"public static Map<String,Object> authOrderPaymentPreference(DispatchContext dctx,Map<String,? extends Object> context){   Delegator delegator=dctx.getDelegator();   LocalDispatcher dispatcher=dctx.getDispatcher();   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   Locale locale=(Locale)context.get(\"locale\");   String orderPaymentPreferenceId=(String)context.get(\"orderPaymentPreferenceId\");   BigDecimal overrideAmount=(BigDecimal)context.get(\"overrideAmount\");   if (overrideAmount != null) {     if (overrideAmount.compareTo(BigDecimal.ZERO) < 0) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"AccountingPaymentAmountIsNegative\",UtilMisc.toMap(\"overrideAmount\",overrideAmount),locale));     }     if (overrideAmount.compareTo(BigDecimal.ZERO) == 0) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"AccountingPaymentAmountIsZero\",UtilMisc.toMap(\"overrideAmount\",overrideAmount),locale));     }   }   GenericValue orderHeader=null;   GenericValue orderPaymentPreference=null;   try {     orderPaymentPreference=EntityQuery.use(delegator).from(\"OrderPaymentPreference\").where(\"orderPaymentPreferenceId\",orderPaymentPreferenceId).queryOne();     orderHeader=orderPaymentPreference.getRelatedOne(\"OrderHeader\",false);   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"AccountingProblemGettingOrderPaymentPreferences\",locale) + \" \" + orderPaymentPreferenceId);   }   OrderReadHelper orh=new OrderReadHelper(orderHeader);   BigDecimal totalRemaining=orh.getOrderGrandTotal();   Long procAttempt=orderPaymentPreference.getLong(\"processAttempt\");   if (procAttempt == null) {     procAttempt=Long.valueOf(0);   }   orderPaymentPreference.set(\"processAttempt\",Long.valueOf(procAttempt.longValue() + 1));   try {     orderPaymentPreference.store();     orderPaymentPreference.refresh();   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"AccountingProblemGettingOrderPaymentPreferences\",locale));   }   boolean reAuth=false;   if (orderPaymentPreference.get(\"statusId\") != null && \"PAYMENT_AUTHORIZED\".equals(orderPaymentPreference.getString(\"statusId\"))) {     reAuth=true;   }   BigDecimal transAmount=null;   if (overrideAmount != null) {     transAmount=overrideAmount;   }  else {     transAmount=orderPaymentPreference.getBigDecimal(\"maxAmount\");   }   transAmount=transAmount.setScale(decimals,rounding);   if ((transAmount != null) && (transAmount.compareTo(BigDecimal.ZERO) <= 0)) {     Map<String,Object> results=ServiceUtil.returnSuccess();     results.put(\"finished\",Boolean.TRUE);     results.put(\"errors\",Boolean.FALSE);     return results;   }   try {     Map<String,Object> authPaymentResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);     if (authPaymentResult != null) {       BigDecimal thisAmount=(BigDecimal)authPaymentResult.get(\"processAmount\");       try {         boolean processResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);         if (processResult) {           Map<String,Object> results=ServiceUtil.returnSuccess();           results.put(\"messages\",authPaymentResult.get(\"customerRespMsgs\"));           results.put(\"processAmount\",thisAmount);           results.put(\"finished\",Boolean.TRUE);           results.put(\"errors\",Boolean.FALSE);           results.put(\"authCode\",authPaymentResult.get(\"authCode\"));           return results;         }  else {           boolean needsNsfRetry=needsNsfRetry(orderPaymentPreference,authPaymentResult,delegator);           if (needsNsfRetry) {           }           if (!needsNsfRetry) {             if (UtilValidate.isNotEmpty(orderHeader.getString(\"autoOrderShoppingListId\"))) {               GenericValue productStore=orderHeader.getRelatedOne(\"ProductStore\",false);               if (\"Y\".equals(productStore.getString(\"autoOrderCcTryOtherCards\"))) {                 List<GenericValue> otherPaymentMethodAndCreditCardList=null;                 String billToPartyId=null;                 GenericValue billToParty=orh.getBillToParty();                 if (billToParty != null) {                   billToPartyId=billToParty.getString(\"partyId\");                 }  else {                 }                 if (UtilValidate.isNotEmpty(billToPartyId)) {                   otherPaymentMethodAndCreditCardList=EntityQuery.use(delegator).from(\"PaymentMethodAndCreditCard\").where(\"partyId\",billToPartyId,\"paymentMethodTypeId\",\"CREDIT_CARD\").filterByDate().queryList();                 }                 if (UtilValidate.isNotEmpty(otherPaymentMethodAndCreditCardList)) {                   for (                  GenericValue otherPaymentMethodAndCreditCard : otherPaymentMethodAndCreditCardList) {                     orderPaymentPreference.set(\"paymentMethodId\",otherPaymentMethodAndCreditCard.getString(\"paymentMethodId\"));                     Map<String,Object> authRetryResult=authPayment(dispatcher,userLogin,orh,orderPaymentPreference,totalRemaining,reAuth,transAmount);                     try {                       boolean processRetryResult=processResult(dctx,authPaymentResult,userLogin,orderPaymentPreference,locale);                       if (processRetryResult) {                         orderPaymentPreference.store();                         Map<String,Object> results=ServiceUtil.returnSuccess();                         results.put(\"messages\",authRetryResult.get(\"customerRespMsgs\"));                         results.put(\"processAmount\",thisAmount);                         results.put(\"finished\",Boolean.TRUE);                         results.put(\"errors\",Boolean.FALSE);                         return results;                       }                     }  catch (                    GeneralException e) {                       String errMsg=\"Error saving and processing payment authorization results: \" + e.toString();                       Debug.logError(e,errMsg + \"; authRetryResult: \" + authRetryResult,module);                       Map<String,Object> results=ServiceUtil.returnSuccess();                       results.put(ModelService.ERROR_MESSAGE,errMsg);                       results.put(\"finished\",Boolean.FALSE);                       results.put(\"errors\",Boolean.TRUE);                       return results;                     }                   }                 }               }             }           }           Map<String,Object> results=ServiceUtil.returnSuccess();           results.put(\"messages\",authPaymentResult.get(\"customerRespMsgs\"));           results.put(\"finished\",Boolean.FALSE);           results.put(\"errors\",Boolean.FALSE);           return results;         }       }  catch (      GeneralException e) {         String errMsg=\"Error saving and processing payment authorization results: \" + e.toString();         Debug.logError(e,errMsg + \"; authPaymentResult: \" + authPaymentResult,module);         Map<String,Object> results=ServiceUtil.returnSuccess();         results.put(ModelService.ERROR_MESSAGE,errMsg);         results.put(\"finished\",Boolean.FALSE);         results.put(\"errors\",Boolean.TRUE);         return results;       }     }  else {       String errMsg=\"Invalid Order Payment Preference: maxAmount is 0\";       Debug.logInfo(errMsg,module);       Map<String,Object> results=ServiceUtil.returnSuccess();       results.put(\"finished\",Boolean.FALSE);       results.put(\"errors\",Boolean.TRUE);       results.put(ModelService.ERROR_MESSAGE,errMsg);       orderPaymentPreference.set(\"statusId\",\"PAYMENT_CANCELLED\");       try {         orderPaymentPreference.store();       }  catch (      GenericEntityException e) {         Debug.logError(e,\"ERROR: Problem setting OrderPaymentPreference status to CANCELLED\",module);       }       return results;     }   }  catch (  GeneralException e) {     Debug.logError(e,\"Error processing payment authorization\",module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"AccountingPaymentCannotBeAuthorized\",UtilMisc.toMap(\"errroString\",e.toString()),locale));   } } "
"public static boolean isUrlUsable(String url){   if (AppUtils.isEmpty(url)) {     return false;   }   URL urlTemp=null;   HttpURLConnection connt=null;   try {     urlTemp=new URL(url);     connt=(HttpURLConnection)urlTemp.openConnection();     connt.setRequestMethod(\"HEAD\");     int returnCode=connt.getResponseCode();     if (returnCode == HttpURLConnection.HTTP_OK) {       return true;     }   }  catch (  Exception e) {     return false;   }  finally {     connt.disconnect();   }   return false; } "
"static int readInt(final byte[] b,final int index){   return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF); } "
"private void requestFocus(View view){   if (view.requestFocus()) {     getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);   } } "
"public AdsUpdateTargetGroupQuery lifetime(Integer value){   return unsafeParam(\"lifetime\",value); } "
"public boolean contains(S2Point p){   return contains(S2CellId.fromPoint(p)); } "
"private void notifyActionListeners(String command){   ActionListener[] listeners=this.getListeners(ActionListener.class);   int size=listeners.length;   ActionEvent event=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,command);   for (int i=0; i < size; i++) {     listeners[i].actionPerformed(event);   } } "
"public ProtocolException(String s,Throwable ex){   super(s,ex);   if (ex == null)   throw new IllegalArgumentException(\"The cause object can't be null.\"); } "
"public ObjectFactory(){ } "
"private void moveToState(final State newState,final boolean hasLifecycleMethodBeenCalled){   final State oldState=mState;   if (hasLifecycleMethodBeenCalled) {     if (newState != oldState) {       throw new IllegalStateException(\"first call moveToState(<state>, false);\");     }   }   if (newState != oldState) { switch (oldState) { case INITIALIZED:       if (newState == State.VIEW_DETACHED) {         break;       }  else {         throw new IllegalStateException(\"Can't move to state \" + newState + \", the next state after INITIALIZED has to be VIEW_DETACHED\");       } case VIEW_DETACHED:     if (newState == State.VIEW_ATTACHED) {       break;     }  else     if (newState == State.DESTROYED) {       break;     }  else {       throw new IllegalStateException(\"Can't move to state \" + newState + \", the allowed states after VIEW_DETACHED are VIEW_ATTACHED or DESTROYED\");     } case VIEW_ATTACHED:   if (newState == State.VIEW_DETACHED) {     break;   }  else {     throw new IllegalStateException(\"Can't move to state \" + newState + \", the next state after VIEW_ATTACHED has to be VIEW_DETACHED\");   } case DESTROYED: throw new IllegalStateException(\"once destroyed the presenter can't be moved to a different state\"); } mState=newState; } for (int i=0; i < mLifecycleObservers.size(); i++) { mLifecycleObservers.get(i).onChange(newState,hasLifecycleMethodBeenCalled); } } "
"public static long parseDateAsEpoch(String dateStr){   try {     return DateUtils.parseDate(dateStr).getTime();   }  catch (  DateParseException e) {     return 0;   } } "
"public GroupsIsMemberQueryWithUserIds isMember(UserActor actor,String groupId,Integer... userIds){   return new GroupsIsMemberQueryWithUserIds(getClient(),actor,groupId,userIds); } "
"public boolean isSpringDamper(){   return this.frequency > 0.0 && this.dampingRatio > 0.0; } "
"@Before public void loadMemory() throws IOException {   this.chip8=Chip8Utils.createFromRom(E03ClockExecutionAndMemoryTest.class.getResource(\"/E03TestRom.ch8\")); } "
"public BoundingVolume mergeLocal(BoundingVolume volume){   if (volume == null) {     return this;   } switch (volume.getType()) { case Sphere: {       BoundingSphere sphere=(BoundingSphere)volume;       float temp_radius=sphere.getRadius();       Vector3f temp_center=sphere.center;       return merge(temp_radius,temp_center,this);     } case AABB: {     BoundingBox box=(BoundingBox)volume;     Vector3f radVect=Vector3f.newInstance();     radVect.set(box.xExtent,box.yExtent,box.zExtent);     Vector3f temp_center=box.center;     float len=radVect.length();     Vector3f.recycle(radVect);     return merge(len,temp_center,this);   } default : return null; } } "
"public UpgradePatchRetry(Context context){   this.context=context;   retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);   tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME); } "
"@Override public boolean isDeprecated(){   return proto.getOptions().getDeprecated(); } "
"public int send(OutputStream out) throws IOException {   FileInputStream fis;   int readBytes;   byte[] buff=new byte[256 * 1024];   fis=new FileInputStream(this.local_filename);   try {     while ((readBytes=fis.read(buff)) >= 0) {       if (readBytes == 0) {         continue;       }       out.write(buff,0,readBytes);     }   }   finally {     fis.close();   }   return 0; } "
"@SuppressWarnings(\"unused\") @Deprecated private boolean isDataExists(DataSupport baseObj,DataSupport associatedModel){   boolean exists=false;   SQLiteDatabase db=Connector.getDatabase();   Cursor cursor=null;   try {     cursor=db.query(getJoinTableName(baseObj,associatedModel),null,getSelection(baseObj,associatedModel),getSelectionArgs(baseObj,associatedModel),null,null,null);     exists=cursor.getCount() > 0;   }  catch (  Exception e) {     e.printStackTrace();     return true;   }  finally {     cursor.close();   }   return exists; } "
"public static int hash32(final byte[] data,int length,int seed){   final int m=0x5bd1e995;   final int r=24;   int h=seed ^ length;   int length4=length / 4;   for (int i=0; i < length4; i++) {     final int i4=i * 4;     int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);     k*=m;     k^=k >>> r;     k*=m;     h*=m;     h^=k;   } switch (length % 4) { case 3:     h^=(data[(length & ~3) + 2] & 0xff) << 16; case 2:   h^=(data[(length & ~3) + 1] & 0xff) << 8; case 1: h^=(data[length & ~3] & 0xff); h*=m; } h^=h >>> 13; h*=m; h^=h >>> 15; return h; } "
"public static String convertTeamColorToName(final int teamValue){   final Team[] teams=Team.values();   for (  final Team team : teams) {     if (team.getValue() == teamValue) {       return StringUtils.capitalize(team.toString().toLowerCase().replaceAll(\"team_\",\"\"));     }   }   return \"UNKNOWN_TEAM\"; } "
"public static Optional<File> find(File base,final String name){   checkArgument(base.isDirectory(),\"'base' must be a directory.\");   return Files.fileTreeTraverser().preOrderTraversal(base).filter(Predicates.compose(Predicates.equalTo(name),GET_NAME)).last(); } "
"public static boolean isNumericType(Class type){   return (type == byte.class || type == short.class || type == int.class || type == long.class || type == double.class || type == float.class); } "
"private void notifyUIRefreshComplete(boolean ignoreHook){   if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {     if (DEBUG) {       PtrCLog.d(LOG_TAG,\"notifyUIRefreshComplete mRefreshCompleteHook run.\");     }     mRefreshCompleteHook.takeOver();     return;   }   if (mPtrUIHandlerHolder.hasHandler()) {     if (DEBUG) {       PtrCLog.i(LOG_TAG,\"PtrUIHandler: onUIRefreshComplete\");     }     mPtrUIHandlerHolder.onUIRefreshComplete(this);   }   mPtrIndicator.onUIRefreshComplete();   tryScrollBackToTopAfterComplete();   tryToNotifyReset(); } "
"public GroupsGetQuery filter(List<GroupsGetFilter> value){   return unsafeParam(\"filter\",value); } "
"public static void clearCache(Context context){   cleanExternalCache(context);   cleanInternalCache(context); } "
"public ArithmeticMaker(MetricDictionary metricDictionary,ArithmeticPostAggregationFunction function,ColumnMapper resultSetMapper){   super(metricDictionary);   this.function=function;   this.resultSetMapper=resultSetMapper; } "
"public static StateListDrawable btnSelector(float radius,int normalColor,int pressColor,int postion){   StateListDrawable bg=new StateListDrawable();   Drawable normal=null;   Drawable pressed=null;   if (postion == 0) {     normal=cornerDrawable(normalColor,new float[]{0,0,0,0,0,0,radius,radius});     pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,0,0,radius,radius});   }  else   if (postion == 1) {     normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,0,0});     pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,0,0});   }  else   if (postion == -1) {     normal=cornerDrawable(normalColor,new float[]{0,0,0,0,radius,radius,radius,radius});     pressed=cornerDrawable(pressColor,new float[]{0,0,0,0,radius,radius,radius,radius});   }  else   if (postion == -2) {     normal=cornerDrawable(normalColor,radius);     pressed=cornerDrawable(pressColor,radius);   }   bg.addState(new int[]{-android.R.attr.state_pressed},normal);   bg.addState(new int[]{android.R.attr.state_pressed},pressed);   return bg; } "
"public void populateDirectoryParameters(){   File projectRoot=new File(getString(NewModuleWizardState.ATTR_PROJECT_LOCATION));   File moduleRoot=new File(projectRoot,getString(FormFactorUtils.ATTR_MODULE_NAME));   File mainFlavorSourceRoot=new File(moduleRoot,TemplateWizard.MAIN_FLAVOR_SOURCE_PATH);   File testSourceRoot=new File(moduleRoot,TemplateWizard.TEST_SOURCE_PATH);   if (!myParameters.containsKey(ATTR_RES_OUT) || myParameters.get(ATTR_RES_OUT) == null) {     File resourceSourceRoot=new File(mainFlavorSourceRoot,TemplateWizard.RESOURCE_SOURCE_PATH);     put(ATTR_RES_OUT,FileUtil.toSystemIndependentName(resourceSourceRoot.getPath()));   }   if (!myParameters.containsKey(ATTR_AIDL_OUT) || get(ATTR_AIDL_OUT) == null) {     File aidlRoot=new File(mainFlavorSourceRoot,TemplateWizard.AIDL_SOURCE_PATH);     put(ATTR_AIDL_OUT,FileUtil.toSystemIndependentName(aidlRoot.getPath()));   }   String javaPackageDir=getString(ATTR_PACKAGE_NAME).replace('.',File.separatorChar);   if (!myParameters.containsKey(ATTR_SRC_OUT) || myParameters.get(ATTR_SRC_OUT) == null) {     File javaSourceRoot=new File(mainFlavorSourceRoot,TemplateWizard.JAVA_SOURCE_PATH);     File javaSourcePackageRoot;     if (myParameters.containsKey(ATTR_PACKAGE_ROOT)) {       javaSourcePackageRoot=new File(getString(ATTR_PACKAGE_ROOT));       String relativePath=FileUtil.getRelativePath(javaSourceRoot,javaSourcePackageRoot);       String javaPackage=relativePath != null ? FileUtil.toSystemIndependentName(relativePath).replace('/','.') : null;       put(ATTR_PACKAGE_NAME,javaPackage);     }  else {       javaSourcePackageRoot=new File(javaSourceRoot,javaPackageDir);     }     put(ATTR_SRC_OUT,FileUtil.toSystemIndependentName(javaSourcePackageRoot.getPath()));   }   if (!myParameters.containsKey(ATTR_MANIFEST_OUT) || myParameters.get(ATTR_MANIFEST_OUT) == null) {     put(ATTR_MANIFEST_OUT,FileUtil.toSystemIndependentName(mainFlavorSourceRoot.getPath()));   }   if (!myParameters.containsKey(ATTR_TEST_OUT) || myParameters.get(ATTR_TEST_OUT) == null) {     String relativeTestOut=FileUtil.join(TemplateWizard.JAVA_SOURCE_PATH,javaPackageDir);     File testOut=new File(testSourceRoot,relativeTestOut);     put(ATTR_TEST_OUT,FileUtil.toSystemIndependentName(testOut.getPath()));   }   put(ATTR_TOP_OUT,FileUtil.toSystemIndependentName(projectRoot.getPath()));   put(ATTR_PROJECT_OUT,FileUtil.toSystemIndependentName(moduleRoot.getPath()));   String mavenUrl=System.getProperty(TemplateWizard.MAVEN_URL_PROPERTY);   if (mavenUrl != null) {     put(ATTR_MAVEN_URL,mavenUrl);   }   populateRelativePackage(null); } "
"public void onDownloadFailed(String filename){   if (getSnackbarManager() == null)   return;   String message=mContext.getString(R.string.download_failed_message,filename);   Snackbar snackbar=Snackbar.make(message,this).setSingleLine(false).setDuration(SNACKBAR_DURATION_IN_MILLISECONDS);   getSnackbarManager().showSnackbar(snackbar); } "
"public synchronized void powerOnSelfTest() throws Error {   Log.i(Mary.LOG,\"Starting power-on self test.\");   try {     Collection<Voice> myVoices=Voice.getAvailableVoices(this);     if (myVoices.size() == 0) {       return;     }     Voice v=myVoices.iterator().next();     MaryData in=new MaryData(MaryDataType.ACOUSTPARAMS,v.getLocale());     String exampleText=MaryDataType.ACOUSTPARAMS.exampleText(v.getLocale());     if (exampleText != null) {       in.readFrom(new StringReader(exampleText));       in.setDefaultVoice(v);       assert v instanceof HMMVoice : \"Expected voice to be a HMMVoice, but it is a \" + v.getClass().toString();       String features=((HMMVoice)v).getHMMData().getFeatureDefinition().getFeatureNames();       TargetFeatureComputer comp=FeatureRegistry.getTargetFeatureComputer(v,features);       in.setOutputParams(features);       Document doc=in.getDocument();       TreeWalker tw=MaryDomUtils.createTreeWalker(doc,doc,MaryXML.PHONE,MaryXML.BOUNDARY);       List<Element> segmentsAndBoundaries=new ArrayList<Element>();       Element e;       while ((e=(Element)tw.nextNode()) != null) {         segmentsAndBoundaries.add(e);       }       List<Target> targetFeaturesList=targetFeatureLister.getListTargetFeatures(comp,segmentsAndBoundaries);       MaryData audio=htsEngine.process(in,targetFeaturesList,segmentsAndBoundaries,null);       assert audio.getAudio() != null;     }  else {       Log.d(Mary.LOG,\"2 No example text -- no power-on self test!\");     }   }  catch (  Throwable t) {     throw new Error(\"Module \" + toString() + \": Power-on self test failed.\",t);   }   Log.i(Mary.LOG,\"Power-on self test complete.\"); } "
"private void readDetailedResultsFromFile(String sFilename){   PerformanceTableModel tTmp=new PerformanceTableModel();   String sDetailedRes=utils.loadFileToStringWithNewlines(sFilename);   String[] sRows=sDetailedRes.split(\"\\n\");   for (int iRowCnt=0; iRowCnt < sRows.length; iRowCnt++) {     String sLine=sRows[iRowCnt];     if (sLine.startsWith(\"Theme\"))     continue;     String[] sResult=sLine.split(\"\\\\s+\");     if (sResult.length > 0)     tTmp.append(sResult[1],sResult[0],Double.valueOf(sResult[3]).doubleValue());   }   DetailedResultsTbl.setModel(tTmp); } "
"public CodeAttribute(String name,List<Unit> units,List<Tag> tags){   this.name=name;   this.mUnits=units;   this.mTags=tags; } "
"public DHCPMessage(byte[] ibuf,InetAddress inServername){   initialize();   internalize(ibuf);   this.destination_IP=inServername;   this.gPort=SERVER_PORT; } "
"public void onFailure(int statusCode,Header[] headers,String responseBody,Throwable error){   onFailure(responseBody,error); } "
"public static void v(String tag,String s,Throwable e){   if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e); } "
"public static <T extends RealFieldElement<T>>T distance(final FieldVector3D<T> v1,final Vector3D v2){   return v1.distance(v2); } "
"public GroupsGetMembersQueryWithFilter count(Integer value){   return unsafeParam(\"count\",value); } "
"private void validateFields(){   if (folderNameText.getText().length() == 0) {     setErrorMessage(null);     setPageComplete(false);     return;   }   try {     new SVNUrl(Util.appendPath(urlParentText.getText(),folderNameText.getText()));   }  catch (  MalformedURLException e) {     setErrorMessage(Policy.bind(\"NewRemoteFolderWizardMainPage.invalidUrl\"));     setPageComplete(false);     return;   }   setErrorMessage(null);   setPageComplete(true); } "
"public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   String subSignature=method.getSubSignature(); {     defaultMethod(method,thisVar,returnVar,params);     return;   } } "
"public VideoGetNewTagsQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"private GaussianMixture(){ } "
"public static void childElements(SimpleMethod method,Element element,String... validChildElementNames) throws ValidationException {   Set<String> validNames=new HashSet<String>();   for (  String name : validChildElementNames) {     validNames.add(name);   }   Node node=element.getFirstChild();   while (node != null) {     if (node.getNodeType() == Node.ELEMENT_NODE) {       Element childElement=(Element)node;       if (!validNames.contains(childElement.getTagName())) {         handleError(\"Child element <\" + childElement.getTagName() + \"> is not valid.\",method,element);       }     }     node=node.getNextSibling();   } } "
"@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {   double[] pScalesArray={1.0f};   double[] tScalesArray={1.0f};   return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,tScalesArray,aft); } "
"public void removeChangingListener(OnWheelChangedListener listener){   changingListeners.remove(listener); } "
"public long optLong(String key,long defaultValue){   LazyNode token=getOptionalFieldToken(key);   if (token == null)   return defaultValue;   if (token.type == LazyNode.VALUE_NULL)   return defaultValue;   return token.getLongValue(cbuf); } "
"public boolean containOnlyDigitalGoods(){   for (  ShoppingCartItem cartItem : this.cartLines) {     GenericValue product=cartItem.getProduct();     try {       GenericValue productType=product.getRelatedOne(\"ProductType\",true);       if (productType == null || !\"N\".equals(productType.getString(\"isPhysical\"))) {         return false;       }     }  catch (    GenericEntityException e) {       Debug.logError(e,\"Error looking up ProductType: \" + e.toString(),module);       return false;     }   }   return true; } "
"public synchronized TemporaryQueue createTemporaryQueue() throws JMSException {   ensureOpen();   if (_logger.isLoggable(Level.FINE)) {     _logger.log(Level.FINE,\"Creating temporary Queue\");   }   return new GSTemporaryQueueImpl(m_sessionID + \":\" + getRandomInt(),m_sessionID); } "
"public static void skipFastAText(FileIterator it,boolean isFastA){   if (isFastA) {     while (it.hasNext() && it.peekNextByte() != '>') {       it.next();     }   }  else {     if (it.hasNext()) {       it.next();     }     if (it.hasNext()) {       it.next();     }     if (it.hasNext()) {       it.next();     }   } } "
"public synchronized int write(InputStream in) throws IOException {   int readCount=0;   int inBufferPos=count - filledBufferSum;   int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);   while (n != -1) {     readCount+=n;     inBufferPos+=n;     count+=n;     if (inBufferPos == currentBuffer.length) {       needNewBuffer(currentBuffer.length);       inBufferPos=0;     }     n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);   }   return readCount; } "
"public void ssl(SSLSocketFactory sslSocketFactory) throws IOException {   String host=connection.getInetAddress().getHostName();   int port=connection.getPort();   connection=sslSocketFactory.createSocket(connection,host,port,true);   InputStream inStream=connection.getInputStream();   OutputStream outStream=connection.getOutputStream();   reader=new NVTASCIIReader(inStream,charsetName);   writer=new NVTASCIIWriter(outStream,charsetName); } "
"protected MessagesGetChatUsersQueryWithFields fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"public void testJBrowserImage() throws Exception {   FetcherJBrowser fetcherJBrowser=TestUtils.newInstance(FetcherJBrowser.class,\"fetcher.jbrowser\");   Resource resource=new Resource(\"http://nutch.apache.org/assets/img/nutch_logo_tm.png\",\"nutch.apache.org\",TestUtils.JOB_CONTEXT);   System.out.println(fetcherJBrowser.fetch(resource).getResponseCode()); } "
"public Builder filter(Filter filter){   actionList.add(new DataAction(filter));   return this; } "
"public String toString(){   StringBuffer result=new StringBuffer(\"Matrix3f\\n[\\n\");   result.append(\" \");   result.append(m00);   result.append(\"  \");   result.append(m01);   result.append(\"  \");   result.append(m02);   result.append(\" \\n\");   result.append(\" \");   result.append(m10);   result.append(\"  \");   result.append(m11);   result.append(\"  \");   result.append(m12);   result.append(\" \\n\");   result.append(\" \");   result.append(m20);   result.append(\"  \");   result.append(m21);   result.append(\"  \");   result.append(m22);   result.append(\" \\n]\");   return result.toString(); } "
"protected MarketReportQuery itemId(int value){   return unsafeParam(\"item_id\",value); } "
"@Override public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){   if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {     VertexImpl v=new VertexImpl();     v.setLabel(sStartNode);     try {       gGraph.add(v);     }  catch (    Exception e) {       e.printStackTrace();     }     return;   }   Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);   Vertex vA;   if (vOldA != null)   vA=vOldA;  else {     vA=new VertexImpl();     vA.setLabel(sStartNode);     try {       gGraph.add(vA);     }  catch (    Exception e) {     }   }   java.util.Iterator iIter=lOtherNodes.iterator();   Double dDist=0.0;   while (iIter.hasNext()) {     dDist++;     VertexImpl vB=new VertexImpl();     vB.setLabel((String)iIter.next());     WeightedEdge weCorrectEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gGraph,vA,vB);     try {       Distribution dTemp=null;       if (weCorrectEdge == null) {         dTemp=new Distribution();         dTemp.increaseValue(dDist,1.0);         weCorrectEdge=gGraph.addEdge(vA,vB,0.0);       }  else {         dTemp=(Distribution)EdgeDistros.get(weCorrectEdge);         if (dTemp == null)         dTemp=new Distribution();         dTemp.increaseValue(dDist,1.0);       }       EdgeDistros.put(weCorrectEdge,dTemp);       if (EdgeDistros.get(weCorrectEdge) == null)       throw new NullPointerException(\"Added null edge distro...\");       Distribution dProb=dTemp.getProbabilityDistribution();     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"public static Bucket createBucket(Experiment experiment,boolean isControl){   return new Bucket(bucketNameColors()[internalId++ % bucketNameColors().length] + internalId,experiment.id,1.0d / 3.0d,isControl); } "
"public static String encodeWebSafe(byte[] source,boolean doPadding){   return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding); } "
"public static void v(Class<?> clazz,String msg){   if (isDebug) {     Log.v(clazz.getSimpleName(),msg);   } } "
"private void goToPage(int rowCount,int currentPage){   if (getNumPages() < currentPage) {     lastPage();     return;   }   if (currentPage >= getNumPages()) {     getIconNext().setEnabled(false);     getIconPrev().setEnabled(true);   }  else {     getIconNext().setEnabled(true);   }   if (currentPage <= 1) {     getIconNext().setEnabled(true);     getIconPrev().setEnabled(false);   }  else {     getIconPrev().setEnabled(true);   }   if (getNumPages() == 1) {     getIconNext().setEnabled(false);     getIconPrev().setEnabled(false);   }   setRowCount(rowCount);   setFirstRow(((Math.max(0,currentPage - 1)) * rowCount) + 1);   setLastRow(currentPage * rowCount);   updateDataTable();   setCurrentPage(currentPage); } "
"public static void embedTree(PhyloTreeView treeView){   treeView.removeAllInternalPoints();   Node root=treeView.getPhyloTree().getRoot();   if (root != null)   computeEmbeddingRec(treeView,root,null,0,0,true);   treeView.resetViews();   for (Node v=treeView.getPhyloTree().getFirstNode(); v != null; v=v.getNext()) {     treeView.setLabel(v,treeView.getPhyloTree().getLabel(v));     treeView.setLabelLayout(v,NodeView.EAST);   }   treeView.trans.setCoordinateRect(treeView.getBBox());   treeView.fitGraphToWindow(); } "
"public synchronized int size(){   return count; } "
"public void actionPerformed(ActionEvent ev){   execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN + \";\"); } "
"public static InputStream toInputStream(String input,Charset encoding){   return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding))); } "
"public FileVersion(File f){   this.f=f;   name=f.getName();   String[] ss=name.split(\"[-_]\");   if (ss.length > 1) {     String ver=ss[ss.length - 1];     name=name.substring(0,name.length() - ver.length() - 1);     ver=ver.substring(0,ver.length() - 4);     this.ver=new Version(ver);   } } "
"public ConfigurableValidationState(){   super();   fIdIdrefChecking=true;   fUnparsedEntityChecking=true; } "
"private void loadList(JComboBox cbox){   java.util.List<IDirector> projects=ProjectManager.getProjects();   TreeSet<InputDataItem> items=new TreeSet<>(new InputDataItem());   for (  IDirector project : projects) {     if (project instanceof Director) {       Director dir=(Director)project;       if (!dir.getMainViewer().isLocked() && dir.getDocument().getNumberOfReads() > 0 && !dir.getDocument().getMeganFile().isMeganSummaryFile()) {         items.add(new InputDataItem(dir));       }     }   }   for (  InputDataItem item : items) {     cbox.addItem(item);   } } "
"public void reset(byte[] input,int length){   buffer.reset(input,0,length); } "
"public Zqrd(Zmat A) throws JampackException {   Zhqrd hqr;   A.getProperties();   if (A.HQR == null) {     hqr=new Zhqrd(A);   }  else {     hqr=A.HQR;   }   R=hqr.R;   if (A.nr > A.nc) {     R=new Zutmat(Merge.o21(R,new Zmat(A.nr - A.nc,A.nc)));   }   Q=Eye.o(A.nr);   for (int k=hqr.ntran - 1; k >= 0; k--) {     House.ua(hqr.U[k],Q,k + A.bx,A.rx,k + A.bx,A.rx);   } } "
"@Deprecated public static JsonArray readFrom(Reader reader) throws IOException {   return JsonValue.readFrom(reader).asArray(); } "
"public void rightClick(int x,int y) throws InterruptedException {   click(InputEvent.BUTTON3_MASK,x,y); } "
"public static String[] readStrings(String filename){   return new In(filename).readAllStrings(); } "
"private Uri whichContentStore(){   if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {     return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;   }  else {     return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;   } } "
"public DistributedLogNamespaceBuilder uri(URI uri){   this._uri=uri;   return this; } "
"public final void hideNavigationBar(){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {     int uiOptions=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY| View.SYSTEM_UI_FLAG_IMMERSIVE;     View decorView=getWindow().getDecorView();     decorView.setSystemUiVisibility(uiOptions);   }  else {     WindowManager.LayoutParams lp=getWindow().getAttributes();     lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN;     getWindow().setAttributes(lp);   } } "
"public File mapUriToFile(Uri uri){   assertBackgroundThread(); switch (getUriType(uri)) { case URI_TYPE_FILE:     return new File(uri.getPath()); case URI_TYPE_CONTENT: {     Cursor cursor=contentResolver.query(uri,LOCAL_FILE_PROJECTION,null,null,null);     if (cursor != null) {       try {         int columnIndex=cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);         if (columnIndex != -1 && cursor.getCount() > 0) {           cursor.moveToFirst();           String realPath=cursor.getString(columnIndex);           if (realPath != null) {             return new File(realPath);           }         }       }   finally {         cursor.close();       }     }   } } return null; } "
"public static void write(String data,Writer output) throws IOException {   if (data != null) {     output.write(data);   } } "
"public void copyTo(@Nonnull final UserAgent.Builder builder){   builder.setFamily(family);   builder.setIcon(icon);   builder.setName(familyName);   builder.setProducer(producer);   builder.setProducerUrl(producerUrl);   builder.setTypeName(type.getName());   builder.setUrl(url);   if (operatingSystem != null) {     operatingSystem.copyTo(builder);   } } "
"private static boolean npcCanExpandLevel(WarehouseExpandTemplate clist,int level){   return clist.contains(level); } "
"public CommandBuilder withLongSwitch(String switchName,Object value,UnaryOperator<String> switchNameMapper){   if (value != null) {     switches.add(String.format(\"--%s='%s'\",switchNameMapper.apply(switchName),escapeQuotedSwitch(String.valueOf(value))));   }  else {     switches.add(\"--\" + switchNameMapper.apply(switchName));   }   return this; } "
"public Vector3D closestPoint(final Line line){   final double cos=direction.dotProduct(line.direction);   final double n=1 - cos * cos;   if (n < Precision.EPSILON) {     return zero;   }   final Vector3D delta0=line.zero.subtract(zero);   final double a=delta0.dotProduct(direction);   final double b=delta0.dotProduct(line.direction);   return new Vector3D(1,zero,(a - b * cos) / n,direction); } "
"public static void sampleInstallTinker(ApplicationLike appLike){   if (isInstalled) {     TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");     return;   }   TinkerInstaller.install(appLike);   isInstalled=true; } "
"@Override public int read() throws IOException {   for (; ; ) {     if (encoderOut.hasRemaining()) {       return encoderOut.get() & 0xFF;     }  else {       fillBuffer();       if (endOfInput && !encoderOut.hasRemaining()) {         return -1;       }     }   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201266,skilltarget,skillname); } "
"public void goToPreviousStep(){   goToStep(activeStep - 1,false); } "
"public TestInfo(){   this.testName=\"Default test name\";   this.logEntries=new TreeSet<>(new LogEntryComparator());   this.testResult=new Success();   this.start=new Date();   this.last=false;   this.subreports=new LinkedList<>(); } "
"void handleEOD(EncoderContext context,StringBuilder buffer){   int unwritten=(buffer.length() / 3) * 2;   int rest=buffer.length() % 3;   int curCodewordCount=context.getCodewordCount() + unwritten;   context.updateSymbolInfo(curCodewordCount);   int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;   if (rest == 2) {     buffer.append('\\0');     while (buffer.length() >= 3) {       writeNextTriplet(context,buffer);     }     if (context.hasMoreCharacters()) {       context.writeCodeword(HighLevelEncoder.C40_UNLATCH);     }   }  else   if (available == 1 && rest == 1) {     while (buffer.length() >= 3) {       writeNextTriplet(context,buffer);     }     if (context.hasMoreCharacters()) {       context.writeCodeword(HighLevelEncoder.C40_UNLATCH);     }     context.pos--;   }  else   if (rest == 0) {     while (buffer.length() >= 3) {       writeNextTriplet(context,buffer);     }     if (available > 0 || context.hasMoreCharacters()) {       context.writeCodeword(HighLevelEncoder.C40_UNLATCH);     }   }  else {     throw new IllegalStateException(\"Unexpected case. Please report!\");   }   context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION); } "
"@Override public SketchSetOperationPostAggregation withFields(List<PostAggregation> fields){   return new SketchSetOperationPostAggregation(getName(),getFunc(),fields,getSize()); } "
"public static ExpectedCondition<Boolean> hasNodePropertyValue(final Session session,final String nodePath,final String propertyName,final String propertyValue){   LOG.debug(\"Checking if node '{}' has property '{}' with value '{}'\",nodePath,propertyName,propertyValue);   return null; } "
"void isLock(Object obj,long txNum){   Object anchor=getAnchor(obj);   txWaitMap.put(txNum,anchor); synchronized (anchor) {     Lockers lks=prepareLockers(obj);     if (hasIsLock(lks,txNum))     return;     try {       long timestamp=System.currentTimeMillis();       while (!isLockable(lks,txNum) && !waitingTooLong(timestamp)) {         avoidDeadlock(lks,txNum,IS_LOCK);         lks.requestSet.add(txNum);         anchor.wait(MAX_TIME);         lks.requestSet.remove(txNum);       }       if (!isLockable(lks,txNum))       throw new LockAbortException();       lks.isLockers.add(txNum);       getObjectSet(txNum).add(obj);     }  catch (    InterruptedException e) {       throw new LockAbortException();     }   }   txWaitMap.remove(txNum); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_A_TO_ME(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200651,skillcaster,num0,skillname); } "
"public T read(PacketBuffer buf){   return reader.apply(buf); } "
"@Override public void onComicLoadSuccess(Comic comic){   mDetailAdapter.setInfo(comic.getSource(),comic.getCover(),comic.getTitle(),comic.getAuthor(),comic.getIntro(),comic.getFinish(),comic.getUpdate(),comic.getLast());   if (comic.getTitle() != null && comic.getCover() != null) {     int resId=comic.getFavorite() != null ? R.drawable.ic_favorite_white_24dp : R.drawable.ic_favorite_border_white_24dp;     mStarButton.setImageResource(resId);     mStarButton.setVisibility(View.VISIBLE);   } } "
"@Override public DocumentFragment createDocumentFragment(){   return new DocumentFragmentImpl(this); } "
"public MessagesSendQuery notification(Boolean value){   return unsafeParam(\"notification\",value); } "
"@Override public void serializeWithType(HasDruidName value,JsonGenerator jgen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {   typeSer.writeTypePrefixForScalar(value,jgen);   serialize(value,jgen,provider);   typeSer.writeTypeSuffixForScalar(value,jgen); } "
"public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){   int i;   if (tag != cp.tag)   return tag - cp.tag;   CONSTANT_MethodHandle_info cu=(CONSTANT_MethodHandle_info)cp;   i=constant_pool[target_index].compareTo(constant_pool,cp_constant_pool[cu.target_index],cp_constant_pool);   if (i != 0)   return i;   return kind - cu.kind; } "
"public ServerServiceDefinition intercept(BindableService bindableService){   return ServerInterceptors.intercept(bindableService,this); } "
"public static boolean featureIsEnabled(){   boolean allowedChannel=ChromeVersionInfo.isLocalBuild() || ChromeVersionInfo.isDevBuild();   boolean switchEnabled=CommandLine.getInstance().hasSwitch(ChromeSwitches.ENABLE_PHYSICAL_WEB);   return allowedChannel && switchEnabled; } "
"public void addAndRemoveEventListenerTyped() throws Exception {   TestActivitiEventListener newListener=new TestActivitiEventListener();   dispatcher.addEventListener(newListener,ActivitiEventType.ENTITY_CREATED,ActivitiEventType.ENTITY_DELETED);   ActivitiEntityEventImpl event1=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_CREATED);   ActivitiEntityEventImpl event2=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_DELETED);   ActivitiEntityEventImpl event3=new ActivitiEntityEventImpl(processEngineConfiguration.getTaskEntityManager().create(),ActivitiEventType.ENTITY_UPDATED);   dispatcher.dispatchEvent(event1);   dispatcher.dispatchEvent(event2);   dispatcher.dispatchEvent(event3);   assertEquals(2,newListener.getEventsReceived().size());   assertEquals(event1,newListener.getEventsReceived().get(0));   assertEquals(event2,newListener.getEventsReceived().get(1));   dispatcher.removeEventListener(newListener);   newListener.clearEventsReceived();   dispatcher.dispatchEvent(event1);   dispatcher.dispatchEvent(event2);   assertTrue(newListener.getEventsReceived().isEmpty()); } "
"public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){   final BitmapFactory.Options options=new BitmapFactory.Options();   options.inJustDecodeBounds=true;   BitmapFactory.decodeResource(res,resId,options);   options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);   if (Utils.hasHoneycomb()) {     addInBitmapOptions(options,cache);   }   options.inJustDecodeBounds=false;   return BitmapFactory.decodeResource(res,resId,options); } "
"final void persistUpdatedAlarm(Alarm newAlarm,boolean showSnackbar){   mAlarmController.scheduleAlarm(newAlarm,showSnackbar);   mAlarmController.save(newAlarm); } "
"public static void writeString(PacketBuffer buf,String value){   buf.writeInt(value.length());   buf.writeString(value); } "
"private void executeJoin(ExpNode exp) throws SQLException {   ColumnNode left=(ColumnNode)exp.getLeftChild();   ColumnNode right=(ColumnNode)exp.getRightChild();   int leftEntryIndex=left.getColumnData().getColumnTableData().getTableIndex();   int rightEntryIndex=right.getColumnData().getColumnTableData().getTableIndex();   Object leftJoinValue=left.getFieldValue(_currentEntry.getEntry(leftEntryIndex));   Object rightJoinValue=right.getFieldValue(_currentEntry.getEntry(rightEntryIndex));   boolean isInRange=exp.isValidCompare(leftJoinValue,rightJoinValue);   setResults(exp,isInRange); } "
"public void addPreAllocatedServiceUnit(String suName,ResourceQuota quota){   this.preAllocatedBundles.add(suName);   this.preAllocatedQuota.add(quota);   estimateLoadPercentage(); } "
"public boolean isEntryFromPartition(IEntryHolder entryHolder){   final Object routingValue=entryHolder.getRoutingValue();   if (routingValue == null)   return false;   if (!_clusterInfo.isPartitioned())   return true;   final int partitionId=PartitionedClusterUtils.getPartitionId(routingValue,_clusterInfo.getNumberOfPartitions());   return partitionId == _partitionId; } "
"public FieldRefNode makeLocalFieldRefNode(Object baseValue,Type baseType,SparkField field,SootMethod method){   VarNode base=makeLocalVarNode(baseValue,baseType,method);   return makeFieldRefNode(base,field); } "
"public static int multiplyColorAlpha(int color,int alpha){   if (alpha == 255) {     return color;   }   if (alpha == 0) {     return color & 0x00FFFFFF;   }   alpha=alpha + (alpha >> 7);   int colorAlpha=color >>> 24;   int multipliedAlpha=colorAlpha * alpha >> 8;   return (multipliedAlpha << 24) | (color & 0x00FFFFFF); } "
"private void handleDefaultTopBar(){   ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);   setLayoutParams(params);   topBarView=iTopBarInterface.getDefaultTopBarView();   topBarView.setBackgroundColor(getColor(XUIConfig.getTopBarBgColor()));   topBarView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,(int)getDefaultTopBarHeight()));   addView(topBarView);   FrameLayout.LayoutParams userViewParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);   userViewParams.topMargin=(int)getContentTopMargin();   addView(mContentView,userViewParams);   initLoadContainer((int)getContentTopMargin());   addView(loadContainer);   handleTopBarShadow(); } "
"public boolean isGuestEnabled(){   try {     return mService.isGuestEnabled();   }  catch (  RemoteException re) {     Log.w(TAG,\"Could not retrieve guest enabled state\");     return false;   } } "
"public boolean deleteKey(DataType key,RecordID rid){   throw new BPlusTreeException(\"BPlusTree#DeleteKey Not Implemented!\"); } "
"public Bundler putLong(String key,long value){   bundle.putLong(key,value);   return this; } "
"@Override public int validate(QName[] children,int offset,int length){   if (DEBUG_VALIDATE_CONTENT)   System.out.println(\"DFAContentModel#validateContent\");   if (length == 0) {     if (DEBUG_VALIDATE_CONTENT) {       System.out.println(\"!!! no children\");       System.out.println(\"elemMap=\" + fElemMap);       for (int i=0; i < fElemMap.length; i++) {         String uri=fElemMap[i].uri;         String localpart=fElemMap[i].localpart;         System.out.println(\"fElemMap[\" + i + \"]=\"+ uri+ \",\"+ localpart+ \" (\"+ uri+ \", \"+ localpart+ ')');       }       System.out.println(\"EOCIndex=\" + fEOCString);     }     return fEmptyContentIsValid ? -1 : 0;   }   int curState=0;   for (int childIndex=0; childIndex < length; childIndex++) {     final QName curElem=children[offset + childIndex];     if (fMixed && curElem.localpart == null) {       continue;     }     int elemIndex=0;     for (; elemIndex < fElemMapSize; elemIndex++) {       int type=fElemMapType[elemIndex] & 0x0f;       if (type == XMLContentSpec.CONTENTSPECNODE_LEAF) {         if (fElemMap[elemIndex].rawname == curElem.rawname) {           break;         }       }  else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY) {         String uri=fElemMap[elemIndex].uri;         if (uri == null || uri == curElem.uri) {           break;         }       }  else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL) {         if (curElem.uri == null) {           break;         }       }  else       if (type == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {         if (fElemMap[elemIndex].uri != curElem.uri) {           break;         }       }     }     if (elemIndex == fElemMapSize) {       if (DEBUG_VALIDATE_CONTENT) {         System.out.println(\"!!! didn't find it\");         System.out.println(\"curElem : \" + curElem);         for (int i=0; i < fElemMapSize; i++) {           System.out.println(\"fElemMap[\" + i + \"] = \"+ fElemMap[i]);           System.out.println(\"fElemMapType[\" + i + \"] = \"+ fElemMapType[i]);         }       }       return childIndex;     }     curState=fTransTable[curState][elemIndex];     if (curState == -1) {       if (DEBUG_VALIDATE_CONTENT)       System.out.println(\"!!! not a legal transition\");       return childIndex;     }   }   if (DEBUG_VALIDATE_CONTENT)   System.out.println(\"curState=\" + curState + \", childCount=\"+ length);   if (!fFinalStateFlags[curState])   return length;   return -1; } "
"public synchronized void recordStatistics(QueryStatistic statistic){   queryStatistics.add(statistic); } "
"public void treeExpanded(TreeExpansionEvent event){   inspectorWindow.updateView(Director.ALL); } "
"public synchronized void requestPreviewFrame(Handler handler,int message){   OpenCamera theCamera=camera;   if (theCamera != null && previewing) {     previewCallback.setHandler(handler,message);     theCamera.getCamera().setOneShotPreviewCallback(previewCallback);   } } "
"public boolean isAcontains(BitSet H){   BitSet M=((BitSet)A.clone());   M.and(H);   return M.cardinality() == H.cardinality(); } "
"public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){   float scaleX=(float)(mViewPortHandler.contentWidth() / deltaX);   float scaleY=(float)(mViewPortHandler.contentHeight() / deltaY);   if (Float.isInfinite(scaleX)) {     scaleX=0;   }   if (Float.isInfinite(scaleY)) {     scaleY=0;   }   mMatrixValueToPx.reset();   mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);   mMatrixValueToPx.postScale(scaleX,-scaleY); } "
"public Object clone(){   Body b=new JimpleBody(getMethod());   b.importBodyContentsFrom(this);   return b; } "
"public static InputStream toInputStream(CharSequence input){   return toInputStream(input,Charset.defaultCharset()); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_QUEST_LIMIT_START_WEEK(String value1,String value0){   return new SM_SYSTEM_MESSAGE(1400857,value1,value0); } "
"public State(int state){   this(JSpaceState.convertToString(Integer.valueOf(state))); } "
"public boolean isApplicable(){   return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX; } "
"public AXmlNode addChild(AXmlNode child,int index){   if (this.children == null)   this.children=new ArrayList<AXmlNode>();   this.children.add(index,child);   return this; } "
"public void paintSelection(Graphics g0){   Graphics2D g=(Graphics2D)g0;   SelectedBlock selectedBlock=getSelectedBlock();   if (selectedBlock.isSelected()) {     Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);     rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);     g.setColor(highlightColorSemiTransparent);     g.fill(rect);   } } "
"public PriorityQueue priorityQueue(int concurrency,PriorityQueue.PriorityComparator comparator,int defaultPriority){   return new PriorityQueue(this.executor_,concurrency,comparator,defaultPriority); } "
"public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){   overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent); } "
"public static void dropTable(SQLiteDatabase db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"BOOK\\\"\";   db.execSQL(sql); } "
"public static void print(byte x){   out.print(x);   out.flush(); } "
"public static float interpolateCatmullRom(float u,float T,float p0,float p1,float p2,float p3){   double c1, c2, c3, c4;   c1=p1;   c2=-1.0 * T * p0 + T * p2;   c3=2 * T * p0 + (T - 3) * p1 + (3 - 2 * T) * p2 + -T * p3;   c4=-T * p0 + (2 - T) * p1 + (T - 2) * p2 + T * p3;   return (float)(((c4 * u + c3) * u + c2) * u + c1); } "
"public SpaceAlreadyStartedException(String s){   super(s); } "
"public void initGui(){   String productName=\"\";   this.buttonList.clear();   this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,\"Reset To Defaults\"));   this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,\"Done\"));   VRSettings.VrOptions[] var10=null;   if (Minecraft.getMinecraft().stereoProvider.isStereo()) {     productName=\"OpenVR\";     var10=openVRDisplayOptions;   }  else   var10=monoDisplayOptions;   int var11=var10.length;   for (int var12=2; var12 < var11 + 2; ++var12) {     VRSettings.VrOptions var8=var10[var12 - 2];     int width=this.width / 2 - 155 + var12 % 2 * 160;     int height=this.height / 6 + 21 * (var12 / 2) - 10;     if (var8 == VRSettings.VrOptions.DUMMY)     continue;     if (var8.getEnumFloat()) {       float minValue=0.0f;       float maxValue=1.0f;       float increment=0.001f;       if (var8 == VRSettings.VrOptions.RENDER_SCALEFACTOR) {         minValue=0.5f;         maxValue=4.0f;         increment=0.1f;       }  else       if (var8 == VRSettings.VrOptions.MONO_FOV) {         minValue=1f;         maxValue=179f;         increment=1f;       }       GuiSliderEx slider=new GuiSliderEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8),minValue,maxValue,increment,this.guivrSettings.getOptionFloatValue(var8));       slider.setEventHandler(this);       slider.enabled=getEnabledState(var8);       this.buttonList.add(slider);     }  else {       if (false) {         GuiSmallButtonEx button=new GuiSmallButtonEx(9999,width,height,var8,productName);         button.enabled=false;         this.buttonList.add(button);       }  else {         String keyBinding=this.guivrSettings.getKeyBinding(var8);         GuiSmallButtonEx button=new GuiSmallButtonEx(var8.returnEnumOrdinal(),width,height,var8,keyBinding);         button.enabled=getEnabledState(var8);         this.buttonList.add(button);       }     }   } } "
"protected void searchUpdate(){   String query=m_queryF.getText(); synchronized (m_lock) {     m_searcher.search(query);     if (m_searcher.getQuery().length() == 0)     m_resultL.setText(null);  else {       int r=m_searcher.getTupleCount();       m_resultL.setText(r + \" match\" + (r == 1 ? \"\" : \"es\"));     }   } } "
"@NotNull public static String computeModuleName(@NotNull String appName,@Nullable Project project){   String moduleName=appName.toLowerCase(Locale.US).replaceAll(WizardConstants.INVALID_FILENAME_CHARS,\"\");   moduleName=moduleName.replaceAll(\"\\\\s\",\"\");   if (!isUniqueModuleName(moduleName,project)) {     int i=2;     while (!isUniqueModuleName(moduleName + Integer.toString(i),project)) {       i++;     }     moduleName+=Integer.toString(i);   }   return moduleName; } "
"public UCSReader(InputStream inputStream,byte[] buffer,short encoding){   fInputStream=inputStream;   fBuffer=buffer;   fEncoding=encoding; } "
"public int hashCode(){   int hc=13 * sort;   if (sort == OBJECT || sort == ARRAY) {     for (int i=off, end=i + len; i < end; i++) {       hc=17 * (hc + buf[i]);     }   }   return hc; } "
"public UseItemReviveResponse.Result useRevive(ItemId itemId) throws LoginFailedException, RemoteServerException {   Item item=api.getInventories().getItemBag().getItem(itemId);   if (!item.isRevive() || item.getCount() < 1 || !isFainted())   return UseItemReviveResponse.Result.ERROR_CANNOT_USE;   UseItemReviveMessageOuterClass.UseItemReviveMessage reqMsg=UseItemReviveMessageOuterClass.UseItemReviveMessage.newBuilder().setItemId(itemId).setPokemonId(getId()).build();   ServerRequest serverRequest=new ServerRequest(RequestType.USE_ITEM_REVIVE,reqMsg);   api.getRequestHandler().sendServerRequests(serverRequest);   UseItemReviveResponse response;   try {     response=UseItemReviveResponse.parseFrom(serverRequest.getData());     if (response.getResult() == UseItemReviveResponse.Result.SUCCESS) {       setStamina(response.getStamina());     }     return response.getResult();   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException(e);   } } "
"public static boolean checkStorageAccessPermissions(Context context){   if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {     String permission=\"android.permission.READ_EXTERNAL_STORAGE\";     int res=context.checkCallingOrSelfPermission(permission);     return (res == PackageManager.PERMISSION_GRANTED);   }  else {     return true;   } } "
"void resume(){   paused.set(false); synchronized (pauseLock) {     pauseLock.notifyAll();   } } "
"public void loadSavedApi(){   String savedApiLevel=PropertiesComponent.getInstance().getValue(FormFactorUtils.getPropertiesComponentMinSdkKey(myFormFactor),Integer.toString(myFormFactor.defaultApi));   setSelectedApiLevel(savedApiLevel);   if (getSelectedIndex() < 0 && getItemCount() > 0) {     setSelectedIndex(0);   } } "
"public boolean isPredefined(){   return predefined; } "
"public int download_file(String group_name,String remote_filename,long file_offset,long download_bytes,DownloadCallback callback) throws IOException, MyException {   int result;   boolean bNewConnection=this.newReadableStorageConnection(group_name,remote_filename);   Socket storageSocket=this.storageServer.getSocket();   try {     ProtoCommon.RecvHeaderInfo header;     this.send_download_package(group_name,remote_filename,file_offset,download_bytes);     InputStream in=storageSocket.getInputStream();     header=ProtoCommon.recvHeader(in,ProtoCommon.STORAGE_PROTO_CMD_RESP,-1);     this.errno=header.errno;     if (header.errno != 0) {       return header.errno;     }     byte[] buff=new byte[2 * 1024];     long remainBytes=header.body_len;     int bytes;     while (remainBytes > 0) {       if ((bytes=in.read(buff,0,remainBytes > buff.length ? buff.length : (int)remainBytes)) < 0) {         throw new IOException(\"recv package size \" + (header.body_len - remainBytes) + \" != \"+ header.body_len);       }       if ((result=callback.recv(header.body_len,buff,bytes)) != 0) {         this.errno=(byte)result;         return result;       }       remainBytes-=bytes;     }     return 0;   }  catch (  IOException ex) {     if (!bNewConnection) {       try {         this.storageServer.close();       }  catch (      IOException ex1) {         ex1.printStackTrace();       }  finally {         this.storageServer=null;       }     }     throw ex;   }  finally {     if (bNewConnection) {       try {         this.storageServer.close();       }  catch (      IOException ex1) {         ex1.printStackTrace();       }  finally {         this.storageServer=null;       }     }   } } "
"@VisibleForTesting protected HttpURLConnection createConnection() throws RequestFailureException {   try {     URL url=new URL(getRequestGenerator().getServerUrl());     HttpURLConnection connection=(HttpURLConnection)url.openConnection();     connection.setConnectTimeout(MS_CONNECTION_TIMEOUT);     connection.setReadTimeout(MS_CONNECTION_TIMEOUT);     return connection;   }  catch (  MalformedURLException e) {     throw new RequestFailureException(\"Caught a malformed URL exception.\",e);   } catch (  IOException e) {     throw new RequestFailureException(\"Failed to open connection to URL\",e);   } } "
"private float[] calculatePlaneTransform(double[] point,double normal[],float[] openGlTdepth){   float[] openGlUp=new float[]{0,1,0,0};   float[] depthTOpenGl=new float[16];   Matrix.invertM(depthTOpenGl,0,openGlTdepth,0);   float[] depthUp=new float[4];   Matrix.multiplyMV(depthUp,0,depthTOpenGl,0,openGlUp,0);   float[] depthTplane=matrixFromPointNormalUp(point,normal,depthUp);   float[] openGlTplane=new float[16];   Matrix.multiplyMM(openGlTplane,0,openGlTdepth,0,depthTplane,0);   return openGlTplane; } "
"public static double angle(Vector2D v1,Vector2D v2) throws MathRuntimeException {   double normProduct=v1.getNorm() * v2.getNorm();   if (normProduct == 0) {     throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);   }   double dot=v1.dotProduct(v2);   double threshold=normProduct * 0.9999;   if ((dot < -threshold) || (dot > threshold)) {     final double n=FastMath.abs(MathArrays.linearCombination(v1.x,v2.y,-v1.y,v2.x));     if (dot >= 0) {       return FastMath.asin(n / normProduct);     }     return FastMath.PI - FastMath.asin(n / normProduct);   }   return FastMath.acos(dot / normProduct); } "
"public boolean runAfter(List tasks,int size){   return false; } "
"public static <T>void notEmpty(String argumentName,T[] argumentObject){   notNull(argumentName,argumentObject);   if (argumentObject.length == 0) {     throw new IllegalArgumentException(argumentName + \" cannot be empty\");   } } "
"final public String browser(){   return this.getHeader(\"user-agent\"); } "
"public void startClientWithProperties() throws InterruptedException {   System.setProperty(\"c2mon.client.conf.url\",\"http://timweb/test/conf/c2mon-client.properties\");   C2monServiceGateway.startC2monClientSynchronous();   ClientCommandTag<Boolean> commandTag=C2monServiceGateway.getCommandManager().getCommandTag(104974L);   assertNotNull(commandTag.getName());   assertTrue(!commandTag.getName().equalsIgnoreCase(\"\"));   assertNotNull(commandTag.getProcessId());   assertNotNull(commandTag.getHardwareAddress()); } "
"public void remove() throws RecurrenceRuleException {   try {     rule.remove();   }  catch (  GenericEntityException e) {     throw new RecurrenceRuleException(e.getMessage(),e);   } } "
"public AppsGetCatalogQuery nameCase(UsersNameCase value){   return unsafeParam(\"name_case\",value); } "
"public static void initManager(Context context){   if (mInstance == null) {     mInstance=new AssetsDatabaseManager(context);   } } "
"private T nextAfter(final T t){   final int sign=forward ? 1 : -1;   final double ulp=FastMath.ulp(t.getReal());   return t.add(sign * ulp); } "
"public static Map<String,Object> fedexShipRequest(DispatchContext dctx,Map<String,? extends Object> context){   Delegator delegator=dctx.getDelegator();   LocalDispatcher dispatcher=dctx.getDispatcher();   Locale locale=(Locale)context.get(\"locale\");   String shipmentId=(String)context.get(\"shipmentId\");   String shipmentRouteSegmentId=(String)context.get(\"shipmentRouteSegmentId\");   Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);   String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get(\"shipmentGatewayConfigId\");   String resource=(String)shipmentGatewayConfig.get(\"configProps\");   if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexGatewayNotAvailable\",locale));   }   String templateLocation=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"templateShipment\",resource,\"shipment.fedex.template.ship.location\");   if (UtilValidate.isEmpty(templateLocation)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexShipmentTemplateLocationNotFound\",UtilMisc.toMap(\"templateLocation\",templateLocation),locale));   }   String accountNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"accessAccountNbr\",resource,\"shipment.fedex.access.accountNbr\");   if (UtilValidate.isEmpty(accountNumber)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexAccountNumberNotFound\",locale));   }   String meterNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"accessMeterNumber\",resource,\"shipment.fedex.access.meterNumber\");   if (UtilValidate.isEmpty(meterNumber)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexMeterNumberNotFound\",UtilMisc.toMap(\"meterNumber\",meterNumber),locale));   }   String weightUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,\"shipment.default.weight.uom\",delegator);   if (UtilValidate.isEmpty(weightUomId)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentDefaultWeightUomIdNotFound\",locale));   }  else   if (!(\"WT_lb\".equals(weightUomId) || \"WT_kg\".equals(weightUomId))) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentDefaultWeightUomIdNotValid\",locale));   }   String dimensionsUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,\"shipment.default.dimension.uom\",delegator);   if (UtilValidate.isEmpty(dimensionsUomId)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentDefaultDimensionUomIdNotFound\",locale));   }  else   if (!(\"LEN_in\".equals(dimensionsUomId) || \"LEN_cm\".equals(dimensionsUomId))) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentDefaultDimensionUomIdNotValid\",locale));   }   String labelImageType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"labelImageType\",resource,\"shipment.fedex.labelImageType\");   if (UtilValidate.isEmpty(labelImageType)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexLabelImageTypeNotFound\",locale));   }  else   if (!(\"PDF\".equals(labelImageType) || \"PNG\".equals(labelImageType))) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexLabelImageTypeNotValid\",locale));   }   String dropoffType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"defaultDropoffType\",resource,\"shipment.fedex.default.dropoffType\");   if (UtilValidate.isEmpty(dropoffType)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexDropoffTypeNotFound\",locale));   }   try {     Map<String,Object> shipRequestContext=FastMap.newInstance();     GenericValue shipment=EntityQuery.use(delegator).from(\"Shipment\").where(\"shipmentId\",shipmentId).queryOne();     if (UtilValidate.isEmpty(shipment)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"ProductShipmentNotFoundId\",locale) + shipmentId);     }     GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from(\"ShipmentRouteSegment\").where(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId).queryOne();     if (UtilValidate.isEmpty(shipmentRouteSegment)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"ProductShipmentRouteSegmentNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String carrierPartyId=shipmentRouteSegment.getString(\"carrierPartyId\");     if (!\"FEDEX\".equals(carrierPartyId)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexNotRouteSegmentCarrier\",UtilMisc.toMap(\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"shipmentId\",shipmentId),locale));     }     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString(\"carrierServiceStatusId\")) && !\"SHRSCS_NOT_STARTED\".equals(shipmentRouteSegment.getString(\"carrierServiceStatusId\"))) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexRouteSegmentStatusNotStarted\",UtilMisc.toMap(\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"shipmentId\",shipmentId,\"shipmentRouteSegmentStatus\",shipmentRouteSegment.getString(\"carrierServiceStatusId\")),locale));     }     String shipmentMethodTypeId=shipmentRouteSegment.getString(\"shipmentMethodTypeId\");     GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from(\"CarrierShipmentMethod\").where(\"shipmentMethodTypeId\",shipmentMethodTypeId,\"partyId\",\"FEDEX\",\"roleTypeId\",\"CARRIER\").queryOne();     if (UtilValidate.isEmpty(carrierShipmentMethod)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexRouteSegmentCarrierShipmentMethodNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"carrierPartyId\",carrierPartyId,\"shipmentMethodTypeId\",shipmentMethodTypeId),locale));     }     if (UtilValidate.isEmpty(carrierShipmentMethod.getString(\"carrierServiceCode\"))) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexNoCarrieServiceCode\",UtilMisc.toMap(\"shipmentMethodTypeId\",shipmentMethodTypeId),locale));     }     String service=carrierShipmentMethod.getString(\"carrierServiceCode\");     boolean isGroundService=service.equals(\"FEDEXGROUND\") || service.equals(\"GROUNDHOMEDELIVERY\");     String carrierCode=isGroundService ? \"FDXG\" : \"FDXE\";     String currencyCode=null;     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString(\"currencyUomId\"))) {       currencyCode=shipmentRouteSegment.getString(\"currencyUomId\");     }  else     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString(\"currencyUomId\"))) {       currencyCode=shipment.getString(\"currencyUomId\");     }  else {       currencyCode=EntityUtilProperties.getPropertyValue(\"general.properties\",\"currency.uom.id.default\",\"USD\",delegator);     }     GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne(\"OriginPostalAddress\",false);     if (UtilValidate.isEmpty(originPostalAddress)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentOriginPostalAddressNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }  else     if (UtilValidate.isEmpty(originPostalAddress.getString(\"address1\")) || UtilValidate.isEmpty(originPostalAddress.getString(\"city\")) || UtilValidate.isEmpty(originPostalAddress.getString(\"postalCode\"))|| UtilValidate.isEmpty(originPostalAddress.getString(\"countryGeoId\"))) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentOriginPostalAddressNotComplete\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     GenericValue originCountryGeo=originPostalAddress.getRelatedOne(\"CountryGeo\",false);     if (UtilValidate.isEmpty(originCountryGeo)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentOriginCountryGeoNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String originAddressCountryCode=originCountryGeo.getString(\"geoCode\");     String originAddressStateOrProvinceCode=null;     if (originAddressCountryCode.equals(\"CA\") || originAddressCountryCode.equals(\"US\")) {       if (UtilValidate.isEmpty(originPostalAddress.getString(\"stateProvinceGeoId\"))) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentOriginStateProvinceGeoIdRequired\",UtilMisc.toMap(\"contactMechId\",originPostalAddress.getString(\"contactMechId\"),\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));       }       GenericValue stateProvinceGeo=EntityQuery.use(delegator).from(\"Geo\").where(\"geoId\",originPostalAddress.getString(\"stateProvinceGeoId\")).cache().queryOne();       originAddressStateOrProvinceCode=stateProvinceGeo.getString(\"geoCode\");     }     GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne(\"OriginTelecomNumber\",false);     if (UtilValidate.isEmpty(originTelecomNumber)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String originContactPhoneNumber=originTelecomNumber.getString(\"areaCode\") + originTelecomNumber.getString(\"contactNumber\");     if (UtilValidate.isNotEmpty(originTelecomNumber.getString(\"countryCode\")) && !(originAddressCountryCode.equals(\"CA\") || originAddressCountryCode.equals(\"US\"))) {       originContactPhoneNumber=originTelecomNumber.getString(\"countryCode\") + originContactPhoneNumber;     }     originContactPhoneNumber=originContactPhoneNumber.replaceAll(\"[^+\\\\d]\",\"\");     GenericValue partyFrom=null;     GenericValue originFacility=shipment.getRelatedOne(\"OriginFacility\",false);     if (UtilValidate.isEmpty(originFacility)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexOriginFacilityRequired\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }  else {       partyFrom=originFacility.getRelatedOne(\"OwnerParty\",false);       if (UtilValidate.isEmpty(partyFrom)) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexOwnerPartyRequired\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"facilityId\",originFacility.getString(\"facilityId\")),locale));       }     }     String originContactKey=\"PERSON\".equals(partyFrom.getString(\"partyTypeId\")) ? \"OriginContactPersonName\" : \"OriginContactCompanyName\";     String originContactName=PartyHelper.getPartyName(partyFrom,false);     if (UtilValidate.isEmpty(originContactName)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPartyFromHasNoName\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     GenericValue destinationPostalAddress=shipmentRouteSegment.getRelatedOne(\"DestPostalAddress\",false);     if (UtilValidate.isEmpty(destinationPostalAddress)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentDestPostalAddressNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }  else     if (UtilValidate.isEmpty(destinationPostalAddress.getString(\"address1\")) || UtilValidate.isEmpty(destinationPostalAddress.getString(\"city\")) || UtilValidate.isEmpty(destinationPostalAddress.getString(\"postalCode\"))|| UtilValidate.isEmpty(destinationPostalAddress.getString(\"countryGeoId\"))) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentDestPostalAddressIncomplete\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     GenericValue destinationCountryGeo=destinationPostalAddress.getRelatedOne(\"CountryGeo\",false);     if (UtilValidate.isEmpty(destinationCountryGeo)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentDestCountryGeoNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String destinationAddressCountryCode=destinationCountryGeo.getString(\"geoCode\");     String destinationAddressStateOrProvinceCode=null;     if (destinationAddressCountryCode.equals(\"CA\") || destinationAddressCountryCode.equals(\"US\")) {       if (UtilValidate.isEmpty(destinationPostalAddress.getString(\"stateProvinceGeoId\"))) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentDestStateProvinceGeoIdNotFound\",UtilMisc.toMap(\"contactMechId\",destinationPostalAddress.getString(\"contactMechId\"),\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));       }       GenericValue stateProvinceGeo=EntityQuery.use(delegator).from(\"Geo\").where(\"geoId\",destinationPostalAddress.getString(\"stateProvinceGeoId\")).cache().queryOne();       destinationAddressStateOrProvinceCode=stateProvinceGeo.getString(\"geoCode\");     }     GenericValue destinationTelecomNumber=shipmentRouteSegment.getRelatedOne(\"DestTelecomNumber\",false);     if (UtilValidate.isEmpty(destinationTelecomNumber)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentRouteSegmentDestTelecomNumberNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String destinationContactPhoneNumber=destinationTelecomNumber.getString(\"areaCode\") + destinationTelecomNumber.getString(\"contactNumber\");     if (UtilValidate.isNotEmpty(destinationTelecomNumber.getString(\"countryCode\")) && !(destinationAddressCountryCode.equals(\"CA\") || destinationAddressCountryCode.equals(\"US\"))) {       destinationContactPhoneNumber=destinationTelecomNumber.getString(\"countryCode\") + destinationContactPhoneNumber;     }     destinationContactPhoneNumber=destinationContactPhoneNumber.replaceAll(\"[^+\\\\d]\",\"\");     String destinationPartyId=shipment.getString(\"partyIdTo\");     if (UtilValidate.isEmpty(destinationPartyId)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPartyToRequired\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     GenericValue partyTo=EntityQuery.use(delegator).from(\"Party\").where(\"partyId\",destinationPartyId).queryOne();     String destinationContactKey=\"PERSON\".equals(partyTo.getString(\"partyTypeId\")) ? \"DestinationContactPersonName\" : \"DestinationContactCompanyName\";     String destinationContactName=PartyHelper.getPartyName(partyTo,false);     if (UtilValidate.isEmpty(destinationContactName)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPartyToHasNoName\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     String homeDeliveryType=null;     Timestamp homeDeliveryDate=null;     if (\"GROUNDHOMEDELIVERY\".equals(service)) {       homeDeliveryType=shipmentRouteSegment.getString(\"homeDeliveryType\");       if (UtilValidate.isNotEmpty(homeDeliveryType)) {         if (!(homeDeliveryType.equals(\"DATECERTAIN\") || homeDeliveryType.equals(\"EVENING\") || homeDeliveryType.equals(\"APPOINTMENT\"))) {           return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexHomeDeliveryTypeInvalid\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));         }       }       homeDeliveryDate=shipmentRouteSegment.getTimestamp(\"homeDeliveryDate\");       if (UtilValidate.isEmpty(homeDeliveryDate)) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexHomeDeliveryDateRequired\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));       }  else       if (homeDeliveryDate.before(UtilDateTime.nowTimestamp())) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexHomeDeliveryDateBeforeCurrentDate\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));       }     }     List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated(\"ShipmentPackageRouteSeg\",null,UtilMisc.toList(\"+shipmentPackageSeqId\"),false);     if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentPackageRouteSegsNotFound\",UtilMisc.toMap(\"shipmentId\",shipmentId,\"shipmentRouteSegmentId\",shipmentRouteSegmentId),locale));     }     if (shipmentPackageRouteSegs.size() != 1) {       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexMultiplePackagesNotSupported\",locale));     }     shipRequestContext.put(\"AccountNumber\",accountNumber);     shipRequestContext.put(\"MeterNumber\",meterNumber);     shipRequestContext.put(\"CarrierCode\",carrierCode);     shipRequestContext.put(\"ShipDate\",UtilDateTime.nowTimestamp());     shipRequestContext.put(\"ShipTime\",UtilDateTime.nowTimestamp());     shipRequestContext.put(\"DropoffType\",dropoffType);     shipRequestContext.put(\"Service\",service);     shipRequestContext.put(\"WeightUnits\",weightUomId.equals(\"WT_kg\") ? \"KGS\" : \"LBS\");     shipRequestContext.put(\"CurrencyCode\",currencyCode);     shipRequestContext.put(\"PayorType\",\"SENDER\");     shipRequestContext.put(originContactKey,originContactName);     shipRequestContext.put(\"OriginContactPhoneNumber\",originContactPhoneNumber);     shipRequestContext.put(\"OriginAddressLine1\",originPostalAddress.getString(\"address1\"));     if (UtilValidate.isNotEmpty(originPostalAddress.getString(\"address2\"))) {       shipRequestContext.put(\"OriginAddressLine2\",originPostalAddress.getString(\"address2\"));     }     shipRequestContext.put(\"OriginAddressCity\",originPostalAddress.getString(\"city\"));     if (UtilValidate.isNotEmpty(originAddressStateOrProvinceCode)) {       shipRequestContext.put(\"OriginAddressStateOrProvinceCode\",originAddressStateOrProvinceCode);     }     shipRequestContext.put(\"OriginAddressPostalCode\",originPostalAddress.getString(\"postalCode\"));     shipRequestContext.put(\"OriginAddressCountryCode\",originAddressCountryCode);     shipRequestContext.put(destinationContactKey,destinationContactName);     shipRequestContext.put(\"DestinationContactPhoneNumber\",destinationContactPhoneNumber);     shipRequestContext.put(\"DestinationAddressLine1\",destinationPostalAddress.getString(\"address1\"));     if (UtilValidate.isNotEmpty(destinationPostalAddress.getString(\"address2\"))) {       shipRequestContext.put(\"DestinationAddressLine2\",destinationPostalAddress.getString(\"address2\"));     }     shipRequestContext.put(\"DestinationAddressCity\",destinationPostalAddress.getString(\"city\"));     if (UtilValidate.isNotEmpty(destinationAddressStateOrProvinceCode)) {       shipRequestContext.put(\"DestinationAddressStateOrProvinceCode\",destinationAddressStateOrProvinceCode);     }     shipRequestContext.put(\"DestinationAddressPostalCode\",destinationPostalAddress.getString(\"postalCode\"));     shipRequestContext.put(\"DestinationAddressCountryCode\",destinationAddressCountryCode);     shipRequestContext.put(\"LabelType\",\"2DCOMMON\");     shipRequestContext.put(\"LabelImageType\",labelImageType);     if (UtilValidate.isNotEmpty(homeDeliveryType)) {       shipRequestContext.put(\"HomeDeliveryType\",homeDeliveryType);     }     if (homeDeliveryDate != null) {       shipRequestContext.put(\"HomeDeliveryDate\",homeDeliveryDate);     }     boolean hasBillingWeight=false;     BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal(\"billingWeight\");     String billingWeightUomId=shipmentRouteSegment.getString(\"billingWeightUomId\");     if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {       hasBillingWeight=true;       if (billingWeightUomId == null) {         Debug.logWarning(\"Shipment Route Segment missing billingWeightUomId in shipmentId \" + shipmentId + \", assuming default shipment.fedex.weightUomId of \"+ weightUomId+ \" from \"+ shipmentPropertiesFile,module);         billingWeightUomId=weightUomId;       }       if (!billingWeightUomId.equals(weightUomId)) {         Map<String,Object> results=dispatcher.runSync(\"convertUom\",UtilMisc.<String,Object>toMap(\"uomId\",billingWeightUomId,\"uomIdTo\",weightUomId,\"originalValue\",billingWeight));         if (ServiceUtil.isError(results) || (results.get(\"convertedValue\") == null)) {           Debug.logWarning(\"Unable to convert billing weights for shipmentId \" + shipmentId,module);           hasBillingWeight=false;         }  else {           billingWeight=(BigDecimal)results.get(\"convertedValue\");         }       }     }     for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {       GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne(\"ShipmentPackage\",false);       GenericValue shipmentBoxType=shipmentPackage.getRelatedOne(\"ShipmentBoxType\",false);       String packaging=null;       if (UtilValidate.isEmpty(shipmentBoxType)) {         packaging=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,\"defaultPackagingType\",resource,\"shipment.fedex.default.packagingType\");         if (UtilValidate.isEmpty(packaging)) {           return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPackingTypeNotConfigured\",UtilMisc.toMap(\"shipmentPackageSeqId\",shipmentPackage.getString(\"shipmentPackageSeqId\"),\"shipmentId\",shipmentId),locale));         }         Debug.logWarning(\"Package \" + shipmentPackage.getString(\"shipmentPackageSeqId\") + \" of shipment \"+ shipmentId+ \" has no packaging type set - defaulting to \"+ packaging,module);       }  else {         packaging=shipmentBoxType.getString(\"shipmentBoxTypeId\");       }       GenericValue carrierShipmentBoxType=EntityQuery.use(delegator).from(\"CarrierShipmentBoxType\").where(\"partyId\",\"FEDEX\",\"shipmentBoxTypeId\",packaging).queryOne();       if (UtilValidate.isEmpty(carrierShipmentBoxType)) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPackingTypeInvalid\",UtilMisc.toMap(\"shipmentPackageSeqId\",shipmentPackage.getString(\"shipmentPackageSeqId\"),\"shipmentId\",shipmentId),locale));       }  else       if (UtilValidate.isEmpty(carrierShipmentBoxType.getString(\"packagingTypeCode\"))) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexPackingTypeMissing\",UtilMisc.toMap(\"shipmentPackageSeqId\",shipmentPackage.getString(\"shipmentPackageSeqId\"),\"shipmentId\",shipmentId),locale));       }       packaging=carrierShipmentBoxType.getString(\"packagingTypeCode\");       BigDecimal dimensionsLength=null;       BigDecimal dimensionsWidth=null;       BigDecimal dimensionsHeight=null;       if (shipmentBoxType != null) {         dimensionsLength=shipmentBoxType.getBigDecimal(\"boxLength\");         dimensionsWidth=shipmentBoxType.getBigDecimal(\"boxWidth\");         dimensionsHeight=shipmentBoxType.getBigDecimal(\"boxHeight\");         String boxDimensionsUomId=null;         GenericValue boxDimensionsUom=shipmentBoxType.getRelatedOne(\"DimensionUom\",false);         if (!UtilValidate.isEmpty(boxDimensionsUom)) {           boxDimensionsUomId=boxDimensionsUom.getString(\"uomId\");         }  else {           Debug.logWarning(\"Packaging type for package \" + shipmentPackage.getString(\"shipmentPackageSeqId\") + \" of shipmentRouteSegment \"+ shipmentRouteSegmentId+ \" of shipment \"+ shipmentId+ \" is missing dimensionUomId, assuming default shipment.default.dimension.uom of \"+ dimensionsUomId+ \" from \"+ shipmentPropertiesFile,module);           boxDimensionsUomId=dimensionsUomId;         }         if (dimensionsLength != null && dimensionsLength.compareTo(BigDecimal.ZERO) > 0) {           if (!boxDimensionsUomId.equals(dimensionsUomId)) {             Map<String,Object> results=dispatcher.runSync(\"convertUom\",UtilMisc.<String,Object>toMap(\"uomId\",boxDimensionsUomId,\"uomIdTo\",dimensionsUomId,\"originalValue\",dimensionsLength));             if (ServiceUtil.isError(results) || (results.get(\"convertedValue\") == null)) {               Debug.logWarning(\"Unable to convert length for package \" + shipmentPackage.getString(\"shipmentPackageSeqId\") + \" of shipmentRouteSegment \"+ shipmentRouteSegmentId+ \" of shipment \"+ shipmentId,module);               dimensionsLength=null;             }  else {               dimensionsLength=(BigDecimal)results.get(\"convertedValue\");             }           }         }         if (dimensionsWidth != null && dimensionsWidth.compareTo(BigDecimal.ZERO) > 0) {           if (!boxDimensionsUomId.equals(dimensionsUomId)) {             Map<String,Object> results=dispatcher.runSync(\"convertUom\",UtilMisc.<String,Object>toMap(\"uomId\",boxDimensionsUomId,\"uomIdTo\",dimensionsUomId,\"originalValue\",dimensionsWidth));             if (ServiceUtil.isError(results) || (results.get(\"convertedValue\") == null)) {               Debug.logWarning(\"Unable to convert width for package \" + shipmentPackage.getString(\"shipmentPackageSeqId\") + \" of shipmentRouteSegment \"+ shipmentRouteSegmentId+ \" of shipment \"+ shipmentId,module);               dimensionsWidth=null;             }  else {               dimensionsWidth=(BigDecimal)results.get(\"convertedValue\");             }           }         }         if (dimensionsHeight != null && dimensionsHeight.compareTo(BigDecimal.ZERO) > 0) {           if (!boxDimensionsUomId.equals(dimensionsUomId)) {             Map<String,Object> results=dispatcher.runSync(\"convertUom\",UtilMisc.<String,Object>toMap(\"uomId\",boxDimensionsUomId,\"uomIdTo\",dimensionsUomId,\"originalValue\",dimensionsHeight));             if (ServiceUtil.isError(results) || (results.get(\"convertedValue\") == null)) {               Debug.logWarning(\"Unable to convert height for package \" + shipmentPackage.getString(\"shipmentPackageSeqId\") + \" of shipmentRouteSegment \"+ shipmentRouteSegmentId+ \" of shipment \"+ shipmentId,module);               dimensionsHeight=null;             }  else {               dimensionsHeight=(BigDecimal)results.get(\"convertedValue\");             }           }         }       }       BigDecimal packageWeight=null;       if (!hasBillingWeight) {         if (UtilValidate.isNotEmpty(shipmentPackage.getString(\"weight\"))) {           packageWeight=shipmentPackage.getBigDecimal(\"weight\");         }  else {           try {             packageWeight=new BigDecimal(EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,\"shipment.default.weight.value\",delegator));           }  catch (          NumberFormatException ne) {             Debug.logWarning(\"Default shippable weight not configured (shipment.default.weight.value), assuming 1.0\" + weightUomId,module);             packageWeight=BigDecimal.ONE;           }         }         String packageWeightUomId=shipmentPackage.getString(\"weightUomId\");         if (UtilValidate.isEmpty(packageWeightUomId)) {           Debug.logWarning(\"Shipment Route Segment missing weightUomId in shipmentId \" + shipmentId + \", assuming shipment.default.weight.uom of \"+ weightUomId+ \" from \"+ shipmentPropertiesFile,module);           packageWeightUomId=weightUomId;         }         if (!packageWeightUomId.equals(weightUomId)) {           Map<String,Object> results=dispatcher.runSync(\"convertUom\",UtilMisc.<String,Object>toMap(\"uomId\",packageWeightUomId,\"uomIdTo\",weightUomId,\"originalValue\",packageWeight));           if (ServiceUtil.isError(results) || (results.get(\"convertedValue\") == null)) {             return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexWeightOfPackageCannotBeConverted\",UtilMisc.toMap(\"shipmentPackageSeqId\",shipmentPackage.getString(\"shipmentPackageSeqId\"),\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"shipmentId\",shipmentId),locale));           }  else {             packageWeight=(BigDecimal)results.get(\"convertedValue\");           }         }       }       BigDecimal weight=hasBillingWeight ? billingWeight : packageWeight;       if (weight == null || weight.compareTo(BigDecimal.ZERO) < 0) {         return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexWeightOfPackageNotAvailable\",UtilMisc.toMap(\"shipmentPackageSeqId\",shipmentPackage.getString(\"shipmentPackageSeqId\"),\"shipmentRouteSegmentId\",shipmentRouteSegmentId,\"shipmentId\",shipmentId),locale));       }       shipRequestContext.put(\"CustomerReference\",shipmentId + \":\" + shipmentRouteSegmentId+ \":\"+ shipmentPackage.getString(\"shipmentPackageSeqId\"));       shipRequestContext.put(\"DropoffType\",dropoffType);       shipRequestContext.put(\"Packaging\",packaging);       if (UtilValidate.isNotEmpty(dimensionsUomId) && dimensionsLength != null && dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsWidth != null && dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsHeight != null && dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0) {         shipRequestContext.put(\"DimensionsUnits\",dimensionsUomId.equals(\"LEN_in\") ? \"IN\" : \"CM\");         shipRequestContext.put(\"DimensionsLength\",dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).toString());         shipRequestContext.put(\"DimensionsWidth\",dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).toString());         shipRequestContext.put(\"DimensionsHeight\",dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).toString());       }       shipRequestContext.put(\"Weight\",weight.setScale(1,BigDecimal.ROUND_UP).toString());     }     StringWriter outWriter=new StringWriter();     try {       FreeMarkerWorker.renderTemplateAtLocation(templateLocation,shipRequestContext,outWriter);     }  catch (    Exception e) {       String errorMessage=\"Cannot confirm Fedex shipment: Failed to render Fedex XML Ship Request Template [\" + templateLocation + \"].\";       Debug.logError(e,errorMessage,module);       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexShipmentTemplateError\",UtilMisc.toMap(\"templateLocation\",templateLocation,\"errorString\",e.getMessage()),locale));     }     String fDXShipRequestString=outWriter.toString();     String fDXShipReplyString=null;     try {       fDXShipReplyString=sendFedexRequest(fDXShipRequestString,delegator,shipmentGatewayConfigId,resource,locale);       if (Debug.verboseOn()) {         Debug.logVerbose(fDXShipReplyString,module);       }     }  catch (    FedexConnectException e) {       String errorMessage=\"Error sending Fedex request for FDXShipRequest: \";       Debug.logError(e,errorMessage,module);       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexShipmentTemplateSendingError\",UtilMisc.toMap(\"errorString\",e.toString()),locale));     }     return handleFedexShipReply(fDXShipReplyString,shipmentRouteSegment,shipmentPackageRouteSegs,locale);   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexShipmentTemplateServiceError\",UtilMisc.toMap(\"errorString\",e.toString()),locale));   } catch (  GenericServiceException se) {     Debug.logError(se,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"FacilityShipmentFedexShipmentTemplateServiceError\",UtilMisc.toMap(\"errorString\",se.toString()),locale));   } } "
"public boolean isCleared(){   return _cleared; } "
"public void addHeaderView(View v,Object data,boolean isSelectable){   ListAdapter adapter=getAdapter();   if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {     throw new IllegalStateException(\"Cannot add header view to grid -- setAdapter has already been called.\");   }   FixedViewInfo info=new FixedViewInfo();   FrameLayout fl=new FullWidthFixedViewLayout(getContext());   fl.addView(v);   info.view=v;   info.viewContainer=fl;   info.data=data;   info.isSelectable=isSelectable;   mHeaderViewInfos.add(info);   if (adapter != null) {     ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();   } } "
"public int size(){   return size; } "
"@VisibleForTesting public Optional<HostedZone> findHostedZone(String record){   final String fqdnRecord=determineFqdnRecord(record);   final Optional<HostedZone> matchingZone=route53.listHostedZones().getHostedZones().stream().filter(null).reduce((null));   matchingZone.ifPresent(null);   return matchingZone; } "
"private String gaps(int n){   StringBuilder buf=new StringBuilder();   for (; n > 0; n--) {     buf.append('-');   }   return buf.toString(); } "
"public Builder zoomOutTitle(String zoomOutTitle){   this.zoomOutTitle=zoomOutTitle;   return this; } "
"@Override public void replaceData(int offset,int count,String arg) throws DOMException {   throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\"); } "
"public String post(String stream) throws HttpClientException {   this.rawStream=stream;   return sendHttpRequest(\"post\"); } "
"@Override public boolean addAll(@NonNull Collection<? extends MODEL> collection){   return addAll(getItemCount(),collection); } "
"private String validated(String permissionString) throws InvalidPermissionStringException {   _permissionResolver.resolvePermission(permissionString);   return permissionString; } "
"public static String removePackageName(String fully_qualified_name_){   if (fully_qualified_name_ == null)   return null;   int lastdot=fully_qualified_name_.lastIndexOf('.');   if (lastdot < 0) {     return \"\";   }  else {     return fully_qualified_name_.substring(lastdot + 1);   } } "
"public void removeShape(int shapeIndex){   if ((shapeIndex >= 0) && (shapeIndex < segmentList.size())) {     segmentList.remove(shapeIndex);   } } "
"public static void configurePeriodicSync(Context context,Account account){   final String authority=context.getString(R.string.data_provider_authority);   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {     SyncRequest request=new SyncRequest.Builder().setExtras(Bundle.EMPTY).syncPeriodic(SYNC_INTERVAL,SYNC_FLEXTIME).setSyncAdapter(account,authority).build();     ContentResolver.requestSync(request);   }  else {     ContentResolver.addPeriodicSync(account,authority,Bundle.EMPTY,SYNC_INTERVAL);   }   Log.v(LOG_TAG,\"Periodic sync configured with \" + SYNC_INTERVAL + \" interval and \"+ SYNC_FLEXTIME+ \" flextime\"); } "
"public synchronized boolean hasRef(long gen){   Integer rc=genRefCounts.get(gen);   if (rc == null) {     return false;   }  else {     assert rc.intValue() > 0;     return true;   } } "
"void onSaveFast(DataSupport baseObj) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {   ignoreAssociations=true;   onSave(baseObj); } "
"public LinkedHashSet<JobRowFilter> buildJobStoreFilter(@NotNull String filterQuery){   return Arrays.stream(filterQuery.split(COMMA_AFTER_BRACKET_PATTERN)).map(null).collect(Collectors.toCollection(null)); } "
"public static void main(String[] args){   GeoServerConnection connection=new GeoServerConnection();   connection.setConnectionName(\"Test\");   try {     connection.setUrl(new URL(\"http://localhost/geoserver\"));     connection.setUserName(\"admin\");     connection.setPassword(\"geoserver\");     RenderTransformationManager.getInstance().getRenderTransform(connection);   }  catch (  MalformedURLException e) {     e.printStackTrace();   } } "
"public void initializeWithNative(){   initialize(this); } "
"public void addNewFeature(){   SimpleFeatureType featureType=userLayer.getInlineFeatureType();   String typeName=userLayer.getInlineFeatureType().getTypeName();   try {     SimpleFeatureSource featureSource=userLayer.getInlineFeatureDatastore().getFeatureSource(typeName);     SimpleFeatureBuilder sfb=new SimpleFeatureBuilder(featureType);     ArrayList<SimpleFeature> featureList=new ArrayList<SimpleFeature>();     SimpleFeatureIterator it=featureSource.getFeatures().features();     try {       while (it.hasNext()) {         SimpleFeature sf=it.next();         List<Object> attributeValueList=sf.getAttributes();         sfb.addAll(attributeValueList);         featureList.add(sfb.buildFeature(null));       }       String wktString=\"wkt://POINT(0 0)\";       Geometry geometry=WKTConversion.convertToGeometry(wktString,getSelectedCRSCode());       sfb.add(geometry);       featureList.add(sfb.buildFeature(null));     }   finally {       it.close();     }     SimpleFeatureCollection collection=new ListFeatureCollection(featureType,featureList);     DataStore dataStore=DataUtilities.dataStore(collection);     featureCollection=collection;     cachedFeature=null;     lastRow=-1;     userLayer.setInlineFeatureDatastore(dataStore);   }  catch (  IOException e) {     ConsoleManager.getInstance().exception(this,e);   }   this.fireTableStructureChanged();   this.fireTableDataChanged();   if (parentObj != null) {     parentObj.inlineFeatureUpdated();   } } "
"public static void cleanInternalCache(Context context){   File directory=context.getCacheDir();   deleteFilesByDirectory(directory); } "
"public static Map<String,Object> testCCProcessorCaptureAlwaysDecline(DispatchContext dctx,Map<String,? extends Object> context){   Locale locale=(Locale)context.get(\"locale\");   Map<String,Object> result=ServiceUtil.returnSuccess();   BigDecimal processAmount=(BigDecimal)context.get(\"captureAmount\");   Debug.logInfo(\"Test Processor Declining Credit Card capture\",module);   String refNum=UtilDateTime.nowAsString();   result.put(\"captureResult\",Boolean.FALSE);   result.put(\"captureAmount\",processAmount);   result.put(\"captureRefNum\",refNum);   result.put(\"captureAltRefNum\",refNum);   result.put(\"captureFlag\",\"D\");   result.put(\"captureMessage\",UtilProperties.getMessage(resource,\"AccountingPaymentTestCaptureDeclined\",locale));   return result; } "
"public long convert(String value){   if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals(\"-1\")) {     return MISSING_VALUE;   }   value=Strings.padStart(value,4,'0');   if (selectedFormatter == null) {     selectedFormatter=TypeUtils.getDateTimeFormatter(value);   }   LocalDateTime time;   try {     time=LocalDateTime.parse(value,selectedFormatter);   }  catch (  DateTimeParseException e) {     selectedFormatter=TypeUtils.DATE_TIME_FORMATTER;     time=LocalDateTime.parse(value,selectedFormatter);   }   return PackedLocalDateTime.pack(time); } "
"public void testApp(){   assertTrue(true); } "
"@SuppressLint(\"SetTextI18n\") @Override public void onRequestStatsSuccess(Call<PhotoStats> call,Response<PhotoStats> response){   if (response.isSuccessful() && response.body() != null) {     likeNum.setText(response.body().likes + \" LIKES\");     viewNum.setText(response.body().views + \" VIEWS\");     downloadNum.setText(response.body().downloads + \" DOWNLOADS\");     setState(SUCCESS_STATE);   }  else   if (Integer.parseInt(response.headers().get(\"X-Ratelimit-Remaining\")) < 0) {     dismiss();     RateLimitDialog dialog=new RateLimitDialog();     dialog.show(getFragmentManager(),null);   }  else {     service.requestStats(photo.id,this);   } } "
"public Town(int id,int level,int points,Race race,Timestamp levelUpDate){   this.id=id;   this.level=level;   this.points=points;   this.levelUpDate=levelUpDate;   this.race=race;   this.persistentState=PersistentState.UPDATED;   this.spawnedNpcs=new ArrayList<Npc>();   spawnNewObjects(); } "
"public ConsistencyLevel clamp(ConsistencyLevel consistencyLevel){   return _topologyAdapter.clamp(consistencyLevel); } "
"public void testAddAfterStop() throws Exception {   deleteAllDocs();   send(\"stopIndex\");   try {     send(\"addDocument\",\"{fields: {}}\");     fail();   }  catch (  IOException ioe) {   }   send(\"startIndex\"); } "
"private void clearForceAction(){   TreePath path=this.tree.getSelectionPath();   if (path != null) {     DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();     if (node.getUserObject() instanceof SandboxBody) {       SandboxBody body=(SandboxBody)node.getUserObject();       int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString(\"menu.context.body.clearForce.warning\"),body.getName()),Messages.getString(\"menu.context.body.clearForce.warning.title\"),JOptionPane.YES_NO_CANCEL_OPTION);       if (choice == JOptionPane.YES_OPTION) { synchronized (Simulation.LOCK) {           body.clearAccumulatedForce();         }       }     }   } } "
"private static boolean versionGreaterThan(GradleVersion v,int major,int minor,int micro,int beta,int alpha){   if (v == null) {     return true;   }   if (v.getMajor() != major) {     return v.getMajor() > major;   }   if (v.getMinor() != minor) {     return (v.getMinor() > minor);   }   if (v.getMicro() != micro) {     return (v.getMicro() > micro);   }   if (alpha > 0) {     if (\"alpha\".equals(v.getPreviewType())) {       return (v.getPreview() > alpha);     }  else {       return true;     }   }   if (beta > 0) {     if (\"beta\".equals(v.getPreviewType())) {       return (v.getPreview() > beta);     }  else {       return true;     }   }   return false; } "
"public static ValueGetterSpacePredicate<ServerEntry> pathNot(String path,ISpacePredicate predicate){   return path(path,not(predicate)); } "
"public FriendsSearchQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"private String downloadUrl(String strUrl) throws IOException {   String data=\"\";   InputStream iStream=null;   HttpURLConnection urlConnection=null;   try {     URL url=new URL(strUrl);     urlConnection=(HttpURLConnection)url.openConnection();     urlConnection.connect();     iStream=urlConnection.getInputStream();     BufferedReader br=new BufferedReader(new InputStreamReader(iStream));     StringBuffer sb=new StringBuffer();     String line=\"\";     while ((line=br.readLine()) != null) {       sb.append(line);     }     data=sb.toString();     br.close();   }  catch (  Exception e) {     Log.d(\"Exc. while down url\",e.toString());   }  finally {     iStream.close();     urlConnection.disconnect();   }   return data; } "
"public static void writeRJava(String outputDirectory,String packageName,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> rTypeResourceMap,boolean isFinal){   String outputFullFilename=new File(outputDirectory).getAbsolutePath() + Constant.Symbol.SLASH_LEFT + (packageName.replace(Constant.Symbol.DOT,Constant.Symbol.SLASH_LEFT) + Constant.Symbol.SLASH_LEFT + \"R\"+ Constant.Symbol.DOT+ Constant.File.JAVA);   FileUtil.createFile(outputFullFilename);   PrintWriter writer=null;   try {     writer=new PrintWriter(new FileOutputStream(outputFullFilename));     writer.format(\"package %s;\\n\\n\",packageName);     writer.println(\"public final class R {\\n\");     for (    RType rType : rTypeResourceMap.keySet()) {       writer.format(\"  public static final class %s {\\n\",rType.toString());       for (      com.tencent.tinker.build.aapt.RDotTxtEntry rDotTxtEntry : rTypeResourceMap.get(rType)) {         writer.format(\"    public static%s%s %s=%s;\\n\",isFinal ? \" final \" : \" \",rDotTxtEntry.idType,rDotTxtEntry.name,rDotTxtEntry.idValue);       }       writer.println(\"  }\\n\");     }     writer.println(\"}\");   }  catch (  Exception e) {     throw new AaptUtilException(e);   }  finally {     if (writer != null) {       writer.flush();       writer.close();     }   } } "
"public static SM_SYSTEM_MESSAGE STR_CANCEL_PETITION_FAIL_TO_GM(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1300558,value0,value1); } "
"public boolean on_fly_cg(){   return soot.PhaseOptions.getBoolean(options,\"on-fly-cg\"); } "
"public static void onCreate(Activity activity){   FieldsRetainer<Activity> retainer=findFieldsRetainer(activity.getClass());   if (retainer != null) {     retainer.onCreate(activity);   } } "
"public AemContentFinder expand(){   if (isCollapsed()) {     bobcatWait.withTimeout(Timeouts.MEDIUM).until(ContentFinderActions.expand());     bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(collapseButton));   }   return this; } "
"public Builder quality(int quality){   if (quality < 1 || quality > 100)   throw new IllegalArgumentException(\"quality must be between 1 and 100\");   this.quality=quality;   return this; } "
"public static void init(Configuration conf){   ROOT=conf.getString(\"temp.path\",\"/opt/temp/\"); } "
"@deprecated protected int writeValueAndFinal(int i,boolean isFinal){   if ((0 <= i) && (i <= 64)) {     return write(16 + i << 1 | (isFinal ? 1 : 0));   }   int length=1;   if ((i < 0) || (i > 16777215)) {     this.intBytes[0]=Byte.MAX_VALUE;     this.intBytes[1]=((byte)(i >> 24));     this.intBytes[2]=((byte)(i >> 16));     this.intBytes[3]=((byte)(i >> 8));     this.intBytes[4]=((byte)i);     length=5;   }  else {     if (i <= 6911) {       this.intBytes[0]=((byte)(81 + (i >> 8)));     }  else {       if (i <= 1179647) {         this.intBytes[0]=((byte)(108 + (i >> 16)));       }  else {         this.intBytes[0]=126;         this.intBytes[1]=((byte)(i >> 16));         length=2;       }       this.intBytes[(length++)]=((byte)(i >> 8));     }     this.intBytes[(length++)]=((byte)i);   }   this.intBytes[0]=((byte)(this.intBytes[0] << 1 | (isFinal ? 1 : 0)));   return write(this.intBytes,length); } "
"@Override public void attributeSelection(String field){ } "
"public AudioEditAlbumQuery editAlbum(UserActor actor,int albumId,String title){   return new AudioEditAlbumQuery(getClient(),actor,albumId,title); } "
"public DataStorage(Object store){   if (store instanceof DataProvider)   _saDataProvider=(DataProvider<T>)store;  else   _saDataProvider=null;   if (store instanceof DataPersister)   _saDataPersister=(DataPersister<T>)store;  else   _saDataPersister=null;   if (store instanceof SQLDataProvider)   _saSQLDataProvider=(SQLDataProvider<T>)store;  else   _saSQLDataProvider=null;   if (store instanceof BulkDataPersister)   _saBulkDataPersister=(BulkDataPersister)store;  else   _saBulkDataPersister=null;   if (store instanceof ManagedDataSource)   _saManagedDataSource=(ManagedDataSource)store;  else   _saManagedDataSource=null;   if (_logger.isLoggable(Level.CONFIG)) {     _logger.config(\"\\n\\t Space Data Storage <\" + store + \"> Loaded\"+ \"\\n\\t\\t \"+ DataProvider.class.getSimpleName()+ \"              : \"+ (isDataProvider() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ DataPersister.class.getSimpleName()+ \"             : \"+ (isDataPersister() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ BulkDataPersister.class.getSimpleName()+ \"         : \"+ (isBulkDataPersister() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ SQLDataProvider.class.getSimpleName()+ \"           : \"+ (isSQLDataProvider() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ ManagedDataSource.class.getSimpleName()+ \"         : \"+ (isManagedDataSource() ? \"Implemented\" : \"-\")+ \"\\n\");   } } "
"public DiphoneUnitSelector(URL url) throws IOException {   if (url == null) {     throw new IOException(\"Can't load unit database\");   }   boolean binary=url.getPath().endsWith(\".bin\");   diphoneDatabase=new DiphoneUnitDatabase(url,binary); } "
"public static boolean isNimbus(){   return UIUtils.isNimbus(); } "
"public static StorableTimeFence inTuesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){   return new StorableTimeFence(TUESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis); } "
"private void createMainMethod(){   SootMethod entryPoint=createEntryPointCreator().createDummyMain();   Scene.v().setEntryPoints(Collections.singletonList(entryPoint));   if (Scene.v().containsClass(entryPoint.getDeclaringClass().getName()))   Scene.v().removeClass(entryPoint.getDeclaringClass());   Scene.v().addClass(entryPoint.getDeclaringClass()); } "
"public static boolean isMetaEndOfTrack(MidiMessage midiMsg){   if (midiMsg.getLength() != 3 || midiMsg.getStatus() != MetaMessage.META) {     return false;   }   byte[] msg=midiMsg.getMessage();   return ((msg[1] & 0xFF) == META_END_OF_TRACK_TYPE) && (msg[2] == 0); } "
"@Nullable public GrLiteral findModuleReference(@NotNull Module module){   checkInitialized();   String moduleGradlePath=getModuleGradlePath(module);   if (moduleGradlePath != null) {     commitDocumentChanges();     for (    GrMethodCall includeStatement : getMethodCalls(myGroovyFile,INCLUDE_METHOD)) {       for (      GrLiteral lit : getLiteralArguments(includeStatement)) {         if (moduleGradlePath.equals(lit.getValue())) {           return lit;         }       }     }   }   return null; } "
"public SnapshotDescriptor(X snapshot,String name,String description,Image icon,int position,int autoExpansionPolicy){   super(snapshot,name,description,icon,position,autoExpansionPolicy); } "
"protected Map<String,CharSequence> parseSubSections(CharSequence text,Pattern headerTitlePat,String defaultSectionTitle){   Matcher m=headerTitlePat.matcher(text);   Map<String,CharSequence> secTitleMap=makeDataMap();   int lastEndIndex=0;   String lastSecTitle=tmplHelper.cleanTextValue(defaultSectionTitle);   while (m.find()) {     if (m.start() > 0) {       CharSequence lastSecText=text.subSequence(lastEndIndex,m.start());       if ((lastEndIndex > 0) || lastSecText.toString().trim().length() > 0) {         secTitleMap.put(lastSecTitle,lastSecText);       }     }     lastSecTitle=tmplHelper.cleanTextValue(m.group(1));     lastEndIndex=m.end();   }   secTitleMap.put(lastSecTitle,text.subSequence(lastEndIndex,text.length()));   return secTitleMap; } "
"public static void e(String msg){   if (LOG_ENABLE) {     Log.e(TAG,buildMsg(msg));   } } "
"public void stopRecording(){   m_line.stop();   m_line.close(); } "
"public static String libType(){   if (OS_NAME.indexOf(\"mac\") >= 0) {     return \"jnilib\";   }  else   if (OS_NAME.indexOf(\"nix\") >= 0 || OS_NAME.indexOf(\"nux\") >= 0 || OS_NAME.indexOf(\"aix\") > 0) {     return \"so\";   }  else   if (OS_NAME.indexOf(\"win\") >= 0) {     return \"dll\";   }   throw new TypeNotPresentException(OS_NAME + \" not supported\",null); } "
"protected AbstractPolynomialSolver(final double relativeAccuracy,final double absoluteAccuracy){   super(relativeAccuracy,absoluteAccuracy); } "
"@Override public void cacheGrammars(String grammarType,Grammar[] grammars){   super.cacheGrammars(grammarType,grammars);   fGrammarPool.cacheGrammars(grammarType,grammars); } "
"public void addLanguage(String languageId){   query.append(\" +languageId:\" + languageId); } "
"public boolean isPinchZoomEnabled(){   return mPinchZoomEnabled; } "
"private static byte[] streamToBytes(InputStream in,int length) throws IOException {   byte[] bytes=new byte[length];   int count;   int pos=0;   while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {     pos+=count;   }   if (pos != length) {     throw new IOException(\"Expected \" + length + \" bytes, read \"+ pos+ \" bytes\");   }   return bytes; } "
"public ResourcesPoet addDimension(String name,String value){   Element bool=document.createElement(\"dimen\");   bool.setAttribute(\"name\",name);   bool.appendChild(document.createTextNode(value));   resourceElement.appendChild(bool);   return this; } "
"@Override public double[] makeDensityTestValues(){   return new double[]{0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380,0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380}; } "
"@Deprecated public void clearDiscCache(){   clearDiskCache(); } "
"public static void genr(Zmat A,int ii,int jj1,int jj2,Rot P){   A.dirty=true;   int i=ii - A.basex;   int j1=jj1 - A.basex;   int j2=jj2 - A.basex;   Rot.genr(A.re[i][j1],A.im[i][j1],A.re[i][j2],A.im[i][j2],P);   A.re[i][j1]=P.zr;   A.im[i][j1]=P.zi;   A.re[i][j2]=0;   A.im[i][j2]=0; } "
"private void calculateColor(int coord){   coord=coord - mBarPointerHaloRadius;   if (coord < 0) {     coord=0;   }  else   if (coord > mBarLength) {     coord=mBarLength;   }   if (coord > (mBarPointerHaloRadius + (mBarLength / 2)) && coord < (mBarPointerHaloRadius + mBarLength)) {     mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,(float)(1 - (mPosToSVFactor * (coord - (mBarPointerHaloRadius + (mBarLength / 2)))))});   }  else   if (coord > mBarPointerHaloRadius && coord < (mBarPointerHaloRadius + mBarLength)) {     mColor=Color.HSVToColor(new float[]{mHSVColor[0],(float)((mPosToSVFactor * (coord - mBarPointerHaloRadius))),1f});   }  else   if (coord == mBarPointerHaloRadius) {     mColor=Color.WHITE;   }  else   if (coord == mBarPointerHaloRadius + mBarLength) {     mColor=Color.BLACK;   } } "
"public boolean executeImmediately(final String command,CommandManager commandManager){   System.err.println(\"Executing: \" + command);   try {     if (doc.getProgressListener() == null) {       ProgressListener progressListener=new ProgressPercentage();       doc.setProgressListener(progressListener);     }     if (commandManager != null)     commandManager.execute(command);  else     throw new Exception(\"Internal error: commandManager==null\");     if (viewer == null || !viewer.isLocked()) {       notifyUpdateViewer(Director.ENABLE_STATE);       WaitUntilAllViewersAreUptoDate();       notifyUnlockInput();     }     return true;   }  catch (  CanceledException ex) {     System.err.println(\"USER CANCELED EXECUTE\");     NotificationsInSwing.showInformation(\"USER CANCELED EXECUTE\");     return false;   } catch (  Exception ex) {     NotificationsInSwing.showError(\"Command failed: \" + ex.getMessage());     return false;   } } "
"public void dispose(StepMetaInterface smi,StepDataInterface sdi){   meta=(CarbonSliceMergerStepMeta)smi;   data=(CarbonSliceMergerStepData)sdi;   super.dispose(smi,sdi); } "
"private boolean takeScreenShot(Activity activity){   Date now=new Date();   android.text.format.DateFormat.format(fileFormat,now);   View v1=activity.getWindow().getDecorView().getRootView();   v1.setDrawingCacheEnabled(true);   Bitmap bitmap=Bitmap.createBitmap(v1.getDrawingCache());   v1.setDrawingCacheEnabled(false);   File imageFile=new File(path,now + \".jpg\");   try {     FileOutputStream outputStream=new FileOutputStream(imageFile);     bitmap.compress(Bitmap.CompressFormat.JPEG,quality,outputStream);     outputStream.flush();     outputStream.close();   }  catch (  IOException ex) {     return false;   }   return true; } "
"public static TaskInfo unpackTaskInfo(TaskInfo taskInfo) throws InvalidProtocolBufferException {   if (!taskInfo.hasExecutor()) {     return taskInfo;   }  else {     TaskInfo.Builder taskBuilder=TaskInfo.newBuilder(taskInfo);     ExecutorInfo pkgExecutorInfo=Protos.ExecutorInfo.parseFrom(taskInfo.getData());     if (pkgExecutorInfo.hasCommand()) {       taskBuilder.setCommand(pkgExecutorInfo.getCommand());     }     if (pkgExecutorInfo.hasData()) {       taskBuilder.setData(pkgExecutorInfo.getData());     }     return taskBuilder.build();   } } "
"private boolean computeChange(IProgressMonitor monitor) throws TeamException {   boolean needToUpdateReferenceDocument=false;   if (isReferenceInitialized) {     SyncInfo info=getSyncState(getFileFromEditor());     if (info == null && fLastSyncState != null) {       return true;     }  else     if (info == null) {       return false;     }     if (fLastSyncState == null) {       needToUpdateReferenceDocument=true;     }  else     if (!fLastSyncState.equals(info)) {       needToUpdateReferenceDocument=true;     }     if (DEBUG)     debug(fLastSyncState,info);     fLastSyncState=info;   }   return needToUpdateReferenceDocument; } "
"public boolean isValidLocalTld(String lTld){   lTld=unicodeToASCII(lTld);   return Arrays.binarySearch(LOCAL_TLDS,chompLeadingDot(lTld.toLowerCase(Locale.ENGLISH))) >= 0; } "
"public static int exportName2ReadNames(String format,ViewerBase cViewer,File file,char separator,ProgressListener progressListener) throws IOException {   int totalLines=0;   try {     final Classification classification=ClassificationManager.get(cViewer.getClassName(),true);     final String shortName=(cViewer.getClassName().toLowerCase().equals(\"taxonomy\") ? \"Taxon\" : cViewer.getClassName());     try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){       IConnector connector=cViewer.getDocument().getConnector();       java.util.Collection<Integer> ids=cViewer.getSelectedIds();       progressListener.setSubtask(shortName + \" to read names\");       progressListener.setMaximum(ids.size());       progressListener.setProgress(0);       final IClassificationBlock classificationBlock=connector.getClassificationBlock(cViewer.getClassName());       if (classificationBlock != null) {         for (        int classId : ids) {           final Set<Integer> allBelow;           Node v=classification.getFullTree().getANode(classId);           if (v.getOutDegree() > 0)           allBelow=classification.getFullTree().getAllDescendants(classId);  else {             allBelow=new HashSet<>();             allBelow.add(classId);           }           boolean hasSome=false;           for (          int id : allBelow) {             if (classificationBlock.getSum(id) > 0) {               if (!hasSome) {                 w.write(getLabelSource(shortName,classification,format,v));                 hasSome=true;               }               try (IReadBlockIterator it=connector.getReadsIterator(cViewer.getClassName(),id,0,10000,true,false)){                 while (it.hasNext()) {                   String readId=it.next().getReadName();                   w.write(separator + \" \" + readId);                 }               }                progressListener.checkForCancel();             }           }           if (hasSome) {             w.write(\"\\n\");             totalLines++;           }           progressListener.incrementProgress();         }       }     }    }  catch (  CanceledException canceled) {     System.err.println(\"USER CANCELED\");   }   return totalLines; } "
"public long backgroundColor(){   return mBackgroundColor; } "
"public static boolean canDebugAppOnDevice(@NotNull AndroidFacet facet,@NotNull IDevice device){   if (device.isEmulator()) {     return true;   }   Boolean isDebuggable=AndroidModuleInfo.get(facet).isDebuggable();   if (isDebuggable != null && isDebuggable) {     return true;   }   String buildType=device.getProperty(IDevice.PROP_BUILD_TYPE);   if (\"userdebug\".equals(buildType) || \"eng\".equals(buildType)) {     return true;   }   return false; } "
"public static Object condition(String condititon,Object trueValue,Object falseValue){   return ExpressionUtils.isTrue(condititon,null) ? trueValue : falseValue; } "
"public int hashCode(){   return (ClientMinPrincipal.class.hashCode() + Constraint.hash(principals)); } "
"public long next(long startTime,long fromTime,long currentCount){   if (startTime == 0)   startTime=RecurrenceUtil.now();   if (fromTime == 0)   fromTime=startTime;   if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now())   return 0;   Debug.logVerbose(\"Rule NOT expired by end time.\",module);   if (getCount() != -1 && currentCount >= getCount())   return 0;   Debug.logVerbose(\"Rule NOT expired by max count.\",module);   boolean isSeeking=true;   long nextRuntime=0;   long seekTime=fromTime;   int loopProtection=0;   int maxLoop=(10 * 10 * 10* 10* 10);   while (isSeeking && loopProtection < maxLoop) {     Date nextRun=getNextFreq(startTime,seekTime);     seekTime=nextRun.getTime();     if (validByRule(nextRun)) {       isSeeking=false;       nextRuntime=nextRun.getTime();     }     loopProtection++;   }   return nextRuntime; } "
"public SimpleTimer(String name,String group,long startTime){   this.trigger=new SimpleTrigger(name,group,new Date(startTime)); } "
"public boolean isEmpty(){   return q.isEmpty(); } "
"public AdsUpdateClientsQuery updateClients(UserActor actor,int accountId,String data){   return new AdsUpdateClientsQuery(getClient(),actor,accountId,data); } "
"public FriendsGetQuery listId(Integer value){   return unsafeParam(\"list_id\",value); } "
"public boolean performOk(){   IPreferenceStore store=getPreferenceStore();   if (useDefault.getSelection()) {     store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_DEFAULT);   }  else   if (useTortoiseSVN.getSelection()) {     store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_TORTOISESVN);   }  else   if (useSubversive.getSelection()) {     store.setValue(ISVNUIConstants.PREF_MENU_ICON_SET,ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE);   }   SVNUIPlugin.getPlugin().savePluginPreferences();   return true; } "
"@Override public void close(){   ss.close(); } "
"public String createFileName(){   String pref=getPrefix();   String suff=getSuffix();   String fileName=System.currentTimeMillis() + \"\";   if (pref != null)   fileName=pref + PREFIX_DIVIDER + fileName;   if (suff != null)   fileName=fileName + suff;   return fileName; } "
"@Override protected Change configureCacheObject(SubEquipment subEquipment,Properties properties){   SubEquipmentCacheObject subEquipmentCacheObject=(SubEquipmentCacheObject)subEquipment;   EquipmentConfigurationUpdate update=setCommonProperties(subEquipment,properties);   String tmpStr=properties.getProperty(\"equipmentId\");   if (tmpStr == null) {     tmpStr=properties.getProperty(\"parent_equip_id\");   }   if (tmpStr != null) {     try {       subEquipmentCacheObject.setParentId(Long.valueOf(tmpStr));     }  catch (    NumberFormatException e) {       throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,\"NumberFormatException: Unable to convert parameter \\\"parentId\\\" to Long: \" + tmpStr);     }   }   return update; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_ME_TO_SELF(String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200424,value0,skillname); } "
"public static int indicator(final int x){   return (x >= 0) ? 1 : -1; } "
"protected DocsDeleteQuery docId(int value){   return unsafeParam(\"doc_id\",value); } "
"public boolean filterOut(final SAMRecord record){   if (include) {     if (record.getSupplementaryAlignmentFlag()) {       return false;     }   }  else {     if (!record.getSupplementaryAlignmentFlag()) {       return false;     }   }   return true; } "
"@Override public void onPassphraseCreated(String passphrase){   if (!mProfileSyncService.isBackendInitialized()) {     return;   }   configureEncryption(passphrase); } "
"public static Map<String,Object> sendOrderCompleteNotification(DispatchContext ctx,Map<String,? extends Object> context){   return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_COMPLETE\"); } "
"public ViewBinder addLinks(int viewId,int mask){   TextView view=retrieveView(viewId);   Linkify.addLinks(view,mask);   return this; } "
"private void reserveRegisters(List<Insn> insns,Map<Insn,Stmt> insnsStmtMap,List<LocalRegisterAssignmentInformation> parameterInstructionsList){   int reservedRegs=0;   while (true) {     int regsNeeded=getRegsNeeded(reservedRegs,insns,insnsStmtMap);     int regsToReserve=regsNeeded - reservedRegs;     if (regsToReserve <= 0) {       break;     }     regAlloc.increaseRegCount(regsToReserve);     for (    Insn insn : insns) {       shiftRegs(insn,regsToReserve);     }     for (    LocalRegisterAssignmentInformation info : parameterInstructionsList) {       Register r=info.getRegister();       r.setNumber(r.getNumber() + regsToReserve);     }     reservedRegs+=regsToReserve;   } } "
"public void createFile(String fileName){   System.out.println(\"Creating file \" + fileName + \"...\");   try {     BufferedWriter out=new BufferedWriter(new FileWriter(fileName));     LinkedList currentList;     TreeSet currentSet;     Iterator iter=this.clusters.entrySet().iterator();     while (iter.hasNext()) {       Entry entry=(Entry)iter.next();       String name=(String)entry.getKey();       currentList=(LinkedList)entry.getValue();       Iterator iList=currentList.iterator();       while (iList.hasNext()) {         currentSet=(TreeSet)iList.next();         Iterator iSet=currentSet.iterator();         String docCluster=\"\";         while (iSet.hasNext()) {           docCluster=docCluster + (String)iSet.next() + \" \";         }         docCluster=docCluster + \"# \" + name;         out.write(docCluster + \"\\n\");       }     }     out.close();     System.out.println(\"File created.\");   }  catch (  IOException ex) {     ex.printStackTrace();   } } "
"public static Zdiagmat o(Zdiagmat D1,Zdiagmat D2) throws JampackException {   if (D1.order != D2.order) {     throw new JampackException(\"Unconformity in product\");   }   Zdiagmat D3=new Zdiagmat(D1.order);   for (int i=0; i < D3.order; i++) {     D3.re[i]=D1.re[i] * D2.re[i] - D1.im[i] * D2.im[i];     D3.im[i]=D1.re[i] * D2.im[i] + D1.im[i] * D2.re[i];   }   return D3; } "
"public void updateData() throws IOException {   ProgressListener progress=doc.getProgressListener();   boolean saveCancelable=false;   if (progress != null) {     saveCancelable=progress.isCancelable();     progress.setSubtask(\"updating viewer\");     progress.setCancelable(false);     try {       progress.setProgress(-1);     }  catch (    CanceledException e) {     }   }   totalAssignedReads=0;   classification.getFullTree().computeId2Data(doc.getNumberOfSamples(),doc.getDataTable().getClass2Counts(getClassName()),id2NodeData);   for (  Integer fId : id2NodeData.keySet()) {     if (fId > 0) {       totalAssignedReads+=id2NodeData.get(fId).getCountAssigned();     }   }   if (progress != null)   progress.setCancelable(saveCancelable);   getCommandManager().updateEnableState(); } "
"public void delete(PushLog log){   configPushLogDao.unBindApp(log);   configPushLogDao.delete(log.getId()); } "
"private void notifyListeners(){   for (  LegendOptionDataUpdateInterface listener : listenerList) {     listener.updateLegendOptionData(data);   } } "
"public Object readResolve() throws ObjectStreamException {   ClassLoader cl=ReflectionUtil.getClassTargetLoader(_interfaces[0]);   Object proxyInstance=createInstance(cl);   if (_cacheProxy && _handler instanceof ILRMIProxy) {     StubId stubId=((ILRMIProxy)_handler).getStubId();     if (_stubCacheLogger.isLoggable(Level.FINE))     _stubCacheLogger.fine(\"adding stub to cache, id = \" + stubId + \", stub toString() = \"+ proxyInstance);     LRMIRuntime.getRuntime().getStubCache().addStub(stubId,proxyInstance);   }  else {     if (_stubCacheLogger.isLoggable(Level.FINER))     _stubCacheLogger.finer(\"stub state is uncached, skipping cache insertion. toString() = \" + proxyInstance);   }   return proxyInstance; } "
"public static Map<String,Object> createTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){   Map<String,Object> result=FastMap.newInstance();   Delegator delegator=ctx.getDelegator();   Security security=ctx.getSecurity();   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   Locale locale=(Locale)context.get(\"locale\");   Timestamp now=UtilDateTime.nowTimestamp();   List<GenericValue> toBeStored=FastList.newInstance();   String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,\"PARTYMGR\",\"_PCM_CREATE\");   if (result.size() > 0)   return result;   String contactMechTypeId=\"TELECOM_NUMBER\";   String newCmId=null;   try {     newCmId=delegator.getNextSeqId(\"ContactMech\");   }  catch (  IllegalArgumentException e) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"contactmechservices.could_not_create_contact_info_id_generation_failure\",locale));   }   GenericValue tempContactMech=delegator.makeValue(\"ContactMech\",UtilMisc.toMap(\"contactMechId\",newCmId,\"contactMechTypeId\",contactMechTypeId));   toBeStored.add(tempContactMech);   toBeStored.add(delegator.makeValue(\"PartyContactMech\",UtilMisc.toMap(\"partyId\",partyId,\"contactMechId\",newCmId,\"fromDate\",now,\"roleTypeId\",context.get(\"roleTypeId\"),\"allowSolicitation\",context.get(\"allowSolicitation\"),\"extension\",context.get(\"extension\"))));   toBeStored.add(delegator.makeValue(\"TelecomNumber\",UtilMisc.toMap(\"contactMechId\",newCmId,\"countryCode\",context.get(\"countryCode\"),\"areaCode\",context.get(\"areaCode\"),\"contactNumber\",context.get(\"contactNumber\"))));   try {     delegator.storeAll(toBeStored);   }  catch (  GenericEntityException e) {     Debug.logWarning(e.toString(),module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"contactmechservices.could_not_create_contact_info_write\",UtilMisc.toMap(\"errMessage\",e.getMessage()),locale));   }   result.put(\"contactMechId\",newCmId);   result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);   return result; } "
"@NotNull public AnalyzeImageAction analyzeImage(@NotNull List<VisualFeatures> visualFeatures,@NotNull List<DomainSpecificDetails> domainSpecificDetails,@NotNull String imageUrl){   return new AnalyzeImageAction(cognitiveContext,visualFeatures,domainSpecificDetails,imageUrl); } "
"public AWSIotMqttClient(String clientEndpoint,String clientId,String awsAccessKeyId,String awsSecretAccessKey){   super(clientEndpoint,clientId,awsAccessKeyId,awsSecretAccessKey,null); } "
"private void addCodeFromField(StringBuilder sb,Field f){   try {     sb.append(f.getName() + \" = \" + f.getInt(KeyEvent.class));   }  catch (  IllegalArgumentException e) {     e.printStackTrace();   } catch (  IllegalAccessException e) {     e.printStackTrace();   }   sb.append(\"\\n\"); } "
"private boolean renderRule(Rule rule){   boolean render=false;   if ((rule != null) && (ruleToRender != null)) {     Filter ruleFilter=rule.getFilter();     Filter ruleToRenderFilter=ruleToRender.getFilter();     boolean filtersSame=false;     if ((ruleFilter == null) && (ruleToRenderFilter == null)) {       filtersSame=true;     }  else     if ((ruleFilter == null) || (ruleToRenderFilter == null)) {       filtersSame=false;     }  else {       filtersSame=ruleFilter.equals(ruleToRenderFilter);     }     String ruleName=rule.getName();     String ruleToRenderName=ruleToRender.getName();     if ((ruleName != null) && (ruleToRenderName != null)) {       render=(rule.getName().compareTo(ruleToRender.getName()) == 0) && filtersSame;     }  else     if ((ruleName == null) && (ruleToRenderName == null)) {       render=filtersSame;     }  else {       render=false;     }   }   return render; } "
"public void sync() throws CanceledException {   getChartDrawer().forceUpdate();   seriesList.sync(getChartData().getSeriesNames(),getChartData().getSamplesTooltips(),false);   if (getChartData() instanceof IChartData) {     classesList.sync(((IChartData)getChartData()).getClassNames(),getChartData().getClassesTooltips(),false);     classesList.fireSyncToViewer();   }   attributesList.sync(getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(),null,false); } "
"protected String toString(Vector values,int start,int length){   if (length == 0) {     return \"\";   }   if (length == 1) {     return String.valueOf(values.elementAt(start));   }   StringBuffer str=new StringBuffer();   for (int i=0; i < length; i++) {     if (i > 0) {       str.append(',');     }     str.append(values.elementAt(start + i));   }   return str.toString(); } "
"public Dfp newDfp(final byte x){   return new Dfp(this,x); } "
"public StatelessChunkScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){   super(hQuery,sessionFactory,fetchSize,chunkSize); } "
"protected void addToAnimation(ChromeAnimation.Animation<Animatable<?>> component){   if (mLayoutAnimations == null || mLayoutAnimations.finished()) {     onAnimationStarted();     mLayoutAnimations=new ChromeAnimation<Animatable<?>>();     mLayoutAnimations.start();   }   component.start();   mLayoutAnimations.add(component);   requestUpdate(); } "
"private String stripTags(String content){   return Jsoup.parse(content).text(); } "
"public void testPojoAccessors(){   final Class<?> type=PojoAccessors.class;   PojoTypeInfo typeInfo=PojoTypeInfoRepository.getPojoTypeInfo(type);   assertPojoTypeInfo(typeInfo,type);   Assert.assertEquals(\"numOfProperties\",5,typeInfo.getNumOfProperties());   assertPojoPropertyInfo(typeInfo,\"class\",Class.class,true,false);   assertPojoPropertyInfo(typeInfo,\"publicName\",String.class,true,true);   assertPojoPropertyInfo(typeInfo,\"protectedName\",String.class,true,true);   assertPojoPropertyInfo(typeInfo,\"privateName\",String.class,true,true);   assertPojoPropertyInfo(typeInfo,\"defaultName\",String.class,true,true); } "
"public static void sellStoreItem(Player seller,Player buyer,TradeList tradeList){   if (!validateParticipants(seller,buyer))   return;   PrivateStore store=seller.getStore();   tradeList=loadObjIds(seller,tradeList);   if (tradeList == null)   return;   Storage inventory=buyer.getInventory();   int freeSlots=inventory.getLimit() - inventory.getItemsWithKinah().size() + 1;   if (freeSlots < tradeList.size()) {     return;   }   long price=getTotalPrice(store,tradeList);   if (price < 0)   return;   if (buyer.getInventory().getKinah() >= price) {     for (    TradeItem tradeItem : tradeList.getTradeItems()) {       Item item=getItemByObjId(seller,tradeItem.getItemId());       if (item != null) {         TradePSItem storeItem=store.getTradeItemByObjId(tradeItem.getItemId());         if (item.getItemCount() < tradeItem.getCount()) {           PacketSendUtility.sendMessage(buyer,\"You cannot buy more than player can sell.\");           return;         }         decreaseItemFromPlayer(seller,item,tradeItem);         ItemService.addItem(buyer,item.getItemId(),tradeItem.getCount(),item);         if (storeItem.getCount() == tradeItem.getCount()) {           store.removeItem(storeItem.getItemObjId());         }         log.info(\"[PRIVATE STORE] > [Seller: \" + seller.getName() + \"] sold [Item: \"+ item.getItemId()+ \"][Amount: \"+ item.getItemCount()+ \"] to [Buyer: \"+ buyer.getName()+ \"] for [Price: \"+ price+ \"]\");       }     }     decreaseKinahAmount(buyer,price);     increaseKinahAmount(seller,price);     if (store.getSoldItems().size() == 0) {       closePrivateStore(seller);     }   } } "
"public ZWaveCRC16EncapsulationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"public ZWaveColorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint);   versionMax=MAX_SUPPORTED_VERSION; } "
"public AndroidAuthenticator(Context context,Account account,String authTokenType){   this(context,account,authTokenType,false); } "
"public int computeContigs(int minReads,double minCoverage,int minLength,ProgressListener progress) throws IOException, CanceledException {   final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);   pathExtractor.apply(progress);   paths=pathExtractor.getPaths();   final ContigBuilder contigBuilder=new ContigBuilder(pathExtractor.getPaths(),readId2ContainedReads);   contigBuilder.apply(readId2ReadData,minReads,minCoverage,minLength,progress);   contigs=contigBuilder.getContigs();   return contigBuilder.getCountContigs(); } "
"@Override public int read(char ch[],int offset,int length) throws IOException {   int out=offset;   int count=0;   if (fOffset == 0) {     if (length > fBuffer.length) {       length=fBuffer.length;     }     if (fSurrogate != -1) {       ch[out++]=(char)fSurrogate;       fSurrogate=-1;       length--;     }     count=fInputStream.read(fBuffer,0,length);     if (count == -1) {       return -1;     }     count+=out - offset;   }  else {     count=fOffset;     fOffset=0;   }   final int total=count;   int in;   byte byte1;   final byte byte0=0;   for (in=0; in < total; in++) {     byte1=fBuffer[in];     if (byte1 >= byte0) {       ch[out++]=(char)byte1;     }  else {       break;     }   }   for (; in < total; in++) {     byte1=fBuffer[in];     if (byte1 >= byte0) {       ch[out++]=(char)byte1;       continue;     }     int b0=byte1 & 0x0FF;     if ((b0 & 0xE0) == 0xC0 && (b0 & 0x1E) != 0) {       int b1=-1;       if (++in < total) {         b1=fBuffer[in] & 0x00FF;       }  else {         b1=fInputStream.read();         if (b1 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fOffset=1;             return out - offset;           }           expectedByte(2,2);         }         count++;       }       if ((b1 & 0xC0) != 0x80) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fOffset=2;           return out - offset;         }         invalidByte(2,2,b1);       }       int c=((b0 << 6) & 0x07C0) | (b1 & 0x003F);       ch[out++]=(char)c;       count-=1;       continue;     }     if ((b0 & 0xF0) == 0xE0) {       int b1=-1;       if (++in < total) {         b1=fBuffer[in] & 0x00FF;       }  else {         b1=fInputStream.read();         if (b1 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fOffset=1;             return out - offset;           }           expectedByte(2,3);         }         count++;       }       if ((b1 & 0xC0) != 0x80 || (b0 == 0xED && b1 >= 0xA0) || ((b0 & 0x0F) == 0 && (b1 & 0x20) == 0)) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fOffset=2;           return out - offset;         }         invalidByte(2,3,b1);       }       int b2=-1;       if (++in < total) {         b2=fBuffer[in] & 0x00FF;       }  else {         b2=fInputStream.read();         if (b2 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fBuffer[1]=(byte)b1;             fOffset=2;             return out - offset;           }           expectedByte(3,3);         }         count++;       }       if ((b2 & 0xC0) != 0x80) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fBuffer[2]=(byte)b2;           fOffset=3;           return out - offset;         }         invalidByte(3,3,b2);       }       int c=((b0 << 12) & 0xF000) | ((b1 << 6) & 0x0FC0) | (b2 & 0x003F);       ch[out++]=(char)c;       count-=2;       continue;     }     if ((b0 & 0xF8) == 0xF0) {       int b1=-1;       if (++in < total) {         b1=fBuffer[in] & 0x00FF;       }  else {         b1=fInputStream.read();         if (b1 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fOffset=1;             return out - offset;           }           expectedByte(2,4);         }         count++;       }       if ((b1 & 0xC0) != 0x80 || ((b1 & 0x30) == 0 && (b0 & 0x07) == 0)) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fOffset=2;           return out - offset;         }         invalidByte(2,4,b1);       }       int b2=-1;       if (++in < total) {         b2=fBuffer[in] & 0x00FF;       }  else {         b2=fInputStream.read();         if (b2 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fBuffer[1]=(byte)b1;             fOffset=2;             return out - offset;           }           expectedByte(3,4);         }         count++;       }       if ((b2 & 0xC0) != 0x80) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fBuffer[2]=(byte)b2;           fOffset=3;           return out - offset;         }         invalidByte(3,4,b2);       }       int b3=-1;       if (++in < total) {         b3=fBuffer[in] & 0x00FF;       }  else {         b3=fInputStream.read();         if (b3 == -1) {           if (out > offset) {             fBuffer[0]=(byte)b0;             fBuffer[1]=(byte)b1;             fBuffer[2]=(byte)b2;             fOffset=3;             return out - offset;           }           expectedByte(4,4);         }         count++;       }       if ((b3 & 0xC0) != 0x80) {         if (out > offset) {           fBuffer[0]=(byte)b0;           fBuffer[1]=(byte)b1;           fBuffer[2]=(byte)b2;           fBuffer[3]=(byte)b3;           fOffset=4;           return out - offset;         }         invalidByte(4,4,b2);       }       int uuuuu=((b0 << 2) & 0x001C) | ((b1 >> 4) & 0x0003);       if (uuuuu > 0x10) {         invalidSurrogate(uuuuu);       }       int wwww=uuuuu - 1;       int zzzz=b1 & 0x000F;       int yyyyyy=b2 & 0x003F;       int xxxxxx=b3 & 0x003F;       int hs=0xD800 | ((wwww << 6) & 0x03C0) | (zzzz << 2)| (yyyyyy >> 4);       int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;       ch[out++]=(char)hs;       if ((count-=2) <= length) {         ch[out++]=(char)ls;       }  else {         fSurrogate=ls;         --count;       }       continue;     }     if (out > offset) {       fBuffer[0]=(byte)b0;       fOffset=1;       return out - offset;     }     invalidByte(1,1,b0);   }   if (DEBUG_READ) {     System.out.println(\"read(char[],\" + offset + ','+ length+ \"): count=\"+ count);   }   return count; } "
"public static SM_SYSTEM_MESSAGE STR_PETITION_CHAT_STARTED_TO_USER(String value0){   return new SM_SYSTEM_MESSAGE(1300560,value0); } "
"public boolean isValidTld(String tld){   tld=unicodeToASCII(tld);   if (allowLocal && isValidLocalTld(tld)) {     return true;   }   return isValidInfrastructureTld(tld) || isValidGenericTld(tld) || isValidCountryCodeTld(tld); } "
"private void unknownPacket(State state,int id,ByteBuffer data){   if (NetworkConfig.DISPLAY_UNKNOWNPACKETS) {     log.warn(String.format(\"Unknown packet received from Aion client: 0x%04X, state=%s %n%s\",id,state.toString(),Util.toHex(data)));   } } "
"public void clearDiscCache(){   checkConfiguration();   configuration.discCache.clear(); } "
"public static String deleteChar(String fromString,char charToDelete){   StringBuffer buffer=new StringBuffer(fromString.length());   for (int i=0; i < fromString.length(); i++) {     if (fromString.charAt(i) != charToDelete) {       buffer.append(fromString.charAt(i));     }   }   return new String(buffer); } "
"public VersionCellEditor(VendorOptionTableModel model){   this.model=model; } "
"public static boolean isNotPoBox(String s){   if (isEmpty(s))   return defaultEmptyOK;   String sl=s.toLowerCase();   if (sl.indexOf(\"p.o. b\") != -1)   return false;   if (sl.indexOf(\"p.o.b\") != -1)   return false;   if (sl.indexOf(\"p.o b\") != -1)   return false;   if (sl.indexOf(\"p o b\") != -1)   return false;   if (sl.indexOf(\"po b\") != -1)   return false;   if (sl.indexOf(\"pobox\") != -1)   return false;   if (sl.indexOf(\"po#\") != -1)   return false;   if (sl.indexOf(\"po #\") != -1)   return false;   if (sl.indexOf(\"p.0. b\") != -1)   return false;   if (sl.indexOf(\"p.0.b\") != -1)   return false;   if (sl.indexOf(\"p.0 b\") != -1)   return false;   if (sl.indexOf(\"p 0 b\") != -1)   return false;   if (sl.indexOf(\"p0 b\") != -1)   return false;   if (sl.indexOf(\"p0box\") != -1)   return false;   if (sl.indexOf(\"p0#\") != -1)   return false;   if (sl.indexOf(\"p0 #\") != -1)   return false;   return true; } "
"protected GroupsIsMemberQueryWithUserIdsExtended userIds(List<Integer> value){   return unsafeParam(\"user_ids\",value); } "
"public static List<Double> mergeCoords(List<Double> x,List<Double> y){   if (x.size() != y.size())   throw new IllegalArgumentException(\"Sample sizes must be the same for each data applyTransformToDestination.\");   List<Double> ret=new ArrayList<>();   for (int i=0; i < x.size(); i++) {     ret.add(x.get(i));     ret.add(y.get(i));   }   return ret; } "
"@Override public void validate(){   try {     getLock().writeLock().lock();     invalidQualityStates.clear();   }   finally {     getLock().writeLock().unlock();   } } "
"public LogSeqNum append(Constant[] rec){   logMgrLock.lock();   try {     int recsize=pointerSize * 2;     for (    Constant c : rec)     recsize+=Page.size(c);     if (currentPos + recsize >= BLOCK_SIZE) {       flush();       appendNewBlock();     }     LogSeqNum lsn=currentLSN();     for (    Constant c : rec)     appendVal(c);     finalizeRecord();     lastLsn=lsn;     return lsn;   }   finally {     logMgrLock.unlock();   } } "
"private void initExpirationListener(View shareView){   mOnExpirationDateInteractionListener=new OnExpirationDateInteractionListener();   ((SwitchCompat)shareView.findViewById(R.id.shareViaLinkExpirationSwitch)).setOnCheckedChangeListener(mOnExpirationDateInteractionListener);   shareView.findViewById(R.id.shareViaLinkExpirationLabel).setOnClickListener(mOnExpirationDateInteractionListener);   shareView.findViewById(R.id.shareViaLinkExpirationValue).setOnClickListener(mOnExpirationDateInteractionListener); } "
"public Response doDelete(String url){   return doDelete(url,null); } "
"public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {   boolean file1Exists=file1.exists();   if (file1Exists != file2.exists()) {     return false;   }   if (!file1Exists) {     return true;   }   if (file1.isDirectory() || file2.isDirectory()) {     throw new IOException(\"Can't compare directories, only files\");   }   if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {     return true;   }   Reader input1=null;   Reader input2=null;   try {     if (charsetName == null) {       input1=new InputStreamReader(new FileInputStream(file1));       input2=new InputStreamReader(new FileInputStream(file2));     }  else {       input1=new InputStreamReader(new FileInputStream(file1),charsetName);       input2=new InputStreamReader(new FileInputStream(file2),charsetName);     }     return IOUtils.contentEqualsIgnoreEOL(input1,input2);   }   finally {     IOUtils.closeQuietly(input1);     IOUtils.closeQuietly(input2);   } } "
"public static boolean isNetworkAvailable(Context context){   ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);   if (null == manager)   return false;   NetworkInfo info=manager.getActiveNetworkInfo();   if (null == info || !info.isAvailable())   return false;   return true; } "
"protected void execWithInput(CommandInput commandInput,String command,final CompletionHandler completionHandler,Function<String,?> mapper,int timeout,TimeUnit unit){   String outStreamFile=\"/tmp/\" + SSH_OP_OUT_PREFIX + UUID.randomUUID()+ \".txt\";   String errStreamFile=\"/tmp/\" + SSH_OP_ERR_PREFIX + UUID.randomUUID()+ \".txt\";   String exitCodeFile=\"/tmp/\" + SSH_OP_EXIT_CODE_PREFIX + UUID.randomUUID()+ \".txt\";   String hostname=commandInput.getDockerUri().getHost();   AuthCredentialsServiceState credentials=commandInput.getCredentials();   SSHClient client;   try {     client=getSshClient(hostname,credentials);   }  catch (  IOException e) {     completionHandler.handle(null,e);     return;   }   command=String.format(\"nohup /bin/sh -c '%s > %s 2> %s ; echo $? > %s' &>/dev/null & echo $!\",escape(command),outStreamFile,errStreamFile,exitCodeFile);   AsyncResult result=SshUtil.asyncExec(client,command);   ExecutionState state=new ExecutionState(result,null,null,timeout,unit);   state.handler=null;   logger.fine(String.format(\"SSH execution %s started on %s: %s\",state.id,hostname,command));   handleExecInProgress(state); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_SELF(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200857,skillcaster,num0,skillname); } "
"private static boolean inKingSectionLikeHash(String key,String value){   String hashValue=(String)kingSectionLikeHash.get(key);   if (hashValue != null) {     return (hashValue.equals(value));   }  else {     return false;   } } "
"protected static Dfp[] split(final DfpField field,final String a){   Dfp result[]=new Dfp[2];   char[] buf;   boolean leading=true;   int sp=0;   int sig=0;   buf=new char[a.length()];   for (int i=0; i < buf.length; i++) {     buf[i]=a.charAt(i);     if (buf[i] >= '1' && buf[i] <= '9') {       leading=false;     }     if (buf[i] == '.') {       sig+=(400 - sig) % 4;       leading=false;     }     if (sig == (field.getRadixDigits() / 2) * 4) {       sp=i;       break;     }     if (buf[i] >= '0' && buf[i] <= '9' && !leading) {       sig++;     }   }   result[0]=field.newDfp(new String(buf,0,sp));   for (int i=0; i < buf.length; i++) {     buf[i]=a.charAt(i);     if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {       buf[i]='0';     }   }   result[1]=field.newDfp(new String(buf));   return result; } "
"public void showDetailsArea(int location){   DisplayArea displayArea=getDisplayArea(location);   if (displayArea != null)   displayArea.setVisible(true); } "
"@Override public boolean isPanelEnabled(){   return multiOptionGroupEnabled; } "
"public RectangleArea(ZoneName zoneName,int worldId,Point p1,Point p2,Point p3,Point p4,int minZ,int maxZ){   super(zoneName,worldId,minZ,maxZ);   Rectangle r=new Rectangle();   r.add(p1);   r.add(p2);   r.add(p3);   r.add(p4);   minX=(int)r.getMinX();   maxX=(int)r.getMaxX();   minY=(int)r.getMinY();   maxY=(int)r.getMaxY(); } "
"public InsufficientDataException(Localizable pattern,Object... arguments){   super(pattern,arguments); } "
"public static Object find(String urls,Properties customProperties,LifeCycle lifeCycle,CredentialsProvider credentialsProvider) throws FinderException {   return spaceFinder.findService(urls,customProperties,lifeCycle,credentialsProvider); } "
"public void openDatabase(){   String path=DB_PATH + DB_NAME;   mDatabase=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY); } "
"protected void fireTableEvent(int row0,int row1,int col,int type){   if (type == EventConstants.UPDATE) {     if (col != VisualItem.IDX_VALIDATED) {       for (int r=row0; r <= row1; ++r)       setValidated(r,false);     }  else {       for (int r=row0; r <= row1; ++r) {         if (!isValidated(r)) {           m_vis.damageReport(getItem(r),getBounds(r));         }       }     }   }  else   if (type == EventConstants.DELETE && col == EventConstants.ALL_COLUMNS) {     for (int r=row0; r <= row1; ++r) {       if (isVisible(r) && isValidated(r)) {         VisualItem item=(VisualItem)getTuple(r);         m_vis.damageReport(item,getBounds(r));       }     }   }   super.fireTableEvent(row0,row1,col,type); } "
"public static boolean isChinese(int codePoint){   return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END; } "
"public void onDrawerClosed(View view){   super.onDrawerClosed(view);   getSupportActionBar().setTitle(getString(R.string.app_name)); } "
"private void calculateColor(int coord){   coord=coord - mBarPointerHaloRadius;   if (coord > (mBarLength / 2) && (coord < mBarLength)) {     mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1 - (mPosToSVFactor * (coord - (mBarLength / 2)))});   }  else   if (coord > 0 && coord < mBarLength) {     mColor=Color.HSVToColor(new float[]{mHSVColor[0],(mPosToSVFactor * coord),1f});   }  else   if (coord == (mBarLength / 2)) {     mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1f});   }  else   if (coord <= 0) {     mColor=Color.WHITE;   }  else   if (coord >= mBarLength) {     mColor=Color.BLACK;   } } "
"public void addRepurchaseItems(Player player,List<Item> items){   repurchaseItems.putAll(player.getObjectId(),items); } "
"public static AuditLevel toLevel(int val,Level defaultLevel){   return AUDIT; } "
"public SnackTextfileDoubleDataSource(Reader reader){   super(reader); } "
"private static void print(String s){   System.out.print(s); } "
"public void processUtterance(Utterance utterance) throws ProcessException {   String silence=utterance.getVoice().getFeatures().getString(Voice.FEATURE_SILENCE);   Item phraseHead=utterance.getRelation(Relation.PHRASE).getHead();   if (phraseHead == null) {     return;   }   Relation segment=utterance.getRelation(Relation.SEGMENT);   Item s=segment.getHead();   if (s == null) {     s=segment.appendItem(null);   }  else {     s=s.prependItem(null);   }   s.getFeatures().setString(\"name\",silence);   for (Item phrase=phraseHead; phrase != null; phrase=phrase.getNext()) {     Item word=phrase.getLastDaughter();     while (word != null) {       Item seg=segmentPath.findItem(word);       if (seg != null) {         Item pause=seg.appendItem(null);         pause.getFeatures().setString(\"name\",silence);         break;       }       word=word.getPrevious();     }   } } "
"public void save(){   PreferenceStore prefs=getPreferenceStore(); synchronized (DdmsPreferenceStore.class) {     try {       prefs.save();     }  catch (    IOException ioe) {     }   } } "
"public void drawButton(Minecraft mc,int mouseX,int mouseY){   if (!visible)   return;   boolean flag=mouseX >= this.xPosition && mouseY >= this.yPosition && mouseX < this.xPosition + this.width && mouseY < this.yPosition + this.height;   GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);   mc.getTextureManager().bindTexture(bookGuiTextures);   int k=0;   int l=192;   if (flag) {     k+=23;   }   if (!this.nextPage) {     l+=13;   }   this.drawTexturedModalRect(this.xPosition,this.yPosition,k,l,23,13); } "
"static public Text createTextField(Composite parent){   Text text=new Text(parent,SWT.SINGLE | SWT.BORDER);   GridData data=new GridData(GridData.FILL_HORIZONTAL);   data.verticalAlignment=GridData.CENTER;   data.grabExcessVerticalSpace=false;   data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;   text.setLayoutData(data);   return text; } "
"public int valueAt(int index){   return mValues[index]; } "
"public static String[] createJVisualVmCommand(String jmxServiceUrl,String javaHomeDir){   List<String> commandArray=new ArrayList<String>(5);   if (javaHomeDir == null) {     javaHomeDir=calculateJavaHome();   }   if (javaHomeDir != null) {     commandArray.add(javaHomeDir + File.separator + \"bin\"+ File.separator+ \"jvisualvm\");   }  else {     commandArray.add(\"jvisualvm\");   }   commandArray.add(\"--openjmx\");   commandArray.add(jmxServiceUrl);   commandArray.add(\"--nosplash\");   if (_logger.isLoggable(Level.FINE)) {     _logger.log(Level.FINE,\"all jvisualvm parameters:\" + commandArray);   }   return commandArray.toArray(new String[commandArray.size()]); } "
"public PhotosSearchQuery search(UserActor actor){   return new PhotosSearchQuery(getClient(),actor); } "
"public RedisBroadcastChannel(RedissonClient redissonClient){   this.topic=redissonClient.getTopic(REDIS_CHANNEL);   this.notifications=PublishSubject.create();   this.topicReadWriteLock=new ReentrantReadWriteLock();   listenerId=topic.addListener(null); } "
"@SuppressWarnings(\"unchecked\") public JavaRDD<MapWritable> readData() throws IOException, PIRException {   logger.info(\"Reading data \");   JavaRDD<MapWritable> jsonRDD;   Job job=Job.getInstance();   String baseQuery=SystemConfiguration.getProperty(\"pir.baseQuery\");   String jobName=\"pirSpark_base_\" + baseQuery + \"_\"+ System.currentTimeMillis();   job.setJobName(jobName);   job.getConfiguration().setBoolean(\"mapreduce.input.fileinputformat.input.dir.recursive\",true);   job.getConfiguration().set(\"query\",baseQuery);   logger.debug(\"queryType = \" + bVars.getQueryInfo().getQueryType());   logger.debug(\"QuerySchemaLoader.getSchemaNames().size() = \" + QuerySchemaRegistry.getNames().size());   for (  String name : QuerySchemaRegistry.getNames()) {     logger.debug(\"schemaName = \" + name);   }   job.getConfiguration().set(\"dataSchemaName\",qSchema.getDataSchemaName());   job.getConfiguration().set(\"data.schemas\",SystemConfiguration.getProperty(\"data.schemas\"));   String classString=SystemConfiguration.getProperty(\"pir.baseInputFormat\");   Class<? extends BaseInputFormat<Text,MapWritable>> inputClass;   try {     inputClass=(Class<? extends BaseInputFormat<Text,MapWritable>>)Class.forName(classString);   }  catch (  ClassNotFoundException|ClassCastException e) {     throw new PIRException(classString + \" cannot be instantiated or does not extend BaseInputFormat\",e);   }   job.setInputFormatClass(inputClass);   FileInputFormat.setInputPaths(job,inputData);   jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),inputClass,Text.class,MapWritable.class).values().coalesce(numDataPartitions);   if (qSchema.getFilter() != null) {     return jsonRDD.filter(new FilterData(accum,bVars));   }  else {     logger.info(\"qSchema.getFilter() is null\");     return jsonRDD;   } } "
"public void onRemoval(K key,R resource){ } "
"boolean isModifiedBy(long txNum){   internalLock.writeLock().lock();   try {     return modifiedBy.contains(txNum);   }   finally {     internalLock.writeLock().unlock();   } } "
"public IExtendedIndexIterator<IEntryCacheInfo> establishScan(K startPos,short relation,K endPos,boolean endPosInclusive){   return establishScan(startPos,relation,endPos,endPosInclusive,false); } "
"public static void logThreadEnding(){   if (logger.isTraceEnabled()) {     logger.trace(String.format(ThreadingUtils.ENDING_THREAD,Thread.currentThread().getId(),Thread.currentThread().getName()));   } } "
"public BigReal(BigInteger val){   d=new BigDecimal(val); } "
"public M continueBest(IMoveGenerator<M,G> generator){   evaluationsPerformed=0;   try {     treeSearchLoop(generator);   }  catch (  TimeoutException e) {   }   return returnCurrentBest(rootNodes.get(0).father.getGame().currentPlayer()); } "
"protected void _writeExternal(ObjectOutput out) throws IOException {   if (entryInfo != null) {     out.writeBoolean(true);     if (entryInfo.m_UID != null) {       out.writeBoolean(true);       out.writeUTF(entryInfo.m_UID);     }  else {       out.writeBoolean(false);     }     out.writeInt(entryInfo.m_VersionID);     out.writeLong(entryInfo.m_TimeToLive);   }  else {     out.writeBoolean(false);   }   out.writeBoolean(isFifo);   out.writeBoolean(isTransient);   out.writeBoolean(m_NOWriteLeaseMode); } "
"protected PhotosGetByIdQuery photos(String... value){   return unsafeParam(\"photos\",value); } "
"public boolean isRefreshEnabled(){   return mRefreshEnabled; } "
"public FriendsGetByPhonesQuery phones(String... value){   return unsafeParam(\"phones\",value); } "
"public static byte[] hexToArray(final String data) throws ConversionException {   try {     return Hex.decodeHex(data.toCharArray());   }  catch (  DecoderException e) {     throw new ConversionException(\"Cannot convert given hex text into plain text\",e);   } } "
"public JobRowFilter withJobField(JobField jobField){   return new JobRowFilter(jobField,operation,values); } "
"public void init$Children(){   children=new ASTNode[1];   setChild(new Opt(),0); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_PARTY_MATCH_ALREADY_SENT_APPLY(String value0){   return new SM_SYSTEM_MESSAGE(1400215,value0); } "
"public boolean hasObservers(){   return observers.get().length != 0; } "
"public Z(double x){   re=x;   im=0; } "
"@Override public ASEntityDeclaration createASEntityDeclaration(String name) throws DOMException {   String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NOT_SUPPORTED_ERR\",null);   throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg); } "
"public void undoAll(){   undo();   setGroup(lastSavedValues.getGroup());   getConnections().clear();   getConnections().addAll(lastSavedValues.getConnections());   getSubgroups().clear();   getSubgroups().addAll(lastSavedValues.getSubgroups());   groupingModified=false; } "
"public void addHeaderView(View v){   addHeaderView(v,null,true); } "
"public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   String subSignature=method.getSubSignature();   if (subSignature.equals(\"java.lang.Thread currentThread()\")) {     java_lang_Thread_currentThread(method,thisVar,returnVar,params);     return;   }  else {     defaultMethod(method,thisVar,returnVar,params);     return;   } } "
"public void clear(){   this.results.clear(); } "
"public Dfp power10(final int e){   Dfp d=newInstance(getOne());   if (e >= 0) {     d.exp=e / 4 + 1;   }  else {     d.exp=(e + 1) / 4;   } switch ((e % 4 + 4) % 4) { case 0:     break; case 1:   d=d.multiply(10); break; case 2: d=d.multiply(100); break; default : d=d.multiply(1000); } return d; } "
"public static double oneTailedFishersExact(int k,int n,int r,int m){   if (k < 0 || k < (m + r) - n || k > r || k > m || r > n || m > n) {     throw new IllegalArgumentException(\"Invalid Fisher's exact: \" + \"k=\" + k + \" n=\"+ n+ \" r=\"+ r+ \" m=\"+ m+ \" k<0=\"+ (k < 0)+ \" k<(m+r)-n=\"+ (k < (m + r) - n)+ \" k>r=\"+ (k > r)+ \" k>m=\"+ (k > m)+ \" r>n=\"+ (r > n)+ \"m>n=\"+ (m > n));   }   if (m > n / 2) {     m=n - m;     k=r - k;   }   if (r > n / 2) {     r=n - r;     k=m - k;   }   if (m > r) {     int temp=m;     m=r;     r=temp;   }   double total=0.0;   if (k > m / 2) {     for (int k0=k; k0 <= m; k0++) {       total+=SloppyMath.hypergeometric(k0,n,r,m);     }   }  else {     int min=Math.max(0,(m + r) - n);     for (int k0=min; k0 < k; k0++) {       total+=SloppyMath.hypergeometric(k0,n,r,m);     }     total=1.0 - total;   }   return total; } "
"public final void log(){   TAGLOGGER.info(this.toString()); } "
"private void determineGeometryType(GeometryType type){   Class<?> bindingType=type.getBinding();   dsInfo.setGeometryType(GeometryTypeMapping.getGeometryType(bindingType)); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_SOLDOUT_ITEM(String value0){   return new SM_SYSTEM_MESSAGE(1300790,value0); } "
"private String removeIllegalFileCharacters(String string){   return string.replaceAll(\"/|\\\\\\\\|:|\\\\*|\\\\?|\\\"|<|>|\\\\||\\\\s\",\"\"); } "
"protected boolean fetchRelations(String fieldName){   return false; } "
"public void index(Tuple t,String field){   String s;   if ((s=t.getString(field)) == null)   return;   StringTokenizer st=new StringTokenizer(s,m_delim);   while (st.hasMoreTokens()) {     String tok=st.nextToken();     addString(tok,t);   } } "
"public static boolean onRender(Entity entity,double x,double y,double z,float yaw,float partialTicks){   GlStateManager.pushMatrix();   final boolean successful=OpenModLoader.getEventBus().post(new Fires(entity,x,y,z,yaw,partialTicks));   GlStateManager.popMatrix();   return successful; } "
"public void drawChart(Graphics2D gc){   final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);   gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);   gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));   colorTable=getChartColors().getHeatMapTable();   int y0=getHeight() - bottomMargin;   int y1=topMargin;   int x0=leftMargin;   int scaleWidth=30;   int x1=getWidth() - rightMargin - scaleWidth;   if (x0 >= x1)   return;   if (inUpdateCoordinates) {     gc.setFont(getFont(\"Default\"));     gc.setColor(Color.LIGHT_GRAY);     gc.drawString(\"Computing z-scores...\",x0,y1 + 20);     viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));     return;   }  else {     viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());   }   final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);   final int numberOfClasses=(classNames == null ? 0 : classNames.length);   if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering())   y1+=topTreeSpace;   if (sgc == null)   drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);   if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getClassesList().isDoClustering()) {     x1-=rightTreeSpace;     int height=(int)Math.round((y0 - y1) / (numberOfClasses + 1.0) * numberOfClasses);     int yStart=y0 + ((y1 - y0) - height) / 2;     final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);     classesClusteringTree.paint(gc,rect);   }   if (scalingType == ChartViewer.ScalingType.ZSCORE && viewer.getSeriesList().isDoClustering()) {     int width=(int)((x1 - x0) / (numberOfSeries + 1.0) * numberOfSeries);     int xStart=x0 + ((x1 - x0) - width) / 2;     final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);     seriesClusteringTree.paint(gc,rect);   }   double xStep=(x1 - x0) / (double)numberOfSeries;   double yStep=(y0 - y1) / (double)(numberOfClasses);   double maxValue=getChartData().getRange().get2().doubleValue();   double inverseMaxValueLog=0;   if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0) {     maxValue=Math.log(maxValue);     if (maxValue != 0)     inverseMaxValueLog=1 / maxValue;   }  else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0) {     maxValue=Math.sqrt(maxValue);   }  else   if (scalingType == ChartViewer.ScalingType.PERCENT) {     maxValue=100;   }   if (numberOfClasses > 0 && numberOfSeries > 0) {     int d=0;     for (    String series : seriesNames) {       double xLabel=x0 + (d + 0.5) * xStep;       Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);       String label=seriesLabelGetter.getLabel(series);       Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();       if (classLabelAngle == 0) {         apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());       }  else       if (classLabelAngle > Math.PI / 2) {         apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);       }       if (getChartData().getChartSelection().isSelectedSeries(series)) {         gc.setColor(ProgramProperties.SELECTION_COLOR);         fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);       }       gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));       drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);       if (sgc != null) {         sgc.setCurrentItem(new String[]{label,null});         drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);         sgc.clearCurrentItem();       }       int c=numberOfClasses - 1;       for (      String className : classNames) {         final Color color;         if (scalingType == ChartViewer.ScalingType.PERCENT) {           double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);           double value;           if (total == 0)           value=0;  else           value=100 * getChartData().getValueAsDouble(series,className) / total;           color=colorTable.getColor((int)(1000 * value),(int)(1000 * maxValue));         }  else         if (scalingType == ChartViewer.ScalingType.LOG) {           double value=getChartData().getValueAsDouble(series,className);           color=colorTable.getColorLogScale((int)value,inverseMaxValueLog);         }  else         if (scalingType == ChartViewer.ScalingType.SQRT) {           double value=Math.sqrt(getChartData().getValueAsDouble(series,className));           color=colorTable.getColor((int)value,(int)maxValue);         }  else         if (scalingType == ChartViewer.ScalingType.ZSCORE) {           double value=Math.max(-zScoreCutoff,Math.min(zScoreCutoff,zScores.get(series,className)));           color=colorTable.getColor((int)(value + zScoreCutoff),(int)(2 * zScoreCutoff));         }  else {           double value=getChartData().getValueAsDouble(series,className);           color=colorTable.getColor((int)value,(int)maxValue);         }         gc.setColor(color);         int[] rect=new int[]{(int)Math.round(x0 + d * xStep),(int)Math.round(y0 - (c + 1) * yStep),(int)Math.round(xStep),(int)Math.round(yStep)};         if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});         if (isGapBetweenBars() && rect[2] > 2 && rect[3] > 2) {           gc.fillRect(rect[0] + 1,rect[1] + 1,rect[2] - 2,rect[3] - 2);         }  else {           gc.fillRect(rect[0],rect[1],rect[2] + 1,rect[3] + 1);         }         if (sgc != null)         sgc.clearCurrentItem();         boolean isSelected=getChartData().getChartSelection().isSelectedSeries(series) || getChartData().getChartSelection().isSelectedClass(className);         if (isSelected) {           gc.setStroke(HEAVY_STROKE);           gc.setColor(ProgramProperties.SELECTION_COLOR);           gc.drawRect(rect[0],rect[1],rect[2],rect[3]);           gc.setStroke(NORMAL_STROKE);         }         if (showValues || isSelected) {           String aLabel;           if (scalingType == ChartViewer.ScalingType.ZSCORE)           aLabel=String.format(\"%.2f\",zScores.get(series,className));  else           aLabel=\"\" + (int)getChartData().getValueAsDouble(series,className);           valuesList.add(new DrawableValue(aLabel,rect[0] + rect[2] / 2,rect[1] + rect[3] / 2,isSelected));         }         c--;       }       d++;     }   }   if (valuesList.size() > 0) {     gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));     DrawableValue.drawValues(gc,valuesList,true,true);     valuesList.clear();   }   gc.setColor(Color.WHITE); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_END_A_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200911,skilltarget); } "
"public static String parseHumpName(String str,boolean isFirstUpper,boolean isHump){   str=str.toLowerCase();   if (isHump && str.indexOf(\"_\") != -1) {     boolean isUpper=false;     StringBuilder builder=new StringBuilder();     for (    char c : str.toCharArray()) {       if (isUpper) {         c=Character.toUpperCase(c);         isUpper=false;       }       if (c == '_') {         isUpper=true;         continue;       }       builder.append(c);     }     str=builder.toString();   }   if (isFirstUpper) {     return upperFirst(str);   }   return lowerFirst(str); } "
"public SiteAdminPage deactivatePageLater(String title,String day,String time){   grid.selectPageByTitle(title);   bobcatWait.withTimeout(Timeouts.MEDIUM).until(null);   grid.getActionBar().clickDropDownOption(SiteAdminButtons.DEACTIVATE_LATER);   replicateLaterWindow.fillDay(day);   replicateLaterWindow.fillTime(time);   replicateLaterWindow.confirm();   grid.waitForLoaderNotPresent();   waitForPageStatus(title,PageStatus.SCHEDULED_DEACTIVATION);   return this; } "
"public static java.util.Date toDate(Timestamp timestamp){   if (timestamp == null) {     return null;   }   long milliseconds=timestamp.getTime() + (timestamp.getNanos() / 1000000);   return new Date(milliseconds); } "
"public AuthCheckPhoneQuery(VkApiClient client,UserActor actor,String phone,String clientSecret){   super(client,\"auth.checkPhone\",OkResponse.class);   accessToken(actor.getAccessToken());   phone(phone);   clientSecret(clientSecret); } "
"public boolean isValidLegionMemberEx(){   if (getObjectId() < 1) {     log.error(\"[LegionMemberEx] Player Object ID is empty.\");   }  else   if (getName() == null) {     log.error(\"[LegionMemberEx] Player Name is empty.\" + getObjectId());   }  else   if (getPlayerClass() == null) {     log.error(\"[LegionMemberEx] Player Class is empty.\" + getObjectId());   }  else   if (getLevel() < 1) {     log.error(\"[LegionMemberEx] Player Level is empty.\" + getObjectId());   }  else   if (getLastOnline() == 0) {     log.error(\"[LegionMemberEx] Last Online is empty.\" + getObjectId());   }  else   if (getWorldId() < 1) {     log.error(\"[LegionMemberEx] World Id is empty.\" + getObjectId());   }  else   if (getLegion() == null) {     log.error(\"[LegionMemberEx] Legion is empty.\" + getObjectId());   }  else   if (getRank() == null) {     log.error(\"[LegionMemberEx] Rank is empty.\" + getObjectId());   }  else   if (getNickname() == null) {     log.error(\"[LegionMemberEx] Nickname is empty.\" + getObjectId());   }  else   if (getSelfIntro() == null) {     log.error(\"[LegionMemberEx] Self Intro is empty.\" + getObjectId());   }  else {     return true;   }   return false; } "
"@Override public synchronized void addEdge(Edge edge) throws Exception {   Vertex vH, vT;   Vertex vHead=edge.getVertexA();   Vertex vTail=edge.getVertexB();   boolean bVertexMissed=false;   if ((vH=locateVertex(vHead)) == null) {     add(vH=vHead);     bVertexMissed=true;   }   if ((vT=locateVertex(vTail)) == null) {     add(vT=vTail);     bVertexMissed=true;   }   Edge e=null;   if (eclLocator == null) {     if (!bVertexMissed)     e=utils.locateDirectedEdgeInGraph(this,vH,vT);     if (e == null) {       super.addEdge(edge);       return;     }  else     return;   }  else {     if (!bVertexMissed)     e=eclLocator.locateDirectedEdgeInGraph(this,vH,vT);     if (e == null) {       super.addEdge(edge);       eclLocator.addedEdge(edge);       return;     }  else     return;   } } "
"public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){   if (!(semiMajorAxis >= 0))   throw new IllegalArgumentException(\"ellipse semimajor axis must be nonnegative\");   if (!(semiMinorAxis >= 0))   throw new IllegalArgumentException(\"ellipse semiminor axis must be nonnegative\");   double xs=scaleX(x);   double ys=scaleY(y);   double ws=factorX(2 * semiMajorAxis);   double hs=factorY(2 * semiMinorAxis);   if (ws <= 1 && hs <= 1)   pixel(x,y);  else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));   draw(); } "
"public static boolean isEmpty(CharSequence str){   return (str == null || str.length() == 0); } "
"public void put(String key,String value){   if (key != null && value != null) {     urlParams.put(key,value);   } } "
"private void initializeReader() throws IOException {   close();   String path=this.csvParserVo.getBlockDetailsList().get(blockCounter).getFilePath();   FileType fileType=FileFactory.getFileType(path);   if (path.endsWith(\".gz\") || path.endsWith(\".bz2\")) {     DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize);     inputStreamReader=new BufferedReader(new InputStreamReader(dataInputStream));   }  else {     long startOffset=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset();     long blockLength=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockLength();     long endOffset=blockLength + startOffset;     DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize,startOffset);     if (startOffset != 0) {       LineReader lineReader=new LineReader(dataInputStream,1);       startOffset+=lineReader.readLine(new Text(),0);     }     inputStreamReader=new BufferedReader(new InputStreamReader(new BoundedDataStream(dataInputStream,endOffset - startOffset)));   } } "
"public XwavesLabelfileReader(String filename) throws IOException {   this(new FileReader(filename)); } "
"public void reset(){   timer.start(\"AudioOutput\"); } "
"private void adaptProsody(Element prosodyRule,Element syllable){   Element phrase=(Element)DomUtils.getAncestor(syllable,MaryXML.PHRASE);   Element first=(Element)DomUtils.getAncestor(syllable,MaryXML.TOKEN);   if (DomUtils.hasAncestor(first,MaryXML.MTU)) {     first=(Element)DomUtils.getHighestLevelAncestor(first,MaryXML.MTU);   }   Element lastSyl=DomUtils.getLastElementByTagName(phrase,MaryXML.SYLLABLE);   Element last=(Element)DomUtils.getAncestor(lastSyl,MaryXML.TOKEN);   if (DomUtils.hasAncestor(last,MaryXML.MTU)) {     last=(Element)DomUtils.getHighestLevelAncestor(last,MaryXML.MTU);   }   Element newProsody=DomUtils.encloseNodesWithNewElement(first,last,MaryXML.PROSODY);   newProsody.setAttribute(\"range\",prosodyRule.getAttribute(\"range\"));   determineProsodicSettings(newProsody);   determineProsodyTopBaseConf(newProsody);   TreeWalker tw=((DocumentTraversal)newProsody.getOwnerDocument()).createTreeWalker(newProsody,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.PROSODY),false);   Element p=null;   while ((p=(Element)tw.nextNode()) != null) {     determineProsodyTopBaseConf(p);   } } "
"public void addScrollingListener(OnWheelScrollListener listener){   scrollingListeners.add(listener); } "
"private void addToken(TokenKind kind,int left,int right){   addToken(kind,left,right,null); } "
"@PUT @Path(\"/roles\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Update roles for a list of users and applications\") @Timed public Response updateUserRoles(@ApiParam(name=\"userRoleList\",value=\"Please see model example\",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){   List<Map> statuses=updateUserRole(userRoleList,authorizationHeader);   return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignmentStatuses\",statuses).build()).build(); } "
"public void startClientWithProperties() throws InterruptedException {   System.setProperty(\"c2mon.client.conf.url\",\"classpath:test-config/test-properties.txt\");   C2monServiceGateway.startC2monClient();   assertNotNull(C2monServiceGateway.getCommandService());   assertNotNull(C2monServiceGateway.getSupervisionService());   assertNotNull(C2monServiceGateway.getTagService()); } "
"public void addMessages(List<? extends Message> messages){   if (SHOW_LOGS)   Logger.v(TAG,\">> addMessages, lock \" + messages);   mQueueLock.lock(TAG);   mPlayerMessagesQueue.addAll(messages);   mQueueLock.notify(TAG);   if (SHOW_LOGS)   Logger.v(TAG,\"<< addMessages, unlock \" + messages);   mQueueLock.unlock(TAG); } "
"public WebDriverClosingRule(Injector injector){   this.injector=injector; } "
"public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){   if (facing != EnumFacing.UP) {     return EnumActionResult.FAIL;   }  else {     IBlockState iblockstate=worldIn.getBlockState(pos);     Block block=iblockstate.getBlock();     if (!block.isReplaceable(worldIn,pos)) {       pos=pos.offset(facing);     }     if (playerIn.canPlayerEdit(pos,facing,stack) && this.block.canPlaceBlockAt(worldIn,pos)) {       EnumFacing enumfacing=EnumFacing.fromAngle((double)playerIn.rotationYaw);       int i=enumfacing.getFrontOffsetX();       int j=enumfacing.getFrontOffsetZ();       placeDoor(worldIn,pos,enumfacing,this.block);       SoundType soundtype=this.block.getSoundType();       worldIn.playSound(playerIn,pos,soundtype.getPlaceSound(),SoundCategory.BLOCKS,(soundtype.getVolume() + 1.0F) / 2.0F,soundtype.getPitch() * 0.8F);       --stack.stackSize;       return EnumActionResult.SUCCESS;     }  else {       return EnumActionResult.FAIL;     }   } } "
"private ManifestModInfo loadMod(File file,Manifest manifest){   ManifestModInfo container=ManifestModInfo.create(file,manifest);   if (container == null) {     log.error(\"Found invalid manifest in file \" + file);     return null;   }   log.info(\"Found mod \" + container.getName() + \" with id \"+ container.getModID());   if (container.getModID().isEmpty()) {     throw new RuntimeException(\"Empty mod ID for mod '\" + container.getName() + \"'!\");   }   for (  char c : container.getModID().toCharArray()) {     if (c != '-' && c != '_' && !CharSet.ASCII_ALPHA_LOWER.contains(c) && !CharSet.ASCII_NUMERIC.contains(c)) {       throw new RuntimeException(\"Illegal characters in ID '\" + container.getModID() + \"' for mod '\"+ container.getName()+ \"'.\");     }   }   if (container.getModID().equals(\"oml\")) {     throw new RuntimeException(\"'oml' is a reserved mod id!\");   }   if (container.getName() == null || container.getName().isEmpty()) {     throw new RuntimeException(\"The mod must set a non-empty name!\");   }   container.getVersion();   if (!container.getMinecraftVersion().equals(OpenModLoader.getMinecraftVersion())) {     log.warn(\"Mod '%s' is expecting Minecraft %s, but we are running on Minecraft %s!\",container.getName(),container.getMinecraftVersion(),OpenModLoader.getMinecraftVersion());   }   if (container.getSide() != Side.UNIVERSAL && container.getSide() != OMLStrippableTransformer.getSide()) {     log.info(\"Invalid side %s for mod %s. The mod will not be loaded.\",OMLStrippableTransformer.getSide(),container.getName());   }   return container; } "
"public static Bitmap drawableToBitmap(Drawable drawable){   return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap(); } "
"@Override public boolean onTouch(final View v,final MotionEvent event){   if (!lollipopAndAbove()) switch (event.getAction()) { case MotionEvent.ACTION_DOWN:     gradientDrawable=new GradientDrawable();   gradientDrawable.setShape(GradientDrawable.OVAL); gradientDrawable.setSize(mOriginalThumbHeight / 2,mOriginalThumbHeight / 2); gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY); gradientDrawable.setDither(true); gradientDrawable.setAlpha(mThumbAlpha); setThumb(gradientDrawable); break; case MotionEvent.ACTION_UP: gradientDrawable=new GradientDrawable(); gradientDrawable.setShape(GradientDrawable.OVAL); gradientDrawable.setSize(mOriginalThumbHeight / 3,mOriginalThumbHeight / 3); gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY); gradientDrawable.setDither(true); gradientDrawable.setAlpha(mThumbAlpha); setThumb(gradientDrawable); break; } return false; } "
"public ConcurrentRequestsThrottlingFilter(ConcurrentRequestRegulatorSupplier regulatorSupplier){   _regulatorSupplier=checkNotNull(regulatorSupplier,\"Concurrent request regulator supplier is required\"); } "
"public VisibilityAnimator(String group){   super(group); } "
"public DiffMovingAverage(){   this(DEFAULT_SIZE); } "
"private void validateNumCores(){   String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);   try {     int numCores=Integer.parseInt(numCoresStr);     if (numCores < CarbonCommonConstants.NUM_CORES_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_MAX_VAL) {       LOGGER.info(\"The num Cores  value \\\"\" + numCoresStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);       carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);     }   }  catch (  NumberFormatException e) {     LOGGER.info(\"The num Cores  value \\\"\" + numCoresStr + \"\\\" is invalid. Using the default value \\\"\"+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);     carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);   } } "
"public static float ulp(float x){   if (Float.isInfinite(x)) {     return Float.POSITIVE_INFINITY;   }   return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1)); } "
"@Override public double[] nextVector(){   double[] random=new double[mean.length];   for (int i=0; i < random.length; ++i) {     random[i]=mean[i] + standardDeviation[i] * generator.nextNormalizedDouble();   }   return random; } "
"public Matrix solve(Matrix B){   if (B.getRowDimension() != m) {     throw new IllegalArgumentException(\"Matrix row dimensions must agree.\");   }   if (!this.isNonsingular()) {     throw new RuntimeException(\"Matrix is singular.\");   }   int nx=B.getColumnDimension();   Matrix Xmat=B.getMatrix(piv,0,nx - 1);   double[][] X=Xmat.getArray();   for (int k=0; k < n; k++) {     for (int i=k + 1; i < n; i++) {       for (int j=0; j < nx; j++) {         X[i][j]-=X[k][j] * LU[i][k];       }     }   }   for (int k=n - 1; k >= 0; k--) {     for (int j=0; j < nx; j++) {       X[k][j]/=LU[k][k];     }     for (int i=0; i < k; i++) {       for (int j=0; j < nx; j++) {         X[i][j]-=X[k][j] * LU[i][k];       }     }   }   return Xmat; } "
"public TypeRef makeOptional(){   return interner.intern(new TypeRef(kind,Cardinality.OPTIONAL,messageType,enumType)); } "
"@Deprecated public EventSessionConfig(String schemaName) throws IOException {   if (schemaName == null)   return;   ClassLoader cl=Thread.currentThread().getContextClassLoader();   if (cl == null)   cl=getClass().getClassLoader();   Properties props=new Properties();   props.load(cl.getResourceAsStream(\"config/\" + schemaName + \".properties\"));   loadFromProps(props); } "
"public static long hash64(final String text){   final byte[] bytes=text.getBytes();   return hash64(bytes,bytes.length); } "
"public static Zmat bahi(Zmat B,Zmat A) throws JampackException {   Zludpp LU;   A.getProperties();   B.getProperties();   if (A.nr != A.nc)   throw new JampackException(\"Rectangular matrix.\");   if (A.nr != B.nc)   throw new JampackException(\"Inconsistent dimensions.\");   if (Parameters.History) {     A.clean();     if (A.LU == null)     A.LU=new Zludpp(A);     LU=A.LU;   }  else   LU=new Zludpp(A);   return H.o(Solve.aib(A,H.o(B))); } "
"protected PhotosMoveQuery targetAlbumId(int value){   return unsafeParam(\"target_album_id\",value); } "
"public static boolean isConnectedByWifi(){   NetworkInfo info=getNetworkInfos();   return info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200702,skillcaster,num0,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_TELEPORT_ZONECHANNEL(String value0){   return new SM_SYSTEM_MESSAGE(1390122,value0); } "
"public List<Double> train(DataSource<Document> docs,int numIterations,int numBurnIn){   LOG.info(\"Training start, num_iter:\" + numIterations + \" num_burn_in:\"+ numBurnIn);   List<Double> loglikelihoods=new ArrayList<Double>();   setLocked(false);   long numTagTokens=0;   int totalNumDocs=0;   for (  Document d : docs) {     initializeDocument(d);     numTagTokens+=d.tags.length;     totalNumDocs++;   }   docs.rewind();   LOG.info(\"Number of tag tokens: \" + numTagTokens + \" N/R: \"+ pcm());   SparseCounter<String> meanNtw=new SparseCounter<String>();   Counter<String> meanNw=new Counter<String>();   for (int i=0; i < numIterations; i++) {     double l=0;     Map<String,AnyDoublePair<Integer>> perTagLikelihood=new Hashtable<String,AnyDoublePair<Integer>>();     long numDocs=0;     for (    Document d : docs) {       l+=inference(d,perTagLikelihood);       numDocs++;       if (numDocs % 1000 == 0) {         System.err.print(\"Sampling \" + (numDocs * 100 / totalNumDocs) + \"%  \\r\");         System.err.flush();       }     }     docs.rewind();     l/=numTagTokens;     double pertagl=0;     for (    Entry<String,AnyDoublePair<Integer>> e : perTagLikelihood.entrySet()) {       pertagl+=e.getValue().second / (double)e.getValue().first;     }     pertagl/=perTagLikelihood.size();     LOG.info(\" No: \" + i + \" LL: \"+ String.format(\"%.4f\",l)+ \" PL: \"+ String.format(\"%.4f\",pertagl)+ \" NR: \"+ String.format(\"%.4f\",pcm())+ \" SP: \"+ String.format(\"%.4f\",ntw.sparsity())+ \" NZ: \"+ ntw.numNonZeroElements());     if (i > numBurnIn) {       meanNtw.inc(ntw);       meanNw.inc(nw);     }     loglikelihoods.add(l);   }   ntw=null;   ntw=meanNtw;   nw=null;   nw=meanNw;   numCombinedIterations=numIterations - numBurnIn;   setLocked(true);   return loglikelihoods; } "
"protected static void deleteRecursiveSilent(CarbonFile f){   if (f.isDirectory()) {     if (f.listFiles() != null) {       for (      CarbonFile c : f.listFiles()) {         deleteRecursiveSilent(c);       }     }   }   if (f.exists() && !f.delete()) {     return;   } } "
"public ObjectFactory(){ } "
"public void freeCacheContext(Context ctx){   ctx.clean();   ctx.setActive(false); } "
"private int calcJoinWeightShift(int[] joinWeights){   int first=joinWeights[0];   for (int i=1; i < joinWeights.length; i++) {     if (joinWeights[i] != first) {       return 0;     }   }   int divisor=65536 / first;   if (divisor == 2) {     return 1;   }  else   if (divisor == 4) {     return 2;   }   return 0; } "
"@Override public void shutdown(){   if (!this.isShutdown()) {     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(_workingGroupName + \" executor is commencing shutdown...\");     }     this.getQueue().clear();     super.shutdown();     try {       this.awaitTermination(60,TimeUnit.SECONDS);     }  catch (    InterruptedException e) {       if (_logger.isLoggable(Level.WARNING)) {         _logger.log(Level.WARNING,_workingGroupName + \" interrupted while waiting for shutdown.\",e);       }     }     if (this.isTerminated()) {       if (_logger.isLoggable(Level.FINE)) {         _logger.fine(_workingGroupName + \" shutdown complete.\");       }     }  else {       if (this.isTerminating())       if (_logger.isLoggable(Level.WARNING)) {         _logger.warning(_workingGroupName + \" unsafe shutdown still in progress...\");       }  else       if (_logger.isLoggable(Level.SEVERE)) {         _logger.severe(_workingGroupName + \" shutdown failed to complete.\");       }     }     _consumerObject.cleanUp();   } } "
"public AudioQuality(int samplingRate,int bitRate){   this.samplingRate=samplingRate;   this.bitRate=bitRate; } "
"public CollectionsObject(Activity a){   SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(a);   this.adapter=new CollectionAdapter(a,new ArrayList<Collection>());   this.service=CollectionService.getService();   this.collectionsType=sharedPreferences.getString(a.getString(R.string.key_default_collection_type),a.getResources().getStringArray(R.array.collection_type_values)[2]);   this.collectionsPage=0;   this.refreshing=false;   this.loading=false;   this.over=false; } "
"public BesselJ(double order){   this.order=order; } "
"private boolean subsumes(String selector,String other){   if (selector.equals(\"*\")) {     return true;   }   if (other.equals(\"*\")) {     return false;   }   if (selector.endsWith(\".*\")) {     selector=selector.substring(0,selector.length() - 1);     if (other.endsWith(\".*\")) {       other=other.substring(0,other.length() - 1);     }     if (ConfigRuleSet.this.maintainSelectorMinimizationBugExperimentEnabled()) {       return selector.startsWith(other);     }  else {       return other.startsWith(selector);     }   }   return selector.equals(other); } "
"public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_ADD_BUDDY_REJECTED(String value0){   return new SM_SYSTEM_MESSAGE(1300886,value0); } "
"public FriendsGetSuggestionsQuery filter(List<FriendsGetSuggestionsFilter> value){   return unsafeParam(\"filter\",value); } "
"private void processSubEquipmentUnits(final Element equipmentUnit,final IEquipmentConfiguration equipmentConfiguration){   NodeList subEquipmentUnitsList=equipmentUnit.getElementsByTagName(SUB_EQUIPMENT_UNITS_ELEMENT);   Element subEquipmentUnitsElement=null;   if (subEquipmentUnitsList != null && subEquipmentUnitsList.getLength() > 0) {     subEquipmentUnitsElement=(Element)subEquipmentUnitsList.item(0);   }   if (subEquipmentUnitsElement != null) {     NodeList subEquipmentUnitsNode=subEquipmentUnitsElement.getElementsByTagName(SUB_EQUIPMENT_UNIT_ELEMENT);     log.debug(\"\\t\" + subEquipmentUnitsNode.getLength() + \" SubEquipments found for current equipment\");     for (int i=0; i < subEquipmentUnitsNode.getLength(); i++) {       log.debug(\"Creating a SubEquipment configuration object...\");       Element subEquipmentConf=(Element)subEquipmentUnitsNode.item(i);       String subEquipmentId=subEquipmentConf.getAttribute(ID_ATTRIBUTE);       String subEquipmentName=subEquipmentConf.getAttribute(NAME_ATTRIBUTE);       String commFaultId=getTagValue(subEquipmentConf,COMMFAULT_TAG_ID_ELEMENT);       String commFaultValue=getTagValue(subEquipmentConf,COMMFAULT_TAG_VALUE_ELEMENT);       SubEquipmentConfiguration subEquipmentConfiguration=new SubEquipmentConfiguration(Long.parseLong(subEquipmentId),subEquipmentName,Long.parseLong(commFaultId),Boolean.parseBoolean(commFaultValue));       if (subEquipmentConf.getElementsByTagName(ALIVE_TAG_ID_ELEMENT).getLength() > 0) {         String aliveTagId=getTagValue(subEquipmentConf,ALIVE_TAG_ID_ELEMENT);         String aliveTagInterval=getTagValue(subEquipmentConf,ALIVE_INTERVAL_ELEMENT);         subEquipmentConfiguration.setAliveTagId(Long.parseLong(aliveTagId));         subEquipmentConfiguration.setAliveInterval(Long.parseLong(aliveTagInterval));       }       equipmentConfiguration.getSubEquipmentConfigurations().put(subEquipmentConfiguration.getId(),subEquipmentConfiguration);     }   } } "
"public static DateTime quarterlyRound(DateTime from){   DateTime.Property property=from.monthOfYear();   return property.addToCopy(-1 * ((property.get() - 1) % 3)).monthOfYear().roundFloorCopy(); } "
"protected String millisecondsToYearWeek(long millis){   return getSimpleDateFormatForMilliseconds(\"yyyy-'W'ww\",millis); } "
"public UpgradePatchRetry(Context context){   this.context=context;   retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);   tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME); } "
"@Override public boolean lock(){   try {     lockPath=zk.create(this.lockTypeFolder + CarbonCommonConstants.FILE_SEPARATOR + lockName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);     List<String> nodes=zk.getChildren(this.lockTypeFolder,null);     Collections.sort(nodes);     if (lockPath.endsWith(nodes.get(0))) {       return true;     }  else {       zk.delete(lockPath,-1);       return false;     }   }  catch (  KeeperException|InterruptedException e) {     LOGGER.error(e,e.getMessage());     return false;   } } "
"private void addExplicitLocationField(ConfigSource.Builder builder,FieldDescriptor field,Node value){   builder.addLocation(field,null,helper.getLocation(value)); } "
"private InstallOperation<File,File> createInitSdkOperation(InstallContext installContext,double progressRatio){   File handoffSource=getHandoffAndroidSdkSource();   if (handoffSource != null) {     return new MergeOperation(handoffSource,installContext,progressRatio);   }   return InstallOperation.wrap(installContext,new ReturnValue(),0); } "
"private List<Phone> parseIntoPhones() throws Exception {   phones=new ArrayList<Phone>(units.size() / 2);   int u=0;   while (u < units.size()) {     SelectedUnit unit=units.get(u);     HalfPhoneTarget target=(HalfPhoneTarget)unit.getTarget();     if (target.isLeftHalf()) {       if (u < units.size() - 1) {         SelectedUnit nextUnit=units.get(u + 1);         HalfPhoneTarget nextTarget=(HalfPhoneTarget)nextUnit.getTarget();         if (nextTarget.isRightHalf()) {           phones.add(new Phone(unit,nextUnit,sampleRate));           u++;         }  else {           phones.add(new Phone(unit,null,sampleRate));         }       }  else {         phones.add(new Phone(unit,null,sampleRate));       }     }  else {       phones.add(new Phone(null,unit,sampleRate));     }     u++;   }   assert u == units.size();   insertTargetF0Values();   return phones; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200637,skillcaster,skillname); } "
"protected MarketAddQuery description(String value){   return unsafeParam(\"description\",value); } "
"public Matrix(int m,int n,double s){   this.m=m;   this.n=n;   A=new double[m][n];   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       A[i][j]=s;     }   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_HEAL_ME_to_B(String protector,int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201178,protector,num0,skilltarget,skillname); } "
"public SpaceQueryDetails(){ } "
"public static int patchFast(File oldFile,File newFile,File diffFile,int extLen) throws IOException {   if (oldFile == null || oldFile.length() <= 0) {     return RETURN_OLD_FILE_ERR;   }   if (newFile == null) {     return RETURN_NEW_FILE_ERR;   }   if (diffFile == null || diffFile.length() <= 0) {     return RETURN_DIFF_FILE_ERR;   }   InputStream oldInputStream=new BufferedInputStream(new FileInputStream(oldFile));   byte[] diffBytes=new byte[(int)diffFile.length()];   InputStream diffInputStream=new FileInputStream(diffFile);   try {     BSUtil.readFromStream(diffInputStream,diffBytes,0,diffBytes.length);   }   finally {     diffInputStream.close();   }   byte[] newBytes=patchFast(oldInputStream,(int)oldFile.length(),diffBytes,extLen);   OutputStream newOutputStream=new FileOutputStream(newFile);   try {     newOutputStream.write(newBytes);   }   finally {     newOutputStream.close();   }   return RETURN_SUCCESS; } "
"@Override public SAXParser newSAXParser() throws ParserConfigurationException {   SAXParser saxParserImpl;   try {     saxParserImpl=new SAXParserImpl(this,features,fSecureProcess);   }  catch (  SAXException se) {     throw new ParserConfigurationException(se.getMessage());   }   return saxParserImpl; } "
"public static <T>T convert(Object source,Class<T> destType){   return JSON.convertValue(source,destType); } "
"public void printList(){   System.out.println(this.optionsTable.toString()); } "
"public boolean isCollapsed(){   return collapsed; } "
"public NumberIsTooLargeException(Number wrong,Number max,boolean boundIsAllowed){   this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_LARGE : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,wrong,max,boundIsAllowed); } "
"public GroupsEditLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){   super(client,\"groups.editLink\",OkResponse.class);   accessToken(actor.getAccessToken());   groupId(groupId);   linkId(linkId); } "
"private void createUI(){   panel=new JPanel();   panel.setLayout(null);   createField(FIELD_DB_TYPE,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.databaseType\"));   createField(FIELD_SERVER,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.server\"));   createField(FIELD_PORT,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.port\"));   createField(FIELD_INSTANCE,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.instance\"));   createField(FIELD_USER,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.username\"));   createField(FIELD_PASSWORD,Localisation.getField(DataSourceConnectorArcSDE.class,\"DataSourceConnectorArcSDE.password\"));   panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT)); } "
"private void startPeerSync(String peer,int port){   boolean isDone=false;   localRedisConnect();   while (!isDone) {     try {       isDone=(this.localJedis.slaveof(peer,port) != null);       sleeper.sleepQuietly(1000);     }  catch (    Exception e) {       localRedisConnect();     }   } } "
"public void addButtonPressedListener(FieldConfigStringButtonInterface listener){   if (buttonPressedListenerList == null) {     buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();   }   buttonPressedListenerList.add(listener); } "
"protected boolean matchesAnyOf(Set<TokenKind> kinds){   if (kinds.contains(currentToken())) {     builder.advanceLexer();     return true;   }   return false; } "
"public void initialize() throws IOException {   CsvParserSettings parserSettings=new CsvParserSettings();   parserSettings.getFormat().setDelimiter(csvParserVo.getDelimiter().charAt(0));   parserSettings.getFormat().setComment(csvParserVo.getCommentCharacter().charAt(0));   parserSettings.setLineSeparatorDetectionEnabled(true);   parserSettings.setMaxColumns(getMaxColumnsForParsing(csvParserVo.getNumberOfColumns(),csvParserVo.getMaxColumns()));   parserSettings.setNullValue(\"\");   parserSettings.setIgnoreLeadingWhitespaces(false);   parserSettings.setIgnoreTrailingWhitespaces(false);   parserSettings.setSkipEmptyLines(false);   parserSettings.getFormat().setQuote(null == csvParserVo.getQuoteCharacter() ? '\\\"' : csvParserVo.getQuoteCharacter().charAt(0));   parserSettings.getFormat().setQuoteEscape(null == csvParserVo.getEscapeCharacter() ? '\\\\' : csvParserVo.getEscapeCharacter().charAt(0));   blockCounter++;   initializeReader();   if (csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset() == 0) {     parserSettings.setHeaderExtractionEnabled(csvParserVo.isHeaderPresent());   }   parser=new CsvParser(parserSettings);   parser.beginParsing(inputStreamReader); } "
"protected PollsGetVotersQuery answerIds(List<Integer> value){   return unsafeParam(\"answer_ids\",value); } "
"public void detectAdBlockers(Constants.AdBlockerCallback callback){   new DetectTask(callback).execute(); } "
"protected MarketEditQuery name(String value){   return unsafeParam(\"name\",value); } "
"public static String formatQuantity(float quantity){   return formatQuantity((double)quantity); } "
"public Stack(){ } "
"public AdsGetAdsLayoutQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public static double swapDouble(double value){   return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value))); } "
"public void uncollapseSelectedNodes(boolean wholeSubtree){   final Set<Integer> ids=new HashSet<>();   for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {     if (v.getOutDegree() == 0) {       Integer vid=(Integer)v.getInfo();       ids.add(vid);       if (!wholeSubtree)       setSelected(v,false);     }   }   final Set<Integer> seen=new HashSet<>();   for (  int id : ids) {     getCollapsedIds().remove(id);     Node vFull=classification.getFullTree().getANode(id);     if (!wholeSubtree) {       for (Iterator outEdgesFull=vFull.getOutEdges(); outEdgesFull.hasNext(); ) {         Edge eFull=(Edge)outEdgesFull.next();         Node wFull=eFull.getOpposite(vFull);         Integer wid=(Integer)wFull.getInfo();         getCollapsedIds().add(wid);       }     }  else     uncollapseSelectedNodesRec(vFull,ids,seen);   }   updateTree(); } "
"public MessagesGetQuery(VkApiClient client,Actor actor){   super(client,\"messages.get\",GetResponse.class);   accessToken(actor.getAccessToken()); } "
"public static Properties gatherProperties(){   if (properties == null) {     try {       String parents=System.getProperty(ConfigKeys.CONFIGURATION_PATHS,\"src/main/config\");       String[] split=StringUtils.split(parents,\";\");       properties=loadDefaultProperties();       for (      String name : split) {         File configParent=new File(StringUtils.trim(name));         loadProperties(configParent,properties);       }       overrideFromSystemProperties(properties);       setSystemProperties(properties);       overrideTimeouts(properties);     }  catch (    IOException e) {       LOG.error(\"Can't bind properties\",e);     }   }   return properties; } "
"public boolean populate(Map<String,List<StyleWrapper>> styleMap,List<GeoServerLayer> layerList){   dataModel.populate(styleMap,layerList);   dataModel.fireTableDataChanged();   geoServerStyleTree.initialise();   String geoserverName=\"Unknown\";   if ((layerList != null) && !layerList.isEmpty()) {     geoserverName=layerList.get(0).getConnection().getConnectionName();   }   geoServerStyleTree.populate(geoserverName,styleMap);   setVisible(true);   return okButtonPressed; } "
"public long optLong(int index){   return optLong(index,0); } "
"@Override public void onClick(View view){ switch (view.getId()) { case R.id.container_loading_view_large_feedbackBtn:     photosPresenter.initRefresh(getContext());   break; } } "
"public void onDown(long time,float x,float y,boolean fromMouse,int buttons){   if (mModelSelectorButton.onDown(x,y))   return;   getActiveStripLayoutHelper().onDown(time,x,y,fromMouse,buttons); } "
"public GeneralException(String msg,Throwable nested){   super(msg,nested); } "
"public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){   return execCommand(new String[]{command},isRoot,isNeedResultMsg); } "
"public void hide(){   LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();   lp.height=0;   mContentView.setLayoutParams(lp); } "
"@Override public int hashCode(){   int result=31 + MathUtils.hash(getMax());   result=result * 31 + MathUtils.hash(getMean());   result=result * 31 + MathUtils.hash(getMin());   result=result * 31 + MathUtils.hash(getN());   result=result * 31 + MathUtils.hash(getSum());   result=result * 31 + MathUtils.hash(getVariance());   return result; } "
"public static double[] fitPolynomial(double[] data,int order){   if (data == null)   throw new NullPointerException(\"Null data\");   if (order < 0)   throw new IllegalArgumentException(\"Polynomial order < 0 not supported\");   double[][] A=new double[data.length][order + 1];   double[][] b=new double[data.length][1];   for (int i=0; i < A.length; i++) {     if (Double.isNaN(data[i])) {       b[i][0]=0;       for (int j=0; j <= order; j++) {         A[i][j]=0;       }     }  else {       b[i][0]=data[i];       double t=((double)i) / data.length;       for (int j=0; j <= order; j++) {         A[i][j]=Math.pow(t,order - j);       }     }   }   try {     Matrix x=new Matrix(A).solve(new Matrix(b));     double[] coeffs=new double[order + 1];     for (int j=0; j <= order; j++) {       coeffs[j]=x.get(j,0);     }     return coeffs;   }  catch (  RuntimeException re) {     return null;   } } "
"public void removeDragComponent(){   if (myDragDropWidget != null) {     myWidgetsScene.removeWidget(myDragDropWidget);     myDragDropWidget=null;   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REGISTER_CANCELED(String value0){   return new SM_SYSTEM_MESSAGE(1400183,value0); } "
"public VideoPutTagQuery taggedName(String value){   return unsafeParam(\"tagged_name\",value); } "
"public static String sanitizeText(String text){   if (text == null)   return null;   return text.replace(OBJ_CHARACTER,\" \").trim(); } "
"public String next(int n) throws JSONException {   if (n == 0) {     return \"\";   }   char[] buffer=new char[n];   int pos=0;   while (pos < n) {     buffer[pos]=next();     if (end()) {       throw syntaxError(\"Substring bounds error\");     }     pos+=1;   }   return new String(buffer); } "
"public boolean addObservation(final long value){   int low=0;   int high=upperBounds.length - 1;   while (low < high) {     int mid=low + ((high - low) >> 1);     if (upperBounds[mid] < value) {       low=mid + 1;     }  else {       high=mid;     }   }   if (value <= upperBounds[high]) {     counts[high]++;     trackRange(value);     return true;   }   return false; } "
"protected AdsGetAdsPostsReachQuery adsIds(String value){   return unsafeParam(\"ads_ids\",value); } "
"public void removeRasterImageOutline(RasterSymbolizer rasterSymbolizer){   if (rasterSymbolizer != null) {     rasterSymbolizer.setImageOutline(null);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_ME_TO_SELF(String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200426,value0,skillname); } "
"protected void paintBufferToScreen(Graphics g){ synchronized (this) {     g.drawImage(m_offscreen,0,0,null);   } } "
"public static IQueryProcessor newInstance(IJSpace proxy,IRemoteSpace remoteSpace,Properties config) throws Exception {   if (isRemoteQueryProcessor(config))   return remoteSpace.getQueryProcessor();   ISpaceProxy clusteredProxy=(ISpaceProxy)proxy;   ISpaceProxy singleProxy=clusteredProxy;   if (clusteredProxy.isClustered()) {     singleProxy=(ISpaceProxy)clusteredProxy.getDirectProxy().getNonClusteredProxy();     CredentialsProvider credentialsProvider=clusteredProxy.getDirectProxy().getSecurityManager().getCredentialsProvider();     if (credentialsProvider != null)     singleProxy.getDirectProxy().getSecurityManager().login(credentialsProvider);   }   return newLocalInstance(clusteredProxy,singleProxy,config,null); } "
"public PhotosSaveQuery latitude(Float value){   return unsafeParam(\"latitude\",value); } "
"public static Object fromXml(String str){   return xstream.fromXML(str); } "
"public StringRequest(String url,String charset,Response.Listener<String> listener,Response.ErrorListener errorListener){   this(Method.GET,url,listener,errorListener);   this.charset=charset; } "
"public void clear(){   oredCriteria.clear();   orderByClause=null;   distinct=false; } "
"public static byte[] decode(String s){   return decode(s.toCharArray()); } "
"@Override public List<WebElement> findElementsByName(String name){   return ((FindsByName)super.getWrappedDriver()).findElementsByName(name); } "
"public SVNSynchronizeParticipant(){   super(); } "
"@Override public void modelChanged(@NotNull NlModel model){   SwingUtilities.invokeLater(null); } "
"public Value index(Value target){   throw new RuntimeException(\"Unsupported operation.\"); } "
"private boolean hasNewUniqueOrNotNullColumn(){   List<ColumnModel> columnModelList=mTableModel.getColumnModels();   for (  ColumnModel columnModel : columnModelList) {     ColumnModel columnModelDB=mTableModelDB.getColumnModelByName(columnModel.getColumnName());     if (columnModel.isUnique()) {       if (columnModelDB == null || !columnModelDB.isUnique()) {         return true;       }     }     if (columnModelDB != null && !columnModel.isNullable() && columnModelDB.isNullable()) {       return true;     }   }   return false; } "
"public void execute(final String command){   throw new RuntimeException(\"Internal error: OLD execute()\"); } "
"public boolean isFullRank(){   for (int j=0; j < n; j++) {     if (Rdiag[j] == 0)     return false;   }   return true; } "
"public void addDataPoint(double value){   this.series.get(0).addDataPoint(value); } "
"public static CommandResult execute(String command,File dir){   SimpleCommand simpleCommand=new SimpleCommand(command);   return execute(simpleCommand,dir); } "
"public void invalidateWheel(boolean clearCaches){   if (clearCaches) {     recycle.clearAll();     if (itemsLayout != null) {       itemsLayout.removeAllViews();     }     scrollingOffset=0;   }  else   if (itemsLayout != null) {     recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());   }   invalidate(); } "
"public NGramDistroDocument(){   Graph=new DocumentNGramDistroGraph();   Histogram=new DocumentNGramHistogram(); } "
"public void parseBuffer(ByteInputBuffer buffer){   int query_len=buffer.readIntLittleEndian();   queryName=buffer.readBytesNullTerminated();   int flags=buffer.readCharBigEndian();   boolean hasN=((flags & 1) == 1); switch (daaParser.getHeader().getAlignMode()) { case blastp: {       byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,5);       sourceSequence=context[0]=PackedSequence.getUnpackedSequence(packed,query_len,5);       break;     } case blastx: {     byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);     sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);     byte[][] sixFrameTranslation=Translator.getSixFrameTranslations(sourceSequence);     System.arraycopy(sixFrameTranslation,0,context,0,sixFrameTranslation.length);     break;   } case blastn: {   byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);   sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);   context[0]=sourceSequence;   context[1]=Translator.getReverseComplement(sourceSequence);   break; } default : } } "
"GSPingManager(){   super(\"GSPingManager:\" + spaceProxy.getClass().getName() + \":\"+ System.currentTimeMillis());   setDaemon(true);   start(); } "
"private boolean lessThan(VersionData maximumVersion){   if (this.majorNumber < maximumVersion.majorNumber) {     return true;   }  else   if (this.majorNumber == maximumVersion.majorNumber) {     if (this.minorNumber < maximumVersion.minorNumber) {       return true;     }  else     if (this.minorNumber == maximumVersion.minorNumber) {       if (this.pointNumber <= maximumVersion.pointNumber) {         return true;       }     }   }   return false; } "
"public static UnicastResponse readUnicastResponse(InputStream in,ClassLoader defaultLoader,boolean verifyCodebaseIntegrity,ClassLoader verifierLoader,Collection context) throws IOException, ClassNotFoundException {   try {     DataInput din=new DataInputStream(in);     String host=din.readUTF();     int port=din.readUnsignedShort();     String[] groups=new String[din.readInt()];     for (int i=0; i < groups.length; i++) {       groups[i]=din.readUTF();     }     MarshalledInstance mi=(MarshalledInstance)new ObjectInputStream(in).readObject();     ServiceRegistrar reg=(ServiceRegistrar)mi.get(defaultLoader,verifyCodebaseIntegrity,verifierLoader,context);     return new UnicastResponse(host,port,groups,reg);   }  catch (  RuntimeException e) {     throw new DiscoveryProtocolException(null,e);   } } "
"private void notifyUpdated(List<AirMapTraffic> updated){   if (updated == null || updated.isEmpty()) {     return;   }   for (  AirMapTrafficListener listener : listeners) {     listener.onUpdateTraffic(updated);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_UNSUMMONED(int value0){   return new SM_SYSTEM_MESSAGE(1200006,calculateNameId(value0)); } "
"public void verifyIsDisplayed(){   conditions.verifyPostAjax(visibilityOfElementLocated(By.cssSelector(CSS))); } "
"public SurfaceTexture createTexture(){   mProgram=createProgram(VERTEX_SHADER,FRAGMENT_SHADER);   if (mProgram == 0) {     throw new RuntimeException(\"failed creating program\");   }   maPositionHandle=GLES20.glGetAttribLocation(mProgram,\"aPosition\");   checkGlError(\"glGetAttribLocation aPosition\");   if (maPositionHandle == -1) {     throw new RuntimeException(\"Could not get attrib location for aPosition\");   }   maTextureHandle=GLES20.glGetAttribLocation(mProgram,\"aTextureCoord\");   checkGlError(\"glGetAttribLocation aTextureCoord\");   if (maTextureHandle == -1) {     throw new RuntimeException(\"Could not get attrib location for aTextureCoord\");   }   muMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,\"uMVPMatrix\");   checkGlError(\"glGetUniformLocation uMVPMatrix\");   if (muMVPMatrixHandle == -1) {     throw new RuntimeException(\"Could not get attrib location for uMVPMatrix\");   }   muSTMatrixHandle=GLES20.glGetUniformLocation(mProgram,\"uSTMatrix\");   checkGlError(\"glGetUniformLocation uSTMatrix\");   if (muSTMatrixHandle == -1) {     throw new RuntimeException(\"Could not get attrib location for uSTMatrix\");   }   int[] textures=new int[1];   GLES20.glGenTextures(1,textures,0);   mTextureID=textures[0];   GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,mTextureID);   checkGlError(\"glBindTexture mTextureID\");   GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);   GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);   GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);   GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);   checkGlError(\"glTexParameter\");   mSurfaceTexture=new SurfaceTexture(mTextureID);   return mSurfaceTexture; } "
"public boolean isNonsingular(){   for (int j=0; j < n; j++) {     if (LU[j][j] == 0)     return false;   }   return true; } "
"public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){   return equals(productId,null,BigDecimal.ZERO,BigDecimal.ZERO,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,null,itemType,itemGroup,isPromo); } "
"public static String slurpFile(File file) throws IOException {   Reader r=new FileReader(file);   return slurpReader(r); } "
"public void edit(final double[] key,final Editor<T> editor) throws KeySizeException, KeyDuplicateException {   if (key.length != m_K) {     throw new KeySizeException();   } synchronized (this) {     if (null == m_root) {       m_root=KDNode.create(new HPoint(key),editor);       m_count=m_root.deleted ? 0 : 1;       return;     }   }   m_count+=KDNode.edit(new HPoint(key),editor,m_root,0,m_K); } "
"public static boolean hasFileAccessPermission(WindowAndroid windowAndroid){   assert windowAndroid != null;   return windowAndroid.hasPermission(permission.WRITE_EXTERNAL_STORAGE); } "
"protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){   mRenderers=new ArrayList<>();   DrawOrder[] orders=chart.getDrawOrder();   for (  DrawOrder order : orders) { switch (order) { case BAR:       if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));     break; case BUBBLE:   if (chart.getBubbleData() != null)   mRenderers.add(new BubbleChartRenderer(chart,animator,viewPortHandler)); break; case LINE: if (chart.getLineData() != null) mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler)); break; case CANDLE: if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler)); break; case SCATTER: if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler)); break; } } } "
"public StaticFieldRef newStaticFieldRef(SootFieldRef f){   return new StaticFieldRef(f); } "
"protected void clearResults(){   setStatus(\"\",false);   if (mResultBar != null) {     mResultBar.clearMatchRects();   } } "
"@Override public int hashCode(){   final int prime=31;   int result=1;   result=prime * result + ((getId() == null) ? 0 : getId().hashCode());   result=prime * result + ((getRoleName() == null) ? 0 : getRoleName().hashCode());   result=prime * result + ((getDeptId() == null) ? 0 : getDeptId().hashCode());   result=prime * result + ((getRoleType() == null) ? 0 : getRoleType().hashCode());   result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());   result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());   result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());   result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());   result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());   result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());   return result; } "
"public static void listMixersAndExit(boolean bPlayback){   out(\"Available Mixers:\");   Mixer.Info[] aInfos=AudioSystem.getMixerInfo();   for (int i=0; i < aInfos.length; i++) {     Mixer mixer=AudioSystem.getMixer(aInfos[i]);     Line.Info lineInfo=new Line.Info(bPlayback ? SourceDataLine.class : TargetDataLine.class);     if (mixer.isLineSupported(lineInfo)) {       out(aInfos[i].getName());     }   }   if (aInfos.length == 0) {     out(\"[No mixers available]\");   }   System.exit(0); } "
"public static String removeDelimiter(String s,final char delim,final char openEscape,final char closeEscape){   StringBuilder t=new StringBuilder(s);   boolean escaped=false;   for (int i=0; i < t.length(); ++i) {     char c=t.charAt(i);     if (escaped) {       if (c == closeEscape) {         escaped=false;       }     }  else     if (c == openEscape) {       escaped=true;     }  else     if (c == delim) {       t.deleteCharAt(i--);     }   }   return t.toString(); } "
"public SM_PET(Pet pet,int subType,int shuggleEmotion){   this(0,PetAction.MOOD.getActionId(),0,0,pet);   this.shuggleEmotion=shuggleEmotion;   this.subType=subType; } "
"protected void notifyScrollingListenersAboutEnd(){   for (  OnWheelScrollListener listener : scrollingListeners) {     listener.onScrollingFinished(this);   } } "
"public static boolean isConversionSupported(AudioFormat.Encoding targetEncoding,AudioFormat sourceFormat){   List codecs=getFormatConversionProviders();   for (int i=0; i < codecs.size(); i++) {     FormatConversionProvider codec=(FormatConversionProvider)codecs.get(i);     if (codec.isConversionSupported(targetEncoding,sourceFormat)) {       return true;     }   }   return false; } "
"public FilterSpec normalize(){   FilterSpec copy=new FilterSpec();   copy.attributePath=attributePath;   copy.operator=operator;   copy.value=value;   if (expressions != null) {     copy.expressions=cloneExpressions(expressions,true);   }   return copy; } "
"public static String clearAllLastViewed(HttpServletRequest request,HttpServletResponse response){   ProductEvents.clearLastViewedCategories(request,response);   ProductEvents.clearLastViewedProducts(request,response);   ProductSearchSession.clearSearchOptionsHistoryList(request,response);   return \"success\"; } "
"public void onException(JMSException je){   this.setConnected(false);   Debug.logError(je,\"JMS connection exception\",module);   while (!isConnected()) {     try {       this.refresh();     }  catch (    GenericServiceException e) {       try {         Thread.sleep(10000);       }  catch (      InterruptedException ie) {       }       continue;     }   } } "
"public synchronized VisualTable addTable(String group,Schema schema){   VisualTable vt=new VisualTable(this,group,schema);   addDataGroup(group,vt,null);   return vt; } "
"private Movie startMovieRequest(String id) throws InternetConnectionException {   if (isThereInternetConnection(mContext)) {     try {       return mWebServicesApiCallsImpl.getMovieDetail(id);     }  catch (    RetrofitError e) {       throw new InternetConnectionException(e.getMessage());     }   }  else {     throw new InternetConnectionException(mContext.getString(R.string.internet_connection_error));   } } "
"public static double product(final double... values) throws MathIllegalArgumentException {   return PRODUCT.evaluate(values); } "
"private void centerControls(){   GridLayoutManager layout=(GridLayoutManager)myPanel.getLayout();   int height=(int)Math.floor(myGradlePath.getPreferredSize().getHeight() * 3);   layout.setMargin(new Insets(height,16,0,0)); } "
"@Override @Test public <T>void testAggregate(){ } "
"public static Aggregate<Map<String,Concept>,Optional<Number>> median(String varName){   return Aggregates.median(varName); } "
"public void addSection(String tag,Section section){   this.sections.put(tag,section);   this.sectionViewTypeNumbers.put(tag,viewTypeCount);   viewTypeCount+=VIEW_TYPE_QTY; } "
"public static void main(String[] args){   String ss=\"{a:'a',b:1}\";   JSON j=JSON.fromObject(ss);   System.out.println(j);   ss=\"{a:'a',b:1, c:{a:1, b:'a'}}\";   j=JSON.fromObject(ss);   System.out.println(j);   System.out.println(j.get(\"b\").getClass());   ss=\"[{a:'a',b:1}]\";   List<JSON> l1=JSON.fromObjects(ss);   System.out.println(l1);   System.out.println(l1.get(0).get(\"b\").getClass()); } "
"public VideoSearchQueryWithExtended filters(VideoSearchFilter... value){   return unsafeParam(\"filters\",value); } "
"public void showLoadingUI(){   removeCallbacks(mDelayedShow);   removeCallbacks(mDelayedHide);   setVisibility(GONE);   postDelayed(mDelayedShow,LOADING_ANIMATION_DELAY_MS); } "
"@Override public MaryData process(MaryData d) throws Exception {   return d; } "
"public Vector3DFormat(final NumberFormat format){   super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,format); } "
"public EnergyNormaliser(DoubleDataSource reference){   this.referencePower=determineAveragePower(reference);   this.amplitudeFactor=-1; } "
"private void initIdleStateTracking(){   mIdleTracker=new IdlenessTracker();   mIdleTracker.startTracking(); } "
"public void addParameter(ParameterDeclaration node){   List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();   list.addChild(node); } "
"public static Element addChildElement(Element element,String childElementName,Document document){   Element newElement=document.createElement(childElementName);   element.appendChild(newElement);   return newElement; } "
"@Override public boolean showDialog(){   Class<?> dataType=Object.class;   return showFilterDialog(dataType,filter); } "
"@Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {   if (fDocumentHandler != null) {     fDocumentHandler.textDecl(version,encoding,augs);   } } "
"@VisibleForTesting public boolean isAnimating(){   return false; } "
"public MasterViewConfiguration(boolean isMasterAreaResizable){   this.isMasterViewResizable=isMasterAreaResizable; } "
"public static void logPreferenceChange(boolean enabled){   RecordHistogram.recordEnumeratedHistogram(\"Search.ContextualSearchPreferenceStateChange\",enabled ? PREFERENCE_ENABLED : PREFERENCE_DISABLED,PREFERENCE_HISTOGRAM_BOUNDARY); } "
"public ParserConfigurationSettings(XMLComponentManager parent){   fRecognizedFeatures=new ArrayList();   fRecognizedProperties=new ArrayList();   fFeatures=new HashMap();   fProperties=new HashMap();   fParentSettings=parent; } "
"@Override public Schema schema(){   Schema schema=new Schema();   schema.addField(\"query-plan\",Type.VARCHAR(500));   return schema; } "
"public void waitForAnimationFinish(final WebElement element,int timeout){   final Deque<Point> locations=new ArrayDeque<>();   isConditionMet(null,timeout); } "
"@Deployment public void testDecisionFunctionality(){   Map<String,Object> variables=new HashMap<String,Object>();   variables.put(\"input\",1);   ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);   List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();   assertEquals(3,tasks.size());   Map<String,String> expectedMessages=new HashMap<String,String>();   expectedMessages.put(TASK1_NAME,TASK1_NAME);   expectedMessages.put(TASK2_NAME,TASK2_NAME);   expectedMessages.put(TASK3_NAME,TASK3_NAME);   for (  Task task : tasks) {     expectedMessages.remove(task.getName());   }   assertEquals(0,expectedMessages.size());   variables.put(\"input\",2);   pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);   tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();   assertEquals(2,tasks.size());   expectedMessages=new HashMap<String,String>();   expectedMessages.put(TASK2_NAME,TASK2_NAME);   expectedMessages.put(TASK3_NAME,TASK3_NAME);   for (  Task task : tasks) {     expectedMessages.remove(task.getName());   }   assertEquals(0,expectedMessages.size());   variables.put(\"input\",3);   pi=runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);   tasks=taskService.createTaskQuery().processInstanceId(pi.getId()).list();   assertEquals(1,tasks.size());   expectedMessages=new HashMap<String,String>();   expectedMessages.put(TASK3_NAME,TASK3_NAME);   for (  Task task : tasks) {     expectedMessages.remove(task.getName());   }   assertEquals(0,expectedMessages.size());   variables.put(\"input\",4);   try {     runtimeService.startProcessInstanceByKey(\"inclusiveGateway\",variables);     fail();   }  catch (  ActivitiException e) {   } } "
"private Long createProcessPIK(){   Random r=new Random();   int pik=r.nextInt(PIK_MAX + 1);   if (pik < PIK_MIN) {     pik+=PIK_MIN;   }   return Long.valueOf(pik); } "
"public void removeAllGraphModelListeners(){   m_listeners.clear(); } "
"@NotNull public AddFaceToFaceListAction addFaceToFaceList(@NotNull String faceListId,@Nullable String userData,@Nullable String targetFace,@NotNull String imageUrl){   Validation.validate(faceListId,\"^[a-z0-9_-]{1,64}$\",new ParameterValidationException(\"faceListId\",\"Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.\"));   Validation.validate(Utils.blankIfNull(userData),1,new ParameterValidationException(\"userData\",\"The size limit is 1KB\"));   return new AddFaceToFaceListAction(cognitiveContext,faceListId,userData,targetFace,imageUrl); } "
"private void drawTitle(Graphics2D gc,Dimension size){   gc.setFont(getFont(ChartViewer.FontKeys.TitleFont.toString()));   if (chartTitle != null) {     Dimension labelSize=Basic.getStringSize(gc,chartTitle,gc.getFont()).getSize();     if (size != null) {       size.setSize(labelSize.getWidth(),labelSize.getHeight() + 20);       return;     }     int x=(getWidth() - labelSize.width) / 2;     int y=labelSize.height;     gc.setColor(getFontColor(ChartViewer.FontKeys.TitleFont.toString(),Color.BLACK));     gc.drawString(chartTitle,x,y);   }  else   if (size != null)   size.setSize(0,20); } "
"public boolean retainEntries(TLongObjectProcedure<V> procedure){   boolean modified=false;   byte[] states=_states;   long[] keys=_set;   V[] values=_values;   tempDisableAutoCompaction();   try {     for (int i=keys.length; i-- > 0; ) {       if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {         removeAt(i);         modified=true;       }     }   }   finally {     reenableAutoCompaction(true);   }   return modified; } "
"public static PreResponse buildErrorPreResponse(Throwable throwable){   ResponseContext responseContext=new ResponseContext(new LinkedHashMap<>());   if (throwable instanceof ResponseException) {     ResponseException responseException=(ResponseException)throwable;     responseContext.put(ResponseContextKeys.STATUS.getName(),responseException.getStatusCode());     responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),responseException.getReason());   }  else {     responseContext.put(ResponseContextKeys.STATUS.getName(),Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());     responseContext.put(ResponseContextKeys.ERROR_MESSAGE.getName(),throwable.getMessage());   }   return new PreResponse(new ResultSet(Collections.emptyList(),new Schema(AllGranularity.INSTANCE)),responseContext); } "
"public boolean isApplicable(){   try {     return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;   }  catch (  Exception ex) {     return false;   } } "
"public static String decompressForGzip(byte[] compressed){   final int BUFFER_SIZE=compressed.length;   GZIPInputStream gis=null;   ByteArrayInputStream is=null;   try {     is=new ByteArrayInputStream(compressed);     gis=new GZIPInputStream(is,BUFFER_SIZE);     StringBuilder string=new StringBuilder();     byte[] data=new byte[BUFFER_SIZE];     int bytesRead;     while ((bytesRead=gis.read(data)) != -1) {       string.append(new String(data,0,bytesRead,\"UTF-8\"));     }     return string.toString();   }  catch (  IOException e) {     e.printStackTrace();   }  finally {     okhttp3.internal.Util.closeQuietly(gis);     okhttp3.internal.Util.closeQuietly(is);   }   return null; } "
"private static Expression[] convertStrings(Object[] os){   Expression[] es=new Expression[os.length];   for (int i=0; i < os.length; ++i) {     if (os[i] instanceof Expression) {       es[i]=(Expression)os[i];     }  else     if (os[i] instanceof String) {       es[i]=string((String)os[i]);     }  else     if (os[i] instanceof CharClass) {       es[i]=charClass((CharClass)os[i]);     }  else     if (os[i] instanceof Character) {       es[i]=character((Character)os[i]);     }   }   return es; } "
"protected int doSocketRead(ByteBuffer destinationBuffer) throws IOException {   return this.socketChannel.read(destinationBuffer); } "
"public Container(float x,float y){   super(x,y); } "
"private byte[] updateNoDictionaryStartAndEndKey(byte[] key){   if (key.length == 0) {     return key;   }   ByteBuffer buffer=ByteBuffer.wrap(key,2,key.length - 2);   ByteBuffer output=ByteBuffer.allocate(key.length - 2);   short numberOfByteToStorLength=2;   for (int i=0; i < numberOfNoDictionaryColumn; i++) {     output.putShort((short)(buffer.getShort() - numberOfByteToStorLength));   }   while (buffer.hasRemaining()) {     output.put(buffer.get());   }   output.rewind();   return output.array(); } "
"public EntryVersionCleaner(String parentName,ReferenceQueue<Object> queue,Map<EntryInfoKey,V> entryInfos){   super(parentName + \"$\" + EntryVersionCleaner.class.getSimpleName());   _queue=queue;   _entryInfos=entryInfos;   this.setDaemon(true); } "
"private double[] regcf(int nreq) throws MathIllegalArgumentException {   int nextr;   if (nreq < 1) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_REGRESSORS);   }   if (nreq > this.nvars) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.TOO_MANY_REGRESSORS,nreq,this.nvars);   }   if (!this.tol_set) {     tolset();   }   final double[] ret=new double[nreq];   boolean rankProblem=false;   for (int i=nreq - 1; i > -1; i--) {     if (FastMath.sqrt(d[i]) < tol[i]) {       ret[i]=0.0;       d[i]=0.0;       rankProblem=true;     }  else {       ret[i]=rhs[i];       nextr=i * (nvars + nvars - i - 1) / 2;       for (int j=i + 1; j < nreq; j++) {         ret[i]=smartAdd(ret[i],-r[nextr] * ret[j]);         ++nextr;       }     }   }   if (rankProblem) {     for (int i=0; i < nreq; i++) {       if (this.lindep[i]) {         ret[i]=Double.NaN;       }     }   }   return ret; } "
"public NakagamiDistribution(double mu,double omega,double inverseAbsoluteAccuracy) throws MathIllegalArgumentException {   super(inverseAbsoluteAccuracy);   if (mu < 0.5) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,mu,0.5);   }   if (omega <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_SCALE,omega);   }   this.mu=mu;   this.omega=omega; } "
"public int delete(KeyInfo keyInfo) throws MyException {   ServerInfo server;   ProtoCommon.PkgHeader header;   byte[] bsPackage;   header=new ProtoCommon.PkgHeader();   header.key_hash_code=keyInfo.getHashCode();   server=this.serverGroup.getServer(header.key_hash_code);   if (server == null) {     this.status=2;     return this.status;   }   try {     header.body_len=keyInfo.getPackLength();     header.cmd=ProtoCommon.FDHT_PROTO_CMD_DEL;     header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);     header.timestamp=(int)(System.currentTimeMillis() / 1000);     header.expires=0;     bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];     ProtoCommon.packHeader(header,bsPackage);     keyInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);     OutputStream out=server.sock.getOutputStream();     out.write(bsPackage);     ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,0);     this.status=pkgInfo.header.status;     return this.status;   }  catch (  IOException ex) {     System.err.println(\"server \" + server.address.getAddress().getHostAddress() + \":\"+ server.address.getPort()+ \" IOException, error msg: \"+ ex.getMessage());     this.serverGroup.forceClose(server);     this.status=5;     return this.status;   }  finally {     this.serverGroup.closeServer(server);   } } "
"@Override public Filter createFilter(List<Expression> parameterList){   IsGreaterThanImpl filter=null;   if ((parameterList == null) || (parameterList.size() < 3)) {     filter=new IsGreaterThanExtended();   }  else {     filter=new IsGreaterThanExtended(parameterList.get(0),parameterList.get(1));   }   return filter; } "
"public static List<Locale> availableLocales(){   return LocaleHolder.availableLocaleList; } "
"public void dump(PrintWriter output,int pad,String title,boolean justRelations){   output.println(\" ============ \" + title + \" ========== \");   if (!justRelations) {     voice.dump(output,pad + 4,\"Voice\");     features.dump(output,pad + 4,\"Features\");   }   relations.dump(output,pad + 4,\"Relations\");   output.flush(); } "
"public static Token newToken(int ofKind,String image){ switch (ofKind) { default :     return new Token(ofKind,image); } } "
"private static void normalizeTransformedData(final double[][] dataRI,final DftNormalization normalization,final TransformType type){   final double[] dataR=dataRI[0];   final double[] dataI=dataRI[1];   final int n=dataR.length;   assert dataI.length == n; switch (normalization) { case STANDARD:     if (type == TransformType.INVERSE) {       final double scaleFactor=1.0 / n;       for (int i=0; i < n; i++) {         dataR[i]*=scaleFactor;         dataI[i]*=scaleFactor;       }     }   break; case UNITARY: final double scaleFactor=1.0 / FastMath.sqrt(n); for (int i=0; i < n; i++) { dataR[i]*=scaleFactor; dataI[i]*=scaleFactor; } break; default : throw MathRuntimeException.createInternalError(); } } "
"private void clearOldTraffic(){   List<AirMapTraffic> oldAllTraffic=new ArrayList<>();   for (  AirMapTraffic traffic : allTraffic) {     if (trafficExpired(traffic)) {       oldAllTraffic.add(traffic);       allTraffic.remove(traffic);     }   }   notifyRemoved(oldAllTraffic); } "
"@Override public boolean equals(Object obj){   if (obj == this)   return true;   return _map.equals(obj); } "
"public static String hexDump(byte[] b){   if (b == null)   return \"\";   StringBuffer buf=new StringBuffer();   int size=b.length;   for (int i=0; i < size; i++) {     if ((i + 1) % 16 == 0) {       buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));       buf.append(\"\\n\");     }  else {       buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));       buf.append(\" \");     }   }   return buf.toString(); } "
"public int EOF_sym(){   return 0; } "
"public SymbolTable(int initialCapacity,float loadFactor){   if (initialCapacity < 0) {     throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);   }   if (loadFactor <= 0 || Float.isNaN(loadFactor)) {     throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);   }   if (initialCapacity == 0) {     initialCapacity=1;   }   fLoadFactor=loadFactor;   fTableSize=initialCapacity;   fBuckets=new Entry[fTableSize];   fThreshold=(int)(fTableSize * loadFactor);   fCount=0; } "
"public AdaptiveStepsizeIntegrator(final String name,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance){   super(name);   setStepSizeControl(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);   resetInternalState(); } "
"public PollsGetVotersQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"@PUT @Path(\"_facade/{table}/{key}\") @Consumes(MediaType.APPLICATION_JSON) @RequiresPermissions(\"facade|update|{table}\") @Timed(name=\"bv.emodb.sor.DataStoreResource1.replaceFacadeContent\",absolute=true) @ApiOperation(value=\"Creates or replaces a piece of content of a facade in the data store.\",notes=\"Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\\n\" + \" version of the content, if it exists.  Expects a literal JSON representation\\n\" + \" of the object.\",response=SuccessResponse.class) public SuccessResponse replaceFacadeContent(@PathParam(\"table\") String table,@PathParam(\"key\") String key,@QueryParam(\"changeId\") TimeUUIDParam changeIdParam,Map<String,Object> json,@QueryParam(\"audit\") AuditParam auditParam,@QueryParam(\"consistency\") @DefaultValue(\"STRONG\") WriteConsistencyParam consistency,@QueryParam(\"tag\") List<String> tags,@QueryParam(\"debug\") BooleanParam debug,@Authenticated Subject subject){   Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);   return doUpdate(table,key,changeIdParam,Deltas.literal(json),auditParam,consistency,debug,true,subject,tagsSet); } "
"public static IndexKey prepareDefaultStartIndexKey(SegmentProperties segmentProperties) throws KeyGenException {   IndexKey startIndexKey;   long[] dictionarySurrogateKey=new long[segmentProperties.getDimensions().size() - segmentProperties.getNumberOfNoDictionaryDimension()];   byte[] dictionaryStartMdkey=segmentProperties.getDimensionKeyGenerator().generateKey(dictionarySurrogateKey);   byte[] noDictionaryStartKeyArray=getNoDictionaryDefaultStartKey(segmentProperties);   startIndexKey=new IndexKey(dictionaryStartMdkey,noDictionaryStartKeyArray);   return startIndexKey; } "
"public void notifyContentLoadingStatus(){   currentContentLevel++;   if (currentContentLevel == MAX_CONTENT_LEVEL && iContentLoadListener != null) {     iContentLoadListener.onContentLoaded();   } } "
"private void internal_logException(Exception e,Logger logger){   logger.error(e.getMessage());   panel.addErrorMessage(e.getMessage());   StackTraceElement[] stackTrace=e.getStackTrace();   StringBuilder sb=new StringBuilder();   for (  StackTraceElement t : stackTrace) {     sb.append(t.toString());     sb.append(\"\\n\");   }   logger.error(sb.toString()); } "
"public void removeNode(Node node){   if (node == null)   return;   Node deleted=matchNodeOrParent(node);   if (deleted == null)   return;   if (fForward) {     fCurrentNode=previousNode(deleted);   }  else {     Node next=nextNode(deleted,false);     if (next != null) {       fCurrentNode=next;     }  else {       fCurrentNode=previousNode(deleted);       fForward=true;     }   } } "
"@Override public byte[] readByteArray(String filePath,int length){   FileChannel fileChannel=updateCache(filePath);   ByteBuffer byteBffer=read(fileChannel,length);   return byteBffer.array(); } "
"private void tell(List<Entry> bad){   for (Iterator<Entry> iter=bad.iterator(); iter.hasNext(); ) {     Entry e=iter.next();     if (e.renewalsDone()) {       final DesiredExpirationListener del=e.desiredExpirationListener();       if (del != null) {         del.expirationReached(new LeaseRenewalEvent(this,e.lease,e.expiration,null));       }       continue;     }     e.listener.notify(new LeaseRenewalEvent(this,e.lease,e.expiration,e.ex));   } } "
"public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema){   return subsetRecord(record,subsetSchema,null); } "
"private boolean belongToTheSamePackage(TypeElement class1,TypeElement class2){   Name package1=elementUtils.getPackageOf(class1).getQualifiedName();   Name package2=elementUtils.getPackageOf(class2).getQualifiedName();   return package1.equals(package2); } "
"void start(){   this.scheduleAckTimeout();   this.sendListen(); } "
"public boolean isIncluded(int value){   for (  Range r : ranges) {     if (r.start <= value && value <= r.end) {       return true;     }   }   return false; } "
"public SparseArray(){   this(10); } "
"public static long calculateDifferentMinute(Date startDate,Date endDate){   return calculateDifference(startDate,endDate,DifferenceMode.Minute); } "
"public void resetPotential(){   final int rank=Randomizer.nextInt(100) < 4 ? (Randomizer.nextInt(100) < 4 ? -UNIQUE : -EPIC) : -RARE;   resetPotentialWithRank(rank,10); } "
"@Override protected RangeToken parseCharacterClass(boolean useNrange) throws ParseException {   this.setContext(S_INBRACKETS);   this.next();   boolean nrange=false;   boolean wasDecoded=false;   RangeToken base=null;   RangeToken tok;   if (this.read() == T_CHAR && this.chardata == '^') {     nrange=true;     this.next();     base=Token.createRange();     base.addRange(0,Token.UTF16_MAX);     tok=Token.createRange();   }  else {     tok=Token.createRange();   }   int type;   boolean firstloop=true;   while ((type=this.read()) != T_EOF) {     wasDecoded=false;     if (type == T_CHAR && this.chardata == ']' && !firstloop) {       if (nrange) {         base.subtractRanges(tok);         tok=base;       }       break;     }     int c=this.chardata;     boolean end=false;     if (type == T_BACKSOLIDUS) { switch (c) { case 'd': case 'D': case 'w': case 'W': case 's': case 'S':         tok.mergeRanges(this.getTokenForShorthand(c));       end=true;     break; case 'i': case 'I': case 'c': case 'C':   c=this.processCIinCharacterClass(tok,c); if (c < 0) end=true; break; case 'p': case 'P': int pstart=this.offset; RangeToken tok2=this.processBacksolidus_pP(c); if (tok2 == null) throw this.ex(\"parser.atom.5\",pstart); tok.mergeRanges(tok2); end=true; break; case '-': c=this.decodeEscaped(); wasDecoded=true; break; default : c=this.decodeEscaped(); } }  else if (type == T_XMLSCHEMA_CC_SUBTRACTION && !firstloop) { if (nrange) { base.subtractRanges(tok); tok=base; } RangeToken range2=this.parseCharacterClass(false); tok.subtractRanges(range2); if (this.read() != T_CHAR || this.chardata != ']') throw this.ex(\"parser.cc.5\",this.offset); break; } this.next(); if (!end) { if (type == T_CHAR) { if (c == '[') throw this.ex(\"parser.cc.6\",this.offset - 2); if (c == ']') throw this.ex(\"parser.cc.7\",this.offset - 2); if (c == '-' && this.chardata != ']' && !firstloop) throw this.ex(\"parser.cc.8\",this.offset - 2); } if (this.read() != T_CHAR || this.chardata != '-' || c == '-' && firstloop) { if (!this.isSet(RegularExpression.IGNORE_CASE) || c > 0xffff) { tok.addRange(c,c); }  else { addCaseInsensitiveChar(tok,c); } }  else { this.next(); if ((type=this.read()) == T_EOF) throw this.ex(\"parser.cc.2\",this.offset); if (type == T_CHAR && this.chardata == ']') { if (!this.isSet(RegularExpression.IGNORE_CASE) || c > 0xffff) { tok.addRange(c,c); }  else { addCaseInsensitiveChar(tok,c); } tok.addRange('-','-'); }  else if (type == T_XMLSCHEMA_CC_SUBTRACTION) { throw this.ex(\"parser.cc.8\",this.offset - 1); }  else { int rangeend=this.chardata; if (type == T_CHAR) { if (rangeend == '[') throw this.ex(\"parser.cc.6\",this.offset - 1); if (rangeend == ']') throw this.ex(\"parser.cc.7\",this.offset - 1); if (rangeend == '-') throw this.ex(\"parser.cc.8\",this.offset - 2); }  else if (type == T_BACKSOLIDUS) rangeend=this.decodeEscaped(); this.next(); if (c > rangeend) throw this.ex(\"parser.ope.3\",this.offset - 1); if (!this.isSet(RegularExpression.IGNORE_CASE) || (c > 0xffff && rangeend > 0xffff)) { tok.addRange(c,rangeend); }  else { addCaseInsensitiveCharRange(tok,c,rangeend); } } } } firstloop=false; } if (this.read() == T_EOF) throw this.ex(\"parser.cc.2\",this.offset); tok.sortRanges(); tok.compactRanges(); this.setContext(S_NORMAL); this.next(); return tok; } "
"public static ArrayList<String> matches(String text,int results){   ArrayList<String> urls=new ArrayList<String>();   String[] splitString=(text.split(\" \"));   for (  String string : splitString) {     try {       URL item=new URL(string);       urls.add(item.toString());     }  catch (    Exception e) {     }     if (results == FIRST && urls.size() > 0)     break;   }   return urls; } "
"public static byte[] writeFloat(float f){   return ByteBuffer.allocate(4).putFloat(f).array(); } "
"public CM_PING(int opcode,State state,State... restStates){   super(opcode,state,restStates); } "
"public static String readFileToString(File file,Charset encoding) throws IOException {   InputStream in=null;   try {     in=openInputStream(file);     return IOUtils.toString(in,Charsets.toCharset(encoding));   }   finally {     IOUtils.closeQuietly(in);   } } "
"public PrefuseTableModel(Table table){   m_table=table; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_ME_TO_B(int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200544,num0,skilltarget,skillname); } "
"private void processFormFieldEnd(){   slickFormSubmitButton.setText(!endTag.isEmpty() ? endTag : getResources().getText(R.string.form_field_progress));   slickFieldContainer.setVisibility(View.GONE);   slickFormProgressBar.setVisibility(View.VISIBLE);   new DutyAsyncTask().execute(); } "
"private static final String export(Convex c,String tabs){   StringBuilder sb=new StringBuilder();   if (c instanceof Circle) {     Circle circle=(Circle)c;     sb.append(tabs).append(\"Convex c = Geometry.createCircle(\").append(circle.getRadius()).append(\");\").append(NEW_LINE);     if (!circle.getCenter().isZero()) {       sb.append(tabs).append(\"c.translate(\").append(export(circle.getCenter())).append(\");\").append(NEW_LINE);     }   }  else   if (c instanceof Rectangle) {     Rectangle rectangle=(Rectangle)c;     sb.append(tabs).append(\"Convex c = Geometry.createRectangle(\").append(rectangle.getWidth()).append(\", \").append(rectangle.getHeight()).append(\");\").append(NEW_LINE);     if (Math.abs(rectangle.getRotation()) > Epsilon.E) {       sb.append(tabs).append(\"c.rotate(Math.toRadians(\").append(Math.toDegrees(rectangle.getRotation())).append(\"));\").append(NEW_LINE);     }     if (!rectangle.getCenter().isZero()) {       sb.append(tabs).append(\"c.translate(\").append(export(rectangle.getCenter())).append(\");\").append(NEW_LINE);     }   }  else   if (c instanceof Triangle) {     Triangle triangle=(Triangle)c;     sb.append(tabs).append(\"Convex c = Geometry.createTriangle(\").append(export(triangle.getVertices()[0])).append(\", \").append(export(triangle.getVertices()[1])).append(\", \").append(export(triangle.getVertices()[2])).append(\");\").append(NEW_LINE);   }  else   if (c instanceof Polygon) {     Polygon polygon=(Polygon)c;     sb.append(tabs).append(\"Convex c = Geometry.createPolygon(\");     int vSize=polygon.getVertices().length;     for (int i=0; i < vSize; i++) {       Vector2 v=polygon.getVertices()[i];       if (i != 0)       sb.append(\", \");       sb.append(export(v));     }     sb.append(\");\").append(NEW_LINE);   }  else   if (c instanceof Segment) {     Segment segment=(Segment)c;     sb.append(tabs).append(\"Convex c = Geometry.createSegment(\").append(export(segment.getVertices()[0])).append(\", \").append(export(segment.getVertices()[1])).append(\");\").append(NEW_LINE);   }  else {     throw new UnsupportedOperationException(MessageFormat.format(Messages.getString(\"exception.persist.unknownClass\"),c.getClass().getName()));   }   return sb.toString(); } "
"public Tailer(File file,TailerListener listener,long delayMillis,boolean end){   this(file,listener,delayMillis,end,DEFAULT_BUFSIZE); } "
"public NotesCreateCommentQuery createComment(UserActor actor,int noteId,String message){   return new NotesCreateCommentQuery(getClient(),actor,noteId,message); } "
"public boolean success(){   return this.success; } "
"public UrlValidator(){   this(null); } "
"public SM_UI_SETTINGS(byte[] data,int type){   this.data=data;   this.type=type; } "
"protected void removeTrackedServices(){   for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {     tracker.close();   } } "
"private void resizeIfNeeded(){   int oldRenderWidth=Display.getWidth();   int oldRenderHeight=Display.getHeight();   if (this.renderWidth == oldRenderWidth && this.renderHeight == oldRenderHeight)   return;   try {     Display.setDisplayMode(new DisplayMode(this.renderWidth,this.renderHeight));     System.out.println(\"Resized the window\");   }  catch (  LWJGLException e) {     System.out.println(\"Failed to resize the window!\");     e.printStackTrace();   }   forceResize(this.renderWidth,this.renderHeight); } "
"public void save(){   if (file == null) {     throw new UnsupportedOperationException(\"Only root configs can be saved!\");   }   if (hasChanged()) {     try {       FileUtils.writeStringToFile(file,config.root().render(ConfigRenderOptions.defaults().setJson(false).setOriginComments(true).setComments(false)));     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } "
"public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {   byte[] decoded=Base64.decodeFromFile(infile);   java.io.OutputStream out=null;   try {     out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));     out.write(decoded);   }  catch (  java.io.IOException e) {     throw e;   }  finally {     try {       out.close();     }  catch (    Exception ex) {     }   } } "
"@Override public void close() throws IOException {   try {     out.close();   }   finally {     lockFile.delete();   } } "
"@Override public boolean logOut(final String tokenHeader){   return true; } "
"public void addImportDecl(ImportDecl node){   List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();   list.addChild(node); } "
"public void cleanResult(){   consG.clear();   pointers.clear();   allocations.clear();   constraints.clear();   func2int.clear();   int2func.clear();   edgeMapping.clear();   hasTransformed=false;   hasExecuted=false;   System.gc();   System.gc();   System.gc();   System.gc(); } "
"public void abort() throws IOException {   completeEdit(this,false); } "
"public void onFindToolbarHidden(){ } "
"public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4,T obj5,T obj6){   Set<T> theSet=new LinkedHashSet<T>();   theSet.add(obj1);   theSet.add(obj2);   theSet.add(obj3);   theSet.add(obj4);   theSet.add(obj5);   theSet.add(obj6);   return theSet; } "
"private static boolean throwsException(IMethod method,Class<?> exceptionClass){   Class<?>[] exceptionClasses=method.getExceptionTypes();   for (  Class<?> c : exceptionClasses) {     if (exceptionClass.isAssignableFrom(c)) {       return true;     }   }   return false; } "
"public static WebappInfo create(Intent intent){   String id=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ID);   String icon=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_ICON);   String url=IntentUtils.safeGetStringExtra(intent,ShortcutHelper.EXTRA_URL);   int orientation=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_ORIENTATION,ScreenOrientationValues.DEFAULT);   int source=IntentUtils.safeGetIntExtra(intent,ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);   long themeColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_THEME_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);   long backgroundColor=IntentUtils.safeGetLongExtra(intent,ShortcutHelper.EXTRA_BACKGROUND_COLOR,ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING);   boolean isIconGenerated=IntentUtils.safeGetBooleanExtra(intent,ShortcutHelper.EXTRA_IS_ICON_GENERATED,false);   String name=nameFromIntent(intent);   String shortName=shortNameFromIntent(intent);   return create(id,url,icon,name,shortName,orientation,source,themeColor,backgroundColor,isIconGenerated); } "
"public long skip(long n) throws IOException {   long totalSkipped=0;   long skipped;   while (totalSkipped < n) {     skipped=in.skip(n - totalSkipped);     if (totalSkipped == -1)     throw new IOException(\"skip not supported\");  else     if (skipped == 0)     return 0;  else     totalSkipped+=totalSkipped + skipped;   }   if (firstRead)   firstRead=false;   return totalSkipped; } "
"public Map<String,Object> invoke(ServiceDispatcher dispatcher,String localName,Map<String,Object> context) throws GenericServiceException {   DispatchContext dctx=dispatcher.getLocalContext(localName);   ModelService model=dctx.getModelService(getName());   if (model == null)   throw new GenericServiceException(\"Group defined service (\" + getName() + \") is not a defined service.\");   Map<String,Object> thisContext=model.makeValid(context,ModelService.IN_PARAM);   Debug.logInfo(\"Running grouped service [\" + serviceName + \"]\",module);   if (getMode().equals(\"async\")) {     List<String> requiredOut=model.getParameterNames(ModelService.OUT_PARAM,false);     if (requiredOut.size() > 0) {       Debug.logWarning(\"Grouped service (\" + getName() + \") requested 'async' invocation; running sync because of required OUT parameters.\",module);       return dispatcher.runSync(localName,model,thisContext);     }  else {       dispatcher.runAsync(localName,model,thisContext,false);       return new HashMap<String,Object>();     }   }  else {     return dispatcher.runSync(localName,model,thisContext);   } } "
"private Tab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent,Intent intent){   int position=TabModel.INVALID_TAB_INDEX;   int index=mTabModel.indexOf(parent);   if (index != TabModel.INVALID_TAB_INDEX)   position=index + 1;   return createNewTab(loadUrlParams,type,parent,position,intent); } "
"@Override public boolean lock(){   try {     if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {       FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));     }     lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;     if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {       FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));     }     fileOutputStream=new FileOutputStream(lockFilePath);     channel=fileOutputStream.getChannel();     try {       fileLock=channel.tryLock();     }  catch (    OverlappingFileLockException e) {       return false;     }     if (null != fileLock) {       return true;     }  else {       return false;     }   }  catch (  IOException e) {     return false;   } } "
"public boolean hasSet(String name){   return m_map.containsKey(name); } "
"private static void bindPreferenceSummaryToValue(Preference preference){   preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);   sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),\"\")); } "
"public void spin(){   isSpinning=true;   spinHandler.sendEmptyMessage(0); } "
"public boolean isFolder(){   return isFolder; } "
"protected PhotosConfirmTagQuery photoId(String value){   return unsafeParam(\"photo_id\",value); } "
"public static void ensureOSXCompatibleFolder(){   File nnnAAAAA=new File(Environment.getExternalStorageDirectory().toString() + \"/DCIM/100ANDRO\");   if ((!nnnAAAAA.exists()) && (!nnnAAAAA.mkdir())) {     Log.e(TAG,\"create NNNAAAAA file: \" + nnnAAAAA.getPath() + \" failed\");   } } "
"<T>T onMax(String tableName,String column,String[] conditions,Class<T> type){   return mathQuery(tableName,new String[]{\"max(\" + column + \")\"},conditions,type); } "
"public DatabaseGetFacultiesQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"@Override public double[] makeInverseCumulativeTestPoints(){   return new double[]{0,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1}; } "
"public static Beans<User> load(W q,int offset,int limit){   return Helper.load(q.sort(\"name\",1),offset,limit,User.class); } "
"public static boolean certificateNeedsRenewal(List<String> domains,Secret secret){   val isExpiring=certificateIsExpiring(secret);   val domainsChanged=haveDomainsChanged(domains,secret);   return (isExpiring || domainsChanged); } "
"public static ArrayList<CompanyInfo.Company> searchCompany(String keyword){   keyword=ZHConverter.convert(keyword,ZHConverter.SIMPLIFIED);   ArrayList<CompanyInfo.Company> src=new ArrayList<>();   if (keyword != null && keyword.trim().length() > 0) {     for (int i=0; i < CompanyInfo.info.size(); i++) {       if (!CompanyInfo.names[i].contains(keyword) && !CompanyInfo.pinyin[i].contains(keyword)) {         continue;       }       src.add(CompanyInfo.info.get(i));     }   }  else {     return CompanyInfo.info;   }   return src; } "
"private void addContribution(final SubCircle sub,final boolean reversed,final BSPTree<Sphere2D> node){   final Circle circle=(Circle)sub.getHyperplane();   final List<Arc> arcs=((ArcsSet)sub.getRemainingRegion()).asList();   for (  final Arc a : arcs) {     final Vertex start=new Vertex((S2Point)circle.toSpace(new S1Point(a.getInf())));     final Vertex end=new Vertex((S2Point)circle.toSpace(new S1Point(a.getSup())));     start.bindWith(circle);     end.bindWith(circle);     final Edge edge;     if (reversed) {       edge=new Edge(end,start,a.getSize(),circle.getReverse());     }  else {       edge=new Edge(start,end,a.getSize(),circle);     }     edgeToNode.put(edge,node);     nodeToEdgesList.get(node).add(edge);   } } "
"public static String encode(String namespacePrefix,String element){   if ((namespacePrefix != null) && !namespacePrefix.isEmpty()) {     return String.format(\"%s:%s\",namespacePrefix,element);   }  else {     return element;   } } "
"public URI(URI p_base,String p_uriSpec,boolean allowNonAbsoluteURI) throws MalformedURIException {   initialize(p_base,p_uriSpec,allowNonAbsoluteURI); } "
"public static <K,V>Type<MapEntry<K,V>> concreteEntryType(Type<? extends Map<K,V>> mapType){   Type<?> type=TypeFactory.valueOf(MapEntry.class,mapType.getActualTypeArguments());   return (Type<MapEntry<K,V>>)type; } "
"public CreateSiteWindow selectNthTemplate(int i){   templatesList.get(i).click();   return this; } "
"@Override public void updateLayerStyle(List<GeoServerLayer> layerList){   if (layerList != null) {     for (    GeoServerLayer layer : layerList) {       GeoServerClientInterface client=connectionMap.get(layer.getConnection());       if (client != null) {         client.updateLayerStyles(layer);       }     }   } } "
"public AWSIotMessage(String topic,AWSIotQos qos){   this.topic=topic;   this.qos=qos; } "
"@Override @SuppressWarnings(\"unchecked\") public EquipmentCacheObject clone(){   EquipmentCacheObject equipmentCacheObject=(EquipmentCacheObject)super.clone();   equipmentCacheObject.commandTagIds=(LinkedList<Long>)this.commandTagIds.clone();   equipmentCacheObject.subEquipmentIds=(LinkedList<Long>)this.subEquipmentIds.clone();   return equipmentCacheObject; } "
"public JimpleToBafContext(int localCount){   jimpleLocalToBafLocal=new HashMap<Local,Local>(localCount * 2 + 1,0.7f); } "
"public JsonPrimitive(String string){   setValue(string); } "
"public void saveGraph(DirectedGraph graph,String destFile) throws IOException {   if (graph == null)   throw new NullPointerException(\"Cannot dump null graph\");   if (destFile == null)   throw new NullPointerException(\"No destination file\");   Log.d(Mary.LOG,\"Dumping directed graph in Mary format to \" + destFile + \" ...\");   DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));   MaryHeader hdr=new MaryHeader(MaryHeader.DIRECTED_GRAPH);   hdr.writeTo(out);   Properties props=graph.getProperties();   if (props == null) {     out.writeShort(0);   }  else {     ByteArrayOutputStream baos=new ByteArrayOutputStream();     props.store(baos,null);     byte[] propData=baos.toByteArray();     out.writeShort(propData.length);     out.write(propData);   }   graph.getFeatureDefinition().writeBinaryTo(out);   dumpBinary(graph,out);   out.close();   Log.d(Mary.LOG,\" ... done\\n\"); } "
"private static Query generateRpQuery(ElasticPlacementZoneState epz){   Query.Builder queryBuilder=Query.Builder.create().addKindFieldClause(ComputeState.class);   for (  String tagLink : epz.tagLinksToMatch) {     queryBuilder.addCollectionItemClause(ResourceState.FIELD_NAME_TAG_LINKS,tagLink);   }   return queryBuilder.build(); } "
"protected void analyzePixels(){   int len=pixels.length;   int nPix=len / 3;   indexedPixels=new byte[nPix];   NeuQuant nq=new NeuQuant(pixels,len,sample);   colorTab=nq.process();   for (int i=0; i < colorTab.length; i+=3) {     byte temp=colorTab[i];     colorTab[i]=colorTab[i + 2];     colorTab[i + 2]=temp;     usedEntry[i / 3]=false;   }   int k=0;   for (int i=0; i < nPix; i++) {     int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);     usedEntry[index]=true;     indexedPixels[i]=(byte)index;   }   pixels=null;   colorDepth=8;   palSize=7;   if (transparent != -1) {     transIndex=findClosest(transparent);   } } "
"protected boolean checkFolTokens(Element currentRulePart,int position,NodeList tokens){   NamedNodeMap attNodes=currentRulePart.getAttributes();   for (int z=0; z < attNodes.getLength(); z++) {     Node el=attNodes.item(z);     String currentAtt=el.getNodeName();     String currentVal=el.getNodeValue();     if (currentAtt.equals(\"num\")) {       int num=Integer.parseInt(currentVal.substring(0,1));       int requiredLastTokenPosition=position + num;       if (currentVal.length() == 1) {         if (!(tokens.getLength() - 1 == requiredLastTokenPosition))         return false;       }  else       if (currentVal.substring(1,2).equals(\"+\")) {         if (!(tokens.getLength() - 1 >= requiredLastTokenPosition))         return false;       }  else       if (currentVal.substring(1,2).equals(\"-\")) {         if (!(tokens.getLength() - 1 <= requiredLastTokenPosition))         return false;       }     }   }   return true; } "
"private static double polyCosine(double x){   double x2=x * x;   double p=2.479773539153719E-5;   p=p * x2 + -0.0013888888689039883;   p=p * x2 + 0.041666666666621166;   p=p * x2 + -0.49999999999999994;   p*=x2;   return p; } "
"@Override public long skip(long n) throws IOException {   return 2 * super.skip(n / 2 * inputChannels); } "
"public T proxy(){   executorFactoryBean.afterPropertiesSet();   return (T)executorFactoryBean.getObject(); } "
"public ByteStringTranslator(String[] strings){   if (strings.length > MAXNUM) {     StringBuilder buf=new StringBuilder();     for (int i=0; i < strings.length; i++) {       buf.append(\"\\\"\" + strings[i] + \"\\\" \");     }     throw new IllegalArgumentException(\"Too many strings for a byte-string translator: \\n\" + buf.toString() + \"(\"+ strings.length+ \" strings)\");   }   list=new ArrayList<String>(Arrays.asList(strings));   map=new HashMap<String,Byte>();   for (int i=0; i < strings.length; i++) {     map.put(strings[i],(byte)i);   } } "
"private FilterOperationCodes(){ } "
"public boolean isPronounceable(String word){   String lowerCaseWord=word.toLowerCase();   return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord)); } "
"public Iterator edgesOutOf(Unit u){   return new ArrayList(unitMap.get(u)).iterator(); } "
"public String typeName(){   return \"methodref\"; } "
"public static void changeMemberGroup(Player player,int firstPlayer,int secondPlayer,int allianceGroupId){   PlayerAlliance alliance=player.getPlayerAlliance2();   Preconditions.checkNotNull(alliance,\"Alliance should not be null for group change\");   if (alliance.isLeader(player) || alliance.isViceCaptain(player)) {     alliance.onEvent(new ChangeMemberGroupEvent(alliance,firstPlayer,secondPlayer,allianceGroupId));   }  else {     PacketSendUtility.sendMessage(player,\"You do not have the authority for that.\");   } } "
"protected boolean readConstantPool(DataInputStream d) throws IOException {   byte tag;   cp_info cp;   int i;   boolean skipone;   constant_pool=new cp_info[constant_pool_count];   skipone=false;   for (i=1; i < constant_pool_count; i++) {     if (skipone) {       skipone=false;       continue;     }     tag=(byte)d.readUnsignedByte(); switch (tag) { case cp_info.CONSTANT_Class:       cp=new CONSTANT_Class_info();     ((CONSTANT_Class_info)cp).name_index=d.readUnsignedShort();   if (debug)   G.v().out.println(\"Constant pool[\" + i + \"]: Class\"); break; case cp_info.CONSTANT_Fieldref: cp=new CONSTANT_Fieldref_info(); ((CONSTANT_Fieldref_info)cp).class_index=d.readUnsignedShort(); ((CONSTANT_Fieldref_info)cp).name_and_type_index=d.readUnsignedShort(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Fieldref\"); break; case cp_info.CONSTANT_Methodref: cp=new CONSTANT_Methodref_info(); ((CONSTANT_Methodref_info)cp).class_index=d.readUnsignedShort(); ((CONSTANT_Methodref_info)cp).name_and_type_index=d.readUnsignedShort(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Methodref\"); break; case cp_info.CONSTANT_InterfaceMethodref: cp=new CONSTANT_InterfaceMethodref_info(); ((CONSTANT_InterfaceMethodref_info)cp).class_index=d.readUnsignedShort(); ((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index=d.readUnsignedShort(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: MethodHandle\"); break; case cp_info.CONSTANT_String: cp=new CONSTANT_String_info(); ((CONSTANT_String_info)cp).string_index=d.readUnsignedShort(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: String\"); break; case cp_info.CONSTANT_Integer: cp=new CONSTANT_Integer_info(); ((CONSTANT_Integer_info)cp).bytes=d.readInt(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Integer = \"+ ((CONSTANT_Integer_info)cp).bytes); break; case cp_info.CONSTANT_Float: cp=new CONSTANT_Float_info(); ((CONSTANT_Float_info)cp).bytes=d.readInt(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Float = \"+ ((CONSTANT_Float_info)cp).convert()); break; case cp_info.CONSTANT_Long: cp=new CONSTANT_Long_info(); ((CONSTANT_Long_info)cp).high=d.readInt() & 0xFFFFFFFFL; ((CONSTANT_Long_info)cp).low=d.readInt() & 0xFFFFFFFFL; if (debug) { String temp=cp.toString(constant_pool); G.v().out.println(\"Constant pool[\" + i + \"]: Long = \"+ temp); } skipone=true; break; case cp_info.CONSTANT_Double: cp=new CONSTANT_Double_info(); ((CONSTANT_Double_info)cp).high=d.readInt() & 0xFFFFFFFFL; ((CONSTANT_Double_info)cp).low=d.readInt() & 0xFFFFFFFFL; if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Double = \"+ ((CONSTANT_Double_info)cp).convert()); skipone=true; break; case cp_info.CONSTANT_NameAndType: cp=new CONSTANT_NameAndType_info(); ((CONSTANT_NameAndType_info)cp).name_index=d.readUnsignedShort(); ((CONSTANT_NameAndType_info)cp).descriptor_index=d.readUnsignedShort(); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Name and Type\"); break; case cp_info.CONSTANT_Utf8: CONSTANT_Utf8_info cputf8=new CONSTANT_Utf8_info(d); cp=(cp_info)CONSTANT_Utf8_collector.v().add(cputf8); if (debug) G.v().out.println(\"Constant pool[\" + i + \"]: Utf8 = \\\"\"+ cputf8.convert()+ \"\\\"\"); break; case cp_info.CONSTANT_MethodHandle: cp=new CONSTANT_MethodHandle_info(); ((CONSTANT_MethodHandle_info)cp).kind=d.readByte(); ((CONSTANT_MethodHandle_info)cp).target_index=d.readUnsignedShort(); break; case cp_info.CONSTANT_InvokeDynamic: cp=new CONSTANT_InvokeDynamic_info(); ((CONSTANT_InvokeDynamic_info)cp).bootstrap_method_index=d.readUnsignedShort(); ((CONSTANT_InvokeDynamic_info)cp).name_and_type_index=d.readUnsignedShort(); break; default : G.v().out.println(\"Unknown tag in constant pool: \" + tag + \" at entry \"+ i); return false; } cp.tag=tag; constant_pool[i]=cp; } return true; } "
"public void addHeaderView(View v,Object data,boolean isSelectable){   ListAdapter adapter=getAdapter();   if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {     throw new IllegalStateException(\"Cannot add header view to grid -- setAdapter has already been called.\");   }   ViewGroup.LayoutParams lyp=v.getLayoutParams();   FixedViewInfo info=new FixedViewInfo();   FrameLayout fl=new FullWidthFixedViewLayout(getContext());   if (lyp != null) {     v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));     fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));   }   fl.addView(v);   info.view=v;   info.viewContainer=fl;   info.data=data;   info.isSelectable=isSelectable;   mHeaderViewInfos.add(info);   if (adapter != null) {     ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();   } } "
"public boolean isParallelTo(final Line line){   return FastMath.abs(MathArrays.linearCombination(sin,line.cos,-cos,line.sin)) < tolerance; } "
"public SLDTreeTools(){   createUI(); } "
"@Override public void apply(NexusStreamParser np) throws Exception { } "
"public static void drawButtonTwitter(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){   if (!visible)   return;   boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);   RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);   getTextureHandler().bindModTexture(\"textures/misc/twitter256.png\");   getGlStateManager().color(1.0F,1.0F,1.0F);   drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14); } "
"public void showLoadingView(){   mLoadingView.showLoadingUI(); } "
"private int parseParameter(String parameter,String parameterName) throws BadPaginationException {   if (parameter.equals(\"\")) {     ErrorMessageFormat errorMessage=ErrorMessageFormat.PAGINATION_PARAMETER_MISSING;     LOG.debug(errorMessage.logFormat(parameterName));     throw new BadPaginationException(errorMessage.format(parameterName));   }   try {     return Integer.parseInt(parameter);   }  catch (  NumberFormatException ignored) {     ErrorMessageFormat errorMessage=ErrorMessageFormat.PAGINATION_PARAMETER_INVALID;     LOG.debug(errorMessage.logFormat(parameterName,parameter));     throw new BadPaginationException(errorMessage.format(parameterName,parameter));   } } "
"public void write(int[] data){   for (  int i : data) {     writeInt(i);   } } "
"public DockerPortMapping withHostPort(int hostPort){   DockerPortMapping newMapping=new DockerPortMapping();   newMapping.protocol=protocol;   newMapping.containerPort=containerPort;   newMapping.hostIp=hostIp;   newMapping.hostPort=String.valueOf(hostPort);   return newMapping; } "
"boolean hasWildcard(){   boolean wildcarded=false;   for (int i=0; i < websterRoot.length; i++) {     String root=websterRoot[i];     if ((root.indexOf('*')) != -1) {       wildcarded=true;       break;     }   }   return (wildcarded); } "
"void initFromCameraParameters(Camera camera){   Camera.Parameters parameters=camera.getParameters();   previewFormat=parameters.getPreviewFormat();   previewFormatString=parameters.get(\"preview-format\");   Log.d(TAG,\"Default preview format: \" + previewFormat + '/'+ previewFormatString);   WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);   Display display=manager.getDefaultDisplay();   screenResolution=new Point(display.getWidth(),display.getHeight());   Log.d(TAG,\"Screen resolution: \" + screenResolution);   Point screenResolutionForCamera=new Point();   screenResolutionForCamera.x=screenResolution.x;   screenResolutionForCamera.y=screenResolution.y;   if (screenResolution.x < screenResolution.y) {     screenResolutionForCamera.x=screenResolution.y;     screenResolutionForCamera.y=screenResolution.x;   }   cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);   Log.d(TAG,\"Camera resolution: \" + screenResolution); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public AssignDivExpr fullCopy(){   AssignDivExpr tree=(AssignDivExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public MessagesSendQuery userId(Integer value){   return unsafeParam(\"user_id\",value); } "
"public static Map<String,Object> authOrderPayments(DispatchContext dctx,Map<String,? extends Object> context){   Delegator delegator=dctx.getDelegator();   LocalDispatcher dispatcher=dctx.getDispatcher();   String orderId=(String)context.get(\"orderId\");   Locale locale=(Locale)context.get(\"locale\");   Map<String,Object> result=FastMap.newInstance();   boolean reAuth=false;   if (context.get(\"reAuth\") != null) {     reAuth=((Boolean)context.get(\"reAuth\")).booleanValue();   }   GenericValue orderHeader=null;   List<GenericValue> paymentPrefs=null;   try {     orderHeader=EntityQuery.use(delegator).from(\"OrderHeader\").where(\"orderId\",orderId).queryOne();     Map<String,String> lookupMap=UtilMisc.toMap(\"orderId\",orderId,\"statusId\",\"PAYMENT_NOT_AUTH\");     List<String> orderList=UtilMisc.toList(\"maxAmount\");     paymentPrefs=EntityQuery.use(delegator).from(\"OrderPaymentPreference\").where(lookupMap).orderBy(orderList).queryList();     if (reAuth) {       lookupMap.put(\"orderId\",orderId);       lookupMap.put(\"statusId\",\"PAYMENT_AUTHORIZED\");       paymentPrefs.addAll(EntityQuery.use(delegator).from(\"OrderPaymentPreference\").where(lookupMap).orderBy(orderList).queryList());     }   }  catch (  GenericEntityException gee) {     Debug.logError(gee,\"Problems getting the order information\",module);     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);     result.put(ModelService.ERROR_MESSAGE,\"ERROR: Could not get order information (\" + gee.toString() + \").\");     return result;   }   if (orderHeader == null) {     return ServiceUtil.returnError(UtilProperties.getMessage(resourceOrder,\"OrderOrderNotFound\",UtilMisc.toMap(\"orderId\",orderId),locale));   }   OrderReadHelper orh=new OrderReadHelper(orderHeader);   BigDecimal totalRemaining=orh.getOrderGrandTotal();   int finished=0;   int hadError=0;   List<String> messages=FastList.newInstance();   for (  GenericValue paymentPref : paymentPrefs) {     if (reAuth && \"PAYMENT_AUTHORIZED\".equals(paymentPref.getString(\"statusId\"))) {       String paymentConfig=null;       GenericValue paymentSettings=getPaymentSettings(orh.getOrderHeader(),paymentPref,AUTH_SERVICE_TYPE,false);       if (paymentSettings != null) {         paymentConfig=paymentSettings.getString(\"paymentPropertiesPath\");         if (UtilValidate.isEmpty(paymentConfig)) {           paymentConfig=\"payment.properties\";         }       }       if (PaymentGatewayServices.checkAuthValidity(paymentPref,paymentConfig)) {         finished+=1;         continue;       }     }     Map<String,Object> authContext=FastMap.newInstance();     authContext.put(\"orderPaymentPreferenceId\",paymentPref.getString(\"orderPaymentPreferenceId\"));     authContext.put(\"userLogin\",context.get(\"userLogin\"));     Map<String,Object> results=null;     try {       results=dispatcher.runSync(\"authOrderPaymentPreference\",authContext);     }  catch (    GenericServiceException se) {       Debug.logError(se,\"Error in calling authOrderPaymentPreference from authOrderPayments\",module);       hadError+=1;       messages.add(\"Could not authorize OrderPaymentPreference [\" + paymentPref.getString(\"orderPaymentPreferenceId\") + \"] for order [\"+ orderId+ \"]: \"+ se.toString());       continue;     }     result.put(\"authCode\",results.get(\"authCode\"));     if (ServiceUtil.isError(results)) {       hadError+=1;       messages.add(\"Could not authorize OrderPaymentPreference [\" + paymentPref.getString(\"orderPaymentPreferenceId\") + \"] for order [\"+ orderId+ \"]: \"+ results.get(ModelService.ERROR_MESSAGE));       continue;     }     if (((Boolean)results.get(\"finished\")).booleanValue()) {       finished+=1;     }     if (((Boolean)results.get(\"errors\")).booleanValue()) {       hadError+=1;     }     if (results.get(\"messages\") != null) {       List<String> message=UtilGenerics.checkList(results.get(\"messages\"));       messages.addAll(message);     }     if (results.get(\"processAmount\") != null) {       totalRemaining=totalRemaining.subtract(((BigDecimal)results.get(\"processAmount\")));     }   }   Debug.logInfo(\"Finished with auth(s) checking results\",module);   result.put(\"authResultMsgs\",messages);   if (hadError > 0) {     Debug.logError(\"Error(s) (\" + hadError + \") during auth; returning ERROR\",module);     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);     result.put(\"processResult\",\"ERROR\");     return result;   }  else   if (finished == paymentPrefs.size()) {     Debug.logInfo(\"All auth(s) passed total remaining : \" + totalRemaining,module);     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);     result.put(\"processResult\",\"APPROVED\");     return result;   }  else {     Debug.logInfo(\"Only [\" + finished + \"/\"+ paymentPrefs.size()+ \"] OrderPaymentPreference authorizations passed; returning processResult=FAILED with no message so that message from ProductStore will be used\",module);     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);     result.put(\"processResult\",\"FAILED\");     return result;   } } "
"@TargetApi(Build.VERSION_CODES.CUPCAKE) public static ActivityManager.MemoryInfo printMemoryInfo(Context context){   ActivityManager.MemoryInfo mi=getMemoryInfo(context);   if (LogUtils.getLogConfig().isEnable()) {     StringBuilder sb=new StringBuilder();     sb.append(\"_______  Memory :   \");     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {       sb.append(\"\\ntotalMem        :\").append(mi.totalMem);     }     sb.append(\"\\navailMem        :\").append(mi.availMem);     sb.append(\"\\nlowMemory       :\").append(mi.lowMemory);     sb.append(\"\\nthreshold       :\").append(mi.threshold);     LogUtils.i(sb.toString());   }   return mi; } "
"public VideoRemoveTagQuery removeTag(UserActor actor,int tagId,int videoId){   return new VideoRemoveTagQuery(getClient(),actor,tagId,videoId); } "
"public static AndSpacePredicate and(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){   return new AndSpacePredicate(leftPredicate,rightPredicate); } "
"public static Transaction.Created create(TransactionManager mgr,long leaseTime) throws LeaseDeniedException, RemoteException {   TransactionManager.Created rawTxn=mgr.create(leaseTime);   Transaction transaction;   if (mgr instanceof NestableTransactionManager)   transaction=new NestableServerTransaction((NestableTransactionManager)mgr,rawTxn.id,null,leaseTime);  else   transaction=ServerTransaction.create(mgr,rawTxn.id,leaseTime);   return new Transaction.Created(transaction,rawTxn.lease); } "
"public void drawChart(Graphics2D gc){   SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);   gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));   int y0=getHeight() - bottomMargin;   int y1=topMargin;   double topY;   if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101;  else   if (scalingType == ChartViewer.ScalingType.LOG) {     topY=computeMaxYAxisValueLogScale(getMaxValue());   }  else   if (scalingType == ChartViewer.ScalingType.SQRT) {     topY=Math.sqrt(getMaxValue());   }  else   topY=1.1 * getMaxValue();   double yFactor=(y0 - y1) / topY;   int x0=leftMargin;   int x1=getWidth() - rightMargin;   if (x0 >= x1)   return;   int numberOfDataSets=getChartData().getNumberOfSeries();   double xStep=(x1 - x0) / (2 * numberOfDataSets);   double bigSpace=Math.max(2,Math.min(10,xStep));   xStep=(x1 - x0 - bigSpace * numberOfDataSets) / numberOfDataSets;   Point[] previousPoint=new Point[getChartData().getNumberOfClasses()];   int d=0;   for (  String series : getChartData().getSeriesNames()) {     if (showXAxis) {       double xLabel=x0 + bigSpace + d * bigSpace + (d + 0.5) * xStep;       Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);       String label=seriesLabelGetter.getLabel(series);       Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();       if (classLabelAngle == 0) {         apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());       }  else       if (classLabelAngle > Math.PI / 2) {         apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);       }       if (getChartData().getChartSelection().isSelected(series,null)) {         gc.setColor(ProgramProperties.SELECTION_COLOR);         fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);       }       gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));       if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});       drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);       if (sgc != null)       sgc.clearCurrentItem();     }     int c=0;     for (    String className : getChartData().getClassNames()) {       double value;       if (scalingType == ChartViewer.ScalingType.PERCENT) {         double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);         if (total == 0)         value=0;  else         value=100 * getChartData().getValueAsDouble(series,className) / total;       }  else       if (scalingType == ChartViewer.ScalingType.LOG) {         value=getChartData().getValueAsDouble(series,className);         if (value > 0)         value=Math.log10(value);       }  else       if (scalingType == ChartViewer.ScalingType.SQRT) {         value=getChartData().getValueAsDouble(series,className);         if (value > 0)         value=Math.sqrt(value);       }  else       value=getChartData().getValueAsDouble(series,className);       double xBar=x0 + bigSpace + d * bigSpace + d * xStep;       double height=value * yFactor;       Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(y0 - height));       boolean isSelected=getChartData().getChartSelection().isSelected(null,className);       Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));       if (isSelected) {         gc.setColor(ProgramProperties.SELECTION_COLOR);         gc.setStroke(HEAVY_STROKE);       }  else       gc.setColor(color);       Point bPt=previousPoint[c];       if (bPt != null) {         if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});         gc.drawLine(bPt.x,bPt.y,aPt.x,aPt.y);         if (sgc != null)         sgc.clearCurrentItem();       }       previousPoint[c]=aPt;       if (!isSelected) {         isSelected=getChartData().getChartSelection().isSelected(series,className);         if (isSelected) {           gc.setColor(ProgramProperties.SELECTION_COLOR);           gc.setStroke(HEAVY_STROKE);         }       }       if (!isSelected) {         gc.setColor(color.darker());         if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});         gc.drawOval(aPt.x - 1,aPt.y - 1,2,2);         if (sgc != null)         sgc.clearCurrentItem();       }  else {         gc.drawOval(aPt.x - 2,aPt.y - 2,4,4);         gc.setStroke(NORMAL_STROKE);       }       c++;       if (showValues || isSelected) {         String label=\"\" + (int)getChartData().getValueAsDouble(series,className);         valuesList.add(new DrawableValue(label,aPt.x,aPt.y - 3,isSelected));       }     }     d++;   }   if (valuesList.size() > 0) {     gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));     DrawableValue.drawValues(gc,valuesList,true,false);     valuesList.clear();   } } "
"public static boolean putBoolean(Context context,String key,boolean value){   SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);   SharedPreferences.Editor editor=settings.edit();   editor.putBoolean(key,value);   return editor.commit(); } "
"public static List<DataFileFooter> readCarbonIndexFile(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier absoluteTableIdentifier) throws CarbonUtilException {   Collections.sort(tableBlockInfoList);   CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());   String carbonIndexFilePath=carbonTablePath.getCarbonIndexFilePath(taskId,\"0\",tableBlockInfoList.get(0).getSegmentId());   DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();   try {     return fileFooterConverter.getIndexInfo(carbonIndexFilePath,tableBlockInfoList);   }  catch (  IOException e) {     throw new CarbonUtilException(\"Problem while reading the file metadata\",e);   } } "
"Iterator(){   counter[last]=-1; } "
"public static boolean isGiftCard(String stPassed){   if (isOFBGiftCard(stPassed)) {     return true;   }  else   if (isValueLinkCard(stPassed)) {     return true;   }   return false; } "
"protected FriendsGetAvailableForCallQueryWithFields fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"public static UUID playerNameToId(String name){   byte[] bytes=name.toLowerCase().getBytes(StandardCharsets.UTF_8);   byte[] trimmedTo16=Arrays.copyOf(bytes,16);   long leastSigBits=0;   long mostSigBits=0;   for (int i=0; i < 8; i++)   mostSigBits=(mostSigBits << 8) | (trimmedTo16[i] & 0xff);   for (int i=8; i < 16; i++)   leastSigBits=(leastSigBits << 8) | (trimmedTo16[i] & 0xff);   return new UUID(mostSigBits,leastSigBits); } "
"private Coordinate projectedCoordinate(AirMapTraffic traffic){   long elapsedTime=(new Date().getTime() - traffic.getRecordedTime().getTime()) / 1000;   double metersPerSecond=traffic.getGroundSpeedKt() * 0.514444;   double distanceTraveled=metersPerSecond * elapsedTime;   return getCoordinateFromBearingAndDistance(traffic.getInitialCoordinate(),traffic.getTrueHeading(),distanceTraveled); } "
"public static void showInformation(String message){   showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000); } "
"public Object[] next(){   return getSortedRecordFromFile(); } "
"NamedThreadFactory(String poolName){   group=new ThreadGroup(poolName + \"-\" + POOL_NUMBER.getAndIncrement()); } "
"private static Key generateKey64bits(){   byte[] keyValue=null;   MessageDigest sha=null;   try {     keyValue=Settings.keyStr.getBytes(\"UTF-8\");     sha=MessageDigest.getInstance(\"SHA-1\");     keyValue=sha.digest(keyValue);     keyValue=Arrays.copyOf(keyValue,16);     Key key=new SecretKeySpec(keyValue,Settings.ALGO);     return key;   }  catch (  UnsupportedEncodingException e) {     System.out.println(e);   } catch (  NoSuchAlgorithmException e) {     System.out.println(e);   }   return null; } "
"public NavigableImagePanel(BufferedImage image) throws IOException {   this();   setImage(image); } "
"private void parseCatalogs() throws IOException {   if (fCatalogsList != null) {     fCatalog=new Catalog(fResolverCatalogManager);     attachReaderToCatalog(fCatalog);     for (int i=0; i < fCatalogsList.length; ++i) {       String catalog=fCatalogsList[i];       if (catalog != null && catalog.length() > 0) {         fCatalog.parseCatalog(catalog);       }     }   }  else {     fCatalog=null;   } } "
"public NotIsolatedAnalysis(DirectedGraph<Unit> dg,LatestComputation latest,Map<Unit,EquivalentValue> equivRhsMap){   this(dg,latest,equivRhsMap,new ArrayPackedSet<EquivalentValue>(new CollectionFlowUniverse<EquivalentValue>(equivRhsMap.values()))); } "
"public PhotosSaveMarketAlbumPhotoQuery saveMarketAlbumPhoto(UserActor actor,int groupId,String photo,int server,String hash){   return new PhotosSaveMarketAlbumPhotoQuery(getClient(),actor,groupId,photo,server,hash); } "
"@Override public void endDocument(){   super.endDocument(); } "
"public boolean isPerLogicalSubjectLockObject(boolean isEvictable){   if (isEvictable)   throw new RuntimeException(\"AllInCacheLockManager::no evictable object\");   return true; } "
"public synchronized DHCPMessage internalize(byte[] ibuff){   ByteArrayInputStream inBStream=new ByteArrayInputStream(ibuff,0,ibuff.length);   DataInputStream inStream=new DataInputStream(inBStream);   try {     this.op=inStream.readByte();     this.htype=inStream.readByte();     this.hlen=inStream.readByte();     this.hops=inStream.readByte();     this.xid=inStream.readInt();     this.secs=inStream.readShort();     this.flags=inStream.readShort();     inStream.readFully(this.ciaddr,0,4);     inStream.readFully(this.yiaddr,0,4);     inStream.readFully(this.siaddr,0,4);     inStream.readFully(this.giaddr,0,4);     inStream.readFully(this.chaddr,0,16);     inStream.readFully(this.sname,0,64);     inStream.readFully(this.file,0,128);     byte[] options=new byte[312];     inStream.readFully(options,0,312);     if (this.optionsList == null) {       initialize();     }     this.optionsList.internalize(options);   }  catch (  IOException e) {     System.err.println(e);   }   return this; } "
"public void remove(String key){   preferences.edit().remove(key).apply(); } "
"protected void pluginInitialize(){ } "
"public Criteria or(){   Criteria criteria=createCriteriaInternal();   oredCriteria.add(criteria);   return criteria; } "
"public static int makeListItemSurveyResp(Delegator delegator,GenericValue item,List<String> surveyResps) throws GenericEntityException {   if (UtilValidate.isNotEmpty(surveyResps)) {     int count=0;     for (    String responseId : surveyResps) {       GenericValue listResp=delegator.makeValue(\"ShoppingListItemSurvey\");       listResp.set(\"shoppingListId\",item.getString(\"shoppingListId\"));       listResp.set(\"shoppingListItemSeqId\",item.getString(\"shoppingListItemSeqId\"));       listResp.set(\"surveyResponseId\",responseId);       delegator.create(listResp);       count++;     }     return count;   }   return -1; } "
"public InternalEventTracker postEvent(Event event){   return eventBus.postEvent(event); } "
"public static void deleteOwner(AbstractAI ai2){   ai2.getOwner().getController().onDelete(); } "
"public IResource updateCache(IResource resource,ISVNStatus status){   if (resource != null && status != null && status.getTextStatus() != null && !resource.exists() && status.getTextStatus().equals(SVNStatusKind.MISSING) && (status.getLastChangedRevision() == null || status.getLastChangedRevision().getNumber() == -1)) {     statusCache.removeStatus(resource);     return resource;   }   return statusCache.addStatus(resource,new LocalResourceStatus(status,getURL(status),checkForReadOnly)); } "
"public static String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {   if (locale == null) {     locale=Locale.getDefault();   }   final ResourceBundle resourceBundle=ResourceBundle.getBundle(\"mf.org.apache.xerces.impl.msg.SAXMessages\",locale);   String msg;   try {     msg=resourceBundle.getString(key);     if (arguments != null) {       try {         msg=java.text.MessageFormat.format(msg,arguments);       }  catch (      Exception e) {         msg=resourceBundle.getString(\"FormatFailed\");         msg+=\" \" + resourceBundle.getString(key);       }     }   }  catch (  MissingResourceException e) {     msg=resourceBundle.getString(\"BadMessageKey\");     throw new MissingResourceException(key,msg,key);   }   if (msg == null) {     msg=key;     if (arguments.length > 0) {       StringBuffer str=new StringBuffer(msg);       str.append('?');       for (int i=0; i < arguments.length; i++) {         if (i > 0) {           str.append('&');         }         str.append(String.valueOf(arguments[i]));       }     }   }   return msg; } "
"private void createUI(){   setLayout(new BorderLayout());   box=Box.createVerticalBox();   add(box,BorderLayout.CENTER);   setUpLiteralPanel();   setUpPropertyPanel();   setUpEnvVarPanel();   setUpFunctionPanel();   box.add(createApplyRevertPanel()); } "
"public static final SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED_FOR_SELF(int worldId){   return new SM_SYSTEM_MESSAGE(1400640,worldId); } "
"@Override public int[] makeInverseCumulativeTestValues(){   return new int[]{0,0,0,0,1,1,14,11,10,9,8,Integer.MAX_VALUE}; } "
"private void initRowMap(){   m_rowmap=new int[m_table.getRowCount()];   IntIterator rows=m_table.rows();   for (int i=0; rows.hasNext(); ++i) {     m_rowmap[i]=rows.nextInt();   } } "
"public void init$Children(){ } "
"public static double distance(Vector2D p1,Vector2D p2){   return p1.distance(p2); } "
"public Builder autoZIndex(Boolean autoZIndex){   this.autoZIndex=autoZIndex;   return this; } "
"public String nextTo(String delimiters) throws JSONException {   char c;   StringBuilder sb=new StringBuilder();   for (; ; ) {     c=this.next();     if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\\n' || c == '\\r') {       if (c != 0) {         this.back();       }       return sb.toString().trim();     }     sb.append(c);   } } "
"public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {   checkIndices(start,end);   visitor.start(getDimension(),start,end);   for (int i=start; i <= end; i++) {     setEntry(i,visitor.visit(i,getEntry(i)));   }   return visitor.end(); } "
"TxnManagerTransaction(TransactionManager mgr,LogManager logmgr,long id,TaskManager threadpool,WakeupManager wm,TxnSettler settler,Uuid uuid,long lease,boolean persistent,Object externalXid,ConcurrentMap<String,IDirectSpaceProxy> proxiesMap){   if (logmgr == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"log manager must be non-null\");   if (mgr == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"transaction manager must be non-null\");   if (threadpool == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"threadpool must be non-null\");   if (wm == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"wakeup manager must be non-null\");   if (settler == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"settler must be non-null\");   if (uuid == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"uuid must be non-null\");   this.threadpool=threadpool;   this.wm=wm;   this.logmgr=logmgr;   if (externalXid != null) {     _externalXid=externalXid;     str=new GSServerTransaction(mgr,externalXid,lease);     str.id=id;   }  else {     _externalXid=null;     str=new ServerTransaction(mgr,id,lease);   }   this.settler=settler;   this.uuid=uuid;   _persistent=persistent;   _proxiesMap=proxiesMap;   finer_op_logger=operationsLogger.isLoggable(Level.FINER);   finest_tr_logger=transactionsLogger.isLoggable(Level.FINEST); } "
"final public void println(Object o){   print(o + \"<br>\"); } "
"protected short compareDates(DateTimeData date1,DateTimeData date2,boolean strict){   if (date1.utc == date2.utc) {     return compareOrder(date1,date2);   }   short c1, c2;   DateTimeData tempDate=new DateTimeData(null,this);   if (date1.utc == 'Z') {     cloneDate(date2,tempDate);     tempDate.timezoneHr=14;     tempDate.timezoneMin=0;     tempDate.utc='+';     normalize(tempDate);     c1=compareOrder(date1,tempDate);     if (c1 == LESS_THAN)     return c1;     cloneDate(date2,tempDate);     tempDate.timezoneHr=-14;     tempDate.timezoneMin=0;     tempDate.utc='-';     normalize(tempDate);     c2=compareOrder(date1,tempDate);     if (c2 == GREATER_THAN)     return c2;     return INDETERMINATE;   }  else   if (date2.utc == 'Z') {     cloneDate(date1,tempDate);     tempDate.timezoneHr=-14;     tempDate.timezoneMin=0;     tempDate.utc='-';     if (DEBUG) {       System.out.println(\"tempDate=\" + dateToString(tempDate));     }     normalize(tempDate);     c1=compareOrder(tempDate,date2);     if (DEBUG) {       System.out.println(\"date=\" + dateToString(date2));       System.out.println(\"tempDate=\" + dateToString(tempDate));     }     if (c1 == LESS_THAN)     return c1;     cloneDate(date1,tempDate);     tempDate.timezoneHr=14;     tempDate.timezoneMin=0;     tempDate.utc='+';     normalize(tempDate);     c2=compareOrder(tempDate,date2);     if (DEBUG) {       System.out.println(\"tempDate=\" + dateToString(tempDate));     }     if (c2 == GREATER_THAN)     return c2;     return INDETERMINATE;   }   return INDETERMINATE; } "
"public LockableFileWriter(File file) throws IOException {   this(file,false,null); } "
"private void decryptBlock(byte[] src,int srcIndex){   int xl=BytesTo32bits(src,srcIndex);   int xr=BytesTo32bits(src,srcIndex + 4);   xl^=P[ROUNDS + 1];   for (int i=ROUNDS; i > 0; i-=2) {     xr^=F(xl) ^ P[i];     xl^=F(xr) ^ P[i - 1];   }   xr^=P[0];   Bits32ToBytes(xr,src,srcIndex);   Bits32ToBytes(xl,src,srcIndex + 4); } "
"public TextPosition(String textString,Point position){   super();   this.textString=textString;   this.position=position; } "
"private ServletRegistration.Dynamic initSpring(ServletContext servletContext,AnnotationConfigWebApplicationContext rootContext){   log.debug(\"Configuring Spring Web application context\");   AnnotationConfigWebApplicationContext dispatcherServletConfiguration=new AnnotationConfigWebApplicationContext();   dispatcherServletConfiguration.setParent(rootContext);   dispatcherServletConfiguration.register(DispatcherServletConfiguration.class);   log.debug(\"Registering Spring MVC Servlet\");   ServletRegistration.Dynamic dispatcherServlet=servletContext.addServlet(\"dispatcher\",new DispatcherServlet(dispatcherServletConfiguration));   dispatcherServlet.addMapping(\"/service/*\");   dispatcherServlet.setLoadOnStartup(1);   dispatcherServlet.setAsyncSupported(true);   return dispatcherServlet; } "
"private void drawCircle(Canvas canvas,int index,Paint paint,float radius){   if (isIllegalIndex(index)) {     return;   }   int x=getXByIndex(index);   int y=getYByIndex(index);   float centreY=cellHeight + (y - 1) * cellHeight + cellHeight * 0.5f;   float centreX=cellWidth * (x - 1) + cellWidth * 0.5f;   canvas.drawCircle(centreX,centreY,radius,paint); } "
"public static boolean isSolaris(){   return (OS.indexOf(\"sunos\") >= 0); } "
"@Override public void onUpdateDataTag(final SourceDataTag sourceDataTag,final SourceDataTag oldSourceDataTag,final ChangeReport changeReport){   if (!sourceDataTag.getAddress().isStaticTimedeadband() && sourceDataTag.getAddress().getPriority() != oldSourceDataTag.getAddress().getPriority()) {     onRemoveDataTag(sourceDataTag,changeReport);     onAddDataTag(sourceDataTag,changeReport);   } } "
"public boolean gotoPrevious(){   currentIterator=null;   currentId=null;   return isCurrentSet(); } "
"public Suggester(){   this(0.80); } "
"public static IOCase forName(String name){   if (IOCase.SENSITIVE.name.equals(name)) {     return IOCase.SENSITIVE;   }   if (IOCase.INSENSITIVE.name.equals(name)) {     return IOCase.INSENSITIVE;   }   if (IOCase.SYSTEM.name.equals(name)) {     return IOCase.SYSTEM;   }   throw new IllegalArgumentException(\"Invalid IOCase name: \" + name); } "
"public boolean detectAdBlockers(){   return detectAdBlockers((Info)null); } "
"public static APIUser createAPIUser(){   return new APIUser(\"APIUser\" + internalId++); } "
"private void fillXMLAttributes2(Attributes2 att){   fAttributes.removeAllAttributes();   final int len=att.getLength();   for (int i=0; i < len; ++i) {     fillXMLAttribute(att,i);     fAttributes.setSpecified(i,att.isSpecified(i));     if (att.isDeclared(i)) {       fAttributes.getAugmentations(i).putItem(Constants.ATTRIBUTE_DECLARED,Boolean.TRUE);     }   } } "
"public void showContent(List<Integer> skipIds){   switchState(CONTENT,null,null,null,null,skipIds); } "
"public boolean isEmpty(){   return status == EMPTY; } "
"public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){   final HttpDelete delete=new HttpDelete(url);   return sendRequest(httpClient,httpContext,delete,null,responseHandler,context); } "
"private static void cleanDirectoryOnExit(File directory) throws IOException {   if (!directory.exists()) {     String message=directory + \" does not exist\";     throw new IllegalArgumentException(message);   }   if (!directory.isDirectory()) {     String message=directory + \" is not a directory\";     throw new IllegalArgumentException(message);   }   File[] files=directory.listFiles();   if (files == null) {     throw new IOException(\"Failed to list contents of \" + directory);   }   IOException exception=null;   for (  File file : files) {     try {       forceDeleteOnExit(file);     }  catch (    IOException ioe) {       exception=ioe;     }   }   if (null != exception) {     throw exception;   } } "
"public Builder position(String position){   this.position=position;   return this; } "
"protected void createStmt(polyglot.ast.Stmt stmt){   if (stmt instanceof polyglot.ast.Eval) {     base().createAggressiveExpr(((polyglot.ast.Eval)stmt).expr(),false,false);   }  else   if (stmt instanceof polyglot.ast.If) {     createIf2((polyglot.ast.If)stmt);   }  else   if (stmt instanceof polyglot.ast.LocalDecl) {     createLocalDecl((polyglot.ast.LocalDecl)stmt);   }  else   if (stmt instanceof polyglot.ast.Block) {     createBlock((polyglot.ast.Block)stmt);   }  else   if (stmt instanceof polyglot.ast.While) {     createWhile2((polyglot.ast.While)stmt);   }  else   if (stmt instanceof polyglot.ast.Do) {     createDo2((polyglot.ast.Do)stmt);   }  else   if (stmt instanceof polyglot.ast.For) {     createForLoop2((polyglot.ast.For)stmt);   }  else   if (stmt instanceof polyglot.ast.Switch) {     createSwitch((polyglot.ast.Switch)stmt);   }  else   if (stmt instanceof polyglot.ast.Return) {     createReturn((polyglot.ast.Return)stmt);   }  else   if (stmt instanceof polyglot.ast.Branch) {     createBranch((polyglot.ast.Branch)stmt);   }  else   if (stmt instanceof polyglot.ast.ConstructorCall) {     createConstructorCall((polyglot.ast.ConstructorCall)stmt);   }  else   if (stmt instanceof polyglot.ast.Empty) {   }  else   if (stmt instanceof polyglot.ast.Throw) {     createThrow((polyglot.ast.Throw)stmt);   }  else   if (stmt instanceof polyglot.ast.Try) {     createTry((polyglot.ast.Try)stmt);   }  else   if (stmt instanceof polyglot.ast.Labeled) {     createLabeled((polyglot.ast.Labeled)stmt);   }  else   if (stmt instanceof polyglot.ast.Synchronized) {     createSynchronized((polyglot.ast.Synchronized)stmt);   }  else   if (stmt instanceof polyglot.ast.Assert) {     createAssert((polyglot.ast.Assert)stmt);   }  else   if (stmt instanceof polyglot.ast.LocalClassDecl) {     createLocalClassDecl((polyglot.ast.LocalClassDecl)stmt);   }  else {     throw new RuntimeException(\"Unhandled Stmt: \" + stmt.getClass());   } } "
"public float distanceSquared(Vector2f v){   double dx=x - v.x;   double dy=y - v.y;   return (float)(dx * dx + dy * dy); } "
"public static ITextComponent handle(ITextComponent message,ICommandSender sender){   final MessageEvent.Chat event=new MessageEvent.Chat(message,sender,sender == null ? Side.CLIENT : Side.SERVER);   return OpenModLoader.getEventBus().post(event) ? event.getMessage() : null; } "
"public boolean closeDatabase(String dbfile){   if (databases.get(dbfile) != null) {     SQLiteDatabase db=(SQLiteDatabase)databases.get(dbfile);     db.close();     databases.remove(dbfile);     return true;   }   return false; } "
"public static String extractDefaultMajorVersionFromPackageName(String packageName){   String[] segs=packageName.split(\"\\\\.\");   String lastSeg=segs[segs.length - 1];   Matcher matcher=MAJOR_VERSION_REGEX_PATTERN.matcher(lastSeg);   if (matcher.find()) {     return matcher.group(1);   }  else {     return \"v1\";   } } "
"private static String buildMessage(final Locale locale,final Localizable specifier,final Object... parts){   return (specifier == null) ? \"\" : new MessageFormat(specifier.getLocalizedString(locale),locale).format(parts); } "
"public DefaultTable(){   this.values=new TraversableHashMap<>(); } "
"public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_SKIN_EXTRACTABLE_ITEM(String value0){   return new SM_SYSTEM_MESSAGE(1400283,value0); } "
"public static boolean instanceOf(Class<?> objectClass,Object typeObject){   Class<?> typeClass=typeObject.getClass();   return instanceOf(objectClass,typeClass); } "
"protected GroupsGetBannedQuery groupId(int value){   return unsafeParam(\"group_id\",value); } "
"public BoardGetCommentsQueryWithExtended needLikes(Boolean value){   return unsafeParam(\"need_likes\",value); } "
"public ZWaveConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,Value... args){   return newInterfaceInvokeExpr(base,method,Arrays.asList(args)); } "
"public void checkCallGraph(){   int[] limits=new int[]{1,2,4,8};   evalRes.total_call_edges=new Histogram(limits);   CallGraph cg=Scene.v().getCallGraph();   for (  Stmt callsite : ptsProvider.multiCallsites) {     Iterator<Edge> edges=cg.edgesOutOf(callsite);     if (!edges.hasNext())     continue;     evalRes.n_callsites++;     Edge anyEdge=edges.next();     SootMethod src=anyEdge.src();     if (!ptsProvider.isReachableMethod(src) || !ptsProvider.isValidMethod(src))     continue;     CgEdge p=ptsProvider.getInternalEdgeFromSootEdge(anyEdge);     LocalVarNode vn=(LocalVarNode)p.base_var;     int edge_cnt=1;     while (edges.hasNext()) {       ++edge_cnt;       edges.next();     }     evalRes.n_geom_call_edges+=edge_cnt;     if (edge_cnt == 1)     ++evalRes.n_geom_solved_all;     if (!src.isJavaLibraryMethod()) {       InvokeExpr ie=callsite.getInvokeExpr();       if (edge_cnt == 1) {         ++evalRes.n_geom_solved_app;         if (ptsProvider.getOpts().verbose()) {           outputer.println();           outputer.println(\"<<<<<<<<<   Additional Solved Call   >>>>>>>>>>\");           outputer.println(src.toString());           outputer.println(ie.toString());         }       }  else {         Histogram call_edges=new Histogram(limits);         test_1cfa_call_graph(vn,src,ie.getMethod(),call_edges);         evalRes.total_call_edges.merge(call_edges);         call_edges=null;       }       evalRes.n_geom_user_edges+=edge_cnt;       evalRes.n_user_callsites++;     }   }   ptsProvider.ps.println();   ptsProvider.ps.println(\"--------> Virtual Callsites Evaluation <---------\");   ptsProvider.ps.printf(\"Total virtual callsites (app code): %d (%d)\\n\",evalRes.n_callsites,evalRes.n_user_callsites);   ptsProvider.ps.printf(\"Total virtual call edges (app code): %d (%d)\\n\",evalRes.n_geom_call_edges,evalRes.n_geom_user_edges);   ptsProvider.ps.printf(\"Virtual callsites additionally solved by geomPTA compared to SPARK (app code) = %d (%d)\\n\",evalRes.n_geom_solved_all,evalRes.n_geom_solved_app);   evalRes.total_call_edges.printResult(ptsProvider.ps,\"Testing of unsolved callsites on 1-CFA call graph: \");   if (ptsProvider.getOpts().verbose())   ptsProvider.outputNotEvaluatedMethods(); } "
"private void updateRingColor(float interpolatedTime,Ring ring){   if (interpolatedTime > COLOR_START_DELAY_OFFSET) {     ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));   } } "
"protected void paintComponent(Graphics g){   super.paintComponent(g);   if (image == null) {     return;   }   if (scale == 0.0) {     initializeParams();   }   if (isHighQualityRendering()) {     Rectangle rect=getImageClipBounds();     if (rect == null || rect.width == 0 || rect.height == 0) {       return;     }     BufferedImage subimage=image.getSubimage(rect.x,rect.y,rect.width,rect.height);     Graphics2D g2=(Graphics2D)g;     g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,INTERPOLATION_TYPE);     g2.drawImage(subimage,Math.max(0,originX),Math.max(0,originY),Math.min((int)(subimage.getWidth() * scale),getWidth()),Math.min((int)(subimage.getHeight() * scale),getHeight()),null);   }  else {     g.drawImage(image,originX,originY,getScreenImageWidth(),getScreenImageHeight(),null);   }   if (isNavigationImageEnabled()) {     g.drawImage(navigationImage,0,0,getScreenNavImageWidth(),getScreenNavImageHeight(),null);     drawZoomAreaOutline(g);   } } "
"private boolean copyRawFile(int resID,String title,boolean setAsDefault){   if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))   return false;   File path=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_NOTIFICATIONS);   path.mkdirs();   String filename=mContext.getResources().getResourceEntryName(resID) + \".mp3\";   File outFile=new File(path,filename);   String mimeType=\"audio/mpeg\";   boolean isError=false;   InputStream inputStream=null;   FileOutputStream outputStream=null;   try {     inputStream=mContext.getResources().openRawResource(resID);     outputStream=new FileOutputStream(outFile);     byte[] buffer=new byte[1024];     int bytesRead;     while ((bytesRead=inputStream.read(buffer)) > 0) {       outputStream.write(buffer,0,bytesRead);     }     String outAbsPath=outFile.getAbsolutePath();     ContentValues contentValues=new ContentValues();     contentValues.put(MediaStore.MediaColumns.DATA,outAbsPath);     contentValues.put(MediaStore.MediaColumns.TITLE,title);     contentValues.put(MediaStore.MediaColumns.MIME_TYPE,mimeType);     contentValues.put(MediaStore.Audio.Media.IS_ALARM,false);     contentValues.put(MediaStore.Audio.Media.IS_NOTIFICATION,true);     contentValues.put(MediaStore.Audio.Media.IS_RINGTONE,false);     contentValues.put(MediaStore.Audio.Media.IS_MUSIC,false);     Uri contentUri=MediaStore.Audio.Media.getContentUriForPath(outAbsPath);     mContext.getContentResolver().delete(contentUri,MediaStore.MediaColumns.DATA + \"=\\\"\" + outAbsPath+ \"\\\"\",null);     Uri newUri=mContext.getContentResolver().insert(contentUri,contentValues);     MediaScannerConnection.scanFile(mContext,new String[]{newUri.toString()},new String[]{mimeType},null);     if (setAsDefault) {       SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);       SharedPreferences.Editor editor=sharedPrefs.edit();       editor.putString(PREF_KEY_RINGTONE_DEFAULT,newUri.toString());       if (sharedPrefs.getString(NOTIFICATION_SOUND,\"\").equals(mContext.getString(R.string.default_ringtone_path))) {         editor.putString(NOTIFICATION_SOUND,newUri.toString());       }       editor.apply();     }     Log.d(tag,\"Copied notification sound \" + title + \" to \"+ outAbsPath);     Log.d(tag,\"ID is \" + newUri.toString());   }  catch (  Exception e) {     Log.e(tag,\"Error writing \" + filename,e);     isError=true;   }  finally {     try {       if (inputStream != null)       inputStream.close();       if (outputStream != null)       outputStream.close();     }  catch (    IOException e) {     }   }   return !isError; } "
"public static int hashBytes(byte[] bytes,int length){   return hashBytes(bytes,0,length); } "
"@Override public double[] makeDensityTestValues(){   return new double[]{0,0,0,0,0.0594218160072,0.0436977691036,0.0508364857798,0.054873528325,0.0587182664085,0.0636229042785}; } "
"public boolean isEmpty(){   return dataMap.isEmpty(); } "
"public void fillLeafs(Node root,FeatureVector[] featureVectors){   if (leafType == LeafNode.LeafType.FeatureVectorLeafNode) {     rootNode=root;     Node currentNode=rootNode;     Node prevNode=null;     for (int i=0; i < featureVectors.length; i++) {       currentNode=rootNode;       prevNode=null;       FeatureVector featureVector=featureVectors[i];       while (!(currentNode instanceof LeafNode)) {         prevNode=currentNode;         currentNode=((DecisionNode)currentNode).getNextNode(featureVector);       }       ((LeafNode.FeatureVectorLeafNode)currentNode).addFeatureVector(featureVector);     }   }  else   throw new IllegalArgumentException(\"The leaves of this tree are not FeatureVectorLeafNode.\"); } "
"public EventBuilder minPriority(){   this.event.setPriority(Thread.MIN_PRIORITY);   return this; } "
"public boolean hasChild(String name){   for (  Node child : children) {     if (child.name.equals(name)) {       return true;     }   }   return false; } "
"private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){   if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {     VolleyLog.d(\"HTTP response for request=<%s> [lifetime=%d], [size=%s], \" + \"[rc=%d], [retryCount=%s]\",request,requestLifetime,responseContents != null ? responseContents.length : \"null\",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());   } } "
"public String requestServiceFromThirdPartyWebApp() throws Exception {   String url=ConsumerWebAppURL + \"?scope=\" + URLEncoder.encode(EndUserResourceURL,\"UTF-8\");   WebTarget target=ClientBuilder.newClient().target(url);   Response response=target.request().get();   response.close();   if (302 != response.getStatus()) {     throw new RuntimeException(\"Service request has failed - redirection is expected\");   }   String authorizationURI=response.getStringHeaders().getFirst(\"Location\");   if (authorizationURI == null) {     throw new RuntimeException(\"Token authorization URI is missing\");   }   return authorizationURI; } "
"public static FeatureProcessorManager determineBestFeatureProcessorManager(Voice voice){   FeatureProcessorManager mgr=getFeatureProcessorManager(voice);   if (mgr == null) {     mgr=determineBestFeatureProcessorManager(voice.getLocale());   }   return mgr; } "
"@SuppressWarnings(\"unchecked\") public static <K,V>Map<K,V> toMap(Object object){   if (object != null && !(object instanceof Map))   return null;   return (Map<K,V>)object; } "
"protected double homoscedasticT(final double m1,final double m2,final double v1,final double v2,final double n1,final double n2){   final double pooledVariance=((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);   return (m1 - m2) / FastMath.sqrt(pooledVariance * (1d / n1 + 1d / n2)); } "
"@Override public String toString(){   StringBuilder buffer=new StringBuilder();   buffer.append(super.toString());   buffer.append(\"(\");   if (fileFilters != null) {     for (int i=0; i < fileFilters.size(); i++) {       if (i > 0) {         buffer.append(\",\");       }       Object filter=fileFilters.get(i);       buffer.append(filter == null ? \"null\" : filter.toString());     }   }   buffer.append(\")\");   return buffer.toString(); } "
"public VideoRemoveFromAlbumQuery albumIds(Integer... value){   return unsafeParam(\"album_ids\",value); } "
"ExperimentStatistics calculateExperimentStatistics(final ExperimentCounts counts,BinomialMetric metric,double effectSize,Parameters.Mode mode){   ExperimentStatistics statistics=new ExperimentStatistics.Builder().withExperimentCounts(counts).withBuckets(calculateBucketStatistics(counts.getBuckets(),metric,effectSize,mode)).build();   analysisTools.generateRate(statistics,metric);   analysisTools.generateProgress(statistics);   return statistics; } "
"public EventPoller<E> newPoller(Sequence... gatingSequences){   return sequencer.newPoller(this,gatingSequences); } "
"@Override public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {   allowXMLCatalogPI=false;   super.unparsedEntityDecl(name,publicId,systemId,notationName); } "
"protected UsersGetNearbyQuery latitude(float value){   return unsafeParam(\"latitude\",value); } "
"public SnippetObject elem(Object object){   return new SnippetObject(object,myPath.elem(),mySnippets); } "
"public JSONArray put(int index,long value) throws JSONException {   put(index,new Long(value));   return this; } "
"public XIntArray(byte bits){   segments=new int[0][];   SEGMENT_BITS=bits;   SEGMENT_SIZE=(1 << (SEGMENT_BITS));   SEGMENT_MASK=SEGMENT_SIZE - 1; } "
"private static boolean isDebugEnabled(){   try {     String val=SecuritySupport.getSystemProperty(\"xerces.debug\");     return (val != null && (!\"false\".equals(val)));   }  catch (  SecurityException se) {   }   return false; } "
"public String provideNetworkType(){   return \"unknown\"; } "
"@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){   return new AssignmentUsingLCA(cName); } "
"public static List<Writable> sampleInvalidFromColumn(int numToSample,String columnName,Schema schema,JavaRDD<List<Writable>> data,boolean ignoreMissing){   int colIdx=schema.getIndexOfColumn(columnName);   JavaRDD<Writable> ithColumn=data.map(new SelectColumnFunction(colIdx));   ColumnMetaData meta=schema.getMetaData(columnName);   JavaRDD<Writable> invalid=ithColumn.filter(new FilterWritablesBySchemaFunction(meta,false,ignoreMissing));   return invalid.takeSample(false,numToSample); } "
"public void closeSharedIterator(){   _sharedObjectListLock.writeLock().lock();   try {     _numberOfConsumers--;     if (_closed)     return;     if (_sourceIteratorExhausted || _numberOfConsumers == 0) {       if (_logger.isLoggable(Level.FINEST))       _logger.finest(\"closed shared iterator source [\" + _identifier + \"]\");       triggerClosedEvent();       if (_sourceDataIterator != null) {         _sharedObjectListLock.writeLock().lock();         try {           _sourceDataIterator.close();         }   finally {           _sharedObjectListLock.writeLock().unlock();         }       }       _closed=true;     }   }   finally {     _sharedObjectListLock.writeLock().unlock();   } } "
"public Polygon2D(Rectangle2D rec){   if (rec == null) {     throw new IndexOutOfBoundsException(\"null Rectangle\");   }   npoints=4;   xpoints=new float[4];   ypoints=new float[4];   xpoints[0]=(float)rec.getMinX();   ypoints[0]=(float)rec.getMinY();   xpoints[1]=(float)rec.getMaxX();   ypoints[1]=(float)rec.getMinY();   xpoints[2]=(float)rec.getMaxX();   ypoints[2]=(float)rec.getMaxY();   xpoints[3]=(float)rec.getMinX();   ypoints[3]=(float)rec.getMaxY();   calculatePath(); } "
"public boolean isDrawLabelsEnabled(){   return mDrawLabels; } "
"private ISVNLocalResource[] processResources(IResourceDelta[] resources) throws CoreException {   List<ISVNLocalResource> revertedResources=new ArrayList<ISVNLocalResource>();   for (  IResourceDelta resourceDelta : resources) {     IResource resource=resourceDelta.getResource();     if (resource.getType() == IResource.FILE) {       ISVNLocalFile res=SVNWorkspaceRoot.getSVNFileFor((IFile)resource);       if (res.getFile().exists()) {         boolean deleted;         if (resourceDelta.getKind() == IResourceDelta.ADDED)         deleted=res.getStatusFromCache().isDeleted();  else {           deleted=SVNMoveDeleteHook.isDeleted((IFile)resource);           if (deleted)           SVNMoveDeleteHook.removeFromDeletedFileList((IFile)resource);         }         if (deleted) {           revertedResources.add(res);         }         ISVNLocalFolder parentFolder=res.getParent();         while (parentFolder != null) {           if (parentFolder.getStatusFromCache().isDeleted() && !parentFolder.getResource().exists() && !revertedResources.contains(parentFolder)) {             revertedResources.add(parentFolder);           }  else {             break;           }           if (parentFolder.getParent() == null) {             break;           }           parentFolder=parentFolder.getParent();         }       }     }   }   return (ISVNLocalResource[])revertedResources.toArray(new ISVNLocalResource[revertedResources.size()]); } "
"public void addSequence(String name,String text,String toolTip,String unalignedPrefix,int leadingGaps,String block,int trailingGaps,String unalignedSuffix){   lanes.add(new Lane(this,name,text,toolTip,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix)); } "
"public boolean hasNext() throws IOException {   return thriftReader.hasNext(); } "
"public static void buildPositionStats(JsonObject json,EntityPlayerMP player){   json.addProperty(\"XPos\",player.posX);   json.addProperty(\"YPos\",player.posY);   json.addProperty(\"ZPos\",player.posZ);   json.addProperty(\"Pitch\",player.rotationPitch);   json.addProperty(\"Yaw\",player.rotationYaw); } "
"public AbstractSequencer(int bufferSize,WaitStrategy waitStrategy){   if (bufferSize < 1) {     throw new IllegalArgumentException(\"bufferSize must not be less than 1\");   }   if (Integer.bitCount(bufferSize) != 1) {     throw new IllegalArgumentException(\"bufferSize must be a power of 2\");   }   this.bufferSize=bufferSize;   this.waitStrategy=waitStrategy; } "
"public void revertToDefaultValue(){   List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);   for (  FieldConfigBase field : fieldList) {     if (field != null) {       field.revertToDefaultValue();     }   } } "
"public static String toString(byte[] input,String encoding) throws IOException {   return new String(input,encoding); } "
"public NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){   super(symbolTable,parentSettings);   final String[] recognizedFeatures={PARSER_SETTINGS,NAMESPACES,CONTINUE_AFTER_FATAL_ERROR};   addRecognizedFeatures(recognizedFeatures);   fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);   fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);   fFeatures.put(NAMESPACES,Boolean.TRUE);   final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,LOCALE};   addRecognizedProperties(recognizedProperties);   fGrammarPool=grammarPool;   if (fGrammarPool != null) {     fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);   }   fEntityManager=createEntityManager();   fProperties.put(ENTITY_MANAGER,fEntityManager);   addComponent(fEntityManager);   fErrorReporter=createErrorReporter();   fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());   fProperties.put(ERROR_REPORTER,fErrorReporter);   addComponent(fErrorReporter);   fDTDScanner=createDTDScanner();   if (fDTDScanner != null) {     fProperties.put(DTD_SCANNER,fDTDScanner);     if (fDTDScanner instanceof XMLComponent) {       addComponent((XMLComponent)fDTDScanner);     }   }   fDatatypeValidatorFactory=createDatatypeValidatorFactory();   if (fDatatypeValidatorFactory != null) {     fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);   }   fValidationManager=createValidationManager();   if (fValidationManager != null) {     fProperties.put(VALIDATION_MANAGER,fValidationManager);   }   if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {     XMLMessageFormatter xmft=new XMLMessageFormatter();     fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);     fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);   }   fConfigUpdated=false;   try {     setLocale(Locale.getDefault());   }  catch (  XNIException e) {   } } "
"public boolean intersectsSphere(BoundingSphere bs){   return ((FastMath.abs(center.x - bs.center.x) < bs.getRadius() + xExtent) && (FastMath.abs(center.y - bs.center.y) < bs.getRadius() + yExtent) && (FastMath.abs(center.z - bs.center.z) < bs.getRadius() + zExtent)); } "
"private void calcAngles(){   int entryCount=mData.getEntryCount();   if (mDrawAngles.length != entryCount) {     mDrawAngles=new float[entryCount];   }  else {     for (int i=0; i < entryCount; i++) {       mDrawAngles[i]=0;     }   }   if (mAbsoluteAngles.length != entryCount) {     mAbsoluteAngles=new float[entryCount];   }  else {     for (int i=0; i < entryCount; i++) {       mAbsoluteAngles[i]=0;     }   }   float yValueSum=mData.getYValueSum();   List<IPieDataSet> dataSets=mData.getDataSets();   int cnt=0;   for (int i=0; i < mData.getDataSetCount(); i++) {     IPieDataSet set=dataSets.get(i);     for (int j=0; j < set.getEntryCount(); j++) {       mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getY()),yValueSum);       if (cnt == 0) {         mAbsoluteAngles[cnt]=mDrawAngles[cnt];       }  else {         mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];       }       cnt++;     }   } } "
"@Override public int[] makeCumulativeTestPoints(){   return makeDensityTestPoints(); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public MulExpr fullCopy(){   MulExpr tree=(MulExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public boolean gotoNext(){   if (currentIterator == null) {     gotoFirst();   }  else   if (currentIterator.hasNext())   currentId=currentIterator.next();  else {     currentIterator=null;     currentId=null;   }   return isCurrentSet(); } "
"public List<SootMethod> all(){   List<SootMethod> ret=new ArrayList<SootMethod>();   ret.addAll(application());   ret.addAll(implicit());   return ret; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_EXCEED_MAX_ITEM_COUNT(int num0){   return new SM_SYSTEM_MESSAGE(1300760,num0); } "
"public String toString(){   return path.toString(); } "
"public static <T>String join(List<T> list,String separator,T nullReplacement){   if (list == null) {     return null;   }   List<T> objects=new ArrayList<>(list);   if (nullReplacement != null) {     Collections.replaceAll(objects,null,nullReplacement);   }   return StringUtils.join(objects,separator); } "
"@SuppressWarnings(\"unchecked\") public static <R>JoinObservable<R> when(Plan<R> p1){   return from(JoinPatterns.when(p1)); } "
"public void transformValues(TObjectFunction<V,V> function){   byte[] states=_states;   V[] values=_values;   for (int i=values.length; i-- > 0; ) {     if (states[i] == FULL) {       values[i]=function.execute(values[i]);     }   } } "
"public boolean supportsCommandClass(CommandClass commandClass){   return supportedCommandClasses.containsKey(commandClass); } "
"public static boolean isValidJavaEncoding(String javaEncoding){   if (javaEncoding != null) {     int length=javaEncoding.length();     if (length > 0) {       for (int i=1; i < length; i++) {         char c=javaEncoding.charAt(i);         if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {           return false;         }       }       return true;     }   }   return false; } "
"public CategoryPhotosView(Context context){   super(context);   this.initialize(); } "
"public static Optional<DateTime> firstMoment(Collection<? extends Collection<Interval>> intervalSets){   return intervalSets.stream().flatMap(null).map(null).reduce(null); } "
"public Disruptor(final EventFactory<T> eventFactory,final int ringBufferSize,final ThreadFactory threadFactory,final ProducerType producerType,final WaitStrategy waitStrategy){   this(RingBuffer.create(producerType,eventFactory,ringBufferSize,waitStrategy),new BasicExecutor(threadFactory)); } "
"public XSNamedMap4Types(String namespace,SymbolHash map,short type){   super(namespace,map);   fType=type; } "
"protected static boolean startsWith(String string,String tag){   return string.startsWith(tag) || (tag.contains(\" \") && string.startsWith(tag.replaceAll(\" \",\"\"))); } "
"public StatelessHibernateSpaceSynchronizationEndpointConfigurer sessionFactory(SessionFactory sessionFactory){   this.sessionFactory=sessionFactory;   return this; } "
"public static List<JsonNode> listToJson(Collection<? extends IJsonable> collection){   List<JsonNode> jsonList=new LinkedList<>();   for (  IJsonable item : collection) {     jsonList.add(item.jsonize());   }   return jsonList; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public RShiftExpr fullCopy(){   RShiftExpr tree=(RShiftExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"@Scheduled(fixedDelay=1000) public void updateStatisticsForAllReposiotries(){   for (  Long repositoryId : statisticsScheduleRepository.findRepositoryIds()) {     updateRepositoryStatistics(repositoryId);   } } "
"public long count(){   MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();   ComputerResult result=computer.compute(new CountMapReduce(subtypes));   Map<String,Long> count=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);   return count.getOrDefault(CountMapReduce.MEMORY_KEY,0L); } "
"@Override public Settings init(String tag){   if (tag == null) {     throw new NullPointerException(\"tag may not be null\");   }   if (tag.trim().length() == 0) {     throw new IllegalStateException(\"tag may not be empty\");   }   this.tag=tag;   this.settings=new Settings();   return settings; } "
"private void notifySubEquipmentTags(final Long subEquipmentId){   try {     Map<Long,Boolean> notifiedRules=new HashMap<Long,Boolean>();     Collection<Long> tagIds=subEquipmentFacade.getDataTagIds(subEquipmentId);     for (    Long id : tagIds) {       try {         callCacheNotification(id,notifiedRules);       }  catch (      CacheElementNotFoundException cacheEx) {         LOGGER.warn(\"Unable to locate Tag/Rule cache element during Tag supervision \" + \"change callback (some Tags/Rules may have been omitted)\",cacheEx);       }     }   }  catch (  CacheElementNotFoundException cacheEx) {     LOGGER.warn(\"Unable to locate SubEquipment element during Tag supervision \" + \"change callback (so no invalidation callbacks performed for associated Tags)\",cacheEx);   } } "
"int positionOfBookmarkId(BookmarkId id){   return positionOfItem(new Item(id)); } "
"public MessagesRestoreQuery(VkApiClient client,Actor actor,int messageId){   super(client,\"messages.restore\",OkResponse.class);   accessToken(actor.getAccessToken());   messageId(messageId); } "
"public LsClientPacket handle(ByteBuffer data,LoginServerConnection client){   State state=client.getState();   int id=data.get() & 0xff;   return getPacket(state,id,data,client); } "
"public static boolean isExternalMemoryAvailable(){   return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED); } "
"public byte[] crypt(byte[] data){   int remaining=data.length;   int llength=0x5B0;   int start=0;   try {     while (remaining > 0) {       byte[] myIv=BitTools.multiplyBytes(this.iv,4,4);       if (remaining < llength) {         llength=remaining;       }       for (int x=start; x < (start + llength); x++) {         if ((x - start) % myIv.length == 0) {           byte[] newIv=cipher.doFinal(myIv);           System.arraycopy(newIv,0,myIv,0,myIv.length);         }         data[x]^=myIv[(x - start) % myIv.length];       }       start+=llength;       remaining-=llength;       llength=0x5B4;     }     updateIv();   }  catch (  IllegalBlockSizeException|BadPaddingException e) {   }   return data; } "
"public void init$Children(){   children=new ASTNode[2];   setChild(new List(),0);   setChild(new List(),1); } "
"public boolean hasSuperClassAccess(){   return getSuperClassAccessOpt().getNumChild() != 0; } "
"@Override public boolean isElementContentWhitespace(){   if (needsSyncData()) {     synchronizeData();   }   return internalIsIgnorableWhitespace(); } "
"void scale(double s){   Matrix3D tmp=new Matrix3D();   tmp.set(0,0,s);   tmp.set(1,1,s);   tmp.set(2,2,s);   preMultiply(tmp); } "
"final public void put(String name,Object o){   if (context == null) {     context=new HashMap<String,Object>();   }   if (name == null) {     return;   }   if (o == null) {     context.remove(name);   }  else {     context.put(name,o);   }   return; } "
"private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {   boolean upperShift=false;   int[] cValues=new int[3];   int shift=0;   do {     if (bits.available() == 8) {       return;     }     int firstByte=bits.readBits(8);     if (firstByte == 254) {       return;     }     parseTwoBytes(firstByte,bits.readBits(8),cValues);     for (int i=0; i < 3; i++) {       int cValue=cValues[i]; switch (shift) { case 0:         if (cValue < 3) {           shift=cValue + 1;         }  else         if (cValue < TEXT_BASIC_SET_CHARS.length) {           char textChar=TEXT_BASIC_SET_CHARS[cValue];           if (upperShift) {             result.append((char)(textChar + 128));             upperShift=false;           }  else {             result.append(textChar);           }         }  else {           throw FormatException.getFormatInstance();         }       break; case 1:     if (upperShift) {       result.append((char)(cValue + 128));       upperShift=false;     }  else {       result.append((char)cValue);     }   shift=0; break; case 2: if (cValue < TEXT_SHIFT2_SET_CHARS.length) { char textChar=TEXT_SHIFT2_SET_CHARS[cValue]; if (upperShift) {   result.append((char)(textChar + 128));   upperShift=false; }  else {   result.append(textChar); } }  else if (cValue == 27) { result.append((char)29); }  else if (cValue == 30) { upperShift=true; }  else { throw FormatException.getFormatInstance(); } shift=0; break; case 3: if (cValue < TEXT_SHIFT3_SET_CHARS.length) { char textChar=TEXT_SHIFT3_SET_CHARS[cValue]; if (upperShift) { result.append((char)(textChar + 128)); upperShift=false; }  else { result.append(textChar); } shift=0; }  else { throw FormatException.getFormatInstance(); } break; default : throw FormatException.getFormatInstance(); } } }  while (bits.available() > 0); } "
"private Document sendRESTRequestToASE(final String relativeURL,final String postData) throws ParserConfigurationException, IOException, SAXException {   LOGGER.debug(\"Inside sendRESTRequestToASE..relativeURL=\" + relativeURL);   LOGGER.debug(\"Inside sendRESTRequestToASE..AppScanUtils.isNotNull(postData)=\" + AppScanUtils.isNotNull(postData));   final DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();   domFactory.setNamespaceAware(true);   final DocumentBuilder builder=domFactory.newDocumentBuilder();   URL url=null;   if (!relativeURL.contains(RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_APP_SCAN_SERVER_NAME_IDENTIFIER))) {     url=new URL(AppScanConstants.APPSCAN_BASE_URL + relativeURL);   }  else {     url=new URL(relativeURL);   }   LOGGER.debug(\"Inside sendRESTRequestToASE..url=\" + url);   HttpURLConnection httpURLConnection=(HttpURLConnection)url.openConnection();   httpURLConnection.setDoInput(true);   httpURLConnection.addRequestProperty(HTTP.CONTENT_TYPE,MediaType.APPLICATION_FORM_URLENCODED_VALUE);   LOGGER.debug(\"Inside sendRESTRequestToASE..cookieContainer=\" + cookieContainer);   if (cookieContainer.length() > 0) {     httpURLConnection.setRequestProperty(\"Cookie\",cookieContainer);   }   if (AppScanUtils.isNotNull(postData)) {     OutputStreamWriter outputStreamWriter=null;     try {       httpURLConnection.setRequestMethod(\"POST\");       httpURLConnection.setDoOutput(true);       final OutputStream outputStream=httpURLConnection.getOutputStream();       outputStreamWriter=new OutputStreamWriter(outputStream);       outputStreamWriter.write(postData);       outputStreamWriter.flush();     }   finally {       if (outputStreamWriter != null) {         outputStreamWriter.close();       }     }   }   LOGGER.debug(\"Inside sendRESTRequestToASE..1=\");   try {     LOGGER.debug(\"Inside sendRESTRequestToASE..1.1...httpURLConnection.getResponseCode()=\" + httpURLConnection.getResponseCode());     return builder.parse(new InputSource(httpURLConnection.getInputStream()));   }  catch (  SAXException saxException) {     LOGGER.debug(\"Inside sendRESTRequestToASE..2=\");     LOGGER.error(saxException);   } catch (  IOException ioException) {     LOGGER.debug(\"Inside sendRESTRequestToASE..3=\");     ioException.printStackTrace();     LOGGER.error(ioException);     if (httpURLConnection.getResponseCode() == 401) {       throw ioException;     }     return builder.parse(new InputSource(httpURLConnection.getErrorStream()));   }  finally {     LOGGER.debug(\"Inside sendRESTRequestToASE..4=\");     Map<String,List<String>> responseHeaders=httpURLConnection.getHeaderFields();     List<String> cookies=responseHeaders.get(\"Set-Cookie\");     if (cookies != null && cookies.size() > 0) {       for (      String cookie : cookies) {         LOGGER.debug(\"Inside sendRESTRequestToASE..cookie=\" + cookie);         if (cookieContainer.length() > 0)         cookieContainer+=\", \";         cookieContainer+=cookie;       }     }     httpURLConnection.disconnect();     LOGGER.debug(\"Inside sendRESTRequestToASE..cookie=\" + cookieContainer);   }   return null; } "
"public ConversationFactory withInitialSessionData(Map<Object,Object> initialSessionData){   this.initialSessionData=initialSessionData;   return this; } "
"@Override public boolean parseParameters(Object params){   if (params == null || !(params instanceof RewardForStructureCopying))   return false;   this.rscparams=(RewardForStructureCopying)params;   this.rewardDensity=rscparams.getRewardDensity();   this.dimension=rscparams.getDimension();   return true; } "
"protected WallGetByIdQueryWithExtended posts(List<String> value){   return unsafeParam(\"posts\",value); } "
"@Override public int hashCode(){   return fDomain.hashCode() + fKey.hashCode(); } "
"RemoteConnectionImpl() throws RemoteException {   super(); } "
"protected void overwriteBNodeEntries(List<BEntry> entries){   byte[] zeros=new byte[bitMapSize];   setBitMap(zeros);   if (entries.size() > numEntries) {     throw new BPlusTreeException(\"too many BEntry given to fit on page\");   }   for (int i=0; i < entries.size(); i++) {     writeEntry(i,entries.get(i));   } } "
"private static S2Point faceSiTiToXYZ(int face,int si,int ti){   final double kScale=1.0 / MAX_SIZE;   double u=S2Projections.stToUV(kScale * si);   double v=S2Projections.stToUV(kScale * ti);   return S2Projections.faceUvToXyz(face,u,v); } "
"protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){   String jobName=clazz.getName();   String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();   JobDetail job=new JobDetail(jobName,jobGroup,clazz);   job.setDurability(false);   job.setVolatility(true);   job.setDescription(jobName);   try {     CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);     if (scheduler == null) {       if (schedulerProperties == null) {         schedulerProperties=getDefaultSchedulerProperties();       }       scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();       scheduler.start();     }     Date date=scheduler.scheduleJob(job,trigger);     Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);   }  catch (  ParseException e) {     Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);     throw new IllegalArgumentException(e);   } catch (  SchedulerException e) {     Logger.error(this,\"Unable to schedule job \" + jobName,e);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_A_TO_B(String skilltarget,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200989,skilltarget,skillcaster,skillname); } "
"private static void addClassFilePath(String classPath,Set<String> patternList){   if (classPath != null && classPath.length() > 0) {     if (classPath.endsWith(CLASS_SUFFIX)) {       classPath=classPath.substring(0,classPath.length() - CLASS_SUFFIX.length()).replace('.','/') + CLASS_SUFFIX;     }  else {       classPath=classPath.replace('.','/');     }     patternList.add(classPath);   } } "
"static IBlockState applyFacing(IBlockState state,Facing facing){   for (  IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {     if (prop.getName().equals(\"facing\")) {       if (prop.getValueClass() == EnumFacing.class) {         EnumFacing current=(EnumFacing)state.getValue(prop);         if (!current.getName().equalsIgnoreCase(facing.name())) {           return state.withProperty(prop,EnumFacing.valueOf(facing.name()));         }       }  else       if (prop.getValueClass() == EnumOrientation.class) {         EnumOrientation current=(EnumOrientation)state.getValue(prop);         if (!current.getName().equalsIgnoreCase(facing.name())) {           return state.withProperty(prop,EnumOrientation.valueOf(facing.name()));         }       }     }   }   return state; } "
"private int[] hashes(InputStream input) throws IOException {   try {     return ByteStreams.readBytes(input,new HashingByteProcessor());   }   finally {     input.close();   } } "
"public void removeSwipeListener(SwipeListener listener){   if (mListeners == null) {     return;   }   mListeners.remove(listener); } "
"private static String timeApprox(int hour,int min){   int mm;   mm=min % 5;   if ((mm == 0) || (mm == 4)) {     return \"exactly\";   }  else   if (mm == 1) {     return \"just after\";   }  else   if (mm == 2) {     return \"a little after\";   }  else {     return \"almost\";   } } "
"private static void printUsage(){   System.err.println(\"Syntax:\\nsummaryEvaluator [-summaryDir=summaries/] [-modelDir=models/]\" + \"[-nMin=#] [-nMax=#] [-dist=#] [-t=#]\" + \"[-s] [-use=o|d] [-progress] [-docClass=...] [-compClass=...]\");   System.err.println(\"nMin=#\\tMin n-gram size.\\nnMax=#\\tMax n-gram size.\\n\" + \"dist=#\\tN-gram window.\\n\" + \"-o=outFile\\tThe file to output data. Default is stdout.\\n\"+ \"-t=#\\tNumber of threads. Defaults to number of available processors declared by system.\\n\"+ \"-s\\tFor non-verbose output (silent).\\n\"+ \"-progress\\tFor progress indication (even in silent mode).\\n\"+ \"-docClass=...\\tA java class identifier to use as Document class. \"+ \"Defaults to jinsect.documentModel.NGramDocument \\n\"+ \"-compClass=...\\tA java class identifier to use as Comparator class. \"+ \"Defaults to jinsect.documentModel.StandardDocumentComparator \\n\"+ \"-?\\tShow this screen.\"); } "
"public static void showNodeInTree(URL url,boolean allowFiles){   getTreePath(url,allowFiles,true); } "
"@Deployment public void testTaskVariableEventsWithinProcess() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"variableProcess\");   assertNotNull(processInstance);   Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();   assertNotNull(task);   assertEquals(3,listener.getEventsReceived().size());   ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);   assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertEquals(task.getId(),event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(123,event.getVariableValue());   event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);   assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertEquals(task.getId(),event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(456,event.getVariableValue());   event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);   assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());   assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());   assertEquals(processInstance.getId(),event.getProcessInstanceId());   assertEquals(task.getId(),event.getTaskId());   assertEquals(\"variable\",event.getVariableName());   assertEquals(null,event.getVariableValue()); } "
"@Override public String toString(){   return super.toString() + \"[caseSensitivity=\" + caseSensitivity+ \"]\"; } "
"private String genGetColumnMethod(Field field){   return genGetColumnMethod(field.getType()); } "
"public void loadFromFile(String sFilename){   try {     ByteArrayOutputStream bsOut=new ByteArrayOutputStream();     FileInputStream fiIn=new FileInputStream(sFilename);     int iData=0;     while ((iData=fiIn.read()) > -1)     bsOut.write(iData);     String sDataString=bsOut.toString();     setDataString(sDataString);   }  catch (  IOException ioe) {     ioe.printStackTrace();     setDataString(\"\");   } } "
"public void addSoundEvent(State event,int resId){   mSoundMap.put(event,resId); } "
"public void addACL(Collection<String> listIPs,int from,int to){   AmazonEC2 client=null;   try {     client=getEc2Client();     List<IpPermission> ipPermissions=new ArrayList<IpPermission>();     ipPermissions.add(new IpPermission().withFromPort(from).withIpProtocol(\"tcp\").withIpRanges(listIPs).withToPort(to));     if (this.insEnvIdentity.isClassic()) {       client.authorizeSecurityGroupIngress(new AuthorizeSecurityGroupIngressRequest(config.getACLGroupName(),ipPermissions));       logger.info(\"Done adding ACL to classic: \" + StringUtils.join(listIPs,\",\"));     }  else {       AuthorizeSecurityGroupIngressRequest sgIngressRequest=new AuthorizeSecurityGroupIngressRequest();       sgIngressRequest.withGroupId(getVpcGroupId());       client.authorizeSecurityGroupIngress(sgIngressRequest.withIpPermissions(ipPermissions));       logger.info(\"Done adding ACL to vpc: \" + StringUtils.join(listIPs,\",\"));     }   }   finally {     if (client != null)     client.shutdown();   } } "
"public void collapse(TreePath[] paths){   for (  TreePath path : paths) {     collapse((DefaultMutableTreeNode)path.getLastPathComponent());   } } "
"public GroupsSearchQuery type(String value){   return unsafeParam(\"type\",value); } "
"public LogControllerTest(){   testLines=new String[numOfLines];   for (int i=0; i < numOfLines; i++) {     testLines[i]=\"Test Line \" + i;   } } "
"private void removeDuplicateDrawables(FileHandle handle){   boolean refreshDrawables=false;   String name=DrawableData.proper(handle.name());   for (int i=0; i < AtlasData.getInstance().getDrawables().size; i++) {     DrawableData data=AtlasData.getInstance().getDrawables().get(i);     if (name.equals(DrawableData.proper(data.file.name()))) {       AtlasData.getInstance().getDrawables().removeValue(data,true);       for (      Array<StyleData> datas : JsonData.getInstance().getClassStyleMap().values()) {         for (        StyleData tempData : datas) {           for (          StyleProperty prop : tempData.properties.values()) {             if (prop != null && prop.type.equals(Drawable.class) && prop.value != null && prop.value.equals(data.toString())) {               prop.value=null;             }           }         }       }       refreshDrawables=true;       i--;     }   }   PanelStyleProperties.instance.populate(PanelClassBar.instance.getStyleSelectBox().getSelected());   PanelPreviewProperties.instance.render();   if (refreshDrawables) {     gatherDrawables();   } } "
"public void addModule(Module module){   module.setupModule(new ModuleContextImpl());   modules.add(module); } "
"public static boolean verifyDexFileMd5(File file,String md5){   if (file == null || md5 == null) {     return false;   }   String fileMd5;   if (isRawDexFile(file.getName())) {     fileMd5=getMD5(file);   }  else {     ZipFile dexJar=null;     try {       dexJar=new ZipFile(file);       ZipEntry classesDex=dexJar.getEntry(ShareConstants.DEX_IN_JAR);       if (null == classesDex) {         return false;       }       fileMd5=getMD5(dexJar.getInputStream(classesDex));     }  catch (    IOException e) {       return false;     }  finally {       SharePatchFileUtil.closeZip(dexJar);     }   }   return md5.equals(fileMd5); } "
"private boolean tinkerFastCrashProtect(){   ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();   if (applicationLike == null || applicationLike.getApplication() == null) {     return false;   }   if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {     return false;   }   final long elapsedTime=SystemClock.elapsedRealtime() - applicationLike.getApplicationStartElapsedTime();   if (elapsedTime < QUICK_CRASH_ELAPSE) {     String currentVersion=TinkerApplicationHelper.getCurrentVersion(applicationLike);     if (ShareTinkerInternals.isNullOrNil(currentVersion)) {       return false;     }     SharedPreferences sp=applicationLike.getApplication().getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);     int fastCrashCount=sp.getInt(currentVersion,0);     if (fastCrashCount >= MAX_CRASH_COUNT) {       SampleTinkerReport.onFastCrashProtect();       TinkerApplicationHelper.cleanPatch(applicationLike);       TinkerLog.e(TAG,\"tinker has fast crash more than %d, we just clean patch!\",fastCrashCount);       return true;     }  else {       sp.edit().putInt(currentVersion,++fastCrashCount).commit();       TinkerLog.e(TAG,\"tinker has fast crash %d times\",fastCrashCount);     }   }   return false; } "
"@CheckReturnValue public AddCmd all(){   Preconditions.checkState(Iterables.isEmpty(files),\"'all' and passing files is incompatible\");   return new AddCmd(force,true,files); } "
"public Z Div(Z a,double b) throws JampackException {   if (b == 0) {     throw new JampackException(\"Divide by zero.\");   }   re=a.re / b;   im=a.im / b;   return this; } "
"public DynamicTemplateParameterContext addParameter(String paramName,String paramValue){   return addParameter(paramName,paramValue,ContextInfo.EMPTY); } "
"public XMLTokener(String s){   super(s); } "
"public static void stopBroker() throws Exception {   broker.stop(); } "
"public void revertData(){   for (  ScaleSLDData data : scaleList) {     data.revertToOriginal();   }   this.fireTableDataChanged(); } "
"public static synchronized void init(Configuration conf){   String server=conf.getString(\"cache.url\",X.EMPTY);   if (server.startsWith(MEMCACHED)) {     cacheSystem=MemCache.create(conf);   }  else   if (server.startsWith(REDIS)) {     cacheSystem=RedisCache.create(conf);   }  else {     log.debug(\"not configured cache system, using file cache!\");     cacheSystem=FileCache.create(conf);   }   GROUP=conf.getString(\"cache.group\",\"demo\") + \"://\"; } "
"public String toString(){   return getClass().getName() + \"[\" + lease+ \"]\"; } "
"public void addProperty(String key,String value){   carbonProperties.setProperty(key,value); } "
"private void notifyDataSourceLoaded(){   List<DataSourceUpdatedInterface> copyListenerList=new ArrayList<DataSourceUpdatedInterface>(listenerList);   for (  DataSourceUpdatedInterface listener : copyListenerList) {     listener.dataSourceLoaded(getGeometryType(),this.connectedToDataSourceFlag);   } } "
"void showSecurityButton(){   if (mSecurityButton.getVisibility() == View.VISIBLE)   return;   if (mSecurityButtonShowAnimator.isRunning())   mSecurityButtonShowAnimator.cancel();   mSecurityButtonShowAnimator.start(); } "
"private void writeFlowPolicy(Document document,Element rootElement){   Element flowPolicy=document.createElement(\"flowpolicy\");   rootElement.appendChild(flowPolicy);   for (  FlowPair pair : this.document.getFlowPolicy())   writeFlowPair(pair,document,flowPolicy); } "
"private final void swap(int i,int j){   int tmp=_data[i];   _data[i]=_data[j];   _data[j]=tmp; } "
"public boolean isFilterLogTypeEnabled(int type){   return (logDisabledTypesMask & getMask(type)) == 0; } "
"@Override public String uid(){   String ruid=UUID.randomUUID().toString();   int n=ruid.length();   return \"cmmModel\" + \"_\" + ruid.substring(n - 12,n); } "
"public static boolean isHour(String s){   if (isEmpty(s))   return defaultEmptyOK;   return isIntegerInRange(s,0,23); } "
"public void initGui(){   this.buttonList.clear();   this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,\"Reset To Defaults\"));   this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,\"Done\"));   VRSettings.VrOptions[] buttons=locomotionSettings;   addButtons(buttons,0);   GuiSmallButtonEx mode=new GuiSmallButtonEx(VRSettings.VrOptions.MOVE_MODE.returnEnumOrdinal(),this.width / 2 - 68,this.height / 6 + 102,VRSettings.VrOptions.MOVE_MODE,this.guivrSettings.getKeyBinding(VRSettings.VrOptions.MOVE_MODE));   mode.setEventHandler(this);   this.buttonList.add(mode);   if (mc.vrSettings.vrFreeMove)   addButtons(freeMoveSettings,134);  else   addButtons(teleportSettings,134); } "
"public Sum(){   n=0;   value=0; } "
"public FileOutputStream createOutputFile(String file_name) throws FileNotFoundException {   return new FileOutputStream(new File(dump_dir,file_name)); } "
"private float computeAcceleratingDuration(float targetProgress,float frameTimeSec){   if (targetProgress == 1.0f) {     return frameTimeSec;   }  else {     float maxAcceleratingDuration=CONSTANT_1 * mVelocity + (float)Math.sqrt(CONSTANT_2 * (targetProgress - mProgress) + CONSTANT_3 * mVelocity * mVelocity);     return Math.max(0,Math.min(frameTimeSec,maxAcceleratingDuration));   } } "
"public UnknownTransactionException(){   super(); } "
"@Override public Object oneTransition(QName elementName,int[] currentState,SubstitutionGroupHandler subGroupHandler){   if (currentState[0] < 0) {     currentState[0]=XSCMValidator.SUBSEQUENT_ERROR;     return null;   }   currentState[0]=XSCMValidator.FIRST_ERROR;   return null; } "
"@SafeVarargs public final void addAll(final T... items){ synchronized (mLock) {     Collections.addAll(mList,items);   }   notifyDataSetChanged(); } "
"public Gaussian(double norm,double mean,double sigma) throws MathIllegalArgumentException {   if (sigma <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,sigma,0);   }   this.norm=norm;   this.mean=mean;   this.is=1 / sigma;   this.i2s2=0.5 * is * is; } "
"public void removeUnlocked(IObjectInfo<T> oi){   remove_impl((ObjectInfo<T>)oi); } "
"public String toString(){   return Float.toString(start) + \" \" + Float.toString(mid)+ \" \"+ Float.toString(end); } "
"@NonNull private Rect viewRectInNeighborCoords(@NonNull View view,@NonNull View neighbor){   final Rect bounds=new Rect();   view.getDrawingRect(bounds);   offsetDescendantRectToMyCoords(view,bounds);   offsetRectIntoDescendantCoords(neighbor,bounds);   return bounds; } "
"public CM_SERVER_LIST(ByteBuffer buf,LoginConnection client){   super(buf,client,0x05); } "
"public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {   long count=0;   int n;   while (EOF != (n=input.read(buffer))) {     output.write(buffer,0,n);     count+=n;   }   return count; } "
"public void addAll(Schema sch){   fields.putAll(sch.fields);   if (myFieldSet != null)   myFieldSet=new TreeSet<String>(fields.keySet()); } "
"public int size(){   return bytes.length; } "
"@POST @Consumes(\"application/json\") public Response post(String query){   jsonQuery=query;   if (query.contains(\"\\\"ignored\\\"\")) {     return Response.status(Status.OK).entity(weightResponse).build();   }   new JsonSlurper().parseText(query);   if (statusCode == Status.INTERNAL_SERVER_ERROR) {     throw new RuntimeException();   }   return Response.status(statusCode).entity(jsonResponse).build(); } "
"public static ValueGetterSpacePredicate<ServerEntry> pathAll(String path,ISpacePredicate... predicates){   return path(path,all(predicates)); } "
"private static double n(int i,int j,int m,int n,long cnm,boolean strict){   final double[] lag=new double[n];   double last=0;   for (int k=0; k < n; k++) {     lag[k]=c(0,k + 1,m,n,cnm,strict);   }   for (int k=1; k <= i; k++) {     last=c(k,0,m,n,cnm,strict);     for (int l=1; l <= j; l++) {       lag[l - 1]=c(k,l,m,n,cnm,strict) * (last + lag[l - 1]);       last=lag[l - 1];     }   }   return last; } "
"public TeamsExample(){   oredCriteria=new ArrayList<Criteria>(); } "
"public IteratorBuilder leaseDuration(long leaseDuration){   this.iteratorConfig.setLeaseDuration(leaseDuration);   return this; } "
"@RequestMapping(value=\"/gotoauthpage\") public String goToAuthPage(HttpSession httpSession){   final String state=CommonUtils.getToken();   httpSession.setAttribute(LINE_WEB_LOGIN_STATE,state);   final String url=lineConfig.getLineWebLoginUrl(state);   return \"redirect:\" + url; } "
"public static String decode(String str) throws RuntimeException {   byte[] bytes;   try {     bytes=str.getBytes(\"ASCII\");   }  catch (  UnsupportedEncodingException e) {     throw new RuntimeException(\"ASCII is not supported!\",e);   }   byte[] decoded=decode(bytes);   return new String(decoded); } "
"public void reset(){   get(); } "
"public int elementAt(int depth){   return fData[depth]; } "
"public static Map createAddressMap(InetSocketAddress address){   Map map=new HashMap();   map.put(PORT,(long)address.getPort());   map.put(ADDRESS,address.getAddress().getHostAddress());   return map; } "
"public void clear(){   throw new UnsupportedOperationException(\"Changes to graph structure not allowed for spanning trees.\"); } "
"public RedundancyBasedSelector(String sPreexistingText,int iMinNGram,int iMaxNGram,int iDist){   Comparator=new NGramCachedNonSymmGraphComparator();   SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();   PreexistingText=sPreexistingText;   RedundancyThreshold=0.4;   MinNGram=iMinNGram;   MaxNGram=iMaxNGram;   Dist=iDist; } "
"public static ExpectedCondition<Boolean> elementHasAttributeWithValue(final WebElement element,final String attributeName,final String attributeValue){   return null; } "
"private void searchClassPath() throws Exception {   URL roots;   Enumeration<URL> metas=Launch.classLoader.getResources(\"META-INF\");   while (metas.hasMoreElements()) {     roots=metas.nextElement();     File root=new File(roots.getPath());     File[] files=root.listFiles();     if (files != null) {       for (      File file : files) {         if (file.getName().equals(\"MANIFEST.MF\") || (OMLStrippableTransformer.getEnvironment() == Environment.DEVELOPMENT && file.getName().endsWith(\".MF\"))) {           FileInputStream stream=new FileInputStream(file);           registerMod(file.getParentFile().getParentFile(),new Manifest(stream));           stream.close();         }  else         if (file.getName().endsWith(\".at\")) {           OMLAccessTransformer.loadAccessTransformers(FileUtils.readLines(file));         }       }     }   } } "
"public PlacesGetCheckinsQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public PhotosMoveQuery move(UserActor actor,int targetAlbumId,int photoId){   return new PhotosMoveQuery(getClient(),actor,targetAlbumId,photoId); } "
"public SourceCommandTag(final Long id,final String name){   this(id,name,0,0,null); } "
"public JSONArray put(int index,Object value) throws JSONException {   JSONObject.testValidity(value);   if (index < 0) {     throw new JSONException(\"JSONArray[\" + index + \"] not found.\");   }   if (index < this.length()) {     this.myArrayList.set(index,value);   }  else {     while (index != this.length()) {       this.put(JSONObject.NULL);     }     this.put(value);   }   return this; } "
"public AppsGetFriendsListQuery fields(EnumParam... value){   return unsafeParam(\"fields\",value); } "
"public CommandBuilder withArgumentIfPresent(Map<String,Object> properties,String... keys){   for (  String key : keys) {     Object value=properties.get(key);     if (value != null) {       if (value.getClass().isArray()) {         withArguments(ArrayUtils.toStringArray(value));       }  else {         withArguments(value.toString());       }     }   }   return this; } "
"public static Pattern convertPerlRegexToPattern(@Nonnull final String regex,@Nonnull final boolean faultTolerant){   Check.notNull(regex,\"regex\");   String pattern=regex.trim();   final Matcher matcher=faultTolerant ? PERL_STYLE_TOLERANT.matcher(pattern) : PERL_STYLE.matcher(pattern);   if (!matcher.matches()) {     throw new IllegalArgumentException(\"The given regular expression '\" + pattern + \"' seems to be not in PERL style or has unsupported modifiers.\");   }   pattern=pattern.substring(1);   final int lastIndex=pattern.lastIndexOf('/');   pattern=pattern.substring(0,lastIndex);   final int flags=Flag.convertToBitmask(Flag.parse(matcher.group(1)));   return Pattern.compile(pattern,flags); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200431,skilltarget,skillname); } "
"public boolean publish(final String publicationTopic,final byte[] payload,final int qos,final boolean retained){   if (canPublish()) {     try {       logger.info(\"Publishing message on topic \\\"\" + publicationTopic + \"\\\". Payload size = \"+ payload.length);       client.publish(publicationTopic,payload,qos,retained);       logger.trace(\"Published message on topic \\\"\" + publicationTopic + \"\\\". Payload size = \"+ payload.length);       return true;     }  catch (    MqttException e) {       logger.error(\"Cannot publish message on \" + publicationTopic,e);     }   }  else {     logger.warn(\"Publication attempt failure - no connection available...\");   }   return false; } "
"public int degree(){   return c.length; } "
"protected void reset(VisualItem item){   item.setVisible(false);   item.setEndVisible(false);   item.setStartStrokeColor(item.getStrokeColor());   item.revertToDefault(VisualItem.STROKECOLOR);   item.revertToDefault(VisualItem.ENDSTROKECOLOR);   item.setStartTextColor(item.getTextColor());   item.revertToDefault(VisualItem.TEXTCOLOR);   item.revertToDefault(VisualItem.ENDTEXTCOLOR);   item.setStartFillColor(item.getFillColor());   item.revertToDefault(VisualItem.FILLCOLOR);   item.revertToDefault(VisualItem.ENDFILLCOLOR); } "
"public static void writeStringToFile(File file,String data) throws IOException {   writeStringToFile(file,data,Charset.defaultCharset(),false); } "
"public void prepareStatement(String sql) throws GenericDataSourceException, GenericEntityException {   this.prepareStatement(sql,false,0,0,-1,-1); } "
"@NotNull public static ValidationResult validateAndroidSdk(@Nullable File sdkPath,boolean includePathInMessage){   return validatedSdkPath(sdkPath,\"SDK\",false,includePathInMessage); } "
"private String identifyClass(String string,RegExp regExp,Description descr){   if (null != regExp) {     Map<RegExp,String> regExpMap=descr.getRegExpMap();     String oneClass=regExpMap.get(regExp);     if (null != oneClass) {       return oneClass;     }   }   Map<String,RegExp> definitionsMap=descr.getDefinitionsMap();   for (  Map.Entry<String,RegExp> oneEntry : definitionsMap.entrySet()) {     String oneClass=oneEntry.getKey();     RegExp oneRe=oneEntry.getValue();     if (oneRe.matches(string)) {       return oneClass;     }   }   throw new ProcessingException(String.format(\"could not find class for %s\",string)); } "
"private int measureShort(int measureSpec){   int result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if (specMode == MeasureSpec.EXACTLY) {     result=specSize;   }  else {     result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return result; } "
"@Override public void close(){   try {     raf.close();     System.err.println(\"Closing file: \" + file.getName() + \" (\"+ pages+ \"/\"+ data.length+ \" pages)\");   }  catch (  IOException e) {     Basic.caught(e);   } } "
"public ZWaveNodeNamingCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"public boolean intersects(BoundingVolume bv){   return bv.intersectsBoundingBox(this); } "
"@Override public void actionPerformed(ActionEvent ev){   executeImmediately(\"set sortreads=\" + (isSelected() ? \"no\" : \"alphabetically\") + \";\"); } "
"Status readStatus(Element el){   NodeList list=el.getElementsByTagName(\"status\");   if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;   return Status.valueOf(list.item(0).getFirstChild().getNodeValue()); } "
"private boolean addViewItem(int index,boolean first){   View view=getItemView(index);   if (view != null) {     if (first) {       itemsLayout.addView(view,0);     }  else {       itemsLayout.addView(view);     }     return true;   }   return false; } "
"public void callTakePicture(int returnType,int encodingType){   boolean saveAlbumPermission=PermissionHelper.hasPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);   boolean takePicturePermission=PermissionHelper.hasPermission(this,Manifest.permission.CAMERA);   if (!takePicturePermission) {     takePicturePermission=true;     try {       PackageManager packageManager=this.cordova.getActivity().getPackageManager();       String[] permissionsInPackage=packageManager.getPackageInfo(this.cordova.getActivity().getPackageName(),PackageManager.GET_PERMISSIONS).requestedPermissions;       if (permissionsInPackage != null) {         for (        String permission : permissionsInPackage) {           if (permission.equals(Manifest.permission.CAMERA)) {             takePicturePermission=false;             break;           }         }       }     }  catch (    NameNotFoundException e) {     }   }   if (takePicturePermission && saveAlbumPermission) {     takePicture(returnType,encodingType);   }  else   if (saveAlbumPermission && !takePicturePermission) {     PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.CAMERA);   }  else   if (!saveAlbumPermission && takePicturePermission) {     PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);   }  else {     PermissionHelper.requestPermissions(this,TAKE_PIC_SEC,permissions);   } } "
"private void removeSubEquipments(Collection<Long> subEquipmentIds,ConfigurationElementReport equipmentReport){   for (  Long subEquipmentId : new ArrayList<Long>(subEquipmentIds)) {     ConfigurationElementReport subEquipmentReport=new ConfigurationElementReport(Action.REMOVE,Entity.SUBEQUIPMENT,subEquipmentId);     equipmentReport.addSubReport(subEquipmentReport);     try {       subEquipmentConfigHandler.removeSubEquipment(subEquipmentId,subEquipmentReport);     }  catch (    Exception ex) {       subEquipmentReport.setFailure(\"Exception caught - aborting removal of subequipment \" + subEquipmentId,ex);       throw new RuntimeException(\"Aborting reconfiguration as unable to remove subequipment.\",ex);     }   } } "
"public String name(){   return theName; } "
"public EquipmentUnitAdd(final Long changeId,final long equipmentId,final String equipmentUnitXml){   setChangeId(changeId);   this.equipmentId=equipmentId;   this.equipmentUnitXml=equipmentUnitXml; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_WHO_DIALOG_RESULT(int num0){   return new SM_SYSTEM_MESSAGE(1390249,num0); } "
"public JsonObject merge(JsonObject object){   if (object == null) {     throw new NullPointerException(\"object is null\");   }   for (  Member member : object) {     this.set(member.name,member.value);   }   return this; } "
"@Override public double[] makeDensityTestValues(){   return new double[]{0.00427280075546,0.0204117166709,0.0362756163658,0.0542113174239,0.0773195272491,0.000394468852816,0.00366559696761,0.00874649473311,0.0166712508128,0.0311798227954}; } "
"@Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){   final ElementLocatorFactory elementLocatorFactory=new ScopedElementLocatorFactory(webDriver,context.getElementLocatorFactory(),field);   final FramePath framePath=frameMap.get(pageObject);   contextStack.push(new PageObjectContext(elementLocatorFactory,framePath));   Object scopedPageObject=null;   try {     scopedPageObject=injector.getInstance(field.getType());   }  catch (  Exception e) {     if (e instanceof ConfigurationException) {       ConfigurationException ce=(ConfigurationException)e;       throw new BobcatRuntimeException(\"Configuration exception: \" + ce.getErrorMessages().toString(),e);     }     throw new BobcatRuntimeException(e.getMessage(),e);   }  finally {     contextStack.pop();   }   return Optional.ofNullable(scopedPageObject); } "
"public DateColumn(Class type,int nrows,int capacity,long defaultValue){   super(type,TimeLib.getDate(type,defaultValue));   if (!Date.class.isAssignableFrom(type)) {     throw new IllegalArgumentException(\"Column type must be an \" + \"instance or subclass of java.util.Date.\");   }   if (capacity < nrows) {     throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");   }   m_values=new long[capacity];   Arrays.fill(m_values,defaultValue);   m_size=nrows; } "
"public boolean hasImage(){   return mImage != null; } "
"@Override public boolean isInterrupted(){   return interrupted; } "
"public void removeThrottle(AdHocThrottleEndpoint endpoint){   try {     _throttleMap.remove(endpoint.toString());   }  catch (  Exception e) {     _log.warn(\"Failed to remove throttle for {} {}\",endpoint.getMethod(),endpoint.getPath(),e);   } } "
"public PhotosImplementor(PhotosModel model,PhotosView view){   this.model=model;   this.view=view; } "
"public PhotosRestoreQuery restore(UserActor actor,int photoId){   return new PhotosRestoreQuery(getClient(),actor,photoId); } "
"public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){ } "
"void resetTouchBehaviorTracking(){   mDidBlockInteraction=false; } "
"public boolean isCallerValid(Context context,int authRequirements){   return isCallerValid(context,authRequirements,\"\"); } "
"public void partitionWithPercent(boolean withPercent){   this.withPercent=withPercent;   if (withPercent)   chartUtils=ChartHelper.generateArcWithPercent(chartData);  else   chartUtils=ChartHelper.generateArc(chartData);   animateValue=-1;   invalidate(); } "
"public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){   Iterator it=listeners.iterator();   while (it.hasNext()) {     IRepositoryListener listener=(IRepositoryListener)it.next();     listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);   } } "
"public static String export(){   RequestLog current=RLOG.get();   record(new Durations(current.aggregateDurations()));   record(new Threads(current.threadIds));   try {     return current.mapper.writeValueAsString(current.info);   }  catch (  JsonProcessingException jpe) {     String msg=String.format(\"Exporting mega log line with id: '%s' to JSON failed.\",current.logId);     LOG.warn(msg,jpe);     return msg;   } } "
"private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {   s.defaultReadObject();   if (constraints == null) {     throw new InvalidObjectException(\"cannot create constraint with no elements\");   }   try {     verify(constraints,2);   }  catch (  RuntimeException e) {     if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {       InvalidObjectException ee=new InvalidObjectException(e.getMessage());       ee.initCause(e);       throw ee;     }     throw e;   }   for (int i=constraints.length; --i >= 0; ) {     if (Constraint.contains(constraints,i,constraints[i])) {       throw new InvalidObjectException(\"cannot create constraint with duplicate elements\");     }   }   setRelative(); } "
"private void decode(byte[] data,int width,int height){   long start=System.currentTimeMillis();   Result rawResult=null;   byte[] rotatedData=new byte[data.length];   for (int y=0; y < height; y++) {     for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];   }   int tmp=width;   width=height;   height=tmp;   data=rotatedData;   PlanarYUVLuminanceSource source=captureEvent.getCameraManager().buildLuminanceSource(data,width,height);   BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));   try {     rawResult=multiFormatReader.decodeWithState(bitmap);   }  catch (  ReaderException re) {   } catch (  Exception re) {   }  finally {     multiFormatReader.reset();   }   if (rawResult != null) {     long end=System.currentTimeMillis();     Log.d(TAG,\"Found barcode (\" + (end - start) + \" ms):\\n\"+ rawResult.toString());     Message message=Message.obtain(captureEvent.getHandler(),MessageIDs.decode_succeeded,rawResult);     Bundle bundle=new Bundle();     bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());     message.setData(bundle);     message.sendToTarget();   }  else {     Message message=Message.obtain(captureEvent.getHandler(),MessageIDs.decode_failed);     message.sendToTarget();   } } "
"public static Object executeScript(CompiledScript script,String functionName,ScriptContext scriptContext,Object[] args) throws ScriptException, NoSuchMethodException {   Assert.notNull(\"script\",script,\"scriptContext\",scriptContext);   Object result=script.eval(scriptContext);   if (UtilValidate.isNotEmpty(functionName)) {     if (Debug.verboseOn()) {       Debug.logVerbose(\"Invoking function/method \" + functionName,module);     }     ScriptEngine engine=script.getEngine();     try {       Invocable invocableEngine=(Invocable)engine;       result=invocableEngine.invokeFunction(functionName,args == null ? EMPTY_ARGS : args);     }  catch (    ClassCastException e) {       throw new ScriptException(\"Script engine \" + engine.getClass().getName() + \" does not support function/method invocations\");     }   }   return result; } "
"public static void isAssignableTo(String argumentName,Object argumentObject,Class<?> targetClass){   notNull(argumentName,argumentObject);   if (!targetClass.isAssignableFrom(argumentObject.getClass())) {     throw new IllegalArgumentException(argumentName + \" cannot be assigned to \" + targetClass.getName());   } } "
"public AdsDeleteTargetGroupQuery deleteTargetGroup(UserActor actor,int accountId,int targetGroupId){   return new AdsDeleteTargetGroupQuery(getClient(),actor,accountId,targetGroupId); } "
"@Override public void actionPerformed(ActionEvent ev){   JFrame frame=null;   if (getViewer() != null)   frame=getViewer().getFrame();   String result=JOptionPane.showInputDialog(frame,\"Set directory:\",System.getProperty(\"user.dir\"));   if (result != null && result.trim().length() > 0) {     execute(\"set dir='\" + result.trim() + \"';\");   } } "
"public void transformClass(SootClass sc,boolean removeAssignments){   SootMethod smInit=sc.getMethodByNameUnsafe(\"<clinit>\");   if (smInit == null)   return;   Set<SootField> nonConstantFields=new HashSet<SootField>();   Map<SootField,ConstantValueTag> newTags=new HashMap<SootField,ConstantValueTag>();   Set<SootField> removeTagList=new HashSet<SootField>();   for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {     Unit u=itU.next();     if (u instanceof AssignStmt) {       AssignStmt assign=(AssignStmt)u;       if (assign.getLeftOp() instanceof StaticFieldRef && assign.getRightOp() instanceof Constant) {         SootField field=((StaticFieldRef)assign.getLeftOp()).getField();         if (nonConstantFields.contains(field))         continue;         if (field.getDeclaringClass().equals(sc) && field.isStatic() && field.isFinal()) {           boolean found=false;           for (          Tag t : field.getTags()) {             if (t instanceof ConstantValueTag) {               if (checkConstantValue((ConstantValueTag)t,(Constant)assign.getRightOp())) {                 if (removeAssignments)                 itU.remove();               }  else {                 G.v().out.println(\"WARNING: Constant value for field '\" + field + \"' mismatch between code (\"+ (Constant)assign.getRightOp()+ \") and constant table (\"+ t+ \")\");                 removeTagList.add(field);               }               found=true;               break;             }           }           if (!found) {             if (!checkConstantValue(newTags.get(field),(Constant)assign.getRightOp())) {               nonConstantFields.add(field);               newTags.remove(field);               removeTagList.add(field);               continue;             }             ConstantValueTag newTag=createConstantTagFromValue((Constant)assign.getRightOp());             if (newTag != null)             newTags.put(field,newTag);           }         }       }  else       if (assign.getLeftOp() instanceof StaticFieldRef) {         SootField sf=((StaticFieldRef)assign.getLeftOp()).getField();         removeTagList.add(sf);       }     }   }   for (  Entry<SootField,ConstantValueTag> entry : newTags.entrySet()) {     SootField field=entry.getKey();     if (removeTagList.contains(field))     continue;     field.addTag(entry.getValue());   }   if (removeAssignments && !newTags.isEmpty())   for (Iterator<Unit> itU=smInit.getActiveBody().getUnits().snapshotIterator(); itU.hasNext(); ) {     Unit u=itU.next();     if (u instanceof AssignStmt) {       AssignStmt assign=(AssignStmt)u;       if (assign.getLeftOp() instanceof FieldRef)       if (newTags.containsKey(((FieldRef)assign.getLeftOp()).getField()))       itU.remove();     }   }   for (  SootField sf : removeTagList) {     if (removeTagList.contains(sf)) {       List<Tag> toRemoveTagList=new ArrayList<Tag>();       for (      Tag t : sf.getTags()) {         if (t instanceof ConstantValueTag) {           toRemoveTagList.add(t);         }       }       for (      Tag t : toRemoveTagList) {         sf.getTags().remove(t);       }     }   } } "
"protected void addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback callback){   onPropertyChangedCallbacks.add(callback);   getViewModel().addOnPropertyChangedCallback(callback); } "
"static public int[] addIndex(int[] X,int x){   int newX[]=new int[X.length + 1];   for (int i=0; i < X.length; i++)   newX[i]=X[i];   newX[X.length]=x;   return newX; } "
"public CM_DUEL_REQUEST(int opcode,State state,State... restStates){   super(opcode,state,restStates); } "
"protected void dispatchJobCanceledEvents(ExecutionEntity activityExecution){   if (activityExecution != null) {     List<JobEntity> jobs=activityExecution.getJobs();     for (    JobEntity job : jobs) {       if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));       }     }     List<TimerJobEntity> timerJobs=activityExecution.getTimerJobs();     for (    TimerJobEntity job : timerJobs) {       if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {         Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));       }     }   } } "
"public void clearSounds(){   mSoundMap.clear(); } "
"public static Uri PathToUri(String path){   return Uri.fromFile(new File(path)); } "
"@Override public String toString(){   return getClass().getSimpleName(); } "
"private ArrayList<SpinnerLanguageElement> createSpinnerLanguages(int avoidLanguage){   ArrayList<SpinnerLanguageElement> result=new ArrayList<SpinnerLanguageElement>();   List<String> languages=mSessionOptions.allLanguages();   for (int i=0; i < languages.size(); ++i) {     if (i != avoidLanguage) {       result.add(new SpinnerLanguageElement(languages.get(i),i));     }   }   return result; } "
"public int length(){   return Histogram.length() + Graph.length(); } "
"@Override public void onDestroy(){   super.onDestroy();   if (mPreview != null) {     mPreview.release();   } } "
"public boolean isFifoClass(){   return serverFifoMode; } "
"private static URL[] pathToURLs(String path) throws MalformedURLException { synchronized (pathToURLsCache) {     Object[] v=(Object[])pathToURLsCache.get(path);     if (v != null) {       return (URL[])v[0];     }   }   StringTokenizer st=new StringTokenizer(path);   URL[] urls=new URL[st.countTokens()];   for (int i=0; st.hasMoreTokens(); i++) {     urls[i]=new URL(st.nextToken());   } synchronized (pathToURLsCache) {     pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});   }   return urls; } "
"public void requestAutoFocus(Handler handler,int message){   if (camera != null && previewing) {     autoFocusCallback.setHandler(handler,message);     try {       camera.autoFocus(autoFocusCallback);     }  catch (    Exception e) {     }   } } "
"private static void populateMimeTypeIconMapping(){   MIMETYPE_TO_ICON_MAPPING.put(\"application/coreldraw\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/epub+zip\",R.drawable.file_text);   MIMETYPE_TO_ICON_MAPPING.put(\"application/font-sfnt\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/font-woff\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/illustrator\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/javascript\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/json\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/msaccess\",R.drawable.file);   MIMETYPE_TO_ICON_MAPPING.put(\"application/msexcel\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/mspowerpoint\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/msword\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/octet-stream\",R.drawable.file);   MIMETYPE_TO_ICON_MAPPING.put(\"application/postscript\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/pdf\",R.drawable.file_pdf);   MIMETYPE_TO_ICON_MAPPING.put(\"application/rss+xml\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/rtf\",R.drawable.file);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.android.package-archive\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.addin.macroEnabled.12\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.binary.macroEnabled.12\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.sheet.macroEnabled.12\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-excel.template.macroEnabled.12\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-fontobject\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.addin.macroEnabled.12\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.presentation.macroEnabled.12\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-powerpoint.template.macroEnabled.12\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.document.macroEnabled.12\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.ms-word.template.macroEnabled.12\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.presentation-template\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.spreadsheet-template\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-master\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-template\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.oasis.opendocument.text-web\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.presentation\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.presentationml.template\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-7z-compressed\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-bin\",R.drawable.file_application);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-cbr\",R.drawable.file_text);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-compressed\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-dcraw\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-deb\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-font\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gimp\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-gzip\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-ms-dos-executable\",R.drawable.file_application);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-msi\",R.drawable.file_application);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-numbers-sffnumbers\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-keynote-sffkey\",R.drawable.file_ppt);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-iwork-pages-sffpages\",R.drawable.file_doc);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-perl\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-photoshop\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-php\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-rar-compressed\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-shockwave-flash\",R.drawable.file_application);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tar\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"application/x-tex\",R.drawable.file_text);   MIMETYPE_TO_ICON_MAPPING.put(\"application/xml\",R.drawable.file_text);   MIMETYPE_TO_ICON_MAPPING.put(\"application/yaml\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"application/zip\",R.drawable.file_zip);   MIMETYPE_TO_ICON_MAPPING.put(\"database\",R.drawable.file);   MIMETYPE_TO_ICON_MAPPING.put(\"httpd/unix-directory\",R.drawable.ic_menu_archive);   MIMETYPE_TO_ICON_MAPPING.put(\"image/svg+xml\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"image/vector\",R.drawable.file_image);   MIMETYPE_TO_ICON_MAPPING.put(\"text/calendar\",R.drawable.file_calendar);   MIMETYPE_TO_ICON_MAPPING.put(\"text/css\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/csv\",R.drawable.file_xls);   MIMETYPE_TO_ICON_MAPPING.put(\"text/html\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/vcard\",R.drawable.file_vcard);   MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/x-c++src\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/x-h\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/x-python\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"text/x-shellscript\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(\"web\",R.drawable.file_code);   MIMETYPE_TO_ICON_MAPPING.put(MimeType.DIRECTORY,R.drawable.ic_menu_archive); } "
"public boolean isCritical(){   return true; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public PreIncExpr fullCopy(){   PreIncExpr tree=(PreIncExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public WrappedIndentingWriter(Writer out,int width){   this(out,width,\"\"); } "
"public boolean supportsThreadDump(Application application){   if (application.getState() != Stateful.STATE_AVAILABLE)   return false;   return JvmFactory.getJVMFor(application).isTakeThreadDumpSupported(); } "
"public static <X,Y>boolean containsSuperclass(Set<? extends Class<? extends Y>> classes,X subclassInstance){   Class subclass=subclassInstance.getClass();   for (  Class<? extends Y> classs : classes)   if (classs.isAssignableFrom(subclass))   return true;   return false; } "
"public CountModifiers(CountModifiers modifiers1,CountModifiers modifiers2){   super(modifiers1,modifiers2); } "
"public String[] tokenize(String s){   return tokenize(s,false); } "
"public void trimToSize(int maxSize){   while (true) {     String key;     V value; synchronized (this) {       if (size < 0 || (map.isEmpty() && size != 0)) {         throw new IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");       }       if (size <= maxSize) {         break;       }       Map.Entry<String,V> toEvict=eldest(map);       if (toEvict == null) {         break;       }       key=toEvict.getKey();       value=toEvict.getValue();       map.remove(key);       size-=safeSizeOf(key,value);       evictionCount++;     }     entryRemoved(true,key,value,null);   } } "
"public HeadRuleMap(InputStream in){   BufferedReader reader=IOUtils.createBufferedReader(in);   String line, pTag, dir, rule;   String[] tmp;   try {     while ((line=reader.readLine()) != null) {       tmp=P_COLUMN.split(line);       pTag=tmp[0];       dir=tmp[1];       rule=tmp[2];       put(pTag,new HeadRule(dir,rule));     }   }  catch (  IOException e) {     e.printStackTrace();   } } "
"public static boolean startsWith(String columnPath,String tableName){   if (tableName == null || columnPath == null)   return false;   return columnPath.startsWith(tableName + \".\"); } "
"public boolean isLocaleSpecificLayout(){   return myEditedConfig.getLocaleQualifier() != null; } "
"private static int mergeIdentical(final WeightedAddress headPtr,int length){   for (WeightedAddress a=headPtr.next; a != null; a=a.next) {     for (WeightedAddress b=a.next; b != null; b=b.next) {       if (a.getAddress().equals(b.getAddress())) {         if (b.weight > a.weight)         a.weight=b.weight;         a.next=b.next;         length--;       }  else       break;     }   }   return length; } "
"private void continueSet(Channel channel,SessionStatus state,byte[] remainder,ChannelHandlerContext channelHandlerContext){   state.cmd.element.setData(remainder);   Channels.fireMessageReceived(channelHandlerContext,state.cmd,channelHandlerContext.getChannel().getRemoteAddress()); } "
"protected void notifyHideContextualSearch(){   for (  ContextualSearchObserver observer : mObservers) {     observer.onHideContextualSearch();   } } "
"public static AudioInputStream convertBitsPerSample(AudioInputStream in,int bitsPerSample) throws IllegalArgumentException {   AudioInputStream converted;   AudioFormat sourceFormat, targetFormat;   if (in == null)   throw new IllegalArgumentException(\"the inputstream must not be null values\");   if (bitsPerSample != 8 && bitsPerSample != 16 && bitsPerSample != 24 && bitsPerSample != 32)   throw new IllegalArgumentException(\"number of bits must be 8, 16, 24 or 32\");   converted=in;   sourceFormat=in.getFormat();   targetFormat=new AudioFormat(sourceFormat.getSampleRate(),bitsPerSample,sourceFormat.getChannels(),true,sourceFormat.isBigEndian());   if (targetFormat.getSampleSizeInBits() != sourceFormat.getSampleSizeInBits()) {     if (AudioSystem.isConversionSupported(targetFormat,sourceFormat))     converted=AudioSystem.getAudioInputStream(targetFormat,converted);  else     throw new IllegalArgumentException(\"conversion to specified sample size (bits) not supported\");   }   return converted; } "
"public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){   Window window=activity.getWindow();   ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);   View mChildView=mContentView.getChildAt(0);   if (mChildView != null) {     ViewCompat.setFitsSystemWindows(mChildView,false);   }   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {     int statusBarHeight=getStatusBarHeight(activity);     window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {       window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);       if (hideStatusBarBackground) {         window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);         window.setStatusBarColor(COLOR_TRANSLUCENT);       }  else {         window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));       }       if (mChildView != null) {         ViewCompat.requestApplyInsets(mChildView);       }     }  else {       ViewGroup mDecorView=(ViewGroup)window.getDecorView();       if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {         mChildView=mDecorView.getChildAt(0);         mContentView.removeView(mChildView);         mChildView=mContentView.getChildAt(0);         if (mChildView != null) {           FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();           if (lp != null && lp.topMargin >= statusBarHeight) {             lp.topMargin-=statusBarHeight;             mChildView.setLayoutParams(lp);           }         }         mDecorView.setTag(false);       }     }   } } "
"private void showAtCalculatedPosition(){   if (mAnchorBelow) {     showAtLocation(mAnchorView.getRootView(),Gravity.TOP | Gravity.START,mXPosition,mYPosition);   }  else {     showAtLocation(mAnchorView.getRootView(),Gravity.BOTTOM | Gravity.START,mXPosition,mYPosition);   } } "
"@Override public String encodeSLD(URL resourceLocator,StyledLayerDescriptor sld){   String xml=\"\";   if (sld != null) {     DuplicatingStyleVisitor duplicator=new DuplicatingStyleVisitor();     sld.accept(duplicator);     StyledLayerDescriptor sldCopy=(StyledLayerDescriptor)duplicator.getCopy();     if (resourceLocator != null) {       SLDExternalImages.updateOnlineResources(resourceLocator,sldCopy);     }     SLDTransformer transformer=new SLDTransformer();     transformer.setIndentation(2);     try {       xml=transformer.transform(sldCopy);     }  catch (    TransformerException e) {       ConsoleManager.getInstance().exception(this,e);     }   }   return xml; } "
"public void updateSettings(DownloadSettingsResponse response){   if (response.getSettings().hasMapSettings()) {     mapSettings.update(response.getSettings().getMapSettings());   }   if (response.getSettings().hasLevelSettings()) {     levelUpSettings.update(response.getSettings().getInventorySettings());   }   if (response.getSettings().hasFortSettings()) {     fortSettings.update(response.getSettings().getFortSettings());   }   if (response.getSettings().hasInventorySettings()) {     inventorySettings.update(response.getSettings().getInventorySettings());   }   if (response.getSettings().hasGpsSettings()) {     gpsSettings.update(response.getSettings().getGpsSettings());   }   this.hash=response.getHash(); } "
"public boolean isEnabled(){   return enabled; } "
"protected String[] upload_file(byte cmd,String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {   File f=new File(local_filename);   FileInputStream fis=new FileInputStream(f);   if (file_ext_name == null) {     int nPos=local_filename.lastIndexOf('.');     if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {       file_ext_name=local_filename.substring(nPos + 1);     }   }   try {     return this.do_upload_file(cmd,group_name,null,null,file_ext_name,f.length(),new UploadStream(fis,f.length()),meta_list);   }   finally {     fis.close();   } } "
"public void requestPermissions(int requestCode){ } "
"public static byte[] inputStreamToByte(InputStream in) throws IOException {   ByteArrayOutputStream outStream=new ByteArrayOutputStream();   byte[] data=new byte[BUFFER_SIZE];   int count=-1;   while ((count=in.read(data,0,BUFFER_SIZE)) != -1) {     outStream.write(data,0,count);   }   data=null;   return outStream.toByteArray(); } "
"@Override public void flush() throws IOException {   super.flush();   this.branch.flush(); } "
"public boolean enabled(){   return soot.PhaseOptions.getBoolean(options,\"enabled\"); } "
"protected void loadApplicationContext() throws Exception {   if (applicationContext != null) {     return;   }   if (logger.isDebugEnabled()) {     logger.debug(\"Loading application context [\" + location + \"]\");   }   applicationContext=new ResourceApplicationContext(new Resource[]{location},parentApplicationContext,config);   try {     applicationContext.refresh();   }  catch (  Exception e) {     applicationContext=null;     throw e;   } } "
"public void testDeployIntermediateVersionWithoutMessageStartEvent(){   String deploymentId1=deployStartMessageTestProcess();   assertEquals(1,getAllEventSubscriptions().size());   assertEquals(0,runtimeService.createProcessInstanceQuery().count());   runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);   assertEquals(1,runtimeService.createProcessInstanceQuery().count());   assertEventSubscriptionsCount(1);   String deploymentId2=deployProcessWithoutEvents();   assertEquals(0,getAllEventSubscriptions().size());   assertEquals(1,runtimeService.createProcessInstanceQuery().count());   try {     runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);     fail();   }  catch (  Exception e) {   }   assertEquals(1,runtimeService.createProcessInstanceQuery().count());   assertEventSubscriptionsCount(0);   String deploymentId3=deployStartMessageTestProcess();   assertEquals(1,getAllEventSubscriptions().size());   assertEquals(1,runtimeService.createProcessInstanceQuery().count());   runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);   assertEquals(2,runtimeService.createProcessInstanceQuery().count());   assertEventSubscriptionsCount(1);   List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();   assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());   cleanup(deploymentId1,deploymentId2,deploymentId3); } "
"public byte[] convert(Object source){   ByteArrayOutputStream byteStream=new ByteArrayOutputStream(1024);   try {     GZIPOutputStream gzipStream=new GZIPOutputStream(byteStream);     this.serializer.serialize(source,gzipStream);     gzipStream.close();     return byteStream.toByteArray();   }  catch (  Throwable ex) {     throw new SerializationFailedException(\"Failed to serialize object using \" + this.serializer.getClass().getSimpleName(),ex);   } } "
"public boolean hasDefaultValue(){   return getDefaultValueOpt().getNumChild() != 0; } "
"public void writeExternal(ObjectOutput out) throws IOException {   out.writeFloat(x);   out.writeFloat(y); } "
"public static void shuffle(int[] a){   if (a == null)   throw new NullPointerException(\"argument array is null\");   int n=a.length;   for (int i=0; i < n; i++) {     int r=i + uniform(n - i);     int temp=a[i];     a[i]=a[r];     a[r]=temp;   } } "
"public NaturalRanking(NaNStrategy nanStrategy,TiesStrategy tiesStrategy){   super();   this.nanStrategy=nanStrategy;   this.tiesStrategy=tiesStrategy;   randomData=new RandomDataGenerator(); } "
"public String upload_file1(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {   String parts[]=this.upload_file(group_name,file_size,callback,file_ext_name,meta_list);   if (parts != null) {     return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];   }  else {     return null;   } } "
"public CustomSwitchPreference(Context context){   super(context,null); } "
"@Override public void onCreate(Bundle savedInstanceState){   super.onCreate(savedInstanceState); } "
"protected String names(Token[] tokens){   StringBuilder buf=new StringBuilder();   for (  Token token : tokens) {     if (isIgnored(token.kind)) {       continue;     }     if (buf.length() > 0) {       buf.append(' ');     }     buf.append(token.kind.name());   }   return buf.toString(); } "
"public NotificationsGetQuery startTime(Integer value){   return unsafeParam(\"start_time\",value); } "
"private BSPTree<Euclidean1D> leafBefore(BSPTree<Euclidean1D> node){   node=childBefore(node);   while (node.getCut() != null) {     node=childAfter(node);   }   return node; } "
"private boolean isAlreadySetup(RetrieveAndRank service){   SolrClusters clusters=service.getSolrClusters().execute();   return clusters.getSolrClusters().size() > 0 ? true : false; } "
"public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_NOT_ENOUGH_GOLD(String value0){   return new SM_SYSTEM_MESSAGE(1300472,value0); } "
"public void addImportDecl(ImportDecl node){   List<ImportDecl> list=(parent == null || state == null) ? getImportDeclListNoTransform() : getImportDeclList();   list.addChild(node); } "
"private static int compareInt(final int a,final int b){   int result=0;   if (a > b) {     result=1;   }  else   if (a < b) {     result=-1;   }   return result; } "
"public BOMTree(String productId,String bomTypeId,Date inDate,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {   this(productId,bomTypeId,inDate,EXPLOSION,delegator,dispatcher,userLogin); } "
"public long snapshotSize(){   return snapshotBytes; } "
"public AsyncCatchOptions withProbability(double probability){   this.probability=probability;   return this; } "
"public static Map<String,Object> sendOrderPayRetryNotification(DispatchContext ctx,Map<String,? extends Object> context){   return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_PAYRETRY\"); } "
"public static Heal handle(EntityLivingBase entity,float damage){   Heal event=new Heal(entity,damage);   OpenModLoader.getEventBus().post(event);   return event; } "
"public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){   if (options.mCancel) {     return null;   }   Thread thread=Thread.currentThread();   if (!canThreadDecoding(thread)) {     return null;   }   setDecodingOptions(thread,options);   Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);   removeDecodingOptions(thread);   return b; } "
"public Repository createRepoAndAssetAndTextUnits(TestIdWatcher testIdWatcher) throws RepositoryNameAlreadyUsedException {   Repository repository=createRepository(testIdWatcher);   try {     PollableFuture<Asset> assetResult=assetService.addOrUpdateAssetAndProcessIfNeeded(repository.getId(),getTestSourceAssetContent(),\"path/to/asset.xliff\");     pollableTaskService.waitForPollableTask(assetResult.getPollableTask().getId());   }  catch (  PollableTaskException|InterruptedException|ExecutionException e) {     throw new RuntimeException(\"Could not update asset and process it\",e);   }   return repository; } "
"public void typeSystemInit(TypeSystem typeSystem) throws AnalysisEngineProcessException {   super.typeSystemInit(typeSystem);   probabilityFeature=AnnotatorUtil.getOptionalFeatureParameter(context,tokenType,UimaUtil.PROBABILITY_FEATURE_PARAMETER,CAS.TYPE_NAME_DOUBLE); } "
"public boolean supportLocale(String locale){   return new File(path + \"/i18n/\" + locale+ \".lang\").exists(); } "
"public void clearShapes(){   sample2shape.clear(); } "
"public final void addChangeListener(ChangeListener listener){   if (!listeners.contains(listener))   listeners.add(listener); } "
"public EglCore(){   this(null,0); } "
"@Override public void clear(){   datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement]; } "
"public Vector multiply(double m){   x*=m;   y*=m;   z*=m;   return this; } "
"public void moveToRecordId(RecordId rid){   moveTo(rid.block().number());   rp.moveToId(rid.id()); } "
"@Override public void actionPerformed(ActionEvent ev){ } "
"public static UByte ubyte(long value) throws NumberFormatException {   return UByte.valueOf(value); } "
"public AccountGetAppPermissionsQuery(VkApiClient client,UserActor actor,int userId){   super(client,\"account.getAppPermissions\",Integer.class);   accessToken(actor.getAccessToken());   userId(userId); } "
"public void onStop(){ } "
"public static String u4(int v){   char[] result=new char[8];   for (int i=0; i < 8; i++) {     result[7 - i]=Character.forDigit(v & 0x0f,16);     v>>=4;   }   return new String(result); } "
"private static ConstraintWidget[] inferTableList(WidgetContainer base){   if (base instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)base).handlesInternalConstraints()) {     return null;   }   for (  ConstraintWidget constraintWidget : base.getChildren()) {     if (constraintWidget instanceof ConstraintWidgetContainer) {       inferConstraints((ConstraintWidgetContainer)constraintWidget);     }   }   ArrayList<ConstraintWidget> list=new ArrayList<>(base.getChildren());   list.add(0,base);   ConstraintWidget[] widgets=list.toArray(new ConstraintWidget[list.size()]);   ConstraintWidget[] iw=ScoutGroupInference.computeGroups(ScoutWidget.create(widgets));   if (iw != null && iw.length > 0) {     return iw;   }   return null; } "
"private void estimationStep(PointList samplePoints){   double p_j;   double value;   for (int j=0; j < samplePoints.size(); j++) {     p_j=0;     for (int i=0; i < components.length; i++) {       Matrix x=samplePoints.get(j);       value=components[i].getWeightedSampleProbability(x);       p_j+=value;       p_ij[i][j]=value;     }     for (int i=0; i < components.length; i++)     p_ij[i][j]/=p_j;   } } "
"private XMLInputSource createInputSource(String publicId,String systemId,String baseSystemId,String accept,String acceptLanguage){   HTTPInputSource httpSource=new HTTPInputSource(publicId,systemId,baseSystemId);   if (accept != null && accept.length() > 0) {     httpSource.setHTTPRequestProperty(XIncludeHandler.HTTP_ACCEPT,accept);   }   if (acceptLanguage != null && acceptLanguage.length() > 0) {     httpSource.setHTTPRequestProperty(XIncludeHandler.HTTP_ACCEPT_LANGUAGE,acceptLanguage);   }   return httpSource; } "
"void executeRepl() throws IOException {   console.print(LICENSE_PROMPT);   console.setExpandEvents(false);   console.setPrompt(PROMPT);   if (!tempFile.exists()) {     boolean success=tempFile.createNewFile();     if (!success)     print(ErrorMessage.COULD_NOT_CREATE_TEMP_FILE.getMessage());   }   File historyFile=new File(System.getProperty(\"java.io.tmpdir\") + historyFilename);   historyFile.createNewFile();   FileHistory history=new FileHistory(historyFile);   console.setHistory(history);   console.addCompleter(new AggregateCompleter(new GraQLCompleter(this),new ShellCommandCompleter()));   String queryString;   while ((queryString=console.readLine()) != null) {     history.flush(); switch (queryString) { case EDIT_COMMAND:       executeQuery(runEditor());     break; case COMMIT_COMMAND:   commit(); break; case ROLLBACK_COMMAND: rollback(); break; case CLEAR_COMMAND: console.clearScreen(); break; case LICENSE_COMMAND: printLicense(); break; case EXIT_COMMAND: return; case \"\": break; default : if (queryString.startsWith(LOAD_COMMAND + \" \")) { String path=queryString.substring(LOAD_COMMAND.length() + 1); try { queryString=loadQuery(path); }  catch (IOException e) { System.err.println(e.toString()); break; } } executeQuery(queryString); break; } } } "
"private Object readResolve(){   return val ? YES : NO; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_ME_TO_B(String skillcaster,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200571,skillcaster,skilltarget,skillname); } "
"@Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){   carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.FORWARD_DICTIONARY)); } "
"public static void w(String tag,String msg){   if (sLevel > LEVEL_WARNING) {     return;   }   Log.w(tag,msg); } "
"public Builder traceTaskExecutionWarnTimeUs(long timeUs){   this.traceTaskExecutionWarnTimeUs=timeUs;   return this; } "
"public void endSubreport(String subreport){   if (subreport.isEmpty()) {     LOG.error(String.format(\"Tried to end non-existing report \\\"%s\\\"\",subreport));     return;   }   String topSubreport=subreports.peek();   if (topSubreport.equals(subreport)) {     subreports.pop();     addLogEntry(new SubreportEndEntry(subreport));     return;   }   LOG.error(String.format(\"Tried to end non-existing report \\\"%s\\\"\",subreport)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ChangeHateOnAttacked_A_TO_B(String skilltarget,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200953,skilltarget,skillcaster,skillname); } "
"private void updateTableMetadata(String table,Delta delta,Audit audit,@Nullable InvalidationScope scope){   _backingStore.update(_systemTable,table,TimeUUIDs.newUUID(),delta,audit,scope == InvalidationScope.GLOBAL ? WriteConsistency.GLOBAL : WriteConsistency.STRONG);   if (scope != null) {     _tableCacheHandle.invalidate(scope,table);   } } "
"float[] concat(float[]... arrays){   int length=0;   for (  float[] array : arrays) {     length+=array.length;   }   float[] result=new float[length];   int pos=0;   for (  float[] array : arrays) {     for (    float element : array) {       result[pos]=element;       pos++;     }   }   return result; } "
"public static void sendMessage(Player player,String msg){   sendPacket(player,new SM_MESSAGE(0,null,msg,ChatType.GOLDEN_YELLOW)); } "
"public boolean isLegendVisible(){   return legendVisible; } "
"public VideoEditQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"public PraatTextfileDoubleDataSource(File file) throws FileNotFoundException {   this(new FileReader(file)); } "
"public void loadNode(){   try {     cache.setNodeBulkLoadEnabled(true);   }  catch (  UnsupportedOperationException ex) {     LOGGER.warn(\"setNodeBulkLoadEnabled() method threw an exception when \" + \"loading the cache (UnsupportedOperationException) - this is \" + \"normal behaviour in a single-server mode and can be ignored\");   }   loadCache(cache.getKeys());   try {     cache.setNodeBulkLoadEnabled(false);   }  catch (  UnsupportedOperationException ex) {     LOGGER.warn(\"setNodeBulkLoadEnabled() method threw an exception when \" + \"loading the cache (UnsupportedOperationException) - this is \" + \"normal behaviour in a single-server mode and can be ignored\");   } } "
"public void close(){   this.open=false; } "
"public SimpleLogFile(String name,LogRemovalManager logMgr){   init(name,0,logMgr);   readonly=true; } "
"public void closeDriver(){   if (camera != null) {     camera.release();     camera=null;     framingRect=null;     framingRectInPreview=null;   } } "
"@PostConstruct protected void init(){   logger.debug(\"Create the RestTemplate instance that will be wrapped\");   makeRestTemplateWithCustomObjectMapper(restTemplate);   logger.debug(\"Set interceptor for authentication\");   List<ClientHttpRequestInterceptor> interceptors=Collections.<ClientHttpRequestInterceptor>singletonList(formLoginAuthenticationCsrfTokenInterceptor);   restTemplate.setRequestFactory(new InterceptingClientHttpRequestFactory(restTemplate.getRequestFactory(),interceptors)); } "
"public boolean isCritical(){   return true; } "
"@Override public ReversibleIterator<BasicLogRecord> iterator(){   logMgrLock.lock();   try {     flush();     return new LogIterator(currentBlk);   }   finally {     logMgrLock.unlock();   } } "
"public static String urlEncodeArgs(Map<String,? extends Object> args){   return urlEncodeArgs(args,true); } "
"public static boolean storageDirectoryExists(){   return new File(getStorageDirectoryString()).isDirectory(); } "
"static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException { switch (mode) { case NUMERIC:     appendNumericBytes(content,bits);   break; case ALPHANUMERIC: appendAlphanumericBytes(content,bits); break; case BYTE: append8BitBytes(content,bits,encoding); break; case KANJI: appendKanjiBytes(content,bits); break; default : throw new WriterException(\"Invalid mode: \" + mode); } } "
"public int compare(MatchData o1,MatchData o2){   if (o1.firstPosInRef < o2.firstPosInRef)   return -1;   if (o1.firstPosInRef > o2.firstPosInRef)   return 1;   if (o1.lastPosInRef < o2.lastPosInRef)   return 1;   if (o1.lastPosInRef > o2.lastPosInRef)   return -1;   if (o1.read.getId() < o2.read.getId())   return -1;   if (o1.read.getId() > o2.read.getId())   return 1;   return 0; } "
"public void login(String username,String password,String account) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException { synchronized (lock) {     if (!connected) {       throw new IllegalStateException(\"Client not connected\");     }     if (security == SECURITY_FTPES) {       communication.sendFTPCommand(\"AUTH TLS\");       FTPReply r=communication.readFTPReply();       if (r.isSuccessCode()) {         communication.ssl(sslSocketFactory);       }  else {         communication.sendFTPCommand(\"AUTH SSL\");         r=communication.readFTPReply();         if (r.isSuccessCode()) {           communication.ssl(sslSocketFactory);         }  else {           throw new FTPException(r.getCode(),\"SECURITY_FTPES cannot be applied: \" + \"the server refused both AUTH TLS and AUTH SSL commands\");         }       }     }     authenticated=false;     boolean passwordRequired;     boolean accountRequired;     communication.sendFTPCommand(\"USER \" + username);     FTPReply r=communication.readFTPReply(); switch (r.getCode()) { case 230:       passwordRequired=false;     accountRequired=false;   break; case 331: passwordRequired=true; accountRequired=false; break; case 332: passwordRequired=false; accountRequired=true; default : throw new FTPException(r); } if (passwordRequired) { if (password == null) { throw new FTPException(331); } communication.sendFTPCommand(\"PASS \" + password); r=communication.readFTPReply(); switch (r.getCode()) { case 230: accountRequired=false; break; case 332: accountRequired=true; break; default : throw new FTPException(r); } } if (accountRequired) { if (account == null) { throw new FTPException(332); } communication.sendFTPCommand(\"ACCT \" + account); r=communication.readFTPReply(); switch (r.getCode()) { case 230: break; default : throw new FTPException(r); } } this.authenticated=true; this.username=username; this.password=password; } postLoginOperations(); startAutoNoopTimer(); } "
"private void toggleOptionals(@NotNull Optional<Device> device,boolean deviceChange){   boolean IsDevicePresent=device.isPresent();   Hardware deviceDefaultHardware=IsDevicePresent ? device.get().getDefaultHardware() : null;   myChangeSystemImageButton.setEnabled(IsDevicePresent);   myFrontCameraCombo.setEnabled(IsDevicePresent && deviceDefaultHardware.getCamera(CameraLocation.FRONT) != null);   myBackCameraCombo.setEnabled(IsDevicePresent && deviceDefaultHardware.getCamera(CameraLocation.BACK) != null);   myOrientationToggle.setEnabled(IsDevicePresent && device.get().getDefaultState().getOrientation() != ScreenOrientation.SQUARE);   myEnableComputerKeyboard.setEnabled(IsDevicePresent && !deviceDefaultHardware.getKeyboard().equals(Keyboard.QWERTY));   if (deviceChange) {     ScreenOrientation orientation=IsDevicePresent ? device.get().getDefaultState().getOrientation() : ScreenOrientation.PORTRAIT;     myOrientationToggle.setSelectedElement(orientation);   }   File customSkin=getModel().getAvdDeviceData().customSkinFile().getValueOrNull();   File backupSkin=getModel().backupSkinFile().getValueOrNull();   if (backupSkin != null && customSkin == null) {     getModel().hasDeviceFrame().set(false);   }   File hardwareSkin=null;   if (IsDevicePresent && getModel().systemImage().get().isPresent()) {     hardwareSkin=AvdWizardUtils.resolveSkinPath(deviceDefaultHardware.getSkinFile(),getModel().systemImage().getValue(),FileOpUtils.create());     myDeviceName.setIcon(DeviceDefinitionPreview.getIcon(getModel().getAvdDeviceData()));     myDeviceName.setText(getModel().device().getValue().getDisplayName());     updateDeviceDetails();   }   if (customSkin == null) {     if (backupSkin != null) {       customSkin=backupSkin;     }  else {       customSkin=hardwareSkin;     }   }   if (customSkin != null) {     mySkinComboBox.getComboBox().setSelectedItem(customSkin);     getModel().getAvdDeviceData().customSkinFile().setValue(customSkin);   } } "
"private void adjustTargetLocation(Target plus,Target star){   if (plus == null || plus.segment() == null || plus.timing() == -1 || star == null || star.segment() == null || star.timing() == -1)   return;   Element prosody=(Element)DomUtils.getAncestor(plus.segment(),MaryXML.PROSODY);   if (prosody == null)   return;   ProsodicSettings settings=prosodyMap.get(prosody);   assert settings != null;   int accentSlope=settings.accentSlope();   if (accentSlope == 100)   return;  else   if (accentSlope == 0)   accentSlope=1;   int plusTime=plus.getTargetTime();   int starTime=star.getTargetTime();   if (plusTime == -1 || starTime == -1)   return;   int distance=starTime - plusTime;   int newDistance=100 * distance / accentSlope;   int newPlusTime=starTime - newDistance;   if (newPlusTime < 0)   newPlusTime=0;   String oldSegment=plus.segment().getAttribute(\"p\");   boolean success=plus.setTargetTime(newPlusTime);   if (success) {     Log.d(Mary.LOG,\"Accent slope: moved \\\"plus\\\" target from [\" + oldSegment + \"] at \"+ plusTime+ \" ms to [\"+ plus.segment().getAttribute(\"p\")+ \"] at \"+ plus.getTargetTime()+ \" ms.\");   } } "
"public void sort(final Comparator<? super T> comparator){ synchronized (mLock) {     Collections.sort(mList,comparator);   }   notifyDataSetChanged(); } "
"@Override public void onServiceDisconnected(ComponentName name){   mCallbackHandler.obtainMessage(MSG_SHUTDOWN_EXECUTION).sendToTarget(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_A_TO_ME(String skillcaster,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200731,skillcaster,value0,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_INTERVAL_TO_ME(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201153,num0,skillname); } "
"public boolean types_for_sites(){   return soot.PhaseOptions.getBoolean(options,\"types-for-sites\"); } "
"public static ModelIndex create(ModelEntity modelEntity,String description,String name,List<Field> fields,boolean unique){   if (description == null) {     description=\"\";   }   if (name == null) {     name=\"\";   }   if (fields == null) {     fields=Collections.emptyList();   }  else {     fields=Collections.unmodifiableList(fields);   }   return new ModelIndex(modelEntity,description,name,fields,unique); } "
"public TransactionException(String desc){   super(desc); } "
"public static int apply(ViewerBase viewer,Writer writer,boolean showInternalLabels,boolean showUnassignedLabels,boolean simplify) throws IOException {   PhyloTree tree=viewer.getTree();   Node root=tree.getRoot();   if (root == null)   return 0;   NodeSet toUse=null;   if (viewer.getSelectedNodes().size() > 0) {     toUse=new NodeSet(tree);     visitNodesToUseRec(viewer,root,toUse);     while (!viewer.getSelected(root)) {       Node w=null;       for (Edge e=root.getFirstOutEdge(); e != null; e=root.getNextOutEdge(e)) {         if (toUse.contains(e.getTarget())) {           if (w == null)           w=e.getTarget();  else {             w=null;             break;           }         }       }       if (w != null)       root=w;  else       break;     }   }   int countNodes=writeAsTreeRec(viewer,toUse,root,writer,showInternalLabels,showUnassignedLabels,simplify,0);   writer.write(\";\\n\");   return countNodes; } "
"public boolean isMassExplicit(){   return this.massExplicit; } "
"@SuppressLint(\"NewApi\") public static void tryAccessibilityAnnounce(View view,CharSequence text){   if (isJellybeanOrLater() && view != null && text != null) {     view.announceForAccessibility(text);   } } "
"private void select(Rectangle rect,Rectangle selectionRect,int mouseClicks){   if (selectionRect == null || chartSelection == null || mouseClicks != 1)   return;   selectionGraphics.setSelectionRectangle(selectionRect);   selectionGraphics.getSelectedItems().clear();   doPaint(selectionGraphics,rect);   final Collection<Edge> hitEdges=selectionGraphics.getSelectedItems();   if (hitEdges.size() > 0) {     final Set<Node> seen=new HashSet<>();     final Stack<Node> stack=new Stack<>();     for (    Edge e : hitEdges) {       stack.add(e.getTarget());     }     while (stack.size() > 0) {       final Node v=stack.pop();       if (v.getOutDegree() == 0) {         if (type == TYPE.SERIES)         chartSelection.setSelectedSeries(treeView.getLabel(v),true);  else         if (type == TYPE.CLASSES)         chartSelection.setSelectedClass(treeView.getLabel(v),true);  else         if (type == TYPE.ATTRIBUTES)         chartSelection.setSelectedAttribute(treeView.getLabel(v),true);       }  else {         for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {           if (!seen.contains(e.getTarget())) {             stack.push(e.getTarget());             seen.add(e.getTarget());           }         }       }     }   } } "
"public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){   switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList()); } "
"public Website site(){   return mSite; } "
"private int scrollHorizontallyInternal(int dx){   int childCount=getChildCount();   if (childCount == 0) {     return 0;   }   int itemCount=getItemCount();   View leftView=getChildAt(0);   View rightView=getChildAt(childCount - 1);   for (int i=0; i < getChildCount(); i++) {     View view=getChildAt(i);     if (getDecoratedLeft(leftView) > getDecoratedLeft(view)) {       leftView=view;     }     if (getDecoratedRight(rightView) < getDecoratedRight(view)) {       rightView=view;     }   }   int viewSpan=getDecoratedRight(rightView) > getWidth() ? getDecoratedRight(rightView) : getWidth() - (getDecoratedLeft(leftView) < 0 ? getDecoratedLeft(leftView) : 0);   if (viewSpan < getWidth()) {     return 0;   }   int delta=0;   if (dx < 0) {     int firstViewAdapterPos=getPosition(leftView);     if (firstViewAdapterPos > 0) {       delta=dx;     }  else {       int viewLeft=getDecoratedLeft(leftView) - getWidth() / 2 + getDecoratedMeasuredWidth(leftView) / 2;       delta=Math.max(viewLeft,dx);     }   }  else   if (dx > 0) {     int lastViewAdapterPos=getPosition(rightView);     if (lastViewAdapterPos < itemCount - 1) {       delta=dx;     }  else {       int viewRight=getDecoratedRight(rightView) + getWidth() / 2 - getDecoratedMeasuredWidth(rightView) / 2;       int parentRight=getWidth();       delta=Math.min(viewRight - parentRight,dx);     }   }   return delta; } "
"public static WxCurMenuInfoResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {   ObjectMapper mapper=new ObjectMapper();   return mapper.readValue(json,WxCurMenuInfoResult.class); } "
"static int databaseCheck(String stmt,int offset){   int length=offset + _DATABASE.length;   if (stmt.length() >= length && ParseUtil.compare(stmt,offset,_DATABASE)) {     if (stmt.length() > length && stmt.charAt(length) != ' ') {       return OTHER;     }  else {       return DATABASE;     }   }   return OTHER; } "
"public final boolean canGetInt(String field){   Column col=getColumn(field);   return (col == null ? false : col.canGetInt()); } "
"public AudioGetQuery needUser(Boolean value){   return unsafeParam(\"need_user\",value); } "
"public void requestPreviewFrame(Handler handler,int message){   if (mCamera != null && mPreviewing) {     mPreviewCallback.setHandler(handler,message);     mCamera.setOneShotPreviewCallback(mPreviewCallback);   } } "
"public synchronized boolean verifyAndAdvanceState(Byte newStep){   logger.debug(\"NODE {}: ZWaveSecurityCommandClass in verifyAndAdvanceState with newstep={}, currentstep={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(newStep),ZWaveSecurityCommandClass.commandToString(currentStep));   if (!INIT_COMMAND_ORDER_LIST.contains(newStep)) {     return true;   }   if (INIT_COMMAND_ORDER_LIST.indexOf(newStep) > 0) {     int currentIndex=INIT_COMMAND_ORDER_LIST.indexOf(currentStep);     int newIndex=INIT_COMMAND_ORDER_LIST.indexOf(newStep);     if (newIndex != currentIndex && newIndex - currentIndex > 1) {       if (HALT_ON_IMPROPER_ORDER) {         setErrorState(String.format(\"NODE %d: Commands received out of order, aborting current=%s, new=%s\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep)));         return false;       }  else {         logger.warn(\"NODE {}: Commands received out of order (warning only, continuing) current={}, new={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep));       }     }   }   currentStep=newStep;   return true; } "
"public void processUtterance(Utterance utterance) throws ProcessException {   String results;   for (Item syllable=utterance.getRelation(Relation.SYLLABLE).getHead(); syllable != null; syllable=syllable.getNext()) {     results=(String)accentCart.interpret(syllable);     if (!results.equals(\"NONE\")) {       syllable.getFeatures().setString(\"accent\",results);     }     results=(String)toneCart.interpret(syllable);     if (!results.equals(\"NONE\")) {       syllable.getFeatures().setString(\"endtone\",results);     }   } } "
"public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){   HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));   if (headers != null)   httpDelete.setHeaders(headers);   return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context); } "
"private static boolean isWebEndpoint(Method method){   return Stream.of(method.getAnnotations()).anyMatch(null); } "
"public void init$Children(){ } "
"void renamedAttrNode(Attr oldAt,Attr newAt){ } "
"public static ContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){   if (iterable == null) {     throw new NullPointerException(\"iterable\");   }   MutableContextSet set=new MutableContextSet();   set.addAll(iterable);   return set.immutableCopy(); } "
"public GroupsEditManagerQuery(VkApiClient client,UserActor actor,int groupId,int userId){   super(client,\"groups.editManager\",OkResponse.class);   accessToken(actor.getAccessToken());   groupId(groupId);   userId(userId); } "
"@Override public int hashCode(){   int result=31 + MathUtils.hash(getN());   result=result * 31 + MathUtils.hash(getGeometricMean());   result=result * 31 + MathUtils.hash(getMax());   result=result * 31 + MathUtils.hash(getMean());   result=result * 31 + MathUtils.hash(getMin());   result=result * 31 + MathUtils.hash(getSum());   result=result * 31 + MathUtils.hash(getSumSq());   result=result * 31 + MathUtils.hash(getSumLog());   result=result * 31 + getCovariance().hashCode();   return result; } "
"public Builder autoPanPadding(Point autoPanPadding){   this.autoPanPadding=autoPanPadding;   return this; } "
"public void unsubscribe(String subscriptionName) throws JMSException {   ensureOpen();   throw new JMSException(\"This version of JMS does not support durable subscribers.\"); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_TO_ME(int num0){   return new SM_SYSTEM_MESSAGE(1201073,num0); } "
"public void clear(){   actions.clear();   errorCodeMap.clear();   otherwiseActions.clear();   alwaysActions.clear();   if (localContext != null) {     localContext.get().clear();   } } "
"public T[] computeDerivatives(final T t,final T[] y) throws MathIllegalArgumentException, MathIllegalStateException {   final T[] yDot=MathArrays.buildArray(t.getField(),mapper.getTotalDimension());   int index=0;   final T[] primaryState=mapper.extractEquationData(index,y);   final T[] primaryStateDot=primary.computeDerivatives(t,primaryState);   mapper.insertEquationData(index,primaryStateDot,yDot);   while (++index < mapper.getNumberOfEquations()) {     final T[] componentState=mapper.extractEquationData(index,y);     final T[] componentStateDot=components.get(index - 1).computeDerivatives(t,primaryState,primaryStateDot,componentState);     mapper.insertEquationData(index,componentStateDot,yDot);   }   return yDot; } "
"public List<String> updateDeletionStatus(String loadDate,String tableFolderPath,Long loadStartTime) throws Exception {   CarbonTableIdentifier carbonTableIdentifier=absoluteTableIdentifier.getCarbonTableIdentifier();   ICarbonLock carbonDeleteSegmentLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.DELETE_SEGMENT_LOCK);   ICarbonLock carbonTableStatusLock=CarbonLockFactory.getCarbonLockObj(carbonTableIdentifier,LockUsage.TABLE_STATUS_LOCK);   String tableDetails=carbonTableIdentifier.getDatabaseName() + \".\" + carbonTableIdentifier.getTableName();   List<String> invalidLoadTimestamps=new ArrayList<String>(0);   try {     if (carbonDeleteSegmentLock.lockWithRetries()) {       LOG.info(\"Delete segment lock has been successfully acquired\");       CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(absoluteTableIdentifier.getStorePath(),absoluteTableIdentifier.getCarbonTableIdentifier());       String dataLoadLocation=carbonTablePath.getTableStatusFilePath();       LoadMetadataDetails[] listOfLoadFolderDetailsArray=null;       if (!FileFactory.isFileExist(dataLoadLocation,FileFactory.getFileType(dataLoadLocation))) {         LOG.error(\"Error message: \" + \"Load metadata file is not present.\");         invalidLoadTimestamps.add(loadDate);         return invalidLoadTimestamps;       }       listOfLoadFolderDetailsArray=readLoadMetadata(tableFolderPath);       if (listOfLoadFolderDetailsArray != null && listOfLoadFolderDetailsArray.length != 0) {         updateDeletionStatus(loadDate,listOfLoadFolderDetailsArray,invalidLoadTimestamps,loadStartTime);         if (invalidLoadTimestamps.isEmpty()) {           if (carbonTableStatusLock.lockWithRetries()) {             LOG.info(\"Table status lock has been successfully acquired.\");             writeLoadDetailsIntoFile(dataLoadLocation,listOfLoadFolderDetailsArray);           }  else {             String errorMsg=\"Delete segment by date is failed for \" + tableDetails + \". Not able to acquire the table status lock due to other operation running \"+ \"in the background.\";             LOG.audit(errorMsg);             LOG.error(errorMsg);             throw new Exception(errorMsg + \" Please try after some time.\");           }         }  else {           return invalidLoadTimestamps;         }       }  else {         LOG.audit(\"Delete segment by date is failed. No matching segment found.\");         invalidLoadTimestamps.add(loadDate);         return invalidLoadTimestamps;       }     }  else {       String errorMsg=\"Delete segment by date is failed for \" + tableDetails + \". Not able to acquire the delete segment lock due to another delete \"+ \"operation is running in the background.\";       LOG.audit(errorMsg);       LOG.error(errorMsg);       throw new Exception(errorMsg + \" Please try after some time.\");     }   }  catch (  IOException e) {     LOG.error(\"Error message: \" + \"IOException\" + e.getMessage());   }  finally {     CarbonLockUtil.fileUnlock(carbonTableStatusLock,LockUsage.TABLE_STATUS_LOCK);     CarbonLockUtil.fileUnlock(carbonDeleteSegmentLock,LockUsage.DELETE_SEGMENT_LOCK);   }   return invalidLoadTimestamps; } "
"@Override public Object invoke(MethodInvocation methodInvocation) throws Throwable {   return isObjectMethodCall(methodInvocation) ? methodInvocation.proceed() : switchFrameAndProceed(methodInvocation); } "
"public Project withDefaults(){   setOpenSource(false);   return this; } "
"public void updateSizes(int size){   if (size == LARGE) {     setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);   }  else {     setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);   } } "
"synchronized double acquire(double minTokens,double maxTokens){   refill();   double avail=Math.floor(Math.min(maxTokens,tokens));   if (avail >= minTokens) {     tokens-=avail;     return avail;   }   return 0.0f; } "
"private static void drawTableLayoutGuidelines(ViewTransform transform,Graphics2D g,ConstraintTableLayout table){   Graphics2D g2=(Graphics2D)g.create();   ArrayList<Guideline> vertical=table.getVerticalGuidelines();   ArrayList<Guideline> horizontal=table.getHorizontalGuidelines();   g2.setStroke(SnapDraw.sThinDashedStroke);   int l=transform.getSwingX(table.getDrawX());   int t=transform.getSwingY(table.getDrawY());   int r=transform.getSwingX(table.getDrawX() + table.getDrawWidth());   int b=transform.getSwingY(table.getDrawY() + table.getDrawHeight());   for (  ConstraintWidget v : vertical) {     int x=transform.getSwingX(v.getX()) + l;     g2.drawLine(x,t,x,b);   }   for (  ConstraintWidget h : horizontal) {     int y=transform.getSwingY(h.getY()) + t;     g2.drawLine(l,y,r,y);   }   g2.dispose(); } "
"public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){   HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));   if (headers != null)   httpDelete.setHeaders(headers);   return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context); } "
"public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){   fn_=Objects.requireNonNull(fn);   equality_=Objects.requireNonNull(equality); } "
"@Override public String toString(){   return \"Sequence\" + sequence; } "
"public LegendreParametricTest(int numberOfPoints,int maxDegree,double eps,double numUlps){   super(factory.legendre(numberOfPoints),maxDegree,eps,numUlps); } "
"public PhotosGetTagsQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"public static byte[] decode(String encoded){   if (encoded == null)   return null;   char[] base64Data=encoded.toCharArray();   int len=removeWhiteSpace(base64Data);   if (len % FOURBYTE != 0) {     return null;   }   int numberQuadruple=(len / FOURBYTE);   if (numberQuadruple == 0)   return new byte[0];   byte decodedData[]=null;   byte b1=0, b2=0, b3=0, b4=0;   char d1=0, d2=0, d3=0, d4=0;   int i=0;   int encodedIndex=0;   int dataIndex=0;   decodedData=new byte[(numberQuadruple) * 3];   for (; i < numberQuadruple - 1; i++) {     if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++])))     return null;     b1=base64Alphabet[d1];     b2=base64Alphabet[d2];     b3=base64Alphabet[d3];     b4=base64Alphabet[d4];     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);   }   if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {     return null;   }   b1=base64Alphabet[d1];   b2=base64Alphabet[d2];   d3=base64Data[dataIndex++];   d4=base64Data[dataIndex++];   if (!isData((d3)) || !isData((d4))) {     if (isPad(d3) && isPad(d4)) {       if ((b2 & 0xf) != 0)       return null;       byte[] tmp=new byte[i * 3 + 1];       System.arraycopy(decodedData,0,tmp,0,i * 3);       tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);       return tmp;     }  else     if (!isPad(d3) && isPad(d4)) {       b3=base64Alphabet[d3];       if ((b3 & 0x3) != 0)       return null;       byte[] tmp=new byte[i * 3 + 2];       System.arraycopy(decodedData,0,tmp,0,i * 3);       tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);       tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));       return tmp;     }  else {       return null;     }   }  else {     b3=base64Alphabet[d3];     b4=base64Alphabet[d4];     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);   }   return decodedData; } "
"protected String retrieveIndexFormat(String prefix,long millis){   String result; switch (indexFormat) { case \"D\": case \"d\":     result=prefix + millisecondsToYearMonthDay(millis);   break; case \"W\": case \"w\": result=prefix + millisecondsToYearWeek(millis); break; case \"M\": case \"m\": default : result=prefix + millisecondsToYearMonth(millis); } return result.toLowerCase(); } "
"public WallDeleteQuery delete(UserActor actor){   return new WallDeleteQuery(getClient(),actor); } "
"public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_LEAVED_PARTY_OFFLINE_TIMEOUT(String value0){   return new SM_SYSTEM_MESSAGE(1300203,value0); } "
"private void loadStats(String resource,Object u) throws Exception {   DescriptiveStatistics d=null;   StreamingStatistics s=null;   if (u instanceof DescriptiveStatistics) {     d=(DescriptiveStatistics)u;     d.clear();   }  else {     s=(StreamingStatistics)u;     s.clear();   }   mean=Double.NaN;   std=Double.NaN;   InputStream resourceAsStream=CertifiedDataTest.class.getResourceAsStream(resource);   Assert.assertNotNull(\"Could not find resource \" + resource,resourceAsStream);   BufferedReader in=new BufferedReader(new InputStreamReader(resourceAsStream));   String line=null;   for (int j=0; j < 60; j++) {     line=in.readLine();     if (j == 40) {       mean=Double.parseDouble(line.substring(line.lastIndexOf(\":\") + 1).trim());     }     if (j == 41) {       std=Double.parseDouble(line.substring(line.lastIndexOf(\":\") + 1).trim());     }   }   line=in.readLine();   while (line != null) {     if (d != null) {       d.addValue(Double.parseDouble(line.trim()));     }  else {       s.addValue(Double.parseDouble(line.trim()));     }     line=in.readLine();   }   resourceAsStream.close();   in.close(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_A_TO_SELF(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200773,skillcaster,skillname); } "
"public boolean isCurrentSet(){   return currentTaxonIterator != null && currentTaxonId != null; } "
"public void removeCategoriesListener(SnapshotCategoriesListener listener){   listeners.remove(listener); } "
"private int deleteAssociatedJoinTableRows(DataSupport baseObj){   int rowsAffected=0;   Set<String> associatedTableNames=baseObj.getAssociatedModelsMapForJoinTable().keySet();   for (  String associatedTableName : associatedTableNames) {     String joinTableName=DBUtility.getIntermediateTableName(baseObj.getTableName(),associatedTableName);     String fkName=getForeignKeyColumnName(baseObj.getTableName());     rowsAffected+=mDatabase.delete(joinTableName,fkName + \" = \" + baseObj.getBaseObjId(),null);   }   return rowsAffected; } "
"private void fillBuf() throws IOException {   int result=in.read(buf,0,buf.length);   if (result == -1) {     throw new EOFException();   }   pos=0;   end=result; } "
"@Override public void actionPerformed(ActionEvent ev){   getViewer().selectComponent(getViewer().getUpgmaTab()); } "
"public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {   writeLines(lines,lineEnding,output,Charsets.toCharset(encoding)); } "
"public JSONArray(String source) throws JSONException {   this(new JSONTokener(source)); } "
"int readCorner3(int numRows,int numColumns){   int currentByte=0;   if (readModule(numRows - 1,0,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 3,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 3,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   return currentByte; } "
"@Override public void empty(Augmentations augs) throws XNIException { } "
"private void displayCustomProcessFunction(String selectedValue){   ProcessBriefType selectedFunction=null;   for (  ProcessBriefType function : availableFunctionList) {     if (function.getIdentifier().getValue().compareTo(selectedValue) == 0) {       selectedFunction=function;       break;     }   }   functionParameterTableModel.populate(selectedFunction); } "
"public static void marshalValue(Class type,Object value,ObjectOutput out) throws IOException {   if (type.isPrimitive()) {     if (type == int.class) {       out.writeInt(((Integer)value).intValue());     }  else     if (type == boolean.class) {       out.writeBoolean(((Boolean)value).booleanValue());     }  else     if (type == long.class) {       out.writeLong(((Long)value).longValue());     }  else     if (type == short.class) {       out.writeShort(((Short)value).shortValue());     }  else     if (type == float.class) {       out.writeFloat(((Float)value).floatValue());     }  else     if (type == double.class) {       out.writeDouble(((Double)value).doubleValue());     }  else     if (type == char.class) {       out.writeChar(((Character)value).charValue());     }  else     if (type == byte.class) {       out.writeByte(((Byte)value).byteValue());     }  else {       throw new AssertionError(\"Unrecognized primitive type: \" + type);     }   }  else {     out.writeObject(value);   } } "
"protected String normalizeAppName(String app){   String app2=app.replaceAll(\"\\\\W\",\"\");   if (app.length() == 0) {     throw new IllegalArgumentException(\"Bad app name: \" + app);   }   return app2; } "
"public String localName(String name){   int colon=name.indexOf(':');   if (colon == -1) {     return name;   }  else {     return name.substring(colon + 1).intern();   } } "
"public static InputStream toInputStream(String input,Charset encoding){   return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding))); } "
"public static String addAdditionalParty(HttpServletRequest request,HttpServletResponse response){   ShoppingCart cart=getCartObject(request);   String partyId=request.getParameter(\"additionalPartyId\");   String roleTypeId[]=request.getParameterValues(\"additionalRoleTypeId\");   List<String> eventList=new LinkedList<String>();   Locale locale=UtilHttp.getLocale(request);   int i;   if (UtilValidate.isEmpty(partyId) || UtilValidate.isEmpty(roleTypeId) || roleTypeId.length < 1) {     request.setAttribute(\"_ERROR_MESSAGE_\",UtilProperties.getMessage(resource_error,\"OrderPartyIdAndOrRoleTypeIdNotDefined\",locale));     return \"error\";   }   if (request.getAttribute(\"_EVENT_MESSAGE_LIST_\") != null) {     List<String> msg=UtilGenerics.checkList(request.getAttribute(\"_EVENT_MESSAGE_LIST_\"));     eventList.addAll(msg);   }   for (i=0; i < roleTypeId.length; i++) {     try {       cart.addAdditionalPartyRole(partyId,roleTypeId[i]);     }  catch (    Exception e) {       eventList.add(e.getLocalizedMessage());     }   }   request.removeAttribute(\"_EVENT_MESSAGE_LIST_\");   request.setAttribute(\"_EVENT_MESSAGE_LIST_\",eventList);   return \"success\"; } "
"@Override public int read() throws IOException {   if (this.remaining == 0) {     return -1;   }  else {     int var1=this.in.read();     if (var1 >= 0) {       --this.remaining;     }     return var1;   } } "
"public boolean areFieldsConfigured(){   return ((datePicker != null) && (timePicker != null) && (timeEditor != null)&& (yearSpinner != null)&& (monthSpinner != null)&& (daySpinner != null)&& (dateCheckbox != null)&& (timeCheckbox != null)&& (hourSpinner != null)&& (minuteSpinner != null)&& (secondSpinner != null)&& (durationRadioButton != null)&& (dateRadioButton != null)&& (panel != null)); } "
"public DFAContentModel(CMNode syntaxTree,int leafCount,boolean mixed){   fLeafCount=leafCount;   fMixed=mixed;   buildDFA(syntaxTree); } "
"public String toShortString(){   return exited() ? (\"Exit \" + getExitCode()) : (getSignalString(getTerminatingSignal())); } "
"public static UserLayer createNewUserLayer(){   UserLayer userLayer=styleFactory.createUserLayer();   return userLayer; } "
"public static StringBuilder makeWhereStringFromFields(StringBuilder sb,List<ModelField> modelFields,Map<String,Object> fields,String operator,List<EntityConditionParam> entityConditionParams){   if (modelFields.size() < 1) {     return sb;   }   Iterator<ModelField> iter=modelFields.iterator();   while (iter.hasNext()) {     Object item=iter.next();     Object name=null;     ModelField modelField=null;     if (item instanceof ModelField) {       modelField=(ModelField)item;       sb.append(modelField.getColValue());       name=modelField.getName();     }  else {       sb.append(item);       name=item;     }     Object fieldValue=fields.get(name);     if (fieldValue != null && fieldValue != GenericEntity.NULL_FIELD) {       sb.append('=');       addValue(sb,modelField,fieldValue,entityConditionParams);     }  else {       sb.append(\" IS NULL\");     }     if (iter.hasNext()) {       sb.append(' ');       sb.append(operator);       sb.append(' ');     }   }   return sb; } "
"public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {   if (this.widgetCommentsEnabled) {     StringWriter sr=new StringWriter();     sr.append(\"<@formatBoundaryComment \");     sr.append(\" boundaryType=\");     sr.append(ftlFmt.makeStringLiteral(\"Begin\"));     sr.append(\" widgetType=\");     sr.append(ftlFmt.makeStringLiteral(widgetType));     sr.append(\" widgetName=\");     sr.append(ftlFmt.makeStringLiteral(modelWidget.getBoundaryCommentName()));     sr.append(\" />\");     executeMacro(writer,sr.toString());   } } "
"public SimpleMqttConnection(final ReconnectionManager reconnectionManager,final String id,final MqttConnectionDetails connectionDetails) throws ConfigurationException {   super(reconnectionManager,new MqttConnectionDetailsWithOptions(id,connectionDetails)); } "
"public static double log2(double a){   if (a == 0)   return 0.0;   return Math.log(a) / log2; } "
"public void rejectDocument(NGramDocument dDoc,double fLearningRate){   dDoc.getDocumentGraph().nullify();   dDoc.getDocumentHistogram().nullify();   if (this.getDocumentHistogram().length() > 0)   getDocumentHistogram().mergeHistogram(dDoc.getDocumentHistogram(),fLearningRate);   if (!this.getDocumentGraph().isEmpty())   this.getDocumentGraph().mergeGraph(dDoc.getDocumentGraph(),fLearningRate); } "
"public void writeRegisterRange(IndentingWriter writer,int startRegister,int lastRegister) throws IOException {   if (!options.noParameterRegisters) {     assert startRegister <= lastRegister;     if (startRegister >= registerCount - parameterRegisterCount) {       writer.write(\"{p\");       writer.printSignedIntAsDec(startRegister - (registerCount - parameterRegisterCount));       writer.write(\" .. p\");       writer.printSignedIntAsDec(lastRegister - (registerCount - parameterRegisterCount));       writer.write('}');       return;     }   }   writer.write(\"{v\");   writer.printSignedIntAsDec(startRegister);   writer.write(\" .. v\");   writer.printSignedIntAsDec(lastRegister);   writer.write('}'); } "
"public static WebSiteProperties from(HttpServletRequest request) throws GenericEntityException {   Assert.notNull(\"request\",request);   WebSiteProperties webSiteProps=(WebSiteProperties)request.getAttribute(\"_WEBSITE_PROPS_\");   if (webSiteProps == null) {     webSiteProps=newFrom(request,WebSiteWorker.getWebSiteId(request));     request.setAttribute(\"_WEBSITE_PROPS_\",webSiteProps);   }   return webSiteProps; } "
"public void assertTextPresent(String expected,String actual){   if ((actual == null) || (!actual.contains(expected))) {     throw new AssertionFailedError(\"expected presence of [\" + expected + \"], but was [\"+ actual+ \"]\");   } } "
"public boolean isIgnoreInactive(){   return this.ignoreInactive; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_ME_TO_B(String value0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200576,value0,skilltarget,skillname); } "
"void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){   cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey); } "
"public boolean containsSink(Stmt sink){   for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().equals(sink))   return true;   return false; } "
"private static void writeId(JsonGenerator gen,Object data,ResourceInformation resourceInformation) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, IOException {   ResourceField idField=resourceInformation.getIdField();   Object sourceId=PropertyUtils.getProperty(data,idField.getUnderlyingName());   String strSourceId=resourceInformation.toIdString(sourceId);   gen.writeObjectField(ID_FIELD_NAME,strSourceId); } "
"protected AbstractUnivariateDifferentiableSolver(final double absoluteAccuracy){   super(absoluteAccuracy); } "
"public CholeskyDecomposition(Matrix Arg){   double[][] A=Arg.getArray();   n=Arg.getRowDimension();   L=new double[n][n];   isspd=(Arg.getColumnDimension() == n);   for (int j=0; j < n; j++) {     double[] Lrowj=L[j];     double d=0.0;     for (int k=0; k < j; k++) {       double[] Lrowk=L[k];       double s=0.0;       for (int i=0; i < k; i++) {         s+=Lrowk[i] * Lrowj[i];       }       Lrowj[k]=s=(A[j][k] - s) / L[k][k];       d=d + s * s;       isspd=isspd & (A[k][j] == A[j][k]);     }     d=A[j][j] - d;     isspd=isspd & (d > 0.0);     L[j][j]=Math.sqrt(Math.max(d,0.0));     for (int k=j + 1; k < n; k++) {       L[j][k]=0.0;     }   } } "
"public Z(double x,double y){   re=x;   im=y; } "
"public boolean isCannotGiveup(){   if (cannotGiveup == null) {     return false;   }  else {     return cannotGiveup;   } } "
"public static AnnotateView openInActivePerspective() throws PartInitException {   return (AnnotateView)SVNUIPlugin.getActivePage().showView(VIEW_ID); } "
"public static short quantize(float f,float fMin,float fRange){   return ((short)(((double)f - (double)fMin) * 65535.0 / (fRange) - 32768.0)); } "
"public static FloatBuffer createVector3Buffer(FloatBuffer buf,int vertices){   if (buf != null && buf.limit() == 3 * vertices) {     buf.rewind();     return buf;   }   return createFloatBuffer(3 * vertices); } "
"public static Predicate<EmailData> containsText(final String text){   return null; } "
"public static void deleteCachedLocations(){   FileHelper.deleteFile(LOCATION_FILE);   SAVED_LOCATIONS.clear();   System.out.println(\"Deleted cached locations.\"); } "
"public boolean isNone(String selectedItem){   return (selectedItem.compareTo(NO_FILL_VALUE) == 0); } "
"public AccessPath mayAlias(AccessPath ap,Value val){   if (!AccessPath.canContainValue(val))   return null;   if (val instanceof Constant)   return null;   if (val instanceof Local)   if (ap.getPlainValue() != val)   return null;   if (val instanceof ArrayRef)   if (ap.getPlainValue() != ((ArrayRef)val).getBase())   return null;   if (val instanceof InstanceFieldRef) {     if (!ap.isLocal() && !ap.isInstanceFieldRef())     return null;     if (((InstanceFieldRef)val).getBase() != ap.getPlainValue())     return null;   }   if (val instanceof StaticFieldRef)   if (!ap.isStaticFieldRef())   return null;   SootField[] fields=val instanceof FieldRef ? new SootField[]{((FieldRef)val).getField()} : new SootField[0];   return getReferencedAPBase(ap,fields); } "
"private void download(boolean neutral,List<Selectable> list){   for (int i=0; i != list.size(); ++i) {     if ((neutral || list.get(i).isChecked()) && !list.get(i).isDisable()) {       mDownloadList.add(mDetailAdapter.getItem(i));     }   }   if (!mDownloadList.isEmpty()) {     showProgressDialog();     if (PermissionUtils.requestPermission(this,REQUEST_DOWNLOAD)) {       mPresenter.updateIndex(mDetailAdapter.getDateSet());     }   } } "
"public void writeContentType(String type) throws IOException {   writeHeader(HttpWriter.CONTENT_TYPE,type); } "
"public boolean splitsTaxa(BitSet taxa){   return A.intersects(taxa) && B.intersects(taxa); } "
"public TestBase(){   init();   simpleGson=new GsonBuilder().create(); } "
"public double[] toSplitDouble(){   double split[]=new double[2];   long mask=0xffffffffc0000000L;   split[0]=Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);   split[1]=subtract(newInstance(split[0])).toDouble();   return split; } "
"public void write(String filename) throws DataIOException {   try {     write(new FileOutputStream(filename));   }  catch (  FileNotFoundException e) {     throw new DataIOException(e);   } } "
"private SpaceContext cacheIt(IRemoteSpace rj,SecurityContext securityContext) throws RemoteException {   SpaceContext spaceContext=proxy.getProxyRouter().getDefaultSpaceContext().createCopy(securityContext);   cache.put(rj.getSpaceUuid(),spaceContext);   return spaceContext; } "
"private void computeValues(){   logger.debug(\"Computing the final values for the edge functions\");   Map<N,Set<D>> allSeeds=new HashMap<N,Set<D>>(initialSeeds);   for (  N unbalancedRetSite : unbalancedRetSites) {     Set<D> seeds=allSeeds.get(unbalancedRetSite);     if (seeds == null) {       seeds=new HashSet<D>();       allSeeds.put(unbalancedRetSite,seeds);     }     seeds.add(zeroValue);   }   for (  Entry<N,Set<D>> seed : allSeeds.entrySet()) {     N startPoint=seed.getKey();     for (    D val : seed.getValue()) {       setVal(startPoint,val,valueLattice.bottomElement());       Pair<N,D> superGraphNode=new Pair<N,D>(startPoint,val);       scheduleValueProcessing(new ValuePropagationTask(superGraphNode));     }   }   logger.debug(\"Computed the final values of the edge functions\");   try {     executor.awaitCompletion();   }  catch (  InterruptedException e) {     e.printStackTrace();   }   Set<N> allNonCallStartNodes=icfg.allNonCallStartNodes();   @SuppressWarnings(\"unchecked\") N[] nonCallStartNodesArray=(N[])new Object[allNonCallStartNodes.size()];   int i=0;   for (  N n : allNonCallStartNodes) {     nonCallStartNodesArray[i]=n;     i++;   }   for (int t=0; t < numThreads; t++) {     ValueComputationTask task=new ValueComputationTask(nonCallStartNodesArray,t);     scheduleValueComputationTask(task);   }   try {     executor.awaitCompletion();   }  catch (  InterruptedException e) {     e.printStackTrace();   } } "
"public static Map<String,Object> prodMakeFeatureTree(DispatchContext dctx,Map<String,? extends Object> context){   String productStoreId=(String)context.get(\"productStoreId\");   Locale locale=(Locale)context.get(\"locale\");   Delegator delegator=dctx.getDelegator();   LocalDispatcher dispatcher=dctx.getDispatcher();   Map<String,Object> result=FastMap.newInstance();   List<String> featureOrder=UtilMisc.makeListWritable(UtilGenerics.<String>checkCollection(context.get(\"featureOrder\")));   if (UtilValidate.isEmpty(featureOrder)) {     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ProductFeatureTreeCannotFindFeaturesList\",locale));   }   List<GenericValue> variants=UtilGenerics.checkList(prodFindAllVariants(dctx,context).get(\"assocProducts\"));   List<String> virtualVariant=FastList.newInstance();   if (UtilValidate.isEmpty(variants)) {     return ServiceUtil.returnSuccess();   }   List<String> items=FastList.newInstance();   List<GenericValue> outOfStockItems=FastList.newInstance();   for (  GenericValue variant : variants) {     String productIdTo=variant.getString(\"productIdTo\");     GenericValue productTo=null;     try {       productTo=EntityQuery.use(delegator).from(\"Product\").where(\"productId\",productIdTo).cache().queryOne();     }  catch (    GenericEntityException e) {       Debug.logError(e,module);       Map<String,String> messageMap=UtilMisc.toMap(\"productIdTo\",productIdTo,\"errMessage\",e.toString());       return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"productservices.error_finding_associated_variant_with_ID_error\",messageMap,locale));     }     if (productTo == null) {       Debug.logWarning(\"Could not find associated variant with ID \" + productIdTo + \", not showing in list\",module);       continue;     }     java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();     if (productTo.get(\"introductionDate\") != null && nowTimestamp.before(productTo.getTimestamp(\"introductionDate\"))) {       if (Debug.verboseOn()) {         String excMsg=\"Tried to view the Product \" + productTo.getString(\"productName\") + \" (productId: \"+ productTo.getString(\"productId\")+ \") as a variant. This product has not yet been made available for sale, so not adding for view.\";         Debug.logVerbose(excMsg,module);       }       continue;     }     if (productTo.get(\"salesDiscontinuationDate\") != null && nowTimestamp.after(productTo.getTimestamp(\"salesDiscontinuationDate\"))) {       if (Debug.verboseOn()) {         String excMsg=\"Tried to view the Product \" + productTo.getString(\"productName\") + \" (productId: \"+ productTo.getString(\"productId\")+ \") as a variant. This product is no longer available for sale, so not adding for view.\";         Debug.logVerbose(excMsg,module);       }       continue;     }     Boolean checkInventory=(Boolean)context.get(\"checkInventory\");     try {       if (checkInventory) {         Map<String,Object> invReqResult=dispatcher.runSync(\"isStoreInventoryAvailableOrNotRequired\",UtilMisc.<String,Object>toMap(\"productStoreId\",productStoreId,\"productId\",productIdTo,\"quantity\",BigDecimal.ONE));         if (ServiceUtil.isError(invReqResult)) {           return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ProductFeatureTreeCannotCallIsStoreInventoryRequired\",locale),null,null,invReqResult);         }  else         if (\"Y\".equals(invReqResult.get(\"availableOrNotRequired\"))) {           items.add(productIdTo);           if (productTo.getString(\"isVirtual\") != null && productTo.getString(\"isVirtual\").equals(\"Y\")) {             virtualVariant.add(productIdTo);           }         }  else {           outOfStockItems.add(productTo);         }       }  else {         items.add(productIdTo);         if (productTo.getString(\"isVirtual\") != null && productTo.getString(\"isVirtual\").equals(\"Y\")) {           virtualVariant.add(productIdTo);         }       }     }  catch (    GenericServiceException e) {       Debug.logError(e,\"Error calling the isStoreInventoryRequired when building the variant product tree: \" + e.toString(),module);       return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ProductFeatureTreeCannotCallIsStoreInventoryRequired\",locale));     }   }   String productId=(String)context.get(\"productId\");   List<GenericValue> selectableFeatures=null;   try {     selectableFeatures=EntityQuery.use(delegator).from(\"ProductFeatureAndAppl\").where(\"productId\",productId,\"productFeatureApplTypeId\",\"SELECTABLE_FEATURE\").orderBy(\"sequenceNum\").cache(true).filterByDate().queryList();   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,\"productservices.empty_list_of_selectable_features_found\",locale));   }   Map<String,List<String>> features=FastMap.newInstance();   for (  GenericValue v : selectableFeatures) {     String featureType=v.getString(\"productFeatureTypeId\");     String feature=v.getString(\"description\");     if (!features.containsKey(featureType)) {       List<String> featureList=FastList.newInstance();       featureList.add(feature);       features.put(featureType,featureList);     }  else {       List<String> featureList=features.get(featureType);       featureList.add(feature);       features.put(featureType,featureList);     }   }   Map<String,Object> tree=null;   try {     tree=makeGroup(delegator,features,items,featureOrder,0);   }  catch (  Exception e) {     Debug.logError(e,module);     return ServiceUtil.returnError(e.getMessage());   }   if (UtilValidate.isEmpty(tree)) {     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);     result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,\"productservices.feature_grouping_came_back_empty\",locale));   }  else {     result.put(\"variantTree\",tree);     result.put(\"virtualVariant\",virtualVariant);     result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);   }   Map<String,GenericValue> sample=null;   try {     sample=makeVariantSample(dctx.getDelegator(),features,items,featureOrder.get(0));   }  catch (  Exception e) {     return ServiceUtil.returnError(e.getMessage());   }   if (outOfStockItems.size() > 0) {     result.put(\"unavailableVariants\",outOfStockItems);   }   result.put(\"variantSample\",sample);   result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);   return result; } "
"public synchronized byte[] toByteArray(){   int remaining=count;   if (remaining == 0) {     return EMPTY_BYTE_ARRAY;   }   byte newbuf[]=new byte[remaining];   int pos=0;   for (  byte[] buf : buffers) {     int c=Math.min(buf.length,remaining);     System.arraycopy(buf,0,newbuf,pos,c);     pos+=c;     remaining-=c;     if (remaining == 0) {       break;     }   }   return newbuf; } "
"public Builder pointerEvents(String pointerEvents){   this.pointerEvents=pointerEvents;   return this; } "
"public boolean implies(Permission p){   if (!(p instanceof DiscoveryPermission))   return false;   String grp=p.getName();   String group=getName();   if (group.startsWith(\"*\")) {     if (group.length() == 1)     return true;     if (grp.length() == 1)     return false;     return (grp.length() >= group.length() && group.regionMatches(false,2,grp,grp.length() - group.length() + 2,group.length() - 2));   }   if (grp.startsWith(\"*\"))   return false;   return group.equals(grp); } "
"public boolean absolute(int row) throws SQLException {   throw new SQLException(\"Command not Supported!\",\"GSP\",-132); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200905,skilltarget); } "
"public void apply(Predicate<TM> predicate){   lock();   try {     for (    TM member : members.values()) {       if (!predicate.apply(member)) {         return;       }     }   }   finally {     unlock();   } } "
"public void append(int key,E value){   if (mSize != 0 && key <= mKeys[mSize - 1]) {     put(key,value);     return;   }   if (mGarbage && mSize >= mKeys.length) {     gc();   }   int pos=mSize;   if (pos >= mKeys.length) {     int n=Math.max(pos + 1,mKeys.length * 2);     int[] nkeys=new int[n];     Object[] nvalues=new Object[n];     System.arraycopy(mKeys,0,nkeys,0,mKeys.length);     System.arraycopy(mValues,0,nvalues,0,mValues.length);     mKeys=nkeys;     mValues=nvalues;   }   mKeys[pos]=key;   mValues[pos]=value;   mSize=pos + 1; } "
"@NotNull public static String dominantEmotion(@NotNull Emotion emotion){   Map<Emotion.EmotionScore,Double> scores=emotion.scores.scores();   Emotion.EmotionScore key=scores.entrySet().stream().max(null).get().getKey();   return StringUtils.capitalize(key.name()); } "
"public static void showProfile(Activity activity,String pilotId,@Nullable HashMap<String,String> extras){   if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {     pilotId=AirMap.getUserId();   }   Intent intent=new Intent(activity,ProfileActivity.class);   intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);   if (extras != null) {     intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);   }   activity.startActivity(intent); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public DoubleLiteral fullCopy(){   DoubleLiteral tree=(DoubleLiteral)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public static void initializeProperties(String propertiesFile){   ProgramProperties.setPropertiesFileName(propertiesFile);   ProgramProperties.setProgramIcon(ResourceManager.getIcon(\"megan64.gif\"));   ProgramProperties.put(MEGANFILE,System.getProperty(\"user.dir\"));   ProgramProperties.put(SAVEFILE,System.getProperty(\"user.dir\"));   ProgramProperties.put(EXPORTFILE,System.getProperty(\"user.dir\"));   ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);   ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);   ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);   ProgramProperties.put(BLASTFILE,\"\");   ProgramProperties.put(BLASTOUTFILE,\"\");   ProgramProperties.put(PVALUE_COLOR,Color.YELLOW);   ProgramProperties.put(RECENTFILES,\"\");   ProgramProperties.put(MAXRECENTFILES,30);   ProgramProperties.put(ExportImageDialog.GRAPHICSFORMAT,\".pdf\");   ProgramProperties.put(ExportImageDialog.GRAPHICSDIR,System.getProperty(\"user.dir\"));   ProgramProperties.put(DISABLED_TAXA,new int[]{32644,37965,134367,2323,28384,61964,48510,47936,186616,12908,48479,156614,367897});   ProgramProperties.load(propertiesFile);   if (!ProgramProperties.get(\"Version\",\"\").equals(ProgramProperties.getProgramName())) {     ProgramProperties.put(\"Version\",ProgramProperties.getProgramName());     ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);     ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);     ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);   }   ProgramProperties.put(MeganProperties.DEFAULT_PROPERTIES,\"\");   ReadMagnitudeParser.setEnabled(ProgramProperties.get(\"allow-read-weights\",false));   ReadMagnitudeParser.setUnderScoreEnabled(ProgramProperties.get(\"allow-read-weights-underscore\",false)); } "
"private Object readResolve(){   return forName(name); } "
"@Override protected void onDetachedFromWindow(){   super.onDetachedFromWindow();   if (mReceiver != null) {     mContext.unregisterReceiver(mReceiver);   } } "
"public static String upperFirstChar(String string){   if (string == null)   return null;   if (string.length() <= 1)   return string.toLowerCase();   StringBuilder sb=new StringBuilder(string);   sb.setCharAt(0,Character.toUpperCase(sb.charAt(0)));   return sb.toString(); } "
"private void handleWhitespace(){   int oldPos=pos - 1;   while (pos < buffer.length) {     char c=buffer[pos]; switch (c) { case ' ': case '\\t': case '\\r':       pos++;     break; default :   if (lineHasPrecedingNonWhitespaceChar || c == '#' || c == '\\n') {     tokens.add(new Token(ProjectViewTokenType.WHITESPACE,oldPos,pos));   }  else {     tokens.add(new Token(ProjectViewTokenType.INDENT,oldPos,pos));   } return; } } tokens.add(new Token(ProjectViewTokenType.WHITESPACE,oldPos,pos)); } "
"private boolean peerExists(String id){   if (id == null)   return false;   for (  Peer peer : peerList) {     if (id.equals(peer.getPeerId())) {       return true;     }   }   return false; } "
"public boolean isLegionMember(){   return legionMember != null; } "
"public Expression isNotEmpty(Value target){   throw new RuntimeException(\"Unsupported operation.\"); } "
"public Skype(String username,String password){   this.username=username;   this.password=password; } "
"public PlacesGetCheckinsQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"public static String makeSafe(String s){   return (s == null) ? \"\" : s; } "
"public static void main(String[] args){   Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);   if (getSwitch(hSwitches,\"help\",\"\").length() > 0) {     printUsage();     System.exit(0);   }   String sCorpusDir=getSwitch(hSwitches,\"corpusDir\",\".\" + System.getProperty(\"file.separator\"));   int iMinNGram=Integer.valueOf(getSwitch(hSwitches,\"minNGram\",\"3\")).intValue();   int iMaxNGram=Integer.valueOf(getSwitch(hSwitches,\"maxNGram\",\"8\")).intValue();   int iCategoriesForGrammar=Integer.valueOf(getSwitch(hSwitches,\"categoriesForGrammar\",\"2\")).intValue();   int iWindowSize=Integer.valueOf(getSwitch(hSwitches,\"windowSize\",String.valueOf(2 * iMinNGram <= iMaxNGram ? iMaxNGram + 1 : 2 * iMinNGram))).intValue();   double dTrainPercent=Double.valueOf(getSwitch(hSwitches,\"trainPercent\",\"0.20\")).doubleValue();   double dPartOfCorpus=Double.valueOf(getSwitch(hSwitches,\"partOfCorpus\",\"1.00\")).doubleValue();   boolean bSave=Boolean.valueOf(getSwitch(hSwitches,\"save\",String.valueOf(false))).booleanValue();   boolean bLoad=Boolean.valueOf(getSwitch(hSwitches,\"load\",String.valueOf(false))).booleanValue();   boolean bCache=Boolean.valueOf(getSwitch(hSwitches,\"cache\",String.valueOf(false))).booleanValue();   if (bCache)   hCategoryGraphs=new HashMap<String,DocumentNGramGraph>();   String sModelDir=getSwitch(hSwitches,\"modelDir\",\"./models/\");   String sOutFile=getSwitch(hSwitches,\"o\",\"\");   if (sOutFile.length() > 0) {     try {       PrintStream pOut=new PrintStream(new FileOutputStream(new File(sOutFile)));       System.setOut(pOut);     }  catch (    FileNotFoundException ex) {       Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,null,ex);       System.err.println(\"Could not redirect to output file. Using \" + \"standard output.\");     }   }   DocumentSet dsCorpus=new DocumentSet(sCorpusDir,dTrainPercent);   dsCorpus.createSets(true,dPartOfCorpus);   INSECTFileDB<DocumentNGramGraph> db=new INSECTFileDB(\"\",sModelDir);   INSECTFileDB<HashSet<String>> dbParams=new INSECTFileDB(\"params\",sModelDir);   Set<String> sGrammarCategories=null;   DocumentNGramGraph categoryGraph=null;   DocumentNGramGraph gGrammar=null;   boolean bLoadedOK=false;   if (bLoad) {     System.err.print(\"Loading grammar...\");     gGrammar=db.loadObject(GRAMMAR_NAME,GRAMMAR_TYPE);     bLoadedOK=gGrammar != null;     sGrammarCategories=dbParams.loadObject(GRAMMAR_DOCS_PARAM,PARAM_TYPE);     bLoadedOK=bLoadedOK && (sGrammarCategories != null);     if (bLoadedOK) {       if ((gGrammar.getMinSize() == iMinNGram) && (gGrammar.getMaxSize() == iMaxNGram) && (gGrammar.getWindowSize() == iWindowSize)) {         System.err.println(\"Loaded OK  with a size of \" + gGrammar.length());       }  else {         bLoadedOK=false;         System.err.println(\"Graph parameters differ from the parameters\" + \" given. Recreating grammar.\");       }     }  else {       System.err.println(\"Load failed. Continuing...\");     }   }   if (!bLoadedOK) {     sGrammarCategories=new HashSet<String>();     for (    Object elem : dsCorpus.getCategories()) {       String sCurCategory=(String)elem;       categoryGraph=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);       System.err.println(\"Extracting graph from category \" + sCurCategory);       categoryGraph=getGraphFor(sCurCategory,CATEGORY_MODEL_TYPE,db,dsCorpus.getFilesFromCategory(sCurCategory,DocumentSet.FROM_TRAINING_SET),iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave);       if (sGrammarCategories.size() > 0) {         gGrammar.intersectGraph(categoryGraph);       }  else {         gGrammar=categoryGraph;       }       sGrammarCategories.add(sCurCategory);       if (sGrammarCategories.size() == iCategoriesForGrammar) {         break;       }     }     System.err.println(\"Grammar created with a size of \" + gGrammar.length() + \".\");     if (bSave) {       System.err.print(\"Saving grammar...\");       db.saveObject(gGrammar,GRAMMAR_NAME,GRAMMAR_TYPE);       dbParams.saveObject((HashSet<String>)sGrammarCategories,GRAMMAR_DOCS_PARAM,PARAM_TYPE);       System.err.println(\"Done.\");     }   }   Distribution<String> dPerCategoryOverallCount=new Distribution<String>();   Distribution<String> dPerCategoryCorrectCount=new Distribution<String>();   for (  CategorizedFileEntry cfeCur : (List<CategorizedFileEntry>)dsCorpus.getTestSet()) {     DocumentNGramGraph dgCurDoc=new DocumentNGramSymWinGraph(iMinNGram,iMaxNGram,iWindowSize);     System.err.println(\"Loading file \" + cfeCur.getFileName());     try {       dgCurDoc.loadDataStringFromFile(cfeCur.getFileName());     }  catch (    IOException ex) {       Logger.getLogger(grammarAndContentAnalysis.class.getName()).log(Level.SEVERE,\"Cannot load file.\",ex);       continue;     }     if (gGrammar != null) {       System.err.println(\"Removing grammar...\");       dgCurDoc=dgCurDoc.allNotIn(gGrammar);     }     String sRes=determineCategory(dgCurDoc,cfeCur.getFileName(),cfeCur.getCategory(),dsCorpus.getCategories(),db,dsCorpus,iMinNGram,iMaxNGram,iWindowSize,bLoad,bSave,gGrammar);     if (sRes.equals(cfeCur.getCategory())) {       dPerCategoryCorrectCount.increaseValue(cfeCur.getCategory(),1.0);     }     dPerCategoryOverallCount.increaseValue(cfeCur.getCategory(),1.0);   }   outputResults(\"Results \",dPerCategoryCorrectCount,dPerCategoryOverallCount); } "
"public AbstractSpaceModeChangeEvent(IJSpace space,SpaceMode spaceMode){   super(space);   this.spaceMode=spaceMode; } "
"public void testTaskVariableStandalone() throws Exception {   Task newTask=taskService.newTask();   try {     taskService.saveTask(newTask);     taskService.setVariable(newTask.getId(),\"testVariable\",123);     taskService.setVariable(newTask.getId(),\"testVariable\",456);     taskService.removeVariable(newTask.getId(),\"testVariable\");     assertEquals(3,listener.getEventsReceived().size());     ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());     assertNull(event.getProcessDefinitionId());     assertNull(event.getExecutionId());     assertNull(event.getProcessInstanceId());     assertEquals(newTask.getId(),event.getTaskId());     assertEquals(\"testVariable\",event.getVariableName());     assertEquals(123,event.getVariableValue());     event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);     assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());     assertNull(event.getProcessDefinitionId());     assertNull(event.getExecutionId());     assertNull(event.getProcessInstanceId());     assertEquals(newTask.getId(),event.getTaskId());     assertEquals(\"testVariable\",event.getVariableName());     assertEquals(456,event.getVariableValue());     event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);     assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());     assertNull(event.getProcessDefinitionId());     assertNull(event.getExecutionId());     assertNull(event.getProcessInstanceId());     assertEquals(newTask.getId(),event.getTaskId());     assertEquals(\"testVariable\",event.getVariableName());     assertEquals(null,event.getVariableValue());   }   finally {     if (newTask.getId() != null) {       taskService.deleteTask(newTask.getId());       if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {         historyService.deleteHistoricTaskInstance(newTask.getId());       }     }   } } "
"protected void initLinkTable(){   m_links=createLinkTable();   IntIterator edges=getEdgeTable().rows();   while (edges.hasNext()) {     updateDegrees(edges.nextInt(),1);   } } "
"public void initialiseSelectedStyleIndex(){   this.selectedStyleIndex=0; } "
"public static void write(String fileName,Column column) throws IOException {   try (CSVWriter writer=new CSVWriter(new FileWriter(fileName))){     String[] header={column.name()};     writer.writeNext(header);     for (int r=0; r < column.size(); r++) {       String[] entries={column.getString(r)};       writer.writeNext(entries);     }   }  } "
"public JiniTransactionHolder(Transaction.Created txCreated,int isolationLevel,LeaseRenewalManager leaseRenewalManager){   this.txCreated=txCreated;   this.isolationLevel=isolationLevel;   this.leaseRenewalManager=leaseRenewalManager;   this.referenceCount.incrementAndGet(); } "
"public UniqueVector(){   elementSet=new java.util.HashSet();   elementVector=new java.util.Vector(); } "
"private void createResultLayout(){   createExtendedResultEvolutionSpinner();   createExtendedResultLevelSeekbar(); } "
"private static boolean hasHorizontalConstraints(@NotNull ConstraintWidget widget){   ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);   ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);   return (left != null && left.isConnected()) || (right != null && right.isConnected()); } "
"public static Object deepClone(Object obj){   try {     byte[] bArray=objectToByteBuffer(obj);     return objectFromByteBuffer(bArray);   }  catch (  Exception ex) {     throw new IllegalArgumentException(\"Failed to perform deep clone on [\" + obj + \"] object. Check that the all object context are implements java.io.Serializable.\",ex);   } } "
"protected synchronized void afterSpaceModeChange(SpaceMode newMode){   if (_logger.isLoggable(Level.FINER))   _logger.finer(\"Invoking afterSpaceModeChange event, new mode is \" + newMode);   Queue<ISpaceModeListener> remoteListeners=new LinkedList<ISpaceModeListener>();   for (Iterator<ISpaceModeListener> iter=_primarySpaceModeListeners.iterator(); iter.hasNext(); ) {     ISpaceModeListener listener=iter.next();     try {       if (LRMIUtilities.isRemoteProxy(listener)) {         if (_logger.isLoggable(Level.FINEST))         _logger.finest(\"located remote listener for afterSpaceModeChange, adding to asynchronous dispatch queue [\" + listener.toString() + \"]\");         remoteListeners.add(listener);         continue;       }       listener.afterSpaceModeChange(newMode);     }  catch (    Exception rex) {       if (_logger.isLoggable(Level.FINE)) {         _logger.log(Level.FINE,\"Failed to invoke remote method ISpaceModeListener.afterSpaceModeChange(...) implemented by listener [\" + listener + \"]. Action Taken: Unregistered listener\",rex);       }       _primarySpaceModeListeners.removeListener(listener);     }   }   if (remoteListeners.size() > 0)   dispatchAfterEventToRemoteListeners(remoteListeners,newMode);   if (_logger.isLoggable(Level.FINEST))   _logger.finest(\"completed invoking synchronous afterSpaceModeChange event with mode \" + newMode); } "
"public boolean containsValue(long val){   Object[] keys=_set;   long[] vals=_values;   for (int i=vals.length; i-- > 0; ) {     if (keys[i] != FREE && keys[i] != REMOVED && val == vals[i]) {       return true;     }   }   return false; } "
"public void loadData(Table t,String query,String keyField,Object lock){   loadData(t,query,keyField,lock,null); } "
"public static boolean areEqual(ItemStack stack1,ItemStack stack2){   if (stack1 == null || stack2 == null) {     return false;   }  else {     return stack1.isItemEqual(stack2);   } } "
"boolean aboutEquals(float moduleSize,float i,float j){   if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {     float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);     return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;   }   return false; } "
"private void checkParameters(){   if (start != null) {     final int dim=start.length;     if (lowerBound != null) {       if (lowerBound.length != dim) {         throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerBound.length,dim);       }       for (int i=0; i < dim; i++) {         final double v=start[i];         final double lo=lowerBound[i];         if (v < lo) {           throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,v,lo);         }       }     }     if (upperBound != null) {       if (upperBound.length != dim) {         throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperBound.length,dim);       }       for (int i=0; i < dim; i++) {         final double v=start[i];         final double hi=upperBound[i];         if (v > hi) {           throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE,v,hi);         }       }     }   } } "
"protected NewsfeedUnignoreItemQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"boolean sameClass(String cfn){   String s=cfn;   int i=s.lastIndexOf(\".class\");   if (i > 0) {     s=s.substring(0,i);   }   if (s.compareTo(toString()) == 0)   return true;   return false; } "
"public TransferableDataItem(NodeInterface destinationTreeNode,TreePath path){   if ((destinationTreeNode != null) && (path != null)) {     Map<NodeInterface,TreePath> selectedData=new LinkedHashMap<NodeInterface,TreePath>();     selectedData.put(destinationTreeNode,path);     internalPopulate(selectedData);   } } "
"private void timeout() throws Exception {   int t=_timerLogical++;   _time+=_waitInterval;   Map<WatchedObject,Collection<WatchedObject>> watchedObjects=new HashMap<WatchedObject,Collection<WatchedObject>>();   for (Iterator<WeakReference<WatchedObject>> iter=_watchedObjects.iterator(); iter.hasNext(); ) {     WeakReference<WatchedObject> w=iter.next();     WatchedObject watched=w.get();     if (watched == null || !watched.isInUse()) {       iter.remove();       continue;     }     int time=watched.getTime();     if (time == UNWATCHED)     continue;     if (t - time < _timeoutLogical)     continue;     if (_logger.isLoggable(Level.FINE)) {       Level logLevel=Level.FINEST;       if (Group.REQUEST_GROUP.name().equals(_name) || Group.RESPONSE_GROUP.name().equals(_name)) {         logLevel=Level.FINE;       }  else       if (Group.IDLE_GROUP.name().equals(_name)) {         logLevel=Level.FINEST;       }       _logger.log(logLevel,_name + \" - \" + (t - time) * _waitInterval + \" Timeout occurred, max allowed = \" + _timeout);     }     add(watchedObjects,watched);   }   if (!watchedObjects.isEmpty())   fireTimeoutOccured(watchedObjects); } "
"public long parseLongDecimal(){   ASTNode$State state=state();   try {     long val=0;     long prev=0;     for (int i=0; i < digits.length(); i++) {       prev=val;       int c=digits.charAt(i);       if (c >= '0' && c <= '9')       c=c - '0';  else       throw new NumberFormatException(\"\");       val=val * 10 + c;       if (val < prev) {         boolean negMinValue=i == (digits.length() - 1) && isNegative() && val == Long.MIN_VALUE;         if (!negMinValue)         throw new NumberFormatException(\"\");       }     }     if (val == Long.MIN_VALUE)     return val;     if (val < 0)     throw new NumberFormatException(\"\");     return isNegative() ? -val : val;   }   finally {   } } "
"public void clear(){   clearIntentHistory();   mInitialNavigationType=NAVIGATION_TYPE_NONE;   mIsOnEffectiveRedirectChain=false;   mLastCommittedEntryIndexBeforeStartingNavigation=0;   mShouldNotOverrideUrlLoadingUntilNewUrlLoading=false; } "
"private String printXFormat(long x){   String sx=null;   if (x == Long.MIN_VALUE)   sx=\"8000000000000000\";  else   if (x < 0) {     String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,16); switch (t.length()) { case 1:       sx=\"800000000000000\" + t;     break; case 2:   sx=\"80000000000000\" + t; break; case 3: sx=\"8000000000000\" + t; break; case 4: sx=\"800000000000\" + t; break; case 5: sx=\"80000000000\" + t; break; case 6: sx=\"8000000000\" + t; break; case 7: sx=\"800000000\" + t; break; case 8: sx=\"80000000\" + t; break; case 9: sx=\"8000000\" + t; break; case 10: sx=\"800000\" + t; break; case 11: sx=\"80000\" + t; break; case 12: sx=\"8000\" + t; break; case 13: sx=\"800\" + t; break; case 14: sx=\"80\" + t; break; case 15: sx=\"8\" + t; break; case 16: switch (t.charAt(0)) { case '1': sx=\"9\" + t.substring(1,16); break; case '2': sx=\"a\" + t.substring(1,16); break; case '3': sx=\"b\" + t.substring(1,16); break; case '4': sx=\"c\" + t.substring(1,16); break; case '5': sx=\"d\" + t.substring(1,16); break; case '6': sx=\"e\" + t.substring(1,16); break; case '7': sx=\"f\" + t.substring(1,16); break; } break; } }  else sx=Long.toString(x,16); return printXFormat(sx); } "
"@Override public void close() throws java.io.IOException {   flushBase64();   super.close();   buffer=null;   out=null; } "
"public boolean verify(){   if (!keepAlive)   return (false);   boolean verified=false;   try {     checkAvailability();     verified=true;   }  catch (  RemoteException e) {     if (logger.isLoggable(Level.FINEST))     logger.finest(\"RemoteException reaching space, \" + \"space cannot be reached\");     keepAlive=false;   } catch (  Throwable t) {     final int category=ThrowableConstants.retryable(t);     if (category == ThrowableConstants.BAD_INVOCATION || category == ThrowableConstants.BAD_OBJECT) {       keepAlive=false;       if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,\"Unrecoverable Exception invoking \" + \"IJSpace.ping()\",t);     }   }   return (verified); } "
"public static URI toLocation(String source,String table){   URI sourceUri=URI.create(source);   return toLocation(sourceUri,table); } "
"public void testBoundaryEventSubscriptionDeletedOnDeploymentDelete(){   String deploymentId=deployBoundaryMessageTestProcess();   runtimeService.startProcessInstanceByKeyAndTenantId(\"messageTest\",TENANT_ID);   assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());   String deploymentId2=deployBoundaryMessageTestProcess();   runtimeService.startProcessInstanceByKeyAndTenantId(\"messageTest\",TENANT_ID);   assertEquals(2,taskService.createTaskQuery().count());   assertEquals(2,getAllEventSubscriptions().size());   repositoryService.deleteDeployment(deploymentId,true);   assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());   assertEquals(1,getAllEventSubscriptions().size());   repositoryService.deleteDeployment(deploymentId2,true);   assertEquals(0,getAllEventSubscriptions().size()); } "
"public UsersGetSubscriptionsQueryWithExtended offset(Integer value){   return unsafeParam(\"offset\",value); } "
"@Override public void onPatchVersionCheckFail(File patchFile,SharePatchInfo oldPatchInfo,String patchFileVersion,boolean isUpgradePatch){   TinkerLog.i(TAG,\"patchReporter: patch version exist. path:%s, version:%s, isUpgrade:%b\",patchFile.getAbsolutePath(),patchFileVersion,isUpgradePatch); } "
"private AttackGymResponse sendBlankAction() throws LoginFailedException, RemoteServerException {   AttackGymMessage message=AttackGymMessage.newBuilder().setGymId(gym.getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setBattleId(battleResponse.getBattleId()).build();   ServerRequest serverRequest=new ServerRequest(RequestType.ATTACK_GYM,message);   api.getRequestHandler().sendServerRequests(serverRequest);   try {     return AttackGymResponse.parseFrom(serverRequest.getData());   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException();   } } "
"private void initLabels(){   CompareConfiguration cc=getCompareConfiguration();   String resourceName=resource.getName();   setTitle(Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\",new Object[]{resourceName}));   cc.setLeftEditable(!readOnly);   cc.setRightEditable(false);   String leftLabel=Policy.bind(\"SVNCompareRevisionsInput.workspace\",new Object[]{resourceName});   cc.setLeftLabel(leftLabel);   String remoteResourceName=null;   if (remoteResource != null) {     remoteResourceName=remoteResource.getName();   }  else {     remoteResourceName=resourceName;   }   String rightLabel=Policy.bind(\"SVNCompareRevisionsInput.repository\",new Object[]{remoteResourceName});   cc.setRightLabel(rightLabel); } "
"public BannedIpsExample(){   oredCriteria=new ArrayList<Criteria>(); } "
"public void begin(){   if (currentPrompt == null) {     abandoned=false;     currentPrompt=firstPrompt;     context.getForWhom().beginConversation(this);   } } "
"public double expectedWeightedValue(){   return this.weightedSum; } "
"public Builder forceConcatGlobalTag(boolean val){   forceConcatGlobalTag=val;   return this; } "
"public UCSReader(InputStream inputStream,int size,short encoding){   this(inputStream,new byte[size],encoding); } "
"public AccountRegisterDeviceQuery registerDevice(UserActor actor,String token,String deviceId){   return new AccountRegisterDeviceQuery(getClient(),actor,token,deviceId); } "
"protected AdsDeleteClientsQuery ids(String value){   return unsafeParam(\"ids\",value); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_NO_AVAILABLE_SLOT_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1201091,skillcaster,skillname); } "
"public CrashCountException(){   super(); } "
"private void computeTabClippingVisibilityHelper(){   final boolean portrait=mCurrentMode == Orientation.PORTRAIT;   float clipOffset;   if (portrait) {     clipOffset=mLayout.getHeight() + StackTab.sStackedTabVisibleSize;   }  else   if (!LocalizationUtils.isLayoutRtl()) {     clipOffset=mLayout.getWidth() + StackTab.sStackedTabVisibleSize;   }  else {     clipOffset=-StackTab.sStackedTabVisibleSize;   }   for (int i=mStackTabs.length - 1; i >= 0; i--) {     LayoutTab layoutTab=mStackTabs[i].getLayoutTab();     layoutTab.setVisible(true);     if (mStackTabs[i].isDying() || mStackTabs[i].getXInStackOffset() != 0.0f || layoutTab.getAlpha() < 1.0f) {       layoutTab.setClipOffset(0.0f,0.0f);       layoutTab.setClipSize(Float.MAX_VALUE,Float.MAX_VALUE);       continue;     }     float tabOffset, tabSize, tabClippedSize, borderAdjustmentSize, insetBorderPadding;     if (portrait) {       tabOffset=layoutTab.getY();       tabSize=layoutTab.getScaledContentHeight();       tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);       borderAdjustmentSize=mBorderTransparentTop;       insetBorderPadding=mBorderTopPadding;     }  else     if (!LocalizationUtils.isLayoutRtl()) {       tabOffset=layoutTab.getX();       tabSize=layoutTab.getScaledContentWidth();       tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);       borderAdjustmentSize=mBorderTransparentSide;       insetBorderPadding=0;     }  else {       tabOffset=layoutTab.getX() + layoutTab.getScaledContentWidth();       tabSize=layoutTab.getScaledContentWidth();       tabClippedSize=Math.min(tabSize,tabOffset - clipOffset);       borderAdjustmentSize=-mBorderTransparentSide;       insetBorderPadding=0;     }     float absBorderAdjustmentSize=Math.abs(borderAdjustmentSize);     if (tabClippedSize <= absBorderAdjustmentSize) {       layoutTab.setVisible(false);       layoutTab.setDrawDecoration(true);     }  else {       float fade=MathUtils.clamp(((tabClippedSize - absBorderAdjustmentSize) / StackTab.sStackedTabVisibleSize),0,1);       layoutTab.setDecorationAlpha(fade);       float clipScale=1.0f;       if (layoutTab.getTiltX() > 0 || ((!portrait && LocalizationUtils.isLayoutRtl()) ? layoutTab.getTiltY() < 0 : layoutTab.getTiltY() > 0)) {         final float tilt=Math.max(layoutTab.getTiltX(),Math.abs(layoutTab.getTiltY()));         clipScale+=(tilt / mMaxOverScrollAngle) * 0.60f;       }       float scaledTabClippedSize=Math.min(tabClippedSize * clipScale,tabSize);       layoutTab.setClipOffset((!portrait && LocalizationUtils.isLayoutRtl()) ? (tabSize - scaledTabClippedSize) : 0,0);       layoutTab.setClipSize(portrait ? Float.MAX_VALUE : scaledTabClippedSize,portrait ? scaledTabClippedSize : Float.MAX_VALUE);     }     if (i > 0) {       LayoutTab nextLayoutTab=mStackTabs[i - 1].getLayoutTab();       if (nextLayoutTab.getScale() <= layoutTab.getScale()) {         clipOffset=tabOffset;       }  else {         clipOffset=tabOffset + tabClippedSize * layoutTab.getScale();       }       clipOffset+=borderAdjustmentSize;       if (layoutTab.getBorderAlpha() < 1.f && layoutTab.getToolbarAlpha() < 1.f) {         clipOffset+=insetBorderPadding;       }     }   } } "
"@RequestMapping(value=\"/apps\",method=RequestMethod.POST) public JsonResponse saveApp(@RequestParam(\"appName\") String appName,@RequestParam(\"appKey\") String appKey,@RequestParam(\"appDesc\") String appDesc,@RequestParam(value=\"inheritAppId\",defaultValue=\"\") Long inheritAppId){   App app=new App();   app.setAppName(appName);   app.setAppKey(appKey);   app.setAppDesc(appDesc);   Response<Long> saveResp=appService.save(app);   if (!saveResp.isSuccess()) {     Logs.error(\"failed to save app({}), cause: {}\",app,saveResp.getErr());     return JsonResponse.notOk(saveResp.getErr());   }   appService.inheritConfigs(inheritAppId,saveResp.getData());   return JsonResponse.ok(saveResp.getData()); } "
"public boolean isApplicable(){   return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedEdges().size() > 0; } "
"public final TestSubscriber<T> assertNonFuseableSource(){   if (qs != null) {     throw new AssertionError(\"Upstream was Fuseable\");   }   return this; } "
"private static void cleanDirectoryOnExit(File directory) throws IOException {   if (!directory.exists()) {     String message=directory + \" does not exist\";     throw new IllegalArgumentException(message);   }   if (!directory.isDirectory()) {     String message=directory + \" is not a directory\";     throw new IllegalArgumentException(message);   }   File[] files=directory.listFiles();   if (files == null) {     throw new IOException(\"Failed to list contents of \" + directory);   }   IOException exception=null;   for (  File file : files) {     try {       forceDeleteOnExit(file);     }  catch (    IOException ioe) {       exception=ioe;     }   }   if (null != exception) {     throw exception;   } } "
"public static void hideProgressDialogsAll(){ synchronized (sLock) {     for (    ProgressDialog dialog : sDialogs.keySet()) {       if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();     }     sDialogs.clear();   } } "
"static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {   if (DEBUG)   debugPrintln(\"debug is on\");   ClassLoader cl=findClassLoader();   try {     String systemProp=SecuritySupport.getSystemProperty(factoryId);     if (systemProp != null && systemProp.length() > 0) {       if (DEBUG)       debugPrintln(\"found system property, value=\" + systemProp);       return newInstance(systemProp,cl,true);     }   }  catch (  SecurityException se) {   }   String factoryClassName=null;   if (propertiesFilename == null) {     File propertiesFile=null;     boolean propertiesFileExists=false;     try {       String javah=SecuritySupport.getSystemProperty(\"java.home\");       propertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;       propertiesFile=new File(propertiesFilename);       propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);     }  catch (    SecurityException e) {       fLastModified=-1;       fXercesProperties=null;     } synchronized (ObjectFactory.class) {       boolean loadProperties=false;       FileInputStream fis=null;       try {         if (fLastModified >= 0) {           if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {             loadProperties=true;           }  else {             if (!propertiesFileExists) {               fLastModified=-1;               fXercesProperties=null;             }           }         }  else {           if (propertiesFileExists) {             loadProperties=true;             fLastModified=SecuritySupport.getLastModified(propertiesFile);           }         }         if (loadProperties) {           fXercesProperties=new Properties();           fis=SecuritySupport.getFileInputStream(propertiesFile);           fXercesProperties.load(fis);         }       }  catch (      Exception x) {         fXercesProperties=null;         fLastModified=-1;       }  finally {         if (fis != null) {           try {             fis.close();           }  catch (          IOException exc) {           }         }       }     }     if (fXercesProperties != null) {       factoryClassName=fXercesProperties.getProperty(factoryId);     }   }  else {     FileInputStream fis=null;     try {       fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));       Properties props=new Properties();       props.load(fis);       factoryClassName=props.getProperty(factoryId);     }  catch (    Exception x) {     }  finally {       if (fis != null) {         try {           fis.close();         }  catch (        IOException exc) {         }       }     }   }   if (factoryClassName != null) {     if (DEBUG)     debugPrintln(\"found in \" + propertiesFilename + \", value=\"+ factoryClassName);     return newInstance(factoryClassName,cl,true);   }   Object provider=findJarServiceProvider(factoryId);   if (provider != null) {     return provider;   }   if (fallbackClassName == null) {     throw new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\",null);   }   if (DEBUG)   debugPrintln(\"using fallback, value=\" + fallbackClassName);   return newInstance(fallbackClassName,cl,true); } "
"private static char[] zzUnpackCMap(String packed){   char[] map=new char[0x10000];   int i=0;   int j=0;   while (i < 2284) {     int count=packed.charAt(i++);     char value=packed.charAt(i++);     do     map[j++]=value;  while (--count > 0);   }   return map; } "
"public double distinctValues(){   return distVals; } "
"public void info(String message,Object... args){   currentTest.get().info(String.format(message,args)); } "
"public static void v(String tag,String msg){   if (LOG_ENABLE) {     Log.v(tag,buildMsg(msg));   } } "
"private static void convertActivityToTranslucentAfterL(Activity activity){   try {     Method getActivityOptions=Activity.class.getDeclaredMethod(\"getActivityOptions\");     getActivityOptions.setAccessible(true);     Object options=getActivityOptions.invoke(activity);     Class<?>[] classes=Activity.class.getDeclaredClasses();     Class<?> translucentConversionListenerClazz=null;     for (    Class clazz : classes) {       if (clazz.getSimpleName().contains(\"TranslucentConversionListener\")) {         translucentConversionListenerClazz=clazz;       }     }     Method convertToTranslucent=Activity.class.getDeclaredMethod(\"convertToTranslucent\",translucentConversionListenerClazz,ActivityOptions.class);     convertToTranslucent.setAccessible(true);     convertToTranslucent.invoke(activity,null,options);   }  catch (  Throwable ignored) {   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_LIGHT_DEATH_TO_B(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1400141,value0,value1); } "
"public boolean hasSingleExit(){   return getLoopExits().size() == 1; } "
"public EventDescriptor(long eventID){   this(null,new Long(eventID)); } "
"public ParticleSystem(ViewGroup parentView,int maxParticles,Drawable drawable,long timeToLive){   this(parentView,maxParticles,timeToLive);   if (drawable instanceof BitmapDrawable) {     Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();     for (int i=0; i < mMaxParticles; i++) {       mParticles.add(new Particle(bitmap));     }   }  else   if (drawable instanceof AnimationDrawable) {     AnimationDrawable animation=(AnimationDrawable)drawable;     for (int i=0; i < mMaxParticles; i++) {       mParticles.add(new AnimatedParticle(animation));     }   }  else {   } } "
"public void put(String key,InputStream stream,String name){   put(key,stream,name,null); } "
"public void pause(){   isPaused=true; } "
"public NewsfeedSaveListQuery noReposts(Boolean value){   return unsafeParam(\"no_reposts\",value); } "
"public SimpleLocator element2Locator(Element e){   if (!(e instanceof ElementImpl))   return null;   SimpleLocator l=new SimpleLocator();   return element2Locator(e,l) ? l : null; } "
"public void decreaseShield(){   this.shield--;   if (shield <= 0)   this.isDead=true; } "
"public static SM_SYSTEM_MESSAGE STR_BINDSTONE_CAPACITY_LIMITTED_ALARM(int num0){   return new SM_SYSTEM_MESSAGE(1390231,num0); } "
"public void insertEntryIndexedField(IEntryCacheInfo pEntry,K fieldValue,TypeData pType){   if (_fifoGroupsIndexExtention == null)   insertEntryIndexedField_impl(pEntry,fieldValue,pType,pEntry.getBackRefs());  else   _fifoGroupsIndexExtention.insertEntryIndexedField(pEntry,fieldValue,pType); } "
"public static int ping(String url) throws Exception {   URL u=new URL(url);   HttpURLConnection c=(HttpURLConnection)u.openConnection();   c.connect();   int code=c.getResponseCode();   log.debug(\"ping=\" + url + \", response.code=\"+ code);   c.disconnect();   return code; } "
"public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){   return clickListeners.remove(itemClickListener); } "
"public MarketCreateCommentQuery stickerId(Integer value){   return unsafeParam(\"sticker_id\",value); } "
"public SecantSolver(){   super(DEFAULT_ABSOLUTE_ACCURACY); } "
"private static void checkGroups(String[] groups){   SecurityManager sm=System.getSecurityManager();   if (sm == null)   return;   if (groups != null) {     for (int i=0; i < groups.length; i++) {       sm.checkPermission(new DiscoveryPermission(groups[i]));     }   }  else {     sm.checkPermission(new DiscoveryPermission(\"*\"));   } } "
"public int size(){   return name2id.size(); } "
"public PointsToSet reachingObjects(Local l){   VarNode n=findLocalVarNode(l);   if (n == null) {     return EmptyPointsToSet.v();   }   return n.getP2Set(); } "
"public final void error(final Object o){   log(Level.ERROR,o); } "
"@Override protected void onDestroy(){   super.onDestroy();   resetData(); } "
"public static void ensureUnarchived(Experiment experiment,Project project,DataController dc){   if (experiment != null) {     if (experiment.isArchived()) {       experiment.setArchived(false);       dc.updateExperiment(experiment,LoggingConsumer.<Success>expectSuccess(TAG,\"Unarchiving experiment\"));     }     if (project != null) {       if (experiment.getProjectId().equals(project.getProjectId())) {         if (project.isArchived()) {           project.setArchived(false);           dc.updateProject(project,LoggingConsumer.<Success>expectSuccess(TAG,\"Unarchiving project\"));         }       }  else {         throw new IllegalStateException(\"Selected project \" + project.getProjectId() + \" is not the right parent of selected experiment \"+ experiment.getExperimentId()+ \" (should be \"+ experiment.getProjectId()+ \")\");       }     }   } } "
"public String toString(){   String sRes=\"[\";   Iterator iIter=iterator();   while (iIter.hasNext()) {     Object oNext=iIter.next();     sRes+=oNext.toString();     if (iIter.hasNext())     sRes+=\",\";   }   sRes+=\"]\";   return sRes; } "
"public StringProperty lastReceivedPayloadShortProperty(){   return lastReceivedPayloadShort; } "
"public final char yycharat(int pos){   return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos); } "
"@Override public void updateValue(String key,boolean value){   updateValue(key,value ? TRUE : FALSE); } "
"public Plan makeJoinPlan(Plan trunk){   Schema trunkSch=trunk.schema();   Predicate joinPred=pred.joinPredicate(sch,trunkSch);   if (joinPred == null)   return null;   Plan p=makeIndexJoinPlan(trunk,trunkSch);   if (p == null)   p=makeProductJoinPlan(trunk,trunkSch);   return p; } "
"private static String doSubstringReplacement(final SubstringReplaceFormatterDetails details,final String text){   String convertedText=text;   try {     final String input=extractValueForConversion(details,convertedText);     final String output=details.getReplaceWith();     convertedText=replaceTextAndTags(details,convertedText,input,output);   }  catch (  ConversionException e) {   }   return convertedText; } "
"public String toFastA(boolean includeUnalignedChars,int minRow,int minLayoutCol,int maxRow,int maxLayoutCol){   StringWriter w=new StringWriter();   if (!getRowCompressor().isEnabled()) {     final Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);     maxRow=Math.min(maxRow,getNumberOfSequences() - 1);     for (int read=minRow; read <= maxRow; read++) {       String readName=getName(read);       if (readName.startsWith(\">\"))       w.write(readName + \"\\n\");  else       w.write(\">\" + readName + \"\\n\");       Lane lane=getLane(read);       int jc=0;       int jumped=0;       for (int layoutCol=minLayoutCol; layoutCol <= maxLayoutCol; layoutCol++) {         while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {           jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);           jc++;         }         int trueCol=layoutCol + jumped;         if (trueCol < getLength()) {           if (includeUnalignedChars && lane.hasUnalignedCharAt(trueCol)) {             char ch=lane.getUnalignedCharAt(trueCol);             w.write(ch);           }  else {             if (trueCol >= lane.getFirstNonGapPosition() && trueCol <= lane.getLastNonGapPosition()) {               char ch=lane.charAt(trueCol);               if (ch == 0)               ch='-';               if (ch != ' ')               w.write(ch);             }  else {               if (!isTranslate() || (trueCol % 3) == 0)               w.write('-');             }           }         }       }       w.write(\"\\n\");     }   }  else {     maxRow=Math.min(maxRow,getRowCompressor().getNumberRows() - 1);     final Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);     int minTrueCol=gapColumnContractor.getTotalJumpBeforeLayoutColumn(minLayoutCol) + minLayoutCol;     int maxTrueCol=gapColumnContractor.getTotalJumpBeforeLayoutColumn(maxLayoutCol - 1) + maxLayoutCol;     for (int row=minRow; row <= maxRow; row++) {       int lastPos=minTrueCol - 1;       for (      int read : rowCompressor.getCompressedRow2Reads(row)) {         int jc=0;         int jumped=0;         Lane lane=getLane(read);         if (minTrueCol <= lane.getLastNonGapPosition() && maxTrueCol >= lane.getFirstNonGapPosition()) {           int startTrueCol=Math.max(minTrueCol,lane.getFirstNonGapPosition());           int endTrueCol=Math.min(maxTrueCol,lane.getLastNonGapPosition());           while (lastPos < startTrueCol - (isTranslate() ? 1 : 1)) {             if (!translate || (lastPos % 3) == 0)             w.write(\"-\");             lastPos++;           }           for (int layoutCol=minLayoutCol; layoutCol <= maxLayoutCol; layoutCol++) {             while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {               jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);               jc++;             }             int trueCol=layoutCol + jumped;             if (trueCol >= startTrueCol && trueCol <= endTrueCol) {               if (includeUnalignedChars && lane.hasUnalignedCharAt(trueCol)) {                 char ch=lane.getUnalignedCharAt(trueCol);                 w.write(ch);               }  else               if (!isTranslate() || trueCol < lane.getLastNonGapPosition() - 2) {                 char ch=lane.charAt(trueCol);                 if (ch == 0)                 ch='-';                 if (ch != ' ')                 w.write(ch);               }               lastPos++;             }           }         }       }       while (lastPos < maxTrueCol) {         if (!translate || (lastPos % 3) == 0)         w.write(\"-\");         lastPos++;       }       w.write(\"\\n\");     }   }   return w.toString(); } "
"@Override public boolean hasMoreData(){   return signal.hasMoreData() && pitchmarks.hasMoreData() || periodsInMemory - shiftPeriods > 0; } "
"public GraphSimilarity(){   this.ValueSimilarity=0.0;   this.ContainmentSimilarity=0.0;   this.SizeSimilarity=0.0; } "
"@Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augmentations) throws XNIException { } "
"public static String toString(Attribute attribute) throws IllegalArgumentException {   StringBuffer buf=new StringBuffer();   buf.append(attribute.getName());   buf.append(ATTRIBUTE_KEYVAL_SEPARATOR); switch (attribute.getType()) { case RANGES: {       buf.append('[');       StringJoiner joiner=new StringJoiner(\",\");       for (      Value.Range range : attribute.getRanges().getRangeList()) {         joiner.add(String.format(\"%d-%d\",range.getBegin(),range.getEnd()));       }       buf.append(joiner.toString());       buf.append(']');       break;     } case SCALAR:   buf.append(String.format(\"%.3f\",attribute.getScalar().getValue())); break; case SET: buf.append('{'); StringJoiner joiner=new StringJoiner(\",\"); for (String item : attribute.getSet().getItemList()) { joiner.add(item); } buf.append(joiner.toString()); buf.append('}'); break; case TEXT: buf.append(attribute.getText().getValue()); break; default : throw new IllegalArgumentException(\"Unsupported attribute value type: \" + attribute); } return buf.toString(); } "
"public static void main(String[] args){   int n=Integer.parseInt(args[0]);   if (args.length == 2)   StdRandom.setSeed(Long.parseLong(args[1]));   double[] probabilities={0.5,0.3,0.1,0.1};   int[] frequencies={5,3,1,1};   String[] a=\"A B C D E F G\".split(\" \");   StdOut.println(\"seed = \" + StdRandom.getSeed());   for (int i=0; i < n; i++) {     StdOut.printf(\"%2d \",uniform(100));     StdOut.printf(\"%8.5f \",uniform(10.0,99.0));     StdOut.printf(\"%5b \",bernoulli(0.5));     StdOut.printf(\"%7.5f \",gaussian(9.0,0.2));     StdOut.printf(\"%1d \",discrete(probabilities));     StdOut.printf(\"%1d \",discrete(frequencies));     StdRandom.shuffle(a);     for (    String s : a)     StdOut.print(s);     StdOut.println();   } } "
"private void cancelPrecaching(){   Log.v(TAG,\"Cancel precaching\");   prepareNativeLibraries();   mPrecacheLauncher.cancel();   shutdownPrecaching(true); } "
"public static MessageType create(ProtoContainerElement parent,DescriptorProto proto,String path,ExtensionPool extensionPool){   return new MessageType(parent,proto,path,extensionPool); } "
"protected void processThermostatSetpointReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {   int setpointTypeCode=serialMessage.getMessagePayloadByte(offset + 1);   int scale=(serialMessage.getMessagePayloadByte(offset + 2) >> 3) & 0x03;   try {     BigDecimal value=extractValue(serialMessage.getMessagePayload(),offset + 2);     logger.debug(\"NODE {}: Thermostat Setpoint report Scale = {}\",this.getNode().getNodeId(),scale);     logger.debug(\"NODE {}: Thermostat Setpoint Value = {}\",this.getNode().getNodeId(),value);     SetpointType setpointType=SetpointType.getSetpointType(setpointTypeCode);     if (setpointType == null) {       logger.error(\"NODE {}: Unknown Setpoint Type = {}, ignoring report.\",this.getNode().getNodeId(),setpointTypeCode);       return;     }     Setpoint setpoint=setpoints.get(setpointType);     if (setpoint == null) {       setpoint=new Setpoint(setpointType);       setpoints.put(setpointType,setpoint);     }     setpoint.setInitialised();     logger.debug(\"NODE {}: Thermostat Setpoint Report, Type {} ({}), value = {}\",this.getNode().getNodeId(),setpointType.getLabel(),setpointTypeCode,value.toPlainString());     ZWaveThermostatSetpointValueEvent zEvent=new ZWaveThermostatSetpointValueEvent(this.getNode().getNodeId(),endpoint,setpointType,scale,value);     this.getController().notifyEventListeners(zEvent);   }  catch (  NumberFormatException e) {     return;   } } "
"public static <T>void writeArray(PacketBuffer buf,T[] value,BiConsumer<PacketBuffer,T> writer){   buf.writeInt(value.length);   for (  T t : value) {     writer.accept(buf,t);   } } "
"public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"new attribute=\");   String attribute=np.getWordRespectCase();   np.matchIgnoreCase(\"position=\");   int position=np.getInt();   np.matchIgnoreCase(\";\");   final SamplesViewer viewer=((SamplesViewer)getViewer());   viewer.getSamplesTable().addNewColumn(position,attribute); } "
"public void deleteItem(final int _index){   this.model.remove(_index);   notifyItemRemoved(_index); } "
"@Override protected void reset() throws XNIException {   super.reset();   fInDTD=false; } "
"public void resume(){   engine.resume(); } "
"private boolean decrypt(ByteBuffer buf){   int size=buf.remaining();   final int offset=buf.arrayOffset() + buf.position();   boolean ret=cryptEngine.decrypt(buf.array(),offset,size);   if (!ret) {     log.warn(\"Wrong checksum from client: \" + this);   }   return ret; } "
"public static void main(String[] args){   StopBodyAfterCollision simulation=new StopBodyAfterCollision();   simulation.run(); } "
"public HalfPhoneUnitSelector() throws Exception {   super(); } "
"@Override public void scrollToTop(){   view.scrollToTop(); } "
"@Override public void confirm(){   bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(copyButton));   bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(copyButton)); } "
"public synchronized void addFrameSavedListener(FrameSavedListener listener){   if (listenerList == null) {     listenerList=new javax.swing.event.EventListenerList();   }   listenerList.add(FrameSavedListener.class,listener); } "
"public ActionSwitch(Action[] acts,int switchVal){   for (int i=0; i < acts.length; i++)   m_actions.add(acts[i]);   setSwitchValue(switchVal); } "
"public void addHeaderView(View v){   addHeaderView(v,null,true); } "
"public InSpacePredicate(Set<?> inValues){   _inValues=inValues; } "
"public void increment(final double x,final double y){   n++;   final double deltaX=x - meanX;   final double deltaY=y - meanY;   meanX+=deltaX / n;   meanY+=deltaY / n;   covarianceNumerator+=((n - 1.0) / n) * deltaX * deltaY; } "
"public GroupsEditPlaceQuery longitude(Float value){   return unsafeParam(\"longitude\",value); } "
"public void callback(final String instanceId,final String callback,final Map<String,Object> data){   callback(instanceId,callback,data,false); } "
"public void loadAllHashCodes(File sigFolder){   logger.info(\"Hashcodes loading start...\");   final long startTime=System.currentTimeMillis();   loadAllHashCodesTemp(sigFolder);   final long endTime=System.currentTimeMillis();   logger.info(\"Hashcodes loading completed! (Execution Time: \" + (endTime - startTime) / 1000 + \"s)\");   logger.info(\"allTightHashcodes: \" + allTightHashcodes.size());   logger.info(\"allLooseHashcodes: \" + allLooseHashcodes.size()); } "
"public PhotosGetQuery rev(Boolean value){   return unsafeParam(\"rev\",value); } "
"public void extractInducedTree(Map<Integer,NodeData> id2data,Set<Integer> collapsedIds,PhyloTree targetTree,Map<Integer,Set<Node>> targetId2Nodes){   final Map<Integer,Integer> id2count=new HashMap<>();   for (  Integer id : id2data.keySet()) {     id2count.put(id,id2data.get(id).getCountAssigned());   }   final NodeSet keep=new NodeSet(this);   labelToKeepRec(getRoot(),id2count.keySet(),keep);   targetTree.clear();   final Node rootCpy=targetTree.newNode();   Map<Node,Node> node2cpy=new HashMap<>();   targetTree.setRoot(rootCpy);   rootCpy.setInfo(getRoot().getInfo());   node2cpy.put(getRoot(),rootCpy);   final int rootId=(Integer)getRoot().getInfo();   final NodeData rootData=id2data.get(rootId);   rootCpy.setData(rootData != null ? rootData : emptyData);   induceRec(getRoot(),rootCpy,targetTree,keep,collapsedIds,id2data,node2cpy);   targetId2Nodes.clear();   for (Node v=targetTree.getFirstNode(); v != null; v=v.getNext()) {     int id=(Integer)v.getInfo();     Set<Node> nodes=targetId2Nodes.get(id);     if (nodes == null) {       nodes=new HashSet<>();       targetId2Nodes.put(id,nodes);     }     nodes.add(v);     if (v.getInDegree() > 1)     System.err.println(\"Reticulate node: \" + id + \" (currently not supported)\");   }   System.err.println(String.format(\"Induced tree has %,d of %,d nodes\",+keep.size(),getNumberOfNodes()));   if (collapsedIds.size() > 0) {     final Set<Integer> notNeeded=new HashSet<>();     for (Node v=targetTree.getFirstNode(); v != null; v=targetTree.getNextNode(v)) {       Integer id=(Integer)v.getInfo();       if (!collapsedIds.contains(id))       notNeeded.add(id);     }     if (notNeeded.size() > 0) {       collapsedIds.removeAll(notNeeded);     }   } } "
"public void resolveAllClasses() throws ClassNotFoundException {   for (short i=0; i < this.classFile.getConstantPoolSize(); ++i) {     ClassFile.ConstantPoolInfo cpi=this.classFile.getConstantPoolInfo(i);     if (cpi instanceof ClassFile.ConstantClassInfo) {       this.resolveClass(i);     }  else     if (cpi instanceof ClassFile.ConstantNameAndTypeInfo) {       String descriptor=((ClassFile.ConstantNameAndTypeInfo)cpi).getDescriptor(this.classFile);       if (descriptor.charAt(0) == '(') {         MethodDescriptor md=new MethodDescriptor(descriptor);         this.resolveClass(md.returnFd);         for (        String parameterFd : md.parameterFds)         this.resolveClass(parameterFd);       }  else {         this.resolveClass(descriptor);       }     }   } } "
"public void nextImage() throws IOException {   super.next(); } "
"public void closeDriver(){   if (camera != null) {     FlashlightManager.disableFlashlight();     camera.release();     camera=null;   } } "
"public CommitRecord(BasicLogRecord rec){   txNum=(Long)rec.nextVal(BIGINT).asJavaVal();   lsn=rec.getLSN(); } "
"protected Region createRegion(int id){   Region region=new Region(id,this.m_method,this.m_class,this.m_cfg);   if (id == 0)   this.m_topLevelRegion=region;   return region; } "
"public static int delete(File f) throws IOException {   int count=0;   if (f.isFile()) {     f.delete();     count++;   }  else   if (f.isDirectory()) {     File[] ff=f.listFiles();     if (ff != null && ff.length > 0) {       for (      File f1 : ff) {         count+=delete(f1);       }     }     f.delete();     count++;   }   return count; } "
"@Override protected void normalizeWhitespace(XMLString value,int fromIndex){   int end=value.offset + value.length;   for (int i=value.offset + fromIndex; i < end; ++i) {     int c=value.ch[i];     if (XMLChar.isSpace(c)) {       value.ch[i]=' ';     }   } } "
"protected Interval doSolveInterval(){   final double[] x=new double[maximalOrder + 1];   final double[] y=new double[maximalOrder + 1];   x[0]=getMin();   x[1]=getStartValue();   x[2]=getMax();   verifyInterval(x[0],x[2]);   if (x[1] < x[0] || x[2] < x[1]) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.START_POINT_NOT_IN_INTERVAL,x[1],x[0],x[2]);   }   y[1]=computeObjectiveValue(x[1]);   if (y[1] == 0.0) {     return new Interval(x[1],y[1],x[1],y[1]);   }   y[0]=computeObjectiveValue(x[0]);   if (y[0] == 0.0) {     return new Interval(x[0],y[0],x[0],y[0]);   }   int nbPoints;   int signChangeIndex;   if (y[0] * y[1] < 0) {     nbPoints=2;     signChangeIndex=1;   }  else {     y[2]=computeObjectiveValue(x[2]);     if (y[2] == 0.0) {       return new Interval(x[2],y[2],x[2],y[2]);     }     if (y[1] * y[2] < 0) {       nbPoints=3;       signChangeIndex=2;     }  else {       throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_BRACKETING_INTERVAL,x[0],x[2],y[0],y[2]);     }   }   final double[] tmpX=new double[x.length];   double xA=x[signChangeIndex - 1];   double yA=y[signChangeIndex - 1];   double absYA=FastMath.abs(yA);   int agingA=0;   double xB=x[signChangeIndex];   double yB=y[signChangeIndex];   double absYB=FastMath.abs(yB);   int agingB=0;   while (true) {     final double xTol=getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA),FastMath.abs(xB));     if (xB - xA <= xTol || FastMath.max(absYA,absYB) < getFunctionValueAccuracy() || Precision.equals(xA,xB,1)) {       return new Interval(xA,yA,xB,yB);     }     double targetY;     if (agingA >= MAXIMAL_AGING) {       final int p=agingA - MAXIMAL_AGING;       final double weightA=(1 << p) - 1;       final double weightB=p + 1;       targetY=(weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);     }  else     if (agingB >= MAXIMAL_AGING) {       final int p=agingB - MAXIMAL_AGING;       final double weightA=p + 1;       final double weightB=(1 << p) - 1;       targetY=(weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);     }  else {       targetY=0;     }     double nextX;     int start=0;     int end=nbPoints;     do {       System.arraycopy(x,start,tmpX,start,end - start);       nextX=guessX(targetY,tmpX,y,start,end);       if (!((nextX > xA) && (nextX < xB))) {         if (signChangeIndex - start >= end - signChangeIndex) {           ++start;         }  else {           --end;         }         nextX=Double.NaN;       }     }  while (Double.isNaN(nextX) && (end - start > 1));     if (Double.isNaN(nextX)) {       nextX=xA + 0.5 * (xB - xA);       start=signChangeIndex - 1;       end=signChangeIndex;     }     final double nextY=computeObjectiveValue(nextX);     if (nextY == 0.0) {       return new Interval(nextX,nextY,nextX,nextY);     }     if ((nbPoints > 2) && (end - start != nbPoints)) {       nbPoints=end - start;       System.arraycopy(x,start,x,0,nbPoints);       System.arraycopy(y,start,y,0,nbPoints);       signChangeIndex-=start;     }  else     if (nbPoints == x.length) {       nbPoints--;       if (signChangeIndex >= (x.length + 1) / 2) {         System.arraycopy(x,1,x,0,nbPoints);         System.arraycopy(y,1,y,0,nbPoints);         --signChangeIndex;       }     }     System.arraycopy(x,signChangeIndex,x,signChangeIndex + 1,nbPoints - signChangeIndex);     x[signChangeIndex]=nextX;     System.arraycopy(y,signChangeIndex,y,signChangeIndex + 1,nbPoints - signChangeIndex);     y[signChangeIndex]=nextY;     ++nbPoints;     if (nextY * yA <= 0) {       xB=nextX;       yB=nextY;       absYB=FastMath.abs(yB);       ++agingA;       agingB=0;     }  else {       xA=nextX;       yA=nextY;       absYA=FastMath.abs(yA);       agingA=0;       ++agingB;       signChangeIndex++;     }   } } "
"public static String convertTime(int time){   time/=1000;   int minute=time / 60;   int second=time % 60;   minute%=60;   return String.format(\"%02d:%02d\",minute,second); } "
"public void goToNextColor(){   mColorIndex=(mColorIndex + 1) % (mColors.length); } "
"@SafeVarargs public static <T>Cons<T> fromArgs(T... elems){   return fromArray(elems); } "
"public void render(Entity entityIn,float limbSwing,float limbSwingAmount,float ageInTicks,float netHeadYaw,float headPitch,float scale){   super.render(entityIn,limbSwing,limbSwingAmount,ageInTicks,netHeadYaw,headPitch,scale);   GlStateManager.pushMatrix();   if (entityIn.isSneaking()) {     GlStateManager.translate(0.0F,0.2F,0.0F);   }   this.claw1.render(scale);   GlStateManager.popMatrix(); } "
"@SuppressWarnings(\"unchecked\") private T[] buildArray(final int length){   return (T[])Array.newInstance(field.getRuntimeClass(),length); } "
"public FriendsEditListQuery addUserIds(List<Integer> value){   return unsafeParam(\"add_user_ids\",value); } "
"public boolean isAllow(){   return message == null; } "
"public NestedSelectorScopedElementLocator(SearchContext searchContext,ElementLocatorFactory scopeFactory,By selector,boolean globalCurrentScope){   this.scopeFactory=scopeFactory;   this.selector=selector;   this.searchContext=searchContext;   this.globalCurrentScope=globalCurrentScope; } "
"static int[] uncompact(int compactConstraints){   int length=0;   for (  int c : ALL_CONSTRAINTS) {     length+=(compactConstraints & c) == c ? 1 : 0;   }   int[] list=new int[length];   int i=0;   for (  int c : ALL_CONSTRAINTS) {     if ((compactConstraints & c) == c) {       list[i++]=c;     }   }   return list; } "
"public static List<File> find(File base,final Pattern pattern){   checkArgument(base.isDirectory(),\"'base' must be a directory.\");   return Files.fileTreeTraverser().preOrderTraversal(base).filter(Predicates.compose(Predicates.contains(pattern),GET_PATH)).toList(); } "
"public static Style amber(){   final Style style=new Style();   style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_AMBER);   return style; } "
"@Override public void dataChanged(FieldIdEnum changedField){   updateSymbol(); } "
"public int putIfAbsent(K key,int value){   int index=insertionIndex(key);   if (index < 0)   return _values[-index - 1];   return doPut(key,value,index); } "
"public static boolean booleanValueIndicator(Object value,boolean defaultValue){   Boolean res=booleanValueIndicator(value);   return res != null ? res : defaultValue; } "
"protected void validateJoinManager(JoinManager mgr) throws RemoteException {   if (mgr == null) {     throw joinManagerNullException;   } } "
"public static void extractSingleHighCardDims(byte[] highCardArr,int index,int highCardinalityCount,ByteBuffer outBuffer){   ByteBuffer buff=null;   short secIndex=0;   short firstIndex=0;   int length;   if (index == highCardinalityCount - 1) {     buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,2);   }  else {     buff=ByteBuffer.wrap(highCardArr,(index * 2) + 2,4);   }   firstIndex=buff.getShort();   if (index == highCardinalityCount - 1) {     secIndex=(short)highCardArr.length;   }  else {     secIndex=buff.getShort();   }   length=secIndex - firstIndex;   outBuffer.position(firstIndex);   outBuffer.limit(outBuffer.position() + length); } "
"public SingularOperatorException(){   super(org.hipparchus.migration.exception.util.LocalizedFormats.SINGULAR_OPERATOR); } "
"public boolean isUpdateOf(ComponentDescription other){   return !(other == null || !this.getClass().equals(other.getClass()) || !name.equals(other.getName()) || other.getStatus() != Status.INSTALLED || !(isVersionNewerThan(version,other.getVersion()))); } "
"public TupleSet removeSet(String name){   TupleSet ts=(TupleSet)m_map.remove(name);   if (ts != null) {     m_sets.remove(ts);     if (m_lstnr != null)     ts.removeTupleSetListener(m_lstnr);   }   return ts; } "
"private synchronized Object addAndGetSegmentLock(String segmentId){   Object segmentLoderLockObject=segmentLockMap.get(segmentId);   if (null == segmentLoderLockObject) {     segmentLoderLockObject=new Object();     segmentLockMap.put(segmentId,segmentLoderLockObject);   }   return segmentLoderLockObject; } "
"public static TileGeomResult createTileGeom(Geometry g,Envelope tileEnvelope,GeometryFactory geomFactory,MvtLayerParams mvtLayerParams,IGeometryFilter filter){   return createTileGeom(flatFeatureList(g),tileEnvelope,geomFactory,mvtLayerParams,filter); } "
"public SoftReferenceGrammarPool(int initialCapacity){   fGrammars=new Entry[initialCapacity];   fPoolIsLocked=false; } "
"public MulticastTimeToLive(int ttl){   if (ttl < 0 || ttl > MAX_TIME_TO_LIVE) {     throw new IllegalArgumentException(\"invalid time to live\");   }   this.ttl=ttl; } "
"@Override public void applyDimensionBehaviour(){   wrapContent(); } "
"public static void writeLines(File file,String encoding,Collection<?> lines) throws IOException {   writeLines(file,encoding,lines,null,false); } "
"public static Map<String,Object> returnError(String errorMessage){   return returnProblem(ModelService.RESPOND_ERROR,errorMessage,null,null,null); } "
"public boolean isSetTraceId(){   return this.traceId != null; } "
"public Circle(final S2Point first,final S2Point second,final double tolerance){   reset(first.getVector().crossProduct(second.getVector()));   this.tolerance=tolerance; } "
"public static int computeMinImageSampleSize(ImageSize srcSize){   int srcWidth=srcSize.getWidth();   int srcHeight=srcSize.getHeight();   int targetWidth=maxBitmapSize.getWidth();   int targetHeight=maxBitmapSize.getHeight();   int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);   int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);   return Math.max(widthScale,heightScale); } "
"public boolean equals(Object o){   if (!(o instanceof ByteWritable)) {     return false;   }   ByteWritable other=(ByteWritable)o;   return this.value == other.value; } "
"public AionPacketHandlerFactory(){   handler=new AionPacketHandler();   addPacket(new CM_UI_SETTINGS(0xC4,State.IN_GAME));   addPacket(new CM_MOTION(0x101,State.IN_GAME));   addPacket(new CM_WINDSTREAM(0x100,State.IN_GAME));   addPacket(new CM_STOP_TRAINING(0x112,State.IN_GAME));   addPacket(new CM_REVIVE(0xC3,State.IN_GAME));   addPacket(new CM_DUEL_REQUEST(0x14C,State.IN_GAME));   addPacket(new CM_CRAFT(0x14B,State.IN_GAME));   addPacket(new CM_QUESTION_RESPONSE(0x10C,State.IN_GAME));   addPacket(new CM_OPEN_STATICDOOR(0xD1,State.IN_GAME));   addPacket(new CM_SPLIT_ITEM(0x15B,State.IN_GAME));   addPacket(new CM_CUSTOM_SETTINGS(0xCA,State.IN_GAME));   addPacket(new CM_PLAY_MOVIE_END(0x12F,State.IN_GAME));   addPacket(new CM_LEVEL_READY(0xC7,State.IN_GAME));   addPacket(new CM_ENTER_WORLD(0xC6,State.AUTHED));   addPacket(new CM_TIME_CHECK(0xEC,State.CONNECTED,State.AUTHED,State.IN_GAME));   addPacket(new CM_QUIT(0xDD,State.AUTHED,State.IN_GAME));   addPacket(new CM_L2AUTH_LOGIN_CHECK(0x153,State.CONNECTED));   addPacket(new CM_CHARACTER_LIST(0x150,State.AUTHED));   addPacket(new CM_CREATE_CHARACTER(0x151,State.AUTHED));   addPacket(new CM_MAC_ADDRESS(0x17B,State.CONNECTED,State.AUTHED,State.IN_GAME));   addPacket(new CM_CHARACTER_PASSKEY(0x1AC,State.AUTHED));   addPacket(new CM_MAY_LOGIN_INTO_GAME(0x174,State.AUTHED));   addPacket(new CM_MOVE(0x10E,State.IN_GAME));   addPacket(new CM_CASTSPELL(0xFF,State.IN_GAME));   addPacket(new CM_EMOTION(0xE5,State.IN_GAME));   addPacket(new CM_TITLE_SET(0x145,State.IN_GAME));   addPacket(new CM_DELETE_ITEM(0x132,State.IN_GAME));   addPacket(new CM_QUEST_SHARE(0x162,State.IN_GAME));   addPacket(new CM_DELETE_QUEST(0x12E,State.IN_GAME));   addPacket(new CM_ABYSS_RANKING_PLAYERS(0x17A,State.IN_GAME));   addPacket(new CM_ABYSS_RANKING_LEGIONS(0x130,State.IN_GAME));   addPacket(new CM_PRIVATE_STORE(0x131,State.IN_GAME));   addPacket(new CM_USE_ITEM(0xE3,State.IN_GAME));   addPacket(new CM_TARGET_SELECT(0xD9,State.IN_GAME));   addPacket(new CM_SHOW_DIALOG(0x2F2,State.IN_GAME));   addPacket(new CM_CHECK_NICKNAME(0x18F,State.AUTHED));   addPacket(new CM_PRIVATE_STORE_NAME(0x136,State.IN_GAME));   addPacket(new CM_DELETE_CHARACTER(0x156,State.AUTHED));   addPacket(new CM_RESTORE_CHARACTER(0x157,State.AUTHED));   addPacket(new CM_MACRO_CREATE(0x169,State.IN_GAME));   addPacket(new CM_MACRO_DELETE(0x18E,State.IN_GAME));   addPacket(new CM_GATHER(0xED,State.IN_GAME));   addPacket(new CM_INSTANCE_INFO(0x19E,State.IN_GAME));   addPacket(new CM_CLIENT_COMMAND_ROLL(0x125,State.IN_GAME));   addPacket(new CM_START_LOOT(0x154,State.IN_GAME));   addPacket(new CM_CLOSE_DIALOG(0x2F3,State.IN_GAME));   addPacket(new CM_DIALOG_SELECT(0x2F0,State.IN_GAME));   addPacket(new CM_BUY_ITEM(0x10D,State.IN_GAME));   addPacket(new CM_EQUIP_ITEM(0xE0,State.IN_GAME));   addPacket(new CM_TELEPORT_SELECT(0x152,State.IN_GAME));   addPacket(new CM_LOOT_ITEM(0x155,State.IN_GAME));   addPacket(new CM_QUESTIONNAIRE(0x16F,State.IN_GAME));   addPacket(new CM_ATTACK(0xFE,State.IN_GAME));   addPacket(new CM_PET(0xD0,State.IN_GAME));   addPacket(new CM_TUNE(0x1A5,State.IN_GAME));   addPacket(new CM_PET_EMOTE(0xD3,State.IN_GAME));   addPacket(new CM_CHALLENGE_LIST(0x1A6,State.IN_GAME));   addPacket(new CM_SHOW_FRIENDLIST(0x1A0,State.IN_GAME));   addPacket(new CM_FRIEND_ADD(0x129,State.IN_GAME));   addPacket(new CM_FRIEND_DEL(0x14E,State.IN_GAME));   addPacket(new CM_FRIEND_STATUS(0x164,State.IN_GAME));   addPacket(new CM_FRIEND_EDIT(0x1A9,State.IN_GAME));   addPacket(new CM_SET_NOTE(0x2F4,State.IN_GAME));   addPacket(new CM_MARK_FRIENDLIST(0x128,State.IN_GAME));   addPacket(new CM_SHOW_BLOCKLIST(0x158,State.IN_GAME));   addPacket(new CM_BLOCK_ADD(0x160,State.IN_GAME));   addPacket(new CM_BLOCK_DEL(0x161,State.IN_GAME));   addPacket(new CM_PLAYER_SEARCH(0x159,State.IN_GAME));   addPacket(new CM_LEGION(0xEB,State.IN_GAME));   addPacket(new CM_LEGION_WH_KINAH(0x10A,State.IN_GAME));   addPacket(new CM_LEGION_UPLOAD_INFO(0x17E,State.IN_GAME));   addPacket(new CM_LEGION_UPLOAD_EMBLEM(0x17F,State.IN_GAME));   addPacket(new CM_LEGION_SEARCH(0x1BA,State.IN_GAME));   addPacket(new CM_LEGION_JOIN_REQUEST(0x1BB,State.IN_GAME));   addPacket(new CM_LEGION_JOIN_REQUEST_CANCEL(0x1B8,State.IN_GAME));   addPacket(new CM_LEGION_SEND_EMBLEM_INFO(0xEE,State.IN_GAME));   addPacket(new CM_LEGION_SEND_EMBLEM(0xE9,State.IN_GAME));   addPacket(new CM_LEGION_MODIFY_EMBLEM(0x2F5,State.IN_GAME));   addPacket(new CM_LEGION_TABS(0x2F1,State.IN_GAME));   addPacket(new CM_STONESPEAR_SIEGE(0xDB,State.IN_GAME));   addPacket(new CM_FIND_GROUP(0x10B,State.IN_GAME));   addPacket(new CM_AUTO_GROUP(0x186,State.IN_GAME));   addPacket(new CM_INVITE_TO_GROUP(0x13F,State.IN_GAME));   addPacket(new CM_GROUP_DISTRIBUTION(0x12A,State.IN_GAME));   addPacket(new CM_GROUP_LOOT(0x176,State.IN_GAME));   addPacket(new CM_GROUP_DATA_EXCHANGE(0x109,State.IN_GAME));   addPacket(new CM_DISTRIBUTION_SETTINGS(0x177,State.IN_GAME));   addPacket(new CM_SHOW_BRAND(0x173,State.IN_GAME));   addPacket(new CM_BROKER_LIST(0x135,State.IN_GAME));   addPacket(new CM_BROKER_SEARCH(0x13A,State.IN_GAME));   addPacket(new CM_REGISTER_BROKER_ITEM(0x139,State.IN_GAME));   addPacket(new CM_BROKER_ADD_ITEM(0x133,State.IN_GAME));   addPacket(new CM_BROKER_SETTLE_LIST(0x15F,State.IN_GAME));   addPacket(new CM_BROKER_REGISTERED(0x13B,State.IN_GAME));   addPacket(new CM_BUY_BROKER_ITEM(0x138,State.IN_GAME));   addPacket(new CM_BROKER_CANCEL_REGISTERED(0x15E,State.IN_GAME));   addPacket(new CM_BROKER_SETTLE_ACCOUNT(0x15C,State.IN_GAME));   addPacket(new CM_PING_REQUEST(0x121,State.IN_GAME));   addPacket(new CM_PING(0xEA,State.AUTHED,State.IN_GAME));   addPacket(new CM_SUMMON_EMOTION(0x184,State.IN_GAME));   addPacket(new CM_SUMMON_ATTACK(0x185,State.IN_GAME));   addPacket(new CM_SUMMON_CASTSPELL(0x018B,State.IN_GAME));   addPacket(new CM_SUMMON_COMMAND(0x137,State.IN_GAME));   addPacket(new CM_SUMMON_MOVE(0x187,State.IN_GAME));   addPacket(new CM_CHECK_MAIL_SIZE(0x143,State.IN_GAME));   addPacket(new CM_CHECK_MAIL_SIZE2(0x193,State.IN_GAME));   addPacket(new CM_SEND_MAIL(0x142,State.IN_GAME));   addPacket(new CM_READ_MAIL(0x140,State.IN_GAME));   addPacket(new CM_READ_EXPRESS_MAIL(0x17C,State.IN_GAME));   addPacket(new CM_DELETE_MAIL(0x147,State.IN_GAME));   addPacket(new CM_GET_MAIL_ATTACHMENT(0x146,State.IN_GAME));   addPacket(new CM_EXCHANGE_ADD_ITEM(0x11E,State.IN_GAME));   addPacket(new CM_EXCHANGE_ADD_KINAH(0x11C,State.IN_GAME));   addPacket(new CM_EXCHANGE_LOCK(0x11D,State.IN_GAME));   addPacket(new CM_EXCHANGE_CANCEL(0x103,State.IN_GAME));   addPacket(new CM_EXCHANGE_OK(0x102,State.IN_GAME));   addPacket(new CM_EXCHANGE_REQUEST(0x2F9,State.IN_GAME));   addPacket(new CM_HOUSE_OPEN_DOOR(0x1BC,State.IN_GAME));   addPacket(new CM_HOUSE_TELEPORT_BACK(0x119,State.IN_GAME));   addPacket(new CM_HOUSE_SCRIPT(0xD8,State.IN_GAME));   addPacket(new CM_HOUSE_TELEPORT(0x198,State.IN_GAME));   addPacket(new CM_HOUSE_EDIT(0x12C,State.IN_GAME));   addPacket(new CM_USE_HOUSE_OBJECT(0x1BE,State.IN_GAME));   addPacket(new CM_HOUSE_SETTINGS(0x107,State.IN_GAME));   addPacket(new CM_HOUSE_KICK(0x106,State.IN_GAME));   addPacket(new CM_GET_HOUSE_BIDS(0x194,State.IN_GAME));   addPacket(new CM_HOUSE_PAY_RENT(0x199,State.IN_GAME));   addPacket(new CM_REGISTER_HOUSE(0x195,State.IN_GAME));   addPacket(new CM_PLACE_BID(0x19B,State.IN_GAME));   addPacket(new CM_HOUSE_DECORATE(0x105,State.IN_GAME));   addPacket(new CM_RELEASE_OBJECT(0x1BF,State.IN_GAME));   addPacket(new CM_OBJECT_SEARCH(0xC5,State.IN_GAME));   addPacket(new CM_MOVE_IN_AIR(0x10F,State.IN_GAME));   addPacket(new CM_VIEW_PLAYER_DETAILS(0x122,State.IN_GAME));   addPacket(new CM_TELEPORT_DONE(0xC9,State.IN_GAME));   addPacket(new CM_CHARACTER_EDIT(0xC1,State.AUTHED));   addPacket(new CM_PLAYER_STATUS_INFO(0x13E,State.IN_GAME));   addPacket(new CM_MANASTONE(0x104,State.IN_GAME));   addPacket(new CM_FUSION_WEAPONS(0x188,State.IN_GAME));   addPacket(new CM_ITEM_REMODEL(0x114,State.IN_GAME));   addPacket(new CM_TOGGLE_SKILL_DEACTIVATE(0xFC,State.IN_GAME));   addPacket(new CM_RECIPE_DELETE(0x117,State.IN_GAME));   addPacket(new CM_REMOVE_ALTERED_STATE(0xFD,State.IN_GAME));   addPacket(new CM_MAY_QUIT(0xC2,State.AUTHED,State.IN_GAME));   addPacket(new CM_REPORT_PLAYER(0x179,State.IN_GAME));   addPacket(new CM_PLAYER_LISTENER(0xE6,State.IN_GAME));   addPacket(new CM_BONUS_TITLE(0x1A7,State.IN_GAME));   addPacket(new CM_BUY_TRADE_IN_TRADE(0x116,State.IN_GAME));   addPacket(new CM_BREAK_WEAPONS(0x189,State.IN_GAME));   addPacket(new CM_CHARGE_ITEM(0x108,State.IN_GAME));   addPacket(new CM_USE_CHARGE_SKILL(0x1A4,State.IN_GAME));   addPacket(new CM_RECONNECT_AUTH(0x171,State.AUTHED));   addPacket(new CM_BLOCK_SET_REASON(0x18D,State.IN_GAME));   addPacket(new CM_INSTANCE_LEAVE(0xE8,State.IN_GAME));   addPacket(new CM_APPEARANCE(0x183,State.IN_GAME));   addPacket(new CM_CAPTCHA(0xC8,State.IN_GAME));   addPacket(new CM_COMPOSITE_STONES(0x1AE,State.IN_GAME));   addPacket(new CM_MEGAPHONE(0x1AB,State.IN_GAME));   addPacket(new CM_SUBZONE_CHANGE(0x17D,State.IN_GAME));   addPacket(new CM_MOVE_ITEM(0x15A,State.IN_GAME));   addPacket(new CM_SELECTITEM_OK(0x1AA,State.IN_GAME));   addPacket(new CM_GAMEGUARD(0x126,State.IN_GAME));   addPacket(new CM_FAST_TRACK_CHECK(0x191,State.IN_GAME));   addPacket(new CM_FAST_TRACK(0x196,State.IN_GAME));   addPacket(new CM_DIRECT_ENTER_WORLD(0x191,State.IN_GAME));   addPacket(new CM_CHAT_AUTH(0x168,State.IN_GAME));   addPacket(new CM_CHAT_MESSAGE_PUBLIC(0xD5,State.IN_GAME));   addPacket(new CM_CHAT_GROUP_INFO(0x2FB,State.IN_GAME));   addPacket(new CM_CHAT_MESSAGE_WHISPER(0xDA,State.IN_GAME));   addPacket(new CM_CHAT_PLAYER_INFO(0xE1,State.IN_GAME));   addPacket(new CM_VERSION_CHECK(0xDE,State.CONNECTED));   addPacket(new CM_FATIGUE_RECOVER(0x135,State.IN_GAME));   addPacket(new CM_ATREIAN_PASSPORT(0x1B6,State.IN_GAME));   addPacket(new CM_HOTSPOT_TELEPORT(0x1B2,State.IN_GAME));   addPacket(new CM_ITEM_PURIFICATION(0x1B1,State.IN_GAME));   addPacket(new CM_UPGRADE_ARCADE(0x1B0,State.IN_GAME));   addPacket(new CM_FILE_VERIFY(0x2F8,State.IN_GAME));   addPacket(new CM_EXPAND_CUBE(0x1B5,State.IN_GAME));   addPacket(new CM_GM_COMMAND_SEND(0xE4,State.IN_GAME));   addPacket(new CM_GM_BOOKMARK(0xE7,State.IN_GAME));   addPacket(new CM_1A3_UNK(0x1A3,State.IN_GAME));   addPacket(new CM_11A_UNK(0x11A,State.IN_GAME)); } "
"public void addDatatransferProgressListener(OnDatatransferProgressListener listener,OCUpload ocUpload){   if (ocUpload == null || listener == null)   return;   String targetKey=buildRemoteName(ocUpload.getAccountName(),ocUpload.getRemotePath());   mBoundListeners.put(targetKey,listener); } "
"public int convertTime(){   return this.getTime() / 12; } "
"public boolean haveUnread(){   for (  Letter letter : mails.values()) {     if (letter.isUnread()) {       return true;     }   }   return false; } "
"_ProguardLexer(java.io.Reader in){   this.zzReader=in; } "
"public void dumpBinary(DataOutputStream os) throws IOException {   os.writeInt(frameData.length);   for (int i=0; i < frameData.length; i++) {     os.writeShort(frameData[i]);   }   os.writeInt(residualData.length);   for (int i=0; i < residualData.length; i++) {     os.writeByte(residualData[i]);   } } "
"private void handleOnNotificationDismissed(long id){   Task[] tasksToDismiss=NagboxDbOps.getTasksToDismiss(mDatabase,id);   if (tasksToDismiss.length == 0) {     return;   }   NagboxDbOps.Transaction transaction=NagboxDbOps.startTransaction(mDatabase);   for (  Task task : tasksToDismiss) {     task.setIsSeen(true);     transaction.updateTaskStatus(task);   }   boolean isSuccess=transaction.commit();   if (!isSuccess) {     Log.e(TAG,\"Couldn't unset the 'not seen' flag from tasks\");   }  else {     final ContentResolver contentResolver=getContentResolver();     for (    Task task : tasksToDismiss) {       contentResolver.notifyChange(TasksTable.getUriForItem(task.id),null);     }   } } "
"public @NonNull ChargeRequest.Builder enforceBusinessLocation(@Nullable String locationId){   this.locationId=locationId;   return this; } "
"private static void innerListFiles(Collection<File> files,File directory,IOFileFilter filter,boolean includeSubDirectories){   File[] found=directory.listFiles((FileFilter)filter);   if (found != null) {     for (    File file : found) {       if (file.isDirectory()) {         if (includeSubDirectories) {           files.add(file);         }         innerListFiles(files,file,filter,includeSubDirectories);       }  else {         files.add(file);       }     }   } } "
"@Override public int read() throws IOException {   throw exception; } "
"public static void encode(InputStream inputStream,OutputStream outputStream,int wrapAt) throws IOException {   Base64OutputStream aux=new Base64OutputStream(outputStream,wrapAt);   copy(inputStream,aux);   aux.commit(); } "
"@Override public Loader<Cursor> onCreateLoader(int i,Bundle bundle){   return new CursorLoader(getActivity(),FeedContract.Entry.CONTENT_URI,PROJECTION,null,null,FeedContract.Entry.COLUMN_NAME_PUBLISHED + \" desc\"); } "
"public void removeHeaderView(@NonNull View view){   mNavigationView.removeHeaderView(view); } "
"private static String buildMessage(String format,Object... args){   String msg=(args == null) ? format : String.format(Locale.US,format,args);   StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();   String caller=\"<unknown>\";   for (int i=2; i < trace.length; i++) {     Class<?> clazz=trace[i].getClass();     if (!clazz.equals(VolleyLog.class)) {       String callingClass=trace[i].getClassName();       callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);       callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);       caller=callingClass + \".\" + trace[i].getMethodName();       break;     }   }   return String.format(Locale.US,\"[%d] %s: %s\",Thread.currentThread().getId(),caller,msg); } "
"public void createOffscreenSurface(int width,int height){   if (eGLSurface != EGL14.EGL_NO_SURFACE) {     throw new IllegalStateException(\"surface already created\");   }   eGLSurface=eglCore.createOffscreenSurface(width,height);   this.width=width;   this.height=height; } "
"public int decrement(int val){   if (val < 0) {     return increment(-val);   }   lock.lock();   int newValue=(value-=val);   lock.unlock();   return newValue; } "
"public boolean naive_side_effect(){   return soot.PhaseOptions.getBoolean(options,\"naive-side-effect\"); } "
"public boolean areAllLocationSettingsEnabled(){   return isChromeLocationSettingEnabled() && isSystemLocationSettingEnabled(); } "
"protected GroupsBanUserQuery userId(int value){   return unsafeParam(\"user_id\",value); } "
"public int geom_frac_base(){   return soot.PhaseOptions.getInt(options,\"geom-frac-base\"); } "
"public int nextInt(){   int val=iterator.val;   if (iterator != null) {     iterator=iterator.next;   }   return val; } "
"public static boolean isUrlUsable(String url){   if (CommonUtils.isEmpty(url)) {     return false;   }   URL urlTemp=null;   HttpURLConnection connt=null;   try {     urlTemp=new URL(url);     connt=(HttpURLConnection)urlTemp.openConnection();     connt.setRequestMethod(\"HEAD\");     int returnCode=connt.getResponseCode();     if (returnCode == HttpURLConnection.HTTP_OK) {       return true;     }   }  catch (  Exception e) {     return false;   }  finally {     connt.disconnect();   }   return false; } "
"static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {   SecurityManager security=System.getSecurityManager();   if (security != null) {     final int lastDot=className.lastIndexOf(\".\");     String packageName=className;     if (lastDot != -1)     packageName=className.substring(0,lastDot);     security.checkPackageAccess(packageName);   }   Class providerClass;   if (cl == null) {     providerClass=Class.forName(className);   }  else {     try {       providerClass=cl.loadClass(className);     }  catch (    ClassNotFoundException x) {       if (doFallback) {         ClassLoader current=ObjectFactory.class.getClassLoader();         if (current == null) {           providerClass=Class.forName(className);         }  else         if (cl != current) {           cl=current;           providerClass=cl.loadClass(className);         }  else {           throw x;         }       }  else {         throw x;       }     }   }   return providerClass; } "
"public byte[] computeSignature(boolean forceRecompute){   if (this.signature != null) {     if (!forceRecompute) {       return this.signature;     }   }   MessageDigest digest;   try {     digest=MessageDigest.getInstance(\"SHA-1\");   }  catch (  NoSuchAlgorithmException e) {     throw new AssertionError();   }   byte[] buffer=new byte[8192];   ByteBuffer data=this.data.duplicate();   data.limit(data.capacity());   data.position(SIGNATURE_OFFSET + SizeOf.SIGNATURE);   while (data.hasRemaining()) {     int count=Math.min(buffer.length,data.remaining());     data.get(buffer,0,count);     digest.update(buffer,0,count);   }   return (this.signature=digest.digest()); } "
"protected Label createWrappingLabel(Composite parent,String text,int indent){   return createWrappingLabel(parent,text,indent,1); } "
"public ImmutableList<PathSegment> parse(){   ImmutableList<PathSegment> path=parse(true,false);   if (!pathStartedWithSlash) {     addError(\"effective path must start with leading '/'.\");   }   if (current != null) {     addError(\"unrecognized input at '%s'.\",current);   }   if (configVersion > 0 && CUSTOM_VERB_PATTERN_ILLEGAL.matcher(template).find()) {     addError(\"invalid token '/:' before the custom verb.\");   }   if (hadErrors) {     return null;   }   if (customVerb != null) {     return FluentIterable.from(path).append(new LiteralSegment(customVerb,true)).toList();   }   return path; } "
"public SiteAdminPage clickDeleteAndConfirm(String title){   grid.selectPageByTitle(title);   grid.getActionBar().clickOnButton(SiteAdminButtons.DELETE,siteAdminConfirmationWindow);   clickYesOnConfirmationWindow();   return this; } "
"@NotNull public static String requireAttr(@NotNull String tag,@NotNull Attributes attributes,@NotNull String name){   String result=attributes.getValue(name);   if (result == null) {     throw new RuntimeException(String.format(\"Required attribute \\\"%1$s\\\" not found in element <%2$s %3$s>\",name,tag,attrsToString(attributes)));   }  else   if (\"\".equals(result.trim())) {     throw new RuntimeException(String.format(\"Required attribute \\\"%1$s\\\" found, but empty in element <%2$s %3$s>\",name,tag,attrsToString(attributes)));   }   return result; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_HEAL_MP_TO_B(String skilltarget,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201048,skilltarget,num0,skillname); } "
"public void updateProfile() throws RemoteServerException, LoginFailedException {   GetPlayerMessage getPlayerReqMsg=GetPlayerMessage.newBuilder().setPlayerLocale(playerLocale.getPlayerLocale()).build();   ServerRequest getPlayerServerRequest=new ServerRequest(RequestType.GET_PLAYER,getPlayerReqMsg);   api.getRequestHandler().sendServerRequests(CommonRequest.appendCheckChallenge(getPlayerServerRequest));   try {     updateProfile(GetPlayerResponse.parseFrom(getPlayerServerRequest.getData()));   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException(e);   } } "
"public void insert(int offset,short[] values,int valOffset,int len){   if (offset == _pos) {     add(values,valOffset,len);     return;   }   ensureCapacity(_pos + len);   System.arraycopy(_data,offset,_data,offset + len,_pos - offset);   System.arraycopy(values,valOffset,_data,offset,len);   _pos+=len; } "
"@Override public ImageWritable transform(ImageWritable image,Random random){   if (image == null) {     return null;   }   Mat mat=(Mat)converter.convert(image.getFrame());   Mat result=new Mat();   try {     cvtColor(mat,result,conversionCode);   }  catch (  Exception e) {     throw new RuntimeException(e);   }   return new ImageWritable(converter.convert(result)); } "
"public FileTreeNode(File parent,String name) throws SecurityException, FileNotFoundException {   this(parent.toPath(),name); } "
"public static boolean isFileNewer(File file,long timeMillis){   if (file == null) {     throw new IllegalArgumentException(\"No specified file\");   }   if (!file.exists()) {     return false;   }   return file.lastModified() > timeMillis; } "
"protected BoardFixTopicQuery groupId(int value){   return unsafeParam(\"group_id\",value); } "
"public static void dropTable(Database db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"NEWS\\\"\";   db.execSQL(sql); } "
"public static String collectionToDelimitedString(Collection<String> coll,String delim){   return collectionToDelimitedString(coll,delim,\"\",\"\"); } "
"public RegulaFalsiSolver(){   super(DEFAULT_ABSOLUTE_ACCURACY,Method.REGULA_FALSI); } "
"public VideoEditQuery edit(UserActor actor,int videoId){   return new VideoEditQuery(getClient(),actor,videoId); } "
"@Nullable public static Label createIfValid(String label){   if (validate(label)) {     return new Label(label);   }   return null; } "
"static public float[] decode_ARGB(int rgba){   int vArc_I16=(rgba >> 0) & 0xFFFF;   int vMag_I16=(rgba >> 16) & 0xFFFF;   float vArc=TWO_PI * vArc_I16 / (0xFFFF - 1);   float vMag=vMag_I16;   float vx=(float)Math.cos(vArc);   float vy=(float)Math.sin(vArc);   return new float[]{vx,vy,vMag}; } "
"public TDistribution(double degreesOfFreedom,double inverseCumAccuracy) throws MathIllegalArgumentException {   super(inverseCumAccuracy);   if (degreesOfFreedom <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.DEGREES_OF_FREEDOM,degreesOfFreedom);   }   this.degreesOfFreedom=degreesOfFreedom;   final double n=degreesOfFreedom;   final double nPlus1Over2=(n + 1) / 2;   factor=Gamma.logGamma(nPlus1Over2) - 0.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) - Gamma.logGamma(n / 2); } "
"public double lengthSquared(){   return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z); } "
"public BigFraction pow(final long exponent){   if (exponent == 0) {     return ONE;   }   if (numerator.signum() == 0) {     return this;   }   if (exponent < 0) {     return new BigFraction(ArithmeticUtils.pow(denominator,-exponent),ArithmeticUtils.pow(numerator,-exponent));   }   return new BigFraction(ArithmeticUtils.pow(numerator,exponent),ArithmeticUtils.pow(denominator,exponent)); } "
"public BinaryHttpResponseHandler(){   super(); } "
"public static int scale3(String source,String file,final int w,final int h){   try {     BufferedImage img=ImageIO.read(new File(source));     if (img == null || w < 0 || h < 0)     return -1;     int h1=img.getHeight();     int w1=img.getWidth();     if (w > w1 || h > h1)     return -1;     int w0=w;     int h0=h;     if (h <= 0)     h0=h1;     if (w <= 0)     w0=w1;     float fh=((float)h1) / h;     float fw=((float)w1) / w;     if (fh < fw) {       int w2=(int)(w1 / fh);       w0=w2;     }  else {       int h2=(int)(h1 / fw);       h0=h2;     }     BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_4BYTE_ABGR);     Graphics g=out.getGraphics();     Image tmp=img.getScaledInstance(w,h,Image.SCALE_SMOOTH);     int ox=(w - w0) / 2;     int oy=(h - h0) / 2;     g.drawImage(tmp,ox,oy,w0,h0,null);     ImageIO.write(out,\"png\",new File(file));     return 1;   }  catch (  Exception e) {     log.error(source,e);   }   return -1; } "
"public Value distinct(Value obj){   throw new RuntimeException(\"Unsupported operation.\"); } "
"public Dfp newInstance(final int x){   return new Dfp(getField(),x); } "
"public void addBodyDecl(BodyDecl node){   List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();   list.addChild(node); } "
"private static void printUsage(){   System.err.println(\"Syntax:\\nsummaryEvaluator [-summary=summary.txt] [-modelDir=models/]\" + \"[-nMin=#] [-nMax=#] [-dist=#]\" + \"[-s] [-docClass=...] [-compClass=...] [-merge]\");   System.err.println(\"nMin=#\\tMin n-gram size.\\nnMax=#\\tMax n-gram size.\\n\" + \"dist=#\\tN-gram window.\\n\" + \"-s\\tFor non-verbose output (silent).\\n\"+ \"-docClass=...\\tA java class identifier to use as Document class. \"+ \"Defaults to jinsect.documentModel.NGramDocument \\n\"+ \"-compClass=...\\tA java class identifier to use as Comparator class. \"+ \"Defaults to jinsect.documentModel.NGramCachedGraphComparator \\n\"+ \"-merge\\tIf indicated then the model files' representation is merged\"+ \" to provide an overall model graph. Then comparison is performed\"+ \" with respect to the overall graph.\"+ \"-jack\\tUse jackknifing in comparison (round robin comparison with leave-one-out)\"+ \"to the model summaries. The resulting score is the mean of the scores.\"+ \"-?\\tShow this screen.\"); } "
"@Override public void close() throws IOException { } "
"public static String buildSystemName(@Nullable Project project){   return getBuildSystem(project).getName(); } "
"public static String toString(InputStream input,String encoding) throws IOException {   return toString(input,Charsets.toCharset(encoding)); } "
"public static void updatePilot(AirMapPilot pilot,AirMapCallback<AirMapPilot> listener){   String url=String.format(pilotByIdUrl,pilot.getPilotId());   AirMap.getClient().patch(url,pilot.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilot.class)); } "
"public boolean isSkipCommentLines(){   return iterator.isSkipCommentLines(); } "
"private Node nodeListItem(int index){   if (fNodeListCache == null) {     if (needsSyncChildren()) {       synchronizeChildren();     }     if (firstChild == lastChild()) {       return index == 0 ? firstChild : null;     }     fNodeListCache=ownerDocument.getNodeListCache(this);   }   int i=fNodeListCache.fChildIndex;   ChildNode n=fNodeListCache.fChild;   boolean firstAccess=true;   if (i != -1 && n != null) {     firstAccess=false;     if (i < index) {       while (i < index && n != null) {         i++;         n=n.nextSibling;       }     }  else     if (i > index) {       while (i > index && n != null) {         i--;         n=n.previousSibling();       }     }   }  else {     if (index < 0) {       return null;     }     n=firstChild;     for (i=0; i < index && n != null; i++) {       n=n.nextSibling;     }   }   if (!firstAccess && (n == firstChild || n == lastChild())) {     fNodeListCache.fChildIndex=-1;     fNodeListCache.fChild=null;     ownerDocument.freeNodeListCache(fNodeListCache);   }  else {     fNodeListCache.fChildIndex=i;     fNodeListCache.fChild=n;   }   return n; } "
"public static boolean sectionLike(Item tokenItem){   String sectionType=((String)tokenItem.findFeature(\"p.name\")).toLowerCase();   return inKingSectionLikeHash(sectionType,SECTION_TYPES); } "
"public boolean equals(Object object){   return object == null || object == this; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_LOOT_GET_ITEM_ME(DescriptionId descriptionId){   return new SM_SYSTEM_MESSAGE(1390180,descriptionId); } "
"private boolean checkFingerPrintAvailability(@NonNull Context context){   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {     FingerprintManagerCompat fingerprintManager=FingerprintManagerCompat.from(context);     if (!fingerprintManager.isHardwareDetected()) {       mCallback.onNoFingerPrintHardwareFound();       return false;     }  else     if (!fingerprintManager.hasEnrolledFingerprints()) {       mCallback.onNoFingerPrintRegistered();       return false;     }     return true;   }  else {     mCallback.onBelowMarshmallow();     return false;   } } "
"public String requestDiscoveryContent(List<String> cookielist,int pagenum) throws Exception {   URL url=new URL(\"http://www.hi-pda.com/forum/forumdisplay.php?fid=2&page=\" + pagenum);   HttpURLConnection huc=(HttpURLConnection)url.openConnection();   for (  String cookie : cookielist) {     huc.setRequestProperty(\"Cookie\",cookie.split(\";\",2)[0]);   }   huc.connect();   String line=null;   StringBuilder content=new StringBuilder();   InputStream in=new GZIPInputStream(huc.getInputStream());   BufferedReader bufw=new BufferedReader(new InputStreamReader(in,\"gbk\"));   StringBuilder writeContent=new StringBuilder();   int count=0;   while ((line=bufw.readLine()) != null) {     String temp=null;     Pattern titlePattern=Pattern.compile(\" <span id=\\\"thread_(.*)span>\");     Matcher title=titlePattern.matcher(line.toString().subSequence(0,line.length()));     Pattern numsPattern=Pattern.compile(\"<td class=\\\"nums\\\"><str(.*)td>\");     Matcher nums=numsPattern.matcher(line.toString().subSequence(0,line.length()));     Pattern datePattern=Pattern.compile(\"<em>20(.*)em>\");     Matcher date=datePattern.matcher(line.toString().subSequence(0,line.length()));     if (title.matches() == true) {       writeContent=writeContent.append(title.group().replaceAll(\"[\\\\x00-\\\\x08\\\\x0b-\\\\x0c\\\\x0e-\\\\x1f]\",\"\"));     }     if (nums.matches() == true) {       temp=nums.group();       temp=temp.replaceAll(\"strong\",\"reply\");       temp=temp.replaceAll(\"em\",\"hit\");       temp=temp.replaceAll(\"<td class=\\\"nums\\\">\",\"\");       temp=temp.replaceAll(\"</td>\",\"\");       int i=temp.indexOf('/');       int j=temp.lastIndexOf('/');       writeContent=writeContent.insert(writeContent.length() - 7,temp);       writeContent.append(\"\\r\\n\");     }     if (date.matches() == true) {       temp=date.group();       temp=temp.replaceAll(\"em\",\"date\");       writeContent=writeContent.insert(writeContent.length() - 7,temp);     }     content.append(line + \"\\r\\n\");   }   return writeContent.toString(); } "
"public DictionaryMap(DictionaryMap original){   for (  Int2ObjectMap.Entry<String> entry : original.keyToValue.int2ObjectEntrySet()) {     keyToValue.put(entry.getIntKey(),entry.getValue());     valueToKey.put(entry.getValue(),entry.getIntKey());   }   valueToKey.defaultReturnValue(-1); } "
"public static final void addPlayer(PlayerGroup group,Player player){   Preconditions.checkNotNull(group,\"Group should not be null\");   group.onEvent(new PlayerEnteredEvent(group,player)); } "
"public static Class needClass(String property) throws NoSuchPropertyException {   String value=needProperty(property);   Class c=null;   try {     c=Class.forName(value);   }  catch (  ClassNotFoundException e) {     throw new NoSuchPropertyException(\"Cannot find class `\" + value + \"'. Check property `\"+ property+ \"' in configuration files\");   }   return c; } "
"Item(final int index,final Item i){   this.index=index;   type=i.type;   intVal=i.intVal;   longVal=i.longVal;   strVal1=i.strVal1;   strVal2=i.strVal2;   strVal3=i.strVal3;   hashCode=i.hashCode; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200870,skillcaster,num0,skillname); } "
"@Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {   boolean removed=handleStartElement(element,attributes,augs);   if (fDocumentHandler != null) {     fDocumentHandler.emptyElement(element,attributes,augs);   }   if (!removed) {     handleEndElement(element,augs,true);   } } "
"public void init$Children(){   children=new ASTNode[1];   setChild(new List(),0); } "
"public RemoteMetaDataImpl(Schema schema) throws RemoteException {   this.schema=schema;   fields.addAll(schema.fields()); } "
"public BTPageFormatter(Schema sch,long[] flags){   this.sch=sch;   this.flags=flags;   myOffsetMap=BTreePage.offsetMap(sch); } "
"protected LeadsGetStatsQuery leadId(int value){   return unsafeParam(\"lead_id\",value); } "
"private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){   try {     PackageManager pm=context.getPackageManager();     List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);     if (handlers == null || handlers.size() == 0) {       return false;     }     for (    ResolveInfo resolveInfo : handlers) {       IntentFilter filter=resolveInfo.filter;       if (filter == null)       continue;       if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;       if (resolveInfo.activityInfo == null)       continue;       return true;     }   }  catch (  RuntimeException e) {     Log.e(TAG,\"Runtime exception while getting specialized handlers\");   }   return false; } "
"private static void closeSafe(Closeable closeable){   if (closeable != null) {     try {       closeable.close();     }  catch (    IOException ignored) {     }   } } "
"public SketchRoundUpMapper(String columnName){   this.columnName=columnName; } "
"public static final void changeGroupRules(PlayerGroup group,LootGroupRules lootRules){   group.onEvent(new ChangeGroupLootRulesEvent(group,lootRules)); } "
"private DataQueryParams removeDimension(String dimension){   this.dimensions.remove(new BaseDimensionalObject(dimension));   return this; } "
"protected Granularity generateGranularity(@NotNull String granularity,@NotNull DateTimeZone dateTimeZone,@NotNull GranularityParser granularityParser) throws BadApiRequestException {   try {     return granularityParser.parseGranularity(granularity,dateTimeZone);   }  catch (  GranularityParseException e) {     LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity);     throw new BadApiRequestException(e.getMessage());   } } "
"public void put(String key,Object value){   if (key != null && value != null) {     urlParamsWithObjects.put(key,value);   } } "
"public static String toSootAT(String type){   return type; } "
"static boolean turnHuman(){   int x, y;   do {     System.out.print(\"Your turn X Y (1..\" + field_size + \")\\n>\");     x=sc.nextInt();     y=sc.nextInt();     if (x < 0 || y < 0) {       return false;     }   }  while (!isCellBusy(x - 1,y - 1,dotEmpty));   field[x - 1][y - 1]=dotHuman;   return true; } "
"public static void scale(String source,int x,int y,int w0,int h0,int w1,int h1,String file,int w,int h){   try {     BufferedImage img=ImageIO.read(new File(source));     if (img == null || w < 0 || h < 0)     return;     int w2=img.getWidth();     int h2=img.getHeight();     if (w > w1 || h > h1)     return;     x=x * w2 / w1;     y=y * h2 / h1;     w0=w0 * w2 / w1;     h0=h0 * h2 / h1;     BufferedImage out=new BufferedImage(w0,h0,BufferedImage.TYPE_3BYTE_BGR);     Graphics g=out.getGraphics();     g.drawImage(img,0,0,w0,h0,x,y,x + w0,y + h0,null);     Image tmp=out.getScaledInstance(w,h,Image.SCALE_SMOOTH);     out=new BufferedImage(w,h,BufferedImage.TYPE_3BYTE_BGR);     g=out.getGraphics();     g.drawImage(tmp,0,0,w,h,null);     ImageIO.write(out,\"jpg\",new File(file));   }  catch (  Exception e) {     log.error(e.getMessage(),e);   } } "
"private void notifyUIRefreshComplete(boolean ignoreHook){   if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {     if (DEBUG) {       PtrCLog.d(LOG_TAG,\"notifyUIRefreshComplete mRefreshCompleteHook run.\");     }     mRefreshCompleteHook.takeOver();     return;   }   if (mPtrUIHandlerHolder.hasHandler()) {     if (DEBUG) {       PtrCLog.i(LOG_TAG,\"PtrUIHandler: onUIRefreshComplete\");     }     mPtrUIHandlerHolder.onUIRefreshComplete(this);   }   mPtrIndicator.onUIRefreshComplete();   tryScrollBackToTopAfterComplete();   tryToNotifyReset(); } "
"public void addParam(ModelParam param){   if (param != null) {     contextInfo.put(param.name,param);     contextParamList.add(param);   } } "
"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {   in.defaultReadObject();   if ((objBytes == null) && ((hash != 13) || (locBytes != null)))   throw new InvalidObjectException(\"Bad hash or annotation\"); } "
"public static void addPet(Player player,int petId,String name,int decorationId,int expireTime){   PetCommonData petCommonData=player.getPetList().addPet(player,petId,decorationId,name,expireTime);   if (petCommonData != null) {     PacketSendUtility.sendPacket(player,new SM_PET(1,petCommonData));     if (expireTime > 0) {       ExpireTimerTask.getInstance().addTask(petCommonData,player);     }   } } "
"public AggregationSet sum(String path){   return add(new SumAggregator().setPath(path)); } "
"public DimensionRow findDimensionRowByKeyValue(String value){   return dimension.findDimensionRowByKeyValue(value); } "
"public float[] generateTransformedValuesHorizontalBarChart(IBarDataSet data,int dataSet,BarData bd,float phaseY){   float[] valuePoints=new float[data.getEntryCount() * 2];   int setCount=bd.getDataSetCount();   float space=bd.getGroupSpace();   for (int j=0; j < valuePoints.length; j+=2) {     Entry e=data.getEntryForIndex(j / 2);     int i=e.getXIndex();     float x=i + i * (setCount - 1) + dataSet + space * i + space / 2f;     float y=e.getVal();     valuePoints[j]=y * phaseY;     valuePoints[j + 1]=x;   }   getValueToPixelMatrix().mapPoints(valuePoints);   return valuePoints; } "
"public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){   overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent); } "
"private MathObservable(){   throw new IllegalStateException(\"No instances!\"); } "
"public boolean context_heap(){   return soot.PhaseOptions.getBoolean(options,\"context-heap\"); } "
"public static StyledLayerDescriptor createNewRaster(){   StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();   NamedLayer namedLayer=styleFactory.createNamedLayer();   sld.addStyledLayer(namedLayer);   Style style=styleFactory.createStyle();   namedLayer.addStyle(style);   List<FeatureTypeStyle> ftsList=style.featureTypeStyles();   FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();   ftsList.add(fts);   Rule rule=styleFactory.createRule();   fts.rules().add(rule);   RasterSymbolizer raster=createDefaultRasterSymbolizer();   rule.symbolizers().add(raster);   return sld; } "
"@Override public void publish(long sequence){   sequencer.publish(sequence); } "
"protected Map<String,Object> generateSlice(String sliceName,PhysicalTableDictionary tableDictionary,UriInfo uriInfo) throws BadApiRequestException {   if (tableDictionary.isEmpty()) {     String msg=EMPTY_DICTIONARY.logFormat(\"Slices cannot be found. Physical Table\");     LOG.error(msg);     throw new BadApiRequestException(msg);   }   PhysicalTable table=tableDictionary.get(sliceName);   if (table == null) {     String msg=SLICE_UNDEFINED.logFormat(sliceName);     LOG.error(msg);     throw new BadApiRequestException(msg);   }   Map<Column,Set<Interval>> columnCache=table.getAvailableIntervals();   Set<Map<String,Object>> dimensionsResult=new LinkedHashSet<>();   Set<Map<String,Object>> metricsResult=new LinkedHashSet<>();   columnCache.entrySet().stream().forEach(null);   Map<String,Object> generated=new LinkedHashMap<>();   generated.put(\"name\",sliceName);   generated.put(\"timeGrain\",table.getTimeGrain().getName());   generated.put(\"timeZone\",table.getTimeGrain().getTimeZoneName());   generated.put(\"dimensions\",dimensionsResult);   generated.put(\"metrics\",metricsResult);   LOG.trace(\"Generated slice: {}\",generated);   return generated; } "
"private void onPermissionsNotGranted(){   Toast.makeText(this,R.string.toast_permissions_not_granted,Toast.LENGTH_SHORT).show();   finish(); } "
"public Map<String,List<ChartObject>> maxByDate(List<ChartObject> input,Period period,String maxSeries){   final Function<ChartObject,String> chartObjectToDate=null;   final BinaryOperator<ChartObject> chartObjectReducer=null;   final Map<String,Optional<ChartObject>> groupByDate=input.stream().sorted(null).collect(Collectors.groupingBy(chartObjectToDate,null,Collectors.reducing(chartObjectReducer)));   final Map<String,ChartObject> range=buildRange(input,period);   final LinkedHashMap<String,List<ChartObject>> result=new LinkedHashMap<>();   range.forEach(null);   return result; } "
"public SobolSequenceGenerator(final int dimension) throws MathIllegalArgumentException {   MathUtils.checkRangeInclusive(dimension,1,MAX_DIMENSION);   final InputStream is=getClass().getResourceAsStream(RESOURCE_NAME);   if (is == null) {     throw MathRuntimeException.createInternalError();   }   this.dimension=dimension;   direction=new long[dimension][BITS + 1];   x=new long[dimension];   try {     initFromStream(is);   }  catch (  IOException e) {     throw MathRuntimeException.createInternalError();   } catch (  MathIllegalStateException e) {     throw MathRuntimeException.createInternalError();   }  finally {     try {       is.close();     }  catch (    IOException e) {     }   } } "
"public WMSEnvVarValues(){ } "
"public void drawChartTransposed(Graphics2D gc){   gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString())); } "
"static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {   int capacity=numDataBytes * 8;   if (bits.getSize() > capacity) {     throw new WriterException(\"data bits cannot fit in the QR Code\" + bits.getSize() + \" > \"+ capacity);   }   for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {     bits.appendBit(false);   }   int numBitsInLastByte=bits.getSize() & 0x07;   if (numBitsInLastByte > 0) {     for (int i=numBitsInLastByte; i < 8; i++) {       bits.appendBit(false);     }   }   int numPaddingBytes=numDataBytes - bits.getSizeInBytes();   for (int i=0; i < numPaddingBytes; ++i) {     bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);   }   if (bits.getSize() != capacity) {     throw new WriterException(\"Bits size does not equal capacity\");   } } "
"public ContentSettingException(int type,String pattern,ContentSetting setting,String source){   mContentSettingType=type;   mPattern=pattern;   mContentSetting=setting;   mSource=source; } "
"private void updateParentItems(TreeItem item){   if (item != null) {     Item[] children=getChildren(item);     boolean containsChecked=false;     boolean containsUnchecked=false;     for (int i=0; i < children.length; i++) {       TreeItem curr=(TreeItem)children[i];       containsChecked|=curr.getChecked();       containsUnchecked|=(!curr.getChecked() || curr.getGrayed());     }     item.setChecked(containsChecked);     item.setGrayed(containsChecked && containsUnchecked);     updateParentItems(item.getParentItem());   } } "
"public void solve(){   submitInitialSeeds();   awaitCompletionComputeValuesAndShutdown(); } "
"public VideoAddAlbumQuery privacy(String... value){   return unsafeParam(\"privacy\",value); } "
"private String printSFormat(String x){   int nPrint=x.length();   int width=fieldWidth;   if (precisionSet && nPrint > precision)   nPrint=precision;   if (!fieldWidthSet)   width=nPrint;   int n=0;   if (width > nPrint)   n+=width - nPrint;   if (nPrint >= x.length())   n+=x.length();  else   n+=nPrint;   char[] ca=new char[n];   int i=0;   if (leftJustify) {     if (nPrint >= x.length()) {       char[] csx=x.toCharArray();       for (i=0; i < x.length(); i++)       ca[i]=csx[i];     }  else {       char[] csx=x.substring(0,nPrint).toCharArray();       for (i=0; i < nPrint; i++)       ca[i]=csx[i];     }     for (int j=0; j < width - nPrint; j++, i++)     ca[i]=' ';   }  else {     for (i=0; i < width - nPrint; i++)     ca[i]=' ';     if (nPrint >= x.length()) {       char[] csx=x.toCharArray();       for (int j=0; j < x.length(); i++, j++)       ca[i]=csx[j];     }  else {       char[] csx=x.substring(0,nPrint).toCharArray();       for (int j=0; j < nPrint; i++, j++)       ca[i]=csx[j];     }   }   return new String(ca); } "
"protected Attribute(final String type){   this.type=type; } "
"public float angleBetween(Vector2f otherVector){   float angle=FastMath.atan2(otherVector.y,otherVector.x) - FastMath.atan2(y,x);   return angle; } "
"public static boolean isStarted(String timePhaseName){   RequestLog current=RLOG.get();   TimedPhase timePhase=current.times.get(timePhaseName);   return timePhase != null && timePhase.isStarted(); } "
"public void hideKeyboard(Runnable postHideTask){   if (mUrlBar != null)   mUrlBar.clearFocus();   boolean wasVisible=false;   if (hasFocus()) {     wasVisible=UiUtils.hideKeyboard(this);   }   if (wasVisible) {     mPostHideKeyboardTask=postHideTask;   }  else {     postHideTask.run();   } } "
"public T distanceInf(final FieldVector3D<T> v){   final T dx=v.x.subtract(x).abs();   final T dy=v.y.subtract(y).abs();   final T dz=v.z.subtract(z).abs();   if (dx.getReal() <= dy.getReal()) {     if (dy.getReal() <= dz.getReal()) {       return dz;     }  else {       return dy;     }   }  else {     if (dx.getReal() <= dz.getReal()) {       return dz;     }  else {       return dx;     }   } } "
"public FeatureVector toFeatureVector(int unitIndex,String featureString){   String[] featureValues=featureString.split(\"\\\\s+\");   if (featureValues.length != numByteFeatures + numShortFeatures + numContinuousFeatures)   throw new IllegalArgumentException(\"Expected \" + (numByteFeatures + numShortFeatures + numContinuousFeatures) + \" features, got \"+ featureValues.length);   byte[] bytes=new byte[numByteFeatures];   short[] shorts=new short[numShortFeatures];   float[] floats=new float[numContinuousFeatures];   for (int i=0; i < numByteFeatures; i++) {     bytes[i]=Byte.parseByte(featureValues[i]);   }   for (int i=0; i < numShortFeatures; i++) {     shorts[i]=Short.parseShort(featureValues[numByteFeatures + i]);   }   for (int i=0; i < numContinuousFeatures; i++) {     floats[i]=Float.parseFloat(featureValues[numByteFeatures + numShortFeatures + i]);   }   return new FeatureVector(bytes,shorts,floats,unitIndex); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201082,skilltarget,skillname); } "
"public boolean isCritical(){   return true; } "
"public RTHtml<RTImage,RTAudio,RTVideo> convert(final Spanned text,RTFormat.Html rtFormat){   mText=text;   mRTFormat=rtFormat;   mOut=new StringBuilder();   mImages=new ArrayList<>();   mParagraphStyles.clear();   convertParagraphs();   return new RTHtml<>(rtFormat,mOut.toString(),mImages); } "
"private boolean isConfigurationPluginAvailable(){   if (configurationPluginAvailable == null) {     try {       String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");       configurationPluginAvailable=(value != null);     }  catch (    Exception e) {       Logger.warn(this,\"Exception while trying to get property 'environment' \",e);       configurationPluginAvailable=false;     }     Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);   }   return configurationPluginAvailable; } "
"public static CharSequence extractFlagsForEditText(CharSequence text){   char[] textChars=text.toString().toCharArray();   ArrayList<Character> characters=new ArrayList<>();   ArrayList<WhatsappUtil.Flag> flags=new ArrayList<>();   WhatsappUtil.Flag boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);   WhatsappUtil.Flag strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);   WhatsappUtil.Flag italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);   for (int i=0, j=0; i < textChars.length; i++) {     char c=textChars[i];     if (c == BOLD_FLAG) {       if (boldFlag.start == INVALID_INDEX) {         if (WhatsappUtil.hasFlagSameLine(text,BOLD_FLAG,i + 1)) {           boldFlag.start=j + 1;         }       }  else {         boldFlag.end=j;         flags.add(boldFlag);         boldFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,BOLD_FLAG);       }     }  else     if (c == STRIKE_FLAG) {       if (strikeFlag.start == INVALID_INDEX) {         if (WhatsappUtil.hasFlagSameLine(text,STRIKE_FLAG,i + 1)) {           strikeFlag.start=j + 1;         }       }  else {         strikeFlag.end=j;         flags.add(strikeFlag);         strikeFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,STRIKE_FLAG);       }     }  else     if (c == ITALIC_FLAG) {       if (italicFlag.start == INVALID_INDEX) {         if (WhatsappUtil.hasFlagSameLine(text,ITALIC_FLAG,i + 1)) {           italicFlag.start=j + 1;         }       }  else {         italicFlag.end=j;         flags.add(italicFlag);         italicFlag=new WhatsappUtil.Flag(INVALID_INDEX,INVALID_INDEX,ITALIC_FLAG);       }     }     characters.add(c);     j++;   }   String formatted=WhatsappUtil.getText(characters);   SpannableStringBuilder builder=new SpannableStringBuilder(formatted);   for (int i=0; i < flags.size(); i++) {     WhatsappUtil.Flag flag=flags.get(i);     if (flag.flag == BOLD_FLAG) {       StyleSpan bss=new StyleSpan(Typeface.BOLD);       builder.setSpan(bss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);     }  else     if (flag.flag == STRIKE_FLAG) {       builder.setSpan(new StrikethroughSpan(),flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);     }  else     if (flag.flag == ITALIC_FLAG) {       StyleSpan iss=new StyleSpan(Typeface.ITALIC);       builder.setSpan(iss,flag.start,flag.end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.start - 1,flag.start,Spanned.SPAN_INCLUSIVE_INCLUSIVE);       builder.setSpan(new ForegroundColorSpan(Color.GRAY),flag.end,flag.end + 1,Spanned.SPAN_INCLUSIVE_INCLUSIVE);     }   }   return builder; } "
"public PhotosGetUserPhotosQuery sort(PhotosGetUserPhotosSort value){   return unsafeParam(\"sort\",value); } "
"public void deletePersistentStore(){   try {     close();   }  catch (  IOException e) {   }   try {     deleteLogFile(version);   }  catch (  LogException e) {   }   try {     deleteSnapshot(version);   }  catch (  LogException e) {   }   try {     deleteFile(fName(versionFile));   }  catch (  LogException e) {   }   try {     dir.delete();   }  catch (  SecurityException e) {   } } "
"@Nullable(\"if there is no configuration that matches the constraints\") public static <T>FolderConfiguration restrict(@NotNull ConfiguredElement<T> compatible,Collection<ConfiguredElement<T>> allItems){   ArrayList<FolderConfiguration> incompatibleConfigurations=Lists.newArrayListWithCapacity(allItems.size());   boolean found=false;   for (  ConfiguredElement configuredItem : allItems) {     FolderConfiguration configuration=configuredItem.getConfiguration();     if (configuredItem.equals(compatible)) {       found=true;       continue;     }     incompatibleConfigurations.add(configuration);   }   assert found;   RestrictedConfiguration restricted=restrict(compatible.getConfiguration(),incompatibleConfigurations);   return (restricted != null) ? restricted.getAny() : null; } "
"public boolean cancel(boolean mayInterruptIfRunning){   return this.request != null && request.cancel(mayInterruptIfRunning); } "
"private boolean hasLeaked(LeakKey<N> leakKey){   return leakedSources.contains(leakKey); } "
"public static Location toLocation(ICompilationUnit unit,int offset,int length) throws JavaModelException {   Location result=new Location();   result.setUri(getFileURI(unit));   int[] loc=JsonRpcHelpers.toLine(unit.getBuffer(),offset);   int[] endLoc=JsonRpcHelpers.toLine(unit.getBuffer(),offset + length);   Range range=new Range();   if (loc != null) {     range.withStart(new Position().withLine(loc[0]).withCharacter(loc[1]));   }   if (endLoc != null) {     range.withEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));   }   return result.withRange(range); } "
"public static final MediaFormat createVideoFormat(String mime,int width,int height){   MediaFormat format=new MediaFormat();   format.setString(KEY_MIME,mime);   format.setInteger(KEY_WIDTH,width);   format.setInteger(KEY_HEIGHT,height);   return format; } "
"public void onLoad(boolean viewRecreated){ } "
"@Override public final void writeUTF(String s) throws IOException {   dis.writeUTF(s); } "
"private boolean scanPokemonScreen(){   @ColorInt int[] pixels=screen.grabPixels(area);   if (pixels != null) {     boolean shouldShow=pixels[0] == Color.rgb(250,250,250) && pixels[1] == Color.rgb(28,135,150);     setIVButtonDisplay(shouldShow);     return shouldShow;   }   return false; } "
"public static String storedByIsValid(String storedBy){   if (storedBy == null || storedBy.trim().isEmpty()) {     return null;   }   if (storedBy.length() > 255) {     return \"stored_by_length_greater_than_max_length\";   }   return null; } "
"@Override public void populateExpression(Object objValue){   Double newValue=0.0;   if (objValue instanceof Integer) {     int i=((Integer)objValue).intValue();     newValue=Double.valueOf((double)i);   }  else   if (objValue instanceof Long) {     long i=((Long)objValue).longValue();     newValue=Double.valueOf((double)i);   }  else   if (objValue instanceof Double) {     newValue=(Double)objValue;   }   if (objValue instanceof String) {     newValue=Double.valueOf((String)objValue);   }   populateField(newValue); } "
"public static ConstraintWidget[] inferTableList(WidgetsScene list){   for (  ConstraintWidget widget : list.getWidgets()) {     widget.resetAnchors();   }   return inferTableList(list.getRoot()); } "
"protected GroupsGetRequestsQuery groupId(int value){   return unsafeParam(\"group_id\",value); } "
"private void drawCenterRect(Canvas canvas){   int center=getHeight() / 2;   int offset=(int)(getItemHeight() / 2 * 1.2);   Paint paint=new Paint();   paint.setColor(getResources().getColor(R.color.province_line_border));   paint.setStrokeWidth((float)3);   canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);   canvas.drawLine(0,center + offset,getWidth(),center + offset,paint); } "
"public VideoRemoveFromAlbumQuery albumId(Integer value){   return unsafeParam(\"album_id\",value); } "
"synchronized public void terminate(){   if (_isTerminated)   return;   _isTerminated=true;   if (Thread.currentThread() != this)   interrupt();   if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,toString() + \" active failure detector has terminated\"); } "
"public void unregisterAll(Plugin plugin){   ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>(); synchronized (providers) {     Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();     try {       while (it.hasNext()) {         Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();         Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();         try {           while (it2.hasNext()) {             RegisteredServiceProvider<?> registered=it2.next();             if (registered.getPlugin().equals(plugin)) {               it2.remove();               unregisteredEvents.add(new ServiceUnregisterEvent(registered));             }           }         }  catch (        NoSuchElementException e) {         }         if (entry.getValue().size() == 0) {           it.remove();         }       }     }  catch (    NoSuchElementException e) {     }   }   for (  ServiceUnregisterEvent event : unregisteredEvents) {     Bukkit.getServer().getPluginManager().callEvent(event);   } } "
"public ResponseListener() throws IOException {   super(\"GS-multicast-discovery-response-listener\");   setDaemon(true);   serv=new ServerSocket(0,100,InetAddress.getByName(SystemInfo.singleton().network().getHostId())); } "
"@Override public int hashCode(){   if (isNaN()) {     return 542;   }   return 1759 * MathUtils.hash(alpha); } "
"@Override public int hashCode(){   final int prime=31;   int result=1;   result=prime * result + ((getId() == null) ? 0 : getId().hashCode());   result=prime * result + ((getAccount() == null) ? 0 : getAccount().hashCode());   result=prime * result + ((getPassword() == null) ? 0 : getPassword().hashCode());   result=prime * result + ((getPhone() == null) ? 0 : getPhone().hashCode());   result=prime * result + ((getSex() == null) ? 0 : getSex().hashCode());   result=prime * result + ((getUserName() == null) ? 0 : getUserName().hashCode());   result=prime * result + ((getAvatar() == null) ? 0 : getAvatar().hashCode());   result=prime * result + ((getUserType() == null) ? 0 : getUserType().hashCode());   result=prime * result + ((getDeptId() == null) ? 0 : getDeptId().hashCode());   result=prime * result + ((getLocked() == null) ? 0 : getLocked().hashCode());   result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());   result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());   result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());   result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());   result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());   result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());   return result; } "
"public Activity run(String key){   Activity a=get(key);   if (a != null)   ActivityManager.scheduleNow(a);   return a; } "
"private void cancelUploadsForAccount(Account account){   mPendingUploads.remove(account.name);   mUploadsStorageManager.removeUploads(account.name); } "
"public static int daysBetween(Date startDate,Date endDate){   final Days days=Days.daysBetween(new DateTime(startDate),new DateTime(endDate));   return days.getDays(); } "
"@Nullable public File resolveParentDirectory(@Nullable Label label){   return label != null ? resolveParentDirectory(label.blazePackage(),label.ruleName()) : null; } "
"void update(BroadphaseKey key,DynamicAABBTreeLeaf<E,T> node,E collidable,T fixture){   Transform tx=collidable.getTransform();   AABB aabb=fixture.getShape().createAABB(tx);   if (node.aabb.contains(aabb)) {     return;   }   aabb.expand(this.expansion);   this.remove(node);   node.aabb=aabb;   this.insert(node); } "
"public void removeBites(){   setImageDrawable(drawableChomp);   bitesTakenMap=new HashMap<>();   for (  int direction : BITE_DIRECTIONS_LIST) {     bitesTakenMap.put(direction,0);   }   hasAllBitesTaken=false;   numBitesForOneDirection=(imageCircleRadius * 2) / biteRadius; } "
"public static CacheHeader readHeader(InputStream is) throws IOException {   CacheHeader entry=new CacheHeader();   int magic=readInt(is);   if (magic != CACHE_MAGIC) {     throw new IOException();   }   entry.key=readString(is);   entry.etag=readString(is);   if (entry.etag.equals(\"\")) {     entry.etag=null;   }   entry.serverDate=readLong(is);   entry.lastModified=readLong(is);   entry.ttl=readLong(is);   entry.softTtl=readLong(is);   entry.responseHeaders=readStringStringMap(is);   return entry; } "
"private synchronized void addChildNode(DefaultMutableTreeNode parent,DefaultMutableTreeNode child){   int childCount=parent.getChildCount();   if (childCount == 0) {     addChildNode(parent,child,0);     return;   }   if (child instanceof ComparableDefaultMutableTreeNode) {     ComparableDefaultMutableTreeNode comparableChild=(ComparableDefaultMutableTreeNode)child;     for (int i=childCount - 1; i >= 0; i--) {       DefaultMutableTreeNode brother=(DefaultMutableTreeNode)parent.getChildAt(i);       if (comparableChild.compareTo(brother) >= 0) {         addChildNode(parent,child,i + 1);         return;       }     }     addChildNode(parent,child,0);     return;   }   addChildNode(parent,child,childCount); } "
"public VirtualInvokeExpr newVirtualInvokeExpr(Local base,SootMethodRef method,List<? extends Value> args){   return new JVirtualInvokeExpr(base,method,args); } "
"public PageObjectContext pop(){   return deque.pop(); } "
"public static void addEmojis(Context context,Spannable text,int emojiSize,int index,int length){   addEmojis(context,text,emojiSize,index,length,false); } "
"@Override public PolynomialSplineFunction interpolate(double x[],double y[]) throws MathIllegalArgumentException {   if (x.length != y.length) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,x.length,y.length);   }   if (x.length < 2) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,x.length,2,true);   }   int n=x.length - 1;   MathArrays.checkOrder(x);   final double m[]=new double[n];   for (int i=0; i < n; i++) {     m[i]=(y[i + 1] - y[i]) / (x[i + 1] - x[i]);   }   final PolynomialFunction polynomials[]=new PolynomialFunction[n];   final double coefficients[]=new double[2];   for (int i=0; i < n; i++) {     coefficients[0]=y[i];     coefficients[1]=m[i];     polynomials[i]=new PolynomialFunction(coefficients);   }   return new PolynomialSplineFunction(x,polynomials); } "
"public void createInFile(String filePath) throws IOException {   this.inFile=new ExifInterface(filePath); } "
"public static Predicate<EmailData> isReceivedAfter(final DateTime dateTime){   return null; } "
"public ImageFixture withThumbnailSize(int size){   myThumbnailSize=size;   return this; } "
"private void toWagonFormat(DecisionNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {   if (out != null) {     writeStringToOutput(\"((\" + node.getNodeDefinition() + \")\",out);   }  else {   }   if (pw != null) {     pw.println(\"((\" + node.getNodeDefinition() + \")\");   }   for (int i=0; i < node.getNumberOfDaugthers(); i++) {     if (node.getDaughter(i) == null) {       String nullDaughter=\"\";       if (i + 1 != node.getNumberOfDaugthers()) {         nullDaughter=\"((() 0))\";       }  else {         if (extension != null) {           nullDaughter=\"((() 0)))\" + extension;         }  else {           nullDaughter=\"((() 0)))\";         }       }       if (out != null) {         writeStringToOutput(nullDaughter,out);       }  else {       }       if (pw != null) {         pw.println(\" \" + nullDaughter);       }     }  else {       if (i + 1 != node.getNumberOfDaugthers()) {         toWagonFormat(node.getDaughter(i),out,\"\",pw);       }  else {         if (extension != null) {           toWagonFormat(node.getDaughter(i),out,\")\" + extension,pw);         }  else {           toWagonFormat(node.getDaughter(i),out,\")\",pw);         }       }     }   } } "
"static public void adjustBeginLineColumn(int newLine,int newCol){   int start=tokenBegin;   int len;   if (bufpos >= tokenBegin) {     len=bufpos - tokenBegin + inBuf + 1;   }  else {     len=bufsize - tokenBegin + bufpos + 1 + inBuf;   }   int i=0, j=0, k=0;   int nextColDiff=0, columnDiff=0;   while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {     bufline[j]=newLine;     nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];     bufcolumn[j]=newCol + columnDiff;     columnDiff=nextColDiff;     i++;   }   if (i < len) {     bufline[j]=newLine++;     bufcolumn[j]=newCol + columnDiff;     while (i++ < len) {       if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++;  else       bufline[j]=newLine;     }   }   line=bufline[j];   column=bufcolumn[j]; } "
"public WidgetsGetCommentsQuery widgetApiId(Integer value){   return unsafeParam(\"widget_api_id\",value); } "
"public Zsvd(Zmat XX) throws JampackException {   int i, il, iu, iter, j, k, kk, m, mc;   double as, at, au, axkk, axkk1, dmax, dmin, ds, ea, es, shift, ss, t, tre;   Z xkk, xkk1, xk1k1, ukj, vik1;   Rot P=new Rot();   Z scale=new Z();   Z zr=new Z();   Zmat X=new Zmat(XX);   Z1 h;   Z1 temp=new Z1(Math.max(X.nr,X.nc));   mc=Math.min(X.nr,X.nc);   double d[]=new double[mc];   double e[]=new double[mc];   S=new Zdiagmat(mc);   U=Eye.o(X.nr);   V=Eye.o(X.nc);   m=Math.min(X.rx,X.cx);   for (k=X.bx; k <= m; k++) {     h=House.genc(X,k,X.rx,k);     House.ua(h,X,k,X.rx,k + 1,X.cx,temp);     House.au(U,h,U.bx,U.rx,k,U.cx,temp);     if (k != X.cx) {       h=House.genr(X,k,k + 1,X.cx);       House.au(X,h,k + 1,X.rx,k + 1,X.cx,temp);       House.au(V,h,V.bx,V.rx,k + 1,V.cx,temp);     }   }   for (k=X.bx; k <= m; k++) {     kk=k - X.bx;     xkk=X.get(k,k);     axkk=Z.abs(xkk);     X.put(k,k,new Z(axkk));     d[kk]=axkk;     scale.Div(scale.Conj(xkk),axkk);     if (k < X.cx) {       xkk1=X.get(k,k + 1);       X.put(k,k + 1,xkk1.Times(scale,xkk1));     }     scale.Conj(scale);     for (i=U.bx; i <= U.rx; i++) {       U.put(i,k,zr.Times(U.get(i,k),scale));     }     if (k < X.cx) {       xkk1=X.get(k,k + 1);       axkk1=Z.abs(xkk1);       X.put(k,k + 1,new Z(axkk1));       e[kk]=axkk1;       scale.Div(scale.Conj(xkk1),axkk1);       if (k < X.rx) {         xk1k1=X.get(k + 1,k + 1);         X.put(k + 1,k + 1,xk1k1.Times(scale,xk1k1));       }       for (i=V.bx; i <= V.rx; i++) {         V.put(i,k + 1,zr.Times(V.get(i,k + 1),scale));       }     }   }   m=m - X.bx;   if (X.nr < X.nc) {     t=e[m];     for (k=m; k >= 0; k--) {       Rot.genr(d[k],t,P);       d[k]=P.zr;       if (k != 0) {         t=P.sr * e[k - 1];         e[k - 1]=P.c * e[k - 1];       }       Rot.ap(V,P,V.bx,V.rx,k + V.bx,X.rx + 1);       Rot.ap(X,P,X.bx,X.rx,k + X.bx,X.rx + 1);     }   }   iu=m;   iter=0;   while (true) {     while (iu > 0) {       if (Math.abs(e[iu - 1]) > 1.0e-16 * (Math.abs(d[iu]) + Math.abs(d[iu - 1])))       break;       e[iu - 1]=0.;       iter=0;       iu=iu - 1;     }     iter=iter + 1;     if (iter > MAXITER) {       throw new JampackException(\"Maximum number of iterations exceeded.\");     }     if (iu == 0)     break;     il=iu - 1;     while (il > 0) {       if (Math.abs(e[il - 1]) <= 1.0e-16 * (Math.abs(d[il]) + Math.abs(d[il - 1])))       break;       il=il - 1;     }     if (il != 0) {       e[il - 1]=0.;     }     dmax=Math.max(Math.abs(d[iu]),Math.abs(d[iu - 1]));     dmin=Math.min(Math.abs(d[iu]),Math.abs(d[iu - 1]));     ea=Math.abs(e[iu - 1]);     if (dmin == 0.) {       shift=0.;     }  else     if (ea < dmax) {       as=1. + dmin / dmax;       at=(dmax - dmin) / dmax;       au=ea / dmax;       au=au * au;       shift=dmin * (2. / (Math.sqrt(as * as + au) + Math.sqrt(at * at + au)));     }  else {       au=dmax / ea;       if (au == 0.) {         shift=(dmin * dmax) / ea;       }  else {         as=1. + dmin / dmax;         at=(dmax - dmin) / dmax;         t=1. / (Math.sqrt(1. + (as * au) * (as * au)) + Math.sqrt(1. + (at * au) * (at * au)));         shift=(t * dmin) * au;       }     }     t=Math.max(Math.max(Math.abs(d[il]),Math.abs(e[il])),shift);     ds=d[il] / t;     es=e[il] / t;     ss=shift / t;     Rot.genr((ds - ss) * (ds + ss),ds * es,P);     for (i=il; i < iu; i++) {       t=P.c * d[i] - P.sr * e[i];       e[i]=P.sr * d[i] + P.c * e[i];       d[i]=t;       t=-P.sr * d[i + 1];       d[i + 1]=P.c * d[i + 1];       Rot.ap(V,P,V.bx,V.rx,V.bx + i,V.bx + i + 1);       Rot.genc(d[i],t,P);       d[i]=P.zr;       t=P.c * e[i] + P.sr * d[i + 1];       d[i + 1]=P.c * d[i + 1] - P.sr * e[i];       e[i]=t;       Rot.aph(U,P,U.bx,U.rx,U.bx + i,U.bx + i + 1);       if (i != iu - 1) {         t=P.sr * e[i + 1];         e[i + 1]=P.c * e[i + 1];         Rot.genr(e[i],t,P);         e[i]=P.zr;       }     }   }   for (k=m; k >= 0; k--) {     if (d[k] < 0) {       d[k]=-d[k];       for (i=0; i < X.nc; i++) {         V.re[i][k]=-V.re[i][k];         V.im[i][k]=-V.im[i][k];       }     }     for (j=k; j < m; j++) {       if (d[j] < d[j + 1]) {         t=d[j];         d[j]=d[j + 1];         d[j + 1]=t;         for (i=0; i < X.nr; i++) {           t=U.re[i][j];           U.re[i][j]=U.re[i][j + 1];           U.re[i][j + 1]=t;           t=U.im[i][j];           U.im[i][j]=U.im[i][j + 1];           U.im[i][j + 1]=t;         }         for (i=0; i < X.nc; i++) {           t=V.re[i][j];           V.re[i][j]=V.re[i][j + 1];           V.re[i][j + 1]=t;           t=V.im[i][j];           V.im[i][j]=V.im[i][j + 1];           V.im[i][j + 1]=t;         }       }     }   }   S.re=d;   return; } "
"public Builder imperial(Boolean imperial){   this.imperial=imperial;   return this; } "
"private static boolean isLayoutLibSupported(IAndroidTarget target){   if (target instanceof PlatformTarget) {     int layoutlibVersion=((PlatformTarget)target).getLayoutlibApi();     return layoutlibVersion <= Bridge.API_CURRENT;   }   return false; } "
"public QName(QName qname){   setValues(qname); } "
"private JsonWriter close(int empty,int nonempty,String closeBracket) throws IOException {   int context=peek();   if (context != nonempty && context != empty) {     throw new IllegalStateException(\"Nesting problem.\");   }   if (deferredName != null) {     throw new IllegalStateException(\"Dangling name: \" + deferredName);   }   stackSize--;   if (context == nonempty) {     newline();   }   out.write(closeBracket);   return this; } "
"@SuppressWarnings(\"unchecked\") public boolean run(@NotNull File destination,@NotNull File patchFile,@NotNull ProgressIndicator progress) throws RestartRequiredException {   Object ui;   try {     ui=myUiClass.getConstructor(Component.class,ProgressIndicator.class).newInstance(null,progress);   }  catch (  ReflectiveOperationException e) {     progress.logWarning(\"Failed to create updater UI!\",e);     return false;   }   Method initLogger;   try {     initLogger=myRunnerClass.getMethod(\"initLogger\");     initLogger.invoke(null);   }  catch (  ReflectiveOperationException e) {     progress.logWarning(\"Failed to initialize logger!\",e);     return false;   }   Method doInstall;   try {     doInstall=myRunnerClass.getMethod(\"doInstall\",String.class,myUiBaseClass,String.class);   }  catch (  Throwable e) {     progress.logWarning(\"Failed to find main method in runner!\",e);     return false;   }   try {     progress.logInfo(\"Running patcher...\");     if (!(Boolean)doInstall.invoke(null,patchFile.getPath(),ui,destination.getPath())) {       progress.logWarning(\"Failed to apply patch\");       return false;     }     progress.logInfo(\"Patch applied.\");   }  catch (  InvocationTargetException e) {     if (e.getCause() instanceof RestartRequiredException) {       throw (RestartRequiredException)e.getTargetException();     }     progress.logWarning(\"Failed to run patcher\",e);     return false;   } catch (  Throwable e) {     progress.logWarning(\"Failed to run patcher\",e);     return false;   }   return true; } "
"public void collapse(DefaultMutableTreeNode v){   if (v == null)   v=this.root;   for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {     v=(DefaultMutableTreeNode)descendants.nextElement();     this.tree.collapsePath(new TreePath(v.getPath()));   } } "
"public GroupsEditQuery messages(Boolean value){   return unsafeParam(\"messages\",value); } "
"private void weakRegionDFS2(Block v,int r){   this.m_regions.get(r).add2Back(v);   DominatorNode<Block> parentOfV=this.m_pdom.getParentOf(this.m_pdom.getDode(v));   Block u2=(parentOfV == null) ? null : parentOfV.getGode();   List<DominatorNode<Block>> children=this.m_dom.getChildrenOf(this.m_dom.getDode(v));   for (int i=0; i < children.size(); i++) {     DominatorNode<Block> w=children.get(i);     Block u1=w.getGode();     if (u2 != null && u1.equals(u2)) {       this.weakRegionDFS2(w.getGode(),r);     }  else {       this.m_regCount++;       this.m_regions.put(this.m_regCount,this.createRegion(this.m_regCount));       this.weakRegionDFS2(w.getGode(),this.m_regCount);     }   } } "
"public void draw(Canvas c,Rect bounds){   final RectF arcBounds=mTempBounds;   arcBounds.set(bounds);   arcBounds.inset(mStrokeInset,mStrokeInset);   final float startAngle=(mStartTrim + mRotation) * 360;   final float endAngle=(mEndTrim + mRotation) * 360;   float sweepAngle=endAngle - startAngle;   mPaint.setColor(mCurrentColor);   c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);   drawTriangle(c,startAngle,sweepAngle,bounds);   if (mAlpha < 255) {     mCirclePaint.setColor(mBackgroundColor);     mCirclePaint.setAlpha(255 - mAlpha);     c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);   } } "
"private void updateHalfDayTogglesState(int halfDay){ switch (halfDay) { case HALF_DAY_1:     mFirstHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor);   mSecondHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor); break; case HALF_DAY_2: mSecondHalfDayToggle.setTextColor(mHalfDayToggleSelectedColor); mFirstHalfDayToggle.setTextColor(mHalfDayToggleUnselectedColor); break; } } "
"public static final String toString(String str){   if (str == null)   return \"null\";   ByteArrayOutputStream buffer=new ByteArrayOutputStream();   toByteArray(buffer,str);   return buffer.toString(); } "
"public PhotosGetByIdQueryWithExtended(VkApiClient client,List<String> photos){   super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));   photos(photos);   extended(true); } "
"public static CommandResult execCommand(List<String> commands,boolean isRoot){   return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true); } "
"public boolean hasStartEndDate(){   return startDate != null && endDate != null; } "
"public void clear(){   eDA.clear(); } "
"private long parseLong(int start,int end,int radix){   long result=0;   long digit;   for (int i=start; i < end; i++) {     digit=Character.digit(yycharat(i),radix);     result*=radix;     result+=digit;   }   return result; } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"hide attribute=\");   Set<String> attributes=new HashSet<>();   while (!np.peekMatchIgnoreCase(\";\")) {     String attribute=np.getWordRespectCase();     attributes.add(attribute);   }   np.matchIgnoreCase(\";\");   if (attributes.size() > 0) {     final SamplesViewer viewer=((SamplesViewer)getViewer());     viewer.getSamplesTable().hideColumns(attributes.toArray(new String[attributes.size()]));   } } "
"private void renewLegionRanking(){   Map<Integer,Integer> newLegionRankingCache=new HashMap<Integer,Integer>();   ArrayList<AbyssRankingResult> elyosRanking=getDAO().getAbyssRankingLegions(Race.ELYOS), asmoRanking=getDAO().getAbyssRankingLegions(Race.ASMODIANS);   legions.clear();   legions.put(Race.ASMODIANS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,asmoRanking,Race.ASMODIANS));   legions.put(Race.ELYOS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,elyosRanking,Race.ELYOS));   for (  AbyssRankingResult result : elyosRanking) {     newLegionRankingCache.put(result.getLegionId(),result.getRankPos());   }   for (  AbyssRankingResult result : asmoRanking) {     newLegionRankingCache.put(result.getLegionId(),result.getRankPos());   }   LegionService.getInstance().performRankingUpdate(newLegionRankingCache); } "
"@Override public boolean retainAll(Collection<?> collection){   boolean removed=false;   for (int i=mSize - 1; i >= 0; i--) {     if (!collection.contains(mArray[i])) {       removeAt(i);       removed=true;     }   }   return removed; } "
"private Map loadBinaryLexicon(InputStream is,int estimatedSize) throws IOException {   DataInputStream dis=new DataInputStream(new BufferedInputStream(is));   int size=0;   int numEntries=0;   List phonemeList=new ArrayList();   Map lexicon=new LinkedHashMap();   int magic;   try {     if (dis.readInt() != MAGIC) {       throw new Error(\"bad magic number in lexicon\");     }   }  catch (  IOException e) {     throw e;   }   if (dis.readInt() != VERSION) {     throw new Error(\"bad version number in lexicon\");   }   size=dis.readInt();   for (int i=0; i < size; i++) {     String phoneme=getString(dis);     phonemeList.add(phoneme);   }   numEntries=dis.readInt();   for (int i=0; i < numEntries; i++) {     String wordAndPos=getString(dis);     String pos=Character.toString(wordAndPos.charAt(wordAndPos.length() - 1));     if (!partsOfSpeech.contains(pos)) {       partsOfSpeech.add(pos);     }     int numPhonemes=dis.readByte();     String[] phonemes=new String[numPhonemes];     for (int j=0; j < numPhonemes; j++) {       phonemes[j]=(String)phonemeList.get(dis.readByte());     }     lexicon.put(wordAndPos,phonemes);   }   dis.close();   return lexicon; } "
"public void actionPerformed(ActionEvent ev){   execute(\"set index=\" + CalculateEcologicalIndices.CHISSQUARE + \";\"); } "
"public DataSourceConnectorArcSDE(){   createUI(); } "
"public GridHeader(String name,boolean hidden,boolean meta){   this(name);   this.column=name;   this.hidden=hidden;   this.meta=meta; } "
"private void scheduleRepeatingAlarm(){   Intent registerIntent=createRegisterRequestIntent(this);   PendingIntent pIntent=PendingIntent.getService(this,0,registerIntent,0);   AlarmManager am=(AlarmManager)getSystemService(Context.ALARM_SERVICE);   setAlarm(am,pIntent,AlarmManager.RTC,mTimestampForNewRequest); } "
"public String next(int n){   int i=this.myIndex;   int j=i + n;   if (j >= this.mySource.length()) {     throw syntaxError(\"Substring bounds error\");   }   this.myIndex+=n;   return this.mySource.substring(i,j); } "
"@Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {   if (saxParser != null) {     saxParser.ignorableWhitespace(ch,start,length);   } } "
"public static boolean dateIsValid(String dateString){   return dateString.matches(DEFAULT_DATE_REGEX); } "
"protected boolean matchChildSequence(QName element,int event) throws XNIException {   if (fCurrentChildDepth >= fCurrentChildSequence.length) {     int tmpCurrentChildSequence[]=new int[fCurrentChildSequence.length];     System.arraycopy(fCurrentChildSequence,0,tmpCurrentChildSequence,0,fCurrentChildSequence.length);     fCurrentChildSequence=new int[fCurrentChildDepth * 2];     System.arraycopy(tmpCurrentChildSequence,0,fCurrentChildSequence,0,tmpCurrentChildSequence.length);   }   if (fIsResolveElement) {     if (event == XPointerPart.EVENT_ELEMENT_START) {       fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;       fCurrentChildDepth++;       fCurrentChildPosition=1;       if ((fCurrentChildDepth <= fFoundDepth) || (fFoundDepth == 0)) {         if (checkMatch()) {           fIsElementFound=true;           fFoundDepth=fCurrentChildDepth;         }  else {           fIsElementFound=false;           fFoundDepth=0;         }       }     }  else     if (event == XPointerPart.EVENT_ELEMENT_END) {       if (fCurrentChildDepth == fFoundDepth) {         fIsElementFound=true;       }  else       if (((fCurrentChildDepth < fFoundDepth) && (fFoundDepth != 0)) || ((fCurrentChildDepth > fFoundDepth) && (fFoundDepth == 0))) {         fIsElementFound=false;       }       fCurrentChildSequence[fCurrentChildDepth]=0;       fCurrentChildDepth--;       fCurrentChildPosition=fCurrentChildSequence[fCurrentChildDepth] + 1;     }  else     if (event == XPointerPart.EVENT_ELEMENT_EMPTY) {       fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;       fCurrentChildPosition++;       if (checkMatch()) {         fWasOnlyEmptyElementFound=!fIsElementFound;         fIsElementFound=true;       }  else {         fIsElementFound=false;         fWasOnlyEmptyElementFound=false;       }     }   }   return fIsElementFound; } "
"public boolean isOption(){   if (option == null) {     return false;   }  else {     return option;   } } "
"public UtilsResolveScreenNameQuery resolveScreenName(UserActor actor,String screenName){   return new UtilsResolveScreenNameQuery(getClient(),actor,screenName); } "
"@Override public boolean hasFeature(String feature,String version){   return super.hasFeature(feature,version) || feature.equalsIgnoreCase(\"psvi\"); } "
"protected svm_node[] documentToNodeArray(SimpleTextDocument dDoc){   TreeSet tsNodes=new TreeSet();   DocumentNGramGraph dg=dDoc.getDocumentGraph();   for (int iCnt=dg.getMinSize(); iCnt <= dg.getMaxSize(); iCnt++) {     UniqueVertexGraph g=dg.getGraphLevelByNGramSize(iCnt);     Iterator edgeIter=g.getEdgeSet().iterator();     while (edgeIter.hasNext()) {       WeightedEdge we=(WeightedEdge)edgeIter.next();       if (dg.degredationDegree(we) > 3)       continue;       svm_ordered_node snCur=new svm_ordered_node();       String sData=(we.getVertexA().getLabel() + \" \" + we.getVertexB().getLabel());       if (!EdgeMapping.containsKey(sData))       EdgeMapping.put(sData,EdgeMapping.size() + 1);       snCur.index=((Integer)EdgeMapping.get(sData)).intValue();       snCur.value=we.getWeight();       tsNodes.add(snCur);     }   }   svm_node[] snaTemp=new svm_node[tsNodes.size()];   Iterator iIter=tsNodes.iterator();   int iCnt=0;   while (iIter.hasNext()) {     snaTemp[iCnt++]=(svm_node)iIter.next();   }   return snaTemp; } "
"private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {   int quietCount=this.narrowLineWidth * 10;   quietCount=quietCount < startPattern ? quietCount : startPattern;   for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {     if (row.get(i)) {       break;     }     quietCount--;   }   if (quietCount != 0) {     throw NotFoundException.getNotFoundInstance();   } } "
"public void skipNode(Object node){   if (!super.containsNode(node))   return;   Object[] preds=getPredsOf(node).toArray();   Object[] succs=getSuccsOf(node).toArray();   for (  Object element : preds) {     for (    Object element0 : succs) {       if (element != element0)       super.addEdge(element,element0);     }   }   for (  Object element : preds) {     super.removeEdge(element,node);   }   for (  Object element : succs) {     super.removeEdge(node,element);   }   super.removeNode(node); } "
"@Deprecated public static void track(String path,Object marker,FileDeleteStrategy deleteStrategy){   theInstance.track(path,marker,deleteStrategy); } "
"public NewsfeedSearchQueryWithExtended latitude(Float value){   return unsafeParam(\"latitude\",value); } "
"private static void addDependency(Project project,DependencyOnPlugin newDep){   ExternalDependenciesManager manager=ExternalDependenciesManager.getInstance(project);   List<ProjectExternalDependency> deps=Lists.newArrayList(manager.getAllDependencies());   boolean added=false;   for (int i=0; i < deps.size(); i++) {     ProjectExternalDependency dep=deps.get(i);     if (!(dep instanceof DependencyOnPlugin)) {       continue;     }     DependencyOnPlugin pluginDep=(DependencyOnPlugin)dep;     if (pluginDep.getPluginId().equals(newDep.getPluginId())) {       added=true;       deps.set(i,newDep);     }   }   if (!added) {     deps.add(newDep);   }   manager.setAllDependencies(deps); } "
"private CommonClassLoader(ClassLoader parent){   super(\"CommonClassLoader\",new URL[0],parent); } "
"void invalidate(){   m_row=-1; } "
"public void abort(){   Log.i(Mary.LOG,\"Requesting abort.\");   abortRequested=true; } "
"public Vector(){   this.x=0;   this.y=0;   this.z=0; } "
"public VOGeoServerContrastEnhancementNormalizeBlue(Class<?> panelId,RasterSymbolizerDetails parentPanel){   super(panelId,\"geoserver/GeoServerContrastEnhancementNormalizeBlue.xml\",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_BLUE,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_BLUE,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_BLUE); } "
"public boolean isSourcesModified(){   if (myInitialItems == null) {     return false;   }   if (getItems().size() != myInitialItems.size()) {     return true;   }   for (  Row row : getItems()) {     if (row.isModified()) {       return true;     }     if (!myInitialItems.contains(row.mySource)) {       return true;     }   }   return false; } "
"@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){   Calendar cal=getCalendar();   dateTimeUnit.setDay(1);   dateTimeUnit=cal.minusMonths(dateTimeUnit,(dateTimeUnit.getMonth() % 2) + 10);   List<Period> periods=Lists.newArrayList();   for (int i=0; i < 6; i++) {     periods.add(createPeriod(dateTimeUnit,cal));     dateTimeUnit=cal.plusMonths(dateTimeUnit,2);   }   return periods; } "
"private int measureHeight(){   int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);   int daysOfMonth=daysOfCurrentMonth();   int n=-1;   if (dayOfWeek >= 2 && dayOfWeek <= 7) {     n=daysOfMonth - (8 - dayOfWeek + 1);   }  else   if (dayOfWeek == 1) {     n=daysOfMonth - 1;   }   int lines=2 + n / 7 + (n % 7 == 0 ? 0 : 1);   return (int)(cellHeight * lines); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public NEExpr fullCopy(){   NEExpr tree=(NEExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"private Cacheable fetchFromDB(final Object id){   return cacheLoaderDAO.getItem(id); } "
"private static void decreaseItemFromPlayer(Player seller,Item item,TradeItem tradeItem){   seller.getInventory().decreaseItemCount(item,tradeItem.getCount());   seller.getStore().getTradeItemByObjId(item.getObjectId()).decreaseCount(tradeItem.getCount()); } "
"private void removeTask(Runnable r){   tCur=null; } "
"public Pokemon(PokemonGo api,PokemonData proto){   super(api,proto);   this.stamina=proto.getStamina(); } "
"public void dismissLoadingDialog(){   Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);   if (frag != null) {     LoadingDialog loading=(LoadingDialog)frag;     loading.dismissAllowingStateLoss();   } } "
"public int equivHashCode(){   return 1729; } "
"public GenericValue next(){   try {     if (resultSet.next()) {       return currentGenericValue();     }  else {       return null;     }   }  catch (  SQLException e) {     if (!closed) {       try {         this.close();       }  catch (      GenericEntityException e1) {         Debug.logError(e1,\"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: \" + e1.toString(),module);       }       Debug.logWarning(\"Warning: auto-closed EntityListIterator because of exception: \" + e.toString(),module);     }     throw new GeneralRuntimeException(\"Error getting the next result\",e);   } catch (  GenericEntityException e) {     if (!closed) {       try {         this.close();       }  catch (      GenericEntityException e1) {         Debug.logError(e1,\"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: \" + e1.toString(),module);       }       Debug.logWarning(\"Warning: auto-closed EntityListIterator because of exception: \" + e.toString(),module);     }     throw new GeneralRuntimeException(\"Error creating GenericValue\",e);   } } "
"public boolean intersects(Rectangle2D r){   return intersects(r.getX(),r.getY(),r.getWidth(),r.getHeight()); } "
"public MessagesCreateChatQuery createChat(UserActor actor,int... userIds){   return new MessagesCreateChatQuery(getClient(),actor,userIds); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public GEExpr fullCopy(){   GEExpr tree=(GEExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"@Override public void postPages(Application.Name applicationName,Experiment.ID experimentID,ExperimentPageList experimentPageList) throws RepositoryException {   ExperimentPageList oldPageList=getExperimentPages(experimentID);   StringBuilder cqlQuery=new StringBuilder(\"begin batch \");   MutationBatch m=driver.getKeyspace().prepareMutationBatch();   for (  ExperimentPage experimentPage : experimentPageList.getPages()) {     cqlQuery.append(\"insert into page_experiment_index(app_name, page, exp_id, assign) \" + \"values(?,?,?,?);\");     m.withRow(keyspace.experiment_page_CF(),experimentID).putColumn(experimentPage.getName(),experimentPage.getAllowNewAssignment());     m.withRow(keyspace.app_page_index_CF(),applicationName).putColumn(experimentPage.getName().toString(),experimentPage.getAllowNewAssignment());   }   cqlQuery.append(\"apply batch;\");   PreparedCqlQuery<ExperimentsKeyspace.AppNamePageComposite,String> preparedQuery=driver.getKeyspace().prepareQuery(keyspace.page_experiment_index_CF()).withCql(cqlQuery.toString()).asPreparedStatement();   for (  ExperimentPage experimentPage : experimentPageList.getPages()) {     preparedQuery.withByteBufferValue(applicationName,ApplicationNameSerializer.get());     preparedQuery.withByteBufferValue(experimentPage.getName(),PageNameSerializer.get());     preparedQuery.withByteBufferValue(experimentID,ExperimentIDSerializer.get());     preparedQuery.withBooleanValue(experimentPage.getAllowNewAssignment());   }   try {     preparedQuery.execute();     m.execute();   }  catch (  ConnectionException e) {     throw new RepositoryException(\"Could not add the page(s) to the experiment:\\\"\" + experimentID + \"\\\"\",e);   }   ExperimentPageList newPageList=getExperimentPages(experimentID);   saveExperimentPageState(experimentID,oldPageList,newPageList); } "
"public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){   return new NumericEntityEscaper(codepointLow,codepointHigh,false); } "
"public boolean checkCloseHitTest(float x,float y,boolean isRTL){   RectF closeRectangle=getCloseBounds(isRTL);   return closeRectangle != null ? closeRectangle.contains(x,y) : false; } "
"public boolean fileToSpeech(String filePath){   boolean ok=false;   try {     InputStream is=new FileInputStream(filePath);     ok=streamToSpeech(is);   }  catch (  IOException ioe) {     System.err.println(\"Can't read data from \" + filePath);   }   return ok; } "
"@Override public void clear(){   rowMap.clear(); } "
"public Criteria createCriteria(){   Criteria criteria=createCriteriaInternal();   if (oredCriteria.size() == 0) {     oredCriteria.add(criteria);   }   return criteria; } "
"public boolean isTitleEnabled(){   return mCollapsingTitleEnabled; } "
"public LikesGetListQuery(VkApiClient client,LikesType type){   super(client,\"likes.getList\",GetListResponse.class);   type(type); } "
"@Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {   Element currentElement=(Element)fCurrentNode;   int attrCount=attributes.getLength();   if (DEBUG_EVENTS) {     System.out.println(\"==>startElement: \" + element + \" attrs.length=\"+ attrCount);   }   for (int i=0; i < attrCount; i++) {     attributes.getName(i,fAttrQName);     Attr attr=null;     attr=currentElement.getAttributeNodeNS(fAttrQName.uri,fAttrQName.localpart);     if (attr == null) {       attr=currentElement.getAttributeNode(fAttrQName.rawname);     }     AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_PSVI);     if (attrPSVI != null) {       XSTypeDefinition decl=attrPSVI.getMemberTypeDefinition();       boolean id=false;       if (decl != null) {         id=((XSSimpleType)decl).isIDType();       }  else {         decl=attrPSVI.getTypeDefinition();         if (decl != null) {           id=((XSSimpleType)decl).isIDType();         }       }       if (id) {         ((ElementImpl)currentElement).setIdAttributeNode(attr,true);       }       if (fPSVI) {         ((PSVIAttrNSImpl)attr).setPSVI(attrPSVI);       }       ((AttrImpl)attr).setType(decl);       if ((fConfiguration.features & DOMConfigurationImpl.DTNORMALIZATION) != 0) {         final String normalizedValue=attrPSVI.getSchemaNormalizedValue();         if (normalizedValue != null) {           boolean specified=attr.getSpecified();           attr.setValue(normalizedValue);           if (!specified) {             ((AttrImpl)attr).setSpecified(specified);           }         }       }     }  else {       String type=null;       boolean isDeclared=Boolean.TRUE.equals(attributes.getAugmentations(i).getItem(Constants.ATTRIBUTE_DECLARED));       if (isDeclared) {         type=attributes.getType(i);         if (\"ID\".equals(type)) {           ((ElementImpl)currentElement).setIdAttributeNode(attr,true);         }       }       ((AttrImpl)attr).setType(type);     }   } } "
"@TargetApi(Build.VERSION_CODES.LOLLIPOP) private void startScreenService(){   launchButton.setText(R.string.accept_screen_capture);   MediaProjectionManager projectionManager=(MediaProjectionManager)getSystemService(Context.MEDIA_PROJECTION_SERVICE);   startActivityForResult(projectionManager.createScreenCaptureIntent(),SCREEN_CAPTURE_REQ_CODE); } "
"private S2Point(final double theta,final double phi,final Vector3D vector){   this.theta=theta;   this.phi=phi;   this.vector=vector; } "
"public static char[] encode(byte[] in,int iLen){   return encode(in,0,iLen); } "
"private int[] pickLocalAddress() throws IOException {   int[] ret=pickForcedLocalAddress();   if (ret == null) {     ret=pickAutoDetectedLocalAddress();   }   return ret; } "
"private void mergeInner(Interval interval){   Interval previous=peekLast();   LinkedList<Interval> buffer=new LinkedList<>();   while (previous != null && interval.getStart().isBefore(previous.getStart())) {     buffer.addFirst(previous);     removeLast();     previous=peekLast();   }   appendWithMerge(interval);   buffer.stream().forEach(null); } "
"public static int handle(Entity entity,int previousDimension,int newDimension){   final EntityEvent.ChangeDimension event=new EntityEvent.ChangeDimension(entity,previousDimension,newDimension);   OpenModLoader.getEventBus().post(event);   return event.isCanceled() ? event.previousDimension : event.newDimension; } "
"private double cov(double[] vec1,double[] vec2){   double result=0;   int dim=vec1.length;   if (vec2.length != dim)   (new IllegalArgumentException(\"vectors are not of same length\")).printStackTrace();   double meanVec1=mean(vec1), meanVec2=mean(vec2);   for (int i=0; i < dim; i++) {     result+=(vec1[i] - meanVec1) * (vec2[i] - meanVec2);   }   return result / Math.max(1,dim - 1); } "
"public static <E>Stream<E> validate(Stream<E> stream,Predicate<? super E> validator,UnaryOperator<E> transformingIfNotValid){   return validate(stream,validator,Function.identity(),transformingIfNotValid); } "
"public FixedWidthTextTableSchema(){ } "
"protected void rehash(int newCapacity){   int oldCapacity=_set.length;   int oldSet[]=_set;   byte oldStates[]=_states;   _set=new int[newCapacity];   _states=new byte[newCapacity];   for (int i=oldCapacity; i-- > 0; ) {     if (oldStates[i] == FULL) {       int o=oldSet[i];       int index=insertionIndex(o);       _set[index]=o;       _states[index]=FULL;     }   } } "
"public static ValueGetterSpacePredicate<ServerEntry> pathOr(String path,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){   return path(path,or(leftPredicate,rightPredicate)); } "
"public static Permission with(Activity activity){   return new ImplPermission(activity); } "
"public int errorCount(){   return errors; } "
"public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths,boolean returnOnCommandNotFound){   super(dir,viewer,commandsPaths,returnOnCommandNotFound); } "
"private void onSaveAuthChkbxChanged(final ActionEvent actionEvent){   final boolean saveCredentials=((CheckBox)actionEvent.getSource()).isSelected();   accountManager.setSaveLogin(saveCredentials);   toggleFields(saveCredentials); } "
"public static Map<String,Object> evalAbsContainerSizeFactors(List<Map<String,Object>> sizesList,Object maxSizes,List<Map<String,Object>> cachedFactorsList){   throw new UnsupportedOperationException(\"Not implemented\"); } "
"public FileAlterationMonitor(long interval,FileAlterationObserver... observers){   this(interval);   if (observers != null) {     for (    FileAlterationObserver observer : observers) {       addObserver(observer);     }   } } "
"private static int nextPowerOfTwo(final int i){   return Integer.highestOneBit(i) << 1; } "
"public OutputStream bindStream(OutputStream output){   OutputStream stream=m_streams.get();   m_streams.set(output);   return stream; } "
"public SegmentedReentrantReadWriteLock(int numOfSegments,boolean fair){   if (numOfSegments < 1)   throw new IllegalArgumentException(\"Illegal argument 'numOfSegments' - cannot be less than 1.\");   this._numOfSegments=numOfSegments;   this._locks=new ReadWriteLock[numOfSegments];   this._readLocks=new Lock[numOfSegments];   this._writeLocks=new Lock[numOfSegments];   for (int i=0; i < numOfSegments; i++) {     this._locks[i]=new ReentrantReadWriteLock(fair);     this._readLocks[i]=_locks[i].readLock();     this._writeLocks[i]=_locks[i].writeLock();   } } "
"public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays){   return addOrderTerm(termTypeId,termValue,termDays,null); } "
"public static boolean isTime(String hour,String minute,String second){   if (isHour(hour) && isMinute(minute) && isSecond(second))   return true;  else   return false; } "
"protected void initializeWorld(){   SimulationBody floor=new SimulationBody();   floor.addFixture(Geometry.createRectangle(15.0,0.2));   floor.setMass(MassType.INFINITE);   this.world.addBody(floor);   SimulationBody bowlingBall=new SimulationBody();   BodyFixture fixture=new BodyFixture(Geometry.createCircle(0.109));   fixture.setDensity(194.82);   fixture.setRestitution(0.5);   bowlingBall.addFixture(fixture);   bowlingBall.setMass(MassType.NORMAL);   bowlingBall.setLinearVelocity(new Vector2(2.0,3.0));   bowlingBall.translate(-3.0,3.0);   this.world.addBody(bowlingBall); } "
"public ArrayFieldVector(Field<T> field,T[] v1,T[] v2) throws MathIllegalArgumentException, NullArgumentException {   MathUtils.checkNotNull(v1);   MathUtils.checkNotNull(v2);   if (v1.length + v2.length == 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);   }   data=MathArrays.buildArray(field,v1.length + v2.length);   System.arraycopy(v1,0,data,0,v1.length);   System.arraycopy(v2,0,data,v1.length,v2.length);   this.field=field; } "
"public GenericValue previous(){   try {     if (resultSet.previous()) {       return currentGenericValue();     }  else {       return null;     }   }  catch (  SQLException e) {     if (!closed) {       try {         this.close();       }  catch (      GenericEntityException e1) {         Debug.logError(e1,\"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: \" + e1.toString(),module);       }       Debug.logWarning(\"Warning: auto-closed EntityListIterator because of exception: \" + e.toString(),module);     }     throw new GeneralRuntimeException(\"Error getting the previous result\",e);   } catch (  GenericEntityException e) {     if (!closed) {       try {         this.close();       }  catch (      GenericEntityException e1) {         Debug.logError(e1,\"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: \" + e1.toString(),module);       }       Debug.logWarning(\"Warning: auto-closed EntityListIterator because of exception: \" + e.toString(),module);     }     throw new GeneralRuntimeException(\"Error creating GenericValue\",e);   } } "
"public DOMImplementationListImpl(){   fImplementations=new ArrayList(); } "
"public static final void drawDistanceJoint(GL2 gl,DistanceJoint joint){   Vector2 v1=joint.getAnchor1();   Vector2 v2=joint.getAnchor2();   gl.glColor4f(0.0f,0.0f,0.0f,0.3f);   if (joint.isSpring()) {     final double h=0.03;     final double w=0.25;     double offset=h * 0.5;     int loops=(int)Math.ceil((joint.getDistance() - offset * 2.0) / h);     Vector2 n=v1.to(v2);     double x=n.normalize();     Vector2 t=n.getRightHandOrthogonalVector();     double d=(x - offset * 2.0) / (loops - 1);     Vector2 d1=n.product(offset).add(v1);     gl.glBegin(GL.GL_LINES);     gl.glVertex2d(v1.x,v1.y);     gl.glVertex2d(d1.x,d1.y);     Vector2 ct=t.product(w * 0.5);     Vector2 cn=n.product(d * 0.5);     Vector2 first=ct.sum(cn).add(d1);     gl.glVertex2d(d1.x,d1.y);     gl.glVertex2d(first.x,first.y);     Vector2 prev=first;     for (int i=1; i < loops - 1; i++) {       ct=t.product(w * 0.5 * ((i + 1) % 2 == 1 ? 1.0 : -1.0));       cn=n.product(d * (i + 0.5) + offset);       Vector2 p2=ct.sum(cn).add(v1);       gl.glVertex2d(prev.x,prev.y);       gl.glVertex2d(p2.x,p2.y);       prev=p2;     }     Vector2 d2=n.product(-offset).add(v2);     gl.glVertex2d(prev.x,prev.y);     gl.glVertex2d(d2.x,d2.y);     gl.glVertex2d(d2.x,d2.y);     gl.glVertex2d(v2.x,v2.y);     gl.glEnd();   }  else {     Vector2 t=v1.to(v2);     t.normalize();     t.left();     t.multiply(0.025);     gl.glBegin(GL2.GL_QUADS);     gl.glVertex2d(v1.x - t.x,v1.y - t.y);     gl.glVertex2d(v1.x + t.x,v1.y + t.y);     gl.glVertex2d(v2.x + t.x,v2.y + t.y);     gl.glVertex2d(v2.x - t.x,v2.y - t.y);     gl.glEnd();   } } "
"public Builder(){ } "
"public synchronized long size(){   return size; } "
"@SuppressWarnings({\"rawtypes\"}) public void fileWrite(final Component c,final String parent,final BufferedWriter bw) throws IOException {   if (c instanceof JTextField) {     if (null != c.getName()) {       bw.write(parent);       bw.write(\" : \");       bw.write(c.getName());       bw.write(\" : \");       bw.write(((JTextField)c).getText());       bw.newLine();     }   }   if (c instanceof JComboBox) {     if (null != c.getName()) {       bw.write(parent);       bw.write(\" : \");       bw.write(c.getName());       bw.write(\" : \");       bw.write(((JComboBox)c).getSelectedItem().toString());       bw.newLine();     }   } } "
"public ConfigXmlProvider(InputStream configFile,String xmlPath) throws XmlParsingException {   this.config=XmlParser.parse(configFile,xmlPath,new String[]{CONFIG_XSD},CONFIG_PACKAGE,ConfigType.class); } "
"private boolean isValueDeadbandFiltered(final SourceDataTag currentTag,final ValueUpdate update,final SourceDataTagQuality newSDQuality){   if (this.equipmentLogger.isTraceEnabled()) {     this.equipmentLogger.trace(format(\"entering valueDeadbandFilterOut(%d)..\",currentTag.getId()));   }   boolean filterTag=false;   float valueDeadband;   if (currentTag.getAddress().isProcessValueDeadbandEnabled()) {     if (isCurrentValueAvailable(currentTag) && (currentTag.getCurrentValue().getQuality().getQualityCode() == newSDQuality.getQualityCode())) {       valueDeadband=currentTag.getAddress().getValueDeadband();       if (TypeConverter.isNumber(currentTag.getDataType())) {         if (isCurrentValueAvailable(currentTag)) {           Number currentValue=(Number)currentTag.getCurrentValue().getValue();           Number newValue=update.getValue() == null ? null : (Number)update.getValue(); switch (currentTag.getAddress().getValueDeadbandType()) { case DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE:             filterTag=isAbsoluteValueDeadband(currentValue,newValue,valueDeadband);           break; case DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE_VALUE_DESCR_CHANGE:         String tagValueDesc=currentTag.getCurrentValue().getValueDescription();       if (tagValueDesc == null) {         tagValueDesc=\"\";       }     String newValueDesc=update.getValueDescription();   if (newValueDesc == null) {     newValueDesc=\"\";   } String currentValueDesc=currentTag.getCurrentValue().getValueDescription(); if (currentValueDesc == null) { currentValueDesc=\"\"; } if (tagValueDesc.equals(newValueDesc)) { filterTag=isAbsoluteValueDeadband(currentValue,newValue,valueDeadband); } break; case DataTagDeadband.DEADBAND_PROCESS_RELATIVE: filterTag=isRelativeValueDeadband(currentValue,newValue,valueDeadband); break; case DataTagDeadband.DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE: tagValueDesc=currentTag.getCurrentValue().getValueDescription(); if (tagValueDesc == null) { tagValueDesc=\"\"; } newValueDesc=update.getValueDescription(); if (newValueDesc == null) { newValueDesc=\"\"; } currentValueDesc=currentTag.getCurrentValue().getValueDescription(); if (currentValueDesc == null) { currentValueDesc=\"\"; } if (tagValueDesc.equals(newValueDesc)) { filterTag=isRelativeValueDeadband(currentValue,newValue,valueDeadband); } break; default : break; } } } } } if (this.equipmentLogger.isTraceEnabled()) { this.equipmentLogger.trace(format(\"leaving valueDeadbandFilterOut(%d); filter out = %b\",currentTag.getId(),filterTag)); } return filterTag; } "
"public static RuleKey forPlainTarget(Label label){   return new RuleKey(label); } "
"public static short readShort(){   return scanner.nextShort(); } "
"public static void initialize(final Activity activity,final String gameId,final IUnityAdsListener listener,final boolean testMode){   DeviceLog.entered();   if (_configurationInitialized) {     return;   }   _configurationInitialized=true;   if (gameId == null || gameId.length() == 0) {     DeviceLog.error(\"Error while initializing Unity Ads: empty game ID, halting Unity Ads init\");     if (listener != null) {       listener.onUnityAdsError(UnityAdsError.INVALID_ARGUMENT,\"Empty game ID\");     }     return;   }   if (activity == null) {     DeviceLog.error(\"Error while initializing Unity Ads: null activity, halting Unity Ads init\");     if (listener != null) {       listener.onUnityAdsError(UnityAdsError.INVALID_ARGUMENT,\"Null activity\");     }     return;   }   if (testMode) {     DeviceLog.info(\"Initializing Unity Ads \" + SdkProperties.getVersionName() + \" (\"+ SdkProperties.getVersionCode()+ \") with game id \"+ gameId+ \" in test mode\");   }  else {     DeviceLog.info(\"Initializing Unity Ads \" + SdkProperties.getVersionName() + \" (\"+ SdkProperties.getVersionCode()+ \") with game id \"+ gameId+ \" in production mode\");   }   setDebugMode(_debugMode);   ClientProperties.setGameId(gameId);   ClientProperties.setListener(listener);   ClientProperties.setApplicationContext(activity.getApplicationContext());   SdkProperties.setTestMode(testMode);   if (EnvironmentCheck.isEnvironmentOk()) {     DeviceLog.info(\"Unity Ads environment check OK\");   }  else {     DeviceLog.error(\"Error during Unity Ads environment check, halting Unity Ads init\");     if (listener != null) {       listener.onUnityAdsError(UnityAdsError.INIT_SANITY_CHECK_FAIL,\"Unity Ads init environment check failed\");     }     return;   }   Configuration configuration=new Configuration();   Class[] apiClassList={com.unity3d.ads.api.AdUnit.class,com.unity3d.ads.api.Broadcast.class,com.unity3d.ads.api.Cache.class,com.unity3d.ads.api.Connectivity.class,com.unity3d.ads.api.DeviceInfo.class,com.unity3d.ads.api.Listener.class,com.unity3d.ads.api.Storage.class,com.unity3d.ads.api.Sdk.class,com.unity3d.ads.api.Request.class,com.unity3d.ads.api.Resolve.class,com.unity3d.ads.api.VideoPlayer.class,com.unity3d.ads.api.Placement.class,com.unity3d.ads.api.Intent.class};   configuration.setWebAppApiClassList(apiClassList);   InitializeThread.initialize(configuration); } "
"private FileChannel updateCache(String filePath){   FileChannel fileChannel=fileNameAndStreamCache.get(filePath);   try {     if (null == fileChannel) {       FileInputStream stream=new FileInputStream(filePath);       fileChannel=stream.getChannel();       fileNameAndStreamCache.put(filePath,fileChannel);     }   }  catch (  IOException e) {     LOGGER.error(e,e.getMessage());   }   return fileChannel; } "
"private StyledLayerDescriptor createSLD(){   String sldContents=\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\" + \"<StyledLayerDescriptor version=\\\"1.0.0\\\" \" + \"    xsi:schemaLocation=\\\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\\\" \"+ \"    xmlns=\\\"http://www.opengis.net/sld\\\" \"+ \"    xmlns:ogc=\\\"http://www.opengis.net/ogc\\\" \"+ \"    xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" \"+ \"    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\"+ \"  <NamedLayer>\"+ \"    <Name>Attribute-based point</Name>\"+ \"    <UserStyle>\"+ \"      <Title>GeoServer SLD Cook Book: Attribute-based point</Title>\"+ \"      <FeatureTypeStyle>\"+ \"        <Rule>\"+ \"          <Name>SmallPop</Name>\"+ \"          <Title>1 to 50000</Title>\"+ \"          <ogc:Filter>\"+ \"            <ogc:PropertyIsLessThan>\"+ \"              <ogc:PropertyName>pop</ogc:PropertyName>\"+ \"              <ogc:Literal>50000</ogc:Literal>\"+ \"            </ogc:PropertyIsLessThan>\"+ \"          </ogc:Filter>\"+ \"          <PointSymbolizer>\"+ \"            <Graphic>\"+ \"              <Mark>\"+ \"                <WellKnownName>star</WellKnownName>\"+ \"                <Fill>\"+ \"                  <CssParameter name=\\\"fill\\\">#0033CC</CssParameter>\"+ \"                </Fill>\"+ \"              </Mark>\"+ \"              <Rotation>\"+ \"                <ogc:PropertyName>angle</ogc:PropertyName>\"+ \"              </Rotation>\"+ \"              <Size>\"+ \"                <ogc:PropertyName>size</ogc:PropertyName>\"+ \"              </Size>\"+ \"            </Graphic>\"+ \"          </PointSymbolizer>\"+ \"        </Rule>\"+ \"        <Rule>\"+ \"          <Name>MediumPop</Name>\"+ \"          <Title>50000 to 500000</Title>\"+ \"          <ogc:Filter>\"+ \"            <ogc:PropertyIsLessThan>\"+ \"              <ogc:PropertyName>pop</ogc:PropertyName>\"+ \"              <ogc:Literal>500000</ogc:Literal>\"+ \"            </ogc:PropertyIsLessThan>\"+ \"          </ogc:Filter>\"+ \"          <PointSymbolizer>\"+ \"            <Graphic>\"+ \"              <Mark>\"+ \"                <WellKnownName>star</WellKnownName>\"+ \"                <Fill>\"+ \"                  <CssParameter name=\\\"fill\\\">#0033CC</CssParameter>\"+ \"                </Fill>\"+ \"              </Mark>\"+ \"              <Rotation>\"+ \"                <ogc:PropertyName>angle</ogc:PropertyName>\"+ \"              </Rotation>\"+ \"              <Size>\"+ \"                <ogc:PropertyName>size</ogc:PropertyName>\"+ \"              </Size>\"+ \"            </Graphic>\"+ \"          </PointSymbolizer>\"+ \"          <PointSymbolizer>\"+ \"            <Graphic>\"+ \"              <Mark>\"+ \"                <WellKnownName>circle</WellKnownName>\"+ \"                <Fill>\"+ \"                  <CssParameter name=\\\"fill\\\">#123456</CssParameter>\"+ \"                </Fill>\"+ \"              </Mark>\"+ \"              <Rotation>\"+ \"                <ogc:PropertyName>angle</ogc:PropertyName>\"+ \"              </Rotation>\"+ \"              <Size>\"+ \"                <ogc:PropertyName>size</ogc:PropertyName>\"+ \"              </Size>\"+ \"            </Graphic>\"+ \"          </PointSymbolizer>\"+ \"        </Rule>\"+ \"        <Rule>\"+ \"          <Name>LargePop</Name>\"+ \"          <Title>500000 to 900000</Title>\"+ \"          <ogc:Filter>\"+ \"            <ogc:PropertyIsLessThan>\"+ \"              <ogc:PropertyName>pop</ogc:PropertyName>\"+ \"              <ogc:Literal>900000</ogc:Literal>\"+ \"            </ogc:PropertyIsLessThan>\"+ \"          </ogc:Filter>\"+ \"          <PointSymbolizer>\"+ \"            <Graphic>\"+ \"              <Mark>\"+ \"                <WellKnownName>star</WellKnownName>\"+ \"                <Fill>\"+ \"                  <CssParameter name=\\\"fill\\\">#0033CC</CssParameter>\"+ \"                </Fill>\"+ \"              </Mark>\"+ \"              <Rotation>\"+ \"                <ogc:PropertyName>angle</ogc:PropertyName>\"+ \"              </Rotation>\"+ \"              <Size>\"+ \"                <ogc:PropertyName>size</ogc:PropertyName>\"+ \"              </Size>\"+ \"            </Graphic>\"+ \"          </PointSymbolizer>\"+ \"        </Rule>\"+ \"      </FeatureTypeStyle>\"+ \"    </UserStyle>\"+ \"  </NamedLayer>\"+ \"</StyledLayerDescriptor>\";   SLDData sldData=new SLDData(new StyleWrapper(null,\"test.sld\"),sldContents);   sldData.setDataSourceProperties(DataSourceConnectorFactory.getNoDataSource());   StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);   return sld; } "
"public static void clear(){   clear(DEFAULT_CLEAR_COLOR); } "
"private Map<String,List<ChartObject>> convertResult(StatisticsDocumentHandler handler){   DecimalFormat formatter=new DecimalFormat(\"###.##\");   List<ChartObject> objects=handler.getResult();   if (objects.isEmpty()) {     return new HashMap<>();   }   Map<String,List<ChartObject>> result=new HashMap<>();   for (  ChartObject object : objects) {     Map<String,String> values=new HashMap<>();     double failed=Integer.parseInt(object.getValues().get(getFailedFieldName()));     double skipped=Integer.parseInt(object.getValues().get(getSkippedFieldName()));     double total=Integer.parseInt(object.getValues().get(getTotalFieldName()));     if (total > 0) {       double percent=(failed + skipped) / total * 100;       values.put(NOT_PASSED_PERCENT,formatter.format(percent));     }  else {       values.put(NOT_PASSED_PERCENT,\"0\");     }     object.setValues(values);   }   result.put(\"result\",objects);   return result; } "
"public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){   super(fixNoHttpResponseException,httpPort,httpsPort); } "
"public void updateExpandableItem(int expandableItemPosition,ExpandableItem expandableItem){   validateExpandableItem(expandableItem);   expandableItems.remove(expandableItemPosition);   expandableItems.add(expandableItemPosition,expandableItem);   int buttonPosition=buttons.size() - 1 - expandableItemPosition;   configureButtonContent(buttons.get(buttonPosition),expandableItem); } "
"private void poll(){   Camera camera=this.simulation.getCamera();   World world=this.simulation.getWorld();   Dimension size=this.canvasSize;   Vector2 offset=camera.getTranslation();   double scale=camera.getScale();   if (this.mouse.hasScrolled()) {     int scroll=this.mouse.getScrollAmount();     if (scroll < 0) {       camera.zoomOut();     }  else {       camera.zoomIn();     }   }   Point p=this.mouse.getLocation();   if (p == null) {     p=new Point();   }   Vector2 pw=this.screenToWorld(p,size,offset,scale);   if (this.mouse.hasMoved()) {     this.lblMouseLocation.update(pw);   }   if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.mouse.wasClicked(MouseEvent.BUTTON3)) {     if (this.selectBodyAction.isActive()) {       SandboxBody body=this.selectBodyAction.getObject();       BodyFixture fixture=this.getFixtureAtPoint(body,pw);       if (fixture == null) {         this.selectBodyAction.end();         this.editBodyAction.end();       }     }  else     if (this.editBodyAction.isActive()) {       SandboxBody body=this.editBodyAction.getObject();       BodyFixture fixture=this.getFixtureAtPoint(body,pw);       if (fixture != null) {         this.selectFixtureAction.begin(fixture);       }  else {         this.editBodyAction.end();         this.selectFixtureAction.end();       }     }  else {       if (this.mouse.wasClicked(MouseEvent.BUTTON1) || this.isPaused()) {         SandboxBody body=this.getBodyAtPoint(world,pw);         if (body != null) {           this.selectBodyAction.begin(body);         }       }     }   }   if (this.mouse.isPressed(MouseEvent.BUTTON1)) {     if (this.selectBodyAction.isActive() && this.moveBodyAction.isActive()) {       SandboxBody body=this.selectBodyAction.getObject();       if (this.isPaused()) {         Vector2 tx=pw.difference(this.moveBodyAction.getBeginPosition());         body.translate(tx);         world.getBroadphaseDetector().update(body);         this.moveBodyAction.update(pw);       }  else {         if (this.selectedBodyJoint == null) {           double mass=body.getMass().getMass();           if (mass <= Epsilon.E) {             mass=body.getMass().getInertia();           }           this.selectedBodyJoint=new PinJoint(body,pw,4.0,0.7,1000.0 * mass); synchronized (Simulation.LOCK) {             world.addJoint(this.selectedBodyJoint);           }         }  else {           this.selectedBodyJoint.setTarget(pw);         }       }     }  else     if (this.moveWorldAction.isActive()) {       Vector2 pwt=this.screenToWorld(p,size,this.moveWorldAction.getOffset(),scale);       Vector2 tx=pwt.difference(this.moveWorldAction.getBeginPosition());       camera.translate(tx);       this.moveWorldAction.update(pwt);     }  else     if (this.editBodyAction.isActive()) {       SandboxBody body=this.editBodyAction.getObject();       if (this.selectFixtureAction.isActive() && this.moveFixtureAction.isActive()) {         BodyFixture bf=this.selectFixtureAction.getObject();         Vector2 lpw=body.getTransform().getInverseTransformed(pw);         Vector2 tx=lpw.difference(this.moveFixtureAction.getBeginPosition());         bf.getShape().translate(tx);         body.updateMass();         world.getBroadphaseDetector().update(body);         this.moveFixtureAction.update(lpw);       }  else {         BodyFixture fixture=this.getFixtureAtPoint(body,pw);         if (fixture != null) {           this.selectFixtureAction.begin(fixture);           this.moveFixtureAction.begin(body.getTransform().getInverseTransformed(pw));         }  else {           this.editBodyAction.end();           this.selectFixtureAction.end();         }       }     }  else {       SandboxBody body=this.getBodyAtPoint(world,pw);       if (body != null) {         this.selectBodyAction.begin(body);         this.moveBodyAction.begin(pw);         this.editBodyAction.end();         body.setAsleep(false);         body.setActive(true);       }  else {         this.moveWorldAction.begin(offset.copy(),pw,this.canvas);       }     }   }   if (this.mouse.wasDoubleClicked(MouseEvent.BUTTON1)) {     if (this.isPaused()) {       SandboxBody body=this.getBodyAtPoint(world,pw);       if (body != null) {         this.selectBodyAction.end();         this.editBodyAction.begin(body);         body.setAsleep(false);         body.setActive(true);       }  else {         this.editBodyAction.end();       }     }   }   if (this.mouse.isPressed(MouseEvent.BUTTON3)) {     if (this.selectBodyAction.isActive() && this.rotateBodyAction.isActive()) {       SandboxBody body=this.selectBodyAction.getObject();       Vector2 c=body.getWorldCenter();       Vector2 v1=c.to(this.rotateBodyAction.getBeginPosition());       Vector2 v2=c.to(pw);       double theta=v1.getAngleBetween(v2);       body.rotate(theta,c);       world.getBroadphaseDetector().update(body);       this.rotateBodyAction.update(pw);     }  else     if (this.editBodyAction.isActive()) {       SandboxBody body=this.editBodyAction.getObject();       if (this.selectFixtureAction.isActive() && this.rotateFixtureAction.isActive()) {         BodyFixture bf=this.selectFixtureAction.getObject();         Convex convex=bf.getShape();         Vector2 c=convex.getCenter();         Vector2 lpw=body.getTransform().getInverseTransformed(pw);         Vector2 v1=c.to(this.rotateFixtureAction.getBeginPosition());         Vector2 v2=c.to(lpw);         double theta=v1.getAngleBetween(v2);         bf.getShape().rotate(theta,convex.getCenter());         body.updateMass();         world.getBroadphaseDetector().update(body);         this.rotateFixtureAction.update(lpw);       }  else {         BodyFixture fixture=this.getFixtureAtPoint(body,pw);         if (fixture != null) {           this.selectFixtureAction.begin(fixture);           this.rotateFixtureAction.begin(body.getTransform().getInverseTransformed(pw));         }  else {           this.editBodyAction.end();           this.selectFixtureAction.end();         }       }     }  else {       if (this.isPaused()) {         SandboxBody body=this.getBodyAtPoint(world,pw);         if (body != null) {           this.selectBodyAction.begin(body);           this.rotateBodyAction.begin(pw);           body.setAsleep(false);           body.setActive(true);         }       }     }   }   if (this.mouse.wasReleased(MouseEvent.BUTTON1)) {     if (this.moveBodyAction.isActive()) {       this.moveBodyAction.end();       if (this.selectedBodyJoint != null) {         world.removeJoint(this.selectedBodyJoint);         this.selectedBodyJoint=null;       }     }     if (this.moveFixtureAction.isActive()) {       SandboxBody body=this.editBodyAction.getObject();       body.updateMass();       this.moveFixtureAction.end();     }     if (this.moveWorldAction.isActive()) {       this.moveWorldAction.end(this.canvas);     }   }   if (this.mouse.wasReleased(MouseEvent.BUTTON3)) {     if (this.rotateBodyAction.isActive()) {       this.rotateBodyAction.end();     }     if (this.rotateFixtureAction.isActive()) {       this.rotateFixtureAction.end();     }   }   this.mouse.clear(); } "
"CanonicalCookie(String url,String name,String value,String domain,String path,long creation,long expiration,long lastAccess,boolean secure,boolean httpOnly,boolean firstPartyOnly,int priority){   mUrl=url;   mName=name;   mValue=value;   mDomain=domain;   mPath=path;   mCreation=creation;   mExpiration=expiration;   mLastAccess=lastAccess;   mSecure=secure;   mHttpOnly=httpOnly;   mFirstPartyOnly=firstPartyOnly;   mPriority=priority; } "
"public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {   if (inputtype == null || locale == null || voice == null || inputtext == null) {     throw new NullPointerException(\"Null argument\");   }   byte[] audio=null;   String query=\"Select outputaudio FROM marycache WHERE inputtype = '\" + inputtype + \"' AND outputtype = 'AUDIO' AND locale = '\"+ locale+ \"' AND voice = '\"+ voice+ \"' AND outputparams = '\"+ outputparams+ \"' AND style = '\"+ style+ \"' AND effects = '\"+ effects+ \"' AND inputtext = ?\";   PreparedStatement st=connection.prepareStatement(query);   st.setString(1,inputtext);   ResultSet results=st.executeQuery();   if (results.next()) {     audio=results.getBytes(1);   }   return audio; } "
"@Override public void close() throws IOException { } "
"public static NumericEntityEscaper below(final int codepoint){   return outsideOf(codepoint,Integer.MAX_VALUE); } "
"private DateUtils(){ } "
"public int size(){   return counter; } "
"public int findFirstVisibleItemPosition(){   LayoutManager manager=getLayoutManager();   int firstVisibleItems=0;   if (manager instanceof LinearLayoutManager) {     firstVisibleItems=((LinearLayoutManager)manager).findFirstVisibleItemPosition();   }  else   if (manager instanceof GridLayoutManager) {     firstVisibleItems=((GridLayoutManager)manager).findFirstVisibleItemPosition();   }  else   if (manager instanceof StaggeredGridLayoutManager) {     StaggeredGridLayoutManager sg=((StaggeredGridLayoutManager)manager);     int[] items=new int[sg.getSpanCount()];     items=((StaggeredGridLayoutManager)manager).findFirstVisibleItemPositions(items);     firstVisibleItems=items[0];   }   return firstVisibleItems; } "
"protected boolean isZeroComparison(ConditionExpr expr){   if (expr instanceof EqExpr || expr instanceof NeExpr) {     if (expr.getOp2() instanceof IntConstant && ((IntConstant)expr.getOp2()).value == 0)     return true;     if (expr.getOp2() instanceof LongConstant && ((LongConstant)expr.getOp2()).value == 0)     return true;   }   return false; } "
"public boolean isAltDown(){   return mIsAltDown; } "
"public void flushAndCancel(){ synchronized (this.sourceDataTag) {     if (LOGGER.isDebugEnabled()) {       LOGGER.debug(\"\\tscheduler[\" + this.sourceDataTag.getId() + \"] : flush and reset\");     }     this.cancel();     this.run();     this.lastSourceDataTag=null;   } } "
"public boolean contains(double x,double y){   return false; } "
"public boolean hasProgramEnrollmentEndDate(){   return programEnrollmentEndDate != null; } "
"public LeadsGetStatsQuery secret(String value){   return unsafeParam(\"secret\",value); } "
"public static SecretKey generateKey(String key,String algorithm) throws EncodingException {   try {     SecretKey skey=new SecretKeySpec(key.getBytes(\"UTF-8\"),algorithm);     return skey;   }  catch (  Exception e) {     throw new EncodingException(e);   } } "
"public static void zipDir(String zipDirectory,String outputFile){   ZipOutputStream zip=null;   FileOutputStream fileWriter=null;   try {     fileWriter=new FileOutputStream(outputFile);     zip=new ZipOutputStream(fileWriter);     addFolderToZip(\"\",zipDirectory,zip);     zip.close();     fileWriter.close();   }  catch (  IOException e) {     LOGGER.log(Level.WARNING,\"Unable to zip file\",e);   } } "
"public boolean canFindAll(){   return true; } "
"public void writeObject(Object value) throws JMSException {   initializeWriting();   if (value == null) {     try {       this.dataOut.write(_NULL);     }  catch (    IOException ioe) {       raise(ioe);     }   }  else   if (value instanceof String) {     writeString(value.toString());   }  else   if (value instanceof Character) {     writeChar(((Character)value).charValue());   }  else   if (value instanceof Boolean) {     writeBoolean(((Boolean)value).booleanValue());   }  else   if (value instanceof Byte) {     writeByte(((Byte)value).byteValue());   }  else   if (value instanceof Short) {     writeShort(((Short)value).shortValue());   }  else   if (value instanceof Integer) {     writeInt(((Integer)value).intValue());   }  else   if (value instanceof Float) {     writeFloat(((Float)value).floatValue());   }  else   if (value instanceof Double) {     writeDouble(((Double)value).doubleValue());   }  else   if (value instanceof byte[]) {     writeBytes((byte[])value);   } } "
"private void putEntry(String key,CacheHeader entry){   if (!mEntries.containsKey(key)) {     mTotalSize+=entry.size;   }  else {     CacheHeader oldEntry=mEntries.get(key);     mTotalSize+=(entry.size - oldEntry.size);   }   mEntries.put(key,entry); } "
"public static String fixedWidthDoubletoString(double x,int w,int d){   java.text.DecimalFormat fmt=new java.text.DecimalFormat();   fmt.setMaximumFractionDigits(d);   fmt.setMinimumFractionDigits(d);   fmt.setGroupingUsed(false);   String s=fmt.format(x);   while (s.length() < w) {     s=\" \" + s;   }   return s; } "
"@Override public void populateField(String value){   if (comboBox != null) {     ValueComboBoxData valueComboBoxData=comboDataMap.get(value);     if (valueComboBoxData != null) {       comboBox.setSelectedItem(valueComboBoxData);     }  else {       logger.error(\"Unknown ValueComboBoxData value : \" + value);     }   } } "
"public static void writeResultFile(String filename,Map<String,List<QueryResponseJSON>> resultMap) throws IOException {   try (BufferedWriter bw=new BufferedWriter(new FileWriter(new File(filename)))){     for (    Entry<String,List<QueryResponseJSON>> entry : resultMap.entrySet()) {       for (      QueryResponseJSON hitJSON : entry.getValue()) {         bw.write(hitJSON.getJSONString());         bw.newLine();       }     }   }  } "
"@Override public String toString(){   StringBuffer result=new StringBuffer();   result.append(\"\\nConfigurationChangeEventReport:\\n\");   if (error != null) {     result.append(\"Error:\\n\");     result.append(error);   }  else {     for (    ChangeReport changeReport : changeReports) {       result.append(changeReport.toString());     }   }   return result.toString(); } "
"void modifyingCharacterData(NodeImpl node,boolean replace){ } "
"public static void removeAllTrafficListeners(){   getAirMapTrafficService().removeAllListeners(); } "
"public boolean acceptsURL(String url) throws SQLException {   return (url.startsWith(GConnection.JDBC_GIGASPACES)); } "
"@Deployment public void testProcessDefinitionListenerDefinition() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"testEventListeners\");   assertNotNull(testListenerBean);   Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();   taskService.complete(task.getId());   assertFalse(testListenerBean.getEventsReceived().isEmpty());   for (  ActivitiEvent event : testListenerBean.getEventsReceived()) {     assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());   }   assertTrue(testListenerBean.getEventsReceived().get(0) instanceof ActivitiEntityEvent);   ActivitiEntityEvent event=(ActivitiEntityEvent)testListenerBean.getEventsReceived().get(0);   assertTrue(event.getEntity() instanceof ProcessInstance);   assertEquals(processInstance.getId(),((ProcessInstance)event.getEntity()).getId());   List<ActivitiEvent> events=StaticTestActivitiEventListener.getEventsReceived();   assertFalse(events.isEmpty());   boolean insertFound=false;   boolean deleteFound=false;   for (  ActivitiEvent e : events) {     if (ActivitiEventType.ENTITY_CREATED == e.getType()) {       insertFound=true;     }  else     if (ActivitiEventType.ENTITY_DELETED == e.getType()) {       deleteFound=true;     }   }   assertTrue(insertFound);   assertTrue(deleteFound); } "
"@Override public void onBindViewHolder(){   if (unbinder == null)   unbinder=ButterKnife.bind(this,itemView); } "
"public final void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){   getChangeSupport().removePropertyChangeListener(propertyName,listener); } "
"public static HouseObject<?> createNew(House house,ItemTemplate itemTemplate){   if (itemTemplate.getActions() == null) {     throw new IncompleteArgumentException(\"template actions null\");   }   SummonHouseObjectAction action=itemTemplate.getActions().getHouseObjectAction();   if (action == null) {     throw new IncompleteArgumentException(\"template actions miss SummonHouseObjectAction\");   }   int objectTemplateId=action.getTemplateId();   HouseObject<?> obj=createNew(house,IDFactory.getInstance().nextId(),objectTemplateId);   if (obj.getObjectTemplate().getUseDays() > 0) {     int expireEnd=(int)(DateTime.now().plusDays(obj.getObjectTemplate().getUseDays()).getMillis() / 1000);     obj.setExpireTime(expireEnd);   }   return obj; } "
"protected AdsGetDemographicsQuery accountId(int value){   return unsafeParam(\"account_id\",value); } "
"public boolean isUpdateAvailable(){   return availableUpdate != null; } "
"public void notifyEventListeners(ZWaveEvent event){   logger.debug(\"Notifying event listeners: {}\",event.getClass().getSimpleName());   ArrayList<ZWaveEventListener> copy=new ArrayList<ZWaveEventListener>(zwaveEventListeners);   for (  ZWaveEventListener listener : copy) {     listener.ZWaveIncomingEvent(event);   }   if (event instanceof ZWaveInclusionEvent) {     ZWaveInclusionEvent incEvent=(ZWaveInclusionEvent)event; switch (incEvent.getEvent()) { case IncludeSlaveFound:       requestAddNodesStop();     logger.debug(\"NODE {}: Including node.\",incEvent.getNodeId());   if (getNode(incEvent.getNodeId()) != null) {     logger.debug(\"NODE {}: Newly included node already exists - not initialising.\",incEvent.getNodeId());     break;   } lastIncludeSlaveFoundEvent=incEvent; ZWaveNode newNode=new ZWaveNode(homeId,incEvent.getNodeId(),this); ZWaveDeviceClass deviceClass=newNode.getDeviceClass(); deviceClass.setBasicDeviceClass(incEvent.getBasic()); deviceClass.setGenericDeviceClass(incEvent.getGeneric()); deviceClass.setSpecificDeviceClass(incEvent.getSpecific()); for (CommandClass commandClass : incEvent.getCommandClasses()) { ZWaveCommandClass zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),newNode,this); if (zwaveCommandClass != null) { logger.debug(\"NODE {}: Inclusion is adding command class {}.\",incEvent.getNodeId(),commandClass); if (commandClass == CommandClass.SECURITY) { } newNode.addCommandClass(zwaveCommandClass); } } zwaveNodes.putIfAbsent(incEvent.getNodeId(),newNode); break; case IncludeDone: if (incEvent.getNodeId() == 0) { break; } ZWaveNode node=getNode(incEvent.getNodeId()); if (node == null) { logger.debug(\"NODE {}: Newly included node doesn't exist - initialising from start.\",incEvent.getNodeId()); addNode(incEvent.getNodeId()); break; } if (node.getNodeInitStage() != ZWaveNodeInitStage.EMPTYNODE) { logger.debug(\"NODE {}: Newly included node already initialising at {}\",incEvent.getNodeId(),node.getNodeInitStage()); break; } if (node.getDeviceClass().getBasicDeviceClass() != Basic.NOT_KNOWN) { node.initialiseNode(ZWaveNodeInitStage.INCLUSION_START); }  else { node.initialiseNode(ZWaveNodeInitStage.EMPTYNODE); } break; case ExcludeDone: if (incEvent.getNodeId() == 0) { break; } logger.debug(\"NODE {}: Excluding node.\",incEvent.getNodeId()); if (getNode(incEvent.getNodeId()) == null) { logger.debug(\"NODE {}: Excluding node that doesn't exist.\",incEvent.getNodeId()); break; } zwaveNodes.remove(incEvent.getNodeId()); ZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer(); nodeSerializer.DeleteNode(event.getNodeId()); break; default : break; } }  else if (event instanceof ZWaveNetworkEvent) { ZWaveNetworkEvent networkEvent=(ZWaveNetworkEvent)event; switch (networkEvent.getEvent()) { case DeleteNode: if (getNode(networkEvent.getNodeId()) == null) { logger.debug(\"NODE {}: Deleting a node that doesn't exist.\",networkEvent.getNodeId()); break; } this.zwaveNodes.remove(networkEvent.getNodeId()); ZWaveNodeSerializer nodeSerializer=new ZWaveNodeSerializer(); nodeSerializer.DeleteNode(event.getNodeId()); break; default : break; } }  else if (event instanceof ZWaveNodeStatusEvent) { ZWaveNodeStatusEvent statusEvent=(ZWaveNodeStatusEvent)event; logger.debug(\"NODE {}: Node Status event - Node is {}\",statusEvent.getNodeId(),statusEvent.getState()); ZWaveNode node=getNode(event.getNodeId()); if (node == null) { logger.error(\"NODE {}: Node is unknown!\",statusEvent.getNodeId()); return; } switch (statusEvent.getState()) { case DEAD: break; case FAILED: break; case ALIVE: break; } } } "
"public Skewness(final ThirdMoment m3){   this.moment=m3;   incMoment=false; } "
"public PlayerLocale(){   GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.Builder builder=GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.newBuilder();   builder.setCountry(Locale.getDefault().getCountry()).setLanguage(Locale.getDefault().getLanguage());   playerLocale=builder.build(); } "
"private void collapseGroup(ExpandableListPosition listPosition){   expandableList.expandedGroupIndexes.put(listPosition.groupPos,false);   if (listener != null) {     listener.onGroupCollapsed(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());   } } "
"public static void appendProperty(String propertyName,String value){   String oldValue=props.getProperty(propertyName);   if (oldValue != null && !oldValue.equals(\"none\")) {     oldValue+=\",\" + value;   }  else {     oldValue=value;   }   props.setProperty(propertyName,oldValue); } "
"public void solve(){   long solve_time=0, prepare_time=0;   long mem;   int rounds;   int n_obs;   G.v().out.flush();   preprocess();   mergeLocalVariables();   worklist.initialize(pointers.size());   offlineProcessor=new OfflineProcessor(this);   IFigureManager.cleanCache();   int evalLevel=opts.geom_eval();   GeomEvaluator ge=new GeomEvaluator(this,ps);   if (evalLevel == Constants.eval_basicInfo)   ge.profileSparkBasicMetrics();   Date begin=new Date();   for (rounds=0, n_obs=1000; rounds < Parameters.cg_refine_times && n_obs > 0; ++rounds) {     ps.println(\"\\n\" + \"[Geom] Propagation Round \" + rounds + \" ==> \");     encodeContexts();     Date prepare_begin=new Date();     offlineProcessor.init();     offlineProcessor.defaultFeedPtsRoutines();     offlineProcessor.runOptimizations();     Date prepare_end=new Date();     prepare_time+=prepare_end.getTime() - prepare_begin.getTime();     if (rounds == 0) {       if (evalLevel <= Constants.eval_basicInfo) {         offlineProcessor.releaseSparkMem();       }     }     prepareNextRun();     nodeGenerator.initFlowGraph(this);     solveConstraints();     n_obs=updateCallGraph();     finalizeInternalData();   }   if (rounds < Parameters.cg_refine_times)   ps.printf(\"\\nThe points-to information has converged. We stop here.\\n\");   Date end=new Date();   solve_time+=end.getTime() - begin.getTime();   mem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();   ps.println();   ps.printf(\"[Geom] Preprocessing time: %.2f s\\n\",(double)prepare_time / 1000);   ps.printf(\"[Geom] Total time: %.2f s\\n\",(double)solve_time / 1000);   ps.printf(\"[Geom] Memory: %.1f MB\\n\",(double)(mem) / 1024 / 1024);   if (evalLevel != Constants.eval_nothing) {     ge.profileGeomBasicMetrics(evalLevel > Constants.eval_basicInfo);     if (evalLevel > Constants.eval_basicInfo) {       ge.checkCallGraph();       ge.checkCastsSafety();       ge.checkAliasAnalysis();     }   }   finalizeSootData();   releaseUselessResources();   hasExecuted=true; } "
"protected BookieServer startBookie(ServerConfiguration conf) throws Exception {   BookieServer server=new BookieServer(conf);   bsConfs.add(conf);   bs.add(server);   server.start();   if (bkc == null) {     bkc=new BookKeeperTestClient(baseClientConf);   }   int port=conf.getBookiePort();   while (bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\"+ port,false) == null) {     Thread.sleep(500);   }   bkc.readBookiesBlocking();   LOG.info(\"New bookie on port \" + port + \" has been created.\");   return server; } "
"public static Map<String,Object> traverseContent(DispatchContext dctx,Map<String,? extends Object> context){   Delegator delegator=dctx.getDelegator();   Map<String,Object> results=FastMap.newInstance();   Locale locale=(Locale)context.get(\"locale\");   String contentId=(String)context.get(\"contentId\");   String direction=(String)context.get(\"direction\");   if (direction != null && direction.equalsIgnoreCase(\"From\")) {     direction=\"From\";   }  else {     direction=\"To\";   }   if (contentId == null) {     contentId=\"PUBLISH_ROOT\";   }   GenericValue content=null;   try {     content=EntityQuery.use(delegator).from(\"Content\").where(\"contentId\",contentId).queryOne();   }  catch (  GenericEntityException e) {     Debug.logError(e,\"Entity Error:\" + e.getMessage(),module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ContentNoContentFound\",UtilMisc.toMap(\"contentId\",contentId),locale));   }   String fromDateStr=(String)context.get(\"fromDateStr\");   String thruDateStr=(String)context.get(\"thruDateStr\");   Timestamp fromDate=null;   if (UtilValidate.isNotEmpty(fromDateStr)) {     fromDate=UtilDateTime.toTimestamp(fromDateStr);   }   Timestamp thruDate=null;   if (UtilValidate.isNotEmpty(thruDateStr)) {     thruDate=UtilDateTime.toTimestamp(thruDateStr);   }   Map<String,Object> whenMap=FastMap.newInstance();   whenMap.put(\"followWhen\",context.get(\"followWhen\"));   whenMap.put(\"pickWhen\",context.get(\"pickWhen\"));   whenMap.put(\"returnBeforePickWhen\",context.get(\"returnBeforePickWhen\"));   whenMap.put(\"returnAfterPickWhen\",context.get(\"returnAfterPickWhen\"));   String startContentAssocTypeId=(String)context.get(\"contentAssocTypeId\");   if (startContentAssocTypeId != null) {     startContentAssocTypeId=\"PUBLISH\";   }   Map<String,Object> nodeMap=FastMap.newInstance();   List<GenericValue> pickList=FastList.newInstance();   ContentWorker.traverse(delegator,content,fromDate,thruDate,whenMap,0,nodeMap,startContentAssocTypeId,pickList,direction);   results.put(\"nodeMap\",nodeMap);   results.put(\"pickList\",pickList);   return results; } "
"public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){   HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(url),entity);   if (headers != null)   request.setHeaders(headers);   return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context); } "
"@SuppressWarnings({\"checkstyle:javadocmethod\",\"checkstyle:javadocstyle\"}) public Object parse(Reader reader){   Object content;   JsonLexer lexer=new JsonLexer(reader);   JsonToken token=lexer.nextToken();   if (token.getType() == OPEN_CURLY) {     content=parseObject(lexer);   }  else   if (token.getType() == OPEN_BRACKET) {     content=parseArray(lexer);   }  else {     throw new JsonException(\"A JSON payload should start with \" + OPEN_CURLY.getLabel() + \" or \"+ OPEN_BRACKET.getLabel()+ \".\\n\"+ \"Instead, '\"+ token.getText()+ \"' was found \"+ \"on line: \"+ token.getStartLine()+ \", \"+ \"column: \"+ token.getStartColumn());   }   return content; } "
"@Path() public void onGet(){   JSON jo=new JSON();   Temp t=Temp.create(\"code.jpg\");   try {     Captcha.create(this.sid(),System.currentTimeMillis() + 5 * X.AMINUTE,200,60,t.getFile(),4);     jo.put(X.STATE,200);     jo.put(\"sid\",sid());     jo.put(\"uri\",t.getUri() + \"?\" + System.currentTimeMillis());   }  catch (  Exception e1) {     log.error(e1.getMessage(),e1);     OpLog.error(captcha.class,\"\",e1.getMessage(),e1,login,this.getRemoteHost());     jo.put(X.STATE,201);     jo.put(X.MESSAGE,e1.getMessage());   }   this.response(jo); } "
"public static RuleKey forDependency(RuleIdeInfo rule,Label dep){   return new RuleKey(dep); } "
"private Haval(int size,int rounds){   super(\"haval\",size,BLOCK_SIZE);   if (size != HAVAL_128_BIT && size != HAVAL_160_BIT && size != HAVAL_192_BIT && size != HAVAL_224_BIT && size != HAVAL_256_BIT) {     throw new IllegalArgumentException(\"Invalid HAVAL output size\");   }   if (rounds != HAVAL_3_ROUND && rounds != HAVAL_4_ROUND && rounds != HAVAL_5_ROUND) {     throw new IllegalArgumentException(\"Invalid HAVAL number of rounds\");   }   this.rounds=rounds; } "
"public boolean isEmpty(){   if (mySnippets.length == 0) {     return true;   }   for (  KindredSnippets snip : mySnippets) {     Pathway path=snip.getPath();     if (myPath.isPrefix(path)) {       return false;     }   }   return true; } "
"static public void delTree(String dirName,String excludedDirName){   File dir=new File(dirName);   File[] files=dir.listFiles();   if (files != null) {     for (int i=0; i < files.length; i++) {       if (files[i].isFile())       files[i].delete();  else {         if (excludedDirName != null && files[i].getPath().equalsIgnoreCase(dir + File.separator + excludedDirName))         continue;         delTree(files[i].getPath(),excludedDirName);       }     }     dir.delete();   } } "
"public static String slurpGBURLNoExceptions(URL u){   try {     return slurpGBURL(u);   }  catch (  Exception e) {     e.printStackTrace();     return null;   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_A_TO_B(String skilltarget,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200937,skilltarget,skillcaster,skillname); } "
"public CropImageTransform(Random random,int cropTop,int cropLeft,int cropBottom,int cropRight){   super(random);   this.cropTop=cropTop;   this.cropLeft=cropLeft;   this.cropBottom=cropBottom;   this.cropRight=cropRight;   converter=new OpenCVFrameConverter.ToMat(); } "
"@Override protected void checkFeature(String featureId) throws XMLConfigurationException {   if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {     final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();     if (suffixLength == Constants.SCHEMA_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.SCHEMA_VALIDATION_FEATURE)) {       return;     }     if (suffixLength == Constants.SCHEMA_FULL_CHECKING.length() && featureId.endsWith(Constants.SCHEMA_FULL_CHECKING)) {       return;     }     if (suffixLength == Constants.SCHEMA_NORMALIZED_VALUE.length() && featureId.endsWith(Constants.SCHEMA_NORMALIZED_VALUE)) {       return;     }     if (suffixLength == Constants.SCHEMA_ELEMENT_DEFAULT.length() && featureId.endsWith(Constants.SCHEMA_ELEMENT_DEFAULT)) {       return;     }   }   super.checkFeature(featureId); } "
"private void calcAngularBounds(NodeItem r){   if (m_prevRoot == null || !m_prevRoot.isValid() || r == m_prevRoot) {     m_prevRoot=r;     return;   }   NodeItem p=m_prevRoot;   while (true) {     NodeItem pp=(NodeItem)p.getParent();     if (pp == r) {       break;     }  else     if (pp == null) {       m_prevRoot=r;       return;     }     p=pp;   }   double dt=0;   Iterator iter=sortedChildren(r);   while (iter.hasNext()) {     Node n=(Node)iter.next();     if (n == p)     break;     dt+=((Params)n.get(PARAMS)).width;   }   double rw=((Params)r.get(PARAMS)).width;   double pw=((Params)p.get(PARAMS)).width;   dt=-MathLib.TWO_PI * (dt + pw / 2) / rw;   m_theta1=dt + Math.atan2(p.getY() - r.getY(),p.getX() - r.getX());   m_theta2=m_theta1 + MathLib.TWO_PI;   m_prevRoot=r; } "
"public ListQueryBinding(TupleSet ts,String field){   this(ts,field,true); } "
"public PagesGetVersionQuery needHtml(Boolean value){   return unsafeParam(\"need_html\",value); } "
"public LoadObject(int state){   this.state=state; } "
"public Bundler putByte(String key,byte value){   bundle.putByte(key,value);   return this; } "
"public static Double calcMaxDecisions(final long min_impressions,final long max_impressions){   if (min_impressions <= 0) {     throw new IllegalArgumentException(\"Minimum number of unique impressions must be positive.\");   }   if (max_impressions <= 0) {     throw new IllegalArgumentException(\"Maximum number of unique impressions must be positive.\");   }   return log(1.0 * max_impressions / min_impressions); } "
"@Override public Schema schema(){   return schema; } "
"private void init(){   LOGGER.debug(\"Initializing TestBase\");   TestBase.pingSuccess=false; } "
"public UnivariatePointValuePair(final double point,final double value){   this.point=point;   this.value=value; } "
"public void print(PrintWriter output,int w,int d){   DecimalFormat format=new DecimalFormat();   format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));   format.setMinimumIntegerDigits(1);   format.setMaximumFractionDigits(d);   format.setMinimumFractionDigits(d);   format.setGroupingUsed(false);   print(output,format,w + 2); } "
"@Override public Filter createFilter(){   return new CrossesExtended(); } "
"static void verify(Class[] classes) throws InvalidObjectException {   if (classes == null || classes.length == 0) {     throw new InvalidObjectException(\"cannot create constraint with no elements\");   }   for (int i=classes.length; --i >= 0; ) {     Class ci=classes[i];     if (ci == null) {       throw new InvalidObjectException(\"elements cannot be null\");     }     if (ci.isArray() || ci.isPrimitive() || (Modifier.isFinal(ci.getModifiers()) && !Principal.class.isAssignableFrom(ci))) {       throw new InvalidObjectException(\"invalid class\");     }     for (int j=i; --j >= 0; ) {       Class cj=classes[j];       if (ci.isAssignableFrom(cj) || cj.isAssignableFrom(ci)) {         throw new InvalidObjectException(\"cannot create constraint with redundant elements\");       }     }   } } "
"public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){   List<Target> targets=new ArrayList<Target>();   if (segmentsAndBoundaries.size() == 0)   return targets;   Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);   if (!last.getTagName().equals(MaryXML.BOUNDARY)) {     Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);     Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);     Element parent=(Element)token.getParentNode();     parent.appendChild(finalPause);     segmentsAndBoundaries.add(finalPause);   }   for (  Element sOrB : segmentsAndBoundaries) {     String phone=UnitSelector.getPhoneSymbol(sOrB);     targets.add(new HalfPhoneTarget(phone + \"_L\",sOrB,true));     targets.add(new HalfPhoneTarget(phone + \"_R\",sOrB,false));   }   return targets; } "
"public final int yylength(){   return zzMarkedPos - zzStartRead; } "
"public void addln(String line){   this.graph.append(line).append(\"\\n\"); } "
"@Override @Test public void testLongly(){   RealMatrix matrix=createRealMatrix(longleyData,16,7);   KendallsCorrelation corrInstance=new KendallsCorrelation(matrix);   RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();   double[] rData=new double[]{1,0.9166666666666666,0.9333333333333332,0.3666666666666666,0.05,0.8999999999999999,0.8999999999999999,0.9166666666666666,1,0.9833333333333333,0.45,0.03333333333333333,0.9833333333333333,0.9833333333333333,0.9333333333333332,0.9833333333333333,1,0.4333333333333333,0.05,0.9666666666666666,0.9666666666666666,0.3666666666666666,0.45,0.4333333333333333,1,-0.2166666666666666,0.4666666666666666,0.4666666666666666,0.05,0.03333333333333333,0.05,-0.2166666666666666,1,0.05,0.05,0.8999999999999999,0.9833333333333333,0.9666666666666666,0.4666666666666666,0.05,1,0.9999999999999999,0.8999999999999999,0.9833333333333333,0.9666666666666666,0.4666666666666666,0.05,0.9999999999999999,1};   UnitTestUtils.assertEquals(\"Kendall's correlation matrix\",createRealMatrix(rData,7,7),correlationMatrix,10E-15); } "
"private static double doubleHighPart(double d){   if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN) {     return d;   }   long xl=Double.doubleToRawLongBits(d);   xl&=MASK_30BITS;   return Double.longBitsToDouble(xl); } "
"public static boolean isUrl(String url){   Pattern pattern=Pattern.compile(\"^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\\\/])+$\");   return pattern.matcher(url).matches(); } "
"public static byte[] long2buff(long n){   byte[] bs;   bs=new byte[8];   bs[0]=(byte)((n >> 56) & 0xFF);   bs[1]=(byte)((n >> 48) & 0xFF);   bs[2]=(byte)((n >> 40) & 0xFF);   bs[3]=(byte)((n >> 32) & 0xFF);   bs[4]=(byte)((n >> 24) & 0xFF);   bs[5]=(byte)((n >> 16) & 0xFF);   bs[6]=(byte)((n >> 8) & 0xFF);   bs[7]=(byte)(n & 0xFF);   return bs; } "
"public Builder addScanRange(String groupId,String tokenRangeId,ScanRange scanRange){   ImmutableList.Builder<ScanRange> tokenRangeScanRanges=_scanRangesByGroupAndAndTokenRange.get(groupId,tokenRangeId);   if (tokenRangeScanRanges == null) {     tokenRangeScanRanges=ImmutableList.builder();     _scanRangesByGroupAndAndTokenRange.put(groupId,tokenRangeId,tokenRangeScanRanges);   }   tokenRangeScanRanges.add(scanRange);   return this; } "
"protected void processThermostatFanModeReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {   int value=serialMessage.getMessagePayloadByte(offset + 1);   logger.debug(\"NODE {}: Thermostat Fan Mode report value = {}\",this.getNode().getNodeId(),value);   FanModeType fanModeType=FanModeType.getFanModeType(value);   if (fanModeType == null) {     logger.error(\"NODE {}: Unknown Fan Mode Type = {}, ignoring report.\",this.getNode().getNodeId(),value);     return;   }   if (!fanModeTypes.contains(fanModeType)) {     fanModeTypes.add(fanModeType);   }   dynamicDone=true;   logger.debug(\"NODE {}: Thermostat Fan Mode Report value = {}\",this.getNode().getNodeId(),fanModeType.getLabel());   ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);   this.getController().notifyEventListeners(zEvent); } "
"public TLongHash(int initialCapacity,float loadFactor){   super(initialCapacity,loadFactor);   this._hashingStrategy=this; } "
"public void addParameterJacobianProvider(final NamedParameterJacobianProvider provider){   jacobianProviders.add(provider); } "
"private static Number createNumberFromStringValue(String type,String value) throws NumberFormatException {   final String suffix=value.substring(value.length() - 1);   if (\"L\".equalsIgnoreCase(suffix)) {     return Long.valueOf(value.substring(0,value.length() - 1));   }   if (\"F\".equalsIgnoreCase(suffix)) {     return Float.valueOf(value.substring(0,value.length() - 1));   }   if (\"D\".equalsIgnoreCase(suffix)) {     return Double.valueOf(value.substring(0,value.length() - 1));   }   try {     return (Number)newStringConstructor(type,value);   }  catch (  Exception ex) {   }   try {     return Integer.valueOf(value);   }  catch (  NumberFormatException e) {   }   try {     return Long.valueOf(value);   }  catch (  NumberFormatException e1) {   }   try {     return Double.valueOf(value);   }  catch (  NumberFormatException e2) {   }   throw new NumberFormatException(\"Cannot convert string value '\" + value + \"' into a numerical value\"); } "
"public static boolean isFifo(int mod){   return Modifiers.contains(mod,FIFO); } "
"public MathException(){   this.pattern=null;   this.arguments=new Object[0]; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_ME_TO_B(int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200508,num0,skilltarget,skillname); } "
"@Override public void mark(int readlimit){ } "
"public boolean isCellEditable(int row,int col){   return true; } "
"public void listen(@NotNull ObservableValue<?> src,@NotNull InvalidationListener listener){   myListeners.add(new ListenerPairing(src,listener)); } "
"public int hashCode(){   return Constraint.hash(reqs) + Constraint.hash(prefs); } "
"public String[] help() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException { synchronized (lock) {     if (!connected) {       throw new IllegalStateException(\"Client not connected\");     }     if (!authenticated) {       throw new IllegalStateException(\"Client not authenticated\");     }     communication.sendFTPCommand(\"HELP\");     FTPReply r=communication.readFTPReply();     touchAutoNoopTimer();     if (!r.isSuccessCode()) {       throw new FTPException(r);     }     return r.getMessages();   } } "
"public boolean selectComponent(MouseEvent event){   SelectionGraphics<String[]> selectionGraphics=new SelectionGraphics<>(getGraphics());   selectionGraphics.setMouseLocation(event.getPoint());   if (transpose)   drawChartTransposed(selectionGraphics);  else   drawChart(selectionGraphics);   Set<String> seriesToSelect=new HashSet<>();   Set<String> classesToSelect=new HashSet<>();   int count=0;   int size=selectionGraphics.getSelectedItems().size();   for (  String[] pair : selectionGraphics.getSelectedItems()) {     if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.Last && count++ < size - 1)     continue;     if (pair[0] != null) {       seriesToSelect.add(pair[0]);     }     if (pair[1] != null) {       classesToSelect.add(pair[1]);     }     if (selectionGraphics.getUseWhich() == SelectionGraphics.Which.First)     break;   }   if (transpose) {   }  else {     Set<Node> toVisit=new HashSet<>();     for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {       NodeData nodeData=(NodeData)v.getData();       if (classesToSelect.contains(nodeData.getLabel())) {         toVisit.add(v);       }     }     while (toVisit.size() > 0) {       Node v=toVisit.iterator().next();       toVisit.remove(v);       selectRec(v,classesToSelect);     }   }   if (seriesToSelect.size() > 0)   getChartData().getChartSelection().setSelectedSeries(seriesToSelect,true);   if (classesToSelect.size() > 0)   getChartData().getChartSelection().setSelectedClass(classesToSelect,true);   return seriesToSelect.size() > 0 || classesToSelect.size() > 0; } "
"public void reset(){   mGestureDetector.reset();   mPreviousTransform.reset();   mActiveTransform.reset(); } "
"public static boolean canUseSkill(Player player,Skill skill){   for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseSkill.ordinal()]) {     if (!restrictions.canUseSkill(player,skill)) {       return false;     }   }   return true; } "
"public int addFile(File file){   return getFileId(file); } "
"public String toString(){   return \"MbrolaAudioOutput\"; } "
"private static void extractLineSegments(CurveImpl curveImpl,WKTSegmentList ptList){   for (  LineSegment lineSegment : curveImpl.asLineSegments()) {     WKTPoint startPoint=new WKTPoint(lineSegment.getStartPoint());     WKTPoint endPoint=new WKTPoint(lineSegment.getEndPoint());     ptList.addPoint(startPoint);     ptList.addPoint(endPoint);   }   ptList.removeIfFirstLastSame(); } "
"public TrustManagerBuilder withConfig(@NonNull Context ctxt,@XmlRes int resourceId){   return (withConfig(new XmlConfigSource(ctxt,resourceId,false))); } "
"@Override public int available(){   try {     int bytes=ais.available();     return bytes / bytesPerSample;   }  catch (  IOException e) {     return 0;   } } "
"public static int hashWord(String sWord){   int iCnt=0, iRes=0, iLen=sWord.length();   for (iCnt=0; iCnt < iLen; iCnt++)   iRes+=(int)sWord.charAt(iCnt);   return (sWord.length() * 8192 + iRes); } "
"public UTF8Reader(InputStream inputStream,MessageFormatter messageFormatter,Locale locale){   this(inputStream,DEFAULT_BUFFER_SIZE,messageFormatter,locale); } "
"protected boolean isEnabledForCopiedResources(){   return isEnabledForAddedResources(); } "
"public double[] computeDerivatives(final double t,final double[] y) throws MathIllegalArgumentException, MathIllegalStateException, NullPointerException {   evaluations.increment();   return equations.computeDerivatives(t,y); } "
"public int append_file1(String appender_file_id,String local_filename) throws IOException, MyException {   String[] parts=new String[2];   this.errno=this.split_file_id(appender_file_id,parts);   if (this.errno != 0) {     return this.errno;   }   return this.append_file(parts[0],parts[1],local_filename); } "
"public Node findChild(char c){   for (  Node n : children) {     if (n.c == c)     return n;   }   return null; } "
"public static <T extends Bean>Beans<T> load(String table,String where,Object[] args,String orderby,int offset,int limit,Class<T> clazz,Connection c){   TimeStamp t=TimeStamp.create();   StringBuilder sql=new StringBuilder();   sql.append(\"select * from \").append(table);   if (where != null) {     sql.append(\" where \").append(where);   }   if (orderby != null) {     sql.append(\" \").append(orderby);   }   if (limit > 0) {     sql.append(\" limit \").append(limit);   }   if (offset > 0) {     sql.append(\" offset \").append(offset);   }   PreparedStatement p=null;   ResultSet r=null;   try {     if (c == null)     return null;     Beans<T> rs=new Beans<T>();     p=c.prepareStatement(sql.toString());     int order=1;     if (args != null) {       for (int i=0; i < args.length; i++) {         Object o=args[i];         setParameter(p,order++,o);       }     }     r=p.executeQuery();     rs.list=new ArrayList<T>();     while (r.next()) {       T b=clazz.newInstance();       b.load(r);       rs.list.add(b);     }     if (log.isDebugEnabled())     log.debug(\"load - cost=\" + t.past() + \"ms, collection=\"+ table+ \", sql=\"+ sql+ \", result=\"+ rs);     if (t.past() > 10000) {       log.warn(\"load - cost=\" + t.past() + \"ms, collection=\"+ table+ \", sql=\"+ sql+ \", result=\"+ rs);     }     return rs;   }  catch (  Exception e) {     if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);   }  finally {     close(r,p);   }   return null; } "
"public SimpleLiveLocals(UnitGraph graph){   if (Options.v().time())   Timers.v().liveTimer.start();   if (Options.v().verbose())   G.v().out.println(\"[\" + graph.getBody().getMethod().getName() + \"]     Constructing SimpleLiveLocals...\");   analysis=new Analysis(graph);   if (Options.v().time())   Timers.v().liveAnalysisTimer.start();   analysis.doAnalysis();   if (Options.v().time())   Timers.v().liveAnalysisTimer.end();   if (Options.v().time())   Timers.v().liveTimer.end(); } "
"public static void guessSchema(ClusterInfo clusterInfo){   if (clusterInfo.getSchema() != null) {     return;   }   if (clusterInfo.getNumberOfInstances() != null && clusterInfo.getNumberOfInstances() > 1) {     clusterInfo.setSchema(\"partitioned\");   }  else   if (clusterInfo.getNumberOfInstances() != null && clusterInfo.getNumberOfInstances() == 1 && clusterInfo.getNumberOfBackups() != null && clusterInfo.getNumberOfBackups() > 0) {     clusterInfo.setSchema(\"partitioned\");   } } "
"public static String millisecondsToString(long milliseconds){   return millisecondsToString(milliseconds,SIMPLE_DATE_FORMAT); } "
"public void removeItem(int itemObjId){   if (items.containsKey(itemObjId)) {     LinkedHashMap<Integer,TradePSItem> newItems=new LinkedHashMap<Integer,TradePSItem>();     for (    int itemObjIds : items.keySet()) {       if (itemObjId != itemObjIds) {         newItems.put(itemObjIds,items.get(itemObjIds));       }     }     this.items=newItems;   } } "
"public static final void isAttrValueWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,NamedNodeMap attributes,Attr a,String value,boolean xml11Version){   if (a instanceof AttrImpl && ((AttrImpl)a).hasStringValue()) {     isXMLCharWF(errorHandler,error,locator,value,xml11Version);   }  else {     NodeList children=a.getChildNodes();     for (int j=0; j < children.getLength(); j++) {       Node child=children.item(j);       if (child.getNodeType() == Node.ENTITY_REFERENCE_NODE) {         Document owner=a.getOwnerDocument();         Entity ent=null;         if (owner != null) {           DocumentType docType=owner.getDoctype();           if (docType != null) {             NamedNodeMap entities=docType.getEntities();             ent=(Entity)entities.getNamedItemNS(\"*\",child.getNodeName());           }         }         if (ent == null) {           String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"UndeclaredEntRefInAttrValue\",new Object[]{a.getNodeName()});           reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"UndeclaredEntRefInAttrValue\");         }       }  else {         isXMLCharWF(errorHandler,error,locator,child.getNodeValue(),xml11Version);       }     }   } } "
"public static void removeDeletedCharacters(Account account){   Iterator<PlayerAccountData> it=account.iterator();   while (it.hasNext()) {     PlayerAccountData pad=it.next();     Race race=pad.getPlayerCommonData().getRace();     long deletionTime=(long)pad.getDeletionTimeInSeconds() * (long)1000;     if (deletionTime != 0 && deletionTime <= System.currentTimeMillis()) {       it.remove();       account.decrementCountOf(race);       PlayerService.deletePlayerFromDB(pad.getPlayerCommonData().getPlayerObjId());     }   }   if (account.isEmpty()) {     removeAccountWH(account.getId());     account.getAccountWarehouse().clear();   } } "
"public static Style cyan(){   final Style style=new Style();   style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_CYAN);   return style; } "
"Collection<? extends ClientRequestResult> handleDaqXmlRequest(final ClientRequest daqXmlRequest){   Collection<ProcessXmlResponse> singleXML=new ArrayList<ProcessXmlResponse>(1);   ProcessXmlResponseImpl processXmlResponse;   try {     String xmlString=processXMLProvider.getProcessConfigXML(daqXmlRequest.getRequestParameter());     processXmlResponse=new ProcessXmlResponseImpl();     processXmlResponse.setProcessXML(xmlString);   }  catch (  CacheElementNotFoundException cacheEx) {     String errorMessage=\"Error while getting Process configruation:\" + cacheEx.getMessage();     LOG.warn(errorMessage,cacheEx);     processXmlResponse=new ProcessXmlResponseImpl(false,errorMessage);   }   singleXML.add(processXmlResponse);   return singleXML; } "
"public DefaultChunkListDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){   super(hQuery,sessionFactory,fetchSize,chunkSize); } "
"protected DominatorNode<N> fetchDode(N gode){   DominatorNode<N> dode;   if (godeToDode.containsKey(gode)) {     dode=godeToDode.get(gode);   }  else {     dode=new DominatorNode(gode);     godeToDode.put(gode,dode);   }   return dode; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_ME_TO_B(String skillname,String skilltarget){   return new SM_SYSTEM_MESSAGE(1200460,skillname,skilltarget); } "
"public RecordID next(){   return null; } "
"public int keyAt(int index){   if (mGarbage) {     gc();   }   return mKeys[index]; } "
"public INSECTDictionaryDB(){ } "
"public boolean needsRewrite(){   ASTNode$State state=state();   try {     return false;   }   finally {   } } "
"public UserAlreadyExistsException(String message,Throwable cause){   super(message,cause); } "
"public void addSubEquipmentIds(final Collection<Long> subEquipmentIds){   for (  Long subEquipmentId : subEquipmentIds) {     addSubEquipmentId(subEquipmentId);   } } "
"public void increaseValue(TKeyType oXValue,double dYValue){   hDistro.put(oXValue,getValue(oXValue) + dYValue); } "
"public static boolean isToday(Calendar _calendar){   Calendar now=Calendar.getInstance();   if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) {     if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {       if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {         return true;       }     }   }   return false; } "
"public static void growPolygon(float pts[],int len,float amt){   float[] c=centroid(pts,len);   for (int i=0; i < len; i+=2) {     float vx=pts[i] - c[0];     float vy=pts[i + 1] - c[1];     float norm=(float)Math.sqrt(vx * vx + vy * vy);     pts[i]+=amt * vx / norm;     pts[i + 1]+=amt * vy / norm;   } } "
"@Deprecated public static void disableLogging(){   writeLogs(false); } "
"private void onSubEquipmentDown(final Long subEquipmentId,final Timestamp timestamp,final String message){   SubEquipment subEquipmentCopy=subEquipmentCache.getCopy(subEquipmentId);   if (LOGGER.isDebugEnabled()) {     StringBuffer str=new StringBuffer(\"onSubEquipmentDown(\");     str.append(subEquipmentCopy.getName());     str.append(\", \");     str.append(timestamp);     str.append(\", \");     str.append(message);     LOGGER.debug(str.toString());   }   subEquipmentFacade.suspend(subEquipmentId,timestamp,message);   Long stateTagId=subEquipmentCopy.getStateTagId();   if (stateTagId == null) {     LOGGER.error(\"Could not find any state tag for subequipment \" + subEquipmentCopy.getId() + \" - this should never happen.\");   }  else {     try {       controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,timestamp);     }  catch (    CacheElementNotFoundException cacheEx) {       LOGGER.error(\"Could not locate state tag (Id is \" + stateTagId + \") in cache for subequipment \"+ subEquipmentCopy.getId());     }   } } "
"public SM_MAIL_SERVICE(Player player,Letter letter,long time){   super(player);   this.serviceId=3;   this.letter=letter;   this.time=time; } "
"public Builder minZoom(Number minZoom){   this.minZoom=minZoom;   return this; } "
"public static void reduceFieldArray(Object instance,String fieldName,int reduceSize) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {   if (reduceSize <= 0) {     return;   }   Field jlrField=findField(instance,fieldName);   Object[] original=(Object[])jlrField.get(instance);   int finalLength=original.length - reduceSize;   if (finalLength <= 0) {     return;   }   Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),finalLength);   System.arraycopy(original,reduceSize,combined,0,finalLength);   jlrField.set(instance,combined); } "
"public boolean isCritical(){   return true; } "
"public boolean isEmpty(){ synchronized (contexts) {     return contexts.isEmpty();   } } "
"public NativeImageLoader(int height,int width,int channels,ImageTransform imageTransform){   this(height,width,channels);   this.imageTransform=imageTransform;   this.converter=new OpenCVFrameConverter.ToMat(); } "
"public AxisLayout(String group,String field,int axis,Predicate filter){   this(group,field,axis);   setFilter(filter); } "
"public void pushResourceBundle(ResourceBundle topResourceBundle){   this.rbmwStack.push(new InternalRbmWrapper(topResourceBundle)); } "
"public SiteAdminGrid activatePage(String title){   selectPageByTitle(title);   activateSelectedPage();   return this; } "
"public static boolean isGTKLookAndFeel(){   return UIUtils.isGTKLookAndFeel(); } "
"public final void debug(final Object o,final Throwable t){   log(Level.DEBUG,o,t); } "
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){   int width=resolveSize(mDesiredWidth,widthMeasureSpec);   int height;   if (width == mDesiredWidth) {     height=mDesiredHeight;   }  else {     height=Math.round((float)mDesiredHeight / mDesiredWidth * width);     height=resolveSize(height,heightMeasureSpec);   }   super.onMeasure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY)); } "
"public void addCoreEquipmentConfigurationChanger(final long equipmentId,final ICoreEquipmentConfigurationChanger coreEquipmentConfigurationChanger){   List<ICoreEquipmentConfigurationChanger> changers=coreEquipmentConfigurationChangers.get(equipmentId);   if (changers == null) {     changers=new ArrayList<>();     coreEquipmentConfigurationChangers.put(equipmentId,changers);   }   changers.add(coreEquipmentConfigurationChanger); } "
"protected PlacesGetByIdQuery places(List<Integer> value){   return unsafeParam(\"places\",value); } "
"@NonNull private Intent createEmailIntent(@Nullable String[] to,@Nullable String subject,@Nullable String text,@Nullable ArrayList<Uri> attachments){   Intent intent=new Intent();   intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);   intent.setAction(Intent.ACTION_SEND);   intent.setType(\"plain/text\");   intent.putExtra(Intent.EXTRA_EMAIL,to);   intent.putExtra(Intent.EXTRA_SUBJECT,subject);   intent.putExtra(Intent.EXTRA_TEXT,text);   if (attachments != null) {     if (attachments.size() == 1) {       intent.putExtra(Intent.EXTRA_STREAM,attachments.get(0));     }  else {       intent.setAction(Intent.ACTION_SEND_MULTIPLE);       intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,attachments);     }   }   return intent; } "
"static boolean isOutsideResourceTypeFolder(@NotNull DataContext context){   VirtualFile file=CommonDataKeys.VIRTUAL_FILE.getData(context);   if (file != null) {     if (!file.isDirectory()) {       file=file.getParent();     }     if (file != null && ResourceFolderType.getFolderType(file.getName()) != null) {       return false;     }   }   Module module=LangDataKeys.MODULE.getData(context);   if (module != null) {     return AndroidFacet.getInstance(module) != null;   }   PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(context);   return element != null && AndroidFacet.getInstance(element) != null; } "
"public static final void drawRectangle(GL2 gl,Rectangle r,boolean points){   RenderUtilities.drawPolygon(gl,r.getVertices(),points); } "
"@Override public boolean retainAll(Collection<?> c){   return backedSet.retainAll(c); } "
"public DateTimeUnit toUtc(){   return DateTimeUnit.fromJodaDateTime(toJodaDateTime().toDateTime(DateTimeZone.UTC),true); } "
"private boolean gzipped(String contentEncoding){   return contentEncoding != null && contentEncoding.toLowerCase().contains(\"gzip\"); } "
"public Criteria createCriteria(){   Criteria criteria=createCriteriaInternal();   if (oredCriteria.size() == 0) {     oredCriteria.add(criteria);   }   return criteria; } "
"@Override public boolean contains(byte item){   for (int i=0; i < data.length; ++i) {     if (data[i] == item) {       return true;     }   }   return false; } "
"boolean result(String feature){   ViterbiPath path;   if (timeline == null || timeline.next == null) {     return true;   }   path=findBestPath();   if (path == null) {     return false;   }   for (; path != null; path=path.from) {     if (path.candidate != null) {       path.candidate.item.getFeatures().setObject(feature,path.candidate.value);     }   }   return true; } "
"public ZWaveThermostatFanStateCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"public void testBoundaryEventSubscriptionDeletedOnDeploymentDelete(){   String deploymentId=deployBoundarySignalTestProcess();   runtimeService.startProcessInstanceByKey(\"signalTest\");   assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());   String deploymentId2=deployBoundarySignalTestProcess();   runtimeService.startProcessInstanceByKey(\"signalTest\");   assertEquals(2,taskService.createTaskQuery().count());   assertEquals(2,getAllEventSubscriptions().size());   repositoryService.deleteDeployment(deploymentId,true);   assertEquals(\"My Task\",taskService.createTaskQuery().singleResult().getName());   assertEquals(1,getAllEventSubscriptions().size());   repositoryService.deleteDeployment(deploymentId2,true);   assertEquals(0,getAllEventSubscriptions().size()); } "
"public synchronized void stop(){   this.stopped=true; } "
"@Override protected final boolean processData(ByteBuffer data){   try {     if (!crypt.decrypt(data)) {       nbInvalidPackets++;       log.info(\"[\" + nbInvalidPackets + \"/\"+ MAX_INVALID_PACKETS+ \"] Decrypt fail, client packet passed...\");       if (nbInvalidPackets >= MAX_INVALID_PACKETS) {         log.warn(\"Decrypt fail!\");         return false;       }       return true;     }   }  catch (  Exception ex) {     log.error(\"Exception caught during decrypt!\" + ex.getMessage());     return false;   }   if (data.remaining() < 5) {     log.error(\"Received fake packet from: \" + this);     return false;   }   AionClientPacket pck=aionPacketHandler.handle(data,this);   if (pck != null) {     if (SecurityConfig.PFF_ENABLE) {       int opcode=pck.getOpcode();       if (pff.length > opcode) {         if (pff[opcode] > 0) {           long last=this.pffRequests[opcode];           if (last == 0) {             this.pffRequests[opcode]=System.currentTimeMillis();           }  else {             long diff=System.currentTimeMillis() - last;             if (diff < pff[opcode]) {               log.warn(this + \" has flooding \" + pck.getClass().getSimpleName()+ \" \"+ diff); switch (SecurityConfig.PFF_LEVEL) { case 1:                 return false; case 2:               break;           }         }  else {           this.pffRequests[opcode]=System.currentTimeMillis();         }       }     }   } } PacketLoggerService.getInstance().logPacketCM(pck.getPacketName()); if (pck.read()) {   packetProcessor.executePacket(pck); } } return true; } "
"public XSModelImpl(SchemaGrammar[] grammars){   this(grammars,Constants.SCHEMA_VERSION_1_0); } "
"public AemPathWindow clickOk(){   okButton.click();   return this; } "
"public void addColumnListener(ColumnListener listener){   return; } "
"@Deployment public void testDeleteTaskWithChildren() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"testBatchDeleteOfTask\");   assertNotNull(processInstance);   assertFalse(processInstance.isEnded());   Task firstTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).taskDefinitionKey(\"taskOne\").singleResult();   assertNotNull(firstTask);   taskService.complete(firstTask.getId());   processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();   assertNull(processInstance); } "
"public GroupsUnbanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){   super(client,\"groups.unbanUser\",OkResponse.class);   accessToken(actor.getAccessToken());   groupId(groupId);   userId(userId); } "
"public static SinkRecord spoofSinkRecord(String topic,String field,String value){   Schema basicRowSchema=SchemaBuilder.struct().field(field,Schema.STRING_SCHEMA).build();   Struct basicRowValue=new Struct(basicRowSchema);   basicRowValue.put(field,value);   return spoofSinkRecord(topic,basicRowSchema,basicRowValue); } "
"public NativeImageLoader(int height,int width){   this.height=height;   this.width=width; } "
"public CreateSimpleLexer langHandlerForExtension(String extension,String source){   if (!(extension != null && langHandlerRegistry.get(extension) != null)) {     extension=Util.test(Pattern.compile(\"^\\\\s*<\"),source) ? \"default-markup\" : \"default-code\";   }   Object handler=langHandlerRegistry.get(extension);   if (handler instanceof CreateSimpleLexer) {     return (CreateSimpleLexer)handler;   }  else {     CreateSimpleLexer _simpleLexer;     try {       Lang _lang=((Class<Lang>)handler).newInstance();       _simpleLexer=new CreateSimpleLexer(_lang.getShortcutStylePatterns(),_lang.getFallthroughStylePatterns());       List<Lang> extendedLangs=_lang.getExtendedLangs();       for (      Lang _extendedLang : extendedLangs) {         register(_extendedLang.getClass());       }       List<String> fileExtensions=getFileExtensionsFromClass((Class<Lang>)handler);       for (      String _extension : fileExtensions) {         langHandlerRegistry.put(_extension,_simpleLexer);       }     }  catch (    Exception ex) {       LOG.log(Level.SEVERE,null,ex);       return null;     }     return _simpleLexer;   } } "
"public static float ceil(float fValue){   return (float)Math.ceil(fValue); } "
"public static final Object[] resize(Object[] a,int size){   if (a.length >= size)   return a;   Object[] b=new Object[size];   System.arraycopy(a,0,b,0,a.length);   return b; } "
"protected final void mergeNodes(PurityNode src,PurityNode dst){   Iterator it=(new LinkedList(edges.get(src))).iterator();   while (it.hasNext()) {     PurityEdge e=(PurityEdge)it.next();     PurityNode n=e.getTarget();     if (n.equals(src))     n=dst;     PurityEdge ee=cacheEdge(new PurityEdge(dst,e.getField(),n,e.isInside()));     edges.remove(src,e);     edges.put(dst,ee);     backEdges.remove(n,e);     backEdges.put(n,ee);   }   it=(new LinkedList(backEdges.get(src))).iterator();   while (it.hasNext()) {     PurityEdge e=(PurityEdge)it.next();     PurityNode n=e.getSource();     if (n.equals(src))     n=dst;     PurityEdge ee=cacheEdge(new PurityEdge(n,e.getField(),dst,e.isInside()));     edges.remove(n,e);     edges.put(n,ee);     backEdges.remove(src,e);     backEdges.put(dst,ee);   }   it=(new LinkedList(backLocals.get(src))).iterator();   while (it.hasNext()) {     Local l=(Local)it.next();     locals.remove(l,src);     backLocals.remove(src,l);     locals.put(l,dst);     backLocals.put(dst,l);   } {     Set m=mutated.get(src);     mutated.remove(src);     mutated.putAll(dst,m);   }   if (ret.contains(src)) {     ret.remove(src);     ret.add(dst);   }   if (globEscape.contains(src)) {     globEscape.remove(src);     globEscape.add(dst);   }   nodes.remove(src);   nodes.add(dst);   paramNodes.remove(src);   if (dst.isParam())   paramNodes.add(dst); } "
"private void initView(){   this.container=(CoordinatorLayout)findViewById(R.id.activity_preview_photo_container);   PhotoView photoView=(PhotoView)findViewById(R.id.activity_preview_photo_photoView);   photoView.setMaxScale(calcMaxScale());   photoView.enable();   photoView.setOnClickListener(this);   Glide.with(this).load(photo.urls.regular).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(photoView);   this.widgetContainer=(LinearLayout)findViewById(R.id.activity_preview_photo_widgetContainer);   this.iconContainer=(LinearLayout)findViewById(R.id.activity_preview_photo_iconContainer); } "
"protected List<ZWaveEvent> processCommandClassMessage(byte[] packetData){   return processCommandClassMessage(packetData,1); } "
"public long renew(String entryUid,String className,int objectType,long duration,boolean fromReplication,boolean origin,boolean isFromGateway) throws UnknownLeaseException, InternalSpaceException {   try {     extendLeasePeriod(entryUid,className,objectType,duration,fromReplication,origin,false,null,isFromGateway);   }  catch (  UnknownLeaseException unknownLeaseException) {     if (_cacheManager.isCacheExternalDB() && objectType != ObjectTypes.NOTIFY_NULL_TEMPLATE && objectType != ObjectTypes.NOTIFY_TEMPLATE) {       if (_logger.isLoggable(Level.FINE)) {         _logger.log(Level.FINE,\"Failed to renew lease of an entry belonging to external-data-source.\",unknownLeaseException);       }     }  else     throw unknownLeaseException;   }   return duration; } "
"protected void configAndStartMediaPlayer(){   if (mPlayer == null) {     throw new IllegalStateException(\"mPlayer is NULL\");   }   if (mAudioFocus == AudioFocus.NO_FOCUS) {     if (mPlayer.isPlaying()) {       mPlayer.pause();     }   }  else {     if (mAudioFocus == AudioFocus.NO_FOCUS_CAN_DUCK) {       mPlayer.setVolume(DUCK_VOLUME,DUCK_VOLUME);     }  else {       mPlayer.setVolume(1.0f,1.0f);     }     if (!mPlayer.isPlaying()) {       mPlayer.start();     }   } } "
"private void sendAfterTextChanged(Editable s){   if (mListeners != null) {     for (int i=0; i < mListeners.size(); i++) {       mListeners.get(i).afterTextChanged(s);     }   } } "
"public Boolean isAutoStart(){   return autoStart; } "
"public Counter(int startValue){   start=startValue;   value=startValue; } "
"public int generateNextWord(Vector vCurrentText){   int iTopic=Model.generateNextLeafTopic();   Distribution dWordsAtSelectedTopic;   if (hmDistroPerTopic.containsKey(iTopic)) {     dWordsAtSelectedTopic=hmDistroPerTopic.get(iTopic);   }  else {     dWordsAtSelectedTopic=Model.getTopicTermDistro(Model.getNumOfLevels(),iTopic);     hmDistroPerTopic.put(iTopic,dWordsAtSelectedTopic);   }   Distribution dOutputDistro=new Distribution();   Iterator iWords=dWordsAtSelectedTopic.asTreeMap().keySet().iterator();   while (iWords.hasNext()) {     Object oWord=iWords.next();     vCurrentText.add(oWord);     double dGram=Evaluator.getGrammaticallity(vCurrentText);     vCurrentText.remove(vCurrentText.size() - 1);     if (dGram != 0)     dOutputDistro.setValue(oWord,dWordsAtSelectedTopic.getValue(oWord) * dGram);   }   if (dOutputDistro.asTreeMap().size() == 0)   return ((Integer)dWordsAtSelectedTopic.getNextResult()).intValue();   return ((Integer)dOutputDistro.getNextResult()).intValue(); } "
"public void clearMemoryCache(){   checkConfiguration();   configuration.memoryCache.clear(); } "
"public VideoGetAlbumsQueryWithExtended ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"public static void load(){   try {     if (mary2freettsVoices == null) {       Log.i(Mary.LOG,\"Loading US English FreeTTS voices...\");       Collection maryVoices=marytts.modules.synthesis.Voice.getAvailableVoices(Locale.US);       Iterator it=maryVoices.iterator();       while (it.hasNext()) {         marytts.modules.synthesis.Voice maryVoice=(marytts.modules.synthesis.Voice)it.next();         Log.d(Mary.LOG,\"FROM load()\");         load(maryVoice);       }       Log.i(Mary.LOG,\"voice load done.\");     }   }  catch (  Throwable t) {     Log.d(Mary.LOG,\"load error : \" + t);   } } "
"@deprecated public RuleBasedBreakIterator(){ } "
"public static boolean isLowSurrogate(int c){   return (0xDC00 <= c && c <= 0xDFFF); } "
"public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){   float d;   if (tag != cp.tag)   return tag - cp.tag;   CONSTANT_Float_info cu=(CONSTANT_Float_info)cp;   d=convert() - cu.convert();   return ((d > 0.0) ? 1 : ((d < 0.0) ? -1 : 0)); } "
"public static void shuffle(int[] a,int lo,int hi){   if (a == null)   throw new NullPointerException(\"argument array is null\");   if (lo < 0 || lo > hi || hi >= a.length) {     throw new IndexOutOfBoundsException(\"Illegal subarray range\");   }   for (int i=lo; i <= hi; i++) {     int r=i + uniform(hi - i + 1);     int temp=a[i];     a[i]=a[r];     a[r]=temp;   } } "
"private void compareTables(Table sortedTable,Table compareWith){   assertEquals(\"both tables have the same number of rows\",sortedTable.rowCount(),compareWith.rowCount());   int maxRows=sortedTable.rowCount();   int numberOfColumns=sortedTable.columnCount();   for (int rowIndex=0; rowIndex < maxRows; rowIndex++) {     for (int columnIndex=0; columnIndex < numberOfColumns; columnIndex++) {       assertEquals(\"cells[\" + rowIndex + \", \"+ columnIndex+ \"]  match\",sortedTable.get(rowIndex,columnIndex),compareWith.get(rowIndex,columnIndex));     }   } } "
"private Date addTimezoneOffsetToDate(Date date){   DatePair hourAndMinuteOffset=DateConverter.getCurrentTimeZoneOffset();   Calendar calendar=Calendar.getInstance();   calendar.setTime(date);   calendar.add(Calendar.HOUR,hourAndMinuteOffset.getHour());   calendar.add(Calendar.MINUTE,hourAndMinuteOffset.getMinute());   return calendar.getTime(); } "
"@Override public WebElement findElementByPartialLinkText(String partialLinkText){   return ((FindsByLinkText)super.getWrappedDriver()).findElementByPartialLinkText(partialLinkText); } "
"public static String readFully(Reader reader) throws IOException {   try {     StringWriter writer=new StringWriter();     char[] buffer=new char[1024];     int count;     while ((count=reader.read(buffer)) != -1) {       writer.write(buffer,0,count);     }     return writer.toString();   }   finally {     reader.close();   } } "
"public static void assertContains(double[] values,double x,double epsilon){   assertContains(null,values,x,epsilon); } "
"@Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){   this.vendorOptionOptionsList=vendorOptionVersionsList;   updateVendorOptionPanels(); } "
"public void insertASObject(ASObject asobject){   String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NOT_SUPPORTED_ERR\",null);   throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg); } "
"public void copyDeploymentValuesToDecisionTables(DmnDeploymentEntity deployment,List<DecisionTableEntity> decisionTables){   String tenantId=deployment.getTenantId();   String deploymentId=deployment.getId();   for (  DecisionTableEntity decisionTable : decisionTables) {     if (tenantId != null) {       decisionTable.setTenantId(tenantId);     }     decisionTable.setDeploymentId(deploymentId);   } } "
"@deprecated public boolean isFrozen(){   return this._frozen; } "
"static void registerLintRuleNames(HttpConfigAspect aspect){   aspect.registerLintRuleName(REST_STYLE_RULE_NAME,METHOD_SHADOWED_RULE_NAME); } "
"protected PollsEditQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"public Builder markerZoomAnimation(Boolean markerZoomAnimation){   this.markerZoomAnimation=markerZoomAnimation;   return this; } "
"public Set<String> pullingUpdatedConfigs(Map<String,String> configItemMaps,int readTimeout){   Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);   params.put(\"configs\",JsonUtil.INSTANCE.toJson(configItemMaps));   return doPost(ClientUris.CONFIG_PULLING,headers,params,readTimeout,Set.class); } "
"static <T>T checkNotNull(T reference){   if (reference == null) {     throw new NullPointerException();   }   return reference; } "
"public static SM_SYSTEM_MESSAGE STR_ABYSS_CASTLE_TAKEN(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1301046,value0,value1); } "
"private void checkPopulateComplete(GeoServerConnection connection){   PopulateState state=populateStateMap.get(connection);   if (state != null) {     if (state.isComplete()) {       GeoServerNode geoServerNode=nodeMap.get(connection);       if (geoServerNode != null) {         removeNode(geoServerNode,PROGRESS_NODE_TITLE);         populateStyles(connection,geoServerNode);         populateLayers(connection,geoServerNode);         if (treeModel != null) {           treeModel.reload(geoServerNode);         }       }       parseComplete.populateComplete(connection,geoServerStyleMap.get(connection),geoServerLayerMap.get(connection));     }   } } "
"@Override public boolean isSelected(T photo){   return selectedPhotos.contains(photo); } "
"@Override public Fraction subtract(Fraction fraction){   return addSub(fraction,false); } "
"public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue){   return addColumnDouble(name,minAllowedValue,maxAllowedValue,false,false); } "
"public void addRegexList(final Collection<String> regexList){   if (regexList != null) {     this.regexList.addAll(regexList);   } } "
"private void pruneIfNeeded(int neededSpace){   if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {     return;   }   long before=mTotalSize;   int prunedFiles=0;   Iterator<Map.Entry<String,CacheHeader>> iterator=mDataEntries.entrySet().iterator();   while (iterator.hasNext()) {     Map.Entry<String,CacheHeader> entry=iterator.next();     CacheHeader e=entry.getValue();     mTotalSize-=e.data.length;     iterator.remove();     ++prunedFiles;     if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {       break;     }   } } "
"public boolean isCurrentSet(){   return currentIterator != null && currentId != null; } "
"public static void write(File file,CharSequence data) throws IOException {   write(file,data,Charset.defaultCharset(),false); } "
"@After public void tearDown() throws Exception {   dictionaryChunksWrapper=null;   expectedData=null;   dictionaryChuncks=null; } "
"public String toString(){   return \"PartOfSpeechTagger\"; } "
"public static int compareTo(double x,double y,double eps){   if (equals(x,y,eps)) {     return 0;   }  else   if (x < y) {     return -1;   }   return 1; } "
"public double distance(final Vector2D p){   return FastMath.abs(getOffset(p)); } "
"public static void buildAchievementStats(JsonObject json,EntityPlayerMP player){   StatFileWriter sfw=player.getStatFile();   json.addProperty(\"DistanceTravelled\",sfw.readStat((StatBase)StatList.distanceWalkedStat) + sfw.readStat((StatBase)StatList.distanceSwumStat) + sfw.readStat((StatBase)StatList.distanceDoveStat)+ sfw.readStat((StatBase)StatList.distanceFallenStat));   json.addProperty(\"TimeAlive\",sfw.readStat((StatBase)StatList.timeSinceDeathStat));   json.addProperty(\"MobsKilled\",sfw.readStat((StatBase)StatList.mobKillsStat));   json.addProperty(\"DamageTaken\",sfw.readStat((StatBase)StatList.damageTakenStat)); } "
"static Object popRequestStack(String name,HttpServletRequest request,Map<String,Object> context,Environment env) throws TemplateModelException {   return readRequestStack(name,true,request,context,env); } "
"public static double quantile(double val,double[] quantiles){   int x1=1;   int x2=quantiles.length;   int i=x2 / 2;   while (x1 < x2) {     if (quantiles[i] == val) {       break;     }  else     if (quantiles[i] < val) {       x1=i + 1;     }  else {       x2=i;     }     i=x1 + (x2 - x1) / 2;   }   return ((double)i) / (quantiles.length - 1); } "
"private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){   if (horizontal) {     for (int x=a; x <= b; x++) {       if (image.get(x,fixed)) {         return true;       }     }   }  else {     for (int y=a; y <= b; y++) {       if (image.get(fixed,y)) {         return true;       }     }   }   return false; } "
"private static boolean permissionExists(String permission){   Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);   return minVersion == null || Build.VERSION.SDK_INT >= minVersion; } "
"boolean insert(BinarySearchTreeNode<E> item){   if (this.root == null) {     this.root=item;     this.size++;     return true;   }  else {     return this.insert(item,this.root);   } } "
"public boolean isSelected(){   ClusterViewer viewer=getViewer();   return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsEllipses(); } "
"protected static double kernelLength2bandwidth(int kernelLength){   return (double)4 / kernelLength; } "
"public MarketAddAlbumQuery mainAlbum(Boolean value){   return unsafeParam(\"main_album\",value); } "
"public AppsGetScoreQuery(VkApiClient client,UserActor actor,int userId){   super(client,\"apps.getScore\",Integer.class);   accessToken(actor.getAccessToken());   userId(userId); } "
"@Deprecated public FortSearchResponse searchFort(FortData fortData) throws LoginFailedException, RemoteServerException {   FortSearchMessage reqMsg=FortSearchMessage.newBuilder().setFortId(fortData.getId()).setFortLatitude(fortData.getLatitude()).setFortLongitude(fortData.getLongitude()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).build();   ServerRequest serverRequest=new ServerRequest(RequestType.FORT_SEARCH,reqMsg);   api.getRequestHandler().sendServerRequests(serverRequest);   FortSearchResponse response;   try {     response=FortSearchResponse.parseFrom(serverRequest.getData());   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException(e);   }   return response; } "
"public static boolean isGpsEnabled(Context context){   LocationManager lm=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);   return lm.isProviderEnabled(LocationManager.GPS_PROVIDER); } "
"public static void main(String[] args){   EnvVarDlg dlg=new EnvVarDlg(EnvironmentVariableManager.getInstance());   dlg.showDialog(); } "
"public Observable<Object> toMainThreadObserverable(LifecycleTransformer lifecycleTransformer){   return _bus.observeOn(AndroidSchedulers.mainThread()).compose(lifecycleTransformer); } "
"public EntityQuery filterByDate(Timestamp moment,String... filterByFieldName){   this.filterByDate=true;   this.filterByDateMoment=moment;   if (filterByFieldName.length % 2 != 0) {     throw new IllegalArgumentException(\"You must pass an even sized array to this method, each pair should represent a from date field name and a thru date field name\");   }   this.filterByFieldNames=Arrays.asList(filterByFieldName);   return this; } "
"public static String prettyPrintNagDuration(Context context,long since,long to){   int fullMinutes=(int)((to - since) / android.text.format.DateUtils.MINUTE_IN_MILLIS);   if (fullMinutes < 60) {     return context.getResources().getQuantityString(R.plurals.notification_nag_duration_minutes,fullMinutes,fullMinutes);   }  else {     int hours=fullMinutes % 60;     int minutes=fullMinutes / 60;     if (minutes == 0) {       return context.getResources().getQuantityString(R.plurals.notification_nag_duration_hours,hours,hours);     }  else {       return context.getString(R.string.notification_nag_duration_hours_minutes,hours,minutes);     }   } } "
"public Webster() throws BindException {   this.port=Integer.getInteger(WEBSTER_PORT,0);   initialize(); } "
"public AccessDeniedException(String message,Throwable cause){   super(message,cause); } "
"static void verify(Principal[] principals) throws InvalidObjectException {   if (principals == null || principals.length == 0) {     throw new InvalidObjectException(\"cannot create constraint with no elements\");   }   for (int i=principals.length; --i >= 0; ) {     Principal p=principals[i];     if (p == null) {       throw new InvalidObjectException(\"elements cannot be null\");     }     if (contains(principals,i,p)) {       throw new InvalidObjectException(\"cannot create constraint with duplicate elements\");     }   } } "
"public boolean isApplicable(){   InspectorWindow inspectorWindow=(InspectorWindow)getViewer();   return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0; } "
"public void writeThrift(TBase indexObject) throws IOException {   thriftWriter.write(indexObject); } "
"public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){   inactivityTimer.onActivity();   lastResult=rawResult;   ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);   boolean fromLiveScan=barcode != null;   if (fromLiveScan) {     historyManager.addHistoryItem(rawResult,resultHandler);     beepManager.playBeepSoundAndVibrate();     drawResultPoints(barcode,scaleFactor,rawResult);   } switch (source) { case NATIVE_APP_INTENT: case PRODUCT_SEARCH_LINK:     handleDecodeExternally(rawResult,resultHandler,barcode);   break; case ZXING_LINK: if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {   handleDecodeInternally(rawResult,resultHandler,barcode); }  else {   handleDecodeExternally(rawResult,resultHandler,barcode); } break; case NONE: SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this); if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) { Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + \" (\" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show(); restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS); }  else { handleDecodeInternally(rawResult,resultHandler,barcode); } break; } } "
"public static String createRGBString(Color c){   return \"rgb(\" + (c.getRed() * 255) + \",\"+ (c.getGreen() * 255)+ \",\"+ (c.getBlue() * 255)+ \");\"; } "
"public int diff_commonSuffix(String text1,String text2){   int text1_length=text1.length();   int text2_length=text2.length();   int n=Math.min(text1_length,text2_length);   for (int i=1; i <= n; i++) {     if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {       return i - 1;     }   }   return n; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_DODGE(String value0){   return new SM_SYSTEM_MESSAGE(1210226,value0); } "
"public Pair<String,String> next(){   currentHeaderPosition=nextHeaderPosition;   Pair<String,String> result=new Pair<>(nextHeader,nextSequence);   nextHeader=nextNextHeader;   nextHeaderPosition=nextNextHeaderPosition;   nextSequence=null;   nextNextHeader=null;   if (nextHeader != null) {     String aLine;     try {       while ((aLine=r.readLine()) != null) {         if (aLine.startsWith(\">\")) {           nextNextHeader=aLine;           nextNextHeaderPosition=position;           position+=aLine.length() + endOfLineBytes;           break;         }  else {           position+=aLine.length() + endOfLineBytes;           parts.add(aLine);         }       }       numberOfSequencesRead++;     }  catch (    IOException e) {       Basic.caught(e);     }     nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);     parts.clear();   }  else   try {     close();   }  catch (  IOException ex) {     Basic.caught(ex);   }   return result; } "
"private static String separeMetaTagsContent(String content){   String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);   return htmlDecode(result); } "
"public static Optional<String[]> lookup(long code){   String[] desc=DESCRIPTIONS.get(code & 0xFFFF0000);   return Optional.ofNullable(desc); } "
"private AuthenticationPermission(Data data,String actions){   super(data.name);   this.me=data.me;   this.peer=data.peer;   this.actions=actions;   parseActions(); } "
"public static int apply(Document doc,ViewerBase viewer,String method,Distances distances,boolean normalize) throws IOException {   System.err.println(\"Computing \" + method + \" distances\");   Vector<Double[]> input=new Vector<>();   double[] total=new double[doc.getNumberOfSamples()];   int countNodesUsed=0;   HashSet<Integer> seen=new HashSet<>();   for (Node v=viewer.getGraph().getFirstNode(); v != null; v=v.getNext()) {     Integer id=(Integer)v.getInfo();     if (viewer.getSelected(v)) {       if (!seen.contains(id)) {         seen.add(id);         countNodesUsed++;         final int[] counts=(v.getOutDegree() == 0 ? viewer.getNodeData(v).getSummarized() : viewer.getNodeData(v).getAssigned());         final Double[] numbers=new Double[counts.length];         for (int i=0; i < counts.length; i++) {           numbers[i]=(double)counts[i];           total[i]+=numbers[i];         }         input.addElement(numbers);       }     }   }   if (normalize) {     for (    Double[] numbers : input) {       for (int i=0; i < numbers.length; i++) {         if (total[i] > 0) {           numbers[i]/=total[i];         }       }     }   }   System.err.println(\"Nodes used: \" + seen.size());   Vector<Vector<Double>> upperTriangle;   if (method.equalsIgnoreCase(GOODALL)) {     upperTriangle=EcologicalIndices.getGoodallsDistance(input,false);   }  else   if (method.equalsIgnoreCase(GOODALL_NORMALIZED)) {     upperTriangle=EcologicalIndices.getGoodallsDistance(input,true);   }  else   if (method.equalsIgnoreCase(CHISSQUARE)) {     upperTriangle=EcologicalIndices.getChiSquareDistance(input);   }  else   if (method.equalsIgnoreCase(KULCZYNSKI)) {     upperTriangle=EcologicalIndices.getKulczynskiDistance(input);   }  else   if (method.equalsIgnoreCase(BRAYCURTIS)) {     upperTriangle=EcologicalIndices.getBrayCurtisDistance(input);   }  else   if (method.equalsIgnoreCase(HELLINGER)) {     upperTriangle=EcologicalIndices.getHellingerDistance(input);   }  else   if (method.equalsIgnoreCase(EUCLIDEAN)) {     upperTriangle=EcologicalIndices.getEuclidDistance(input,false);   }  else   if (method.equalsIgnoreCase(EUCLIDEAN_NORMALIZED)) {     upperTriangle=EcologicalIndices.getEuclidDistance(input,true);   }  else   throw new IOException(\"Unknown distance: \" + method);   distances.setFromUpperTriangle(upperTriangle);   return countNodesUsed; } "
"private static boolean equalAsInts(Vec2d a,Vec2d b){   return ((int)a.x) == ((int)b.x) && ((int)a.y) == ((int)b.y); } "
"public final String toString(){   StringBuffer str=new StringBuffer();   str.append(getTagId());   str.append('\\t');   str.append(getTagName());   str.append('\\t');   if (getTagValue() != null) {     str.append(getTagValue());   }  else {     str.append(\"null\");   }   str.append('\\t');   str.append(getTagValueDesc());   str.append('\\t');   str.append(getTagDataType());   str.append('\\t');   str.append(getSourceTimestamp());   str.append('\\t');   str.append(getDaqTimestamp());   str.append('\\t');   str.append(getServerTimestamp());   str.append('\\t');   str.append(getTagQualityCode());   str.append('\\t');   if ((getTagQualityDesc() != null) && (getTagQualityDesc().equals(\"\"))) {     str.append(\"null\");   }  else {     str.append(getTagQualityDesc());   }   str.append('\\t');   str.append(getTagMode());   str.append('\\t');   str.append(getTagDir());   str.append('\\t');   str.append(new Timestamp(System.currentTimeMillis()));   return str.toString(); } "
"protected LinkedHashMap<Dimension,LinkedHashSet<DimensionField>> generateDimensionFields(@NotNull List<PathSegment> apiDimensionPathSegments,@NotNull DimensionDictionary dimensionDictionary){   return apiDimensionPathSegments.stream().filter(null).collect(Collectors.toMap(null,null,null,null)); } "
"public int installSilent(Context context,String filePath){   return installSilent(context,filePath,\" -r \" + getInstallLocationParams()); } "
"@Override protected final void synchronizeChildren(){   DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();   ownerDocument.synchronizeChildren(this,fNodeIndex); } "
"@Override public String toString(){   if (nans != FINITE) {     if (nans == INFINITE) {       return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;     }  else {       return NAN_STRING;     }   }   if (exp > mant.length || exp < -1) {     return dfp2sci();   }   return dfp2string(); } "
"public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_TO_YOU(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1300391,value0,value1); } "
"public static boolean expressionHasErrors(String expression){   final JEP parser=getJep();   parser.parseExpression(expression);   return parser.hasError(); } "
"public static boolean isExternalStorageWritable(){   return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()); } "
"void dumpBinary(DataOutputStream os) throws IOException {   os.writeInt(type);   os.writeInt(phone);   os.writeInt(start);   os.writeInt(end);   os.writeInt(prev);   os.writeInt(next); } "
"public String toStringValues(FeatureVector features){   StringBuilder buf=new StringBuilder();   byte[] bytes=features.getByteValuedDiscreteFeatures();   short[] shorts=features.getShortValuedDiscreteFeatures();   float[] floats=features.getContinuousFeatures();   if (bytes.length != byteValuedDiscreteFeatureProcessors.length || shorts.length != shortValuedDiscreteFeatureProcessors.length || floats.length != continuousFeatureProcessors.length) {     throw new IllegalArgumentException(\"Number of features in argument does not match number of feature processors\");   }   for (int i=0; i < bytes.length; i++) {     if (buf.length() > 0)     buf.append(\" \");     buf.append(byteValuedDiscreteFeatureProcessors[i].getValues()[bytes[i] & 0xff]);   }   for (int i=0; i < shorts.length; i++) {     if (buf.length() > 0)     buf.append(\" \");     buf.append(shortValuedDiscreteFeatureProcessors[i].getValues()[shorts[i]]);   }   for (int i=0; i < floats.length; i++) {     if (buf.length() > 0)     buf.append(\" \");     buf.append(floats[i]);   }   return buf.toString(); } "
"public static void skip(DataInput in) throws IOException {   int length=WritableUtils.readVInt(in);   WritableUtils.skipFully(in,length); } "
"public final void openFallbackInputStream() throws DataFallbackException {   if (inputBuf == null) {     if (LOG.isDebugEnabled())     LOG.debug(\"openFallbackInputStream() : Opening the reader for the \" + dataFile.getName() + \"file\");     try {       setInput(new BufferedReader(new FileReader(dataFile)));     }  catch (    IOException e) {       throw new DataFallbackException(e.getMessage());     }   } } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public UnknownType fullCopy(){   UnknownType tree=(UnknownType)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public void close(){   LOGGER.debug(\"synchro close\");   setClosed(true);   while (!isEmpty() || isFiring() && !checkingThread.isDaemon()) {     try {       Thread.sleep(minWindowSize);     }  catch (    Exception e) {       LOGGER.debug(\"Exception\");     }   } } "
"public DatatypeConfigurationException(String message){   super(message); } "
"private static List<Pair<Double,Double>> createDistribution(double[] singletons,double[] probabilities){   MathArrays.checkEqualLength(singletons,probabilities);   final List<Pair<Double,Double>> samples=new ArrayList<>(singletons.length);   final double[] normalizedProbabilities=EnumeratedDistribution.checkAndNormalize(probabilities);   for (int i=0; i < singletons.length; i++) {     samples.add(new Pair<>(singletons[i],normalizedProbabilities[i]));   }   return samples; } "
"public static void write(String fileName,Table table) throws IOException {   write(fileName,table,null); } "
"public static boolean isStorageExists(){   if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {     return true;   }   return false; } "
"@PostConstruct public void init(){   LOGGER.info(\"Initializing Process cache...\");   commonInit();   doPostConfigurationOfProcessControlTags();   LOGGER.info(\"... Process cache initialization complete.\"); } "
"public boolean isApplicable(){   return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode(); } "
"public void registerListener(FCMListener fcmListener){   this.mFCMListener=fcmListener; } "
"@Before public void initializeTestDirectories(){   logger.debug(\"Initialize test directories\");   String testId=testIdWatcher.getTestId();   File baseDir=getBaseDir();   File resourcesDir=new File(baseDir,TEST_RESOURCES_DIR);   sourceTestDir=new File(resourcesDir,testId);   targetTestDir=new File(baseDir,TEST_RESOURCES_TARGET_DIR + testId);   logger.debug(\"Delete test target directory to remove data from previous run\");   try {     FileUtils.deleteDirectory(targetTestDir);   }  catch (  IOException e) {     throw new RuntimeException(\"Problem deleting directory: \" + targetTestDir.getAbsolutePath(),e);   }   targetTestDir.mkdirs(); } "
"@Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){   return cacheOnDisk(cacheOnDisk); } "
"public SkillTreeCursor querySkillTrees(){   return mHelper.querySkillTrees(); } "
"public FriendsGetOnlineQuery(VkApiClient client,UserActor actor){   super(client,\"friends.getOnline\",Utils.buildParametrizedType(List.class,Integer.class));   accessToken(actor.getAccessToken()); } "
"@Override public boolean equals(Object other){   if (this == other)   return true;   if (other == null || getClass() != other.getClass())   return false;   DictionaryColumnUniqueIdentifier that=(DictionaryColumnUniqueIdentifier)other;   if (!carbonTableIdentifier.equals(that.carbonTableIdentifier))   return false;   return columnIdentifier.equals(that.columnIdentifier); } "
"private boolean isDeprecated(PhpClass clazz){   PhpPsiElement classDoc=clazz.getPrevPsiSibling();   if (!(classDoc instanceof PhpDocCommentImpl)) {     return false;   }   Collection<PhpDocTagImpl> tags=PsiTreeUtil.findChildrenOfType(classDoc,PhpDocTagImpl.class);   if (tags.size() > 0) {     for (    PhpDocTagImpl subject : tags) {       if (subject.getName().equals(\"@deprecated\")) {         tags.clear();         return true;       }     }     tags.clear();   }   return false; } "
"public static final void shuffle(float[] a,int start,int len,Random r){   for (int i=start + len; i > 1; --i) {     float t=a[i];     int j=r.nextInt(i);     a[i]=a[j];     a[j]=t;   } } "
"@Override public Filter createFilter(List<Expression> parameterList){   IntersectsImpl filter=null;   if ((parameterList == null) || (parameterList.size() != 2)) {     filter=new IntersectsExtended();   }  else {     filter=new IntersectsExtended(parameterList.get(0),parameterList.get(1));   }   return filter; } "
"public TransformerFactoryConfigurationError(String msg){   super(msg);   this.exception=null; } "
"public static LinkedHashSet<File> unrollFileCollection(java.util.Collection<File> inputs){   LinkedHashSet<File> vcfFiles=new LinkedHashSet<>(inputs.size() + 1);   for (  File file : inputs) {     if (file.getName().endsWith(\".list\")) {       IOUtil.assertFileIsReadable(file);       for (      final String s : IOUtil.readLines(file)) {         if (s.endsWith(\"#\"))         continue;         if (s.trim().isEmpty())         continue;         vcfFiles.add(new File(s));       }     }  else {       vcfFiles.add(file);     }   }   return vcfFiles; } "
"public PointsToSet reachingObjects(Context c,Local l,SootField f){   return reachingObjects(f); } "
"@Override public Filter createFilter(List<Expression> parameterList){   EqualsImpl filter=null;   if ((parameterList == null) || (parameterList.size() != 2)) {     filter=new EqualsExtended();   }  else {     filter=new EqualsExtended(parameterList.get(0),parameterList.get(1));   }   return filter; } "
"public static void main(final String[] args){   GlobalSettingsController.setup();   launch(args); } "
"public static boolean isFileExist(String filePath,FileType fileType,boolean performFileCheck) throws IOException {   filePath=filePath.replace(\"\\\\\",\"/\"); switch (fileType) { case HDFS: case VIEWFS:     Path path=new Path(filePath);   FileSystem fs=path.getFileSystem(configuration); if (performFileCheck) {   return fs.exists(path) && fs.isFile(path); }  else {   return fs.exists(path); } case LOCAL: default : File defaultFile=new File(filePath); if (performFileCheck) { return defaultFile.exists() && defaultFile.isFile(); }  else { return defaultFile.exists(); } } } "
"public LUDecomposition(Matrix A){   LU=A.getArrayCopy();   m=A.getRowDimension();   n=A.getColumnDimension();   piv=new int[m];   for (int i=0; i < m; i++) {     piv[i]=i;   }   pivsign=1;   double[] LUrowi;   double[] LUcolj=new double[m];   for (int j=0; j < n; j++) {     for (int i=0; i < m; i++) {       LUcolj[i]=LU[i][j];     }     for (int i=0; i < m; i++) {       LUrowi=LU[i];       int kmax=Math.min(i,j);       double s=0.0;       for (int k=0; k < kmax; k++) {         s+=LUrowi[k] * LUcolj[k];       }       LUrowi[j]=LUcolj[i]-=s;     }     int p=j;     for (int i=j + 1; i < m; i++) {       if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {         p=i;       }     }     if (p != j) {       for (int k=0; k < n; k++) {         double t=LU[p][k];         LU[p][k]=LU[j][k];         LU[j][k]=t;       }       int k=piv[p];       piv[p]=piv[j];       piv[j]=k;       pivsign=-pivsign;     }     if (j < m & LU[j][j] != 0.0) {       for (int i=j + 1; i < m; i++) {         LU[i][j]/=LU[j][j];       }     }   } } "
"public static void write(File file,CharSequence data,boolean append) throws IOException {   write(file,data,Charset.defaultCharset(),append); } "
"public void zLazyInitObjectsWithCallback(MithraRuntimeType mithraRuntimeType,MithraConfigurationManager.PostInitializeHook hook){   configManager.lazyInitObjectsWithCallback(mithraRuntimeType,hook); } "
"private void addAnnotationOnSource(ITextUnit textUnit,Issue issue){   TextContainer sourceContainer=textUnit.getSource();   addAnnotation(sourceContainer,issue); } "
"public PagesSaveQuery text(String value){   return unsafeParam(\"text\",value); } "
"void put(final ByteVector out){   int n=0;   int size=2;   AnnotationWriter aw=this;   AnnotationWriter last=null;   while (aw != null) {     ++n;     size+=aw.bv.length;     aw.visitEnd();     aw.prev=last;     last=aw;     aw=aw.next;   }   out.putInt(size);   out.putShort(n);   aw=last;   while (aw != null) {     out.putByteArray(aw.bv.data,0,aw.bv.length);     aw=aw.prev;   } } "
"public static Environment renderTemplate(Template template,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {   Environment savedEnv=threadEnv.get();   threadEnv.set(null);   try {     context.remove(\"null\");     Environment env=template.createProcessingEnvironment(context,(Writer)outWriter);     applyUserSettings(env,context);     env.process();     return env;   }   finally {     threadEnv.set(savedEnv);   } } "
"public static ListOfLongs loadQueryLocations(DAAHeader daaHeader,String classificationName,Collection<Integer> classIds) throws IOException {   for (int i=0; i < daaHeader.getBlockTypeRankArrayLength() - 1; i++) {     final int j=i + 1;     if (daaHeader.getBlockType(i) == BlockType.megan_classification_key_block && daaHeader.getBlockType(j) == BlockType.megan_classification_dump_block) {       try (InputReaderLittleEndian insKey=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){         final long keyBase=daaHeader.computeBlockStart(i);         insKey.seek(keyBase);         final String cName=insKey.readNullTerminatedBytes();         if (cName.equals(classificationName)) {           final int numberOfClasses=insKey.readInt();           final ListOfLongs list=new ListOfLongs(100000);           try (InputReaderLittleEndian insDump=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){             final long dumpBase=daaHeader.computeBlockStart(j);             insDump.seek(dumpBase);             if (!insDump.readNullTerminatedBytes().equals(classificationName))             throw new IOException(\"Internal error: key-dump mismatch\");             for (int c=0; c < numberOfClasses; c++) {               int classId=insKey.readInt();               insKey.skip(4);               int size=insKey.readInt();               final long offset=insKey.readLong();               if (classIds.contains(classId)) {                 insDump.seek(dumpBase + offset);                 for (int n=0; n < size; n++) {                   list.add(insDump.readLong());                 }               }             }           }            return list;         }       }      }   }   return null; } "
"public void remove(int offset,int length){   if (offset < 0 || offset >= _pos) {     throw new ArrayIndexOutOfBoundsException(offset);   }   if (offset == 0) {     System.arraycopy(_data,length,_data,0,_pos - length);   }  else   if (_pos - length == offset) {   }  else {     System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));   }   _pos-=length; } "
"public static void transform(StreamSource src,StreamSource stylesheet,Fop fop) throws FOPException {   Result res=new SAXResult(fop.getDefaultHandler());   try {     TransformerFactory factory=TransformerFactory.newInstance();     Transformer transformer;     if (stylesheet == null) {       transformer=factory.newTransformer();     }  else {       transformer=factory.newTransformer(stylesheet);     }     transformer.setURIResolver(new LocalResolver(transformer.getURIResolver()));     transformer.transform(src,res);   }  catch (  Exception e) {     throw new FOPException(e);   } } "
"@Override public boolean isSilence(){   throw new IllegalStateException(\"This method should not be called for DiphoneTargets.\"); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_A_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200901,skilltarget); } "
"protected void writeString(String s) throws IOException {   for (int i=0; i < s.length(); i++) {     out.write((byte)s.charAt(i));   } } "
"public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_WIN(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1390001,value0,value1); } "
"@Override public void actionPerformed(ActionEvent event){   ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();   File lastOpenFile;   String name=importBlastDialog.getBlastFileName();   if (name.length() > 0)   lastOpenFile=new File(Basic.replaceFileSuffix(name,\".rma6\"));  else   lastOpenFile=new File(ProgramProperties.getFile(MeganProperties.SAVEFILE),\"Untitled.rma6\");   File file=ChooseFileDialog.chooseFileToSave(importBlastDialog,lastOpenFile,new RMAFileFilter(),new RMAFileFilter(),event,\"Save MEGAN file\",\".rma6\");   if (file != null) {     ProgramProperties.put(MeganProperties.SAVEFILE,file);     importBlastDialog.setMeganFileName(file.getPath());     importBlastDialog.getMeganFileNameField().setText(file.getPath());   } } "
"public DeterministicHashMap(int initialCapacity,float loadFactor){   super(initialCapacity,loadFactor); } "
"public Criteria createCriteria(){   Criteria criteria=createCriteriaInternal();   if (oredCriteria.size() == 0) {     oredCriteria.add(criteria);   }   return criteria; } "
"public void onError(String error,DataOutputStream dos){ } "
"public static String clearLastViewedProducts(HttpServletRequest request,HttpServletResponse response){   HttpSession session=request.getSession();   if (session != null) {     session.setAttribute(\"lastViewedProducts\",FastList.newInstance());   }   return \"success\"; } "
"public boolean has(Access a){   List<String> list=getAccesses();   return list == null ? false : list.contains(a.getName()); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public MemberClassDecl fullCopy(){   MemberClassDecl tree=(MemberClassDecl)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public SnippetObject field(Dynamic obj,int fieldIndex){   final Field info=obj.getFieldInfo(fieldIndex);   final String name=info.getDeclared();   Pathway path=myPath == null ? Pathway.global(name) : myPath.field(name);   return new SnippetObject(obj.getFieldValue(fieldIndex),path,mySnippets); } "
"public boolean insertIntoTheCurrentSlot(){   if (!getVal(currentPos(),INTEGER).equals(EMPTY_CONST))   return false;   setVal(currentPos(),INUSE_CONST);   return true; } "
"@Override public void exec() throws InvalidJobException {   if (currentState != State.QUEUED) {     throw new InvalidJobException(\"Illegal state change\");   }   currentState=State.RUNNING;   init();   Throwable thrown=null;   Map<String,Object> result=null;   try {     LocalDispatcher dispatcher=dctx.getDispatcher();     result=dispatcher.runSync(getServiceName(),getContext());     if (ServiceUtil.isError(result)) {       thrown=new Exception(ServiceUtil.getErrorMessage(result));     }     if (requester != null) {       requester.receiveResult(result);     }   }  catch (  Throwable t) {     if (requester != null) {       requester.receiveThrowable(t);     }     thrown=t;   }   if (thrown == null) {     finish(result);   }  else {     failed(thrown);   } } "
"public LookupTranslator(final CharSequence[]... lookup){   lookupMap=new HashMap<String,CharSequence>();   int _shortest=Integer.MAX_VALUE;   int _longest=0;   if (lookup != null) {     for (    final CharSequence[] seq : lookup) {       this.lookupMap.put(seq[0].toString(),seq[1]);       final int sz=seq[0].length();       if (sz < _shortest) {         _shortest=sz;       }       if (sz > _longest) {         _longest=sz;       }     }   }   shortest=_shortest;   longest=_longest; } "
"private void editWorldAction(){ synchronized (Simulation.LOCK) {     EditWorldDialog.show(ControlUtilities.getParentWindow(this),this.simulation.getWorld());   }   this.model.nodeChanged(this.root); } "
"public boolean isDistinct(){   return distinct; } "
"public Polygon2D(int[] xpoints,int[] ypoints,int npoints){   if (npoints > xpoints.length || npoints > ypoints.length) {     throw new IndexOutOfBoundsException(\"npoints > xpoints.length || npoints > ypoints.length\");   }   this.npoints=npoints;   this.xpoints=new float[npoints];   this.ypoints=new float[npoints];   for (int i=0; i < npoints; i++) {     this.xpoints[i]=xpoints[i];     this.ypoints[i]=ypoints[i];   }   calculatePath(); } "
"public Path relativizeWithTargetDirectory(Path path){   return targetDirectoryPath.relativize(path.toAbsolutePath()); } "
"public void applyInverseTo(final double[] in,final T[] out){   final double x=in[0];   final double y=in[1];   final double z=in[2];   final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));   final T m0=q0.negate();   out[0]=m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);   out[1]=m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);   out[2]=m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z); } "
"public static char[] toCharArray(InputStream is,String encoding) throws IOException {   return toCharArray(is,Charsets.toCharset(encoding)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PetOrderUnSummon_A_TO_ME(String skillname,String skillcaster){   return new SM_SYSTEM_MESSAGE(1201205,skillname,skillcaster); } "
"public boolean isMemorySpace(){   return _isMemorySA; } "
"private boolean isStartingNewContextualSearch(PanelState toState,StateChangeReason reason){   return toState == PanelState.PEEKED && (reason == StateChangeReason.TEXT_SELECT_TAP || reason == StateChangeReason.TEXT_SELECT_LONG_PRESS); } "
"public void rectValueToPixel(RectF r,float phaseY){   r.top*=phaseY;   r.bottom*=phaseY;   mMatrixValueToPx.mapRect(r);   mViewPortHandler.getMatrixTouch().mapRect(r);   mMatrixOffset.mapRect(r); } "
"public ItemCursor queryItems(){   return mHelper.queryItems(); } "
"public void init$Children(){   children=new ASTNode[2]; } "
"public Map<R,V> column(final C columnKey){   HashMap<R,V> map=new HashMap<>();   for (  R rowKey : dataMap.keySet()) {     Map<C,V> row=dataMap.get(rowKey);     V value=row.get(columnKey);     if (value != null)     map.put(rowKey,value);   }   return map; } "
"private int purgeAscending(final int lowIndex,final int highIndex,final RollingFileManager manager){   int suffixLength=0;   final List<FileRenameAction> renames=new ArrayList<FileRenameAction>();   final StringBuilder buf=new StringBuilder();   manager.getPatternProcessor().formatFileName(subst,buf,highIndex);   String highFilename=subst.replace(buf);   if (highFilename.endsWith(EXT_GZIP)) {     suffixLength=EXT_GZIP.length();   }  else   if (highFilename.endsWith(EXT_ZIP)) {     suffixLength=EXT_ZIP.length();   }   int maxIndex=0;   for (int i=highIndex; i >= lowIndex; i--) {     File toRename=new File(highFilename);     if (i == highIndex && toRename.exists()) {       maxIndex=highIndex;     }  else     if (maxIndex == 0 && toRename.exists()) {       maxIndex=i + 1;       break;     }     boolean isBase=false;     if (suffixLength > 0) {       final File toRenameBase=new File(highFilename.substring(0,highFilename.length() - suffixLength));       if (toRename.exists()) {         if (toRenameBase.exists()) {           LOGGER.debug(\"DefaultRolloverStrategy.purgeAscending deleting {} base of {}.\",toRenameBase,toRename);           toRenameBase.delete();         }       }  else {         toRename=toRenameBase;         isBase=true;       }     }     if (toRename.exists()) {       if (i == lowIndex) {         LOGGER.debug(\"DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.\",toRename,i);         if (!toRename.delete()) {           return -1;         }         break;       }       buf.setLength(0);       manager.getPatternProcessor().formatFileName(subst,buf,i - 1);       final String lowFilename=subst.replace(buf);       String renameTo=lowFilename;       if (isBase) {         renameTo=lowFilename.substring(0,lowFilename.length() - suffixLength);       }       renames.add(new FileRenameAction(toRename,new File(renameTo),true));       highFilename=lowFilename;     }  else {       buf.setLength(0);       manager.getPatternProcessor().formatFileName(subst,buf,i - 1);       highFilename=subst.replace(buf);     }   }   if (maxIndex == 0) {     maxIndex=lowIndex;   }   for (int i=renames.size() - 1; i >= 0; i--) {     final Action action=renames.get(i);     try {       LOGGER.debug(\"DefaultRolloverStrategy.purgeAscending executing {} of {}: {}\",i,renames.size(),action);       if (!action.execute()) {         return -1;       }     }  catch (    final Exception ex) {       LOGGER.warn(\"Exception during purge in RollingFileAppender\",ex);       return -1;     }   }   return maxIndex; } "
"public void attach(AppCompatActivity activity){   if (activity.getDelegate() instanceof LayoutInflaterFactory) {     LayoutInflaterFactory originInflaterFactory=(LayoutInflaterFactory)activity.getDelegate();     LayoutInflaterFactory proxyInflaterFactory=(LayoutInflaterFactory)Proxy.newProxyInstance(originInflaterFactory.getClass().getClassLoader(),new Class[]{LayoutInflaterFactory.class},new InflaterHandler(originInflaterFactory,activity));     LayoutInflater layoutInflater=LayoutInflater.from(activity);     LayoutInflaterCompat.setFactory(layoutInflater,proxyInflaterFactory);   } } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public TypeDecl lookupType(String packageName,String typeName){   ASTNode$State state=state();   TypeDecl lookupType_String_String_value=getParent().Define_TypeDecl_lookupType(this,null,packageName,typeName);   return lookupType_String_String_value; } "
"public WeatherView(Context context,AttributeSet attrs){   super(context,attrs);   mContext=context;   if (!isInEditMode()) {     mActivity=(Activity)getContext();     mSensorManager=(SensorManager)mActivity.getSystemService(mActivity.SENSOR_SERVICE);     accelerometer=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);     magnetometer=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);     initListeners();     setWeather(Constants.weatherStatus.SUN);     initOptions(context,attrs);   } } "
"public static ByteBuffer readFile(File file) throws IOException {   FileInputStream fis=new FileInputStream(file);   FileChannel fc=fis.getChannel();   ByteBuffer readBuffer=ByteBuffer.allocate((int)fc.size());   fc.read(readBuffer);   fis.close();   readBuffer.rewind();   return readBuffer; } "
"protected boolean isPerformOrderById(){   return performOrderById; } "
"public boolean hasSegmentParameter(SegmentContextParameters segmParameter,ContextInfo contextInfo){   return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.SEGMENT,segmParameter.getName()),contextInfo); } "
"private void initData(Context context){   gestureDetector=new GestureDetector(context,gestureListener);   gestureDetector.setIsLongpressEnabled(false);   LABEL_OFFSET=DensityUtil.dip2px(context,LABEL_OFFSET_DIP);   scroller=new Scroller(context); } "
"public SparseIntArray(int initialCapacity){   mKeys=new int[initialCapacity];   mValues=new int[initialCapacity];   mSize=0; } "
"public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){ } "
"private void drawDividerDrawable(Canvas c,RecyclerView parent){   int headersCount=0;   int footerCount=0;   int itemViewCount;   FamiliarRecyclerView curFamiliarRecyclerView=null;   if (parent instanceof FamiliarRecyclerView) {     curFamiliarRecyclerView=(FamiliarRecyclerView)parent;     headersCount=curFamiliarRecyclerView.getHeaderViewsCount();     footerCount=curFamiliarRecyclerView.getFooterViewsCount();     itemViewCount=curFamiliarRecyclerView.getAdapter().getItemCount() - headersCount - footerCount;   }  else {     itemViewCount=parent.getAdapter().getItemCount();   }   final int parentLeft=parent.getPaddingLeft();   final int parentRight=parent.getWidth() - parent.getPaddingRight();   final int parentTop=parent.getPaddingTop();   final int parentBottom=parent.getHeight() - parent.getPaddingBottom();   boolean isGridItemLayoutLastRow, isGridItemLayoutFirstRow, isGridItemLayoutLastColumn;   boolean isGridLayoutLastNum=false;   for (int i=0; i < parent.getChildCount(); i++) {     View childView=parent.getChildAt(i);     RecyclerView.LayoutParams childViewParams=(RecyclerView.LayoutParams)childView.getLayoutParams();     int position=childViewParams.getViewAdapterPosition();     if (isInterceptFilter(position,headersCount,footerCount,itemViewCount))     continue;     if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR && (!isHeaderDividersEnabled || headersCount == 0) && position - headersCount == 0) {       continue;     }     int traX=(int)(ViewCompat.getTranslationX(childView));     int traY=(int)(ViewCompat.getTranslationY(childView));     boolean isEmptyView=isEmptyView(curFamiliarRecyclerView,position,headersCount);     if (isHeadViewPos(headersCount,position) || isFooterViewPos(headersCount,footerCount,itemViewCount,position) || isEmptyView) {       if (isEmptyView && (!isHeaderDividersEnabled || headersCount == 0)) {         continue;       }       if (mOrientation == OrientationHelper.HORIZONTAL) {         final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;         final int right=left + mVerticalDividerDrawableHeight;         mVerticalDividerDrawable.setBounds(left + traX,parentTop + traY,right + traX,parentBottom + traY);         mVerticalDividerDrawable.draw(c);       }  else {         final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;         final int bottom=top + mHorizontalDividerDrawableHeight;         mHorizontalDividerDrawable.setBounds(parentLeft + traX,top + traY,parentRight + traX,bottom + traY);         mHorizontalDividerDrawable.draw(c);       }       continue;     } switch (mLayoutManagerType) { case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_LINEAR:       if (mOrientation == OrientationHelper.VERTICAL) {         int left=parentLeft;         int right=parentRight;         if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {           left+=mItemViewBothSidesMargin;           right-=mItemViewBothSidesMargin;         }         final int top=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight;         final int bottom=top + mHorizontalDividerDrawableHeight;         mHorizontalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);         mHorizontalDividerDrawable.draw(c);       }  else {         int top=parentTop;         int bottom=parentBottom;         if (mItemViewBothSidesMargin > 0 && position - headersCount > 0) {           top+=mItemViewBothSidesMargin;           bottom-=mItemViewBothSidesMargin;         }         final int left=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight;         final int right=left + mVerticalDividerDrawableHeight;         mVerticalDividerDrawable.setBounds(left + traX,top + traY,right + traX,bottom + traY);         mVerticalDividerDrawable.draw(c);       }     break; case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID: case FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID:   isGridItemLayoutLastRow=isGridItemLayoutLastRow(position,itemViewCount,headersCount); isGridItemLayoutLastColumn=isGridItemLayoutLastColumn(position,headersCount,childView); isGridItemLayoutFirstRow=isGridItemLayoutFirstRow(position,headersCount); if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && position == (itemViewCount + headersCount - 1)) { isGridLayoutLastNum=true; } if (mOrientation == OrientationHelper.HORIZONTAL) { if (!isNotShowGridEndDivider || (!isGridLayoutLastNum && !isGridItemLayoutLastColumn)) { int horizontalLeft=childView.getLeft() - childViewParams.leftMargin; int horizontalTop=childView.getBottom() + childViewParams.bottomMargin; int horizontalRight=childView.getRight() + childViewParams.rightMargin; int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight; if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) { horizontalRight+=mVerticalDividerDrawableHeight; } mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY); mHorizontalDividerDrawable.draw(c); } if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) { continue; } int verticalTop; int verticalBottom; if (isGridItemLayoutFirstRow) { if (position - headersCount == 0) { verticalTop=parent.getTop(); verticalBottom=parent.getBottom(); }  else { continue; } }  else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) { if (isGridItemLayoutFirstColumn(position,headersCount,childView)) { verticalTop=parent.getTop() + mItemViewBothSidesMargin; verticalBottom=parent.getBottom() - mItemViewBothSidesMargin; }  else { continue; } }  else { verticalTop=childView.getTop() - childViewParams.topMargin; verticalBottom=childView.getBottom() + childViewParams.bottomMargin; if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) { verticalBottom+=mHorizontalDividerDrawableHeight; } } int verticalLeft=childView.getLeft() - childViewParams.leftMargin - mVerticalDividerDrawableHeight; int verticalRight=verticalLeft + mVerticalDividerDrawableHeight; mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY); mVerticalDividerDrawable.draw(c); }  else { if (!isNotShowGridEndDivider || (!isGridItemLayoutLastColumn && ((mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridLayoutLastNum) || mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID))) { int verticalLeft=childView.getRight() + childViewParams.rightMargin; int verticalTop=childView.getTop() - childViewParams.topMargin; int verticalRight=verticalLeft + mVerticalDividerDrawableHeight; int verticalBottom=childView.getBottom() + childViewParams.bottomMargin; if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_STAGGERED_GRID && !isGridItemLayoutLastRow) { verticalBottom+=mHorizontalDividerDrawableHeight; } mVerticalDividerDrawable.setBounds(verticalLeft + traX,verticalTop + traY,verticalRight + traX,verticalBottom + traY); mVerticalDividerDrawable.draw(c); } if ((!isHeaderDividersEnabled || headersCount == 0) && isGridItemLayoutFirstRow) { continue; } int horizontalLeft; int horizontalRight; if (isGridItemLayoutFirstRow) { if (position - headersCount == 0) { horizontalLeft=parent.getLeft(); horizontalRight=parent.getRight(); }  else { continue; } }  else if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && isGridItemLayoutLastRow) { if (isGridItemLayoutFirstColumn(position,headersCount,childView)) { horizontalLeft=parent.getLeft() + mItemViewBothSidesMargin; horizontalRight=parent.getRight() - mItemViewBothSidesMargin; }  else { continue; } }  else { horizontalLeft=childView.getLeft() - childViewParams.leftMargin; horizontalRight=childView.getRight() + childViewParams.rightMargin; if (mLayoutManagerType == FamiliarRecyclerView.LAYOUT_MANAGER_TYPE_GRID && !isGridItemLayoutLastColumn) { horizontalRight+=mVerticalDividerDrawableHeight; } } int horizontalTop=childView.getTop() - childViewParams.topMargin - mHorizontalDividerDrawableHeight; int horizontalBottom=horizontalTop + mHorizontalDividerDrawableHeight; mHorizontalDividerDrawable.setBounds(horizontalLeft + traX,horizontalTop + traY,horizontalRight + traX,horizontalBottom + traY); mHorizontalDividerDrawable.draw(c); } break; } } } "
"public MarketEditAlbumQuery photoId(Integer value){   return unsafeParam(\"photo_id\",value); } "
"public void removeChangingListener(OnWheelChangedListener listener){   changingListeners.remove(listener); } "
"public void overrideButton(String button,boolean override){   LOG.i(\"App\",\"WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!\");   if (button.equals(\"volumeup\")) {     webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP,override);   }  else   if (button.equals(\"volumedown\")) {     webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN,override);   }  else   if (button.equals(\"menubutton\")) {     webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_MENU,override);   } } "
"public static void main(String[] args){   for (int i=1; i < 152; i++) {     for (    Locale l : supportedLocales) {       try {         System.out.println(String.format(l,\"%s: Pokedex #%d is %s\\n    %s\",l.getDisplayName(l),i,PokeDictionary.getDisplayName(i,l),PokeDictionary.getDisplayDescription(i,l)));       }  catch (      MissingResourceException e) {         Log.e(\"Main\",\"Unable to find Pokemon name with given Pokedex: \" + i,e);       }     }     try {       System.out.println(String.format(\"%s: Pokedex# %d is %s\\n    %s\",\"Fallback\",i,PokeDictionary.getDisplayName(i,new Locale(\"xx\")),PokeDictionary.getDisplayDescription(i,new Locale(\"xx\"))));     }  catch (    MissingResourceException e) {       Log.e(\"Main\",\"Unable to find Pokemon name with given Pokedex: \",e);     }     System.out.println();   } } "
"private List<InputSplit> readEntries(JsonReader reader,JobConf job) throws IOException {   List<Path> paths=new ArrayList<Path>();   Gson gson=DynamoDBUtil.getGson();   reader.beginArray();   while (reader.hasNext()) {     ExportManifestEntry entry=gson.fromJson(reader,ExportManifestEntry.class);     paths.add(new Path(entry.url));   }   reader.endArray();   log.info(\"Number of S3 files: \" + paths.size());   if (paths.size() == 0) {     return Collections.emptyList();   }   int filesPerSplit=(int)Math.ceil((double)(paths.size()) / Math.min(MAX_NUM_SPLITS,paths.size()));   int numSplits=(int)Math.ceil((double)(paths.size()) / filesPerSplit);   long[] fileMaxLengths=new long[filesPerSplit];   Arrays.fill(fileMaxLengths,Long.MAX_VALUE / filesPerSplit);   long[] fileStarts=new long[filesPerSplit];   Arrays.fill(fileStarts,0);   List<InputSplit> splits=new ArrayList<InputSplit>(numSplits);   for (int i=0; i < numSplits; i++) {     int start=filesPerSplit * i;     int end=filesPerSplit * (i + 1);     if (i == (numSplits - 1)) {       end=paths.size();     }     Path[] pathsInOneSplit=paths.subList(start,end).toArray(new Path[end - start]);     CombineFileSplit combineFileSplit=new CombineFileSplit(job,pathsInOneSplit,fileStarts,fileMaxLengths,new String[0]);     splits.add(combineFileSplit);   }   return splits; } "
"private static void removeAbsolutePositionAndSizes(NlComponent component){   for (  NlComponent child : component.getChildren()) {     child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_X,null);     child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_Y,null);     child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_WIDTH,null);     child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_HEIGHT,null);     removeAbsolutePositionAndSizes(child);   } } "
"@CalledByNative InfoBar showConfirmInfoBar(WindowAndroid windowAndroid,int enumeratedIconId,Bitmap iconBitmap,String message,String linkText,String buttonOk,String buttonCancel,int[] contentSettings){   int drawableId=ResourceId.mapToDrawableId(enumeratedIconId);   ConfirmInfoBar infoBar=new ConfirmInfoBar(null,drawableId,iconBitmap,message,linkText,buttonOk,buttonCancel);   infoBar.setContentSettings(windowAndroid,contentSettings);   return infoBar; } "
"public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff) throws IOException, MyException {   String[] parts=new String[2];   this.errno=this.split_file_id(appender_file_id,parts);   if (this.errno != 0) {     return this.errno;   }   return this.modify_file(parts[0],parts[1],file_offset,file_buff); } "
"public ZWaveProtectionCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint);   versionMax=MAX_SUPPORTED_VERSION; } "
"private boolean isEmptyPersistent() throws SAException {   Context context=null;   try {     if (!_cacheManager.getTemplatesManager().isEmpty())     return false;     ITemplateHolder tHolder=TemplateHolderFactory.createEmptyTemplateHolder(this,_uidFactory.createUIDFromCounter(),Long.MAX_VALUE,false);     IServerTypeDesc templateType=_typeManager.getServerTypeDesc(IServerTypeDesc.ROOT_TYPE_NAME);     context=_cacheManager.getCacheContext();     ISAdapterIterator<IEntryHolder> entriesIterSA=_cacheManager.makeEntriesIter(context,tHolder,templateType,0,SystemTime.timeMillis(),false);     if (entriesIterSA == null)     return true;     IEntryHolder eh=entriesIterSA.next();     entriesIterSA.close();     return (eh == null);   }   finally {     _cacheManager.freeCacheContext(context);   } } "
"public boolean avoid_deadlock(){   return soot.PhaseOptions.getBoolean(options,\"avoid-deadlock\"); } "
"public FieldVector3D<T> scalarMultiply(final T a){   return new FieldVector3D<T>(x.multiply(a),y.multiply(a),z.multiply(a)); } "
"public static boolean calculateFallDamage(Player player,float distance,boolean stoped){   if (player.isInvul()) {     return false;   }   if (distance >= FallDamageConfig.MAXIMUM_DISTANCE_DAMAGE || !stoped) {     player.getController().onStopMove();     player.getFlyController().onStopGliding(false);     player.getLifeStats().reduceHp(player.getLifeStats().getMaxHp() + 1,player);     return true;   }  else   if (distance >= FallDamageConfig.MINIMUM_DISTANCE_DAMAGE) {     float dmgPerMeter=player.getLifeStats().getMaxHp() * FallDamageConfig.FALL_DAMAGE_PERCENTAGE / 100f;     int damage=(int)(distance * dmgPerMeter);     player.getLifeStats().reduceHp(damage,player);     PacketSendUtility.sendPacket(player,new SM_ATTACK_STATUS(player,SM_ATTACK_STATUS.TYPE.FALL_DAMAGE,0,-damage));   }   return false; } "
"public static void startTiming(Object caller){   startTiming(caller.getClass().getSimpleName()); } "
"@NonNull public <T>T peek(int index){   return (T)history.get(history.size() - index - 1); } "
"public static List<Window> windows(String words,TokenizerFactory tokenizerFactory,int windowSize){   Tokenizer tokenizer=tokenizerFactory.create(words);   List<String> list=new ArrayList<>();   while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());   if (list.isEmpty())   throw new IllegalStateException(\"No tokens found for windows\");   return windows(list,windowSize); } "
"private void bossUseSkill(int skillId){   AI2Actions.useSkill(this,skillId); } "
"private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){   ClassReference objClassRef=objSubjectExpression.getClassReference();   if (null == objClassRef || null == objClassRef.getFQN()) {     objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);     return;   }   objTypesSet.add(objClassRef.getFQN()); } "
"public static String removeOrderTerm(HttpServletRequest request,HttpServletResponse response){   ShoppingCart cart=getCartObject(request);   String termIndexStr=request.getParameter(\"termIndex\");   if (UtilValidate.isNotEmpty(termIndexStr)) {     try {       Integer termIndex=Integer.parseInt(termIndexStr);       if (termIndex >= 0) {         List<GenericValue> orderTerms=cart.getOrderTerms();         if (orderTerms != null && orderTerms.size() > termIndex) {           cart.removeOrderTerm(termIndex);         }       }     }  catch (    NumberFormatException e) {       Debug.logWarning(e,\"Error parsing termIndex: \" + termIndexStr,module);     }   }   return \"success\"; } "
"public AemRadioGroup selectByLabel(String label){   for (  AemRadioOption option : values) {     if (label.equals(option.getLabel())) {       option.setSelected();       break;     }   }   return this; } "
"public boolean isComplete(){   return styleComplete && layersComplete; } "
"protected CreateIndexRequestBuilder prepareCreateIndexRequestBuilder(String index){   log.debug(\"Prepare ES request to create new index {} with {} shards and {} replicas\",index,shards,replicas);   CreateIndexRequestBuilder builder=client.admin().indices().prepareCreate(index);   Settings indexSettings=Settings.settingsBuilder().put(\"number_of_shards\",shards).put(\"number_of_replicas\",replicas).build();   builder.setSettings(indexSettings);   return builder; } "
"public final void addAccountToGameServer(Account acc){   accountsOnGameServer.put(acc.getId(),acc); } "
"public static final Slice scale(Slice slice,double scale){   if (slice == null)   throw new NullPointerException(Messages.getString(\"geometry.nullShape\"));   if (scale <= 0)   throw new IllegalArgumentException(Messages.getString(\"geometry.invalidScale\"));   return new Slice(slice.getSliceRadius() * scale,slice.getTheta()); } "
"protected boolean canStoreClass(SootClass child,SootClass parent){   parent.checkLevel(SootClass.HIERARCHY);   child.checkLevel(SootClass.HIERARCHY);   Interval parentInterval=classToInterval.get(parent);   Interval childInterval=classToInterval.get(child);   if (parentInterval != null && childInterval != null) {     return parentInterval.isSubrange(childInterval);   }   if (childInterval == null) {     if (parentInterval != null) {       return parent.equals(Scene.v().getObjectType().getSootClass());     }  else {       return getAllSubinterfaces(parent).contains(child);     }   }  else {     Set<SootClass> impl=getAllImplementersOfInterface(parent);     for (Iterator<SootClass> it=impl.iterator(); it.hasNext(); ) {       parentInterval=classToInterval.get(it.next());       if (parentInterval != null && parentInterval.isSubrange(childInterval)) {         return true;       }     }     return false;   } } "
"private int assignThreads(int splitIndex,int splitCount){   if (threadsPerSplit > 0) {     return threadsPerSplit;   }   if (splitCount == 1) {     return threadCount;   }   if (splitCount * minThreads > threadCount) {     return minThreads;   }   if (splitIndex % threadCount < threadCount % splitCount) {     return threadCount / splitCount + 1;   }  else {     return threadCount / splitCount;   } } "
"public MarketGetCategoriesQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"public static int expForDefence(Creature attacker,Creature defenced){   float attackerCost=getTotalCost(attacker);   float defencedCost=getTotalCost(defenced);   return result(ln(attackerCost / 1.3f - defencedCost * 1.7f)); } "
"private boolean parseOptions() throws IOException {   boolean valid;   if (hasOption(LOCALPROPFILE)) {     SystemConfiguration.loadPropsFromFile(new File(getOptionValue(LOCALPROPFILE)));   }  else   if (hasOption(HDFSPROPDIR)) {     FileSystem fs=FileSystem.get(new Configuration());     SystemConfiguration.loadPropsFromHDFSDir(getOptionValue(HDFSPROPDIR),fs);   }  else   if (hasOption(HDFSPROPFILE)) {     FileSystem fs=FileSystem.get(new Configuration());     SystemConfiguration.loadPropsFromFile(getOptionValue(HDFSPROPFILE),fs);   }  else {     for (    String prop : ResponderProps.PROPSLIST) {       if (hasOption(prop)) {         SystemConfiguration.setProperty(prop,getOptionValue(prop));       }     }   }   valid=ResponderProps.validateResponderProperties();   return valid; } "
"public int read(InputStream is) throws IOException {   init();   if (is != null) {     byte[] buffer=GifUtils.streamToBytes(is);     mGifHeader=new GifHeader(buffer,mOffset);     mOffset+=mGifHeader.size;     mWidth=mGifHeader.getWidth();     mHeight=mGifHeader.getHeight();     if (!mGifHeader.getSignature().equals(\"GIF\")) {       return STATUS_FORMAT_ERROR;     }     while (buffer[mOffset] != TRR_CODE) {       if (buffer[mOffset] == IMG_CODE) {         mImageBlock=new ImageBlock(buffer,mOffset);         mOffset+=mImageBlock.size;         mFrameCount++;         mCurrentImage=extractImage();         if (mLastDispose > 0) {           if (mLastDispose == 3) {             int n=mFrameCount - 2;             if (n > 0) {               mLastImage=getFrame(n - 1);             }  else {               mLastImage=null;             }           }         }         mGifFrames.add(new GifFrame(mCurrentImage,mDelay));         resetFrame();       }  else       if (buffer[mOffset] == EXT_CODE) {         if (buffer[mOffset + 1] == GC_EXT) {           mGcExt=new GraphicControlExtension(buffer,mOffset);           mOffset+=mGcExt.size;           mDispose=mGcExt.getDisposalMothod();           if (mDispose == 0) {             mDispose=1;           }           mDelay=mGcExt.getDelayTime() * 10;         }  else         if (buffer[mOffset + 1] == APP_EXT) {           ApplicationExtension appExt=new ApplicationExtension(buffer,mOffset);           mOffset+=appExt.size;         }  else         if (buffer[mOffset + 1] == CMT_EXT) {           CommentExtension cmtExt=new CommentExtension(buffer,mOffset);           mOffset+=cmtExt.size;         }  else         if (buffer[mOffset + 1] == TXT_EXT) {           PlainTextExtension txtExt=new PlainTextExtension(buffer,mOffset);           mOffset+=txtExt.size;         }  else {           throw new IOException();         }       }  else {         throw new IOException();       }     }   }  else {     mStatus=STATUS_OPEN_ERROR;   }   return mStatus; } "
"public static void clearReferences(ClassLoader classLoader){   ClassLoaderCache.getCache().removeClassLoader(classLoader);   if (NonActivatableServiceDescriptor.getGlobalPolicy() != null) {     NonActivatableServiceDescriptor.getGlobalPolicy().setPolicy(classLoader,null);   }   clearReferencesJdbc(classLoader);   clearReferencesThreads(classLoader);   clearReferencesThreadLocals(classLoader);   clearReferencesRmiTargets(classLoader);   clearRmiLoaderHandler(classLoader);   try {     Class clazz=classLoader.loadClass(\"org.apache.commons.logging.LogFactory\");     clazz.getMethod(\"release\",ClassLoader.class).invoke(null,classLoader);   }  catch (  Throwable t) {   }   try {     Class clazz=classLoader.loadClass(\"org.apache.juli.logging.LogFactory\");     clazz.getMethod(\"release\",ClassLoader.class).invoke(null,classLoader);   }  catch (  Throwable t) {   }   clearReferencesResourceBundles(classLoader);   java.beans.Introspector.flushCaches(); } "
"private DynamicExecutor(){ } "
"public void callTakePicture(int returnType,int encodingType){   boolean saveAlbumPermission=PermissionHelper.hasPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);   boolean takePicturePermission=PermissionHelper.hasPermission(this,Manifest.permission.CAMERA);   if (!takePicturePermission) {     takePicturePermission=true;     try {       PackageManager packageManager=this.cordova.getActivity().getPackageManager();       String[] permissionsInPackage=packageManager.getPackageInfo(this.cordova.getActivity().getPackageName(),PackageManager.GET_PERMISSIONS).requestedPermissions;       if (permissionsInPackage != null) {         for (        String permission : permissionsInPackage) {           if (permission.equals(Manifest.permission.CAMERA)) {             takePicturePermission=false;             break;           }         }       }     }  catch (    NameNotFoundException e) {     }   }   if (takePicturePermission && saveAlbumPermission) {     takePicture(returnType,encodingType);   }  else   if (saveAlbumPermission && !takePicturePermission) {     PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.CAMERA);   }  else   if (!saveAlbumPermission && takePicturePermission) {     PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);   }  else {     PermissionHelper.requestPermissions(this,TAKE_PIC_SEC,permissions);   } } "
"public static boolean isSignedInteger(String s){   if (isEmpty(s))   return defaultEmptyOK;   try {     Integer.parseInt(s);     return true;   }  catch (  Exception e) {     return false;   } } "
"public static void injectToData(Object target,Bundle data){   if (target == null || data == null)   return;   ParcelInjector injector;   try {     injector=getInjectorByClass(target.getClass());     injector.injectDataToBundle(target,data);   }  catch (  Exception e) {     throw new RuntimeException(String.format(\"inject failed : %s\",e.getMessage()),e);   } } "
"public RangePredicate(int operation,Expression middle,Expression left,Expression right){   this(operation,middle,left,right,DefaultLiteralComparator.getInstance()); } "
"static CanonicalCookie createFromStream(DataInputStream in) throws IOException {   return new CanonicalCookie(in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readLong(),in.readLong(),in.readLong(),in.readBoolean(),in.readBoolean(),in.readBoolean(),in.readInt()); } "
"public final void yybegin(int newState){   zzLexicalState=newState; } "
"public static int update(String sql,Object[] args){   Connection c=null;   PreparedStatement p=null;   try {     c=getConnection();     if (c == null)     return -1;     p=c.prepareStatement(sql);     int order=1;     if (args != null) {       for (int i=0; i < args.length; i++) {         Object o=args[i];         setParameter(p,order++,o);       }     }     return p.executeUpdate();   }  catch (  Exception e) {     if (log.isErrorEnabled())     log.error(sql + toString(args),e);   }  finally {     close(p,c);   }   return 0; } "
"public FileConvert(String[] args){   final CmdLineParser parser=new CmdLineParser(this,ParserProperties.defaults().withUsageWidth(80));   try {     parser.parseArgument(args);   }  catch (  CmdLineException e) {     System.err.println(e.getMessage());     print_usage_and_exit_(parser);   }   if (help) {     print_usage_and_exit_(parser);   }   if (verbose)   Logger.getLogger(\"com.groupon.lex\").setLevel(Level.INFO);   if (srcdir == null || dstdir == null)   System.exit(EX_USAGE);   srcdir_path_=FileSystems.getDefault().getPath(srcdir);   dstdir_path_=FileSystems.getDefault().getPath(dstdir); } "
"public boolean forEach(TShortProcedure procedure){   byte[] states=_states;   short[] set=_set;   for (int i=set.length; i-- > 0; ) {     if (states[i] == FULL && !procedure.execute(set[i])) {       return false;     }   }   return true; } "
"protected void initErrorReporter(){   if (fErrorReporter == null) {     fErrorReporter=new XMLErrorReporter();   }   if (fErrorHandler == null) {     fErrorHandler=new XPointerErrorHandler();   }   fErrorReporter.putMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN,new XPointerMessageFormatter()); } "
"public AddTypeIndexesResponseInfo(){ } "
"public Window(Collection<String> words,int windowSize,int begin,int end){   if (words == null)   throw new IllegalArgumentException(\"Words must be a list of size 3\");   this.words=new ArrayList<>(words);   int windowSize1=windowSize;   this.begin=begin;   this.end=end;   initContext(); } "
"int onDelete(Class<?> modelClass,long id){   analyzeAssociations(modelClass);   int rowsAffected=deleteCascade(modelClass,id);   rowsAffected+=mDatabase.delete(getTableName(modelClass),\"id = \" + id,null);   getForeignKeyTableToDelete().clear();   return rowsAffected; } "
"public VideoSaveQuery(VkApiClient client,UserActor actor){   super(client,\"video.save\",SaveResult.class);   accessToken(actor.getAccessToken()); } "
"public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){   Rect rect=getFramingRectInPreview();   int previewFormat=configManager.getPreviewFormat();   String previewFormatString=configManager.getPreviewFormatString(); switch (previewFormat) { case PixelFormat.YCbCr_420_SP: case PixelFormat.YCbCr_422_SP:     return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height()); default :   if (\"yuv420p\".equals(previewFormatString)) {     return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());   } } throw new IllegalArgumentException(\"Unsupported picture format: \" + previewFormat + '/'+ previewFormatString); } "
"public ExitMonitorStmt newExitMonitorStmt(Value op){   return new JExitMonitorStmt(op); } "
"public Builder cacheInMemory(){   cacheInMemory=true;   return this; } "
"public static boolean isAtLeastJava19(){   return getMajorJavaVersion() >= JAVA_19; } "
"@Override public void focusGained(FocusEvent e){ } "
"public static Map ordinalMap(Iterator tuples,String field){   return ordinalMap(tuples,field,DefaultLiteralComparator.getInstance()); } "
"public GeometricMean(SumOfLogs sumOfLogs){   this.sumOfLogs=sumOfLogs;   incSumOfLogs=false; } "
"protected synchronized void startEvictor(long delay){   if (null != evictor) {     evictor.cancel();     evictor=null;   }   if (delay > 0) {     evictor=new Evictor();     EVICTION_TIMER.schedule(evictor,delay,delay);   } } "
"public void release(){   if (_entries != null)   _entries.freeSLHolder(_pos);   _pos=null;   _entries=null; } "
"public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){   if (src == null) {     return null;   }   Matrix matrix=new Matrix();   matrix.postScale(scaleWidth,scaleHeight);   return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true); } "
"public JSONObject(Object bean){   this();   this.populateMap(bean); } "
"boolean inOpenRange(K key,K least,K fence){   if (key == null)   throw new NullPointerException();   return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0)); } "
"@Override public void actionPerformed(ActionEvent ev){   execute(\"set showAminoAcids=true;\"); } "
"public FriendsEditListQuery userIds(Integer... value){   return unsafeParam(\"user_ids\",value); } "
"protected void rehash(int newCapacity){   int oldCapacity=_set.length;   K oldKeys[]=(K[])_set;   short oldVals[]=_values;   _set=new Object[newCapacity];   Arrays.fill(_set,FREE);   _values=new short[newCapacity];   for (int i=oldCapacity; i-- > 0; ) {     if (oldKeys[i] != FREE && oldKeys[i] != REMOVED) {       K o=oldKeys[i];       int index=insertionIndex(o);       if (index < 0) {         throwObjectContractViolation(_set[(-index - 1)],o);       }       _set[index]=o;       _values[index]=oldVals[i];     }   } } "
"public static JsonRootNode jsonFromString(String input){   try {     return new JdomParser().parse(input);   }  catch (  InvalidSyntaxException e) {     return null;   } } "
"@Override public final void write(final byte[] b){   for (int x=0; x < b.length; x++) {     bos.writeByte(b[x]);   } } "
"private void analyzeAssociations(String className){   Collection<AssociationsInfo> associationInfos=getAssociationInfo(className);   if (fkInCurrentModel == null) {     fkInCurrentModel=new ArrayList<AssociationsInfo>();   }  else {     fkInCurrentModel.clear();   }   if (fkInOtherModel == null) {     fkInOtherModel=new ArrayList<AssociationsInfo>();   }  else {     fkInOtherModel.clear();   }   for (  AssociationsInfo associationInfo : associationInfos) {     if (associationInfo.getAssociationType() == Const.Model.MANY_TO_ONE || associationInfo.getAssociationType() == Const.Model.ONE_TO_ONE) {       if (associationInfo.getClassHoldsForeignKey().equals(className)) {         fkInCurrentModel.add(associationInfo);       }  else {         fkInOtherModel.add(associationInfo);       }     }  else     if (associationInfo.getAssociationType() == Const.Model.MANY_TO_MANY) {       fkInOtherModel.add(associationInfo);     }   } } "
"public void resetNodePool(){   ((SchemaParsingConfig)config).resetNodePool(); } "
"public InlineGMLPreviewPanel(InlineFeatureUpdateInterface parentObj,int noOfRows){   this.parentObj=parentObj;   createUI(noOfRows); } "
"@Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {   if (fInDTD) {     if (fInternalSubset != null && !fInDTDExternalSubset) {       fInternalSubset.append(\"<?\");       fInternalSubset.append(target);       if (data.length > 0) {         fInternalSubset.append(' ').append(data.ch,data.offset,data.length);       }       fInternalSubset.append(\"?>\");     }     return;   }   if (DEBUG_EVENTS) {     System.out.println(\"==>processingInstruction (\" + target + \")\");   }   if (!fDeferNodeExpansion) {     if (fFilterReject) {       return;     }     ProcessingInstruction pi=fDocument.createProcessingInstruction(target,data.toString());     setCharacterData(false);     fCurrentNode.appendChild(pi);     if (fDOMFilter != null && !fInEntityRef && (fDOMFilter.getWhatToShow() & NodeFilter.SHOW_PROCESSING_INSTRUCTION) != 0) {       short code=fDOMFilter.acceptNode(pi); switch (code) { case LSParserFilter.FILTER_INTERRUPT: {           throw Abort.INSTANCE;         } case LSParserFilter.FILTER_REJECT: {       } case LSParserFilter.FILTER_SKIP: {       fCurrentNode.removeChild(pi);       fFirstChunk=true;       return;     } default : {   } } } }  else { int pi=fDeferredDocumentImpl.createDeferredProcessingInstruction(target,data.toString()); fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,pi); } } "
"public int addSegmentList(int index,WKTSegmentList segmentListToAdd){   List<WKTSegmentList> localSegmentList=null;   if (index < 0) {     return -1;   }  else {     if (index >= segmentList.size()) {       localSegmentList=new ArrayList<WKTSegmentList>();       segmentList.add(localSegmentList);     }  else {       localSegmentList=segmentList.get(index);     }     localSegmentList.add(segmentListToAdd);   }   return localSegmentList.size() - 1; } "
"Pattern buildBefore(Map<String,Pattern> regexesByInterpolationName,boolean repeatedGroups) throws EvalException {   StringBuilder fullPattern=new StringBuilder();   int groupCount=1;   for (  Token token : tokens) { switch (token.type) { case INTERPOLATION:       Pattern subPattern=regexesByInterpolationName.get(token.value);     if (subPattern == null) {       throw new EvalException(location,\"Interpolation is used but not defined: \" + token.value);     }   fullPattern.append(String.format(\"(%s)\",subPattern.pattern())); if (groupIndexes.get(token.value).size() > 0 && !repeatedGroups) {   throw new EvalException(location,\"Regex group is used in template multiple times: \" + token.value); } groupIndexes.put(token.value,groupCount); groupCount+=subPattern.groupCount() + 1; break; case LITERAL: fullPattern.append(Pattern.quote(token.value)); break; default : throw new IllegalStateException(token.type.toString()); } } return Pattern.compile(fullPattern.toString(),Pattern.MULTILINE); } "
"public boolean removeHeaderView(View v){   if (mHeaderViewInfos.size() > 0) {     boolean result=false;     ListAdapter adapter=getAdapter();     if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {       result=true;     }     removeFixedViewInfo(v,mHeaderViewInfos);     return result;   }   return false; } "
"public static Object bytesToObject(byte[] bytes) throws IOException, ClassNotFoundException {   ByteArrayInputStream inStream=new ByteArrayInputStream(bytes);   ObjectInputStream in=new ContextClassLoaderObjectInputStream(inStream);   Object data=in.readObject();   in.close();   return data; } "
"public void addBodyDecl(BodyDecl node){   List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();   list.addChild(node); } "
"public void evalNotifications(DispatchContext dctx,Map<String,? extends Object> context,Map<String,Object> result){   for (  ModelNotification notify : this.notifications) {     notify.callNotify(dctx,this,context,result);   } } "
"public int search(String txt){   int M=pat.length();   int N=txt.length();   int skip;   for (int i=0; i <= N - M; i+=skip) {     skip=0;     for (int j=M - 1; j >= 0; j--) {       if (pat.charAt(j) != txt.charAt(i + j)) {         skip=Math.max(1,j - right[txt.charAt(i + j)]);         break;       }     }     if (skip == 0)     return i;   }   return N; } "
"public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){   this.statusCode=statusCode;   this.data=data;   this.headers=headers;   this.notModified=notModified;   this.networkTimeMs=networkTimeMs; } "
"public void clearResources(){   objectCache.clear(); } "
"@Override public void populateField(Date value){   if ((dateModel != null) && (timePicker != null) && (value != null)) {     dateModel.setValue(value);     timePicker.setValue(value);     UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));     oldValueObj=value;     valueUpdated();   } } "
"public boolean isSpawnedByPlayer(){   return x != 0 || y != 0 || z != 0; } "
"public static boolean expressionIsTrue(String expression){   final JEP parser=getJep();   parser.parseExpression(expression);   return isEqual(parser.getValue(),1.0); } "
"public static Bitmap byteToBitmap(byte[] b,int targetWidth,int targeHeight){   if (b == null || b.length == 0) {     return null;   }   final BitmapFactory.Options options=new BitmapFactory.Options();   options.inJustDecodeBounds=true;   BitmapFactory.decodeByteArray(b,0,b.length,options);   int sourceWidth=options.outWidth;   int sourceHeight=options.outHeight;   options.inJustDecodeBounds=false;   int inSampleSize=1;   while (sourceWidth / inSampleSize > targetWidth) {     inSampleSize++;   }   while (sourceHeight / inSampleSize > targeHeight) {     inSampleSize++;   }   if (inSampleSize <= 0) {     inSampleSize=1;   }   options.inSampleSize=inSampleSize;   Bitmap bitmap=BitmapFactory.decodeByteArray(b,0,b.length,options);   return bitmap; } "
"public boolean isRight(){   return !isLeft; } "
"public double cond(){   return s[0] / s[Math.min(m,n) - 1]; } "
"private int measureWidth(int measureSpec){   float result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {     result=specSize;   }  else {     final int count=mViewPager.getAdapter().getCount();     result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return (int)((float)Math.ceil(result)); } "
"public User(String username){   if (username == null)   throw new IllegalArgumentException(\"user's name can't be null\");   this.username=username; } "
"public static double pow(double d,int e){   return pow(d,(long)e); } "
"@Override public void serializeAsOmittedField(Object bean,JsonGenerator jgen,SerializerProvider prov) throws Exception {   if (!jgen.canOmitFields()) {     jgen.writeOmittedField(_name.getValue());   } } "
"public static boolean checkComplexDerivationOk(XSComplexTypeDecl derived,XSTypeDefinition base,short block){   if (derived == SchemaGrammar.fAnyType)   return derived == base;   return checkComplexDerivation(derived,base,block); } "
"public CmpgExpr newCmpgExpr(Value op1,Value op2){   return new JCmpgExpr(op1,op2); } "
"public static void xml(String xml){   Logger.xml(xml); } "
"public CM_QUIT(int opcode,State state,State... restStates){   super(opcode,state,restStates); } "
"public static boolean isBindableType(TypeMirror type){   boolean result;   if (type.getKind().isPrimitive()) {     result=true;   }  else {     TypeKind typeKind=type.getKind(); switch (typeKind) { case DECLARED:       DeclaredType declaredType=(DeclaredType)type;     List<? extends TypeMirror> args=declaredType.getTypeArguments();   result=true; for (TypeMirror argumentType : args) {   if (!isBindableType(argumentType)) {     result=false;     break;   } } break; case WILDCARD: result=true; break; default : result=false; } } LOGGER.log(Level.INFO,String.format(\"isBindableType: %s : %s : %s\",type,type.getKind(),result)); return result; } "
"private static boolean isFastMobileNetwork(Context context){   TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);   if (telephonyManager == null) {     return false;   } switch (telephonyManager.getNetworkType()) { case TelephonyManager.NETWORK_TYPE_1xRTT:     return false; case TelephonyManager.NETWORK_TYPE_CDMA:   return false; case TelephonyManager.NETWORK_TYPE_EDGE: return false; case TelephonyManager.NETWORK_TYPE_EVDO_0: return true; case TelephonyManager.NETWORK_TYPE_EVDO_A: return true; case TelephonyManager.NETWORK_TYPE_GPRS: return false; case TelephonyManager.NETWORK_TYPE_HSDPA: return true; case TelephonyManager.NETWORK_TYPE_HSPA: return true; case TelephonyManager.NETWORK_TYPE_HSUPA: return true; case TelephonyManager.NETWORK_TYPE_UMTS: return true; case TelephonyManager.NETWORK_TYPE_EHRPD: return true; case TelephonyManager.NETWORK_TYPE_EVDO_B: return true; case TelephonyManager.NETWORK_TYPE_HSPAP: return true; case TelephonyManager.NETWORK_TYPE_IDEN: return false; case TelephonyManager.NETWORK_TYPE_LTE: return true; case TelephonyManager.NETWORK_TYPE_UNKNOWN: return false; default : return false; } } "
"public static synchronized void authReconnectingAccount(int accountId,int loginOk,int reconnectKey,LoginConnection client){   ReconnectingAccount reconnectingAccount=reconnectingAccounts.remove(accountId);   if (reconnectingAccount != null && reconnectingAccount.getReconnectionKey() == reconnectKey) {     Account acc=reconnectingAccount.getAccount();     client.setAccount(acc);     accountsOnLS.put(acc.getId(),client);     client.setState(State.AUTHED_LOGIN);     client.setSessionKey(new SessionKey(client.getAccount()));     client.sendPacket(new SM_UPDATE_SESSION(client.getSessionKey()));   }  else {     client.closeNow();   } } "
"private void unlinkReverse(){   if (reverse != null) {     reverse.reverse=null;   }   reverse=null; } "
"public DataSizeAction(String group,String field){   super(group,NO_SIZE);   m_dataField=field; } "
"public Builder doubleClickZoom(Boolean doubleClickZoom){   this.doubleClickZoom=doubleClickZoom;   return this; } "
"@Override public int compareTo(Row o){   boolean isLocal=mySource.getProvider() instanceof LocalSourceProvider;   if (isLocal != (o.mySource.getProvider() instanceof LocalSourceProvider)) {     return isLocal ? -1 : 1;   }   if (myOriginalName == null || o.myOriginalName == null) {     return myOriginalName == null ? (o.myOriginalName == null ? 0 : 1) : -1;   }   return myOriginalName.compareTo(o.myOriginalName); } "
"public boolean isAbnormalSet(AbnormalState id){   return (abnormals & id.getId()) == id.getId(); } "
"public static Builder newBuilder(){   return new Builder(); } "
"public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){   super(Method.GET,url,errorListener);   setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));   mListener=listener;   mDecodeConfig=decodeConfig;   mMaxWidth=maxWidth;   mMaxHeight=maxHeight;   mScaleType=scaleType; } "
"private void noSuccessor(){   if (compute == FRAMES) {     Label l=new Label();     l.frame=new Frame();     l.frame.owner=l;     l.resolve(this,code.length,code.data);     previousBlock.successor=l;     previousBlock=l;   }  else {     currentBlock.outputStackMax=maxStackSize;   }   currentBlock=null; } "
"private void initCropWindow(Rect bitmapRect){   if (initializedCropWindow == false)   initializedCropWindow=true;   if (mFixAspectRatio) {     if (AspectRatioUtil.calculateAspectRatio(bitmapRect) > mTargetAspectRatio) {       Edge.TOP.setCoordinate(bitmapRect.top);       Edge.BOTTOM.setCoordinate(bitmapRect.bottom);       final float centerX=getWidth() / 2f;       final float cropWidth=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateWidth(Edge.TOP.getCoordinate(),Edge.BOTTOM.getCoordinate(),mTargetAspectRatio));       if (cropWidth == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.MIN_CROP_LENGTH_PX) / (Edge.BOTTOM.getCoordinate() - Edge.TOP.getCoordinate());       final float halfCropWidth=cropWidth / 2f;       Edge.LEFT.setCoordinate(centerX - halfCropWidth);       Edge.RIGHT.setCoordinate(centerX + halfCropWidth);     }  else {       Edge.LEFT.setCoordinate(bitmapRect.left);       Edge.RIGHT.setCoordinate(bitmapRect.right);       final float centerY=getHeight() / 2f;       final float cropHeight=Math.max(Edge.MIN_CROP_LENGTH_PX,AspectRatioUtil.calculateHeight(Edge.LEFT.getCoordinate(),Edge.RIGHT.getCoordinate(),mTargetAspectRatio));       if (cropHeight == Edge.MIN_CROP_LENGTH_PX)       mTargetAspectRatio=(Edge.RIGHT.getCoordinate() - Edge.LEFT.getCoordinate()) / Edge.MIN_CROP_LENGTH_PX;       final float halfCropHeight=cropHeight / 2f;       Edge.TOP.setCoordinate(centerY - halfCropHeight);       Edge.BOTTOM.setCoordinate(centerY + halfCropHeight);     }   }  else {     final float horizontalPadding=0.1f * bitmapRect.width();     final float verticalPadding=0.1f * bitmapRect.height();     Edge.LEFT.setCoordinate(bitmapRect.left + horizontalPadding);     Edge.TOP.setCoordinate(bitmapRect.top + verticalPadding);     Edge.RIGHT.setCoordinate(bitmapRect.right - horizontalPadding);     Edge.BOTTOM.setCoordinate(bitmapRect.bottom - verticalPadding);   } } "
"public void updateProcessConfiguration(final ProcessConfigurationUpdate processConfigurationUpdate,final ProcessConfiguration processConfiguration) throws IllegalAccessException, NoSuchFieldException {   fillNonNullFields(processConfigurationUpdate,processConfiguration,CHANGE_ID_FIELD,PROCESS_ID_FIELD);   removeListOfFields(processConfigurationUpdate.getFieldsToRemove(),processConfiguration); } "
"public boolean hasCategoryCombo(){   return categoryCombo != null && !DataElementCategoryCombo.DEFAULT_CATEGORY_COMBO_NAME.equals(categoryCombo.getName()); } "
"public void createPolicies(String path,boolean readFromGlobal) throws Exception {   try {     checkNotNull(path,\"path can't be null\");     checkArgument(path.startsWith(LOCAL_POLICIES_ROOT),\"Invalid path of local policies\");     LocalPolicies localPolicies=new LocalPolicies();     if (readFromGlobal) {       String globalPath=joinPath(POLICIES_ROOT,path.substring(path.indexOf(LOCAL_POLICIES_ROOT) + LOCAL_POLICIES_ROOT.length() + 1));       Policies glbPolicies=configurationCacheService.policiesCache().get(globalPath);       localPolicies.bundles=glbPolicies.bundles;     }     ZooKeeper zk=cache.getZooKeeper();     try {       ZkUtils.createFullPathOptimistic(zk,path,ObjectMapperFactory.getThreadLocal().writeValueAsBytes(localPolicies),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);     }  catch (    KeeperException.NodeExistsException e) {     }   }  catch (  KeeperException.NoNodeException e) {     throw e;   } catch (  Exception e) {     LOG.error(\"Failed to create policies for {} in local zookeeper: {}\",path,e.getMessage(),e);     throw new PulsarServerException(e);   } } "
"protected MarketDeleteQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"public void writeStringNoCompression(String str) throws IOException {   if (str == null) {     writeInt(0);   }  else {     writeInt(str.length());     for (int i=0; i < str.length(); i++)     outs.write((byte)str.charAt(i));     position+=str.length();   } } "
"private void recycleView(View view,int index){   int count=wheel.getViewAdapter().getItemsCount();   if ((index < 0 || index >= count) && !wheel.isCyclic()) {     emptyItems=addView(view,emptyItems);   }  else {     while (index < 0) {       index=count + index;     }     index%=count;     items=addView(view,items);   } } "
"public synchronized void removePeer(JsonRpcPeer peer){   if (mReceivingPeers.remove(peer) != null) {     mReceivingPeersSnapshot=null;     if (mListener != null) {       mListener.onPeerUnregistered(peer);     }   } } "
"public void init$Children(){   children=new ASTNode[1]; } "
"public void clearAllLines(){   if (textArea != null) {     textArea.setText(\"\");   } } "
"public static ULong ulong(long value){   return ULong.valueOf(value); } "
"public SuffixFileFilter(String suffix){   this(suffix,IOCase.SENSITIVE); } "
"public PhotosSearchQuery(VkApiClient client){   super(client,\"photos.search\",SearchResponse.class); } "
"private void fillBuf() throws IOException {   int result=in.read(buf,0,buf.length);   if (result == -1) {     throw new EOFException();   }   pos=0;   end=result; } "
"public static void transform(double[] real,double[] imag,boolean inverse){   if (real == null || imag == null)   throw new NullPointerException(\"Received null argument\");   if (real.length != imag.length)   throw new IllegalArgumentException(\"Arrays must be equal length\");   int N=real.length;   assert MathUtils.isPowerOfTwo(N);   int halfN=N / 2;   int iReverse=0;   for (int i=0; i < N; i++) {     if (i > iReverse) {       double tmpReal=real[i];       double tmpImag=imag[i];       real[i]=real[iReverse];       imag[i]=imag[iReverse];       real[iReverse]=tmpReal;       imag[iReverse]=tmpImag;     }     int b=halfN;     while (b >= 1 && iReverse >= b) {       iReverse-=b;       b>>=1;     }     iReverse+=b;   }   for (int blockLength=2, powerOfTwo=1; blockLength <= N; blockLength<<=1, powerOfTwo++) {     double wStepReal=cosDelta[powerOfTwo];     double wStepImag=sinDelta[powerOfTwo];     if (inverse)     wStepImag=-wStepImag;     double wReal=1;     double wImag=0;     int halfBlockLength=blockLength / 2;     for (int n=0; n < halfBlockLength; n++) {       for (int i=n; i < N; i+=blockLength) {         int j=i + halfBlockLength;         double tmpReal=wReal * real[j] - wImag * imag[j];         double tmpImag=wReal * imag[j] + wImag * real[j];         real[j]=real[i] - tmpReal;         imag[j]=imag[i] - tmpImag;         real[i]+=tmpReal;         imag[i]+=tmpImag;       }       double oldWReal=wReal;       wReal=oldWReal * wStepReal - wImag * wStepImag;       wImag=oldWReal * wStepImag + wImag * wStepReal;     }   }   if (inverse) {     for (int i=0; i < N; i++) {       real[i]/=N;       imag[i]/=N;     }   } } "
"protected PhotosRemoveTagQuery photoId(int value){   return unsafeParam(\"photo_id\",value); } "
"@Deployment(resources={\"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml\"}) public void testAttachmentEntityEvents() throws Exception {   if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {     ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");     Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();     assertNotNull(task);     Attachment attachment=taskService.createAttachment(\"test\",task.getId(),processInstance.getId(),\"attachment name\",\"description\",\"http://activiti.org\");     assertNull(attachment.getUserId());     assertEquals(2,listener.getEventsReceived().size());     ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());     assertEquals(processInstance.getId(),event.getProcessInstanceId());     assertEquals(processInstance.getId(),event.getExecutionId());     assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());     Attachment attachmentFromEvent=(Attachment)event.getEntity();     assertEquals(attachment.getId(),attachmentFromEvent.getId());     event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);     assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());     assertEquals(processInstance.getId(),event.getProcessInstanceId());     assertEquals(processInstance.getId(),event.getExecutionId());     assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());     attachmentFromEvent=(Attachment)event.getEntity();     assertEquals(attachment.getId(),attachmentFromEvent.getId());     listener.clearEventsReceived();     Authentication.setAuthenticatedUserId(\"testuser\");     attachment=taskService.createAttachment(\"test\",task.getId(),processInstance.getId(),\"attachment name\",\"description\",new ByteArrayInputStream(\"test\".getBytes()));     assertNotNull(attachment.getUserId());     assertEquals(\"testuser\",attachment.getUserId());     assertEquals(2,listener.getEventsReceived().size());     event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());     assertEquals(processInstance.getId(),event.getProcessInstanceId());     assertEquals(processInstance.getId(),event.getExecutionId());     assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());     attachmentFromEvent=(Attachment)event.getEntity();     assertEquals(attachment.getId(),attachmentFromEvent.getId());     event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);     assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());     listener.clearEventsReceived();     attachment=taskService.getAttachment(attachment.getId());     attachment.setDescription(\"Description\");     taskService.saveAttachment(attachment);     assertEquals(1,listener.getEventsReceived().size());     event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());     assertEquals(processInstance.getId(),event.getProcessInstanceId());     assertEquals(processInstance.getId(),event.getExecutionId());     assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());     attachmentFromEvent=(Attachment)event.getEntity();     assertEquals(attachment.getId(),attachmentFromEvent.getId());     assertEquals(\"Description\",attachmentFromEvent.getDescription());     listener.clearEventsReceived();     taskService.deleteAttachment(attachment.getId());     assertEquals(1,listener.getEventsReceived().size());     event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);     assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());     assertEquals(processInstance.getId(),event.getProcessInstanceId());     assertEquals(processInstance.getId(),event.getExecutionId());     assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());     attachmentFromEvent=(Attachment)event.getEntity();     assertEquals(attachment.getId(),attachmentFromEvent.getId());   } } "
"public static final SM_SYSTEM_MESSAGE STR_MSG_UNEQUIP_RANKITEM_TIMER_1M(int value0){   return new SM_SYSTEM_MESSAGE(1401328,new DescriptionId(value0)); } "
"@Override public boolean test(PhysicalTable table){   return alignsTo.stream().allMatch(null); } "
"protected static void parseAndIgnoreWhitespace(final String source,final ParsePosition pos){   parseNextCharacter(source,pos);   pos.setIndex(pos.getIndex() - 1); } "
"public AdsGetSuggestionsQueryWithRegions q(String value){   return unsafeParam(\"q\",value); } "
"private void resolve(Method method,Set<FieldSelector> bound,Iterable<PathSegment> path){   for (  PathSegment seg : path) {     if (seg instanceof FieldSegment) {       FieldSegment fieldSeg=(FieldSegment)seg;       FieldSelector selector=resolveFieldPath(method,fieldSeg.getFieldPath());       if (selector != null) {         checkPathParameterConditions(method,selector);         fieldSeg.setFieldSelector(selector);         bound.add(selector);       }       if (!fieldSeg.getSubPath().isEmpty()) {         resolve(method,bound,fieldSeg.getSubPath());       }     }   } } "
"@Override public Collection<PostAggregation> updateNestedQueryPostAggs(Collection<PostAggregation> nestedQueryPostAggs,Map<String,String> oldFieldNameToNewFieldNameMap,String filterSuffix){   Set<PostAggregation> postAggregationSet=new HashSet<>();   for (  PostAggregation postAggregation : nestedQueryPostAggs) {     if (postAggregation instanceof ConstantPostAggregation) {       postAggregationSet.add(postAggregation);     }  else {       oldFieldNameToNewFieldNameMap.put(postAggregation.getName(),postAggregation.getName().concat(filterSuffix));       postAggregationSet.add(postAggregation.withName(oldFieldNameToNewFieldNameMap.get(postAggregation.getName())));     }   }   return postAggregationSet; } "
"public static void v(String msg){   if (LOG_ENABLE) {     Log.v(TAG,buildMsg(msg));   } } "
"public double eatNumericConstant(){   if (!matchNumericConstant())   throw new BadSyntaxException();   double d=tok.nval;   nextToken();   return d; } "
"public void removeContainer(ConstraintWidgetContainer container){   ConstraintWidgetContainer parent=(ConstraintWidgetContainer)container.getParent();   if (parent == null) {     return;   }   for (  ConstraintWidget widget : mWidgets.values()) {     widget.disconnectWidget(container);   }   ArrayList<ConstraintWidget> children=new ArrayList<>(container.getChildren());   for (  ConstraintWidget child : children) {     parent.add(child);     child.resetAnchors();     child.setX(child.getX() + container.getX());     child.setY(child.getY() + container.getY());   }   parent.remove(container);   mWidgets.remove(getTag(container)); } "
"public FaveRemoveLinkQuery(VkApiClient client,UserActor actor,String linkId){   super(client,\"fave.removeLink\",OkResponse.class);   accessToken(actor.getAccessToken());   linkId(linkId); } "
"public static void initCheckpointingTask(){   taskMgr.runTask(new CheckpointTask()); } "
"@Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {   try {     if (augs != null && Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {       if (fContentHandler != null) {         fContentHandler.skippedEntity(name);       }     }  else {       if (fLexicalHandler != null && fLexicalHandlerParameterEntities) {         fLexicalHandler.startEntity(name);       }     }   }  catch (  SAXException e) {     throw new XNIException(e);   } } "
"private void handleDoubleClick(DoubleClickEvent e){   ISelection selection=e.getSelection();   if (selection instanceof IStructuredSelection) {     IStructuredSelection structured=(IStructuredSelection)selection;     if (structured.size() == 1) {       Object first=structured.getFirstElement();       if (first instanceof ISVNRemoteFile) {         openAction.selectionChanged(null,selection);         openAction.run(null);       }  else {         treeViewer.setExpandedState(first,!treeViewer.getExpandedState(first));       }     }   } } "
"public InvalidJobException(String msg,Throwable nested){   super(msg,nested); } "
"@Override public boolean isValueLineVariableLength(){   return mValueLineVariableLength; } "
"public static Map<String,Object> findPartyById(DispatchContext ctx,Map<String,Object> context){   Delegator delegator=ctx.getDelegator();   String idToFind=(String)context.get(\"idToFind\");   String partyIdentificationTypeId=(String)context.get(\"partyIdentificationTypeId\");   String searchPartyFirstContext=(String)context.get(\"searchPartyFirst\");   String searchAllIdContext=(String)context.get(\"searchAllId\");   boolean searchPartyFirst=UtilValidate.isNotEmpty(searchPartyFirstContext) && \"N\".equals(searchPartyFirstContext) ? false : true;   boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && \"Y\".equals(searchAllIdContext) ? true : false;   GenericValue party=null;   List<GenericValue> partiesFound=null;   try {     partiesFound=PartyWorker.findPartiesById(delegator,idToFind,partyIdentificationTypeId,searchPartyFirst,searchAllId);   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(e.getMessage());   }   if (UtilValidate.isNotEmpty(partiesFound)) {     party=EntityUtil.getFirst(partiesFound);     partiesFound.remove(0);   }   Map<String,Object> result=ServiceUtil.returnSuccess();   result.put(\"party\",party);   result.put(\"partiesFound\",partiesFound);   return result; } "
"private void pruneHash(){   Map<KeyType,Long> prunedHash=new Hashtable<KeyType,Long>();   for (  Entry<KeyType,Long> e : hash.entrySet()) {     if (e.getValue() >= minCount) {       prunedHash.put(e.getKey(),e.getValue());     }   }   hash=null;   hash=prunedHash;   pruned=true; } "
"@SuppressWarnings(\"rawtypes\") public Value cast(Value obj,Class cls){   throw new RuntimeException(\"Unsupported operation.\"); } "
"private InputStream downloadUrl(final URL url) throws IOException {   HttpURLConnection conn=(HttpURLConnection)url.openConnection();   conn.setReadTimeout(NET_READ_TIMEOUT_MILLIS);   conn.setConnectTimeout(NET_CONNECT_TIMEOUT_MILLIS);   conn.setRequestMethod(\"GET\");   conn.setDoInput(true);   conn.connect();   return conn.getInputStream(); } "
"@Override public boolean isDefinedFacet(short facetName){   if (fValidationDV == DV_ANYSIMPLETYPE || fValidationDV == DV_ANYATOMICTYPE) {     return false;   }   if ((fFacetsDefined & facetName) != 0) {     return true;   }   if (fPatternType != SPECIAL_PATTERN_NONE) {     return facetName == FACET_PATTERN;   }   if (fValidationDV == DV_INTEGER) {     return facetName == FACET_PATTERN || facetName == FACET_FRACTIONDIGITS;   }   return false; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_ALREADY_REGISTERED_WITH_DIFFICULTY(String worldname0,String value1){   return new SM_SYSTEM_MESSAGE(1401053,worldname0,value1); } "
"public static String colorize(Console console,String diffText){   StringBuilder sb=new StringBuilder();   for (  String line : Splitter.on(\"\\n\").split(diffText)) {     sb.append(\"\\n\");     if (line.startsWith(\"+\")) {       sb.append(console.colorize(AnsiColor.GREEN,line));     }  else     if (line.startsWith(\"-\")) {       sb.append(console.colorize(AnsiColor.RED,line));     }  else {       sb.append(line);     }   }   return sb.toString(); } "
"private static PermissionInfo[] parsePermissions(String s){   try {     ArrayList l=new ArrayList();     StreamTokenizer st=createTokenizer(s);     char delim='\"';     if (st.nextToken() == StreamTokenizer.TT_WORD && st.sval.equals(\"delim\")) {       if (st.nextToken() == '=') {         if (st.nextToken() == StreamTokenizer.TT_WORD) {           if (st.sval.length() > 1) {             throw new IllegalArgumentException(\"excess delimiter characters\");           }           delim=st.sval.charAt(0);         }  else {           delim=(char)st.ttype;         }         if (delim == ';') {           throw new IllegalArgumentException(\"illegal delimiter ';'\");         }       }  else {         st=createTokenizer(s);       }       st.nextToken();     }     st.quoteChar(delim);     do {       String type, name=null, actions=null;       if (st.ttype != StreamTokenizer.TT_WORD) {         throw new IllegalArgumentException(\"expected permission type\");       }       type=st.sval;       st.nextToken();       if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {         l.add(new PermissionInfo(type,null,null));         continue;       }  else       if (st.ttype == delim) {         name=st.sval;       }  else {         throw new IllegalArgumentException(\"expected permission name or ';'\");       }       st.nextToken();       if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {         l.add(new PermissionInfo(type,name,null));         continue;       }  else       if (st.ttype != ',') {         throw new IllegalArgumentException(\"expected ',' or ';'\");       }       if (st.nextToken() != delim) {         throw new IllegalArgumentException(\"expected permission actions\");       }       actions=st.sval;       st.nextToken();       if (st.ttype == StreamTokenizer.TT_EOF || st.ttype == ';') {         l.add(new PermissionInfo(type,name,actions));         continue;       }  else {         throw new IllegalArgumentException(\"expected ';'\");       }     }  while (st.nextToken() != StreamTokenizer.TT_EOF);     return (PermissionInfo[])l.toArray(new PermissionInfo[l.size()]);   }  catch (  IOException ex) {     throw (Error)new InternalError().initCause(ex);   } } "
"public short[] unCompress(byte[] compInput){   try {     return Snappy.uncompressShortArray(compInput);   }  catch (  IOException e) {     LOGGER.error(e,e.getMessage());   }   return null; } "
"public static StringBuffer readContent(File file,Map<String[],String> replaceMap) throws IOException {   StringBuffer content=new StringBuffer();   BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),ENCODING_UTF8));   String line=null;   String currentEndString=null;   try {     while ((line=reader.readLine()) != null) {       if (currentEndString != null) {         if (line.contains(currentEndString)) {           currentEndString=null;         }         continue;       }       if (replaceMap != null) {         for (        Entry<String[],String> entry : replaceMap.entrySet()) {           if (line.contains(entry.getKey()[0])) {             currentEndString=(entry.getKey()[1] != null && !line.contains(entry.getKey()[1])) ? entry.getKey()[1] : null;             line=entry.getValue();             break;           }         }       }       content.append(line + LINE_BREAK);     }   }   finally {     try {       reader.close();     }  catch (    Exception ex) {     }   }   return content; } "
"public void removeStyledLayerDescriptor(StyledLayerDescriptor sldToDelete){ } "
"public void printResults(Writer wr) throws IOException {   for (  ResultSinkInfo sink : this.results.keySet()) {     wr.write(\"Found a flow to sink \" + sink + \", from the following sources:\\n\");     for (    ResultSourceInfo source : this.results.get(sink)) {       wr.write(\"\\t- \" + source.getSource() + \"\\n\");       if (source.getPath() != null && !source.getPath().isEmpty())       wr.write(\"\\t\\ton Path \" + source.getPath() + \"\\n\");     }   } } "
"public long readLong(){   long h=(((long)readInt()) & 0x0FFFFFFFFL) << 32;   long l=((long)readInt()) & (0x0FFFFFFFFL);   return h | l; } "
"public void resetTracking(){   totalTime=0;   drawCycles=0; } "
"public ZWaveSceneActivationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"@Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {   double max=Double.NaN;   if (MathArrays.verifyValues(values,begin,length)) {     max=values[begin];     for (int i=begin; i < begin + length; i++) {       if (!Double.isNaN(values[i])) {         max=(max > values[i]) ? max : values[i];       }     }   }   return max; } "
"public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> itemIds){   super(client,\"market.getById\",GetByIdExtendedResponse.class);   accessToken(actor.getAccessToken());   itemIds(itemIds);   extended(true); } "
"private void writeBinaryTo(DataOutput out,List<Integer> featuresToDrop) throws IOException {   int droppedByteFeatures=0;   int droppedShortFeatures=0;   int droppedContinuousFeatures=0;   for (  int f : featuresToDrop) {     if (f < numByteFeatures) {       droppedByteFeatures++;     }  else     if (f < numByteFeatures + numShortFeatures) {       droppedShortFeatures++;     }  else     if (f < numByteFeatures + numShortFeatures + numContinuousFeatures) {       droppedContinuousFeatures++;     }   }   out.writeInt(numByteFeatures - droppedByteFeatures);   for (int i=0; i < numByteFeatures; i++) {     if (featuresToDrop.contains(i)) {       continue;     }     if (featureWeights != null) {       out.writeFloat(featureWeights[i]);     }  else {       out.writeFloat(0);     }     out.writeUTF(getFeatureName(i));     int numValues=getNumberOfValues(i);     byte numValuesEncoded=(byte)numValues;     out.writeByte(numValuesEncoded);     for (int b=0; b < numValues; b++) {       String value=getFeatureValueAsString(i,b);       out.writeUTF(value);     }   }   out.writeInt(numShortFeatures - droppedShortFeatures);   for (int i=numByteFeatures; i < numByteFeatures + numShortFeatures; i++) {     if (featuresToDrop.contains(i)) {       continue;     }     if (featureWeights != null) {       out.writeFloat(featureWeights[i]);     }  else {       out.writeFloat(0);     }     out.writeUTF(getFeatureName(i));     short numValues=(short)getNumberOfValues(i);     out.writeShort(numValues);     for (short b=0; b < numValues; b++) {       String value=getFeatureValueAsString(i,b);       out.writeUTF(value);     }   }   out.writeInt(numContinuousFeatures - droppedContinuousFeatures);   for (int i=numByteFeatures + numShortFeatures; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {     if (featuresToDrop.contains(i)) {       continue;     }     if (featureWeights != null) {       out.writeFloat(featureWeights[i]);       out.writeUTF(floatWeightFuncts[i - numByteFeatures - numShortFeatures]);     }  else {       out.writeFloat(0);       out.writeUTF(\"\");     }     out.writeUTF(getFeatureName(i));   } } "
"@RequestMapping(value=\"/clients\",method=RequestMethod.GET) public JsonResponse clients(@RequestParam(\"appId\") Long appId){   Response<List<ClientDto>> clientsResp=clusterService.listClients(appId);   if (!clientsResp.isSuccess()) {     return JsonResponse.notOk(clientsResp.getErr());   }   return JsonResponse.ok(clientsResp.getData()); } "
"public boolean findPrevious(String regularExpression){   return findAndUncollapseNext(regularExpression,true,false) > 0; } "
"public static List<Entry> loadEntriesFromFile(String path){   File sdcard=Environment.getExternalStorageDirectory();   File file=new File(sdcard,path);   List<Entry> entries=new ArrayList<Entry>();   try {     @SuppressWarnings(\"resource\") BufferedReader br=new BufferedReader(new FileReader(file));     String line;     while ((line=br.readLine()) != null) {       String[] split=line.split(\"#\");       if (split.length <= 2) {         entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));       }  else {         float[] vals=new float[split.length - 1];         for (int i=0; i < vals.length; i++) {           vals[i]=Float.parseFloat(split[i]);         }         entries.add(new BarEntry(Integer.parseInt(split[split.length - 1]),vals));       }     }   }  catch (  IOException e) {     Log.e(LOG,e.toString());   }   return entries; } "
"public NotesCreateCommentQuery replyTo(Integer value){   return unsafeParam(\"reply_to\",value); } "
"public GroupsEditPlaceQuery cityId(Integer value){   return unsafeParam(\"city_id\",value); } "
"public EnvVar(EnvVar envVar,boolean predefined){   this.name=envVar.name;   this.type=envVar.type;   this.value=envVar.value;   this.predefined=predefined; } "
"public static int calcCount(int totalhosts,int vcclustersize){   final Float f=((float)totalhosts / (float)vcclustersize);   final int i=(int)Math.ceil(f);   return i; } "
"public OutputStream put(String key) throws FileNotFoundException {   return new xFileOutputStream(mCache.newFile(key)); } "
"public Builder maxWidth(Number maxWidth){   this.maxHeight=maxWidth;   return this; } "
"public boolean isSelected(){   ClusterViewer viewer=getViewer();   return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.HELLINGER); } "
"boolean canDragView(V view){   return false; } "
"public void print(StringBuffer sb){   if (root != null) {     root.print(sb,getRootQuantity(),0);   } } "
"void acknowledge() throws CommitFailedException {   if (_logger.isLoggable(Level.FINE)) {     _logger.fine(\"GSsessionImpl.acknowledge(): \" + m_sessionID);   }   unackedMessages.clear();   if (this.m_isQueue && !isAutoAck()) {     if (_logger.isLoggable(Level.FINE)) {       _logger.log(Level.FINE,\"Acknowledging messages. Txn=\" + _tx);     }     commitLocalTransaction();   } } "
"public FieldConfigTTF(FieldConfigCommonData commonData){   super(commonData,SYMBOLTYPE_FIELD_STATE_RESOURCE); } "
"public static int computeEditDistance(String alignedQuery,String alignedReference){   int distance=0;   for (int i=0; i < alignedQuery.length(); i++) {     if (alignedQuery.charAt(i) == '-' || alignedReference.charAt(i) == '-' || alignedQuery.charAt(i) != alignedReference.charAt(i))     distance++;   }   return distance; } "
"public static void burnInventory(EntityPlayerMP player,int burnAmount,ItemStack input){   if (!fuelCaches.containsKey(player))   fuelCaches.put(player,-burnAmount);  else   fuelCaches.put(player,fuelCaches.get(player) - burnAmount);   int index=0;   while (fuelCaches.get(player) < 0 && index < player.inventory.mainInventory.length) {     ItemStack is=player.inventory.mainInventory[index];     if (is != null) {       int burnTime=TileEntityFurnace.getItemBurnTime(is);       if (burnTime != 0) {         if (is.stackSize > 1)         is.stackSize--;  else {           if (is.getItem() == Items.lava_bucket) {             if (input.getItem() == Item.getItemFromBlock(Blocks.sponge) && input.getMetadata() == 1)             player.inventory.mainInventory[index]=new ItemStack(Items.water_bucket);  else             player.inventory.mainInventory[index]=new ItemStack(Items.bucket);           }  else           player.inventory.mainInventory[index]=null;           index++;         }         fuelCaches.put(player,fuelCaches.get(player) + burnTime);       }  else       index++;     }  else     index++;   } } "
"public GraphSimilarity compareMeaningsOf(Vertex vNode1,Vertex vNode2){   GraphSimilarity isRes=new GraphSimilarity();   return isRes; } "
"public synchronized long size(){   return size; } "
"@JsonIgnore public boolean isDeleted(){   return state.equals(State.DELETED); } "
"private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){   if (entity != null) {     requestBase.setEntity(entity);   }   return requestBase; } "
"public PointsToSet reachingObjectsOfArrayElement(PointsToSet s){   return reachingObjectsInternal(s,ArrayElement.v()); } "
"public IdQuery(String typeName,Object id,Object routing,QueryResultType queryResultType){   this(typeName,id,routing,queryResultType,0); } "
"@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment,MessageButtonBehaviour messageButtonBehaviour){   adapter.addItem(slideFragment);   messageButtonBehaviours.put(adapter.getLastItemPosition(),messageButtonBehaviour); } "
"private void refreshDays(int month,int year){   Calendar calendar=DateFormat.getDateTimeInstance().getCalendar();   calendar.setTime(date);   calendar.set(Calendar.DAY_OF_MONTH,1);   calendar.set(Calendar.MONTH,month);   calendar.set(Calendar.YEAR,year);   int day=daysComp.getSelectedDay();   if (day > 0) {     if (day > calendar.getActualMaximum(Calendar.DAY_OF_MONTH)) {       day=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);     }     calendar.set(Calendar.DAY_OF_MONTH,day);   }   date=calendar.getTime();   refreshDate(); } "
"protected void decorateTextLabel(ISVNLocalResource svnResource,LocalResourceStatus status,IDecoration decoration,boolean isDirty){   Map bindings=new HashMap(6);   if (svnResource.getIResource().getLocation() == null) {     return;   }   if (status.isUnversioned())   return;   IDecoratorComponent[][] format;   int type=svnResource.getIResource().getType();   if (type == IResource.FOLDER) {     format=folderDecoratorFormat;   }  else   if (type == IResource.PROJECT) {     format=projectDecoratorFormat;   }  else {     format=fileDecoratorFormat;   }   if (isDirty & !status.isAdded()) {     bindings.put(SVNDecoratorConfiguration.DIRTY_FLAG,dirtyFlag);   }   if (status.getUrlString() != null) {     String label=null;     ISVNRepositoryLocation repository=status.getRepository();     if (repository != null) {       label=status.getRepository().getLabel();     }     bindings.put(SVNDecoratorConfiguration.RESOURCE_LABEL,label == null ? status.getUrlString() : label);     bindings.put(SVNDecoratorConfiguration.RESOURCE_URL,Util.unescape(status.getUrlString()));     SVNUrl repositoryRoot=null;     if (repository != null) {       repositoryRoot=repository.getRepositoryRoot();     }     if (repositoryRoot != null) {       int urlLen=status.getUrlString().length();       int rootLen=repositoryRoot.toString().length() + 1;       String shortUrl;       if (urlLen > rootLen)       shortUrl=status.getUrlString().substring(rootLen);  else       shortUrl=status.getUrlString();       bindings.put(SVNDecoratorConfiguration.RESOURCE_URL_SHORT,Util.unescape(shortUrl));     }   }   if (status.isAdded()) {     bindings.put(SVNDecoratorConfiguration.ADDED_FLAG,addedFlag);   }  else   if (SVNStatusKind.EXTERNAL.equals(status.getTextStatus())) {     bindings.put(SVNDecoratorConfiguration.EXTERNAL_FLAG,externalFlag);   }  else {     if ((status.getTextStatus() != SVNStatusKind.UNVERSIONED) && (status.getTextStatus() != SVNStatusKind.ADDED)) {       if (status.getLastChangedRevision() != null) {         bindings.put(SVNDecoratorConfiguration.RESOURCE_REVISION,status.getLastChangedRevision().toString());       }       if (status.getLastCommitAuthor() != null) {         bindings.put(SVNDecoratorConfiguration.RESOURCE_AUTHOR,status.getLastCommitAuthor());       }     }     if (status.getLastChangedDate() != null) {       bindings.put(SVNDecoratorConfiguration.RESOURCE_DATE,dateFormat.format(status.getLastChangedDate()));     }   }   SVNDecoratorConfiguration.decorate(decoration,format,bindings); } "
"private boolean isPermissionRequested(String permission){   SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(this);   return preferences.getBoolean(permission,false); } "
"public HeaderHolder(View itemView){   super(itemView);   ImageButton backBtn=(ImageButton)itemView.findViewById(R.id.item_about_header_backButton);   if (Mysplash.getInstance().isLightTheme()) {     backBtn.setImageResource(R.drawable.ic_toolbar_back_light);   }  else {     backBtn.setImageResource(R.drawable.ic_toolbar_back_dark);   }   backBtn.setOnClickListener(this);   this.appIcon=(ImageView)itemView.findViewById(R.id.item_about_header_appIcon);   TextView version=(TextView)itemView.findViewById(R.id.item_about_header_versionCode);   DisplayUtils.setTypeface(itemView.getContext(),version);   itemView.findViewById(R.id.item_about_header_unsplashContainer).setOnClickListener(this);   TextView unsplashTitle=(TextView)itemView.findViewById(R.id.item_about_header_unsplashTitle);   unsplashTitle.setText(itemView.getContext().getString(R.string.unsplash));   DisplayUtils.setTypeface(itemView.getContext(),unsplashTitle);   TextView unsplashContent=(TextView)itemView.findViewById(R.id.item_about_header_unsplashContent);   unsplashContent.setText(itemView.getContext().getString(R.string.about_unsplash));   DisplayUtils.setTypeface(itemView.getContext(),unsplashContent); } "
"public boolean hasField(String fldName){   return fields().contains(fldName); } "
"RemoteConnectionImpl() throws RemoteException {   try {     tx=VanillaDb.txMgr().newTransaction(isolationLevel,readOnly);   }  catch (  Exception e) {     throw new RemoteException(\"error creating transaction \",e);   } } "
"public RunnableDistributedTaskAdapter(){ } "
"private int testInRange(long actual,long expected,long epsilon){   long min=expected - epsilon;   long max=expected + epsilon;   return actual < min ? -1 : actual > max ? 1 : 0; } "
"public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {   if (srcFile == null) {     throw new NullPointerException(\"Source must not be null\");   }   if (destDir == null) {     throw new NullPointerException(\"Destination directory must not be null\");   }   if (!destDir.exists() && createDestDir) {     destDir.mkdirs();   }   if (!destDir.exists()) {     throw new FileNotFoundException(\"Destination directory '\" + destDir + \"' does not exist [createDestDir=\"+ createDestDir+ \"]\");   }   if (!destDir.isDirectory()) {     throw new IOException(\"Destination '\" + destDir + \"' is not a directory\");   }   moveFile(srcFile,new File(destDir,srcFile.getName())); } "
"static public void apply(String fileName,Document doc,String[] cNames,boolean tabSeparator,long multiplier) throws IOException {   String separator=(tabSeparator ? \"\\t\" : \",\");   System.err.println(\"Importing summary of\" + Basic.toString(cNames,\", \") + \" assignments from CSV file\");   System.err.println(\"Specified line format: classname\" + separator + \"count{\"+ separator+ \"count\"+ separator+ \"count...}\");   DataTable table=doc.getDataTable();   table.clear();   table.setCreator(ProgramProperties.getProgramName());   table.setCreationDate((new Date()).toString());   table.setAlgorithm(ClassificationType.Taxonomy.toString(),\"Summary\");   doc.getActiveViewers().clear();   doc.getActiveViewers().addAll(Arrays.asList(cNames));   IdParser[] idParsers=new IdParser[cNames.length];   int taxonomyIndex=-1;   for (int i=0; i < cNames.length; i++) {     String cName=cNames[i];     idParsers[i]=ClassificationManager.get(cName,true).getIdMapper().createIdParser();     if (!cName.equals(Classification.Taxonomy)) {       ClassificationManager.ensureTreeIsLoaded(cName);       doc.getActiveViewers().add(cName);     }  else {       taxonomyIndex=i;     }     idParsers[i].setUseTextParsing(true);   }   String[] names=null;   final Map<Integer,Integer[]>[] class2counts=new HashMap[cNames.length];   for (int i=0; i < class2counts.length; i++) {     class2counts[i]=new HashMap<>();   }   Integer[][] total=new Integer[cNames.length][];   int[] add=null;   int numberOfColumns=-1;   int numberOfErrors=0;   boolean first=true;   int numberOfLines=0;   try (FileInputIterator it=new FileInputIterator(fileName)){     while (it.hasNext()) {       numberOfLines++;       String aLine=it.next().trim();       if (aLine.length() == 0 || (!first && aLine.startsWith(\"#\")))       continue;       try {         String[] tokens=aLine.split(separator);         if (numberOfColumns == -1) {           numberOfColumns=tokens.length;         }  else         if (tokens.length != numberOfColumns)         throw new IOException(\"Line \" + it.getLineNumber() + \": incorrect number of columns, expected \"+ numberOfColumns+ \", got: \"+ tokens.length+ \" (\"+ aLine+ \")\");         if (first) {           first=false;           boolean headerLinePresent=false;           if (tokens.length < 2)           throw new IOException(\"Line \" + it.getLineNumber() + \": incorrect number of columns, expected at least 2, got: \"+ tokens.length+ \" (\"+ aLine+ \")\");           if (tokens[0].startsWith(\"#\"))           tokens[0]=tokens[0].substring(1).trim();           if (tokens[0].equalsIgnoreCase(\"name\") || tokens[0].equalsIgnoreCase(\"names\") || tokens[0].equalsIgnoreCase(\"samples\")|| tokens[0].equalsIgnoreCase(\"SampleID\")|| tokens[0].equalsIgnoreCase(SampleAttributeTable.SAMPLE_ID)|| tokens[0].equalsIgnoreCase(\"Dataset\")|| tokens[0].equalsIgnoreCase(\"Datasets\")) {             names=new String[tokens.length - 1];             System.arraycopy(tokens,1,names,0,names.length);             table.setSamples(names,null,null,null);             headerLinePresent=true;           }  else           if (tokens.length == 2) {             names=new String[]{Basic.getFileBaseName((new File(fileName)).getName())};           }  else {             names=new String[tokens.length - 1];             for (int i=0; i < names.length; i++)             names[i]=\"Sample\" + (i + 1);           }           for (int i=0; i < total.length; i++) {             total[i]=newZeroedIntegerArray(names.length);           }           if (headerLinePresent)           continue;         }         if (add == null)         add=new int[names.length];         for (int i=1; i < tokens.length; i++) {           String number=tokens[i].trim();           if (number.length() == 0)           add[i - 1]=0;  else           if (Basic.isInteger(number))           add[i - 1]=(int)(multiplier * Integer.parseInt(number));  else           add[i - 1]=(int)(multiplier * Double.parseDouble(number));         }         boolean found=false;         for (int i=0; !found && i < idParsers.length; i++) {           int id;           if (i == taxonomyIndex && Basic.isInteger(tokens[0]))           id=Basic.parseInt(tokens[1]);  else           id=idParsers[i].getIdFromHeaderLine(tokens[0]);           if (id != 0) {             Integer[] counts=getOrCreate(class2counts[i],id,names.length);             addToArray(counts,add);             addToArray(total[i],add);             found=true;           }         }         if (!found) {           System.err.println(\"Unrecognized name: \" + tokens[0]);           for (int i=0; i < idParsers.length; i++) {             Integer[] counts=getOrCreate(class2counts[i],IdMapper.UNASSIGNED_ID,names.length);             addToArray(counts,add);             addToArray(total[i],add);           }         }       }  catch (      Exception ex) {         System.err.println(\"Error: \" + ex + \", skipping\");         numberOfErrors++;       }     }   }    Integer[] sizes=new Integer[names.length];   System.arraycopy(total[taxonomyIndex],0,sizes,0,sizes.length);   table.setSamples(names,null,sizes,null);   for (int i=0; i < cNames.length; i++) {     table.getClassification2Class2Counts().put(cNames[i],class2counts[i]);   }   long totalReads=0;   for (  Integer size : sizes) {     totalReads+=size;   }   table.setTotalReads(totalReads);   doc.setNumberReads(totalReads);   System.err.println(\"Number of lines read: \" + numberOfLines);   if (numberOfErrors > 0)   NotificationsInSwing.showWarning(MainViewer.getLastActiveFrame(),\"Number of lines skipped during import: \" + numberOfErrors);   for (int i=0; i < cNames.length; i++) {     System.err.println(\"Different \" + (cNames[i].length() <= 4 ? cNames[i] : cNames[i].substring(0,3) + \".\") + \" classes identified: \"+ class2counts[i].size());   }   System.err.println(\"done (\" + totalReads + \" reads)\"); } "
"public String toFormattedString(){   try {     String localPath=getLocalPath() != null ? getLocalPath() : \"\";     return localPath + \" status:\" + getUploadStatus()+ \" result:\"+ (getLastResult() == null ? \"null\" : getLastResult().getValue());   }  catch (  NullPointerException e) {     Log_OC.d(TAG,\"Exception \" + e.toString());     return (e.toString());   } } "
"public HNMFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {   load(fileName); } "
"boolean shouldShowErrorCodeInBar(){   return !(ChromeVersionInfo.isStableBuild() || ChromeVersionInfo.isBetaBuild()); } "
"public boolean isCritical(){   return true; } "
"void onAnchorReady(RecyclerView.State state,AnchorInfo anchorInfo){ } "
"public NewsfeedSaveListQuery sourceIds(Integer... value){   return unsafeParam(\"source_ids\",value); } "
"public EntityQuery select(Set<String> fieldsToSelect){   this.fieldsToSelect=fieldsToSelect;   return this; } "
"@Override protected void clearCachedAuthenticationInfo(PrincipalCollection principals){   if (_clearCaches) {     super.clearCachedAuthenticationInfo(principals);   } } "
"public boolean plusFound(){   return plusFound; } "
"private void drawBuilding(Canvas canvas){   final Matrix matrix=mMatrix;   matrix.reset();   float dragPercent=Math.min(1f,Math.abs(mPercent));   float buildingScale;   buildingScale=BUILDING_INITIAL_SCALE + (BUILDING_FINAL_SCALE - BUILDING_INITIAL_SCALE) * dragPercent;   matrix.preScale(buildingScale,buildingScale);   final float offsetX=mScreenWidth / 2 - mBuilding.getWidth() / 2 + (1f - buildingScale) * mBuilding.getWidth() / 2;   final float offsetY=mBuildingTopOffset;   matrix.postTranslate(offsetX,offsetY);   canvas.drawBitmap(mBuilding,matrix,null); } "
"private static int addAllTabs(Stack stack,StackTab[] outList,int index){   StackTab[] stackTabs=stack.getTabs();   if (stackTabs != null) {     for (int i=0; i < stackTabs.length; ++i) {       outList[index++]=stackTabs[i];     }   }   return index; } "
"@Deployment public void testSignalThrowAndCatchInSameTransaction(){   String fileExistsVar=\"fileexists\";   FileExistsMock.getInstance().removeFile();   ProcessInstance firstProcessInstance=runtimeService.startProcessInstanceByKey(\"signalBoundaryProcess\");   assertNotNull(firstProcessInstance);   Task firstTask=taskService.createTaskQuery().singleResult();   assertEquals(\"Add a file\",firstTask.getName());   Map<String,Object> vars=runtimeService.getVariables(firstTask.getExecutionId());   assertEquals(false,vars.get(fileExistsVar));   ProcessInstance secondProcessInstance=runtimeService.startProcessInstanceByKey(\"signalBoundaryProcess\");   assertNotNull(secondProcessInstance);   List<Task> tasks=taskService.createTaskQuery().list();   assertEquals(2,tasks.size());   Task secondTask=taskService.createTaskQuery().processInstanceId(secondProcessInstance.getProcessInstanceId()).singleResult();   assertEquals(\"Add a file\",secondTask.getName());   vars=runtimeService.getVariables(secondTask.getExecutionId());   assertEquals(false,vars.get(fileExistsVar));   taskService.claim(firstTask.getId(),\"user\");   FileExistsMock.getInstance().touchFile();   taskService.complete(firstTask.getId());   List<Task> usingTask=taskService.createTaskQuery().taskName(\"Use the file\").list();   assertEquals(1,usingTask.size()); } "
"protected PhotosDeleteQuery photoId(int value){   return unsafeParam(\"photo_id\",value); } "
"public void rebuildStructure(IDexUnit unit,Signature sig){   logger.info(\"methodSizeBar \" + methodSizeBar);   logger.info(\"matchedInstusPercentageBar \" + matchedInstusPercentageBar);   logger.info(\"Signature matching 1 start...\");   final long startTime=System.currentTimeMillis();   matchingVerOne(unit,sig);   final long endTime=System.currentTimeMillis();   logger.info(\"Signature matching 1 start completed! (Execution Time: \" + (endTime - startTime) / 1000 + \"s)\");   logger.info(\"******************************************************************\");   logger.info(\"Signature matching 2 start...\");   final long startTime1=System.currentTimeMillis();   if (Thread.currentThread().isInterrupted()) {     return;   }   matchingVerTwo(unit,sig);   final long endTime1=System.currentTimeMillis();   logger.info(\"Signature matching 2 start completed! (Execution Time: \" + (endTime1 - startTime1) / 1000 + \"s)\");   moveExceptionalClasses(unit);   storeAllMatchedMethods_new_orgPath(unit);   storeAllMatchedClasses_new_orgPath(unit); } "
"public VarcharConstantRange(String low,boolean lowIncl,String high,boolean highIncl){   if (low == null)   this.low=NEG_INF;  else {     this.low=new VarcharConstant(low);     hasLowerBound=true;     this.lowIncl=lowIncl;   }   if (high == null)   this.high=INF;  else {     this.high=new VarcharConstant(high);     this.highIncl=highIncl;   } } "
"private void checkTheTicTacTocGameWin(int x,int y,int tag){   int _x=0;   int _y=0;   for (int i=x, j=y; ; i--, j--) {     _x=i;     _y=j;     if (i <= 0)     break;     if (j <= 0)     break;   }   for (int i=_y, j=_x; ; i++, j++) {     subCheckTheTicTacTocWin(tag,i,j);     if (i >= 8)     break;     if (j >= 11)     break;   }   _counter=0;   _x=x;   _y=0;   for (int i=_y, j=_x; i < 9; i++)   subCheckTheTicTacTocWin(tag,i,j);   _counter=0;   _x=0;   _y=y;   for (int i=_y, j=_x; j < 12; j++)   subCheckTheTicTacTocWin(tag,i,j);   _counter=0;   for (int i=x, j=y; ; i--, j++) {     _x=i;     _y=j;     if (i <= 0)     break;     if (j >= 8)     break;   }   for (int i=_y, j=_x; ; i--, j++) {     subCheckTheTicTacTocWin(tag,i,j);     if (i <= 0)     break;     if (j >= 11)     break;   } } "
"ConstrainableRegistrarProxy(Object server,ServiceID registrarID,MethodConstraints constraints){   super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),registrarID);   this.constraints=constraints; } "
"private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){   ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());   FilterFactory ff=CommonFactoryFinder.getFilterFactory();   Map<String,Expression> options=contrastEnhancement.getOptions();   options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));   options.put(\"minValue\",ff.literal(\"1\"));   options.put(\"maxValue\",ff.literal(\"5\"));   SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);   SelectedChannelType[] channels=new SelectedChannelType[3];   channels[0]=channelType;   channels[1]=channelType;   channels[2]=channelType;   ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);   return channelSelection; } "
"public String toString(){   StringBuffer sBuffer=new StringBuffer();   sBuffer.append(getClass().getName()).append(\"[serviceID=\").append(serviceID).append(\", serviceTypes=\");   if (serviceTypes != null) {     for (int i=0; i < serviceTypes.length - 1; i++)     sBuffer.append(serviceTypes[i]).append(\" \");     sBuffer.append(serviceTypes[serviceTypes.length - 1]);   }  else {     sBuffer.append((Object)null);   }   sBuffer.append(\", attributeSetTemplates=\");   if (attributeSetTemplates != null) {     for (int i=0; i < attributeSetTemplates.length - 1; i++)     sBuffer.append(attributeSetTemplates[i]).append(\" \");     sBuffer.append(attributeSetTemplates[attributeSetTemplates.length - 1]);   }  else {     sBuffer.append((Object)null);   }   return sBuffer.append(\"]\").toString(); } "
"public int provideBlockThreshold(){   return 1000; } "
"private static int transformClassAccessForInstantRun(int access){   AccessRight accessRight=AccessRight.fromNodeAccess(access);   return accessRight == AccessRight.PACKAGE_PRIVATE ? access | Opcodes.ACC_PUBLIC : access; } "
"public boolean hasBlock(){   return getBlockOpt().getNumChild() != 0; } "
"private Index(DataInput raf) throws IOException, MaryConfigurationException {   assert raf != null : \"null argument\";   load(raf); } "
"private void dismiss(){   preferencesManager.setDisplayed(usageId);   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {     if (isRevealAnimationEnabled)     exitRevealAnimation();  else     startFadeout();   }  else {     startFadeout();   } } "
"public static double sumOfSquares(double[] vector){   double ret=0;   for (  double d : vector)   ret+=Math.pow(d,2);   return ret; } "
"public boolean isApplicable(){   return true; } "
"protected void scheduleNewInvokerIfAppropriate(){   if (isRunning()) { synchronized (this.activeInvokerMonitor) {       if (this.scheduledInvokers.size() < this.maxConcurrentConsumers && !hasIdleInvokers()) {         scheduleNewInvoker();         if (logger.isDebugEnabled()) {           logger.debug(message(\"Raised scheduled invoker count [\" + scheduledInvokers.size() + \"]\"));         }       }     }   } } "
"public <T2>Pattern2<T,T2> and(Observable<T2> right){   return JoinPatterns.and(o,right); } "
"public void discovered(DiscoveryEvent e){   ServiceRegistrar[] proxys=e.getRegistrars();   Map groupsMap=e.getGroups();   HashMap discoveredGroupsMap=new HashMap(proxys.length);   for (int i=0; i < proxys.length; i++) { synchronized (discoveredSet) {       ProxyReg reg=findReg(proxys[i]);       if (reg == null) {         reg=new ProxyReg(proxys[i],(String[])(groupsMap.get(proxys[i])),FROM_LOCATOR);         addDiscoveredSet(reg);         discoveredGroupsMap.put(proxys[i],groupsMap.get(proxys[i]));       }  else {         reg.addFrom(FROM_LOCATOR);       }     }   }   notifyListener(discoveredGroupsMap,DISCOVERED); } "
"public GroupsJoinQuery join(UserActor actor){   return new GroupsJoinQuery(getClient(),actor); } "
"public void onSuccess(int statusCode,byte[] binaryData){   onSuccess(binaryData); } "
"public static Histogram joinHistogram(Histogram hist1,Histogram hist2,String fldName1,String fldName2){   Histogram prodHist=ProductPlan.productHistogram(hist1,hist2);   Set<String> group=new HashSet<String>();   group.add(fldName1);   group.add(fldName2);   return SelectPlan.joinFieldsHistogram(prodHist,group); } "
"@Override public void startAttlist(String elementName,Augmentations augmentations) throws XNIException { } "
"public static java.sql.Timestamp nowTimestamp(){   return getTimestamp(System.currentTimeMillis()); } "
"public short putIfAbsent(K key,short value){   int index=insertionIndex(key);   if (index < 0)   return _values[-index - 1];   return doPut(key,value,index); } "
"@Override protected ModelAndView doResolveException(final HttpServletRequest request,final HttpServletResponse response,final Object handler,final Exception exception){   LOGGER.debug(\"In DASTExceptionHandler\");   response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);   AppScanUtils.sendErrorMail(exception);   if (exception instanceof DASTProxyException) {     if (AppScanUtils.isNotNull(((DASTProxyException)exception).getErrorCode())) {       return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_ERROR_IDENTIFIER,((DASTProxyException)exception).getErrorCode());     }  else {       LOGGER.error(exception);       return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_ERROR_IDENTIFIER,((DASTProxyException)exception).getErrorMessage());     }   }   return new ModelAndView(view,\"error\",\"Exception has occured. Please contact the site administrator\"); } "
"public void notifySkilluseObservers(Skill skill){   notifyObservers(ObserverType.SKILLUSE,skill); } "
"public boolean isEditable(int row){   return isEditable() && getRowValue(row).mySource.getProvider().isModifiable(); } "
"public static void i(Class<?> clazz,String msg){   if (isDebug) {     Log.i(clazz.getSimpleName(),msg);   } } "
"public boolean isDone(){   return this.taskManager_.isDone(); } "
"public BeforeExtended(){   super(null,null); } "
"public static String toTree(@NotNull List<NlComponent> roots,boolean includeIdentity){   StringBuilder sb=new StringBuilder(200);   for (  NlComponent root : roots) {     describe(sb,root,0,includeIdentity);   }   return sb.toString().trim(); } "
"public String encode2XML(){   return null; } "
"private static boolean isDigit(char p_char){   return p_char >= '0' && p_char <= '9'; } "
"private void transform(){   final int m=householderVectors.length;   final double[] z=new double[m];   for (int k=0; k < m - 1; k++) {     final double[] hK=householderVectors[k];     main[k]=hK[k];     double xNormSqr=0;     for (int j=k + 1; j < m; ++j) {       final double c=hK[j];       xNormSqr+=c * c;     }     final double a=(hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);     secondary[k]=a;     if (a != 0.0) {       hK[k + 1]-=a;       final double beta=-1 / (a * hK[k + 1]);       Arrays.fill(z,k + 1,m,0);       for (int i=k + 1; i < m; ++i) {         final double[] hI=householderVectors[i];         final double hKI=hK[i];         double zI=hI[i] * hKI;         for (int j=i + 1; j < m; ++j) {           final double hIJ=hI[j];           zI+=hIJ * hK[j];           z[j]+=hIJ * hKI;         }         z[i]=beta * (z[i] + zI);       }       double gamma=0;       for (int i=k + 1; i < m; ++i) {         gamma+=z[i] * hK[i];       }       gamma*=beta / 2;       for (int i=k + 1; i < m; ++i) {         z[i]-=gamma * hK[i];       }       for (int i=k + 1; i < m; ++i) {         final double[] hI=householderVectors[i];         for (int j=i; j < m; ++j) {           hI[j]-=hK[i] * z[j] + z[i] * hK[j];         }       }     }   }   main[m - 1]=householderVectors[m - 1][m - 1]; } "
"public int hashCode(){   if (A.nextSetBit(0) < B.nextSetBit(0))   return A.hashCode() + 37 * B.hashCode();  else   return B.hashCode() + 37 * A.hashCode(); } "
"public java.lang.Boolean isEscaped(){   return escaped; } "
"protected boolean isValidFragment(String fragment){   if (fragment == null) {     return true;   }   return isOff(NO_FRAGMENTS); } "
"@Override public void createUI(){   FieldPanel fieldPanel=createFieldPanel(0,\"\");   fieldPanel.setLayout(new BorderLayout());   externalGraphicPanel=new ExternalGraphicDetails(this,FunctionManager.getInstance());   fieldPanel.add(externalGraphicPanel,BorderLayout.CENTER);   Dimension panelSize=externalGraphicPanel.getPanelSize();   fieldPanel.setPreferredSize(panelSize); } "
"private void addBlock(Unit head,Unit tail,int index,int length,List<Block> blockList,Map<Unit,Block> unitToBlock){   Block block=new Block(head,tail,mBody,index,length,this);   blockList.add(block);   unitToBlock.put(tail,block);   unitToBlock.put(head,block); } "
"public StandardDocumentComparator(){   sGraph=new GraphSimilarity();   sHistogram=new GraphSimilarity(); } "
"public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_ENABLE_NO_CHAT(String value0){   return new SM_SYSTEM_MESSAGE(1300808,value0); } "
"public int indexOf(int offset,short value){   for (int i=offset; i < _pos; i++) {     if (_data[i] == value) {       return i;     }   }   return -1; } "
"public GroupsSearchQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"protected String generateDropTableSQL(TableModel tableModel){   return generateDropTableSQL(tableModel.getTableName()); } "
"@Override public boolean markSupported(){   return fInputStream.markSupported(); } "
"private static void startFetchingAccountsInformation(Context context,Profile profile){   Account[] accounts=AccountManagerHelper.get(context).getGoogleAccounts();   for (int i=0; i < accounts.length; i++) {     startFetchingAccountInformation(context,profile,accounts[i].name);   } } "
"@Override public DimensionColumnDataChunk[] readDimensionChunks(FileHolder fileReader,int... blockIndexes){   DimensionColumnDataChunk[] dataChunks=new DimensionColumnDataChunk[dimensionColumnChunk.size()];   for (int i=0; i < blockIndexes.length; i++) {     dataChunks[blockIndexes[i]]=readDimensionChunk(fileReader,blockIndexes[i]);   }   return dataChunks; } "
"private void removeEntry(){   model.removeEntries(table.getSelectionModel().getMinSelectionIndex(),table.getSelectionModel().getMaxSelectionIndex());   removeButton.setEnabled(false); } "
"public static void dropTables(Connection conn){   try {     Statement stmt=conn.createStatement();     try {       stmt.execute(\"DROP TABLE Unpaidorder\");     }  catch (    SQLException ex) {     }     try {       stmt.execute(\"DROP TABLE Customer\");     }  catch (    SQLException ex) {     }     try {       stmt.execute(\"DROP TABLE Coffee\");     }  catch (    SQLException ex) {     }   }  catch (  SQLException ex) {     System.out.println(\"ERROR: \" + ex.getMessage());     ex.printStackTrace();   } } "
"public void init$Children(){   children=new ASTNode[1]; } "
"public void testWriteReadFull() throws Exception {   ByteArrayOutputStream out=new ByteArrayOutputStream(0);   ObjectOutputStream os=new ObjectOutputStream(out);   os.writeObject(full);   ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));   ReplicationPolicy copy=(ReplicationPolicy)is.readObject();   is.close();   os.close();   assertTrue(helper.areEquals(full,copy)); } "
"private LocationHelper(){ } "
"private static void raise(Object value,Class type) throws MessageFormatException {   throw new MessageFormatException(\"Cannot convert values of type \" + value.getClass().getName() + \" to \"+ type.getName()); } "
"public RepaintAction(){   super(); } "
"@Override public int executeUpdate(String cmd) throws RemoteException {   try {     Transaction tx=rconn.getTransaction();     if (tx.isReadOnly())     throw new UnsupportedOperationException();     int result=VanillaDb.newPlanner().executeUpdate(cmd,tx);     if (rconn.getAutoCommit())     rconn.commit();  else     rconn.endStatement();     return result;   }  catch (  RuntimeException e) {     rconn.rollback();     throw e;   } } "
"public void removeClient(SocketAddress address){   ProxyClient sc=address2Services.remove(address);   if (null != sc) {     logger.info(\"Removed host {}.\",address);     sc.close();   } } "
"public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {   checkIndices(start,end);   visitor.start(getDimension(),start,end);   for (int i=start; i <= end; i++) {     visitor.visit(i,getEntry(i));   }   return visitor.end(); } "
"private void notifyFailsInFavourites(){   if (mFailedResultsCounter > 0) {     NotificationCompat.Builder notificationBuilder=createNotificationBuilder();     notificationBuilder.setTicker(i18n(R.string.sync_fail_in_favourites_ticker));     notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_fail_in_favourites_ticker)).setContentText(i18n(R.string.sync_fail_in_favourites_content,mFailedResultsCounter + mConflictsFound,mConflictsFound));     showNotification(R.string.sync_fail_in_favourites_ticker,notificationBuilder);   }  else {     NotificationCompat.Builder notificationBuilder=createNotificationBuilder();     notificationBuilder.setTicker(i18n(R.string.sync_conflicts_in_favourites_ticker));     notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_conflicts_in_favourites_ticker)).setContentText(i18n(R.string.sync_conflicts_in_favourites_ticker,mConflictsFound));     showNotification(R.string.sync_conflicts_in_favourites_ticker,notificationBuilder);   } } "
"public void removeRewrittenEntryIndication(String uid){   if (_reWrittenEntries != null)   _reWrittenEntries.remove(uid); } "
"public static double adjustedrSquared(double rSquared,int numRegressors,int numDataPoints){   double divide=(numDataPoints - 1.0) / (numDataPoints - numRegressors - 1.0);   double rSquaredDiff=1 - rSquared;   return 1 - (rSquaredDiff * divide); } "
"public static ExecutionEntityImpl createWithEmptyRelationshipCollections(){   ExecutionEntityImpl execution=new ExecutionEntityImpl();   execution.executions=new ArrayList<ExecutionEntityImpl>(1);   execution.tasks=new ArrayList<TaskEntity>(1);   execution.variableInstances=new HashMap<String,VariableInstanceEntity>(1);   execution.jobs=new ArrayList<JobEntity>(1);   execution.timerJobs=new ArrayList<TimerJobEntity>(1);   execution.eventSubscriptions=new ArrayList<EventSubscriptionEntity>(1);   execution.identityLinks=new ArrayList<IdentityLinkEntity>(1);   return execution; } "
"public void seekToAudio(String id,int milliseconds){   AudioPlayer audio=this.players.get(id);   if (audio != null) {     audio.seekToPlaying(milliseconds);   } } "
"public Pair(Pair<? extends K,? extends V> entry){   this(entry.getKey(),entry.getValue()); } "
"@Override protected void onCreate(Bundle savedInstanceState){   super.onCreate(savedInstanceState);   Mysplash.getInstance().addActivity(this);   setTheme();   LanguageUtils.setLanguage(this);   DisplayUtils.setWindowTop(this);   setContentView(R.layout.activity_photo); } "
"public TrustManagerBuilder withCertChainListener(CertChainListener listener){   mgr.addCertChainListener(listener);   return (this); } "
"public UndoEvent(UndoActionInterface parentObj,String text,Object oldValue,Object newValue){   this.parentObj=parentObj;   this.oldValue=oldValue;   this.newValue=newValue;   this.customText=text;   representation=String.format(\"Storing value : %s Old : %s New : %s\",text,oldValue,newValue); } "
"public ParetoDistribution(double scale,double shape,double inverseCumAccuracy) throws MathIllegalArgumentException {   super(inverseCumAccuracy);   if (scale <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,scale);   }   if (shape <= 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.SHAPE,shape);   }   this.scale=scale;   this.shape=shape; } "
"private void computeHash() throws IOException, NoSuchAlgorithmException {   hash=0;   MessageDigest md=MessageDigest.getInstance(\"SHA\");   DataOutputStream out=new DataOutputStream(new DigestOutputStream(new OptimizedByteArrayOutputStream(127),md));   out.writeUTF(name);   out.flush();   byte[] digest=md.digest();   for (int i=Math.min(8,digest.length); --i >= 0; ) {     hash+=((long)(digest[i] & 0xFF)) << (i * 8);   } } "
"public static SM_SYSTEM_MESSAGE STR_CANT_CHANGE_SAME_ITEM_SKIN(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1400371,value0,value1); } "
"public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){   super(Method.GET,url,null,listener,errorListener); } "
"@Override protected void onPostExecute(Result result){   if (result != null) {     boolean completeCalled=false;     if (!isCancelled()) {       CropImageView cropImageView=mCropImageViewReference.get();       if (cropImageView != null) {         completeCalled=true;         cropImageView.onSetImageUriAsyncComplete(result);       }     }     if (!completeCalled && result.bitmap != null) {       result.bitmap.recycle();     }   } } "
"public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"expand attribute=\");   final String attribute=np.getWordRespectCase();   np.matchIgnoreCase(\";\");   final Director dir=(Director)getDir();   final Document doc=dir.getDocument();   final SamplesViewer samplesViewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);   if (samplesViewer != null) {   }   final int count=doc.getSampleAttributeTable().expandAttribute(attribute,true);   if (count > 0 && samplesViewer != null)   samplesViewer.getSamplesTable().syncFromDocument();   if (count == 0)   NotificationsInSwing.showWarning(getViewer().getFrame(),\"Expand attribute failed\");  else   NotificationsInSwing.showInformation(getViewer().getFrame(),\"Expand \" + attribute + \"' added \"+ count+ \" columns\"); } "
"public static double[] convolveWithZeroPadding(final double[] signal1,final double[] signal2,double deltaT){   double[] result=convolveWithZeroPadding(signal1,signal2);   for (int i=0; i < result.length; i++) {     result[i]*=deltaT;   }   return result; } "
"private void calcEntryCountIncludingStacks(List<BarEntry> yVals){   mEntryCountStacks=0;   for (int i=0; i < yVals.size(); i++) {     float[] vals=yVals.get(i).getYVals();     if (vals == null)     mEntryCountStacks++;  else     mEntryCountStacks+=vals.length;   } } "
"private boolean playWaveSamples(AudioPlayer player,FreeTTSSpeakable speakable,int numberSamples){   boolean ok=true;   int numberChannels=getNumberOfChannels();   int pmSizeSamples;   float pp=0;   byte[] samples=new byte[MAX_SAMPLE_SIZE];   byte[] residuals=getResiduals();   int[] residualSizes=getResidualSizes();   FloatList outBuffer=FloatList.createList(numberChannels + 1);   FloatList lpcCoefficients=FloatList.createList(numberChannels);   double multiplier=(double)getLPCRange() / 65535.0;   int s=0;   boolean firstPlay=true;   player.begin(numberSamples);   for (int r=0, i=0; (ok&=!speakable.isCompleted()) && i < numberOfFrames; i++) {     short[] frame=getFrame(i);     FloatList lpcCoeffs=lpcCoefficients;     for (int k=0; k < numberChannels; k++) {       lpcCoeffs.value=(float)((frame[k] + 32768.0) * multiplier) + lpcMinimum;       lpcCoeffs=lpcCoeffs.next;     }     pmSizeSamples=residualSizes[i];     for (int j=0; j < pmSizeSamples; j++, r++) {       FloatList backBuffer=outBuffer.prev;       float ob=residualToFloatMap[residuals[r] + 128];       lpcCoeffs=lpcCoefficients;       do {         ob+=lpcCoeffs.value * backBuffer.value;         backBuffer=backBuffer.prev;         lpcCoeffs=lpcCoeffs.next;       }  while (lpcCoeffs != lpcCoefficients);       int sample=(int)(ob + (pp * POST_EMPHASIS));       samples[s++]=hibyte(sample);       samples[s++]=lobyte(sample);       if (s >= MAX_SAMPLE_SIZE) {         if ((ok&=!speakable.isCompleted()) && !player.write(samples)) {           ok=false;         }         s=0;       }       outBuffer.value=pp=ob;       outBuffer=outBuffer.next;     }   }   if ((ok&=!speakable.isCompleted()) && s > 0) {     ok=player.write(samples,0,s);     s=0;   }   if (ok&=!speakable.isCompleted()) {     ok=player.end();   }   return ok; } "
"public final boolean isOverridingUiMode(){   return (myOverride & CFG_UI_MODE) != 0; } "
"public XorPredicate(Predicate p1){   add(p1); } "
"public void addTypeParameter(TypeVariable node){   List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();   list.addChild(node); } "
"private <T extends ClientRequestResult>Collection<T> executeRequest(final Collection<Long> ids,final Class<T> clazz,final ClientRequestReportListener reportListener,final String requestQueue){   LOGGER.debug(\"Initiating client request.\");   ClientRequestImpl<T> clientRequest=new ClientRequestImpl<T>(clazz);   Iterator<Long> it=ids.iterator();   Collection<Future<Collection<T>>> results=new ArrayList<Future<Collection<T>>>();   int counter=0;   while (it.hasNext()) {     while (it.hasNext() && counter < maxRequestSize) {       clientRequest.addTagId(it.next());       counter++;     }     RequestValuesTask<T> task=new RequestValuesTask<T>(clientRequest,reportListener,requestQueue);     results.add(executor.submit(task));     clientRequest=new ClientRequestImpl<T>(clazz);     counter=0;   }   Collection<T> finalCollection=new ArrayList<T>();   for (  Future<Collection<T>> result : results) {     try {       finalCollection.addAll(result.get());     }  catch (    InterruptedException e) {       LOGGER.error(\"InterruptedException caught while executing RequestValuesTask.\",e);       throw new RuntimeException(e);     } catch (    ExecutionException e) {       LOGGER.error(\"ExecutionException caught while executing RequestValuesTask.\",e);       throw new RuntimeException(e);     }   }   LOGGER.debug(\"Client request completed.\");   return finalCollection; } "
"public ResponsePacket executeOnSpace(ISpaceProxy space,Transaction txn) throws SQLException {   ResponsePacket response=new ResponsePacket();   try {     if (getSecurityInterceptor() != null) {       SpaceContext spaceContext=getSession().getConnectionContext().getSpaceContext();       SecurityContext securityContext=SpaceContextHelper.getSecurityContext(spaceContext);       getSecurityInterceptor().intercept(securityContext,SpacePrivilege.ALTER,tableName);     }     ExternalEntry template=new ExternalEntry(tableName,null,null);     template.setFieldsNames(_columnNames);     template.setFieldsTypes(_columnTypes);     template.setIndexIndicators(_indices);     template.setRoutingFieldName(_routingFieldName);     space.snapshot(template);     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"Wrote a new table to space [\" + tableName + \"]\");     }     response.setIntResult(0);   }  catch (  Exception e) {     if (_logger.isLoggable(Level.SEVERE)) {       _logger.log(Level.SEVERE,e.getMessage(),e);     }     SQLException se=new SQLException(\"Failed to create table [\" + tableName + \"]; Cause: \"+ e,\"GSP\",-106);     se.initCause(e);     throw se;   }   return response; } "
"public void run(){   PrintStream pOut=null;   if (OutFile.length() != 0) {     try {       pOut=new PrintStream(OutFile);     }  catch (    FileNotFoundException fnfe) {       System.err.println(\"Cannot output to selected file:\\n\" + fnfe.getMessage());       return;     }   }   try {     doOptimizedEval(OutputSemaphore,pOut,WordMin,WordMax,WordDist,CharMin,CharMax,CharDist,Do.equals(\"char\") || Do.equals(\"all\"),Do.equals(\"word\") || Do.equals(\"all\"),SummaryDir,ModelDir,Threads,Silent,Progress);   }  catch (  Exception ex) {     ex.printStackTrace(System.err);   }   if (pOut != null)   pOut.close(); } "
"private float[] matrixFromPointNormalUp(double[] point,double[] normal,float[] up){   float[] zAxis=new float[]{(float)normal[0],(float)normal[1],(float)normal[2]};   normalize(zAxis);   float[] xAxis=crossProduct(zAxis,up);   normalize(xAxis);   float[] yAxis=crossProduct(zAxis,xAxis);   normalize(yAxis);   float[] m=new float[16];   Matrix.setIdentityM(m,0);   m[0]=xAxis[0];   m[1]=xAxis[1];   m[2]=xAxis[2];   m[4]=yAxis[0];   m[5]=yAxis[1];   m[6]=yAxis[2];   m[8]=zAxis[0];   m[9]=zAxis[1];   m[10]=zAxis[2];   m[12]=(float)point[0];   m[13]=(float)point[1];   m[14]=(float)point[2];   return m; } "
"public T distance1(final FieldVector3D<T> v){   final T dx=v.x.subtract(x).abs();   final T dy=v.y.subtract(y).abs();   final T dz=v.z.subtract(z).abs();   return dx.add(dy).add(dz); } "
"private static void validateConfiguration(){   String[] versions={ApplicationInfo.getInstance().getMajorVersion(),ApplicationInfo.getInstance().getMinorVersion(),ApplicationInfo.getInstance().getMicroVersion(),ApplicationInfo.getInstance().getPatchVersion()};   for (  String version : versions) {     if (version == null || !version.matches(\"0|([1-9]+[0-9]*)\")) {       throw new AssertionError(\"Invalid version component found: \" + version);     }   } } "
"public DuplicateAionObjectException(Throwable cause){   super(cause); } "
"private void hideNotEnabledShareSections(View view){   LinearLayout shareWithUsersSection=(LinearLayout)view.findViewById(R.id.shareWithUsersSection);   LinearLayout shareViaLinkSection=(LinearLayout)view.findViewById(R.id.shareViaLinkSection);   boolean shareViaLinkAllowed=getActivity().getResources().getBoolean(R.bool.share_via_link_feature);   boolean shareWithUsersAllowed=getActivity().getResources().getBoolean(R.bool.share_with_users_feature);   if (!shareViaLinkAllowed) {     shareViaLinkSection.setVisibility(View.GONE);   }   if (!shareWithUsersAllowed) {     shareWithUsersSection.setVisibility(View.GONE);   } } "
"@Override protected void serializeNode(Node node) throws IOException { switch (node.getNodeType()) { case Node.TEXT_NODE: {       String text;       text=node.getNodeValue();       if (text != null)       characters(node.getNodeValue(),true);       break;     } case Node.CDATA_SECTION_NODE: {     String text;     text=node.getNodeValue();     if (text != null)     characters(node.getNodeValue(),true);     break;   } case Node.COMMENT_NODE: break; case Node.ENTITY_REFERENCE_NODE: break; case Node.PROCESSING_INSTRUCTION_NODE: break; case Node.ELEMENT_NODE: serializeElement((Element)node); break; case Node.DOCUMENT_NODE: case Node.DOCUMENT_FRAGMENT_NODE: { Node child; child=node.getFirstChild(); while (child != null) { serializeNode(child); child=child.getNextSibling(); } break; } default : break; } } "
"public static final void toString(StringBuffer output,float[] tab){   if (tab == null) {     output.append(\"null\");     return;   }   output.append(\"(\");   int size=tab.length;   output.append(size);   if (listMax == -1 || size <= listMax) {     for (int i=0; i < size; i++) {       output.append(\",\");       output.append(tab[i]);     }   }  else {     int border=size / 2;     if (listBorder < border)     border=listBorder;     for (int i=0; i < border; i++) {       output.append(\",\");       output.append(tab[i]);     }     output.append(\",...\");     for (int i=border; i > 0; i--) {       output.append(\",\");       output.append(tab[size - i]);     }   }   output.append(\")\"); } "
"private XMLInputSource createXMLInputSource(InputSource source,String baseURI){   String publicId=source.getPublicId();   String systemId=source.getSystemId();   String baseSystemId=baseURI;   InputStream byteStream=source.getByteStream();   Reader charStream=source.getCharacterStream();   String encoding=source.getEncoding();   XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);   xmlInputSource.setByteStream(byteStream);   xmlInputSource.setCharacterStream(charStream);   xmlInputSource.setEncoding(encoding);   return xmlInputSource; } "
"public String parse(File file,JSON m){   try {     Template template=getTemplate(file);     if (template != null) {       StringWriter w=new StringWriter();       BufferedWriter writer=new BufferedWriter(w);       template.merge(new VelocityContext(m),writer);       writer.flush();       writer.close();       return w.toString();     }   }  catch (  Exception e) {     log.error(e.getMessage(),e);   }   return null; } "
"@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){   return new AssignmentUsingLCAForTaxonomy(cName,usePercentIdentityFilter); } "
"public int addNewSegment(){   return addNewSegment(0); } "
"public LazyMetadataValue(Plugin owningPlugin,Callable<Object> lazyValue){   this(owningPlugin,CacheStrategy.CACHE_AFTER_FIRST_EVAL,lazyValue); } "
"public void init$Children(){ } "
"private static String convertToHTMLContent(String content){   content=replace(content,'&',\"&amp;\");   content=replace(content,'\"',\"&quot;\");   content=replace(content,'<',\"&lt;\");   return replace(content,'>',\"&gt;\"); } "
"@Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {   if (abandonHope) {     return;   }   if (saxParser == null) {     String saxParserClass=getCatalogParser(namespaceURI,localName);     if (saxParserClass == null) {       abandonHope=true;       if (namespaceURI == null) {         debug.message(2,\"No Catalog parser for \" + localName);       }  else {         debug.message(2,\"No Catalog parser for \" + \"{\" + namespaceURI + \"}\"+ localName);       }       return;     }     try {       saxParser=(SAXCatalogParser)Class.forName(saxParserClass,true,loader != null ? loader : this.getClass().getClassLoader()).newInstance();       saxParser.setCatalog(catalog);       saxParser.startDocument();       saxParser.startElement(namespaceURI,localName,qName,atts);     }  catch (    ClassNotFoundException cnfe) {       saxParser=null;       abandonHope=true;       debug.message(2,cnfe.toString());     } catch (    InstantiationException ie) {       saxParser=null;       abandonHope=true;       debug.message(2,ie.toString());     } catch (    IllegalAccessException iae) {       saxParser=null;       abandonHope=true;       debug.message(2,iae.toString());     } catch (    ClassCastException cce) {       saxParser=null;       abandonHope=true;       debug.message(2,cce.toString());     }   }  else {     saxParser.startElement(namespaceURI,localName,qName,atts);   } } "
"void localIsUnknown(Local l){   PurityNode node=PurityGlobalNode.node;   localsRemove(l);   localsPut(l,node);   nodes.add(node);   if (doCheck)   sanityCheck(); } "
"public static void onReceiveUpgradePatch(Context context,String patchLocation){   Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,true); } "
"private void addPathCenteredConnectionOnSameWidget(ViewTransform transform,Graphics2D g,boolean isSelected,ConnectionDrawing drawing,ColorSet colorSet,ConstraintHandle targetHandle,ConstraintWidget targetWidget){   int radius=4;   float x0=mX;   float y0=mY;   float xt=targetHandle.getDrawX();   float yt=targetHandle.getDrawY();   boolean isTopConnection=mAnchor.getType() == ConstraintAnchor.Type.TOP;   boolean isLeftConnection=targetHandle.getDrawX() < getDrawX();   boolean isVerticalConnection=mAnchor.isVerticalAnchor();   int xdelta=0;   int ydelta=0;   if (targetHandle.getAnchor().isConnected()) {     if (isVerticalConnection) {       xdelta=x0 > xt ? -sConnectionOffset : sConnectionOffset;     }  else {       ydelta=y0 < yt ? -sConnectionOffset : sConnectionOffset;     }   }   if (isVerticalConnection) {     float base=Math.min(transform.getSwingFY(y0),transform.getSwingFY(yt) - ConnectionDraw.ARROW_SIDE);     if (!isTopConnection) {       base=Math.max(transform.getSwingFY(y0),transform.getSwingFY(yt) + ConnectionDraw.ARROW_SIDE);     }     drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));     if (isSelected && Math.abs(transform.getSwingFY(y0) - base) > 0) {       int start=transform.getSwingFY(y0);       int end=transform.getSwingFY(yt);       if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {         if (isTopConnection) {           end+=transform.getSwingDimensionF(mAnchor.getMargin());         }  else {           end-=transform.getSwingDimensionF(mAnchor.getMargin());         }         Color pre=g.getColor();         g.setColor(colorSet.getMargins());         Stroke pres=g.getStroke();         g.setStroke(sSimpleStroke);         ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),transform.getSwingFX(x0) + ConnectionDraw.ARROW_SIDE,end,transform.getSwingFY(yt));         g.setStroke(pres);         g.setColor(pre);         g.drawLine(transform.getSwingFX(x0 - 4),end,transform.getSwingFX(x0 + 4),end);       }       addVerticalSmallSpring(drawing.mPath,transform.getSwingFX(x0),start,end);     }     drawing.mPath.lineTo(transform.getSwingFX(x0),base);     float x1=x0 - radius;     float sy1=base - transform.getSwingDimension(radius);     if (!isTopConnection) {       sy1=base + transform.getSwingDimension(radius);     }     if (!isLeftConnection) {       x1=x0 + radius;     }     addQuarterArc(drawing.mPath,transform.getSwingFX(x0),base,transform.getSwingFX(x1),sy1,1,true);     float x2=xt + 2 * radius;     if (!isLeftConnection) {       x2=xt - 2 * radius;     }     drawing.mPath.lineTo(transform.getSwingFX(x2),sy1);     float syt=transform.getSwingFY(yt) - ConnectionDraw.ARROW_SIDE;     if (!isTopConnection) {       syt=transform.getSwingFY(yt) + ConnectionDraw.ARROW_SIDE;     }     addQuarterArc(drawing.mPath,transform.getSwingFX(x2),sy1,transform.getSwingFX(xt) + xdelta,syt + ydelta,radius,false);     if (isSelected) {       Stroke pre=g.getStroke();       g.setStroke(ConnectionDraw.sDashedStroke);       if (isLeftConnection) {         g.drawLine(transform.getSwingFX(targetWidget.getDrawRight()),transform.getSwingFY(yt),transform.getSwingFX(x0 - 4),transform.getSwingFY(yt));       }  else {         g.drawLine(transform.getSwingFX(targetWidget.getDrawX()),transform.getSwingFY(yt),transform.getSwingFX(x0 - 4),transform.getSwingFY(yt));       }       g.setStroke(pre);       Shape line=new Line2D.Float(transform.getSwingFX(x0 - 4),transform.getSwingFX(yt),transform.getSwingFX(x0 + 4),transform.getSwingFX(yt));       drawing.addShape(line);     }     if (isTopConnection) {       drawing.setArrow(ConnectionDraw.getBottomArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);     }  else {       drawing.setArrow(ConnectionDraw.getTopArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);     }   }  else {     isTopConnection=targetHandle.getDrawY() < getDrawY();     isLeftConnection=mAnchor.getType() == ConstraintAnchor.Type.LEFT;     float base=Math.min(transform.getSwingFX(x0),transform.getSwingFX(xt) - ConnectionDraw.ARROW_SIDE);     if (!isLeftConnection) {       base=Math.max(transform.getSwingFX(x0),transform.getSwingFX(xt) + ConnectionDraw.ARROW_SIDE);     }     drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));     if (isSelected && Math.abs(transform.getSwingFX(x0) - base) > 0) {       int start=transform.getSwingFX(x0);       int end=transform.getSwingFX(xt);       if ((colorSet.alwaysShowMargins() || isSelected) && mAnchor.getMargin() > 0) {         if (isLeftConnection) {           end+=transform.getSwingDimensionF(mAnchor.getMargin());         }  else {           end-=transform.getSwingDimensionF(mAnchor.getMargin());         }         Color pre=g.getColor();         g.setColor(colorSet.getMargins());         Stroke pres=g.getStroke();         g.setStroke(sSimpleStroke);         ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(mAnchor.getMargin()),end,transform.getSwingFX(xt),transform.getSwingFY(y0) + ConnectionDraw.ARROW_SIDE);         g.setStroke(pres);         g.setColor(pre);         Shape line=new Line2D.Float(end,transform.getSwingFX(y0 - 4),end,transform.getSwingFX(y0 + 4));         drawing.addShape(line);       }       addHorizontalSmallSpring(drawing.mPath,transform.getSwingFY(y0),start,end);     }     drawing.mPath.lineTo(base,transform.getSwingFY(y0));     float y1=y0 - radius;     float sx1=base - transform.getSwingDimension(radius);     if (!isLeftConnection) {       sx1=base + transform.getSwingDimension(radius);     }     if (!isTopConnection) {       y1=y0 + radius;     }     addQuarterArc(drawing.mPath,base,transform.getSwingFY(y0),sx1,transform.getSwingFY(y1),1,false);     float y2=yt + 2 * radius;     if (!isTopConnection) {       y2=yt - 2 * radius;     }     drawing.mPath.lineTo(sx1,transform.getSwingFY(y2));     float sxt=transform.getSwingFX(xt) - ConnectionDraw.ARROW_SIDE;     if (!isLeftConnection) {       sxt=transform.getSwingFX(xt) + ConnectionDraw.ARROW_SIDE;     }     addQuarterArc(drawing.mPath,sx1,transform.getSwingFY(y2),sxt + xdelta,transform.getSwingFY(yt) + ydelta,radius,true);     if (isSelected) {       Stroke pre=g.getStroke();       g.setStroke(ConnectionDraw.sDashedStroke);       if (isTopConnection) {         g.drawLine(transform.getSwingFX(xt),transform.getSwingFY(targetWidget.getDrawBottom()),transform.getSwingFX(xt),transform.getSwingFY(y0 - 4));       }  else {         g.drawLine(transform.getSwingFX(xt),transform.getSwingFY(targetWidget.getDrawY()),transform.getSwingFX(xt),transform.getSwingFY(y0 - 4));       }       g.setStroke(pre);       Shape line=new Line2D.Float(transform.getSwingFX(xt),transform.getSwingFY(y0 - 4),transform.getSwingFX(xt),transform.getSwingFY(y0 + 4));       drawing.addShape(line);     }     if (isLeftConnection) {       drawing.setArrow(ConnectionDraw.getRightArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);     }  else {       drawing.setArrow(ConnectionDraw.getLeftArrow(),transform.getSwingFX(xt) + xdelta,transform.getSwingFY(yt) + ydelta);     }   } } "
"private void computeUnbound(MessageType message,Set<FieldSelector> bound,FieldSelector parent,Set<FieldSelector> unbound){   for (  Field field : message.getFields()) {     FieldSelector selector=parent.add(field);     if (bound.contains(selector)) {       continue;     }     boolean boundSubFields=false;     if (selector.getType().isMessage()) {       for (      FieldSelector boundSelector : bound) {         if (selector.isPrefixOf(boundSelector)) {           boundSubFields=true;           computeUnbound(selector.getType().getMessageType(),bound,selector,unbound);           break;         }       }     }     if (!boundSubFields) {       unbound.add(selector);     }   } } "
"private static Map<FieldDescriptor,Object> maybeCombineOptionsWithDefault(boolean withDefaults,Map<FieldDescriptor,Object> explicitlySetOptions,List<FieldDescriptor> defaultOptions){   if (!withDefaults) {     return explicitlySetOptions;   }   Map<FieldDescriptor,Object> allOptions=Maps.newLinkedHashMap();   for (  FieldDescriptor descriptor : defaultOptions) {     allOptions.put(descriptor,descriptor.getDefaultValue());   }   allOptions.putAll(explicitlySetOptions);   return ImmutableMap.copyOf(allOptions); } "
"public In(Socket socket){   if (socket == null)   throw new NullPointerException(\"argument is null\");   try {     InputStream is=socket.getInputStream();     scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);     scanner.useLocale(LOCALE);   }  catch (  IOException ioe) {     throw new IllegalArgumentException(\"Could not open \" + socket);   } } "
"protected Type(String name){   super(name); } "
"public void addDataMapObject(double mapValue,OrganisationUnit unit){   InternalMapObject mapObject=new InternalMapObject();   mapObject.setName(unit.getName());   mapObject.setValue(mapValue);   mapObject.setFillOpacity(opacity);   mapObject.setStrokeColor(Color.WHITE);   mapObject.setMapLayerType(MapLayerType.THEMATIC);   mapObject.buildGeometryForOrganisationUnit(unit);   addMapObject(mapObject);   mapObject.setMapLayer(this); } "
"@Override public void redo(Transaction tx){ } "
"@SuppressWarnings(\"rawtypes\") public Parameter newParameter(Object name,Class type){   return new ParameterNode(type); } "
"public void addBodyDecl(BodyDecl node){   List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();   list.addChild(node); } "
"long increaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){   long leftCount=item.increaseItemCount(count);   ItemPacketService.sendItemPacket(actor,storageType,item,updateType);   setPersistentState(PersistentState.UPDATE_REQUIRED);   return leftCount; } "
"public static Object invokeStaticMethod(Class<?> clazz,String name,Class<?>[] parameterTypes,Object[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {   return invokeMethod(clazz,clazz,name,parameterTypes,args); } "
"public static int dpToPixels(int dp,Context context){   return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics()); } "
"public Builder addColumnLong(String name,Long minAllowedValue,Long maxAllowedValue){   return addColumn(new LongMetaData(name,minAllowedValue,maxAllowedValue)); } "
"public GSXAConnectionImpl(GSXAConnectionFactoryImpl factory) throws JMSException {   super(factory); } "
"public SimpleContentModel(short operator,QName firstChild,QName secondChild){   fFirstChild.setValues(firstChild);   if (secondChild != null) {     fSecondChild.setValues(secondChild);   }  else {     fSecondChild.clear();   }   fOperator=operator; } "
"public int start(){   return start; } "
"private Metrics createMetricsByDimension(ObjectName objectName){   Map<String,String> dimensionMap=Maps.newHashMap();   dimensionMap.put(\"MBean\",objectName.toString());   return Metrics.create(dimensionMap); } "
"public ServiceType(){ } "
"public void sendToFilterModule(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final SourceDataTagQuality quality,final int filterType){   doSendToFilterModule(currentSourceDataTag,update,quality,false,filterType); } "
"static boolean isSameRow(ConstraintWidget a,ConstraintWidget b){   return Math.max(a.getY(),b.getY()) < Math.min(a.getY() + a.getHeight(),b.getY() + b.getHeight()); } "
"protected void init(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){   assertIsMutable();   if (modelEntity == null) {     throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null modelEntity parameter\");   }   this.modelEntity=modelEntity;   this.entityName=modelEntity.getEntityName();   this.delegatorName=delegator.getDelegatorName();   this.internalDelegator=delegator;   this.observable=new Observable();   setFields(fields);   if (this.entityName == null) {     throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null entityName in the modelEntity parameter\");   } } "
"@Override public boolean equals(Object other){   if (this == other) {     return true;   }   if (other instanceof Fraction) {     Fraction rhs=(Fraction)other;     return (numerator == rhs.numerator) && (denominator == rhs.denominator);   }   return false; } "
"private static int maxBucketsPerElement(long numElements){   numElements=Math.max(1,numElements);   double v=(Integer.MAX_VALUE - EXCESS) / (double)numElements;   if (v < 1.0) {     throw new UnsupportedOperationException(\"Cannot compute probabilities for \" + numElements + \" elements.\");   }   return Math.min(BloomCalculations.probs.length - 1,(int)v); } "
"public boolean isSelected(){   ClusterViewer viewer=getViewer();   return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && !viewer.getPcoaTab().isIs3dMode(); } "
"private void skipToEndOfLine() throws IOException {   while (pos < limit || fillBuffer(1)) {     char c=buffer[pos++];     if (c == '\\n') {       lineNumber++;       lineStart=pos;       break;     }  else     if (c == '\\r') {       break;     }   } } "
"public static int calcTextHeight(Paint paint,String demoText){   Rect r=new Rect();   paint.getTextBounds(demoText,0,demoText.length(),r);   return r.height(); } "
"public void init$Children(){ } "
"public String process(Item item) throws ProcessException {   return pos.getPartOfSpeech(item.toString()); } "
"private void drawTicks(Canvas canvas){   for (int i=0; i < mNumSegments; i++) {     final float x=i * mTickDistance + mLeftX;     canvas.drawLine(x,mTickStartY,x,mTickEndY,mPaint);   }   canvas.drawLine(mRightX,mTickStartY,mRightX,mTickEndY,mPaint); } "
"public void syncFile(OCFile file){   if (!file.isFolder()) {     Intent intent=new Intent(mFileActivity,OperationsService.class);     intent.setAction(OperationsService.ACTION_SYNC_FILE);     intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());     intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());     intent.putExtra(OperationsService.EXTRA_SYNC_FILE_CONTENTS,true);     mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(intent);     mFileActivity.showLoadingDialog(mFileActivity.getApplicationContext().getString(R.string.wait_a_moment));   }  else {     Intent intent=new Intent(mFileActivity,OperationsService.class);     intent.setAction(OperationsService.ACTION_SYNC_FOLDER);     intent.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());     intent.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());     mFileActivity.startService(intent);   } } "
"public DatabaseGetRegionsQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"private void layoutChild(View child,int layoutDirection){   final LayoutParams lp=(LayoutParams)child.getLayoutParams();   final Rect parent=mTempRect1;   parent.set(getPaddingLeft() + lp.leftMargin,getPaddingTop() + lp.topMargin,getWidth() - getPaddingRight() - lp.rightMargin,getHeight() - getPaddingBottom() - lp.bottomMargin);   if (mLastInsets != null && ViewCompat.getFitsSystemWindows(this) && !ViewCompat.getFitsSystemWindows(child)) {     parent.left+=mLastInsets.getSystemWindowInsetLeft();     parent.top+=mLastInsets.getSystemWindowInsetTop();     parent.right-=mLastInsets.getSystemWindowInsetRight();     parent.bottom-=mLastInsets.getSystemWindowInsetBottom();   }   final Rect out=mTempRect2;   GravityCompat.apply(resolveGravity(lp.gravity),child.getMeasuredWidth(),child.getMeasuredHeight(),parent,out,layoutDirection);   child.layout(out.left,out.top,out.right,out.bottom); } "
"private String serializeJobRow(JobRow jobRow,UriInfo uriInfo){   try {     return objectMappers.getMapper().writeValueAsString(jobPayloadBuilder.buildPayload(jobRow,uriInfo));   }  catch (  JsonProcessingException e) {     LOG.error(\"Error serializing JobRow: %s\",e);     throw new RuntimeException(e);   } } "
"public S1Angle lat(){   return S1Angle.radians(latRadians); } "
"public AudioAddQuery albumId(Integer value){   return unsafeParam(\"album_id\",value); } "
"static boolean isWeekend(int dayOfWeek,@Constants.Weekend int weekendValue){ switch (weekendValue) { case Constants.Weekend.SATURDAY_SUNDAY:     return Calendar.SATURDAY == dayOfWeek || Calendar.SUNDAY == dayOfWeek; case Constants.Weekend.FRIDAY_SATURDAY:   return Calendar.FRIDAY == dayOfWeek || Calendar.SATURDAY == dayOfWeek; case Constants.Weekend.THURSDAY_FRIDAY: return Calendar.THURSDAY == dayOfWeek || Calendar.FRIDAY == dayOfWeek; case Constants.Weekend.FRIDAY_ONLY: return Calendar.FRIDAY == dayOfWeek; case Constants.Weekend.SATURDAY_ONLY: return Calendar.SATURDAY == dayOfWeek; case Constants.Weekend.SUNDAY_ONLY: return Calendar.SUNDAY == dayOfWeek; default : return false; } } "
"public void disableDashedHighlightLine(){   mHighlightDashPathEffect=null; } "
"@Override public int scanContent(XMLString content) throws IOException {   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }  else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {     fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];     load(1,false);     fCurrentEntity.position=0;     fCurrentEntity.startPosition=0;   }   int offset=fCurrentEntity.position;   int c=fCurrentEntity.ch[offset];   int newlines=0;   boolean external=fCurrentEntity.isExternal();   if (c == '\\n' || ((c == '\\r' || c == 0x85 || c == 0x2028) && external)) {     do {       c=fCurrentEntity.ch[fCurrentEntity.position++];       if ((c == '\\r') && external) {         newlines++;         fCurrentEntity.lineNumber++;         fCurrentEntity.columnNumber=1;         if (fCurrentEntity.position == fCurrentEntity.count) {           offset=0;           fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);           fCurrentEntity.position=newlines;           fCurrentEntity.startPosition=newlines;           if (load(newlines,false)) {             break;           }         }         int cc=fCurrentEntity.ch[fCurrentEntity.position];         if (cc == '\\n' || cc == 0x85) {           fCurrentEntity.position++;           offset++;         }  else {           newlines++;         }       }  else       if (c == '\\n' || ((c == 0x85 || c == 0x2028) && external)) {         newlines++;         fCurrentEntity.lineNumber++;         fCurrentEntity.columnNumber=1;         if (fCurrentEntity.position == fCurrentEntity.count) {           offset=0;           fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);           fCurrentEntity.position=newlines;           fCurrentEntity.startPosition=newlines;           if (load(newlines,false)) {             break;           }         }       }  else {         fCurrentEntity.position--;         break;       }     }  while (fCurrentEntity.position < fCurrentEntity.count - 1);     for (int i=offset; i < fCurrentEntity.position; i++) {       fCurrentEntity.ch[i]='\\n';     }     int length=fCurrentEntity.position - offset;     if (fCurrentEntity.position == fCurrentEntity.count - 1) {       content.setValues(fCurrentEntity.ch,offset,length);       return -1;     }   }   if (external) {     while (fCurrentEntity.position < fCurrentEntity.count) {       c=fCurrentEntity.ch[fCurrentEntity.position++];       if (!XML11Char.isXML11Content(c) || c == 0x85 || c == 0x2028) {         fCurrentEntity.position--;         break;       }     }   }  else {     while (fCurrentEntity.position < fCurrentEntity.count) {       c=fCurrentEntity.ch[fCurrentEntity.position++];       if (!XML11Char.isXML11InternalEntityContent(c)) {         fCurrentEntity.position--;         break;       }     }   }   int length=fCurrentEntity.position - offset;   fCurrentEntity.columnNumber+=length - newlines;   content.setValues(fCurrentEntity.ch,offset,length);   if (fCurrentEntity.position != fCurrentEntity.count) {     c=fCurrentEntity.ch[fCurrentEntity.position];     if ((c == '\\r' || c == 0x85 || c == 0x2028) && external) {       c='\\n';     }   }  else {     c=-1;   }   return c; } "
"@MediumTest public void testPreconditions(){   assertNotNull(mTextView); } "
"private void badRead(int numBytes) throws LogException {   throw new LogException(\"length=\" + String.valueOf(length) + \", numBytes=\"+ String.valueOf(numBytes)); } "
"public SyncHttpClient(int httpPort,int httpsPort){   this(false,httpPort,httpsPort); } "
"private void performZoom(MotionEvent event){   if (event.getPointerCount() >= 2) {     OnChartGestureListener l=mChart.getOnChartGestureListener();     float totalDist=spacing(event);     if (totalDist > mMinScalePointerDistance) {       PointF t=getTrans(mTouchPointCenter.x,mTouchPointCenter.y);       ViewPortHandler h=mChart.getViewPortHandler();       if (mTouchMode == PINCH_ZOOM) {         mLastGesture=ChartGesture.PINCH_ZOOM;         float scale=totalDist / mSavedDist;         boolean isZoomingOut=(scale < 1);         boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();         boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();         float scaleX=mChart.isScaleXEnabled() ? scale : 1f;         float scaleY=mChart.isScaleYEnabled() ? scale : 1f;         if (canZoomMoreY || canZoomMoreX) {           mMatrix.set(mSavedMatrix);           mMatrix.postScale(scaleX,scaleY,t.x,t.y);           if (l != null)           l.onChartScale(event,scaleX,scaleY);         }       }  else       if (mTouchMode == X_ZOOM && mChart.isScaleXEnabled()) {         mLastGesture=ChartGesture.X_ZOOM;         float xDist=getXDist(event);         float scaleX=xDist / mSavedXDist;         boolean isZoomingOut=(scaleX < 1);         boolean canZoomMoreX=isZoomingOut ? h.canZoomOutMoreX() : h.canZoomInMoreX();         if (canZoomMoreX) {           mMatrix.set(mSavedMatrix);           mMatrix.postScale(scaleX,1f,t.x,t.y);           if (l != null)           l.onChartScale(event,scaleX,1f);         }       }  else       if (mTouchMode == Y_ZOOM && mChart.isScaleYEnabled()) {         mLastGesture=ChartGesture.Y_ZOOM;         float yDist=getYDist(event);         float scaleY=yDist / mSavedYDist;         boolean isZoomingOut=(scaleY < 1);         boolean canZoomMoreY=isZoomingOut ? h.canZoomOutMoreY() : h.canZoomInMoreY();         if (canZoomMoreY) {           mMatrix.set(mSavedMatrix);           mMatrix.postScale(1f,scaleY,t.x,t.y);           if (l != null)           l.onChartScale(event,1f,scaleY);         }       }     }   } } "
"public Call post(String url,Callback callback){   return post(url,null,callback); } "
"private void fixList(Node<E> t,Node<E> h){   Node<E> curNodeNext;   Node<E> curNode=t;   while (h == this.head && curNode != h) {     curNodeNext=curNode.getNext();     curNodeNext.setPrev(curNode);     curNode=curNode.getNext();   } } "
"public MarketReportQuery report(UserActor actor,int ownerId,int itemId,ReportReason reason){   return new MarketReportQuery(getClient(),actor,ownerId,itemId,reason); } "
"static boolean lessThanUnsigned(long x1,long x2){   return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE); } "
"protected void updateRoot(int pNum){   this.rootPageNum=pNum;   writeHeader(); } "
"public void updateSizes(@ProgressDrawableSize int size){   if (size == LARGE) {     setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);   }  else {     setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);   } } "
"public boolean canZoomOutMoreY(){   return (mScaleY > mMinScaleY); } "
"public static Element firstChildElement(Element element,String childElementName,String attrName,String attrValue){   if (element == null)   return null;   Node node=element.getFirstChild();   if (node != null) {     do {       if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getLocalName() != null ? node.getLocalName() : node.getNodeName()))) {         Element childElement=(Element)node;         String value=childElement.getAttribute(attrName);         if (value != null && value.equals(attrValue)) {           return childElement;         }       }     }  while ((node=node.getNextSibling()) != null);   }   return null; } "
"public VideoSearchQueryWithExtended searchExtended(UserActor actor,String q){   return new VideoSearchQueryWithExtended(getClient(),actor,q); } "
"private void initThreadPoolSize(){   try {     thread_pool_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));   }  catch (  NumberFormatException e) {     thread_pool_size=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);   } } "
"public static byte[] decode(String s){   ByteArrayOutputStream bos=new ByteArrayOutputStream();   try {     decode(s,bos);   }  catch (  IOException e) {     throw new RuntimeException();   }   byte[] decodedBytes=bos.toByteArray();   try {     bos.close();     bos=null;   }  catch (  IOException ex) {     System.err.println(\"Error while decoding BASE64: \" + ex.toString());   }   return decodedBytes; } "
"public void handleCharNameRequest(int exOpcode,Player activePlayer,String charName,String newNickname,int rank){   Legion legion=activePlayer.getLegion();   charName=Util.convertName(charName);   Player targetPlayer=world.findPlayer(charName); switch (exOpcode) { case 0x01:     if (targetPlayer != null) {       if (targetPlayer.getPlayerSettings().isInDeniedStatus(DeniedStatus.GUILD)) {         PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_MSG_REJECTED_INVITE_GUILD(charName));         return;       }       invitePlayerToLegion(activePlayer,targetPlayer);     }  else {       PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_NO_USER_TO_INVITE);     }   break; case LEGION_ACTION_KICK: if (legionRestrictions.canKickPlayer(activePlayer,charName)) {   if (removeLegionMember(charName,true,activePlayer.getName())) {     if (targetPlayer != null) {       PacketSendUtility.sendPacket(targetPlayer,new SM_LEGION_LEAVE_MEMBER(1300246,0,legion.getLegionName()));       targetPlayer.resetLegionMember();       if (legion.hasBonus()) {         PacketSendUtility.sendPacket(activePlayer,new SM_ICON_INFO(1,false));       }     }   } } break; case 0x05: if (targetPlayer != null) { appointBrigadeGeneral(activePlayer,targetPlayer); }  else { PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_NO_USER_TO_INVITE); } break; case 0x06: if (targetPlayer != null) { appointRank(activePlayer,targetPlayer,rank); }  else { appointRank(activePlayer,charName,rank); } break; case 0x0F: changeNickname(activePlayer,charName,newNickname); break; } } "
"private void closeConnectionQuietly(){   response.body().close();   response=null;   responseByteStream=null; } "
"public LazyObject optJSONObject(int index) throws LazyException {   LazyNode token=getOptionalValueToken(index);   if (token == null)   return null;   if (token.type == LazyNode.VALUE_NULL)   return null;   if (token.type != LazyNode.OBJECT)   throw new LazyException(\"Requested value is not an object\",token);   return new LazyObject(token,cbuf); } "
"@Override public String toString(){   return name; } "
"Landlord landlord(){   return landlord; } "
"@RequestMapping(value=\"/rest/activiti/jobs/{jobId}\",method=RequestMethod.POST,produces=\"application/json\") @ResponseStatus(value=HttpStatus.OK) public void executeJob(@PathVariable String jobId) throws BadRequestException {   ServerConfig serverConfig=retrieveServerConfig();   try {     clientService.executeJob(serverConfig,jobId);   }  catch (  ActivitiServiceException e) {     throw new BadRequestException(e.getMessage());   } } "
"public RegexFileFilter(String pattern,IOCase caseSensitivity){   if (pattern == null) {     throw new IllegalArgumentException(\"Pattern is missing\");   }   int flags=0;   if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {     flags=Pattern.CASE_INSENSITIVE;   }   this.pattern=Pattern.compile(pattern,flags); } "
"public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues){   return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,true); } "
"public void recordOpenedNTP(){   setFirstAction(OPENED_NTP); } "
"private void updateEmptyViewVisibility(Adapter adapter){   mEmptyView.setVisibility(adapter.getItemCount() == 0 ? View.VISIBLE : View.GONE); } "
"public void openDriver(SurfaceHolder holder) throws IOException {   if (camera == null) {     camera=Camera.open();     if (camera == null) {       throw new IOException();     }     camera.setPreviewDisplay(holder);     if (!initialized) {       initialized=true;       configManager.initFromCameraParameters(camera);     }     configManager.setDesiredCameraParameters(camera);     FlashlightManager.enableFlashlight();   } } "
"public static void d(String c,String s){   if (isEnable()) {     if (s == null)     s=\"\\\"NULL\\\"\";     Log.d(c,s);   } } "
"public int findFirstCompletelyVisibleItemPosition(){   final View child=findOneVisibleChild(0,getChildCount(),true);   return child == null ? NO_POSITION : getPosition(child); } "
"public int find(String what,int start){   try {     ByteBuffer src=ByteBuffer.wrap(this.bytes,0,this.length);     ByteBuffer tgt=encode(what);     byte b=tgt.get();     src.position(start);     while (src.hasRemaining()) {       if (b == src.get()) {         src.mark();         tgt.mark();         boolean found=true;         int pos=src.position() - 1;         while (tgt.hasRemaining()) {           if (!src.hasRemaining()) {             tgt.reset();             src.reset();             found=false;             break;           }           if (!(tgt.get() == src.get())) {             tgt.reset();             src.reset();             found=false;             break;           }         }         if (found)         return pos;       }     }     return -1;   }  catch (  CharacterCodingException e) {     e.printStackTrace();     return -1;   } } "
"public static boolean isAlphanumeric(String s){   if (isEmpty(s))   return defaultEmptyOK;   for (int i=0; i < s.length(); i++) {     char c=s.charAt(i);     if (!isLetterOrDigit(c))     return false;   }   return true; } "
"public SubtreeDragControl(){ } "
"public boolean removeHeaderView(View v){   if (mHeaderViewInfos.size() > 0) {     boolean result=false;     ListAdapter adapter=getAdapter();     if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {       result=true;     }     removeFixedViewInfo(v,mHeaderViewInfos);     return result;   }   return false; } "
"@Provides @Singleton @BlackListIpValueStore MapStore<Long> provideBlackListIps(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle){   CuratorFramework webCurator=withComponentNamespace(curator,\"web\");   return lifeCycle.manage(new ZkMapStore<>(webCurator,\"/blacklist\",new ZkTimestampSerializer())); } "
"public String toString(){   return getName(); } "
"private final boolean eq(Object o1,Object o2){   return o1 == o2 || ((o1 != null) && o1.equals(o2)); } "
"static String buildStyle(String style,String parentStyle,String defaultStyle){   String res;   if (!style.isEmpty()) {     if (style.startsWith(\"+\")) {       String addStyles=style.substring(1);       String inheritedStyles;       if (parentStyle != null) {         inheritedStyles=parentStyle;       }  else {         inheritedStyles=defaultStyle;       }       if (inheritedStyles != null && !inheritedStyles.isEmpty()) {         if (!addStyles.isEmpty()) {           res=inheritedStyles + (addStyles.startsWith(\" \") ? \"\" : \" \") + addStyles;         }  else {           res=inheritedStyles;         }       }  else {         res=style;       }     }  else {       res=style;     }   }  else   if (parentStyle != null) {     res=parentStyle;   }  else {     res=defaultStyle;   }   if (res != null) {     res=res.trim();   }   return res; } "
"public static AttackStatus calculateMagicalStatus(Creature attacker,Creature attacked,int criticalProb,boolean isSkill){   if (!isSkill) {     if (Rnd.get(0,1000) < StatFunctions.calculateMagicalResistRate(attacker,attacked,0)) {       return AttackStatus.RESIST;     }   }   if (StatFunctions.calculateMagicalCriticalRate(attacker,attacked,criticalProb)) {     return AttackStatus.CRITICAL;   }   return AttackStatus.NORMALHIT; } "
"protected BoardGetCommentsQueryWithExtended groupId(int value){   return unsafeParam(\"group_id\",value); } "
"public CacheHeader(String key,Entry entry){   this.key=key;   this.size=entry.data.length;   this.etag=entry.etag;   this.serverDate=entry.serverDate;   this.ttl=entry.ttl;   this.softTtl=entry.softTtl;   this.responseHeaders=entry.responseHeaders; } "
"public static <T extends RealFieldElement<T>>T distanceSq(final FieldVector3D<T> v1,final Vector3D v2){   return v1.distanceSq(v2); } "
"public static Observable<float[]> createFrom3D(Observable<float[]> stream){   final JKalman kalman=new JKalman(6,3);   Matrix m=new Matrix(3,1);   double[][] tr={{1,0,0,1,0,0},{0,1,0,0,1,0},{0,0,1,0,0,1},{0,0,0,1,0,0},{0,0,0,0,1,0},{0,0,0,0,0,1}};   kalman.setTransition_matrix(new Matrix(tr));   kalman.setError_cov_post(kalman.getError_cov_post().identity());   final float[] buffer=new float[3];   return Observable.create(null); } "
"public static Bitmap cropBitmap(Context context,Uri loadedImageUri,float[] points,int degreesRotated,int orgWidth,int orgHeight,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY,int reqWidth,int reqHeight){   Rect rect=getRectFromPoints(points,orgWidth,orgHeight,fixAspectRatio,aspectRatioX,aspectRatioY);   int width=reqWidth > 0 ? reqWidth : rect.width();   int height=reqHeight > 0 ? reqHeight : rect.height();   Bitmap result=null;   try {     result=decodeSampledBitmapRegion(context,loadedImageUri,rect,width,height);   }  catch (  Exception ignored) {   }   if (result != null) {     result=rotateBitmapInt(result,degreesRotated);     if (degreesRotated % 90 != 0) {       result=cropForRotatedImage(result,points,rect,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);     }   }  else {     try {       BitmapFactory.Options options=new BitmapFactory.Options();       options.inSampleSize=calculateInSampleSizeByReqestedSize(rect.width(),rect.height(),reqWidth,reqHeight);       Bitmap fullBitmap=decodeImage(context.getContentResolver(),loadedImageUri,options);       if (fullBitmap != null) {         result=cropBitmap(fullBitmap,points,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);         fullBitmap.recycle();       }     }  catch (    Exception e) {       throw new RuntimeException(\"Failed to load sampled bitmap: \" + loadedImageUri + \"\\r\\n\"+ e.getMessage(),e);     }   }   return result; } "
"@Override public void populateExpression(Object objValue){   if (objValue instanceof String) {     populateField((String)objValue);   } } "
"public void drawChartTransposed(Graphics2D gc){   int x0=2;   int x1=getWidth() - 2;   int y0=getHeight() - bottomMargin;   int y1=topMargin;   if (x0 >= x1)   return;   SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);   Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);   int diameter=Math.min(deviceBBox.width,deviceBBox.height) - 70;   deviceBBox.x=deviceBBox.x + (deviceBBox.width - diameter) / 2;   deviceBBox.y=deviceBBox.y + (deviceBBox.height - diameter) / 2;   if (getChartData().getMaxTotalSeries() <= 0) {     return;   }   String className=getChartData().getClassNames().iterator().next();   double factor=360.0 / getChartData().getTotalForClassIncludingDisabledSeries(className);   double totalValue=0;   Arc2D arc=new Arc2D.Double();   arc.setArcType(Arc2D.PIE);   arc.setFrame(deviceBBox.x + 1,deviceBBox.y + 1,diameter,diameter);   Point center=new Point((int)arc.getFrame().getCenterX(),(int)arc.getFrame().getCenterY());   gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));   for (  String series : getChartData().getSeriesNames()) {     double value=getChartData().getValue(series,className).doubleValue();     if (value > 0) {       arc.setAngleStart(totalValue * factor);       arc.setAngleExtent(value * factor);       totalValue+=value;       gc.setColor(getChartColors().getSampleColor(series));       if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});       gc.fill(arc);       if (sgc != null)       sgc.clearCurrentItem();       gc.setColor(Color.black);       gc.draw(arc);       boolean isSelected=getChartData().getChartSelection().isSelected(series,null);       if (isShowValues() || isSelected) {         double textAngle=Geometry.deg2rad(360 - (arc.getAngleStart() + arc.getAngleExtent() / 2));         Point2D apt=Geometry.translateByAngle(center,textAngle,diameter / 2 + 5);         if (isSelected)         gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);  else         gc.setColor(getFontColor(ChartViewer.FontKeys.ValuesFont.toString(),Color.DARK_GRAY));         if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});         drawString(gc,\"\" + (int)value,apt.getX(),apt.getY(),textAngle);         if (sgc != null)         sgc.clearCurrentItem();       }     }   }   if (chartData.getChartSelection().getSelectedSeries().size() > 0) {     totalValue=0;     gc.setStroke(HEAVY_STROKE);     gc.setColor(ProgramProperties.SELECTION_COLOR);     for (    String series : getChartData().getSeriesNames()) {       double value=getChartData().getValue(series,className).doubleValue();       arc.setAngleStart(totalValue * factor);       arc.setAngleExtent(value * factor);       totalValue+=value;       if (getChartData().getChartSelection().isSelected(series,null)) {         gc.draw(arc);       }     }     gc.setStroke(NORMAL_STROKE);   } } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"private void visitDescendants(NodeItem p,NodeItem skip){   int lidx=(skip == null ? 0 : p.getChildIndex(skip));   Iterator children=p.children();   p.setExpanded(children.hasNext());   for (int i=0; children.hasNext(); ++i) {     NodeItem c=(NodeItem)children.next();     if (c == skip) {       continue;     }     int doi=(int)(p.getDOI() - 1);     visit(c,c,doi,Math.abs(lidx - i));     if (doi > m_threshold)     visitDescendants(c,null);   } } "
"public Node addChild(Node parent){   throw new UnsupportedOperationException(\"Changes to tree structure not allowed for spanning trees.\"); } "
"public Element makeXmlElement(Document document){   return makeXmlElement(document,null); } "
"public void load(String fileName) throws IOException, MaryConfigurationException {   DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));   hdr=new MaryHeader(dis);   if (hdr.getType() != MaryHeader.UNITS) {     throw new MaryConfigurationException(\"File [\" + fileName + \"] is not a valid Mary Units file.\");   }   numberOfUnits=dis.readInt();   if (numberOfUnits < 0) {     throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number of units. Aborting.\");   }   sampleRate=dis.readInt();   if (sampleRate < 0) {     throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number sample rate. Aborting.\");   }   units=new Unit[numberOfUnits];   for (int i=0; i < numberOfUnits; i++) {     long startTime=dis.readLong();     int duration=dis.readInt();     units[i]=new Unit(startTime,duration,i);   } } "
"private boolean isKineticSkill(){ switch (getSkillId()) { case 2440: case 2441: case 2442: case 2443: case 2444: case 2445: case 2446: case 2447: case 2448: case 2449: case 2579: case 2580: case 2581:     return true; } return false; } "
"public void addAttributeNS(QName name,String type,String value){   int index=fLength;   if (fLength++ == fAttributes.length) {     Attribute[] attributes;     if (fLength < SIZE_LIMIT) {       attributes=new Attribute[fAttributes.length + 4];     }  else {       attributes=new Attribute[fAttributes.length << 1];     }     System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);     for (int i=fAttributes.length; i < attributes.length; i++) {       attributes[i]=new Attribute();     }     fAttributes=attributes;   }   Attribute attribute=fAttributes[index];   attribute.name.setValues(name);   attribute.type=type;   attribute.value=value;   attribute.nonNormalizedValue=value;   attribute.specified=false;   attribute.augs.removeAllItems(); } "
"public synchronized static JSpaceAttributes convertXML(InputStream is,boolean isConvertToSystemProperty,Properties customProps) throws SAXException, ParserConfigurationException, IOException {   Document doc=XmlUtils.getDocumentBuilder().parse(is);   Element root=doc.getDocumentElement();   JSpaceAttributes prop=new JSpaceAttributes();   convertXMLtoProperty(root,prop,isConvertToSystemProperty);   convertCustomContainerPropsToJProperties(customProps,prop);   return prop; } "
"public static double hz2bark(double freqInHz){   double f=freqInHz / 600;   return 6 * Math.log(f + Math.sqrt((f * f) + 1)); } "
"public int start_state(){   return 0; } "
"private T[][] orthogonalizeMatrix(final T[][] m,final double threshold) throws MathIllegalArgumentException {   T x00=m[0][0];   T x01=m[0][1];   T x02=m[0][2];   T x10=m[1][0];   T x11=m[1][1];   T x12=m[1][2];   T x20=m[2][0];   T x21=m[2][1];   T x22=m[2][2];   double fn=0;   double fn1;   final T[][] o=MathArrays.buildArray(m[0][0].getField(),3,3);   int i=0;   while (++i < 11) {     final T mx00=m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));     final T mx10=m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));     final T mx20=m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));     final T mx01=m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));     final T mx11=m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));     final T mx21=m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));     final T mx02=m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));     final T mx12=m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));     final T mx22=m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));     o[0][0]=x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));     o[0][1]=x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5));     o[0][2]=x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5));     o[1][0]=x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5));     o[1][1]=x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5));     o[1][2]=x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5));     o[2][0]=x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5));     o[2][1]=x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5));     o[2][2]=x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5));     final double corr00=o[0][0].getReal() - m[0][0].getReal();     final double corr01=o[0][1].getReal() - m[0][1].getReal();     final double corr02=o[0][2].getReal() - m[0][2].getReal();     final double corr10=o[1][0].getReal() - m[1][0].getReal();     final double corr11=o[1][1].getReal() - m[1][1].getReal();     final double corr12=o[1][2].getReal() - m[1][2].getReal();     final double corr20=o[2][0].getReal() - m[2][0].getReal();     final double corr21=o[2][1].getReal() - m[2][1].getReal();     final double corr22=o[2][2].getReal() - m[2][2].getReal();     fn1=corr00 * corr00 + corr01 * corr01 + corr02 * corr02 + corr10 * corr10 + corr11 * corr11 + corr12 * corr12 + corr20 * corr20 + corr21 * corr21 + corr22 * corr22;     if (FastMath.abs(fn1 - fn) <= threshold) {       return o;     }     x00=o[0][0];     x01=o[0][1];     x02=o[0][2];     x10=o[1][0];     x11=o[1][1];     x12=o[1][2];     x20=o[2][0];     x21=o[2][1];     x22=o[2][2];     fn=fn1;   }   throw new MathIllegalArgumentException(LocalizedGeometryFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,i - 1); } "
"public void onAddPressed(View v){   addWebSite(); } "
"public void draw(Canvas c,Rect bounds){   final RectF arcBounds=mTempBounds;   arcBounds.set(bounds);   arcBounds.inset(mStrokeInset,mStrokeInset);   final float startAngle=(mStartTrim + mRotation) * 360;   final float endAngle=(mEndTrim + mRotation) * 360;   float sweepAngle=endAngle - startAngle;   mPaint.setColor(mColors[mColorIndex]);   c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);   drawTriangle(c,startAngle,sweepAngle,bounds);   if (mAlpha < 255) {     mCirclePaint.setColor(mBackgroundColor);     mCirclePaint.setAlpha(255 - mAlpha);     c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);   } } "
"private static String prepare(String imageName){   AssertUtil.assertNotNull(imageName,\"imageName\");   for (  String registryPath : OFFICIAL_REGISTRY_ADDRESS_LIST) {     if (imageName.startsWith(registryPath)) {       return imageName.substring(registryPath.length());     }   }   return imageName; } "
"public void addAnimation(Animation animation){   if (mAnimations.contains(animation)) {     return;   }   mAnimations.add(animation);   animation.start(); } "
"private void resetBlockletProcessingCount(){   blockletProcessingCount.set(0); } "
"protected void prepareAndPopulateTableView(){   prepareTableView();   Attribute attr;   int bucket;   for (int i=0; i < fLength; ++i) {     attr=fAttributes[i];     bucket=getTableViewBucket(attr.name.rawname);     if (fAttributeTableViewChainState[bucket] != fLargeCount) {       fAttributeTableViewChainState[bucket]=fLargeCount;       attr.next=null;       fAttributeTableView[bucket]=attr;     }  else {       attr.next=fAttributeTableView[bucket];       fAttributeTableView[bucket]=attr;     }   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_ME(int value0,int num1){   return new SM_SYSTEM_MESSAGE(1390162,value0,num1); } "
"private void collectAttributes(AttributeSet attributeSet){   TypedArray attributesArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.PresenterLayout);   try {     mOverlappingBackgroundColor=attributesArray.getColor(R.styleable.PresenterLayout_background_color_overlapping,mDefaultOverlappingBackgroundColor);     mInflateDefaultViews=attributesArray.getBoolean(R.styleable.PresenterLayout_inflate_default_views,true);     mInitialViewId=attributesArray.getInt(R.styleable.PresenterLayout_show_initial_view,NONE_VIEW);   }   finally {     attributesArray.recycle();   } } "
"private void parseDateParam(Map<String,Integer> params,Object value){   if (value instanceof Number) {     int n=((Number)value).intValue();     if (n <= 31) {       if (params.get(\"day1\") == null) {         params.put(\"day1\",n);       }  else {         params.put(\"day2\",n);       }     }  else {       if (params.get(\"year1\") == null) {         params.put(\"year1\",n);       }  else {         params.put(\"year2\",n);       }     }   }   if (value instanceof String) {     int n=MONTH.indexOf(((String)value).toUpperCase());     if (n > -1) {       if (params.get(\"month1\") == null) {         params.put(\"month1\",n);       }  else {         params.put(\"month2\",n);       }     }   }   if (GMT.equalsIgnoreCase(String.valueOf(value))) {     params.put(\"gmt\",1);   } } "
"public JsonArray(JsonArray array){   this(array,false); } "
"@Override public void requestPhotoDetails(Context c){   view.initRefreshStart();   listener=new OnRequestPhotoDetailsListener(c);   model.getService().requestPhotoDetails(model.getPhoto(),listener); } "
"public static int currentState(){   return currentState; } "
"public static void main(String[] args) throws Exception {   if (args.length == 0 && System.getProperty(\"user.name\").equals(\"huson\")) {     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/PF04563_meta.out\",\"-o\",\"/Users/huson/data/michael/adam/PF04563_meta.blastx\",\"-r\",\"/Users/huson/data/michael/input/SRR172902-rpoB.fasta\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.out\",\"-o\",\"/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next2/SRR172902-rpoB.fasta\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.out\",\"-o\",\"/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.out\",\"-o\",\"/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next3/SRR172902.out\",\"-o\",\"/Users/huson/data/michael/adam/next3/SRR172902.blastx\",\"-r\",\"/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.out\",\"-o\",\"/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};     args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.out\",\"-o\",\"/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.blastx\",\"-r\",\"/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz\"};   }   try {     ProgramProperties.setProgramName(\"HMM2BlastX\");     ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);     long start=System.currentTimeMillis();     (new HMM2Blastx()).run(args);     System.err.println(\"Time: \" + ((System.currentTimeMillis() - start) / 1000) + \"s\");     System.exit(0);   }  catch (  Exception ex) {     Basic.caught(ex);     System.exit(1);   } } "
"public UseItemPotionResponse.Result heal() throws LoginFailedException, RemoteServerException {   if (!isInjured())   return UseItemPotionResponse.Result.ERROR_CANNOT_USE;   if (api.getInventories().getItemBag().getItem(ItemId.ITEM_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_POTION);   if (api.getInventories().getItemBag().getItem(ItemId.ITEM_SUPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_SUPER_POTION);   if (api.getInventories().getItemBag().getItem(ItemId.ITEM_HYPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_HYPER_POTION);   if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_MAX_POTION);   return UseItemPotionResponse.Result.ERROR_CANNOT_USE; } "
"public boolean isApplicable(){   return true; } "
"public ObjectColumn(int nrows){   this(Object.class,nrows,nrows,null); } "
"public static void parse(PokemonGo api,RequestType requestType,ByteString data){   try { switch (requestType) { case GET_INVENTORY:       api.getInventories().updateInventories(GetInventoryResponse.parseFrom(data));     break; case DOWNLOAD_SETTINGS:   api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(data)); break; default : break; } }  catch (InvalidProtocolBufferException e) { throw new AsyncRemoteServerException(e); } } "
"public FaveGetMarketItemsQuery extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public CM_DELETE_CHARACTER(int opcode,State state,State... restStates){   super(opcode,state,restStates); } "
"public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,UserField... fields){   super(client,\"groups.getRequests\",GetRequestsFieldsResponse.class);   accessToken(actor.getAccessToken());   groupId(groupId);   fields(fields); } "
"public Main(){ } "
"public static String loadFileToString(String sFilename){   StringBuffer sb=new StringBuffer();   try {     BufferedReader in=new BufferedReader(new FileReader(sFilename));     String line;     while ((line=in.readLine()) != null) {       sb.append(line);     }     in.close();   }  catch (  Exception e) {     System.err.println(\"Coult not load file:\" + sFilename);     e.printStackTrace(System.err);   }   return sb.toString(); } "
"public void endArray() throws IOException {   int p=peeked;   if (p == PEEKED_NONE) {     p=doPeek();   }   if (p == PEEKED_END_ARRAY) {     stackSize--;     pathIndices[stackSize - 1]++;     peeked=PEEKED_NONE;   }  else {     throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());   } } "
"private void reset(){   boolean isStarted=isStarted();   clear();   build();   if (isStarted) {     start();   } } "
"public void reassign(){   int i, j;   for (i=0, j=lastNumber - 1; i < j; ++i) {     if (numberToObj[i] != null)     continue;     while (j > i) {       if (numberToObj[j] != null)       break;       --j;     }     if (i == j)     break;     numberToObj[i]=numberToObj[j];     numberToObj[i].setNumber(i);     numberToObj[j]=null;   }   lastNumber=i; } "
"public void onSuccess(int statusCode,Header[] headers,JSONObject response){   onSuccess(statusCode,response); } "
"public GroupsSetCallbackSettingsQuery photoNew(Boolean value){   return unsafeParam(\"photo_new\",value); } "
"public void writeEoModelText(PrintWriter writer,String entityPrefix,String helperName,Set<String> entityNameIncludeSet,ModelReader entityModelReader) throws GenericEntityException {   if (entityPrefix == null)   entityPrefix=\"\";   if (helperName == null)   helperName=\"localderby\";   UtilPlist.writePlistPropertyMap(this.createEoModelMap(entityPrefix,helperName,entityNameIncludeSet,entityModelReader),0,writer,false); } "
"public void notify(RemoteEvent event) throws UnknownEventException, RemoteException {   RemoteEventListener l=get();   if (l != null) {     l.notify(event);   } } "
"public boolean isDistinct(){   return distinct; } "
"public NavigableImagePanel(BufferedImage image) throws IOException {   this();   setImage(image); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHate_A_TO_SELF(String skillcaster,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200796,skillcaster,value0,skillname); } "
"Domino<T,R> defaultScheduler(){   return schedule(new DefaultScheduler()); } "
"private void removeReadData(final int size){   if (!persistenceManager.getFallbackManager().removeReadData(size)) {     persistenceManager.getAlarmSender().fileNotReachable(ACTIVATED,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());     FALLBACK_LOG.error(\"commitFallbackCommandLogs() - CommandTags cannot be removed from the fallback log file\");   }  else {     persistenceManager.getAlarmSender().fileNotReachable(DOWN,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());   } } "
"@Override public boolean treeExpanded(Object selectedItem){   return false; } "
"protected void jimplifyStatic(DexBody body){   invocation=Jimple.v().newStaticInvokeExpr(getStaticSootMethodRef(),buildParameters(body,true));   body.setDanglingInstruction(this); } "
"private Response<Bitmap> doParse(NetworkResponse response){   byte[] data=response.data;   BitmapFactory.Options decodeOptions=new BitmapFactory.Options();   Bitmap bitmap=null;   if (mMaxWidth == 0 && mMaxHeight == 0) {     decodeOptions.inPreferredConfig=mDecodeConfig;     bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);   }  else {     decodeOptions.inJustDecodeBounds=true;     BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);     int actualWidth=decodeOptions.outWidth;     int actualHeight=decodeOptions.outHeight;     int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);     int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);     decodeOptions.inJustDecodeBounds=false;     decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);     Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);     if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {       bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);       tempBitmap.recycle();     }  else {       bitmap=tempBitmap;     }   }   if (bitmap == null) {     return Response.error(new ParseError(response));   }  else {     return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));   } } "
"protected void callForHelp(int distance){   Creature firstTarget=getAggroList().getMostHated();   for (  VisibleObject object : getKnownList().getKnownObjects().values()) {     if (object instanceof Npc && isInRange(object,distance)) {       Npc npc=(Npc)object;       if ((npc != null) && !npc.getLifeStats().isAlreadyDead()) {         npc.getAi2().onCreatureEvent(AIEventType.CREATURE_AGGRO,firstTarget);       }     }   } } "
"public DistributedLogNamespaceBuilder clientId(String clientId){   this._clientId=clientId;   return this; } "
"protected Map<LogicalMetric,Set<ApiHaving>> generateHavings(String havingQuery,Set<LogicalMetric> logicalMetrics,MetricDictionary metricDictionary) throws BadApiRequestException {   LOG.trace(\"Metric Dictionary: {}\",metricDictionary);   if (havingQuery == null || \"\".equals(havingQuery)) {     return Collections.emptyMap();   }   List<String> unmatchedMetrics=new ArrayList<>();   List<String> apiHavings=Arrays.asList(havingQuery.split(COMMA_AFTER_BRACKET_PATTERN));   Map<LogicalMetric,Set<ApiHaving>> generated=new LinkedHashMap<>();   for (  String apiHaving : apiHavings) {     try {       ApiHaving newHaving=new ApiHaving(apiHaving,metricDictionary);       LogicalMetric metric=newHaving.getMetric();       if (!logicalMetrics.contains(metric)) {         unmatchedMetrics.add(metric.getName());       }  else {         generated.putIfAbsent(metric,new LinkedHashSet<>());         generated.get(metric).add(newHaving);       }     }  catch (    BadHavingException havingException) {       throw new BadApiRequestException(havingException.getMessage(),havingException);     }   }   if (!unmatchedMetrics.isEmpty()) {     LOG.debug(HAVING_METRICS_NOT_IN_QUERY_FORMAT.logFormat(unmatchedMetrics.toString()));     throw new BadApiRequestException(HAVING_METRICS_NOT_IN_QUERY_FORMAT.format(unmatchedMetrics.toString()));   }   LOG.trace(\"Generated map of havings: {}\",generated);   return generated; } "
"private LimitSizeEntryList filterEntries(LimitSizeEntryList entries){   LimitSizeEntryList list=new LimitSizeEntryList(entries.capacity(),entries.getTrimSize());   if (collapsed) {     for (    ConsoleEntry entry : entries) {       if (filterEntry(entry)) {         ConsoleCollapsedEntry collapsedEntry=as(entry,ConsoleCollapsedEntry.class);         if (collapsedEntry != null) {           collapsedEntry.index=list.totalCount();           list.addObject(collapsedEntry);         }  else {           collapsedEntry=entryLookup.addEntry(entry);           if (collapsedEntry.count == 1) {             collapsedEntry.index=list.totalCount();             list.addObject(collapsedEntry);           }         }       }     }   }  else {     for (    ConsoleEntry entry : entries) {       if (filterEntry(entry)) {         list.addObject(entry);       }     }   }   return list; } "
"@Override public void undo(Transaction tx){   LogSeqNum lsn=tx.recoveryMgr().logLogicalAbort(this.txNum,this.lsn);   VanillaDb.logMgr().flush(lsn); } "
"public static void exitSafeRegion(boolean token){   sEnabled=token; } "
"public TIntArrayList(int[] values){   this(Math.max(values.length,DEFAULT_CAPACITY));   add(values); } "
"@Override public void onCanceled(T data){   super.onCanceled(data);   onReleaseResources(data); } "
"@Override public Scan open(){   Schema sch=p.schema();   TempTable temp=new TempTable(sch,tx);   Scan src=p.open();   UpdateScan dest=temp.open();   src.beforeFirst();   while (src.next()) {     dest.insert();     for (    String fldname : sch.fields())     dest.setVal(fldname,src.getVal(fldname));   }   src.close();   dest.beforeFirst();   return dest; } "
"public boolean isApplicable(){   ViewerBase viewer=(ViewerBase)getViewer();   return viewer.getGraph().getNumberOfNodes() > 0; } "
"private void calcAngles(){   mDrawAngles=new float[mData.getYValCount()];   mAbsoluteAngles=new float[mData.getYValCount()];   float yValueSum=mData.getYValueSum();   List<IPieDataSet> dataSets=mData.getDataSets();   int cnt=0;   for (int i=0; i < mData.getDataSetCount(); i++) {     IPieDataSet set=dataSets.get(i);     for (int j=0; j < set.getEntryCount(); j++) {       mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getVal()),yValueSum);       if (cnt == 0) {         mAbsoluteAngles[cnt]=mDrawAngles[cnt];       }  else {         mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];       }       cnt++;     }   } } "
"public void removeEmojiconGroup(int position){   emojiconGroupList.remove(position);   pagerView.removeEmojiconGroup(position);   tabBar.removeTab(position); } "
"public DataType(Class<T> clazz,BiConsumer<PacketBuffer,T> writer,Function<PacketBuffer,T> reader){   this.clazz=clazz;   this.writer=writer;   this.reader=reader; } "
"public Verify(String[] args){   final CmdLineParser parser=new CmdLineParser(this,ParserProperties.defaults().withUsageWidth(80));   try {     parser.parseArgument(args);   }  catch (  CmdLineException e) {     System.err.println(e.getMessage());     print_usage_and_exit_(parser);   }   if (help) {     print_usage_and_exit_(parser);   }   if (files.isEmpty())   System.exit(EX_USAGE); } "
"public static String removeLastOr(String string){   string=StringUtils.stripEnd(string,\" \");   return StringUtils.removeEndIgnoreCase(string,\"or\"); } "
"@RequestMapping(value=\"/\",method=PUT,produces=APPLICATION_JSON_VALUE) public ResponseEntity<ProjectDTO> update(@RequestBody ProjectDTO projectDTO) throws URISyntaxException {   log.debug(\"Update ProjectDTO : {}\",projectDTO);   if (!projectDTO.isIdSet()) {     return create(projectDTO);   }   ProjectDTO result=projectDTOService.save(projectDTO);   return ResponseEntity.ok().body(result); } "
"public static void verifyPhoneToken(String token,@Nullable AirMapCallback<Void> callback){   PilotService.verifyToken(token,callback); } "
"private int generateViewType(WXComponent component){   long id;   try {     id=Integer.parseInt(component.getDomObject().ref);     String type=component.getDomObject().attr.getScope();     if (!TextUtils.isEmpty(type)) {       if (mRefToViewType == null) {         mRefToViewType=new ArrayMap<>();       }       if (!mRefToViewType.containsKey(type)) {         mRefToViewType.put(type,id);       }       id=mRefToViewType.get(type);     }   }  catch (  RuntimeException e) {     WXLogUtils.eTag(TAG,e);     id=RecyclerView.NO_ID;     WXLogUtils.e(TAG,\"getItemViewType: NO ID, this will crash the whole render system of WXListRecyclerView\");   }   return (int)id; } "
"public void clearAllQueryCaches(){   this.configManager.clearAllQueryCaches(); } "
"private boolean quickReject(ServerEntry entry){   for (int i=0; i < _fieldsValues.length; i++) {     Object templateFieldValue=_fieldsValues[i];     if (templateFieldValue == null)     continue;     Object entryFieldValue=entry.getFixedPropertyValue(i);     if (entryFieldValue == null)     return true;     if (templateFieldValue == entryFieldValue)     continue;     if (templateFieldValue.hashCode() != entryFieldValue.hashCode())     return true;   }   return false; } "
"public void deactivate(){   if (!inSelection) {     inSelection=true;     try {       chartSelection.clearSelectionAttributes();       this.repaint();     }   finally {       inSelection=false;     }   } } "
"public ForwardFlowAnalysis(DirectedGraph<N> graph){   super(graph); } "
"public NewsfeedSearchQueryWithExtended searchExtended(UserActor actor){   return new NewsfeedSearchQueryWithExtended(getClient(),actor); } "
"public GroupsSearchQuery market(Boolean value){   return unsafeParam(\"market\",value); } "
"public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_ALL_OPTION_REMOVED(String value0){   return new SM_SYSTEM_MESSAGE(1300465,value0); } "
"@Override public void startElement(String name,AttributeList atts) throws SAXException {   if (abandonHope) {     return;   }   if (saxParser == null) {     String prefix=\"\";     if (name.indexOf(':') > 0) {       prefix=name.substring(0,name.indexOf(':'));     }     String localName=name;     if (localName.indexOf(':') > 0) {       localName=localName.substring(localName.indexOf(':') + 1);     }     String namespaceURI=null;     if (prefix.equals(\"\")) {       namespaceURI=atts.getValue(\"xmlns\");     }  else {       namespaceURI=atts.getValue(\"xmlns:\" + prefix);     }     String saxParserClass=getCatalogParser(namespaceURI,localName);     if (saxParserClass == null) {       abandonHope=true;       if (namespaceURI == null) {         debug.message(2,\"No Catalog parser for \" + name);       }  else {         debug.message(2,\"No Catalog parser for \" + \"{\" + namespaceURI + \"}\"+ name);       }       return;     }     try {       saxParser=(SAXCatalogParser)Class.forName(saxParserClass,true,loader != null ? loader : this.getClass().getClassLoader()).newInstance();       saxParser.setCatalog(catalog);       saxParser.startDocument();       saxParser.startElement(name,atts);     }  catch (    ClassNotFoundException cnfe) {       saxParser=null;       abandonHope=true;       debug.message(2,cnfe.toString());     } catch (    InstantiationException ie) {       saxParser=null;       abandonHope=true;       debug.message(2,ie.toString());     } catch (    IllegalAccessException iae) {       saxParser=null;       abandonHope=true;       debug.message(2,iae.toString());     } catch (    ClassCastException cce) {       saxParser=null;       abandonHope=true;       debug.message(2,cce.toString());     }   }  else {     saxParser.startElement(name,atts);   } } "
"public Bundler putShort(String key,short value){   bundle.putShort(key,value);   return this; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_A_TO_SELF(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200806,skillcaster,skillname); } "
"public AudioSetBroadcastQuery targetIds(Integer... value){   return unsafeParam(\"target_ids\",value); } "
"public EventDescriptor(Class eventClass){   this(eventClass,null); } "
"@Override public void populateExpression(Object objValue){   if (comboBox != null) {     if (objValue instanceof String) {       String sValue=(String)objValue;       populateField(sValue);     }   } } "
"static private int[] worstIndices(double[] x,double propKept){   if (propKept == 0)   return null;   int n=x.length;   int numNeg=0;   for (  double aX1 : x)   if (aX1 < 0.0)   numNeg++;   if (numNeg == 0)   return null;   double[] xcopy=new double[numNeg];   int j=0;   for (  double aX : x)   if (aX < 0.0)   xcopy[j++]=aX;   Arrays.sort(xcopy);   int nkept=(int)Math.ceil(propKept * numNeg);   double cutoff=xcopy[nkept - 1];   int[] result=new int[nkept];   int front=0, back=nkept - 1;   for (int i=0; i < n; i++) {     if (x[i] < cutoff)     result[front++]=i;  else     if (x[i] == cutoff) {       if (back >= front)       result[back--]=i;     }   }   return result; } "
"@SubscribeEvent public void onRenderTick(TickEvent.RenderTickEvent ev){   if (ev.phase == Phase.START) {     if (this.isOverriding()) {       EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;       if (player != null) {         updateYawAndPitch();         player.rotationPitch=this.mCameraPitch;         player.rotationYaw=this.mYaw;       }     }   } } "
"public static CredentialsDialogFragment newInstanceForCredentials(WebView webView,HttpAuthHandler handler){   if (handler == null) {     throw new IllegalArgumentException(\"Trying to create instance with parameter handler\" + \" == null\");   }   CredentialsDialogFragment frag=new CredentialsDialogFragment();   frag.mHandler=handler;   frag.mWebView=webView;   return frag; } "
"void put(int key,MvvmViewModel cacheViewModel){   cache.put(key,cacheViewModel); } "
"public static List reverseList(List l){   LinkedList lRes=new LinkedList();   int iListSize=l.size();   for (int iCnt=0; iCnt < iListSize; iCnt++) {     lRes.add(l.get(iListSize - iCnt - 1));   }   return lRes; } "
"public boolean shippingApplies(){   boolean shippingApplies=false;   for (  ShoppingCartItem item : this) {     if (item.shippingApplies()) {       shippingApplies=true;       break;     }   }   return shippingApplies; } "
"public boolean isApplicable(){   return ((Director)getDir()).getDocument().getSampleSelection().size() > 0; } "
"public void stopPreview(){   if (camera != null && previewing) {     if (!useOneShotPreviewCallback) {       camera.setPreviewCallback(null);     }     camera.stopPreview();     previewCallback.setHandler(null,0);     autoFocusCallback.setHandler(null,0);     previewing=false;   } } "
"public void destroy(){   for (  Tab tab : mRewoundTabs) {     if (tab.isInitialized())     tab.destroy();   } } "
"public MessagesSearchQuery peerId(Integer value){   return unsafeParam(\"peer_id\",value); } "
"private void calculateJavaSourceDirectories(BlazeContext context,WorkspaceRoot workspaceRoot,ArtifactLocationDecoder artifactLocationDecoder,WorkspacePath directoryRoot,SourceTestConfig sourceTestConfig,Collection<SourceArtifact> javaArtifacts,Collection<JavaPackageReader> javaPackageReaders,Collection<BlazeSourceDirectory> result){   List<SourceRoot> sourceRootsPerFile=Lists.newArrayList();   List<ListenableFuture<SourceRoot>> sourceRootFutures=Lists.newArrayList();   for (  final SourceArtifact sourceArtifact : javaArtifacts) {     ListenableFuture<SourceRoot> future=executorService.submit(null);     sourceRootFutures.add(future);   }   try {     for (    SourceRoot sourceRoot : Futures.allAsList(sourceRootFutures).get()) {       if (sourceRoot != null) {         sourceRootsPerFile.add(sourceRoot);       }     }   }  catch (  ExecutionException|InterruptedException e) {     LOG.error(e);     throw new IllegalStateException(\"Could not read sources\");   }   Multimap<WorkspacePath,SourceRoot> sourceDirectoryToSourceRoots=HashMultimap.create();   for (  SourceRoot sourceRoot : sourceRootsPerFile) {     sourceDirectoryToSourceRoots.put(sourceRoot.workspacePath,sourceRoot);   }   Map<WorkspacePath,SourceRoot> workspacePathToSourceRoot=Maps.newHashMap();   for (  WorkspacePath workspacePath : sourceDirectoryToSourceRoots.keySet()) {     Collection<SourceRoot> sources=sourceDirectoryToSourceRoots.get(workspacePath);     Multiset<String> packages=HashMultiset.create();     for (    SourceRoot source : sources) {       packages.add(source.packagePrefix);     }     final String directoryPackagePrefix;     if (packages.elementSet().size() == 1) {       directoryPackagePrefix=packages.elementSet().iterator().next();     }  else {       String preferredPackagePrefix=PackagePrefixCalculator.packagePrefixOf(workspacePath);       directoryPackagePrefix=pickMostFrequentlyOccurring(packages,preferredPackagePrefix);     }     SourceRoot candidateRoot=new SourceRoot(workspacePath,directoryPackagePrefix);     workspacePathToSourceRoot.put(workspacePath,candidateRoot);   }   if (!workspacePathToSourceRoot.containsKey(directoryRoot)) {     SourceRoot candidateRoot=new SourceRoot(directoryRoot,PackagePrefixCalculator.packagePrefixOf(directoryRoot));     workspacePathToSourceRoot.put(directoryRoot,candidateRoot);   }   Map<WorkspacePath,SourceRootDirectoryNode> sourceRootDirectoryNodeMap=Maps.newHashMap();   SourceRootDirectoryNode rootNode=new SourceRootDirectoryNode(directoryRoot,null);   sourceRootDirectoryNodeMap.put(directoryRoot,rootNode);   for (  SourceRoot sourceRoot : workspacePathToSourceRoot.values()) {     final String sourcePathRelativeToDirectoryRoot=sourcePathRelativeToDirectoryRoot(directoryRoot,sourceRoot.workspacePath);     List<String> pathComponents=!Strings.isNullOrEmpty(sourcePathRelativeToDirectoryRoot) ? PATH_SPLITTER.splitToList(sourcePathRelativeToDirectoryRoot) : ImmutableList.of();     SourceRootDirectoryNode previousNode=rootNode;     for (int i=0; i < pathComponents.size(); ++i) {       final WorkspacePath workspacePath=getWorkspacePathFromPathComponents(directoryRoot,pathComponents,i + 1);       SourceRootDirectoryNode node=sourceRootDirectoryNodeMap.get(workspacePath);       if (node == null) {         node=new SourceRootDirectoryNode(workspacePath,pathComponents.get(i));         sourceRootDirectoryNodeMap.put(workspacePath,node);         previousNode.children.add(node);       }       previousNode=node;     }   }   for (  SourceRoot sourceRoot : workspacePathToSourceRoot.values()) {     final String sourcePathRelativeToDirectoryRoot=sourcePathRelativeToDirectoryRoot(directoryRoot,sourceRoot.workspacePath);     List<String> packageComponents=PACKAGE_SPLITTER.splitToList(sourceRoot.packagePrefix);     List<String> pathComponents=!Strings.isNullOrEmpty(sourcePathRelativeToDirectoryRoot) ? PATH_SPLITTER.splitToList(sourcePathRelativeToDirectoryRoot) : ImmutableList.of();     int packageIndex=packageComponents.size();     int pathIndex=pathComponents.size();     while (pathIndex >= 0 && packageIndex >= 0) {       final WorkspacePath workspacePath=getWorkspacePathFromPathComponents(directoryRoot,pathComponents,pathIndex);       SourceRootDirectoryNode node=sourceRootDirectoryNodeMap.get(workspacePath);       String packagePrefix=PACKAGE_JOINER.join(packageComponents.subList(0,packageIndex));       if (sourceRoot.workspacePath.equals(workspacePath)) {         node.forcedPackagePrefix=packagePrefix;       }  else {         node.packagePrefixVotes.add(packagePrefix);       }       String pathComponent=pathIndex > 0 ? pathComponents.get(pathIndex - 1) : \"\";       String packageComponent=packageIndex > 0 ? packageComponents.get(packageIndex - 1) : \"\";       if (!pathComponent.equals(packageComponent)) {         break;       }       --packageIndex;       --pathIndex;     }   }   Map<WorkspacePath,SourceRoot> sourceRoots=Maps.newHashMap();   SourceRootDirectoryNode root=sourceRootDirectoryNodeMap.get(directoryRoot);   visitDirectoryNode(sourceRoots,root,null);   for (  SourceRoot sourceRoot : sourceRoots.values()) {     result.add(BlazeSourceDirectory.builder(workspaceRoot.fileForPath(sourceRoot.workspacePath)).setPackagePrefix(sourceRoot.packagePrefix).setTest(sourceTestConfig.isTestSource(sourceRoot.workspacePath.relativePath())).setGenerated(false).build());   } } "
"@Override public void close() throws IOException {   throw exception; } "
"public boolean onSwipedAway(boolean toRight){   return false; } "
"public static <E>Stream<E> gate(Stream<E> stream,Predicate<? super E> validator){   Objects.requireNonNull(stream);   Objects.requireNonNull(validator);   GatingSpliterator<E> spliterator=GatingSpliterator.of(stream.spliterator(),validator);   return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null); } "
"public void animateX(int durationMillis,Easing.EasingOption easing){   if (android.os.Build.VERSION.SDK_INT < 11)   return;   ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,\"phaseX\",0f,1f);   animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));   animatorX.setDuration(durationMillis);   animatorX.addUpdateListener(mListener);   animatorX.start(); } "
"public void timeToSpeech(int hour,int min){   if (hour < 0 || hour > 23) {     throw new IllegalArgumentException(\"Bad time format: hour\");   }   if (min < 0 || min > 59) {     throw new IllegalArgumentException(\"Bad time format: min\");   }   String theTime=timeToString(hour,min);   textToSpeech(theTime); } "
"public static boolean isBodyVelocityEnabled(){   return bodyVelocityEnabled; } "
"public ObjectFactory(){ } "
"public synchronized ZooKeeperClientBuilder statsLogger(StatsLogger statsLogger){   this.statsLogger=statsLogger;   return this; } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"select nodes=\");   String what=np.getWordMatchesIgnoringCase(\"all none leaves internal previous subTree leavesBelow subLeaves nodesAbove intermediate invert\");   np.matchRespectCase(\";\");   final ViewerBase viewer;   if (getViewer() instanceof ViewerBase)   viewer=(ViewerBase)getViewer();  else   if (getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() instanceof ViewerBase)   viewer=(ViewerBase)((ClusterViewer)getViewer()).getGraphView();  else   if (getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getTabbedIndex() == ClusterViewer.MATRIX_TAB_INDEX && what.equalsIgnoreCase(\"previous\")) {     ((ClusterViewer)getViewer()).getMatrixTab().selectByLabels(ProjectManager.getPreviouslySelectedNodeLabels());     return;   }  else   return;   if (what.equalsIgnoreCase(\"all\"))   viewer.selectAllNodes(true);  else   if (what.equals(\"none\"))   viewer.selectAllNodes(false);  else   if (what.equals(\"leaves\"))   viewer.selectAllLeaves();  else   if (what.equals(\"internal\"))   viewer.selectAllInternal();  else   if (what.equals(\"previous\"))   viewer.selectNodesByLabels(ProjectManager.getPreviouslySelectedNodeLabels(),true);  else   if (what.equalsIgnoreCase(\"subTree\"))   viewer.selectSubTreeNodes();  else   if (what.equals(\"subLeaves\") || what.equals(\"leavesBelow\"))   viewer.selectLeavesBelow();  else   if (what.equals(\"nodesAbove\"))   viewer.selectNodesAbove();  else   if (what.equals(\"intermediate\"))   viewer.selectAllIntermediateNodes();  else   if (what.equals(\"invert\"))   viewer.invertNodeSelection();   System.err.println(\"Number of nodes selected: \" + viewer.getNumberSelectedNodes());   viewer.repaint(); } "
"public VideoSaveQuery privacyComment(String... value){   return unsafeParam(\"privacy_comment\",value); } "
"public static boolean isGlyphFlag(){   return glyphFlag; } "
"public boolean dynamic_order(){   return soot.PhaseOptions.getBoolean(options,\"dynamic-order\"); } "
"private String printOFormat(int x){   String sx=null;   if (x == Integer.MIN_VALUE)   sx=\"20000000000\";  else   if (x < 0) {     String t=Integer.toString((~(-x - 1)) ^ Integer.MIN_VALUE,8); switch (t.length()) { case 1:       sx=\"2000000000\" + t;     break; case 2:   sx=\"200000000\" + t; break; case 3: sx=\"20000000\" + t; break; case 4: sx=\"2000000\" + t; break; case 5: sx=\"200000\" + t; break; case 6: sx=\"20000\" + t; break; case 7: sx=\"2000\" + t; break; case 8: sx=\"200\" + t; break; case 9: sx=\"20\" + t; break; case 10: sx=\"2\" + t; break; case 11: sx=\"3\" + t.substring(1); break; } }  else sx=Integer.toString(x,8); return printOFormat(sx); } "
"@NotNull public ObjectProperty<Color> backgroundColor(){   return myBackgroundColor; } "
"public static Element firstChildElement(Element element,String... childElementNames){   return firstChildElement(element,UtilMisc.toSetArray(childElementNames)); } "
"public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints){   List<LinearConstraint> normalized=new ArrayList<LinearConstraint>(originalConstraints.size());   for (  LinearConstraint constraint : originalConstraints) {     normalized.add(normalize(constraint));   }   return normalized; } "
"public static boolean raycast(Ray ray,double maxLength,Segment segment,Transform transform,Raycast raycast){   Vector2 p0=ray.getStart();   Vector2 d0=ray.getDirectionVector();   Vector2 p1=transform.getTransformed(segment.getPoint1());   Vector2 p2=transform.getTransformed(segment.getPoint2());   Vector2 d1=p1.to(p2);   if (segment.contains(p0,transform))   return false;   Vector2 p0ToP1=p1.difference(p0);   double num=d1.cross(p0ToP1);   double den=d1.cross(d0);   if (Math.abs(den) <= Epsilon.E) {     Vector2 n=d0.cross(1.0);     double nDotP0=n.dot(p0);     double nDotP1=n.dot(p1);     if (Math.abs(nDotP0 - nDotP1) < Epsilon.E) {       double d0DotP0=d0.dot(p0);       double d0DotP1=d0.dot(p1);       double d0DotP2=d0.dot(p2);       if (d0DotP1 < 0.0 || d0DotP2 < 0.0) {         return false;       }       double d=0.0;       Vector2 p=null;       if (d0DotP1 < d0DotP2) {         d=d0DotP1 - d0DotP0;         p=p1.copy();       }  else {         d=d0DotP2 - d0DotP0;         p=p2.copy();       }       if (maxLength > 0.0 && d > maxLength) {         return false;       }       raycast.distance=d;       raycast.point=p;       raycast.normal=d0.getNegative();       return true;     }  else {       return false;     }   }   double t=num / den;   if (t < 0.0) {     return false;   }   if (maxLength > 0.0 && t > maxLength) {     return false;   }   double s=(t * d0.x + p0.x - p1.x) / d1.x;   if (s < 0.0 || s > 1.0) {     return false;   }   Vector2 p=d0.product(t).add(p0);   Vector2 l=p1.to(p2);   l.normalize();   l.right();   double lDotD=l.dot(d0);   if (lDotD > 0.0) {     l.negate();   }   raycast.point=p;   raycast.normal=l;   raycast.distance=t;   return true; } "
"public void processReadHits() throws CanceledException {   if (getMeganFile().hasDataConnector()) {     try {       final int readsFound=DataProcessor.apply(this); {         getSampleAttributeTable().addAttribute(\"Size\",numberReads,true);       }       try {         saveAuxiliaryData();       }  catch (      IOException e) {         Basic.caught(e);       }       if (readsFound > getNumberOfReads())       setNumberReads(readsFound);       if (getNumberOfReads() == 0 && getDir() != null)       getDir().getMainViewer().collapseToDefault();       if (sampleAttributeTable.getSampleOrder().size() == 0)       sampleAttributeTable.setSampleOrder(getSampleNames());     }   finally {       getProgressListener().setCancelable(true);     }   }   lastRecomputeTime=System.currentTimeMillis(); } "
"public static void copy(InputStream input,Writer output,String encoding) throws IOException {   InputStreamReader in=new InputStreamReader(input,encoding);   copy(in,output); } "
"public MultiwayPoolBuilder<K,R> expireAfterAccess(long duration,TimeUnit unit){   checkState(expireAfterAccessNanos == UNSET_INT,\"expireAfterAccess was already set to %s ns\",expireAfterAccessNanos);   checkArgument(duration >= 0,\"duration cannot be negative: %s %s\",duration,unit);   expireAfterAccessNanos=unit.toNanos(duration);   return this; } "
"private void validateRoleType(RoleTypeImpl roleType){   if (!ValidateGlobalRules.validateHasSingleIncomingHasRoleEdge(roleType))   errorsFound.add(ErrorMessage.VALIDATION_ROLE_TYPE.getMessage(roleType.getId())); } "
"public static void reduceAccordingSegment(TtEltype tt,long offsetMS,long startMS,long endMS){   TtmlTimeConverter ttConverter=new TtmlTimeConverter(tt);   long totalBegin=ttConverter.parseTimeExpression(tt.getBody().getBegin());   tt.getBody().setBegin(null);   tt.getBody().setEnd(null);   tt.getBody().setDur(null);   Iterator<DivEltype> divIt=tt.getBody().getDiv().iterator();   while (divIt.hasNext()) {     DivEltype div=divIt.next();     totalBegin+=ttConverter.parseTimeExpression(div.getBegin());     div.setBegin(null);     div.setEnd(null);     div.setDur(null);     Iterator blockIt=div.getBlockClass().iterator();     while (blockIt.hasNext()) {       Object blockClass=blockIt.next();       if (!(blockClass instanceof PEltype)) {         blockIt.remove();         continue;       }       PEltype p=(PEltype)blockClass;       long pBegin=totalBegin + ttConverter.parseTimeExpression(p.getBegin());       long pEnd=totalBegin + getEnd(ttConverter,p.getBegin(),p.getEnd(),p.getDur());       if (pEnd < startMS || pBegin > endMS) {         blockIt.remove();         continue;       }       if (pBegin < startMS) {         pBegin=startMS;       }       if (pEnd > endMS) {         pEnd=endMS;       }       p.setBegin(ConversionHelper.msToSmpteTimecode(offsetMS + pBegin - startMS,ttConverter.getUnitsInSec()));       p.setEnd(ConversionHelper.msToSmpteTimecode(offsetMS + pEnd - startMS,ttConverter.getUnitsInSec()));       p.setDur(null);     }     if (div.getBlockClass().isEmpty()) {       divIt.remove();     }   } } "
"public void apply(NexusStreamParser np) throws Exception { } "
"public boolean isEnabled(){   return false; } "
"public final ProgressEvent updateProgress(double dNewProgress){   Progress=dNewProgress;   return this; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_FORCE_MATCH_CANT_USE_PARTY_MATCH(String value0){   return new SM_SYSTEM_MESSAGE(1400207,value0); } "
"public static void createRMA6FileFromSAM(String creator,String samFile,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {   final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.SAM,doc.getBlastMode(),new String[]{samFile},new String[]{queryFile},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);   rma6Creator.parseFiles(progressListener); } "
"public static JSONObject toJSONObject(java.util.Properties properties) throws JSONException {   JSONObject jo=new JSONObject();   if (properties != null && !properties.isEmpty()) {     Enumeration enumProperties=properties.propertyNames();     while (enumProperties.hasMoreElements()) {       String name=(String)enumProperties.nextElement();       jo.put(name,properties.getProperty(name));     }   }   return jo; } "
"public ColorAnimator(String group,String field){   super(group);   setColorFields(new String[]{field}); } "
"public void addLocation(PBLocation location){   l_locations.add(location); } "
"private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){   return Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd; } "
"public void addEquipmentId(final ProcessCacheObject processCacheObject,final Long pEquipmentId){   if (!processCacheObject.getEquipmentIds().contains(pEquipmentId)) {     processCacheObject.getEquipmentIds().add(pEquipmentId);   } } "
"public static void load(Context context,Object source,ImageView view){   Glide.with(context).load(source).centerCrop().into(view); } "
"@Override public void close() throws RemoteException {   s.close();   if (rconn.getAutoCommit())   rconn.commit();  else   rconn.endStatement(); } "
"public boolean isGsaAvailable(){   if (mGsaAvailable != null)   return mGsaAvailable;   mGsaAvailable=false;   PackageManager pm=mContext.getPackageManager();   Intent searchIntent=new Intent(SEARCH_INTENT_ACTION);   searchIntent.setPackage(GSAState.SEARCH_INTENT_PACKAGE);   ResolveInfo resolveInfo=pm.resolveActivity(searchIntent,0);   if (resolveInfo == null || resolveInfo.activityInfo == null) {     mGsaAvailable=false;   }  else   if (!isPackageAboveVersion(SEARCH_INTENT_PACKAGE,GSA_VERSION_FOR_DOCUMENT) || !isPackageAboveVersion(GMS_CORE_PACKAGE,GMS_CORE_VERSION)) {     mGsaAvailable=false;   }  else {     mGsaAvailable=true;   }   return mGsaAvailable; } "
"public ParseLayer(ConversionData data){   this.data=data;   instance=this; } "
"public int addRow(){   int r;   if (m_openrows == null || m_openrows.isEmpty()) {     r=(m_firstid == 0 ? ++m_curid : --m_firstid);   }  else {     int key=m_openrows.firstKey();     r=m_openrows.remove(key);   }   return r; } "
"public String removeData(){   String olddata=data;   data=\"\";   return olddata; } "
"public static final void applyTransform(GL2 gl,Transform t){   Vector2 tr=t.getTranslation();   gl.glTranslated(tr.x,tr.y,0.0);   gl.glRotated(Math.toDegrees(t.getRotation()),0.0,0.0,1.0); } "
"protected void checkAndSendUnparsedEntity(UnparsedEntity ent){   if (isRootDocument()) {     int index=fUnparsedEntities.indexOf(ent);     if (index == -1) {       XMLResourceIdentifier id=new XMLResourceIdentifierImpl(ent.publicId,ent.systemId,ent.baseURI,ent.expandedSystemId);       addUnparsedEntity(ent.name,id,ent.notation,ent.augmentations);       if (fSendUEAndNotationEvents && fDTDHandler != null) {         fDTDHandler.unparsedEntityDecl(ent.name,id,ent.notation,ent.augmentations);       }     }  else {       UnparsedEntity localEntity=(UnparsedEntity)fUnparsedEntities.get(index);       if (!ent.isDuplicate(localEntity)) {         reportFatalError(\"NonDuplicateUnparsedEntity\",new Object[]{ent.name});       }     }   }  else {     fParentXIncludeHandler.checkAndSendUnparsedEntity(ent);   } } "
"public void initialise(marytts.modules.synthesis.Voice aMaryVoice,String lexiconClassName){   this.maryVoice=aMaryVoice;   if (maryVoice != null) {     super.setLocale(maryVoice.getLocale());   }   if (lexiconClassName != null) {     try {       Lexicon lex=(Lexicon)Class.forName(lexiconClassName).newInstance();       setLexicon(lex);     }  catch (    IllegalAccessException iae) {       throw new RuntimeException(\"Illegal access trying to instantiate \" + lexiconClassName);     } catch (    ClassNotFoundException iae) {       throw new RuntimeException(\"Class not found trying to instantiate \" + lexiconClassName);     } catch (    InstantiationException iae) {       throw new RuntimeException(\"Instantiation exception trying to instantiate \" + lexiconClassName);     }   }   setRate(135f);   try {     if (aMaryVoice instanceof MbrolaVoice) {       MbrolaVoice mv=(MbrolaVoice)aMaryVoice;       float topMean=(mv.topStart() + mv.topEnd()) * 0.5f;       float baseMean=(mv.baseStart() + mv.baseEnd()) * 0.5f;       setPitch((baseMean + topMean) / 2);       setPitchRange((topMean - baseMean) / 2);     }  else {       setPitch(100);       setPitchRange(30);     }   }  catch (  NoClassDefFoundError err) {     setPitch(100);     setPitchRange(30);   } } "
"private LRMIInvocationContext snapshot(){   LRMIInvocationContext newContext=_nextContext == null ? new LRMIInvocationContext() : _nextContext;   newContext._previousContext=this;   return newContext; } "
"private void createActionList(){   View view;   String title;   Drawable icon;   OnClickListener listener;   for (int i=0; i < actionList.size(); i++) {     title=actionList.get(i).getTitle();     icon=actionList.get(i).getIcon();     listener=actionList.get(i).getOnClickListerner();     view=getActionItem(title,icon,listener);     view.setFocusable(true);     view.setClickable(true);     mTrack.addView(view);   } } "
"public void init$Children(){   children=new ASTNode[3];   setChild(new Opt(),1);   setChild(new List(),2); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_GET_COIN_IDARENA(String value0){   return new SM_SYSTEM_MESSAGE(1400934,value0); } "
"@Override public final void writeBytes(String s) throws IOException {   dis.writeBytes(s); } "
"public boolean isCritical(){   return true; } "
"public static final String formatSize(int size){   if (size < MB_CONSTANT) {     float kSize=(float)size / KB_CONSTANT;     kSize=((float)((int)(kSize * 10))) / 10;     return kSize + \"K\";   }  else   if (size < GB_CONSTANT) {     float kSize=(float)size / MB_CONSTANT;     kSize=((float)((int)(kSize * 10))) / 10;     return kSize + \"M\";   }  else {     float kSize=(float)size / GB_CONSTANT;     kSize=((float)((int)(kSize * 100))) / 100;     return kSize + \"G\";   } } "
"@Override public boolean isDataSource(){   return false; } "
"public static String ice_staticId(){   return __ids[1]; } "
"public CompletableFuture<Void> clearBacklog(String cursorName){   log.info(\"[{}] Clearing backlog for cursor {} in the topic.\",topic,cursorName);   PersistentSubscription sub=getPersistentSubscription(cursorName);   if (sub != null) {     return sub.clearBacklog();   }   PersistentReplicator repl=getPersistentReplicator(cursorName);   if (repl != null) {     return repl.clearBacklog();   }   return FutureUtil.failedFuture(new BrokerServiceException(\"Cursor not found\")); } "
"private static void start(Context context,Class<?> daemonClazzName,int interval){   String cmd=context.getDir(BIN_DIR_NAME,Context.MODE_PRIVATE).getAbsolutePath() + File.separator + DAEMON_BIN_NAME;   StringBuilder cmdBuilder=new StringBuilder();   cmdBuilder.append(cmd);   cmdBuilder.append(\" -p \");   cmdBuilder.append(context.getPackageName());   cmdBuilder.append(\" -s \");   cmdBuilder.append(daemonClazzName.getName());   cmdBuilder.append(\" -t \");   cmdBuilder.append(interval);   try {     Runtime.getRuntime().exec(cmdBuilder.toString()).waitFor();   }  catch (  IOException|InterruptedException e) {     Log.e(TAG,\"start daemon error: \" + e.getMessage());   } } "
"public Builder addColumnLong(String name){   return addColumn(new LongMetaData(name)); } "
"public void endScope(){   if (isEnding || holdCount > 0) {     return;   }   isEnding=true;   for (int i=scopes.size() - 1; i >= 0; i--) {     scopes.get(i).onScopeEnd(this);   }   if (parentContext != null && hasErrors && propagatesErrors) {     parentContext.setHasError();   } } "
"public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){   for (int i=0; i < groupEntitieList.size(); i++) {     EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i);     emojiconGroupList.add(groupEntity);     pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false);     tabBar.addTab(groupEntity.getIcon());   } } "
"public static boolean isMac(){   return (OS.indexOf(\"mac\") >= 0); } "
"public void createDevices(@NotNull List<Device> devices){   if (!initIfNecessary()) {     return;   }   for (  Device device : devices) {     String deviceIdBase=device.getId();     String deviceNameBase=device.getDisplayName();     int i=2;     while (isUserDevice(device)) {       String id=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceIdBase,i);       String name=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceNameBase,i);       device=cloneDeviceWithNewIdAndName(device,id,name);     }     ourDeviceManager.addUserDevice(device);   }   ourDeviceManager.saveUserDevices(); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_BUY_ITEM_MULTI(String value1,String value0s){   return new SM_SYSTEM_MESSAGE(1300785,value1,value0s); } "
"public void flush() throws IOException {   try {     _writer.write(_buffer,0,_pos);     _writer.flush();   }  catch (  IOException except) {     if (_exception == null)     _exception=except;     throw except;   }   _pos=0; } "
"public static void v(String tag,String msg){   if (sLevel > LEVEL_VERBOSE) {     return;   }   Log.v(tag,msg); } "
"private static double evaluateInternal(double x[],double y[],double z){   int nearest=0;   final int n=x.length;   final double[] c=new double[n];   final double[] d=new double[n];   double min_dist=Double.POSITIVE_INFINITY;   for (int i=0; i < n; i++) {     c[i]=y[i];     d[i]=y[i];     final double dist=FastMath.abs(z - x[i]);     if (dist < min_dist) {       nearest=i;       min_dist=dist;     }   }   double value=y[nearest];   for (int i=1; i < n; i++) {     for (int j=0; j < n - i; j++) {       final double tc=x[j] - z;       final double td=x[i + j] - z;       final double divider=x[j] - x[i + j];       final double w=(c[j + 1] - d[j]) / divider;       c[j]=tc * w;       d[j]=td * w;     }     if (nearest < 0.5 * (n - i + 1)) {       value+=c[nearest];     }  else {       nearest--;       value+=d[nearest];     }   }   return value; } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"set nodeSize=\");   int width=np.getInt(0,1000);   np.matchIgnoreCase(\";\");   if (getViewer() instanceof GraphView) {     boolean changed=false;     GraphView viewer=(GraphView)getViewer();     for (    Node v : viewer.getSelectedNodes()) {       viewer.setHeight(v,width);       viewer.setWidth(v,width);       changed=true;     }     if (changed) {       viewer.repaint();     }   } } "
"public String provideUid(){   return \"uid\"; } "
"protected void onLoadMore(WXScrollView scrollView,int x,int y){   try {     String offset=mDomObj.attr.getLoadMoreOffset();     if (TextUtils.isEmpty(offset)) {       return;     }     int contentH=scrollView.getChildAt(0).getHeight();     int scrollerH=scrollView.getHeight();     int offScreenY=contentH - y - scrollerH;     if (offScreenY < Integer.parseInt(offset)) {       if (WXEnvironment.isApkDebugable()) {         WXLogUtils.d(\"[WXScroller-onScroll] offScreenY :\" + offScreenY);       }       if (mContentHeight != contentH) {         WXSDKManager.getInstance().fireEvent(mInstanceId,mDomObj.ref,WXEventType.LIST_LOAD_MORE);         mContentHeight=contentH;       }     }   }  catch (  Exception e) {     WXLogUtils.d(\"[WXScroller-onScroll] \",e);   } } "
"private boolean journalRebuildRequired(){   final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;   return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size(); } "
"private void drawComponentBackground(@NotNull Graphics2D gc,@NotNull NlComponent component){   if (component.viewInfo != null) {     int x=getSwingX(myScreenView,component.x);     int y=getSwingY(myScreenView,component.y);     int w=getSwingDimension(myScreenView,component.w);     int h=getSwingDimension(myScreenView,component.h);     Graphics2D g=(Graphics2D)gc.create();     if (!component.isRoot()) {       g.setPaint(new LinearGradientPaint((float)x,(float)y,(float)(x + BACKGROUND_LINE_SPACE_PX),(float)(y + BACKGROUND_LINE_SPACE_PX),COMPONENT_BACKGROUND_GRADIENT_FRACTIONS,COMPONENT_BACKGROUND_GRADIENT_COLORS,MultipleGradientPaint.CycleMethod.REFLECT));       g.fillRect(x,y,w,h);     }     g.setColor(BLUEPRINT_FG_COLOR);     Stroke prevStroke=g.getStroke();     g.setStroke(BLUEPRINT_COMPONENT_STROKE);     g.drawRect(x,y,w,h);     g.setStroke(prevStroke);     g.dispose();   } } "
"public static void main(String[] args){   TrackingContactIds simulation=new TrackingContactIds();   simulation.run(); } "
"protected Table process(Table t,ResultSet rset,String key,Object lock) throws DataIOException {   int count=0;   long timein=System.currentTimeMillis();   try {     ResultSetMetaData metadata=rset.getMetaData();     int ncols=metadata.getColumnCount();     if (t == null) {       t=getSchema(metadata,m_handler).instantiate();       if (key != null) {         try {           t.index(key);           s_logger.info(\"Indexed field: \" + key);         }  catch (        Exception e) {           s_logger.warning(\"Error indexing field: \" + key);         }       }     }     lock=(lock == null ? t : lock);     while (rset.next()) { synchronized (lock) {         int row=getExistingRow(t,rset,key);         if (row < 0) {           row=t.addRow();         }         for (int i=1; i <= ncols; ++i) {           m_handler.process(t,row,rset,i);         }       }       ++count;     }   }  catch (  SQLException e) {     throw new DataIOException(e);   }   long time=System.currentTimeMillis() - timein;   s_logger.info(\"Internal query processing completed: \" + count + \" rows, \"+ (time / 1000)+ \".\"+ (time % 1000)+ \" seconds.\");   return t; } "
"public static void toXml(Object obj,Writer writer){   xstream.toXML(obj,writer); } "
"public static String mapToStr(Map<? extends Object,? extends Object> map){   if (map == null)   return null;   StringBuilder buf=new StringBuilder();   boolean first=true;   for (  Map.Entry<? extends Object,? extends Object> entry : map.entrySet()) {     Object key=entry.getKey();     Object value=entry.getValue();     if (!(key instanceof String) || !(value instanceof String))     continue;     String encodedName=null;     try {       encodedName=URLEncoder.encode((String)key,\"UTF-8\");     }  catch (    UnsupportedEncodingException e) {       Debug.logError(e,module);     }     String encodedValue=null;     try {       encodedValue=URLEncoder.encode((String)value,\"UTF-8\");     }  catch (    UnsupportedEncodingException e) {       Debug.logError(e,module);     }     if (first)     first=false;  else     buf.append(\"|\");     buf.append(encodedName);     buf.append(\"=\");     buf.append(encodedValue);   }   return buf.toString(); } "
"public static <T>Type<T> valueOf(final ParameterizedType type){   return valueOf((Class<T>)type.getRawType(),type.getActualTypeArguments()); } "
"public JForcePanel(ForceSimulator fsim){   this.fsim=fsim;   this.setBackground(Color.WHITE);   initUI(); } "
"public Criteria createCriteria(){   Criteria criteria=createCriteriaInternal();   if (oredCriteria.size() == 0) {     oredCriteria.add(criteria);   }   return criteria; } "
"public void pausePlaying(){   if (this.state == STATE.MEDIA_RUNNING && this.player != null) {     this.player.pause();     this.setState(STATE.MEDIA_PAUSED);   }  else {     Log.d(LOG_TAG,\"AudioPlayer Error: pausePlaying() called during invalid state: \" + this.state.ordinal());     sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);   } } "
"public INDArray toRaveledTensor(File file){   try {     BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));     INDArray ret=toRaveledTensor(bis);     bis.close();     return ret.ravel();   }  catch (  IOException e) {     throw new RuntimeException(e);   } } "
"public static double hypotenuse(double a,double b){   double r;   if (Math.abs(a) > Math.abs(b)) {     r=b / a;     r=Math.abs(a) * Math.sqrt(1 + r * r);   }  else   if (b != 0) {     r=a / b;     r=Math.abs(b) * Math.sqrt(1 + r * r);   }  else {     r=0.0;   }   return r; } "
"public Object clone(){   System.err.println(this.getClass().getName() + \": The clone() method should be checked...\");   DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);   gRes.DataString=DataString;   gRes.DegradedEdges.putAll(this.DegradedEdges);   gRes.NGramGraphArray=this.NGramGraphArray.clone();   gRes.Normalizer=this.Normalizer;   gRes.TextPreprocessor=this.TextPreprocessor;   gRes.WordEvaluator=this.WordEvaluator;   gRes.EdgeDistros=(HashMap)this.EdgeDistros.clone();   return gRes; } "
"public void allowAll(PermissionFlag flag){   generalPermissions.remove(flag);   strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null); } "
"public ArrayRealVector(ArrayRealVector v1,RealVector v2){   final int l1=v1.data.length;   final int l2=v2.getDimension();   data=new double[l1 + l2];   System.arraycopy(v1.data,0,data,0,l1);   for (int i=0; i < l2; ++i) {     data[l1 + i]=v2.getEntry(i);   } } "
"public static String prepareInitiator(Exchange exchange,ActivitiEndpoint activitiEndpoint){   String initiator=null;   if (activitiEndpoint.isSetProcessInitiator()) {     try {       initiator=exchange.getIn().getHeader(activitiEndpoint.getProcessInitiatorHeaderName(),String.class);     }  catch (    TypeConversionException e) {       throw new ActivitiException(\"Initiator header '\" + activitiEndpoint.getProcessInitiatorHeaderName() + \"': Value must be of type String.\",e);     }     if (StringUtils.isEmpty(initiator)) {       throw new ActivitiException(\"Initiator header '\" + activitiEndpoint.getProcessInitiatorHeaderName() + \"': Value must be provided\");     }   }   return initiator; } "
"public static byte[] decode(String s) throws Base64DecoderException {   byte[] bytes=s.getBytes();   return decode(bytes,0,bytes.length); } "
"public PollsGetVotersQuery fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"private void measureChildWithDecorationsAndMargin(View child,int widthSpec,int heightSpec){   Rect decorRect=new Rect();   calculateItemDecorationsForChild(child,decorRect);   RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();   widthSpec=updateSpecWithExtra(widthSpec,lp.leftMargin + decorRect.left,lp.rightMargin + decorRect.right);   heightSpec=updateSpecWithExtra(heightSpec,lp.topMargin + decorRect.top,lp.bottomMargin + decorRect.bottom);   child.measure(widthSpec,heightSpec); } "
"@Override public void actionPerformed(ActionEvent ev){   executeImmediately(getSyntax()); } "
"public static void hideFragment(Activity activity,int containerViewId,Fragment previousFragment,Fragment newFragment,Bundle bundle,boolean canBack){   FragmentTransaction mFragmentTransaction=activity.getFragmentManager().beginTransaction();   if (bundle != null) {     newFragment.setArguments(bundle);   }   if (null != previousFragment) {     mFragmentTransaction.hide(previousFragment);   }   mFragmentTransaction.add(containerViewId,newFragment,newFragment.getClass().getName());   if (canBack && previousFragment != null) {     mFragmentTransaction.addToBackStack(newFragment.getClass().getName());   }   mFragmentTransaction.commit(); } "
"private void onInbox(int resultCode,Intent data){   if (resultCode != Activity.RESULT_OK) {     if (data != null && data.hasExtra(Multiplayer.EXTRA_INVITATION)) {       Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);       onInvitationRemoved(invitation.getInvitationId());     }     if (future != null) {       future.happen();       future=null;     }     updateInvites();     return;   }   final RoomController c=controller;   if (c != null) {     throw new IllegalStateException(\"tried to create new game, but there was already another!\");   }   Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);   joinRoom(invitation);   updateInvites(); } "
"public boolean populateDirectories(boolean descend){   boolean addedNodes=false;   if (!isRoot || (isRoot && descend)) {     if (populated == false) {       if (interim == true) {         removeAllChildren();         interim=false;       }       List<Path> names=new ArrayList<Path>();       DirectoryStream<Path> stream=null;       try {         Path pathPath=Paths.get(path);         stream=Files.newDirectoryStream(pathPath);       }  catch (      AccessDeniedException e) {       } catch (      NotDirectoryException e) {       } catch (      IOException e) {         ConsoleManager.getInstance().exception(this,e);       }       if (stream != null) {         for (        Path path : stream) {           names.add(path.getFileName());         }       }       for (      Path filename : names) {         Path d=Paths.get(path.toString(),filename.toString());         try {           if (Files.isDirectory(d)) {             addFolder(descend,filename.toString());             addedNodes=true;             if (descend == false) {               break;             }           }  else           if (Files.isRegularFile(d)) {             if (validFile(filename.toString())) {               addFile(filename.toString());             }           }         }  catch (        Throwable t) {         }       }       if (descend == true || addedNodes == false) {         populated=true;         if (isDir() && !fileWatcherSet) {           Path pathPath=Paths.get(path);           FileSystemWatcher.getInstance().addWatch(this,pathPath);           fileWatcherSet=true;         }       }  else {         interim=true;       }     }   }   return addedNodes; } "
"public boolean isSolutionOptimal(){   return tableau != null ? tableau.isOptimal() : false; } "
"public AdaptableList(IAdaptable[] newChildren){   this(newChildren.length);   for (int i=0; i < newChildren.length; i++) {     children.add(newChildren[i]);   } } "
"public IntObjectHashMap(int initialCapacity){   this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor); } "
"private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {   int numCodewords=codewordBytes.length;   int[] codewordsInts=new int[numCodewords];   for (int i=0; i < numCodewords; i++) {     codewordsInts[i]=codewordBytes[i] & 0xFF;   }   int numECCodewords=codewordBytes.length - numDataCodewords;   try {     rsDecoder.decode(codewordsInts,numECCodewords);   }  catch (  ReedSolomonException ignored) {     throw ChecksumException.getChecksumInstance();   }   for (int i=0; i < numDataCodewords; i++) {     codewordBytes[i]=(byte)codewordsInts[i];   } } "
"public void moveFile(String file){   File f=new File(this.tempFile);   if (!file.startsWith(\"/\")) {     if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {       file=Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + file;     }  else {       file=\"/data/data/\" + handler.cordova.getActivity().getPackageName() + \"/cache/\"+ file;     }   }   String logMsg=\"renaming \" + this.tempFile + \" to \"+ file;   Log.d(LOG_TAG,logMsg);   if (!f.renameTo(new File(file)))   Log.e(LOG_TAG,\"FAILED \" + logMsg); } "
"private int naturalFollowerConnections(final List<ConnectableSegment> segments){   int connected=0;   for (  final ConnectableSegment segment : segments) {     if (segment.getNext() == null) {       final BSPTree<Euclidean2D> node=segment.getNode();       final BSPTree<Euclidean2D> end=segment.getEndNode();       for (      final ConnectableSegment candidateNext : segments) {         if (candidateNext.getPrevious() == null && candidateNext.getNode() == end && candidateNext.getStartNode() == node) {           segment.setNext(candidateNext);           candidateNext.setPrevious(segment);           ++connected;           break;         }       }     }   }   return connected; } "
"public CAS process(String text){   CAS cas=retrieve();   cas.setDocumentText(text);   try {     analysisEngine.process(cas);   }  catch (  AnalysisEngineProcessException e) {     if (text != null && !text.isEmpty())     return process(text);     throw new RuntimeException(e);   }   return cas; } "
"public Builder lineCap(String lineCap){   this.lineCap=lineCap;   return this; } "
"public void init$Children(){   children=new ASTNode[4];   setChild(new List(),1);   setChild(new List(),2);   setChild(new List(),3); } "
"public Split[] asArray(){   Split[] result=new Split[size()];   int count=0;   for (Iterator it=iterator(); it.hasNext(); ) {     result[count++]=(Split)it.next();   }   return result; } "
"public Lexicon removeLowFreqWords(int minFreq){   int id=0;   Hashtable<Integer,Integer> translation=new Hashtable<Integer,Integer>();   for (  Entry<Integer,Word> e : idHash.entrySet()) {     Word w=e.getValue();     if (w.tf < minFreq) {       continue;     }     translation.put(w.id,id);     ++id;   }   return map(translation); } "
"private int findAndUncollapseNext(String regularExpression,boolean reverse,boolean all){   System.err.println(\"Find and uncollapse\");   final Pattern pattern=Pattern.compile(regularExpression);   MainViewer mainViewer=doc.getDir().getMainViewer();   PhyloTree tree=mainViewer.getTree();   ProjectManager.getPreviouslySelectedNodeLabels().clear();   final NodeSet matches=new NodeSet(tree);   for (  String name : TaxonomyData.getName2IdMap().getNames()) {     boolean ok=false;     if (name != null) {       final int taxId=TaxonomyData.getName2IdMap().get(name);       if (taxId != 0) {         Matcher matcher=pattern.matcher(name);         if (matcher.find())         ok=true;  else {           matcher=pattern.matcher(\"\" + taxId);           if (matcher.find())           ok=true;         }         if (ok) {           ProjectManager.getPreviouslySelectedNodeLabels().add(name);           Node v=mainViewer.getTaxId2Node(taxId);           if (v != null && (doc.getNumberOfReads() == 0 || ((NodeData)v.getData()).getCountSummarized() > 0))           matches.add(v);         }       }     }   }   int count_uncollapsed=0;   int count_collapsed=0;   final NodeSet ancestors=new NodeSet(tree);   for (Node v=(reverse ? tree.getLastNode() : tree.getFirstNode()); v != null; v=(reverse ? v.getPrev() : v.getNext())) {     if (matches.contains(v)) {       boolean found=false;       Node firstCollapsedAncestor=getFirstCollapsedAncestor(v);       Node w=v;       while (w != null) {         ancestors.add(w);         Integer wTaxId=(Integer)w.getInfo();         if (firstCollapsedAncestor != null) {           doc.getDir().getMainViewer().getCollapsedIds().remove(wTaxId);           count_uncollapsed++;           found=true;           for (Iterator it=w.getOutEdges(); it.hasNext(); ) {             Node u=((Edge)it.next()).getOpposite(w);             if (!ancestors.contains(u)) {               Integer uTaxId=(Integer)u.getInfo();               if (uTaxId != null && !doc.getDir().getMainViewer().getCollapsedIds().contains(uTaxId)) {                 doc.getDir().getMainViewer().getCollapsedIds().add(uTaxId);                 count_collapsed++;               }             }           }           if (w == firstCollapsedAncestor)           firstCollapsedAncestor=null;         }         if (w.getInDegree() != 0) {           w=w.getInEdges().next().getOpposite(w);         }  else         w=null;       }       if (!all && found)       break;     }   }   return matches.size(); } "
"public void toTextOut(CART cart,PrintWriter pw) throws IOException {   try {     toWagonFormat(cart.getRootNode(),null,\"\",pw);     pw.flush();     pw.close();   }  catch (  IOException ioe) {     IOException newIOE=new IOException(\"Error dumping CART to standard output\");     newIOE.initCause(ioe);     throw newIOE;   } } "
"public void incrementCount(K key,V value,double count){   Counter<V> valueCounter=ensureCounter(key);   valueCounter.incrementCount(value,count); } "
"public Bundler putCharArray(String key,char[] value){   bundle.putCharArray(key,value);   return this; } "
"public static boolean testSaveLocationExists(){   String sDCardStatus=Environment.getExternalStorageState();   boolean status;   if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {     status=true;   }  else {     status=false;   }   return status; } "
"@Override public void actionPerformed(ActionEvent ev){   getViewer().selectComponent(getViewer().getMatrixTab()); } "
"@Override public long addAndGet(long increment){   throw new UnsupportedOperationException(); } "
"public void abort() throws IOException {   completeEdit(this,false); } "
"protected void internalTransform(Body b,String phaseName,Map<String,String> options){   if (b == null) {     throw new NullPointerException();   }   Date start=new Date();   if (Options.v().verbose())   G.v().out.println(\"[TypeAssigner] typing system started on \" + start);   JBTROptions opt=new JBTROptions(options);   ignoreWrongStaticNess=opt.ignore_wrong_staticness();   if (opt.compare_type_assigners()) {     compareTypeAssigners(b,opt.use_older_type_assigner());   }  else {     if (opt.use_older_type_assigner())     TypeResolver.resolve((JimpleBody)b,Scene.v());  else     (new soot.jimple.toolkits.typing.fast.TypeResolver((JimpleBody)b)).inferTypes();   }   Date finish=new Date();   if (Options.v().verbose()) {     long runtime=finish.getTime() - start.getTime();     long mins=runtime / 60000;     long secs=(runtime % 60000) / 1000;     G.v().out.println(\"[TypeAssigner] typing system ended. It took \" + mins + \" mins and \"+ secs+ \" secs.\");   }   replaceNullType(b);   if (typingFailed((JimpleBody)b))   throw new RuntimeException(\"type inference failed!\"); } "
"public static boolean isAndroidProjectWithoutGradleFacet(@NotNull JpsProject project){   return isAndroidProjectWithoutGradleFacet(project.getModules()); } "
"private void createSynchronized(polyglot.ast.Synchronized synchStmt){   soot.Value sootExpr=base().createAggressiveExpr(synchStmt.expr(),false,false);   soot.jimple.EnterMonitorStmt enterMon=soot.jimple.Jimple.v().newEnterMonitorStmt(sootExpr);   body.getUnits().add(enterMon);   if (beforeReturn == null) {     beforeReturn=new ArrayList<List<Stmt>>();   }   if (afterReturn == null) {     afterReturn=new ArrayList<List<Stmt>>();   }   beforeReturn.add(new ArrayList<Stmt>());   afterReturn.add(new ArrayList<Stmt>());   if (monitorStack == null) {     monitorStack=new Stack<Value>();   }   monitorStack.push(sootExpr);   Util.addLnPosTags(enterMon.getOpBox(),synchStmt.expr().position());   Util.addLnPosTags(enterMon,synchStmt.expr().position());   soot.jimple.Stmt startNoop=soot.jimple.Jimple.v().newNopStmt();   body.getUnits().add(startNoop);   createBlock(synchStmt.body());   soot.jimple.ExitMonitorStmt exitMon=soot.jimple.Jimple.v().newExitMonitorStmt(sootExpr);   body.getUnits().add(exitMon);   monitorStack.pop();   Util.addLnPosTags(exitMon.getOpBox(),synchStmt.expr().position());   Util.addLnPosTags(exitMon,synchStmt.expr().position());   soot.jimple.Stmt endSynchNoop=soot.jimple.Jimple.v().newNopStmt();   soot.jimple.Stmt gotoEnd=soot.jimple.Jimple.v().newGotoStmt(endSynchNoop);   soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();   body.getUnits().add(endNoop);   body.getUnits().add(gotoEnd);   soot.jimple.Stmt catchAllBeforeNoop=soot.jimple.Jimple.v().newNopStmt();   body.getUnits().add(catchAllBeforeNoop);   soot.Local formalLocal=lg.generateLocal(soot.RefType.v(\"java.lang.Throwable\"));   soot.jimple.CaughtExceptionRef exceptRef=soot.jimple.Jimple.v().newCaughtExceptionRef();   soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,exceptRef);   body.getUnits().add(stmt);   soot.jimple.Stmt catchBeforeNoop=soot.jimple.Jimple.v().newNopStmt();   body.getUnits().add(catchBeforeNoop);   soot.Local local=lg.generateLocal(soot.RefType.v(\"java.lang.Throwable\"));   soot.jimple.Stmt assign=soot.jimple.Jimple.v().newAssignStmt(local,formalLocal);   body.getUnits().add(assign);   soot.jimple.ExitMonitorStmt catchExitMon=soot.jimple.Jimple.v().newExitMonitorStmt(sootExpr);   body.getUnits().add(catchExitMon);   Util.addLnPosTags(catchExitMon.getOpBox(),synchStmt.expr().position());   soot.jimple.Stmt catchAfterNoop=soot.jimple.Jimple.v().newNopStmt();   body.getUnits().add(catchAfterNoop);   soot.jimple.Stmt throwStmt=soot.jimple.Jimple.v().newThrowStmt(local);   body.getUnits().add(throwStmt);   body.getUnits().add(endSynchNoop);   List<Stmt> before=beforeReturn.get(beforeReturn.size() - 1);   List<Stmt> after=afterReturn.get(afterReturn.size() - 1);   if (before.size() > 0) {     addToExceptionList(startNoop,before.get(0),catchAllBeforeNoop,soot.Scene.v().getSootClass(\"java.lang.Throwable\"));     for (int i=1; i < before.size(); i++) {       addToExceptionList(after.get(i - 1),before.get(i),catchAllBeforeNoop,soot.Scene.v().getSootClass(\"java.lang.Throwable\"));     }     addToExceptionList(after.get(after.size() - 1),endNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass(\"java.lang.Throwable\"));   }  else {     addToExceptionList(startNoop,endNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass(\"java.lang.Throwable\"));   }   beforeReturn.remove(before);   afterReturn.remove(after);   addToExceptionList(catchBeforeNoop,catchAfterNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass(\"java.lang.Throwable\")); } "
"public void init$Children(){   children=new ASTNode[1]; } "
"public boolean contains(int index){   return index >= getFirst() && index <= getLast(); } "
"protected BoardGetTopicsQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public void expandToIntegerLimits(){   clip[0]=Math.floor(clip[0]);   clip[1]=Math.floor(clip[1]);   clip[6]=Math.ceil(clip[6]);   clip[7]=Math.ceil(clip[7]); } "
"public Object clone(){   try {     IntObjectHashMap copy=(IntObjectHashMap)super.clone();     copy.table=(int[])copy.table.clone();     copy.values=(Object[])copy.values.clone();     copy.state=(byte[])copy.state.clone();     return copy;   }  catch (  CloneNotSupportedException e) {     return null;   } } "
"private void storeDownloadInfo(String type,Set<String> downloadInfo){   SharedPreferences.Editor editor=mSharedPrefs.edit();   if (downloadInfo.isEmpty()) {     editor.remove(type);   }  else {     editor.putStringSet(type,downloadInfo);   }   editor.apply(); } "
"public void applyUpdate(Object update) throws Exception {   throw new UnsupportedOperationException(\"JoinStateManager:Updating log\" + \", this should not happen\"); } "
"private static void checkPermissions(Permissions perms){   SecurityManager sm=System.getSecurityManager();   if (sm != null) {     Enumeration en=perms.elements();     while (en.hasMoreElements()) {       sm.checkPermission((Permission)en.nextElement());     }   } } "
"protected LikesGetListQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"private String parseIpToPingFromPing(String ping){   String ip=\"\";   if (ping.contains(PING)) {     int indexOpen=ping.indexOf(PARENTHESE_OPEN_PING);     int indexClose=ping.indexOf(PARENTHESE_CLOSE_PING);     ip=ping.substring(indexOpen + 1,indexClose);   }   return ip; } "
"protected void writeGraphicCtrlExt() throws IOException {   out.write(0x21);   out.write(0xf9);   out.write(4);   int transp, disp;   if (transparent == null) {     transp=0;     disp=0;   }  else {     transp=1;     disp=2;   }   if (dispose >= 0) {     disp=dispose & 7;   }   disp<<=2;   out.write(0 | disp | 0| transp);   writeShort(delay);   out.write(transIndex);   out.write(0); } "
"public AemTextArea typeLine(CharSequence text){   return type(text).typeNewLine(); } "
"private static boolean canGenerateAsm(Member member){   if (!Modifier.isPrivate(member.getModifiers()) && member.getDeclaringClass().getClassLoader() != null)   return true;   if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,\"Cannot generate ASM for member \" + member.getName() + \" on class \"+ member.getDeclaringClass().getName()+ \" - using standard reflection instead.\");   return false; } "
"public NativeAdView(ThemedReactContext context){   super(context);   mEventEmitter=context.getJSModule(RCTEventEmitter.class); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_DEGRADE_LEVEL(int num0){   return new SM_SYSTEM_MESSAGE(1400070,num0); } "
"@Override public Void call() throws Exception {   try {     NodeHolder nodeHolder=processDataRows(dataRows);     int indexInNodeHolderArray=(sequenceNumber - 1) % numberOfCores;     blockletDataHolder.put(nodeHolder,indexInNodeHolderArray);     return null;   }  catch (  Throwable throwable) {     consumerExecutorService.shutdownNow();     resetBlockletProcessingCount();     throw new CarbonDataWriterException(throwable.getMessage());   } } "
"public void writeFileContent(String content,Path path,FileMatch sourceFileMatch) throws CommandException {   try {     File outputFile=path.toFile();     BOMInputStream inputStream=new BOMInputStream(FileUtils.openInputStream(sourceFileMatch.getPath().toFile()),false,boms);     if (inputStream.hasBOM()) {       FileUtils.writeByteArrayToFile(outputFile,inputStream.getBOM().getBytes());       FileUtils.writeByteArrayToFile(outputFile,content.getBytes(inputStream.getBOMCharsetName()),true);     }  else {       FileUtils.writeStringToFile(outputFile,content,StandardCharsets.UTF_8);     }   }  catch (  IOException e) {     throw new CommandException(\"Cannot write file content in path: \" + path.toString(),e);   } } "
"public void populateAll() throws GeneralException {   if (this.requestInfoMap.event != null && this.requestInfoMap.event.type != null && (this.requestInfoMap.event.type.indexOf(\"service\") >= 0)) {     String serviceName=this.requestInfoMap.event.invoke;     this.serviceCalledByRequestEvent=this.aif.getServiceArtifactInfo(serviceName);     if (this.serviceCalledByRequestEvent != null) {       UtilMisc.addToSortedSetInMap(this,aif.allRequestInfosReferringToServiceName,this.serviceCalledByRequestEvent.getUniqueId());     }   }   Map<String,ConfigXMLReader.RequestResponse> requestResponseMap=UtilGenerics.checkMap(this.requestInfoMap.requestResponseMap);   for (  ConfigXMLReader.RequestResponse response : requestResponseMap.values()) {     if (\"view\".equals(response.type)) {       String viewUri=response.value;       if (viewUri.startsWith(\"/\")) {         viewUri=viewUri.substring(1);       }       try {         ControllerViewArtifactInfo artInfo=this.aif.getControllerViewArtifactInfo(controllerXmlUrl,viewUri);         this.viewsThatAreResponsesToThisRequest.add(artInfo);         UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToView,artInfo.getUniqueId());       }  catch (      GeneralException e) {         Debug.logWarning(e.toString(),module);       }     }  else     if (response.type.equals(\"request\")) {       String otherRequestUri=response.value;       if (otherRequestUri.startsWith(\"/\")) {         otherRequestUri=otherRequestUri.substring(1);       }       try {         ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);         this.requestsThatAreResponsesToThisRequest.add(artInfo);         UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());       }  catch (      GeneralException e) {         Debug.logWarning(e.toString(),module);       }     }  else     if (response.type.equals(\"request-redirect\")) {       String otherRequestUri=response.value;       ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);       this.requestsThatAreResponsesToThisRequest.add(artInfo);       UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());     }  else     if (response.type.equals(\"request-redirect-noparam\")) {       String otherRequestUri=response.value;       ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);       this.requestsThatAreResponsesToThisRequest.add(artInfo);       UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());     }   } } "
"public void clear(){   oredCriteria.clear();   orderByClause=null;   distinct=false; } "
"private FileResource ensureStorageStatus(FileResource fileResource){   if (fileResource != null && fileResource.getStorageStatus() == FileResourceStorageStatus.PENDING) {     Duration pendingDuration=new Duration(new DateTime(fileResource.getLastUpdated()),DateTime.now());     if (pendingDuration.isLongerThan(Seconds.seconds(1).toStandardDuration())) {       boolean contentIsStored=fileResourceContentStore.fileResourceContentExists(fileResource.getStorageKey());       if (contentIsStored) {         fileResource.setStorageStatus(FileResourceStorageStatus.STORED);         fileResourceStore.update(fileResource);         log.warn(\"Corrected issue: FileResource '\" + fileResource.getUid() + \"' had storageStatus PENDING but content was actually stored.\");       }     }   }   return fileResource; } "
"boolean awaitExchange(E e,int start){   for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) {     int index=(start + step) & ARENA_MASK;     AtomicReference<Object> slot=arena[index];     Object found=slot.get();     if ((found == WAITER) && slot.compareAndSet(WAITER,e)) {       return true;     }  else     if ((found == FREE) && slot.compareAndSet(FREE,e)) {       int slotSpins=0;       for (; ; ) {         found=slot.get();         if (found != e) {           return true;         }  else         if ((slotSpins >= SPINS_PER_STEP) && (slot.compareAndSet(e,FREE))) {           totalSpins+=slotSpins;           break;         }         slotSpins++;       }     }   }   return false; } "
"public static boolean isAllowedPotentialStat(Equip equip,int opID){   return true; } "
"protected OrdersGetAmountQuery votes(String... value){   return unsafeParam(\"votes\",value); } "
"public int q(){   String s=soot.PhaseOptions.getString(options,\"q\");   if (s.equalsIgnoreCase(\"auto\"))   return q_auto;   if (s.equalsIgnoreCase(\"trad\"))   return q_trad;   if (s.equalsIgnoreCase(\"bdd\"))   return q_bdd;   if (s.equalsIgnoreCase(\"debug\"))   return q_debug;   if (s.equalsIgnoreCase(\"trace\"))   return q_trace;   if (s.equalsIgnoreCase(\"numtrace\"))   return q_numtrace;   throw new RuntimeException(\"Invalid value \" + s + \" of phase option q\"); } "
"Edge(final Vertex start,final Vertex end,final double length,final Circle circle){   this.start=start;   this.end=end;   this.length=length;   this.circle=circle;   start.setOutgoing(this);   end.setIncoming(this); } "
"@Nullable public static <T extends Facet>T findFacet(@NotNull Module module,@NotNull IdeModifiableModelsProvider modelsProvider,@NotNull FacetTypeId<T> typeId){   T facet=FacetManager.getInstance(module).getFacetByType(typeId);   if (facet == null) {     ModifiableFacetModel facetModel=modelsProvider.getModifiableFacetModel(module);     facet=facetModel.getFacetByType(typeId);   }   return facet; } "
"@Subscribe public void onEvent(LoginEventResult result){   if (result.isLoggedIn()) {     LatLng latLng=LocationManager.getInstance(MainActivity.this).getLocation();     if (latLng != null) {       nianticManager.getCatchablePokemon(latLng.latitude,latLng.longitude,0D);     }  else {       Snackbar.make(findViewById(R.id.root),getString(R.string.toast_login_error),Snackbar.LENGTH_LONG).show();     }   } } "
"public static SM_SYSTEM_MESSAGE STR_UNBREAKABLE_ITEM(DescriptionId value0){   return new SM_SYSTEM_MESSAGE(1300381,value0); } "
"public static boolean isExtension(String filename,String extension){   if (filename == null) {     return false;   }   if (extension == null || extension.length() == 0) {     return indexOfExtension(filename) == -1;   }   String fileExt=getExtension(filename);   return fileExt.equals(extension); } "
"public static final float toJulian(Calendar c){   int Y=c.get(Calendar.YEAR);   int M=c.get(Calendar.MONTH);   int D=c.get(Calendar.DATE);   int A=Y / 100;   int B=A / 4;   int C=2 - A + B;   float E=(int)(365.25f * (Y + 4716));   float F=(int)(30.6001f * (M + 1));   float JD=C + D + E+ F - 1524.5f;   return JD; } "
"public Zhqrd(Zmat A) throws JampackException {   A.getProperties();   nrow=A.nr;   ncol=A.nc;   ntran=Math.min(A.nr,A.nc);   U=new Z1[ntran];   R=new Zutmat(A);   for (int k=A.bx; k < A.bx + ntran; k++) {     U[k - A.bx]=House.genc(R,k,A.rx,k);     House.ua(U[k - A.bx],R,k,A.rx,k + 1,A.cx);   }   if (nrow > ncol) {     R=new Zutmat(R.get(R.bx,R.cx,R.bx,R.cx));   } } "
"public void replaceStyledLayer(NamedLayer newNamedLayer){   if (this.sld == null) {     return;   }   StyledLayer[] styledLayerList=this.sld.getStyledLayers();   int indexFound=-1;   int index=0;   for (  StyledLayer styledLayer : styledLayerList) {     if (styledLayer == this.symbolData.getStyledLayer()) {       indexFound=index;       break;     }  else {       index++;     }   }   if (indexFound > -1) {     styledLayerList[indexFound]=newNamedLayer;     this.sld.setStyledLayers(styledLayerList);     setStyledLayer(newNamedLayer);   } } "
"public static boolean isFixed(InvokeExpr ie){   return ie instanceof StaticInvokeExpr || ie instanceof SpecialInvokeExpr || !clientOverwriteableOverwrites(ie.getMethod()); } "
"public DataSourceDescriptor(X ds,String n,String desc,Image ic,int pos,int aep){   if (ds == null)   throw new NullPointerException(\"DataSource cannot be null\");   dataSource=ds;   changeSupport=new PropertyChangeSupport(dataSource);   name=n;   description=desc;   icon=ic;   preferredPosition=pos;   autoExpansionPolicy=aep; } "
"static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {   if (DEBUG)   debugPrintln(\"debug is on\");   ClassLoader cl=findClassLoader();   try {     String systemProp=SecuritySupport.getSystemProperty(factoryId);     if (systemProp != null && systemProp.length() > 0) {       if (DEBUG)       debugPrintln(\"found system property, value=\" + systemProp);       return newInstance(systemProp,cl,true);     }   }  catch (  SecurityException se) {   }   String factoryClassName=null;   if (propertiesFilename == null) {     File propertiesFile=null;     boolean propertiesFileExists=false;     try {       String javah=SecuritySupport.getSystemProperty(\"java.home\");       propertiesFilename=javah + File.separator + \"lib\"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;       propertiesFile=new File(propertiesFilename);       propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);     }  catch (    SecurityException e) {       fLastModified=-1;       fXercesProperties=null;     } synchronized (ObjectFactory.class) {       boolean loadProperties=false;       FileInputStream fis=null;       try {         if (fLastModified >= 0) {           if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {             loadProperties=true;           }  else {             if (!propertiesFileExists) {               fLastModified=-1;               fXercesProperties=null;             }           }         }  else {           if (propertiesFileExists) {             loadProperties=true;             fLastModified=SecuritySupport.getLastModified(propertiesFile);           }         }         if (loadProperties) {           fXercesProperties=new Properties();           fis=SecuritySupport.getFileInputStream(propertiesFile);           fXercesProperties.load(fis);         }       }  catch (      Exception x) {         fXercesProperties=null;         fLastModified=-1;       }  finally {         if (fis != null) {           try {             fis.close();           }  catch (          IOException exc) {           }         }       }     }     if (fXercesProperties != null) {       factoryClassName=fXercesProperties.getProperty(factoryId);     }   }  else {     FileInputStream fis=null;     try {       fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));       Properties props=new Properties();       props.load(fis);       factoryClassName=props.getProperty(factoryId);     }  catch (    Exception x) {     }  finally {       if (fis != null) {         try {           fis.close();         }  catch (        IOException exc) {         }       }     }   }   if (factoryClassName != null) {     if (DEBUG)     debugPrintln(\"found in \" + propertiesFilename + \", value=\"+ factoryClassName);     return newInstance(factoryClassName,cl,true);   }   Object provider=findJarServiceProvider(factoryId);   if (provider != null) {     return provider;   }   if (fallbackClassName == null) {     throw new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\",null);   }   if (DEBUG)   debugPrintln(\"using fallback, value=\" + fallbackClassName);   return newInstance(fallbackClassName,cl,true); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public ParTypeAccess fullCopy(){   ParTypeAccess tree=(ParTypeAccess)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"private RealDistribution findKernel(double lower,double upper){   if (lower < 1) {     return new NormalDistribution(5d,3.3166247903554);   }  else {     return new NormalDistribution((upper + lower + 1) / 2d,3.0276503540974917);   } } "
"@Override public void rightMouseButton(Object selectedItem,MouseEvent e){ } "
"@NonNull public static TextDrawable createAvatar(String accountName,float radiusInDp) throws UnsupportedEncodingException, NoSuchAlgorithmException {   int[] rgb=BitmapUtils.calculateRGB(accountName);   TextDrawable avatar=new TextDrawable(accountName.substring(0,1).toUpperCase(),rgb[0],rgb[1],rgb[2],radiusInDp);   return avatar; } "
"@Override public Expression createExpression(EnvVar envVar){   if (envVar == null) {     return null;   }   Function function=ff.function(\"env\",ff.literal(envVar.getName()));   return function; } "
"public void addArg(Expr node){   List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();   list.addChild(node); } "
"protected static @Nullable Object parseValueExpression(@Nullable GrExpression gre){   if (gre instanceof GrLiteral) {     return ((GrLiteral)gre).getValue();   }  else   if (gre instanceof GrListOrMap) {     GrListOrMap grLom=(GrListOrMap)gre;     if (grLom.isMap()) {       return null;     }     List<Object> values=Lists.newArrayList();     for (    GrExpression subexpression : grLom.getInitializers()) {       Object subValue=parseValueExpression(subexpression);       if (subValue != null) {         values.add(subValue);       }     }     return values;   }  else {     return null;   } } "
"@Override public void actionPerformed(ActionEvent ev){   execute(\"show what=selected;\"); } "
"private void addContribution(final SubHyperplane<Euclidean3D> facet,final boolean reversed){   final Region<Euclidean2D> polygon=((SubPlane)facet).getRemainingRegion();   final double area=polygon.getSize();   if (Double.isInfinite(area)) {     setSize(Double.POSITIVE_INFINITY);     setBarycenter((Point<Euclidean3D>)Vector3D.NaN);   }  else {     final Plane plane=(Plane)facet.getHyperplane();     final Vector3D facetB=plane.toSpace(polygon.getBarycenter());     double scaled=area * facetB.dotProduct(plane.getNormal());     if (reversed) {       scaled=-scaled;     }     setSize(getSize() + scaled);     setBarycenter((Point<Euclidean3D>)new Vector3D(1.0,(Vector3D)getBarycenter(),scaled,facetB));   } } "
"public static void picture(double x,double y,String filename){   Image image=getImage(filename);   double xs=scaleX(x);   double ys=scaleY(y);   int ws=image.getWidth(null);   int hs=image.getHeight(null);   if (ws < 0 || hs < 0)   throw new IllegalArgumentException(\"image \" + filename + \" is corrupt\");   offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);   draw(); } "
"public Vector3f add(float addX,float addY,float addZ){   return new Vector3f(x + addX,y + addY,z + addZ); } "
"private Rotation composeInverseInternal(Rotation r){   return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),-r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),-r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),-r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),false); } "
"public CreateRouteRequest(MediaSource source,MediaSink sink,String routeId,String origin,int tabId,int requestId,RouteDelegate delegate){   assert source != null;   assert sink != null;   mSource=source;   mSink=sink;   mRouteId=routeId;   mOrigin=origin;   mTabId=tabId;   mRequestId=requestId;   mDelegate=delegate; } "
"public Builder migrations(List<MigrationCache> migrationsCache){   this.migrationsCache=migrationsCache;   return this; } "
"@Override public boolean hasPassword(){   return propertyMap.containsKey(PASSWORD_KEY); } "
"private int calcNumberOfLines() throws DataFallbackException {   int lines=0;   openFallbackInputStream();   try {     while (getInput().readLine() != null) {       lines++;     }   }  catch (  IOException e) {     throw new DataFallbackException();   }  finally {     closeFallbackInputStream();   }   return lines; } "
"public String process(Item seg) throws ProcessException {   Item s=seg.getItemAs(Relation.SYLLABLE_STRUCTURE);   if (s == null) {     return \"coda\";   }   s=s.getNext();   while (s != null) {     if (\"+\".equals(getPhoneFeature(s,\"vc\"))) {       return \"onset\";     }     s=s.getNext();   }   return \"coda\"; } "
"public boolean isDistinct(){   return distinct; } "
"private CrashHandler(){ } "
"public synchronized void addListener(final TagUpdateListener listener,final Long tagId){   listeners.put(tagId,listener); } "
"private void checkConfiguration(){   if (configuration == null) {     throw new IllegalStateException(ERROR_NOT_INIT);   } } "
"@Override public synchronized boolean isProcessAliveType(){   return (getAliveType().equals(AliveTimer.ALIVE_TYPE_PROCESS)); } "
"private static void populatePayload(final StringBuffer logMessage,final FormattedMqttMessage message,final MessageLog messageLogOptions){   boolean encoded=MessageLogEnum.XML_WITH_ENCODED_PAYLOAD.equals(messageLogOptions.getValue());   final String payload=new String(message.getPayload());   if (!encoded && (payload.contains(ConversionUtils.LINE_SEPARATOR_LINUX) || payload.contains(ConversionUtils.LINE_SEPARATOR_MAC) || payload.contains(ConversionUtils.LINE_SEPARATOR_WIN))) {     logger.debug(\"Message on topic {} contains a new line separator, so it needs to be encoded\",message.getTopic());     encoded=true;   }   if (encoded) {     appendAttribute(logMessage,\"encoded\",\"true\");   }   logMessage.append(\">\");   if (encoded) {     appendValue(logMessage,Base64.encodeBase64String(message.getRawMessage().getPayload()));   }  else {     final boolean useCData=XML_CHARS.matcher(payload).find();     if (useCData) {       appendValue(logMessage,\"<![CDATA[\" + payload + \"]]>\");     }  else {       appendValue(logMessage,payload);     }   } } "
"protected void processXMLLangAttributes(XMLAttributes attributes){   String language=attributes.getValue(NamespaceContext.XML_URI,\"lang\");   if (language != null) {     fCurrentLanguage=language;     saveLanguage(fCurrentLanguage);   } } "
"public static long elapsedMilliseconds(Date dateStart,Date dateEnd){   return dateEnd.getTime() - dateStart.getTime(); } "
"public boolean isCacheLoaded(){   return cacheLoadCount > 0; } "
"public void requestDropList(Player player,int npcId){   DropNpc dropNpc=DropRegistrationService.getInstance().getDropRegistrationMap().get(npcId);   if (player == null || dropNpc == null) {     return;   }   if (!dropNpc.containsKey(player.getObjectId()) && !dropNpc.isFreeForAll()) {     PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_NO_RIGHT);     return;   }   if (dropNpc.isBeingLooted()) {     PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_FAIL_ONLOOTING);     return;   }   dropNpc.setBeingLooted(player);   VisibleObject visObj=World.getInstance().findVisibleObject(npcId);   if (visObj instanceof Npc) {     Npc npc=((Npc)visObj);     ScheduledFuture<?> decayTask=(ScheduledFuture<?>)npc.getController().cancelTask(TaskId.DECAY);     if (decayTask != null) {       long reamingDecayTime=decayTask.getDelay(TimeUnit.MILLISECONDS);       dropNpc.setReamingDecayTime(reamingDecayTime);     }   }   Set<DropItem> dropItems=DropRegistrationService.getInstance().getCurrentDropMap().get(npcId);   if (dropItems == null) {     dropItems=Collections.emptySet();   }   PacketSendUtility.sendPacket(player,new SM_LOOT_ITEMLIST(npcId,dropItems,player));   PacketSendUtility.sendPacket(player,new SM_LOOT_STATUS(npcId,2));   player.unsetState(CreatureState.ACTIVE);   player.setState(CreatureState.LOOTING);   player.setLootingNpcOid(npcId);   PacketSendUtility.broadcastPacket(player,new SM_EMOTION(player,EmotionType.START_LOOT,0,npcId),true); } "
"public boolean isStrict2(){   return this.strict2; } "
"@Override public void intialize(CarbonColumn[] carbonColumns,AbsoluteTableIdentifier absoluteTableIdentifier){   this.carbonColumns=carbonColumns;   dictionaries=new Dictionary[carbonColumns.length];   dataTypes=new DataType[carbonColumns.length];   for (int i=0; i < carbonColumns.length; i++) {     if (carbonColumns[i].hasEncoding(Encoding.DICTIONARY) && !carbonColumns[i].hasEncoding(Encoding.DIRECT_DICTIONARY)) {       CacheProvider cacheProvider=CacheProvider.getInstance();       Cache<DictionaryColumnUniqueIdentifier,Dictionary> forwardDictionaryCache=cacheProvider.createCache(CacheType.FORWARD_DICTIONARY,absoluteTableIdentifier.getStorePath());       try {         dataTypes[i]=carbonColumns[i].getDataType();         dictionaries[i]=forwardDictionaryCache.get(new DictionaryColumnUniqueIdentifier(absoluteTableIdentifier.getCarbonTableIdentifier(),carbonColumns[i].getColumnIdentifier(),dataTypes[i]));       }  catch (      CarbonUtilException e) {         throw new RuntimeException(e);       }     }   } } "
"protected boolean isValidAuthority(String authority){   if (authority == null) {     return false;   }   if (authorityValidator != null && authorityValidator.isValid(authority)) {     return true;   }   final String authorityASCII=DomainValidator.unicodeToASCII(authority);   Matcher authorityMatcher=AUTHORITY_PATTERN.matcher(authorityASCII);   if (!authorityMatcher.matches()) {     return false;   }   String hostLocation=authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);   DomainValidator domainValidator=DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS));   if (!domainValidator.isValid(hostLocation)) {     InetAddressValidator inetAddressValidator=InetAddressValidator.getInstance();     if (!inetAddressValidator.isValid(hostLocation)) {       return false;     }   }   String port=authorityMatcher.group(PARSE_AUTHORITY_PORT);   if (port != null && !PORT_PATTERN.matcher(port).matches()) {     return false;   }   String extra=authorityMatcher.group(PARSE_AUTHORITY_EXTRA);   if (extra != null && extra.trim().length() > 0) {     return false;   }   return true; } "
"public void execute(final Runnable runnable){   new Thread(runnable).start(); } "
"public PhotosRestoreCommentQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"protected AbstractUnivariateSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy){   super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy); } "
"public void onSearchResultsLoaded(boolean wasPrefetch){   mPanelMetrics.onSearchResultsLoaded(wasPrefetch); } "
"public boolean supportsDelete(){   return true; } "
"public static boolean isWellFormedIPv4Address(String address){   int addrLength=address.length();   char testChar;   int numDots=0;   int numDigits=0;   for (int i=0; i < addrLength; i++) {     testChar=address.charAt(i);     if (testChar == '.') {       if ((i > 0 && !isDigit(address.charAt(i - 1))) || (i + 1 < addrLength && !isDigit(address.charAt(i + 1)))) {         return false;       }       numDigits=0;       if (++numDots > 3) {         return false;       }     }  else     if (!isDigit(testChar)) {       return false;     }  else     if (++numDigits > 3) {       return false;     }  else     if (numDigits == 3) {       char first=address.charAt(i - 2);       char second=address.charAt(i - 1);       if (!(first < '2' || (first == '2' && (second < '5' || (second == '5' && testChar <= '5'))))) {         return false;       }     }   }   return (numDots == 3); } "
"private void pruneScrapViews(){   final int maxViews=activeViews.length;   final int viewTypeCount=this.viewTypeCount;   final SparseArray<View>[] scrapViews=this.scrapViews;   for (int i=0; i < viewTypeCount; ++i) {     final SparseArray<View> scrapPile=scrapViews[i];     int size=scrapPile.size();     final int extras=size - maxViews;     size--;     for (int j=0; j < extras; j++) {       scrapPile.remove(scrapPile.keyAt(size--));     }   } } "
"public OperatelogExample(){   oredCriteria=new ArrayList<Criteria>(); } "
"public ErrorHandler skipDefaults(){   if (localContext != null) {     localContext.get().skipDefaults=true;   }   return this; } "
"public AXmlNode addChild(AXmlNode child){   if (this.children == null)   this.children=new ArrayList<AXmlNode>();   this.children.add(child);   return this; } "
"public static String removePunctuationMarks(String text){   return removeExtraSpaces(allMarksPat.matcher(text).replaceAll(\" \")); } "
"public boolean isTemplateOnList(String title,String template){   boolean isOnList;   SiteAdminGridRow row=getRowByTitle(title);   isOnList=template.equals(row.getTemplateName());   if (!isOnList) {     LOG.debug(\"there is no template {} with title {} on the list\",template,title);   }   return isOnList; } "
"public summaryEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress){   Do=sDo;   OutputSemaphore=sOutputSemaphore;   WordMin=iWordMin;   WordMax=iWordMax;   WordDist=iWordDist;   CharMin=iCharMin;   CharMax=iCharMax;   CharDist=iCharDist;   Threads=iThreads;   OutFile=sOutFile;   SummaryDir=sSummaryDir;   ModelDir=sModelDir;   Silent=bSilent;   WeightMethod=iWeightMethod;   Progress=bProgress; } "
"public static void checkState(boolean expression,Object errorMessage){   if (!expression) {     throw new IllegalStateException(String.valueOf(errorMessage));   } } "
"public Object call(Object[] args) throws LuaException {   return call(args,1)[0]; } "
"private Bitmap scaleBitmap(Bitmap bitmap,int maxWidth,int maxHeight){   if (bitmap == null) {     return null;   }   float scaleX=1.0f;   float scaleY=1.0f;   if (bitmap.getWidth() > maxWidth) {     scaleX=maxWidth / (float)bitmap.getWidth();   }   if (bitmap.getHeight() > maxHeight) {     scaleY=maxHeight / (float)bitmap.getHeight();   }   float scale=Math.min(scaleX,scaleY);   int width=(int)(bitmap.getWidth() * scale);   int height=(int)(bitmap.getHeight() * scale);   return Bitmap.createScaledBitmap(bitmap,width,height,false); } "
"public Clock(){   super(); } "
"protected void internalPopulate(Map<String,String> options,FieldIdEnum field,String key){   FieldConfigBase fieldConfig=fieldConfigManager.get(field);   if (fieldConfig instanceof FieldConfigBoolean) {     internal_populateBooleanField(options,field,key);   }  else   if (fieldConfig instanceof FieldConfigInteger) {     internal_populateIntegerField(options,field,key);   }  else   if (fieldConfig instanceof FieldConfigDouble) {     internal_populateDoubleField(options,field,key);   }  else   if (fieldConfig instanceof FieldConfigEnum) {     internal_populateEnumField(options,field,key);   }  else {     ConsoleManager.getInstance().error(this,\"Unsupported field type : \" + field + \" \"+ fieldConfig.getClass().getName());   } } "
"public Sequence(){   this(INITIAL_VALUE); } "
"public void write(IOutputWriter writer,Map<Integer,ListOfLongs> classId2locations) throws IOException {   writer.writeInt(map2Weight.size());   for (  Object key : map2Weight.keySet()) {     writer.writeInt((Integer)key);     final Integer sum=map2Weight.get(key);     writer.writeInt(sum);     if (classId2locations != null) {       final ListOfLongs list=classId2locations.get(key);       writer.writeInt(list.size());       for (int i=0; i < list.size(); i++)       writer.writeLong(list.get(i));     }  else     writer.writeInt(0);   } } "
"public void showLoading(List<Integer> skipIds){   switchState(LOADING,null,null,null,null,null,skipIds); } "
"public SootFieldRef makeFieldRef(SootClass declaringClass,String name,Type type,boolean isStatic){   return new AbstractSootFieldRef(declaringClass,name,type,isStatic); } "
"private static void groupCorrespodingInfoBasedOnTask(TableBlockInfo info,TaskBlockInfo taskBlockMapping,String taskNo){   List<TableBlockInfo> blockLists=taskBlockMapping.getTableBlockInfoList(taskNo);   if (null != blockLists) {     blockLists.add(info);   }  else {     blockLists=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);     blockLists.add(info);     taskBlockMapping.addTableBlockInfoList(taskNo,blockLists);   } } "
"public final boolean isLocalApplication(){   return Host.LOCALHOST.equals(getHost()); } "
"public static String toString(URL url,String encoding) throws IOException {   return toString(url,Charsets.toCharset(encoding)); } "
"private void handleActionBaz(String param1,String param2){   throw new UnsupportedOperationException(\"Not yet implemented\"); } "
"public EmailBuilder bcc(List<String> bccAddresses){   this.bcc.addAll(bccAddresses);   return this; } "
"public Object clone(){   return new FakeJimpleLocal(getName(),getType(),realLocal,info); } "
"static String formatDateTimeAsUI(OffsetDateTime date,String timeZoneOffset){   try {     return date.format(DateTimeFormatter.ofPattern(\"MMM d, YYYY HH:mm:ss a\").withZone(ZoneId.ofOffset(\"UTC\",ZoneOffset.of(timeZoneOffset))));   }  catch (  DateTimeException dateTimeException) {     throw new PaginationException(ErrorCode.FILTER_KEY_UNPROCESSABLE,\"Wrong format: Can not parse timezone '\" + timeZoneOffset + \"' or date \"+ date.toString()+ \" properly.\",dateTimeException);   } } "
"@Override public boolean checkUniqueParticleAttribution(SubstitutionGroupHandler subGroupHandler) throws XMLSchemaException {   byte conflictTable[][]=new byte[fElemMapSize][fElemMapSize];   for (int i=0; i < fTransTable.length && fTransTable[i] != null; i++) {     for (int j=0; j < fElemMapSize; j++) {       for (int k=j + 1; k < fElemMapSize; k++) {         if (fTransTable[i][j] != -1 && fTransTable[i][k] != -1) {           if (conflictTable[j][k] == 0) {             if (XSConstraints.overlapUPA(fElemMap[j],fElemMap[k],subGroupHandler)) {               if (fCountingStates != null) {                 Occurence o=fCountingStates[i];                 if (o != null && fTransTable[i][j] == i ^ fTransTable[i][k] == i && o.minOccurs == o.maxOccurs) {                   conflictTable[j][k]=(byte)-1;                   continue;                 }               }               conflictTable[j][k]=(byte)1;             }  else {               conflictTable[j][k]=(byte)-1;             }           }         }       }     }   }   for (int i=0; i < fElemMapSize; i++) {     for (int j=0; j < fElemMapSize; j++) {       if (conflictTable[i][j] == 1) {         throw new XMLSchemaException(\"cos-nonambig\",new Object[]{fElemMap[i].toString(),fElemMap[j].toString()});       }     }   }   for (int i=0; i < fElemMapSize; i++) {     if (fElemMapType[i] == XSParticleDecl.PARTICLE_WILDCARD) {       XSWildcardDecl wildcard=(XSWildcardDecl)fElemMap[i];       if (wildcard.fType == XSWildcard.NSCONSTRAINT_LIST || wildcard.fType == XSWildcard.NSCONSTRAINT_NOT) {         return true;       }     }   }   return false; } "
"public static Map<String,Object> createCreditCard(DispatchContext ctx,Map<String,Object> context){   Map<String,Object> result=FastMap.newInstance();   Delegator delegator=ctx.getDelegator();   Security security=ctx.getSecurity();   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   Locale locale=(Locale)context.get(\"locale\");   Timestamp now=UtilDateTime.nowTimestamp();   String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,\"PAY_INFO\",\"_CREATE\",\"ACCOUNTING\",\"_CREATE\");   if (result.size() > 0)   return result;   List<String> messages=FastList.newInstance();   context.put(\"cardNumber\",StringUtil.removeSpaces((String)context.get(\"cardNumber\")));   if (!UtilValidate.isCardMatch((String)context.get(\"cardType\"),(String)context.get(\"cardNumber\"))) {     messages.add(UtilProperties.getMessage(resource,\"AccountingCreditCardNumberInvalid\",UtilMisc.toMap(\"cardType\",(String)context.get(\"cardType\"),\"validCardType\",UtilValidate.getCardType((String)context.get(\"cardNumber\"))),locale));   }   if (!UtilValidate.isDateAfterToday((String)context.get(\"expireDate\"))) {     messages.add(UtilProperties.getMessage(resource,\"AccountingCreditCardExpireDateBeforeToday\",UtilMisc.toMap(\"expireDate\",(String)context.get(\"expireDate\")),locale));   }   if (messages.size() > 0) {     return ServiceUtil.returnError(messages);   }   List<GenericValue> toBeStored=FastList.newInstance();   GenericValue newPm=delegator.makeValue(\"PaymentMethod\");   toBeStored.add(newPm);   GenericValue newCc=delegator.makeValue(\"CreditCard\");   toBeStored.add(newCc);   String newPmId=(String)context.get(\"paymentMethodId\");   if (UtilValidate.isEmpty(newPmId)) {     try {       newPmId=delegator.getNextSeqId(\"PaymentMethod\");     }  catch (    IllegalArgumentException e) {       return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"AccountingCreditCardCreateIdGenerationFailure\",locale));     }   }   newPm.set(\"partyId\",partyId);   newPm.set(\"description\",context.get(\"description\"));   newPm.set(\"fromDate\",(context.get(\"fromDate\") != null ? context.get(\"fromDate\") : now));   newPm.set(\"thruDate\",context.get(\"thruDate\"));   newCc.set(\"companyNameOnCard\",context.get(\"companyNameOnCard\"));   newCc.set(\"titleOnCard\",context.get(\"titleOnCard\"));   newCc.set(\"firstNameOnCard\",context.get(\"firstNameOnCard\"));   newCc.set(\"middleNameOnCard\",context.get(\"middleNameOnCard\"));   newCc.set(\"lastNameOnCard\",context.get(\"lastNameOnCard\"));   newCc.set(\"suffixOnCard\",context.get(\"suffixOnCard\"));   newCc.set(\"cardType\",context.get(\"cardType\"));   newCc.set(\"cardNumber\",context.get(\"cardNumber\"));   newCc.set(\"expireDate\",context.get(\"expireDate\"));   newPm.set(\"paymentMethodId\",newPmId);   newPm.set(\"paymentMethodTypeId\",\"CREDIT_CARD\");   newCc.set(\"paymentMethodId\",newPmId);   GenericValue newPartyContactMechPurpose=null;   String contactMechId=(String)context.get(\"contactMechId\");   if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals(\"_NEW_\")) {     newCc.set(\"contactMechId\",context.get(\"contactMechId\"));     String contactMechPurposeTypeId=\"BILLING_LOCATION\";     GenericValue tempVal=null;     try {       List<GenericValue> allPCWPs=EntityQuery.use(delegator).from(\"PartyContactWithPurpose\").where(\"partyId\",partyId,\"contactMechId\",contactMechId,\"contactMechPurposeTypeId\",contactMechPurposeTypeId).queryList();       allPCWPs=EntityUtil.filterByDate(allPCWPs,now,\"contactFromDate\",\"contactThruDate\",true);       allPCWPs=EntityUtil.filterByDate(allPCWPs,now,\"purposeFromDate\",\"purposeThruDate\",true);       tempVal=EntityUtil.getFirst(allPCWPs);     }  catch (    GenericEntityException e) {       Debug.logWarning(e.getMessage(),module);       tempVal=null;     }     if (tempVal == null) {       newPartyContactMechPurpose=delegator.makeValue(\"PartyContactMechPurpose\",UtilMisc.toMap(\"partyId\",partyId,\"contactMechId\",contactMechId,\"contactMechPurposeTypeId\",contactMechPurposeTypeId,\"fromDate\",now));     }   }   if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);   try {     delegator.storeAll(toBeStored);   }  catch (  GenericEntityException e) {     Debug.logWarning(e.getMessage(),module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"AccountingCreditCardCreateWriteFailure\",locale) + e.getMessage());   }   result.put(\"paymentMethodId\",newCc.getString(\"paymentMethodId\"));   result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);   return result; } "
"private BSPTree<Euclidean2D> selectClosest(final Vector2D point,final Iterable<BSPTree<Euclidean2D>> candidates){   BSPTree<Euclidean2D> selected=null;   double min=Double.POSITIVE_INFINITY;   for (  final BSPTree<Euclidean2D> node : candidates) {     final double distance=FastMath.abs(node.getCut().getHyperplane().getOffset(point));     if (distance < min) {       selected=node;       min=distance;     }   }   return min <= tolerance ? selected : null; } "
"static void handleException(final Throwable e){   if (e instanceof Error && !(e instanceof LinkageError || e instanceof OutOfMemoryError || e instanceof StackOverflowError)) {     throw (Error)e;   }   logger.log(Level.INFO,\"unmarshalling failure\",e); } "
"public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){   if (tag != cp.tag)   return tag - cp.tag;   CONSTANT_Class_info cu=(CONSTANT_Class_info)cp;   return ((CONSTANT_Utf8_info)(constant_pool[name_index])).compareTo(cp_constant_pool[cu.name_index]); } "
"public SystemWebViewEngine(Context context,CordovaPreferences preferences){   this(new SystemWebView(context),preferences); } "
"public static Response post(String url,String contenttype,JSON headers,JSON params){   return post(url,contenttype,headers,params,null); } "
"public static User loadById(long id){   return Helper.load(id,User.class); } "
"public Result transferPokemon() throws LoginFailedException, RemoteServerException {   ReleasePokemonMessage reqMsg=ReleasePokemonMessage.newBuilder().setPokemonId(getId()).build();   ServerRequest serverRequest=new ServerRequest(RequestType.RELEASE_POKEMON,reqMsg);   api.getRequestHandler().sendServerRequests(serverRequest);   ReleasePokemonResponse response;   try {     response=ReleasePokemonResponse.parseFrom(serverRequest.getData());   }  catch (  InvalidProtocolBufferException e) {     return ReleasePokemonResponse.Result.FAILED;   }   if (response.getResult() == Result.SUCCESS) {     api.getInventories().getPokebank().removePokemon(this);   }   api.getInventories().getPokebank().removePokemon(this);   api.getInventories().updateInventories();   return response.getResult(); } "
"public void stopPlaying(){   if ((this.state == STATE.MEDIA_RUNNING) || (this.state == STATE.MEDIA_PAUSED)) {     this.player.pause();     this.player.seekTo(0);     Log.d(LOG_TAG,\"stopPlaying is calling stopped\");     this.setState(STATE.MEDIA_STOPPED);   }  else {     Log.d(LOG_TAG,\"AudioPlayer Error: stopPlaying() called during invalid state: \" + this.state.ordinal());     sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);   } } "
"@Override public void renderLimitLines(Canvas c){   List<LimitLine> limitLines=mYAxis.getLimitLines();   if (limitLines == null || limitLines.size() <= 0)   return;   float[] pts=new float[2];   Path limitLinePath=new Path();   for (int i=0; i < limitLines.size(); i++) {     LimitLine l=limitLines.get(i);     if (!l.isEnabled())     continue;     mLimitLinePaint.setStyle(Paint.Style.STROKE);     mLimitLinePaint.setColor(l.getLineColor());     mLimitLinePaint.setStrokeWidth(l.getLineWidth());     mLimitLinePaint.setPathEffect(l.getDashPathEffect());     pts[1]=l.getLimit();     mTrans.pointValuesToPixel(pts);     limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);     limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);     c.drawPath(limitLinePath,mLimitLinePaint);     limitLinePath.reset();     String label=l.getLabel();     if (label != null && !\"\".equals(label)) {       mLimitLinePaint.setStyle(l.getTextStyle());       mLimitLinePaint.setPathEffect(null);       mLimitLinePaint.setColor(l.getTextColor());       mLimitLinePaint.setTypeface(l.getTypeface());       mLimitLinePaint.setStrokeWidth(0.5f);       mLimitLinePaint.setTextSize(l.getTextSize());       final float labelLineHeight=Utils.calcTextHeight(mLimitLinePaint,label);       float xOffset=Utils.convertDpToPixel(4f) + l.getXOffset();       float yOffset=l.getLineWidth() + labelLineHeight + l.getYOffset();       final LimitLine.LimitLabelPosition position=l.getLabelPosition();       if (position == LimitLine.LimitLabelPosition.RIGHT_TOP) {         mLimitLinePaint.setTextAlign(Align.RIGHT);         c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);       }  else       if (position == LimitLine.LimitLabelPosition.RIGHT_BOTTOM) {         mLimitLinePaint.setTextAlign(Align.RIGHT);         c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] + yOffset,mLimitLinePaint);       }  else       if (position == LimitLine.LimitLabelPosition.LEFT_TOP) {         mLimitLinePaint.setTextAlign(Align.LEFT);         c.drawText(label,mViewPortHandler.contentLeft() + xOffset,pts[1] - yOffset + labelLineHeight,mLimitLinePaint);       }  else {         mLimitLinePaint.setTextAlign(Align.LEFT);         c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] + yOffset,mLimitLinePaint);       }     }   } } "
"public GroupsInviteQuery invite(UserActor actor,int groupId,int userId){   return new GroupsInviteQuery(getClient(),actor,groupId,userId); } "
"public Vector3D toVector3D(){   return new Vector3D(x.getReal(),y.getReal(),z.getReal()); } "
"public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_ENABLE_NO_MOVE(String value0){   return new SM_SYSTEM_MESSAGE(1300807,value0); } "
"private void generatePatternBitmap(){   if (getBounds().width() <= 0 || getBounds().height() <= 0) {     return;   }   mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);   Canvas canvas=new Canvas(mBitmap);   Rect r=new Rect();   boolean verticalStartWhite=true;   for (int i=0; i <= numRectanglesVertical; i++) {     boolean isWhite=verticalStartWhite;     for (int j=0; j <= numRectanglesHorizontal; j++) {       r.top=i * mRectangleSize;       r.left=j * mRectangleSize;       r.bottom=r.top + mRectangleSize;       r.right=r.left + mRectangleSize;       canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);       isWhite=!isWhite;     }     verticalStartWhite=!verticalStartWhite;   } } "
"public boolean isValueDeadbandFiltered(final SourceDataTag currentTag,final ValueUpdate update){   return isValueDeadbandFiltered(currentTag,update,new SourceDataTagQuality()); } "
"public SlickForm withProcessingLabel(String label){   this.endTag=label;   return this; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200962,skilltarget,num0,skillcaster,skillname); } "
"@Override public synchronized void invalidate(String key,boolean fullExpire){   Entry entry=get(key);   if (entry != null) {     entry.softTtl=0;     if (fullExpire) {       entry.ttl=0;     }     put(key,entry);   } } "
"public boolean isMp4(){   return isOptionEnabled(UrlFilterRuleOption.MP4); } "
"public void read(IInputReader reader,long startPos) throws IOException {   reader.seek(startPos);   final int magicNumber=reader.readInt();   if (magicNumber != RMA2File.MAGIC_NUMBER) {     throw new IOException(\"Not an RMA file\");   }   final int version=reader.readInt();   if (version != 3) {     throw new IOException(\"Not an RMA 3 file\");   }   setFormatDef(reader.readString());   FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());   for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {     if (pair.getFirst().equals(\"Creator\"))     setCreator(reader.readString());  else     if (pair.getFirst().equals(\"CreationDate\"))     setCreationDate(reader.readLong());   } } "
"public void scrollOnce(){   if (null != mAdapter && mAdapter.getCount() > 1) {     int totalCount=mAdapter.getCount();     int currentItem=getCurrentItem();     int nextItem=currentItem % totalCount + 1;     setCurrentItem(nextItem,true);   }  else {     stopAutoScroll();   } } "
"public static SM_SYSTEM_MESSAGE STR_INGAMESHOP_NOT_ENOUGH_CASH(String value0){   return new SM_SYSTEM_MESSAGE(901706,value0); } "
"public BetweenSpacePredicate(Comparable<?> low,Comparable<?> high){   this(low,high,null,true,true); } "
"public EsSupervisionMapping(){   mappings=new SupervisionProperties(); } "
"private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){   Mode subMode=Mode.ALPHA;   Mode priorToShiftMode=Mode.ALPHA;   int i=0;   while (i < length) {     int subModeCh=textCompactionData[i];     char ch=0; switch (subMode) { case ALPHA:       if (subModeCh < 26) {         ch=(char)('A' + subModeCh);       }  else {         if (subModeCh == 26) {           ch=' ';         }  else         if (subModeCh == LL) {           subMode=Mode.LOWER;         }  else         if (subModeCh == ML) {           subMode=Mode.MIXED;         }  else         if (subModeCh == PS) {           priorToShiftMode=subMode;           subMode=Mode.PUNCT_SHIFT;         }  else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {           result.append((char)byteCompactionData[i]);         }  else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {           subMode=Mode.ALPHA;         }       }     break; case LOWER:   if (subModeCh < 26) {     ch=(char)('a' + subModeCh);   }  else {     if (subModeCh == 26) {       ch=' ';     }  else     if (subModeCh == AS) {       priorToShiftMode=subMode;       subMode=Mode.ALPHA_SHIFT;     }  else     if (subModeCh == ML) {       subMode=Mode.MIXED;     }  else     if (subModeCh == PS) {       priorToShiftMode=subMode;       subMode=Mode.PUNCT_SHIFT;     }  else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {       result.append((char)byteCompactionData[i]);     }  else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {       subMode=Mode.ALPHA;     }   } break; case MIXED: if (subModeCh < PL) { ch=MIXED_CHARS[subModeCh]; }  else { if (subModeCh == PL) {   subMode=Mode.PUNCT; }  else if (subModeCh == 26) {   ch=' '; }  else if (subModeCh == LL) {   subMode=Mode.LOWER; }  else if (subModeCh == AL) {   subMode=Mode.ALPHA; }  else if (subModeCh == PS) {   priorToShiftMode=subMode;   subMode=Mode.PUNCT_SHIFT; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {   result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {   subMode=Mode.ALPHA; } } break; case PUNCT: if (subModeCh < PAL) { ch=PUNCT_CHARS[subModeCh]; }  else { if (subModeCh == PAL) { subMode=Mode.ALPHA; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; case ALPHA_SHIFT: subMode=priorToShiftMode; if (subModeCh < 26) { ch=(char)('A' + subModeCh); }  else { if (subModeCh == 26) { ch=' '; }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; case PUNCT_SHIFT: subMode=priorToShiftMode; if (subModeCh < PAL) { ch=PUNCT_CHARS[subModeCh]; }  else { if (subModeCh == PAL) { subMode=Mode.ALPHA; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; } if (ch != 0) { result.append(ch); } i++; } } "
"public ServerConfiguration enableDurableWrite(boolean enabled){   setProperty(SERVER_DURABLE_WRITE_ENABLED,enabled);   return this; } "
"public static boolean isOFBGiftCard(String stPassed){   if (isEmpty(stPassed))   return defaultEmptyOK;   String st=stripCharsInBag(stPassed,creditCardDelimiters);   if (st.length() == 15 && sumIsMod10(getLuhnSum(st))) {     return true;   }   return false; } "
"public MessagesAddChatUserQuery(VkApiClient client,UserActor actor,int chatId,int userId){   super(client,\"messages.addChatUser\",OkResponse.class);   accessToken(actor.getAccessToken());   chatId(chatId);   userId(userId); } "
"private void bindViewType(WXComponent component){   int id=generateViewType(component);   if (mViewTypes == null) {     mViewTypes=new SparseArray<>();   }   ArrayList<WXComponent> mTypes=mViewTypes.get(id);   if (mTypes == null) {     mTypes=new ArrayList<>();     mViewTypes.put(id,mTypes);   }   mTypes.add(component); } "
"static float rotateX(float pX,float pY,float cX,float cY,float angleInDegrees){   double angle=Math.toRadians(angleInDegrees);   return (float)(Math.cos(angle) * (pX - cX) - Math.sin(angle) * (pY - cY) + cX); } "
"public boolean isSingleton(){   return true; } "
"private void extractJobDefinitionsFromStageDefinitions(List<StageDefinition> stageDefinitions,List<JobDefinition> jobDefinitions){   for (  StageDefinition stageDefinition : stageDefinitions) {     List<JobDefinition> jobDefinitionsList=stageDefinition.getJobDefinitions();     jobDefinitions.addAll(jobDefinitionsList);   } } "
"NewProjectDescriptor withBriefNames(){   withActivity(\"A\").withCompanyDomain(\"C\").withName(\"P\").withPackageName(\"a.b\");   return this; } "
"public static void verifyWhichActivityToSwitch(Context mContext,String source,String dest){   UserInfoActivity.start(mContext,dest); } "
"public void clearSounds(){   mSoundMap.clear(); } "
"public static Event createAction(){   return new Event(\"ACTION\"); } "
"public MarketCreateCommentQuery attachments(List<String> value){   return unsafeParam(\"attachments\",value); } "
"private int postTreeBuildInit(CMNode nodeCur,int curIndex){   nodeCur.setMaxStates(fLeafCount);   if ((nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY || (nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_LOCAL || (nodeCur.type() & 0x0f) == XMLContentSpec.CONTENTSPECNODE_ANY_OTHER) {     QName qname=new QName(null,null,null,((CMAny)nodeCur).getURI());     fLeafList[curIndex]=new CMLeaf(qname,((CMAny)nodeCur).getPosition());     fLeafListType[curIndex]=nodeCur.type();     curIndex++;   }  else   if ((nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_SEQ)) {     curIndex=postTreeBuildInit(((CMBinOp)nodeCur).getLeft(),curIndex);     curIndex=postTreeBuildInit(((CMBinOp)nodeCur).getRight(),curIndex);   }  else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE || nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE) {     curIndex=postTreeBuildInit(((CMUniOp)nodeCur).getChild(),curIndex);   }  else   if (nodeCur.type() == XMLContentSpec.CONTENTSPECNODE_LEAF) {     final QName node=((CMLeaf)nodeCur).getElement();     if (node.localpart != fEpsilonString) {       fLeafList[curIndex]=(CMLeaf)nodeCur;       fLeafListType[curIndex]=XMLContentSpec.CONTENTSPECNODE_LEAF;       curIndex++;     }   }  else {     throw new RuntimeException(\"ImplementationMessages.VAL_NIICM: type=\" + nodeCur.type());   }   return curIndex; } "
"public int deflateString2ByteArray(String inputString,byte[] bytes){   byte[] input;   try {     input=inputString.getBytes(\"UTF-8\");   }  catch (  UnsupportedEncodingException e) {     input=new byte[inputString.length()];     for (int i=0; i < bytes.length; i++)     input[i]=(byte)inputString.charAt(i);   }   return deflateString2ByteArray(input,0,input.length,bytes); } "
"public static byte[] toByteArray(InputStream input,int size) throws IOException {   if (size < 0) {     throw new IllegalArgumentException(\"Size must be equal or greater than zero: \" + size);   }   if (size == 0) {     return new byte[0];   }   byte[] data=new byte[size];   int offset=0;   int readed;   while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {     offset+=readed;   }   if (offset != size) {     throw new IOException(\"Unexpected readed size. current: \" + offset + \", excepted: \"+ size);   }   return data; } "
"public String loadFile(String sID){   return getDocumentText(sID,true); } "
"public void destroy(){   mContextControl.destroy();   mSearchTermControl.destroy(); } "
"public static void writeToBinFile(File dmpFile,File binFile) throws IOException {   System.err.println(\"Converting \" + dmpFile.getName() + \" to \"+ binFile.getName()+ \"...\");   long totalOut=0;   try (final FileInputIterator it=new FileInputIterator(dmpFile,true);OutputWriter outs=new OutputWriter(binFile)){     System.err.println(\"Writing file: \" + binFile);     outs.writeInt(MAGIC_NUMBER);     long lastGi=0;     int lineNo=0;     while (it.hasNext()) {       String aLine=it.next();       lineNo++;       final int pos=aLine.indexOf('\\t');       final String giString=aLine.substring(0,pos);       final int dotPos=giString.indexOf('.');       final long gi=Long.parseLong(dotPos > 0 ? giString.substring(0,dotPos) : giString);       if (gi >= 0) {         final int taxId=Integer.parseInt(aLine.substring(pos + 1));         if (gi >= 0 && gi <= lastGi)         throw new IOException(\"Error, line: \" + lineNo + \": GIs out of order: \"+ gi+ \" after \"+ lastGi);         final int missing=(int)(gi - 1 - lastGi);         for (int i=0; i < missing; i++)         outs.writeInt(0);         outs.writeInt(taxId);         totalOut++;         lastGi=gi;       }     }   }    System.err.println(\"done (\" + totalOut + \" entries)\"); } "
"@Nullable public static String extractMajorVersionFromSemanticVersion(String semanticVersion){   Matcher matcher=SEMANTIC_VERSION_REGEX_PATTERN.matcher(semanticVersion);   if (matcher.find()) {     return matcher.group(1);   }  else {     return null;   } } "
"private void loadOneToOneObject(FieldMetaData fmd,OpenJPAStateManager sm,Object fieldValue){   if (fieldValue == null) {     sm.storeObject(fmd.getIndex(),null);   }  else {     final ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();     final IEntryPacket entry=proxy.getDirectProxy().getTypeManager().getEntryPacketFromObject(fieldValue,ObjectType.POJO);     final ClassMetaData cmd=fmd.getDeclaredTypeMetaData();     final Object oid=ApplicationIds.fromPKValues(new Object[]{entry.getID()},cmd);     final BitSet exclude=new BitSet(cmd.getFields().length);     final Object managedObject=getContext().find(oid,null,exclude,entry,0);     _relationsManager.setOwnerStateManagerForPersistentInstance(managedObject,sm,fmd);     sm.storeObject(fmd.getIndex(),managedObject);   } } "
"public static double[] convolve(final double[] signal1,final double[] signal2){   if (signal1 == null || signal2 == null)   throw new NullPointerException(\"Received null argument\");   if (signal1.length != signal2.length)   throw new IllegalArgumentException(\"Arrays must be equal length\");   int N=signal1.length;   assert MathUtils.isPowerOfTwo(N);   double[] fft1=new double[N];   System.arraycopy(signal1,0,fft1,0,N);   double[] fft2=new double[N];   System.arraycopy(signal2,0,fft2,0,N);   realTransform(fft1,false);   realTransform(fft2,false);   fft1[0]=fft1[0] * fft2[0];   fft1[1]=fft1[1] * fft2[1];   for (int i=2; i < N; i+=2) {     double tmp=fft1[i];     fft1[i]=fft1[i] * fft2[i] - fft1[i + 1] * fft2[i + 1];     fft1[i + 1]=tmp * fft2[i + 1] + fft1[i + 1] * fft2[i];   }   realTransform(fft1,true);   return fft1; } "
"private boolean readyPlayer(String file){   if (playMode()) { switch (this.state) { case MEDIA_NONE:       if (this.player == null) {         this.player=new MediaPlayer();       }     try {       this.loadAudioFile(file);     }  catch (    Exception e) {       sendErrorStatus(MEDIA_ERR_ABORTED);     }   return false; case MEDIA_LOADING: Log.d(LOG_TAG,\"AudioPlayer Loading: startPlaying() called during media preparation: \" + STATE.MEDIA_STARTING.ordinal()); this.prepareOnly=false; return false; case MEDIA_STARTING: case MEDIA_RUNNING: case MEDIA_PAUSED: return true; case MEDIA_STOPPED: if (this.audioFile.compareTo(file) == 0) { if (this.recorder != null && player == null) { this.player=new MediaPlayer(); this.prepareOnly=false; try { this.loadAudioFile(file); }  catch (Exception e) { sendErrorStatus(MEDIA_ERR_ABORTED); } return false; }  else { player.seekTo(0); player.pause(); return true; } }  else { this.player.reset(); try { this.loadAudioFile(file); }  catch (Exception e) { sendErrorStatus(MEDIA_ERR_ABORTED); } return false; } default : Log.d(LOG_TAG,\"AudioPlayer Error: startPlaying() called during invalid state: \" + this.state); sendErrorStatus(MEDIA_ERR_ABORTED); } } return false; } "
"public static Matrix random(int m,int n){   Matrix A=new Matrix(m,n);   double[][] X=A.getArray();   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       X[i][j]=Math.random();     }   }   return A; } "
"@PickTriggerResult public int fromMultipleSources(@NonNull final CharSequence pTitle,@NonNull final PickSource... pPickSources){   if (pPickSources.length == 0) {     return PickTriggerResult.TRIGGER_PICK_ERR_NO_PICK_SOURCES;   }   final PackageManager packageManager=this.mContext.getPackageManager();   final ArrayList<Intent> resultIntents=new ArrayList<>();   for (  final PickSource source : pPickSources) { switch (source) { case CAMERA: {         final List<Intent> cameraIntents=new ArrayList<>();         final File file=this.createCameraImageFile();         if (file != null) {           final Uri outputFileUri=this.createCameraImageUri(file);           final Intent cameraIntent=this.prepareCameraIntent(outputFileUri);           final List<ResolveInfo> camList=packageManager.queryIntentActivities(cameraIntent,0);           for (          final ResolveInfo resolveInfo : camList) {             final String packageName=resolveInfo.activityInfo.packageName;             final Intent intent=new Intent(cameraIntent);             intent.setComponent(new ComponentName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));             intent.setPackage(packageName);             intent.putExtra(MediaStore.EXTRA_OUTPUT,outputFileUri);             cameraIntents.add(intent);           }         }         resultIntents.addAll(cameraIntents);         break;       } case GALLERY: {       final List<Intent> galleryIntents=new ArrayList<>();       final Intent galleryIntent=this.prepareGalleryIntent();       final List<ResolveInfo> camList=packageManager.queryIntentActivities(galleryIntent,0);       for (      final ResolveInfo resolveInfo : camList) {         final String packageName=resolveInfo.activityInfo.packageName;         final Intent intent=new Intent(galleryIntent);         intent.setComponent(new ComponentName(resolveInfo.activityInfo.packageName,resolveInfo.activityInfo.name));         intent.setPackage(packageName);         galleryIntents.add(intent);       }       resultIntents.addAll(galleryIntents);       break;     } case DOCUMENTS: {     resultIntents.add(this.prepareDocumentsIntent(false));     break;   } } } if (resultIntents.size() == 0) { return PickTriggerResult.TRIGGER_PICK_ERR_NO_ACTIVITY; } final Intent result=Intent.createChooser(resultIntents.remove(resultIntents.size() - 1),pTitle); result.putExtra(Intent.EXTRA_INITIAL_INTENTS,resultIntents.toArray(new Parcelable[resultIntents.size()])); return this.triggerPick(result,QiPick.REQ_MULTIPLE); } "
"@Nullable @Override public PsiElement resolve(){   String keyword=myElement.getName();   if (keyword == null) {     return null;   }   FunctionStatement function=resolveFunction();   if (function == null) {     return null;   }   Parameter.StarStar kwargsParameter=null;   for (  Parameter param : function.getParameters()) {     if (param instanceof Parameter.StarStar) {       kwargsParameter=(Parameter.StarStar)param;       continue;     }     if (keyword.equals(param.getName())) {       return param;     }   }   if (kwargsParameter != null) {     return kwargsParameter;   }   return null; } "
"public boolean field_based(){   return soot.PhaseOptions.getBoolean(options,\"field-based\"); } "
"public void exitFullScreen(){   View decorView=mContext.getWindow().getDecorView();   showSystemUI(decorView);   for (  View view : views) {     view.setVisibility(View.VISIBLE);     view.invalidate();   } } "
"public boolean processRow(StepMetaInterface smi,StepDataInterface sdi) throws KettleException {   this.meta=((SortKeyStepMeta)smi);   StandardLogService.setThreadName(meta.getPartitionID(),null);   this.data=((SortKeyStepData)sdi);   Object[] row=getRow();   this.observer=new SortObserver();   if (row == null) {     return processRowToNextStep();   }  else   if (RemoveDictionaryUtil.checkAllValuesForNull(row)) {     int outSize=Integer.parseInt(meta.getOutputRowSize());     Object[] outRow=new Object[outSize];     this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());     this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);     LOGGER.info(\"Record Procerssed For table: \" + meta.getTabelName());     LOGGER.info(\"Record Form Previous Step was null\");     String logMessage=\"Summary: Carbon Sort Key Step: Read: \" + 1 + \": Write: \"+ 1;     LOGGER.info(logMessage);     putRow(data.getOutputRowMeta(),outRow);     setOutputDone();     return false;   }   if (first) {     CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());     first=false;     this.data.setOutputRowMeta((RowMetaInterface)getInputRowMeta().clone());     this.meta.getFields(data.getOutputRowMeta(),getStepname(),null,null,this);     this.meta.setNoDictionaryCount(RemoveDictionaryUtil.extractNoDictionaryCount(meta.getNoDictionaryDims()));     this.noDictionaryColMaping=RemoveDictionaryUtil.convertStringToBooleanArr(meta.getNoDictionaryDimsMapping());     SortParameters parameters=SortParameters.createSortParameters(meta.getDatabaseName(),meta.getTabelName(),meta.getDimensionCount(),meta.getComplexDimensionCount(),meta.getMeasureCount(),this.observer,meta.getNoDictionaryCount(),meta.getPartitionID(),meta.getSegmentId() + \"\",meta.getTaskNo(),this.noDictionaryColMaping);     intermediateFileMerger=new SortIntermediateFileMerger(parameters);     this.sortDataRows=new SortDataRows(parameters,intermediateFileMerger);     try {       this.sortDataRows.initialize();     }  catch (    CarbonSortKeyAndGroupByException e) {       throw new KettleException(e);     }     this.logCounter=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DATA_LOAD_LOG_COUNTER,CarbonCommonConstants.DATA_LOAD_LOG_COUNTER_DEFAULT_COUNTER));   }   readCounter++;   if (readCounter % logCounter == 0) {     LOGGER.info(\"Record Procerssed For table: \" + meta.getTabelName());     String logMessage=\"Carbon Sort Key Step: Record Read: \" + readCounter;     LOGGER.info(logMessage);   }   try {     this.sortDataRows.addRow(row);     writeCounter++;   }  catch (  Throwable e) {     LOGGER.error(e);     throw new KettleException(e);   }   return true; } "
"public static void printLogs(){   System.out.println(getLogString()); } "
"public AgeFileFilter(Date cutoffDate){   this(cutoffDate,true); } "
"public TAC2008DirectoryFileSet(String sCorpusDir){   CorpusDir=sCorpusDir;   Categories=null;   TrainingFiles=new ArrayList<CategorizedFileEntry>();   TestFiles=new ArrayList<CategorizedFileEntry>(); } "
"public static int maxIndex(double[] doubles){   double maximum=0;   int maxIndex=0;   for (int i=0; i < doubles.length; i++) {     if ((i == 0) || (doubles[i] > maximum)) {       maxIndex=i;       maximum=doubles[i];     }   }   return maxIndex; } "
"@Override public void clusterOnline(ClusterNode clusterNode){   LOGGER.info(\"Detected Terracotta cluster online event for node: \" + clusterNode.getId()); } "
"private Cluster<T> expandCluster(final Cluster<T> cluster,final T point,final List<T> neighbors,final Collection<T> points,final Map<Clusterable,PointStatus> visited){   cluster.addPoint(point);   visited.put(point,PointStatus.PART_OF_CLUSTER);   List<T> seeds=new ArrayList<T>(neighbors);   int index=0;   while (index < seeds.size()) {     final T current=seeds.get(index);     PointStatus pStatus=visited.get(current);     if (pStatus == null) {       final List<T> currentNeighbors=getNeighbors(current,points);       if (currentNeighbors.size() >= minPts) {         seeds=merge(seeds,currentNeighbors);       }     }     if (pStatus != PointStatus.PART_OF_CLUSTER) {       visited.put(current,PointStatus.PART_OF_CLUSTER);       cluster.addPoint(current);     }     index++;   }   return cluster; } "
"protected ResultObjectProvider executeQuery(Executor ex,ClassMetaData classMetaData,ClassMetaData[] types,boolean subClasses,ExpressionFactory[] factories,QueryExpressions[] expressions,Object[] parameters,Range range){   final JpaQueryExecutor executor=JpaQueryExecutorFactory.newExecutor(expressions[0],classMetaData,parameters);   try {     return executor.execute(_store);   }  catch (  Exception e) {     throw new RuntimeException(e.getMessage(),e);   } } "
"private void tryScrollBackToTopAbortRefresh(){   tryScrollBackToTop(); } "
"public void switchContent(BaseFragment from,BaseFragment to){   if (currentFragment == to) {     return;   }  else {     currentFragment=to;     FragmentTransaction ft=fragmentManager.beginTransaction();     ft.setCustomAnimations(R.anim.fragment_fade_in,R.anim.fragment_fade_out);     ft.replace(R.id.fl_content,to).commit();   }   invalidateOptionsMenu(); } "
"public NotANumberException(){   super(LocalizedFormats.NAN_NOT_ALLOWED,Double.valueOf(Double.NaN)); } "
"public boolean isEmpty(){   return this.optionsTable.isEmpty(); } "
"public final boolean containsKey(String name){   return mMap.containsKey(name); } "
"public static boolean isCompatibleWithThrowsClause(Throwable ex,Class<?>[] declaredExceptions){   if (!isCheckedException(ex))   return true;   if (declaredExceptions != null)   for (  Class<?> declaredException : declaredExceptions)   if (declaredException.isAssignableFrom(ex.getClass()))   return true;   return false; } "
"public DocumentNGramGraph allNotIn(DocumentNGramGraph dgOtherGraph){   EdgeCachedLocator eclLocator=new EdgeCachedLocator(Math.max(length(),dgOtherGraph.length()));   DocumentNGramGraph dgClone=(DocumentNGramGraph)clone();   for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {     UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);     UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);     if (gOtherGraphLevel == null)     continue;     java.util.Iterator iIter=Arrays.asList(gCloneLevel.getEdgeSet().toArray()).iterator();     while (iIter.hasNext()) {       WeightedEdge weCurItem=(WeightedEdge)iIter.next();       Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());       if (eEdge != null)       try {         gCloneLevel.removeEdge(weCurItem);         eclLocator.resetCache();       }  catch (      Exception ex) {         ex.printStackTrace();       }     }   }   return dgClone; } "
"public static JFrame showForcePanel(ForceSimulator fsim){   JFrame frame=new JFrame(\"prefuse Force Simulator\");   frame.setContentPane(new JForcePanel(fsim));   frame.pack();   frame.setVisible(true);   return frame; } "
"public boolean context_counts(){   return soot.PhaseOptions.getBoolean(options,\"context-counts\"); } "
"private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){   int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0); switch (numSigBytes) { case 3:     destination[destOffset]=alphabet[(inBuff >>> 18)];   destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f]; destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f]; destination[destOffset + 3]=alphabet[(inBuff) & 0x3f]; return destination; case 2: destination[destOffset]=alphabet[(inBuff >>> 18)]; destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f]; destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f]; destination[destOffset + 3]=EQUALS_SIGN; return destination; case 1: destination[destOffset]=alphabet[(inBuff >>> 18)]; destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f]; destination[destOffset + 2]=EQUALS_SIGN; destination[destOffset + 3]=EQUALS_SIGN; return destination; default : return destination; } } "
"public RevealBuilder withCurvedTranslation(final PointF curveControlPoint){   this.mCurveControlPoint=curveControlPoint;   return this.withCurvedTranslation(); } "
"public void dumpBinary(DataOutputStream os) throws IOException {   char[] nameArray=(name + \"        \").toCharArray();   os.writeInt(MAGIC);   for (int i=0; i < NAME_LENGTH; i++) {     os.writeChar(nameArray[i]);   }   os.writeInt(midPoint);   os.writeInt(samples.length);   for (int i=0; i < samples.length; i++) {     samples[i].dumpBinary(os);   } } "
"public static Map<String,Object> updateBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){   Map<String,Object> result=null;   try {     result=updateBinaryFileMethod(dctx,context);   }  catch (  GenericServiceException e) {     return ServiceUtil.returnError(e.getMessage());   }   return result; } "
"public StandardParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){   super(symbolTable,grammarPool,parentSettings);   final String[] recognizedFeatures={NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,NAMESPACE_GROWTH,TOLERATE_DUPLICATES,XMLSCHEMA_VALIDATION,XMLSCHEMA_FULL_CHECKING,IGNORE_XSI_TYPE,ID_IDREF_CHECKING,IDENTITY_CONSTRAINT_CHECKING,UNPARSED_ENTITY_CHECKING};   addRecognizedFeatures(recognizedFeatures);   setFeature(SCHEMA_ELEMENT_DEFAULT,true);   setFeature(NORMALIZE_DATA,true);   setFeature(SCHEMA_AUGMENT_PSVI,true);   setFeature(GENERATE_SYNTHETIC_ANNOTATIONS,false);   setFeature(VALIDATE_ANNOTATIONS,false);   setFeature(HONOUR_ALL_SCHEMALOCATIONS,false);   setFeature(NAMESPACE_GROWTH,false);   setFeature(TOLERATE_DUPLICATES,false);   setFeature(IGNORE_XSI_TYPE,false);   setFeature(ID_IDREF_CHECKING,true);   setFeature(IDENTITY_CONSTRAINT_CHECKING,true);   setFeature(UNPARSED_ENTITY_CHECKING,true);   final String[] recognizedProperties={SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,ROOT_TYPE_DEF,ROOT_ELEMENT_DECL,SCHEMA_DV_FACTORY};   addRecognizedProperties(recognizedProperties); } "
"public boolean isApplicable(){   return true; } "
"public MessagesMarkAsReadQuery messageIds(List<Integer> value){   return unsafeParam(\"message_ids\",value); } "
"public BeforeExtended(Expression expression1,Expression expression2){   super(expression1,expression2); } "
"public static UUID uuidForTimeMillis(long timeMillis){   return uuidForTimeMillis(timeMillis,0); } "
"public void sort(){   Arrays.sort(_data,0,_pos); } "
"public void received(ByteBuffer buffer){   hasReceivedData=true;   lastReceiveTime=System.currentTimeMillis(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_ME_TO_B(int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200523,num0,skilltarget,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_B(String skillcaster,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1201034,skillcaster,value0,skillname); } "
"public AuthConfirmQuery testMode(Boolean value){   return unsafeParam(\"test_mode\",value); } "
"public static Plugin toBukkit(cn.nukkit.plugin.Plugin plugin){   if (plugin == null) {     return null;   }   if (plugin instanceof PokkitPlugin) {     return ((PokkitPlugin)plugin).bukkit;   }   return new NukkitPluginWrapper(plugin); } "
"public List<Constant> vals(){   return vals; } "
"public InSpacePredicate(Object... values){   _inValues=new HashSet<Object>();   for (  Object value : values) {     _inValues.add(value);   } } "
"public String process(Item seg) throws ProcessException {   return segCodaCtype(seg,\"n\"); } "
"public void unlock(Object key){   String uid=String.valueOf(key);   Transaction tr=lockedUIDHashMap.get(uid);   if (tr == null) {     return;   }   try {     tr.commit();   }  catch (  Exception e) {     logger.warn(\"Failed to commit transaction and unlocking the object, ignoring\",e);   }  finally {     lockedUIDHashMap.remove(uid);   } } "
"public static double girardArea(S2Point a,S2Point b,S2Point c){   S2Point ab=S2Point.crossProd(a,b);   S2Point bc=S2Point.crossProd(b,c);   S2Point ac=S2Point.crossProd(a,c);   return Math.max(0.0,ab.angle(ac) - ab.angle(bc) + bc.angle(ac)); } "
"private boolean isAlwaysNullBefore(Stmt s,Local base,LocalDefs defs){   List<Unit> baseDefs=defs.getDefsOfAt(base,s);   if (baseDefs.isEmpty())   return true;   for (  Unit u : baseDefs) {     if (!(u instanceof DefinitionStmt))     return false;     DefinitionStmt defStmt=(DefinitionStmt)u;     if (defStmt.getRightOp() != NullConstant.v())     return false;   }   return true; } "
"public static String join(String glue,String[] items){   if (glue == null || items == null) {     throw new NullPointerException(\"Null args\");   }   if (items.length == 0) {     return \"\";   }   StringBuilder sb=new StringBuilder();   sb.append(items[0]);   for (int i=1; i < items.length; i++) {     sb.append(glue).append(items[i]);   }   return sb.toString(); } "
"public static double[] readDoubles(){   return readAllDoubles(); } "
"private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){   if (drawable instanceof RecyclingBitmapDrawable) {     ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);   }  else   if (drawable instanceof LayerDrawable) {     LayerDrawable layerDrawable=(LayerDrawable)drawable;     for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {       notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);     }   } } "
"public static void startGameTime(){   startGameTime=true; } "
"public static int readInt(){   return scanner.nextInt(); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_NPC_ATTACK(String value0,int num2,String value1){   return new SM_SYSTEM_MESSAGE(1260000,value0,num2,value1); } "
"public double readDouble() throws IOException {   return dis.readDouble(); } "
"public static boolean isBookSearchUrl(String url){   return url.startsWith(\"http://google.com/books\") || url.startsWith(\"http://books.google.\"); } "
"private void updateEquipmentStatus(){   boolean down=false;   StringBuilder invalidationMessage=new StringBuilder();   for (  SupervisionEvent event : equipmentSupervisionStatus.values()) {     if (event != null) {       boolean isDown=false;       isDown|=event.getStatus().equals(SupervisionStatus.DOWN);       isDown|=event.getStatus().equals(SupervisionStatus.STOPPED);       if (isDown) {         down=true;         if (invalidationMessage.length() > 0) {           invalidationMessage.append(\"; \");         }         invalidationMessage.append(event.getMessage());       }     }   }   if (down) {     tagQuality.addInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN,invalidationMessage.toString());   }  else {     tagQuality.removeInvalidStatus(TagQualityStatus.EQUIPMENT_DOWN);   } } "
"@Override public long limit(){   return fileLength >>> 2; } "
"public static NumericEntityEscaper above(final int codepoint){   return outsideOf(0,codepoint); } "
"private void init(View rootView){   mRecyclerView=(RecyclerView)rootView.findViewById(R.id.recycler_view);   speakersRecyclerView=(RecyclerView)rootView.findViewById(R.id.speakers_recycler_view);   progressDialog=new ProgressDialog(getContext());   root=(CoordinatorLayout)rootView.findViewById(R.id.root);   connectAPI=new ConnectAPI(getContext());   groupList=new ArrayList<>();   user=DataHandler.getInstance(getContext()).getUser();   if (!MainActivity.ISGUEST) {     if (user == null) {       startActivity(new Intent(getActivity(),AuthenticationActivity.class));       getActivity().finish();     }   } } "
"private Item newString(final String value){   key2.set(STR,value,null,null);   Item result=get(key2);   if (result == null) {     pool.put12(STR,newUTF8(value));     result=new Item(index++,key2);     put(result);   }   return result; } "
"public static boolean confirmPrompt(String prompt) throws IOException {   while (true) {     System.out.print(prompt + \" (Y or N) \");     StringBuilder responseBuilder=new StringBuilder();     while (true) {       int c=System.in.read();       if (c == -1 || c == '\\r' || c == '\\n') {         break;       }       responseBuilder.append((char)c);     }     String response=responseBuilder.toString();     if (response.equalsIgnoreCase(\"y\") || response.equalsIgnoreCase(\"yes\")) {       return true;     }  else     if (response.equalsIgnoreCase(\"n\") || response.equalsIgnoreCase(\"no\")) {       return false;     }     System.out.println(\"Invalid input: \" + response);   } } "
"public boolean isZero(){   return dataElement != null && dataElement.getValueType().isNumeric() && value != null && ZERO_PATTERN.matcher(value).find(); } "
"@DELETE @Path(\"{experimentID}\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Delete an experiment\",notes=\"Can only delete an experiment that is in DRAFT or TERMINATED state.  The default call is \" + \"safe to use, but other than that please only delete experiments which you have created.\") @Timed public Response deleteExperiment(@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){   Username userName=authorization.getUser(authorizationHeader);   Experiment experiment=experiments.getExperiment(experimentID);   if (experiment == null) {     throw new ExperimentNotFoundException(experimentID);   }   authorization.checkUserPermissions(userName,experiment.getApplicationName(),Permission.DELETE);   Experiment updatedExperiment=from(experiment).withState(DELETED).build();   experiment=experiments.updateExperiment(experimentID,updatedExperiment,authorization.getUserInfo(userName));   assert experiment != null : \"Error deleting experiment\";   return httpHeader.headers(NO_CONTENT).build(); } "
"public BaseFlag<T> withListener(Consumer<T> predicate){   listeners.add(predicate);   return this; } "
"public void multiply(final double[] lhs,final int lhsOffset,final double[] rhs,final int rhsOffset,final double[] result,final int resultOffset){   for (int i=0; i < multIndirection.length; ++i) {     final int[][] mappingI=multIndirection[i];     double r=0;     for (int j=0; j < mappingI.length; ++j) {       r+=mappingI[j][0] * lhs[lhsOffset + mappingI[j][1]] * rhs[rhsOffset + mappingI[j][2]];     }     result[resultOffset + i]=r;   } } "
"public boolean node_elim_opt(){   return soot.PhaseOptions.getBoolean(options,\"node-elim-opt\"); } "
"private LDocumentListener(){ } "
"@Override public void write(byte[] b,int off,int len){   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {     throw new IndexOutOfBoundsException();   }  else   if (len == 0) {     return;   } synchronized (this) {     int newcount=count + len;     int remaining=len;     int inBufferPos=count - filledBufferSum;     while (remaining > 0) {       int part=Math.min(remaining,currentBuffer.length - inBufferPos);       System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);       remaining-=part;       if (remaining > 0) {         needNewBuffer(newcount);         inBufferPos=0;       }     }     count=newcount;   } } "
"public static long calculateDuration(int dayCount){   if (dayCount == 0) {     return Integer.MAX_VALUE;   }   Calendar cal=Calendar.getInstance();   cal.add(Calendar.DATE,+dayCount);   return ((cal.getTimeInMillis() - System.currentTimeMillis()) / 1000); } "
"public BytecodeOffsetTag(int offset){   this.offset=offset; } "
"public static void backup(String filename){   File f=new File(filename);   f.getParentFile().mkdirs();   Connection c=null;   ResultSet r1=null;   try {     ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(f));     zip.putNextEntry(new ZipEntry(\"db\"));     PrintStream out=new PrintStream(zip);     c=getConnection();     DatabaseMetaData m1=c.getMetaData();     r1=m1.getTables(null,null,null,new String[]{\"TABLE\"});     while (r1.next()) {       _backup(out,c,r1.getString(\"TABLE_NAME\"));     }     zip.closeEntry();     zip.close();   }  catch (  Exception e) {     log.error(e.getMessage(),e);   }  finally {     close(r1,c);   } } "
"public CatchResult catchPokemon() throws LoginFailedException, RemoteServerException, NoSuchItemException {   return catchPokemon(new CatchOptions(api)); } "
"public static void stop(Thread thread){   if (thread != null) {     thread.interrupt();   } } "
"@Deprecated public Builder enablePermissive(){   return this; } "
"protected GroupsGetQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public void clear(){   IntIterator rows=rows(true);   while (rows.hasNext()) {     removeRow(rows.nextInt());   } } "
"public static String toXml(Object obj){   return xstream.toXML(obj); } "
"public static Bitmap takeScreenshotBitmap(Activity activity){   if (activity == null) {     throw new IllegalArgumentException(\"Parameter activity cannot be null.\");   }   try {     return takeBitmapUnchecked(activity);   }  catch (  Exception e) {     String message=\"Unable to take screenshot to bitmap of activity \" + activity.getClass().getName();     Log.e(TAG,message,e);     throw new UnableToTakeScreenshotException(message,e);   } } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public ConstructorDecl fullCopy(){   ConstructorDecl tree=(ConstructorDecl)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public DocumentNGramHistogram(int iMinSize,int iMaxSize){   MinSize=iMinSize;   MaxSize=iMaxSize;   DataString=\"\";   NGramHistogram=new HashMap(); } "
"public static void toXml(Object obj,OutputStream output){   xstream.toXML(obj,output); } "
"@Override public void propagate(GeomPointsTo ptAnalyzer,IWorklist worklist){   int i, j;   AllocNode obj;   SegmentNode pts, pe, entry_pts[], entry_pe[];   GeometricManager gm1, gm2;   FullSensitiveNode qn, objn;   boolean added, hasNewPointsTo;   if (pt_objs.size() == 0)   return;   if (complex_cons != null) {     for (    Map.Entry<AllocNode,GeometricManager> entry : new_pts.entrySet()) {       obj=entry.getKey();       entry_pts=entry.getValue().getFigures();       for (      PlainConstraint pcons : complex_cons) {         objn=(FullSensitiveNode)ptAnalyzer.findInstanceField(obj,pcons.f);         if (objn == null) {           pt_objs.put(obj,(GeometricManager)deadManager);           entry.setValue((GeometricManager)deadManager);           break;         }         if (objn.willUpdate == false) {           continue;         }         qn=(FullSensitiveNode)pcons.otherSide;         for (i=0; i < GeometricManager.Divisions; ++i) {           pts=entry_pts[i];           while (pts != null && pts.is_new == true) { switch (pcons.type) { case Constants.STORE_CONS:               if (instantiateStoreConstraint(qn,objn,pts,(pcons.code << 8) | i))               worklist.push(qn);             break; case Constants.LOAD_CONS:           if (instantiateLoadConstraint(objn,qn,pts,(pcons.code << 8) | i))           worklist.push(objn);         break;     }     pts=pts.next;   } } } } } if (flowto.size() == 0) return; for (Map.Entry<FullSensitiveNode,GeometricManager> entry1 : flowto.entrySet()) { added=false; qn=entry1.getKey(); gm1=entry1.getValue(); entry_pe=gm1.getFigures(); if (gm1.isThereUnprocessedFigures()) { for (Map.Entry<AllocNode,GeometricManager> entry2 : pt_objs.entrySet()) { obj=entry2.getKey(); gm2=entry2.getValue(); if (gm2 == deadManager) continue; if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getType())) continue; entry_pts=gm2.getFigures(); hasNewPointsTo=gm2.isThereUnprocessedFigures(); for (j=0; j < GeometricManager.Divisions; ++j) {   pe=entry_pe[j];   while (pe != null) {     if (pe.is_new == false && hasNewPointsTo == false)     break;     for (i=0; i < GeometricManager.Divisions; ++i) {       pts=entry_pts[i];       while (pts != null && (pts.is_new || pe.is_new)) {         if (reasonAndPropagate(qn,obj,pts,pe,(i << 8) | j))         added=true;         pts=pts.next;       }     }     pe=pe.next;   } } } gm1.flush(); }  else { for (Map.Entry<AllocNode,GeometricManager> entry2 : new_pts.entrySet()) { obj=entry2.getKey(); gm2=entry2.getValue(); if (gm2 == deadManager) continue; if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getType())) continue; entry_pts=gm2.getFigures(); for (i=0; i < GeometricManager.Divisions; ++i) {   pts=entry_pts[i];   while (pts != null && pts.is_new == true) {     for (j=0; j < GeometricManager.Divisions; ++j) {       pe=entry_pe[j];       while (pe != null) {         if (reasonAndPropagate(qn,obj,pts,pe,(i << 8) | j))         added=true;         pe=pe.next;       }     }     pts=pts.next;   } } } } if (added) worklist.push(qn); } } "
"@Override public void onCreate(Bundle icicle){   super.onCreate(icicle);   setContentView(R.layout.slice_fileselect);   listView=(ListView)findViewById(R.id.listView);   boolean bBrowseToRoot=true;   Bundle extras=getIntent().getExtras();   if (extras != null) {     msPathSelectedFile=extras.getString(PATH_FILE_IN_ID);     if (!msPathSelectedFile.equals(\"\")) {       File CurrentFile=new File(msPathSelectedFile);       if (CurrentFile != null && CurrentFile.exists()) {         if (CurrentFile.getParent() != null) {           this.browseTo(CurrentFile.getParentFile());           bBrowseToRoot=false;         }       }     }   }   if (bBrowseToRoot == true)   browseToRoot();   listView.setSelection(0);   listView.setOnItemClickListener(this); } "
"public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {   OutputStream out=null;   try {     out=openOutputStream(file,append);     IOUtils.write(data,out,encoding);     out.close();   }   finally {     IOUtils.closeQuietly(out);   } } "
"public static PolygonSymbolizer createDefaultPolygonSymbolizer(){   Stroke stroke=styleFactory.createStroke(ff.literal(DEFAULT_LINE_COLOUR),ff.literal(2));   Fill fill=styleFactory.getDefaultFill();   PolygonSymbolizer polygonSymbolizer=styleFactory.createPolygonSymbolizer();   polygonSymbolizer.setStroke(stroke);   polygonSymbolizer.setFill(fill);   return polygonSymbolizer; } "
"public void exception(Throwable t){   fail();   addLogEntry(new ExceptionEntry(t));   addLogEntry(browserLogEntryCollector.getBrowserLogEntries()); } "
"@Override public void onCardboardTrigger(){   Log.i(TAG,\"onCardboardTrigger\");   vibrator.vibrate(50); } "
"private static void generateGraph(IDataProcessStatus dataProcessTaskStatus,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {   DataLoadModel model=new DataLoadModel();   model.setCsvLoad(null != dataProcessTaskStatus.getCsvFilePath() || null != dataProcessTaskStatus.getFilesToProcess());   model.setSchemaInfo(info);   model.setTableName(dataProcessTaskStatus.getTableName());   model.setTaskNo(\"1\");   model.setBlocksID(dataProcessTaskStatus.getBlocksID());   model.setFactTimeStamp(readCurrentTime());   model.setEscapeCharacter(dataProcessTaskStatus.getEscapeCharacter());   model.setQuoteCharacter(dataProcessTaskStatus.getQuoteCharacter());   model.setCommentCharacter(dataProcessTaskStatus.getCommentCharacter());   if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {     model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));     model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));   }   boolean hdfsReadMode=dataProcessTaskStatus.getCsvFilePath() != null && dataProcessTaskStatus.getCsvFilePath().startsWith(\"hdfs:\");   int allocate=null != dataProcessTaskStatus.getCsvFilePath() ? 1 : dataProcessTaskStatus.getFilesToProcess().size();   String outputLocation=CarbonProperties.getInstance().getProperty(\"store_output_location\",\"../carbon-store/system/carbon/etl\");   GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,allocate,schema,\"0\",outputLocation);   generator.generateGraph(); } "
"private static SyntaxStyles createInstance(){   SyntaxStyles syntaxstyles=new SyntaxStyles();   Properties styles=JarServiceProvider.readProperties(SyntaxStyles.class);   syntaxstyles.mergeStyles(styles);   return syntaxstyles; } "
"public static boolean isCarbonIndexFile(String fileNameWithPath){   int pos=fileNameWithPath.lastIndexOf('.');   if (pos != -1) {     return fileNameWithPath.substring(pos).startsWith(INDEX_FILE_EXT);   }   return false; } "
"public AlreadySpawnedException(String s){   super(s); } "
"protected boolean filterHeader(int index){   if (this.headerName == null)   return true;   final String name=((Header)this.allHeaders.get(index)).getName();   return this.headerName.equalsIgnoreCase(name); } "
"public T call(long startTimeout,TimeUnit startTimeoutUnit) throws Exception {   final CountDownLatch taskStarted=new CountDownLatch(1);   final AtomicBoolean taskCancelled=new AtomicBoolean(false);   final JDialog modalBlocker=new JDialog();   modalBlocker.setModal(true);   modalBlocker.setUndecorated(true);   modalBlocker.setOpacity(0.0f);   modalBlocker.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);   final CountDownLatch modalityLatch=new CountDownLatch(1);   final FutureTask<T> task=new FutureTask<>(null);   Platform.runLater(task);   if (!taskStarted.await(startTimeout,startTimeoutUnit)) { synchronized (taskStarted) {       if (!taskStarted.await(0,TimeUnit.MILLISECONDS)) {         taskCancelled.set(true);         throw new IllegalStateException(\"JavaFX was shut down\" + \" or is unresponsive\");       }     }   }   SwingUtilities.invokeLater(null);   modalBlocker.setVisible(true);   modalBlocker.dispose();   try {     return task.get();   }  catch (  ExecutionException ex) {     Throwable ec=ex.getCause();     if (ec instanceof Exception) {       throw (Exception)ec;     }  else     if (ec instanceof Error) {       throw (Error)ec;     }  else {       throw new AssertionError(\"Unexpected exception type\",ec);     }   } } "
"public InstanceFieldRef newInstanceFieldRef(Value base,SootFieldRef f){   return new GInstanceFieldRef(base,f); } "
"@Deprecated public static byte matchColor(int r,int g,int b){   return matchColor(new Color(r,g,b)); } "
"private synchronized void writeObject(ObjectOutputStream s) throws IOException {   s.defaultWriteObject(); } "
"public boolean isCritical(){   return true; } "
"public final void writeLong(final long l){   baos.write((byte)(l & 0xFF));   baos.write((byte)((l >>> 8) & 0xFF));   baos.write((byte)((l >>> 16) & 0xFF));   baos.write((byte)((l >>> 24) & 0xFF));   baos.write((byte)((l >>> 32) & 0xFF));   baos.write((byte)((l >>> 40) & 0xFF));   baos.write((byte)((l >>> 48) & 0xFF));   baos.write((byte)((l >>> 56) & 0xFF)); } "
"public void init$Children(){   children=new ASTNode[4];   setChild(new Opt(),1);   setChild(new List(),2);   setChild(new List(),3); } "
"private boolean hasPrefix(byte[] nal){   if (nal[0] == 0 && nal[1] == 0 && nal[2] == 0 && nal[3] == 0x01)   return true;  else   return false; } "
"private boolean hasProxySettings(Properties settings){   String proxyHost=settings.getProperty(\"/system/http_proxy/host\",null);   return proxyHost != null && proxyHost.length() > 0; } "
"public String scanNmtoken() throws IOException {   if (DEBUG_BUFFER) {     System.out.print(\"(scanNmtoken: \");     XMLEntityManager.print(fCurrentEntity);     System.out.println();   }   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }   int offset=fCurrentEntity.position;   while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {     if (++fCurrentEntity.position == fCurrentEntity.count) {       int length=fCurrentEntity.position - offset;       if (length == fCurrentEntity.ch.length) {         char[] tmp=new char[fCurrentEntity.ch.length << 1];         System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);         fCurrentEntity.ch=tmp;       }  else {         System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);       }       offset=0;       if (load(length,false)) {         break;       }     }   }   int length=fCurrentEntity.position - offset;   fCurrentEntity.columnNumber+=length;   String symbol=null;   if (length > 0) {     symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);   }   if (DEBUG_BUFFER) {     System.out.print(\")scanNmtoken: \");     XMLEntityManager.print(fCurrentEntity);     System.out.println(\" -> \" + String.valueOf(symbol));   }   return symbol; } "
"@Override public void removeRaster(Symbolizer symbolizer){ } "
"private boolean allowUploadCrashDump(){   if (isCellularExperimentEnabled())   return isUsageAndCrashReportingEnabled();   if (isMobileNetworkCapable()) {     String option=mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload);     return option.equals(mCrashDumpAlwaysUpload) || (option.equals(mCrashDumpWifiOnlyUpload) && isWiFiOrEthernetNetwork());   }   return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false); } "
"@Override public int read(byte[] b,int off,int len) throws IOException {   int sampleSizeInBytes=frameSize / inputChannels;   int outputFrameSize=sampleSizeInBytes * 2;   int nFrames=len / outputFrameSize;   byte[] inputBytes=new byte[nFrames * frameSize];   int nInputBytes=super.read(inputBytes,0,inputBytes.length);   if (nInputBytes <= 0)   return nInputBytes;   if (inputChannels == 1) {     if (outputMode == AudioPlayer.STEREO) {       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         for (int k=0; k < sampleSizeInBytes; k++) {           b[j + k]=b[j + sampleSizeInBytes + k]=inputBytes[i + k];         }       }     }  else     if (outputMode == AudioPlayer.LEFT_ONLY) {       if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {         throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());       }       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         for (int k=0; k < sampleSizeInBytes; k++) {           b[j + k]=inputBytes[i + k];           b[j + sampleSizeInBytes + k]=0;         }       }     }  else {       assert outputMode == AudioPlayer.RIGHT_ONLY : \"Unexpected output mode: \" + outputMode;       if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {         throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());       }       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         for (int k=0; k < sampleSizeInBytes; k++) {           b[j + k]=0;           b[j + sampleSizeInBytes + k]=inputBytes[i + k];         }       }     }   }  else {     if (outputMode == AudioPlayer.STEREO) {       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         System.arraycopy(inputBytes,i,b,j,outputFrameSize);       }     }  else     if (outputMode == AudioPlayer.LEFT_ONLY) {       if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {         throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());       }       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         for (int k=0; k < sampleSizeInBytes; k++) {           b[j + k]=inputBytes[i + k];           b[j + sampleSizeInBytes + k]=0;         }       }     }  else {       assert outputMode == AudioPlayer.RIGHT_ONLY : \"Unexpected output mode: \" + outputMode;       if (!getFormat().getEncoding().equals(Encoding.PCM_SIGNED)) {         throw new IllegalArgumentException(\"Channel muting supported only for PCM_SIGNED encoding, got \" + getFormat().getEncoding());       }       for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {         for (int k=0; k < sampleSizeInBytes; k++) {           b[j + k]=0;           b[j + sampleSizeInBytes + k]=inputBytes[i + sampleSizeInBytes + k];         }       }     }   }   return 2 * nInputBytes / inputChannels; } "
"public static RecvPackageInfo recvPackage(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {   RecvHeaderInfo header=recvHeader(in,expect_cmd,expect_body_len);   if (header.errno != 0) {     return new RecvPackageInfo(header.errno,null);   }   byte[] body=new byte[(int)header.body_len];   int totalBytes=0;   int remainBytes=(int)header.body_len;   int bytes;   while (totalBytes < header.body_len) {     if ((bytes=in.read(body,totalBytes,remainBytes)) < 0) {       break;     }     totalBytes+=bytes;     remainBytes-=bytes;   }   if (totalBytes != header.body_len) {     throw new IOException(\"recv package size \" + totalBytes + \" != \"+ header.body_len);   }   return new RecvPackageInfo((byte)0,body); } "
"private static Writer initWriter(File file,Object encoding,boolean append) throws IOException {   if (file == null) {     throw new NullPointerException(\"File is missing\");   }   if (encoding == null) {     throw new NullPointerException(\"Encoding is missing\");   }   boolean fileExistedAlready=file.exists();   OutputStream stream=null;   Writer writer=null;   try {     stream=new FileOutputStream(file,append);     if (encoding instanceof Charset) {       writer=new OutputStreamWriter(stream,(Charset)encoding);     }  else     if (encoding instanceof CharsetEncoder) {       writer=new OutputStreamWriter(stream,(CharsetEncoder)encoding);     }  else {       writer=new OutputStreamWriter(stream,(String)encoding);     }   }  catch (  IOException ex) {     IOUtils.closeQuietly(writer);     IOUtils.closeQuietly(stream);     if (fileExistedAlready == false) {       FileUtils.deleteQuietly(file);     }     throw ex;   } catch (  RuntimeException ex) {     IOUtils.closeQuietly(writer);     IOUtils.closeQuietly(stream);     if (fileExistedAlready == false) {       FileUtils.deleteQuietly(file);     }     throw ex;   }   return writer; } "
"public static SM_SYSTEM_MESSAGE STR_DUEL_REQUESTED(String value0){   return new SM_SYSTEM_MESSAGE(1301065,value0); } "
"public void addServiceItems(ServiceMatches matches){   if (matches == null || matches.items == null) {     return;   }   for (  ServiceItem item : matches.items) {     serviceItems.put(item.serviceID,item);   } } "
"public void removeClickingListener(OnWheelClickedListener listener){   clickingListeners.remove(listener); } "
"@Override public Filter createFilter(){   return new ContainsExtended(); } "
"public VideoGetQueryWithExtended count(Integer value){   return unsafeParam(\"count\",value); } "
"public SootClass makeClassRef(String className){   if (Scene.v().containsClass(className))   return Scene.v().getSootClass(className);   SootClass newClass;   newClass=new SootClass(className);   newClass.setResolvingLevel(SootClass.DANGLING);   Scene.v().addClass(newClass);   return newClass; } "
"private void processBuildFileReferences(SearchParameters params,BuildFile file){   WorkspacePath workspacePath=file.getPackageWorkspacePath();   if (workspacePath == null) {     return;   }   List<String> stringsToSearch=Lists.newArrayList();   if (file.getBlazeFileType() == BlazeFileType.BuildPackage) {     stringsToSearch.add(\"//\" + workspacePath);   }  else {     stringsToSearch.add(\"//\" + workspacePath + \":\"+ file.getName());     stringsToSearch.add(\"//\" + workspacePath + \"/\"+ file.getName());   }   for (  String string : stringsToSearch) {     searchForString(params,file,string);   } } "
"public static void traverseResolverTreeAndGetStartAndEndKey(SegmentProperties segmentProperties,AbsoluteTableIdentifier tableIdentifier,FilterResolverIntf filterResolver,List<IndexKey> listOfStartEndKeys) throws QueryExecutionException {   IndexKey searchStartKey=null;   IndexKey searchEndKey=null;   long[] startKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];   long[] endKey=new long[segmentProperties.getDimensionKeyGenerator().getDimCount()];   List<byte[]> listOfStartKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());   List<byte[]> listOfEndKeyByteArray=new ArrayList<byte[]>(segmentProperties.getNumberOfNoDictionaryDimension());   SortedMap<Integer,byte[]> setOfStartKeyByteArray=new TreeMap<Integer,byte[]>();   SortedMap<Integer,byte[]> setOfEndKeyByteArray=new TreeMap<Integer,byte[]>();   SortedMap<Integer,byte[]> defaultStartValues=new TreeMap<Integer,byte[]>();   SortedMap<Integer,byte[]> defaultEndValues=new TreeMap<Integer,byte[]>();   List<long[]> startKeyList=new ArrayList<long[]>();   List<long[]> endKeyList=new ArrayList<long[]>();   traverseResolverTreeAndPopulateStartAndEndKeys(filterResolver,tableIdentifier,segmentProperties,startKey,setOfStartKeyByteArray,endKey,setOfEndKeyByteArray,startKeyList,endKeyList);   if (endKeyList.size() > 0) {     for (int i=0; i < endKey.length; i++) {       long[] endkeyColumnLevel=new long[endKeyList.size()];       int j=0;       for (      long[] oneEndKey : endKeyList) {         endkeyColumnLevel[j++]=oneEndKey[i];       }       Arrays.sort(endkeyColumnLevel);       endKey[i]=endkeyColumnLevel[endkeyColumnLevel.length - 1];     }   }   if (startKeyList.size() > 0) {     for (int i=0; i < startKey.length; i++) {       long[] startkeyColumnLevel=new long[startKeyList.size()];       int j=0;       for (      long[] oneStartKey : startKeyList) {         startkeyColumnLevel[j++]=oneStartKey[i];       }       Arrays.sort(startkeyColumnLevel);       startKey[i]=startkeyColumnLevel[0] - 1;     }   }   fillDefaultStartValue(defaultStartValues,segmentProperties);   fillDefaultEndValue(defaultEndValues,segmentProperties);   fillNullValuesStartIndexWithDefaultKeys(setOfStartKeyByteArray,segmentProperties);   fillNullValuesEndIndexWithDefaultKeys(setOfEndKeyByteArray,segmentProperties);   pruneStartAndEndKeys(setOfStartKeyByteArray,listOfStartKeyByteArray);   pruneStartAndEndKeys(setOfEndKeyByteArray,listOfEndKeyByteArray);   searchStartKey=FilterUtil.createIndexKeyFromResolvedFilterVal(startKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfStartKeyByteArray));   searchEndKey=FilterUtil.createIndexKeyFromResolvedFilterVal(endKey,segmentProperties.getDimensionKeyGenerator(),FilterUtil.getKeyWithIndexesAndValues(listOfEndKeyByteArray));   listOfStartEndKeys.add(searchStartKey);   listOfStartEndKeys.add(searchEndKey); } "
"public static ArrayList<SelectableIcon> convertResourceArraysToIconsArrayList(Context context,boolean sortByName,@ArrayRes int idsArray,@ArrayRes int namesArray,@ArrayRes int drawablesArray){   String[] ids=context.getResources().getStringArray(idsArray);   int[] drawables=context.getResources().getIntArray(drawablesArray);   String[] names=context.getResources().getStringArray(namesArray);   if (ids.length != drawables.length && ids.length != names.length) {     Log.e(LOG_TAG,\"convertResourceArraysToIconsArrayList(): Arrays must have equals lengths!\");     return null;   }   ArrayList<SelectableIcon> result=new ArrayList<>();   for (int i=0; i < ids.length; i++) {     result.add(new SelectableIcon(ids[i],names[i],drawables[i]));   }   if (sortByName) {     Collections.sort(result,new SelectableItemNameComparator<SelectableIcon>());   }   return result; } "
"private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){   float ratio=newSide / (2 * oldSide);   float dx=cornerPoints[0].getX() - cornerPoints[2].getX();   float dy=cornerPoints[0].getY() - cornerPoints[2].getY();   float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;   float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;   ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);   ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);   dx=cornerPoints[1].getX() - cornerPoints[3].getX();   dy=cornerPoints[1].getY() - cornerPoints[3].getY();   centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;   centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;   ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);   ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);   return new ResultPoint[]{result0,result1,result2,result3}; } "
"public boolean total_context_counts(){   return soot.PhaseOptions.getBoolean(options,\"total-context-counts\"); } "
"@Nullable public BufferedImage renderDragImage(@NotNull Palette.Item item,@NotNull ScreenView screenView){   XmlElementFactory elementFactory=XmlElementFactory.getInstance(screenView.getModel().getProject());   String xml=item.getDragPreviewXml();   if (xml.equals(NO_PREVIEW)) {     return null;   }   XmlTag tag;   try {     tag=elementFactory.createTagFromText(xml);   }  catch (  IncorrectOperationException exception) {     return null;   }   NlModel model=screenView.getModel();   NlComponent component=ApplicationManager.getApplication().runWriteAction((Computable<NlComponent>)null);   if (component == null) {     return null;   }   xml=String.format(LINEAR_LAYOUT,CONTAINER_ID,component.getTag().getText());   RenderResult result=renderImage(xml,model.getConfiguration());   if (result == null) {     return null;   }   BufferedImage image=result.getRenderedImage();   if (image == null) {     return null;   }   List<ViewInfo> infos=result.getRootViews();   if (infos == null || infos.isEmpty()) {     return null;   }   infos=infos.get(0).getChildren();   if (infos == null || infos.isEmpty()) {     return null;   }   ViewInfo view=infos.get(0);   if (image.getHeight() < view.getBottom() || image.getWidth() < view.getRight() || view.getBottom() <= view.getTop() || view.getRight() <= view.getLeft()) {     return null;   }   @AndroidCoordinate int shadowWitdh=SHADOW_SIZE * screenView.getConfiguration().getDensity().getDpiValue() / Density.DEFAULT_DENSITY;   @SwingCoordinate int shadowIncrement=1 + Coordinates.getSwingDimension(screenView,shadowWitdh);   return image.getSubimage(view.getLeft(),view.getTop(),Math.min(view.getRight() + shadowIncrement,image.getWidth()),Math.min(view.getBottom() + shadowIncrement,image.getHeight())); } "
"private static void removeUnusedWeakReferences(){   Iterator<Entry<String,WeakReference<TraceableLogger>>> iterator=traceableLoggers.entrySet().iterator();   while (iterator.hasNext()) {     if (iterator.next().getValue().get() == null)     iterator.remove();   } } "
"public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){   iMinCharNGram=iMinChar;   iMaxCharNGram=iMaxChar;   iMinWordNGram=iMinWord;   iMaxWordNGram=iMaxWord;   iWordDist=iWordWindow;   iCharDist=iCharWindow;   DistroDocs=new TreeMap<Integer,DistributionDocument>();   DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();   StringBuffer sb=new StringBuffer();   Iterator iTexts=FileNames.iterator();   while (iTexts.hasNext()) {     String sFile=(String)iTexts.next();     try {       BufferedReader bf=new BufferedReader(new FileReader(sFile));       String sTmp;       while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);       bf.close();     }  catch (    FileNotFoundException ex) {       ex.printStackTrace(System.err);     } catch (    IOException ex) {       ex.printStackTrace(System.err);     }     sb.append((char)0);   }   FullTextDataString=sb.toString();   for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {     DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));   }   for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {     DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));   } } "
"public static boolean isInitialized(Context ctx){   vitamioPackage=ctx.getPackageName();   vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";   return true; } "
"@Override public void dataChanged(FieldIdEnum changedField){   updateSymbol(); } "
"private void drawItems(Canvas canvas){   canvas.save();   int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;   canvas.translate(PADDING,-top + scrollingOffset);   itemsLayout.draw(canvas);   canvas.restore(); } "
"public FileAlterationObserver(File directory,FileFilter fileFilter){   this(directory,fileFilter,(IOCase)null); } "
"private org.apache.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){   if (null == dataType) {     return null;   } switch (dataType) { case STRING:     return org.apache.carbondata.format.DataType.STRING; case INT:   return org.apache.carbondata.format.DataType.INT; case SHORT: return org.apache.carbondata.format.DataType.SHORT; case LONG: return org.apache.carbondata.format.DataType.LONG; case DOUBLE: return org.apache.carbondata.format.DataType.DOUBLE; case DECIMAL: return org.apache.carbondata.format.DataType.DECIMAL; case TIMESTAMP: return org.apache.carbondata.format.DataType.TIMESTAMP; case ARRAY: return org.apache.carbondata.format.DataType.ARRAY; case STRUCT: return org.apache.carbondata.format.DataType.STRUCT; default : return org.apache.carbondata.format.DataType.STRING; } } "
"public AccountGetActiveOffersQuery(VkApiClient client,UserActor actor){   super(client,\"account.getActiveOffers\",GetActiveOffersResponse.class);   accessToken(actor.getAccessToken()); } "
"public RenderOptionsPanel(RenderSymbolInterface renderSymbol,List<RenderSymbolInterface> rendererList){   this.renderSymbol=renderSymbol;   this.rendererList=rendererList;   DataSourceInterface dataSource=DataSourceFactory.getDataSource();   dataSource.addListener(this);   createUI();   populate();   updateButtonState(GeometryTypeEnum.UNKNOWN); } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public Serializable parseIdString(String id){   TypeParser parser=new TypeParser();   Class idType=getIdField().getType();   return parser.parse(id,idType); } "
"public LegendTool(){   super();   createUI(); } "
"private static String doNormalize(String filename,char separator,boolean keepSeparator){   if (filename == null) {     return null;   }   int size=filename.length();   if (size == 0) {     return filename;   }   int prefix=getPrefixLength(filename);   if (prefix < 0) {     return null;   }   char[] array=new char[size + 2];   filename.getChars(0,filename.length(),array,0);   char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;   for (int i=0; i < array.length; i++) {     if (array[i] == otherSeparator) {       array[i]=separator;     }   }   boolean lastIsDirectory=true;   if (array[size - 1] != separator) {     array[size++]=separator;     lastIsDirectory=false;   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == separator) {       System.arraycopy(array,i,array,i - 1,size - i);       size--;       i--;     }   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {       if (i == size - 1) {         lastIsDirectory=true;       }       System.arraycopy(array,i + 1,array,i - 1,size - i);       size-=2;       i--;     }   }   outer:   for (int i=prefix + 2; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {       if (i == prefix + 2) {         return null;       }       if (i == size - 1) {         lastIsDirectory=true;       }       int j;       for (j=i - 4; j >= prefix; j--) {         if (array[j] == separator) {           System.arraycopy(array,i + 1,array,j + 1,size - i);           size-=i - j;           i=j + 1;           continue outer;         }       }       System.arraycopy(array,i + 1,array,prefix,size - i);       size-=i + 1 - prefix;       i=prefix + 1;     }   }   if (size <= 0) {     return \"\";   }   if (size <= prefix) {     return new String(array,0,size);   }   if (lastIsDirectory && keepSeparator) {     return new String(array,0,size);   }   return new String(array,0,size - 1); } "
"public FriendsAddListQuery userIds(List<Integer> value){   return unsafeParam(\"user_ids\",value); } "
"public IEntryPacket aggregate(IQueryResultSet<IEntryPacket> entries) throws SQLException {   Iterator iter=query.getQueryColumns().iterator();   ArrayList<String> vecFieldNames=new ArrayList<String>();   ArrayList<Object> vecFieldValues=new ArrayList<Object>();   while (iter.hasNext()) {     SelectColumn funcColumn=(SelectColumn)iter.next();     if (!funcColumn.isVisible())     continue;     vecFieldNames.add(funcColumn.toString());     if (funcColumn.getFunctionName() == null) {       IEntryPacket first=entries.iterator().next();       Object value=entries.getFieldValue(funcColumn,first);       vecFieldValues.add(value);     }  else     if (funcColumn.getFunctionName().equals(SqlConstants.MAX)) {       Object maxMin=minMax(funcColumn,entries,true);       vecFieldValues.add(maxMin);     }  else     if (funcColumn.getFunctionName().equals(SqlConstants.MIN)) {       Object maxMin=minMax(funcColumn,entries,false);       vecFieldValues.add(maxMin);     }  else     if (funcColumn.getFunctionName().equals(SqlConstants.COUNT)) {       vecFieldValues.add(entries.size());     }  else     if (funcColumn.getFunctionName().equals(SqlConstants.SUM)) {       Object sum=sum(funcColumn,entries);       vecFieldValues.add(sum);     }  else     if (funcColumn.getFunctionName().equals(SqlConstants.AVG)) {       Number avg=avg(funcColumn,entries);       vecFieldValues.add(avg);     }   }   return new QueryEntryPacket(vecFieldNames.toArray(new String[vecFieldNames.size()]),vecFieldValues.toArray(new Object[vecFieldValues.size()])); } "
"public static GenericEntity createGenericEntity(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){   if (modelEntity == null) {     throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null modelEntity parameter\");   }   GenericEntity newEntity=new GenericEntity();   newEntity.init(delegator,modelEntity,fields);   return newEntity; } "
"public AdsUpdateAdsQuery updateAds(UserActor actor,int accountId,String data){   return new AdsUpdateAdsQuery(getClient(),actor,accountId,data); } "
"public Vector2f(float x,float y){   this.x=x;   this.y=y; } "
"public static int loadCubeMap(Context context,int[] cubeResources){   final int[] textureObjectIds=new int[1];   glGenTextures(1,textureObjectIds,0);   if (textureObjectIds[0] == 0) {     if (LoggerConfig.ON) {       Log.w(TAG,\"Could not generate a new OpenGL texture object.\");     }     return 0;   }   final BitmapFactory.Options options=new BitmapFactory.Options();   options.inScaled=false;   final Bitmap[] cubeBitmaps=new Bitmap[6];   for (int i=0; i < 6; i++) {     cubeBitmaps[i]=BitmapFactory.decodeResource(context.getResources(),cubeResources[i],options);     if (cubeBitmaps[i] == null) {       if (LoggerConfig.ON) {         Log.w(TAG,\"Resource ID \" + cubeResources[i] + \" could not be decoded.\");       }       glDeleteTextures(1,textureObjectIds,0);       return 0;     }   }   glBindTexture(GL_TEXTURE_CUBE_MAP,textureObjectIds[0]);   glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);   glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);   texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,cubeBitmaps[0],0);   texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,cubeBitmaps[1],0);   texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,cubeBitmaps[2],0);   texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,cubeBitmaps[3],0);   texImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,cubeBitmaps[4],0);   texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,cubeBitmaps[5],0);   glBindTexture(GL_TEXTURE_2D,0);   for (  Bitmap bitmap : cubeBitmaps) {     bitmap.recycle();   }   return textureObjectIds[0]; } "
"public int hashCode(){   return bytes.hashCode(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_A_to_B(String skilltarget,int num0,String skillcaster){   return new SM_SYSTEM_MESSAGE(1201169,skilltarget,num0,skillcaster); } "
"public byte[] unCompress(byte[] compInput){   try {     return Snappy.uncompress(compInput);   }  catch (  IOException e) {     LOGGER.error(e,e.getMessage());   }   return compInput; } "
"public Latin1Reader(InputStream inputStream,int size){   this(inputStream,new byte[size]); } "
"public float[] unCompress(byte[] compInput){   try {     return Snappy.uncompressFloatArray(compInput);   }  catch (  IOException e) {     LOGGER.error(e,e.getMessage());   }   return null; } "
"public ShapelessRecipe addIngredient(int count,MaterialData ingredient){   return addIngredient(count,ingredient.getItemType(),ingredient.getData()); } "
"private boolean isPathRestricted(HttpServletRequest oCntxt) throws ODataException {   boolean status;   String path=oCntxt.getRequestURI().toString();   if ((path.contains(\"/SalesOrderHeaders\") || path.contains(\"/Customers\") || path.contains(\"/SalesOrderItems\")) && (oCntxt.getMethod().equals(\"GET\") || oCntxt.getMethod().equals(\"DELETE\"))) {     status=true;   }  else   if (path.contains(\"/PurchaseOrderHeaders\") || path.contains(\"/PurchaseOrderItems\") || path.contains(\"/Suppliers\")|| path.contains(\"/Stocks\")) {     status=true;   }  else   if ((path.contains(\"/Products\") || path.contains(\"/ProductCategories\")) && (oCntxt.getMethod().equals(\"POST\") || oCntxt.getMethod().equals(\"PUT\") || oCntxt.getMethod().equals(\"DELETE\"))) {     status=true;   }  else   if ((path.contains(\"/ConfirmSalesOrder\") || path.contains(\"/CancelSalesOrder\"))) {     status=true;   }  else {     status=false;   }   return status; } "
"private boolean equals(SimpleRegression model1,SimpleRegression model2,double tol){   if (model1.getN() != model2.getN()) {     return false;   }   if (FastMath.abs(model1.getIntercept() - model2.getIntercept()) > tol) {     return false;   }   if (FastMath.abs(model1.getInterceptStdErr() - model2.getInterceptStdErr()) > tol) {     return false;   }   if (FastMath.abs(model1.getMeanSquareError() - model2.getMeanSquareError()) > tol) {     return false;   }   if (FastMath.abs(model1.getR() - model2.getR()) > tol) {     return false;   }   if (FastMath.abs(model1.getRegressionSumSquares() - model2.getRegressionSumSquares()) > tol) {     return false;   }   if (FastMath.abs(model1.getRSquare() - model2.getRSquare()) > tol) {     return false;   }   if (FastMath.abs(model1.getSignificance() - model2.getSignificance()) > tol) {     return false;   }   if (FastMath.abs(model1.getSlope() - model2.getSlope()) > tol) {     return false;   }   if (FastMath.abs(model1.getSlopeConfidenceInterval() - model2.getSlopeConfidenceInterval()) > tol) {     return false;   }   if (FastMath.abs(model1.getSlopeStdErr() - model2.getSlopeStdErr()) > tol) {     return false;   }   if (FastMath.abs(model1.getSumOfCrossProducts() - model2.getSumOfCrossProducts()) > tol) {     return false;   }   if (FastMath.abs(model1.getSumSquaredErrors() - model2.getSumSquaredErrors()) > tol) {     return false;   }   if (FastMath.abs(model1.getTotalSumSquares() - model2.getTotalSumSquares()) > tol) {     return false;   }   if (FastMath.abs(model1.getXSumSquares() - model2.getXSumSquares()) > tol) {     return false;   }   return true; } "
"public static String relativeTimeString(int days){   GregorianCalendar gregCal=new GregorianCalendar();   gregCal.add(Calendar.DAY_OF_YEAR,days);   return TestUtils.getTimeString(gregCal); } "
"public boolean isFullRank(){   for (int j=0; j < n; j++) {     if (Rdiag[j] == 0)     return false;   }   return true; } "
"public UsersGetNearbyQuery radius(UsersGetNearbyRadius value){   return unsafeParam(\"radius\",value); } "
"public EventBuilder maxPriority(){   this.event.setPriority(Thread.MAX_PRIORITY);   return this; } "
"static void initField(){   for (int y=0; y < field_size; y++) {     for (int x=0; x < field_size; x++) {       field[x][y]=dotEmpty;     }   } } "
"public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){   this(AccountManager.get(context),account,authTokenType,notifyAuthFailure); } "
"public BifocalDistortion(double range,double mag){   this(range,mag,range,mag); } "
"public static String createAccessorName(ClassMember member,boolean setter){   SootClass target=member.getDeclaringClass();   String name=\"access$\";   if (member instanceof SootField) {     SootField f=(SootField)member;     if (setter) {       name+=\"set$\";     }  else {       name+=\"get$\";     }     name+=f.getName();   }  else {     SootMethod m=(SootMethod)member;     name+=m.getName() + \"$\";     for (Iterator it=m.getParameterTypes().iterator(); it.hasNext(); ) {       Type type=(Type)it.next();       name+=type.toString().replaceAll(\"\\\\.\",\"\\\\$\\\\$\") + \"$\";     }   }   return name; } "
"private void check(){   if (descs.length == 0) {     throw new IllegalArgumentException(\"must have at least one descriptor\");   }   for (int i=0; i < descs.length; i++) {     MethodDesc desc=descs[i];     String dname=desc.name;     if (dname == null) {       if (i < descs.length - 1) {         throw new IllegalArgumentException(\"default descriptor must be last\");       }     }  else     if (dname.charAt(0) == '*') {       int dlen=dname.length() + 1;       for (int j=0; j < i; j++) {         MethodDesc prev=descs[j];         String pname=prev.name;         if (pname.charAt(0) == '*' && pname.regionMatches(1,dname,dlen - pname.length(),pname.length() - 1)) {           check(prev,desc);         }       }     }  else     if (dname.charAt(dname.length() - 1) == '*') {       for (int j=0; j < i; j++) {         MethodDesc prev=descs[j];         String pname=prev.name;         int plen=pname.length() - 1;         if (pname.charAt(plen) == '*' && pname.regionMatches(0,dname,0,plen)) {           check(prev,desc);         }       }     }  else {       for (int j=0; j < i; j++) {         MethodDesc prev=descs[j];         String pname=prev.name;         int plen=pname.length() - 1;         if (pname.charAt(0) == '*') {           if (dname.regionMatches(dname.length() - plen,pname,1,plen)) {             check(prev,desc);           }         }  else         if (pname.charAt(plen) == '*') {           if (dname.regionMatches(0,pname,0,plen)) {             check(prev,desc);           }         }  else {           if (pname.equals(dname)) {             check(prev,desc);           }         }       }     }   } } "
"@Override public void populateExpression(Object objValue){   if (objValue instanceof String) {     String sValue=(String)objValue;     populateField(sValue);   } } "
"@Override public Vector3D toSpace(final Point<Euclidean2D> point){   final Vector2D p2D=(Vector2D)point;   return new Vector3D(p2D.getX(),u,p2D.getY(),v,-originOffset,w); } "
"AppendOnlyStreamReader(DistributedLogManager dlm) throws IOException {   this.dlm=dlm;   reader=dlm.getInputStream(0);   currentPosition=0; } "
"public static boolean isAccountClassClass(GenericValue glAccountClass,String parentGlAccountClassId) throws GenericEntityException {   if (glAccountClass == null)   return false;   if (parentGlAccountClassId.equals(glAccountClass.get(\"glAccountClassId\"))) {     return true;   }   String parentClassId=glAccountClass.getString(\"parentClassId\");   if (parentClassId == null) {     return false;   }   if (parentClassId.equals(parentGlAccountClassId)) {     return true;   }   return isAccountClassClass(glAccountClass.getRelatedOne(\"ParentGlAccountClass\",true),parentGlAccountClassId); } "
"public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){   overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_A_TO_SELF(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200868,skillcaster,num0,skillname); } "
"public void resetTimeoutTimer(){   timeoutTimer.reset(); } "
"public final void info(final Object o,final Throwable t){   log(Level.INFO,o,t); } "
"@Override public double nextNormalizedDouble(){   return SQRT3 * (2 * generator.nextDouble() - 1.0); } "
"Delta newDropTable(){   Delta storageDelta=Deltas.mapBuilder().put(StorageState.DROPPED.getMarkerAttribute().key(),now()).build();   MapDeltaBuilder storageMapDelta=Deltas.mapBuilder();   if (_master != null) {     for (    Storage storage : _master.getPrimaryAndMirrors()) {       storageMapDelta.update(storage.getUuidString(),storageDelta);     }   }   for (  Storage facade : _facades) {     for (    Storage storage : facade.getPrimaryAndMirrors()) {       storageMapDelta.update(storage.getUuidString(),storageDelta);     }   }   return Deltas.mapBuilder().remove(UUID_ATTR.key()).remove(ATTRIBUTES.key()).update(STORAGE.key(),storageMapDelta.build()).removeRest().build(); } "
"public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   this.doPost(request,response); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_SELF(String skillcaster,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200881,skillcaster,value0,skillname); } "
"private void unlockFocus(){   try {     mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);     setAutoFlash(mPreviewRequestBuilder);     mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);     mState=STATE_PREVIEW;     mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);   }  catch (  CameraAccessException e) {     e.printStackTrace();   } } "
"public AudioGetPopularQuery onlyEng(Boolean value){   return unsafeParam(\"only_eng\",value); } "
"public static SM_SYSTEM_MESSAGE STR_ONE_IS_INCLUDED(String value0){   return new SM_SYSTEM_MESSAGE(1300637,value0); } "
"public Dijkstra(Map<Integer,LinkedList<Integer>> edges){   this.edges=edges;   n=edges.size();   distance=new float[n];   previous=new int[n];   distance[n - 1]=0;   previous[n - 1]=0;   for (int i=0; i < n - 1; i++) {     distance[i]=Float.MAX_VALUE;     previous[i]=-1;   }   PriorityQueue<Vertex> queue=new PriorityQueue<Vertex>(n);   queue.add(new Vertex(n - 1,distance[n - 1]));   while (!queue.isEmpty()) {     Vertex v=queue.poll();     LinkedList<Integer> nodes=this.edges.get(v.vertex);     for (    Integer u : nodes) {       float d=length(u,v.vertex) + distance[v.vertex];       if (d < distance[u]) {         distance[u]=d;         previous[u]=v.vertex;         queue.add(new Vertex(u,distance[u]));       }     }   } } "
"public PointsToSet reachingObjects(Local l,SootField f){   return reachingObjects(reachingObjects(l),f); } "
"public void updateView(){   Graphics2D gc=(Graphics2D)getGraphics();   Dimension size=new Dimension();   draw(gc,size);   setPreferredSize(size);   revalidate(); } "
"public ArrayFieldVector(Field<T> field,T[] d) throws NullArgumentException {   MathUtils.checkNotNull(d);   this.field=field;   data=d.clone(); } "
"public String clientAppId(){   return (String)httpRequest.getAttribute(AuthenticationFilter.AuthenticatedRoleAttributeName); } "
"public StatisticalReferenceDataset[] createAll() throws IOException {   return new StatisticalReferenceDataset[]{createKirby2(),createMGH17()}; } "
"public static void writeMiniLangDocument(URL xmlURL,Document document){   URL styleSheetURL=null;   InputStream styleSheetInStream=null;   Transformer transformer=null;   try {     styleSheetURL=FlexibleLocation.resolveLocation(\"component://minilang/config/MiniLang.xslt\");     styleSheetInStream=styleSheetURL.openStream();     TransformerFactory transformerFactory=TransformerFactory.newInstance();     transformer=transformerFactory.newTransformer(new StreamSource(styleSheetInStream));   }  catch (  Exception e) {     Debug.logWarning(e,\"Error reading minilang/config/MiniLang.xslt: \",module);     return;   }  finally {     if (styleSheetInStream != null) {       try {         styleSheetInStream.close();       }  catch (      IOException e) {         Debug.logWarning(e,\"Error closing minilang/config/MiniLang.xslt: \",module);       }     }   }   FileOutputStream fos=null;   try {     fos=new FileOutputStream(xmlURL.getFile());     UtilXml.transformDomDocument(transformer,document,fos);     Debug.logInfo(\"Saved Mini-language file \" + xmlURL,module);   }  catch (  Exception e) {     Debug.logWarning(e,\"Error writing mini-language file \" + xmlURL + \": \",module);   }  finally {     if (fos != null) {       try {         fos.close();       }  catch (      IOException e) {         Debug.logWarning(e,\"Error closing \" + xmlURL + \": \",module);       }     }   } } "
"public BOMInputStream(InputStream delegate,ByteOrderMark... boms){   this(delegate,false,boms); } "
"final void fillQName(QName toFill,String uri,String localpart,String prefix){   if (!fStringsInternalized) {     uri=(uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;     localpart=(localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;     prefix=(prefix != null && prefix.length() > 0) ? fSymbolTable.addSymbol(prefix) : XMLSymbols.EMPTY_STRING;   }  else {     if (uri != null && uri.length() == 0) {       uri=null;     }     if (localpart == null) {       localpart=XMLSymbols.EMPTY_STRING;     }     if (prefix == null) {       prefix=XMLSymbols.EMPTY_STRING;     }   }   String raw=localpart;   if (prefix != XMLSymbols.EMPTY_STRING) {     fStringBuffer.clear();     fStringBuffer.append(prefix);     fStringBuffer.append(':');     fStringBuffer.append(localpart);     raw=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);   }   toFill.setValues(prefix,localpart,raw,uri); } "
"private void refreshStatus(IResource[] resources){   Set<IContainer> foldersToRefresh=new HashSet<IContainer>(resources.length);   for (  IResource resource : resources) {     if (resources.length == 1 && resources[0].getType() == IResource.FILE) {       try {         SVNProviderPlugin.getPlugin().getStatusCacheManager().refreshStatus(resource,false);       }  catch (      SVNException e) {         SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);       }     }  else {       if (resource.getType() == IResource.FILE) {         foldersToRefresh.add(resource.getParent());       }  else {         foldersToRefresh.add((IContainer)resource);       }     }   }   refreshStatusInfinite(foldersToRefresh); } "
"public BaseResourceStorage createResourceStorage(BaseResource baseResource){   return new BaseResourceStorage(baseResource); } "
"public static boolean calculatePhysicalParryRate(Creature attacker,Creature attacked){   if (attacked.getObserveController().checkAttackStatus(AttackStatus.PARRY)) {     return true;   }   float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent();   float parry=0;   if (attacked instanceof Player) {     parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_PARRY,0).getCurrent();   }  else {     parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase());   }   float parryRate=parry - accuracy;   return calculatePhysicalEvasion(parryRate,400); } "
"public ParameterGuesser(Collection<WeightedObservedPoint> observations){   MathUtils.checkNotNull(observations);   if (observations.size() < 3) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,observations.size(),3);   }   final List<WeightedObservedPoint> sorted=sortObservations(observations);   final double[] params=basicGuess(sorted.toArray(new WeightedObservedPoint[0]));   norm=params[0];   mean=params[1];   sigma=params[2]; } "
"protected TableViewer createTable(Composite parent,int span){   Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);   GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);   data.horizontalSpan=span;   table.setLayoutData(data);   TableLayout layout=new TableLayout();   layout.addColumnData(new ColumnWeightData(100,true));   table.setLayout(layout);   TableColumn col=new TableColumn(table,SWT.NONE);   col.setResizable(true);   return new TableViewer(table); } "
"public static PhasedBackoffWaitStrategy withSleep(long spinTimeout,long yieldTimeout,TimeUnit units){   return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new SleepingWaitStrategy(0)); } "
"public boolean equals(BasicBlock b){   return (this == b); } "
"@Override public boolean accept(File pathname){   String suffix=Basic.getSuffix(pathname.getName()).toLowerCase();   if (suffix.startsWith(\".rma\")) {     try (InputReader r=new InputReader(pathname,null,null,true)){       int magicNumber=r.readInt();       int version=r.readInt();       return magicNumber == RMA2File.MAGIC_NUMBER && (version == 2 || version == 3);     }  catch (    Exception ex) {     }   }   return false; } "
"private void inspectDuplicatedConditions(LinkedList<PsiElement> objAllConditions,If ifStatement){   LinkedList<PsiElement> objParentConditions=new LinkedList<PsiElement>();   PsiElement objParent=ifStatement.getParent();   while (null != objParent && !(objParent instanceof PhpFile)) {     if (objParent instanceof If) {       LinkedList<PsiElement> tempList=ExpressionSemanticUtil.getConditions(((If)objParent).getCondition(),null);       if (null != tempList) {         objParentConditions.addAll(tempList);         tempList.clear();       }       for (      ElseIf objParentElseIf : ((If)objParent).getElseIfBranches()) {         tempList=ExpressionSemanticUtil.getConditions(objParentElseIf.getCondition(),null);         if (null != tempList) {           objParentConditions.addAll(tempList);           tempList.clear();         }       }     }     objParent=objParent.getParent();   }   for (  PsiElement objExpression : objAllConditions) {     if (null == objExpression) {       continue;     }     int intOuterIndex=objAllConditions.indexOf(objExpression);     objAllConditions.set(intOuterIndex,null);     PsiElement variableCandidate=objExpression;     if (variableCandidate instanceof UnaryExpression) {       final PsiElement notOperatorCandidate=((UnaryExpression)variableCandidate).getOperation();       if (null != notOperatorCandidate && notOperatorCandidate.getNode().getElementType() == PhpTokenTypes.opNOT) {         PsiElement invertedValue=((UnaryExpression)variableCandidate).getValue();         invertedValue=ExpressionSemanticUtil.getExpressionTroughParenthesis(invertedValue);         if (null == invertedValue) {           continue;         }         variableCandidate=invertedValue;       }     }     if (variableCandidate instanceof Variable || variableCandidate instanceof ConstantReference || variableCandidate instanceof FieldReference) {       continue;     }     for (    PsiElement objInnerLoopExpression : objAllConditions) {       if (null == objInnerLoopExpression) {         continue;       }       boolean isDuplicate=PsiEquivalenceUtil.areElementsEquivalent(objInnerLoopExpression,objExpression);       if (isDuplicate) {         holder.registerProblem(objInnerLoopExpression,strProblemDescriptionDuplicateConditions,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);         int intInnerIndex=objAllConditions.indexOf(objInnerLoopExpression);         objAllConditions.set(intInnerIndex,null);       }     }     for (    PsiElement objOuterScopeExpression : objParentConditions) {       if (null == objOuterScopeExpression) {         continue;       }       boolean isDuplicate=PsiEquivalenceUtil.areElementsEquivalent(objOuterScopeExpression,objExpression);       if (isDuplicate) {         holder.registerProblem(objExpression,strProblemDescriptionDuplicateConditions,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);         int intOuterScopeIndex=objParentConditions.indexOf(objOuterScopeExpression);         objParentConditions.set(intOuterScopeIndex,null);       }     }   }   objParentConditions.clear(); } "
"public Draggable searchForAsset(String asset){   if (isClosed()) {     pageObjectInjector.inject(GlobalBar.class).toggleSidePanel();   }   verifyResultsVisible();   searchInput.sendKeys(asset);   searchInput.sendKeys(Keys.ENTER);   verifyResultsVisible();   return dragAndDropFactory.createDraggable(getResult(asset),FramePath.parsePath(\"/\")); } "
"public void deepFill(MaryNode specTree){   tree=specTree;   numberOfLeaves=0;   sortNode(0,tree); } "
"public static FieldSelector of(ImmutableList<Field> fields){   return new FieldSelector(fields); } "
"HttpmdURLConnection(URL url) throws IOException, MalformedURLException {   super(url);   String path=url.getPath() == null ? \"\" : url.getPath();   int semiIndex=path.lastIndexOf(';');   if (semiIndex < 0) {     throw new MalformedURLException(\"Message digest parameter is missing\");   }   int equalsIndex=path.indexOf('=',semiIndex);   if (equalsIndex < 0) {     throw new MalformedURLException(\"Message digest parameter is missing a '='\");   }   algorithm=path.substring(semiIndex + 1,equalsIndex);   try {     MessageDigest.getInstance(algorithm);   }  catch (  NoSuchAlgorithmException e) {     MalformedURLException t=new MalformedURLException(\"Message digest parameter algorithm is not found: \" + algorithm);     t.initCause(e);     throw t;   }   String digest=path.substring(equalsIndex + 1);   int comment=digest.indexOf(',');   if (comment >= 0) {     for (int i=digest.length(); --i > comment; ) {       char c=digest.charAt(i);       if (!HttpmdUtil.commentChar(c)) {         throw new MalformedURLException(\"Comment contains illegal character: '\" + c + \"'\");       }     }     digest=digest.substring(0,comment);   }   int length=digest.length();   if (length == 0) {     throw new MalformedURLException(\"Message digest parameter digest is empty\");   }   try {     expectedDigest=HttpmdUtil.stringDigest(digest);   }  catch (  NumberFormatException e) {     MalformedURLException t=new MalformedURLException(\"Message digest parameter has invalid format for digest: \" + digest);     t.initCause(e);     throw t;   }   try {     content=new URL(\"http\",url.getHost(),url.getPort(),path.substring(0,semiIndex) + (url.getQuery() == null ? \"\" : url.getQuery()) + (url.getRef() == null ? \"\" : url.getRef()));   }  catch (  MalformedURLException e) {     MalformedURLException t=new MalformedURLException(\"Problem with content location\");     t.initCause(e);     throw t;   }   delegateConnection=(HttpURLConnection)content.openConnection(); } "
"private SocketChannel createSocket(String host,int port) throws IOException {   SocketChannel sockChannel=SocketChannel.open();   sockChannel.configureBlocking(true);   m_Address=new InetSocketAddress(host,port);   LRMIUtilities.initNewSocketProperties(sockChannel);   return sockChannel; } "
"private double doRemove(int index){   keys[index]=0;   states[index]=REMOVED;   final double previous=values[index];   values[index]=missingEntries;   --size;   ++count;   return previous; } "
"public void stop(){   for (  final StoppableTask task : backgroundTasks) {     task.stop();   } } "
"public static String timestamp(DateTime ts){   return Long.toString(ts.getMillis() / 1000); } "
"private Dimension layoutSize(Container target,boolean preferred){ synchronized (target.getTreeLock()) {     int targetWidth=target.getSize().width;     if (targetWidth == 0)     targetWidth=Integer.MAX_VALUE;     int hgap=getHgap();     int vgap=getVgap();     Insets insets=target.getInsets();     int horizontalInsetsAndGap=insets.left + insets.right + (hgap * 2);     int maxWidth=targetWidth - horizontalInsetsAndGap;     Dimension dim=new Dimension(0,0);     int rowWidth=0;     int rowHeight=0;     int nmembers=target.getComponentCount();     for (int i=0; i < nmembers; i++) {       Component m=target.getComponent(i);       if (m.isVisible()) {         Dimension d=preferred ? m.getPreferredSize() : m.getMinimumSize();         if (rowWidth + d.width > maxWidth) {           addRow(dim,rowWidth,rowHeight);           rowWidth=0;           rowHeight=0;         }         if (rowWidth != 0) {           rowWidth+=hgap;         }         rowWidth+=d.width;         rowHeight=Math.max(rowHeight,d.height);       }     }     addRow(dim,rowWidth,rowHeight);     dim.width+=horizontalInsetsAndGap;     dim.height+=insets.top + insets.bottom + vgap * 2;     Container scrollPane=SwingUtilities.getAncestorOfClass(JScrollPane.class,target);     if (scrollPane != null) {       dim.width-=(hgap + 1);     }     return dim;   } } "
"public static List<String> readLines(InputStream input,Charset encoding) throws IOException {   InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));   return readLines(reader); } "
"@Override public Node cloneNode(boolean deep){   ElementDefinitionImpl newnode=(ElementDefinitionImpl)super.cloneNode(deep);   newnode.attributes=attributes.cloneMap(newnode);   return newnode; } "
"public DocumentWordHistogram(){   MinSize=1;   MaxSize=2; } "
"public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_INVALID(String value0){   return new SM_SYSTEM_MESSAGE(1300091,value0); } "
"public SimpleStringProperty topicProperty(){   return this.topic; } "
"public long logSize(){   return logBytes; } "
"public ComponentConfigBuilder addItemInFieldset(String fieldsetLabel,String itemType,String itemLabel,String value){   String type=String.format(\"fieldset#%s\",itemType);   String label=String.format(\"%s#%s\",fieldsetLabel,itemLabel);   config.add(new ConfigurationEntry(currentTab,type,label,value));   return this; } "
"public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   String subSignature=method.getSubSignature();   if (subSignature.equals(\"java.lang.Object invoke(java.lang.Object,java.lang.Object[])\")) {     java_lang_reflect_Method_invoke(method,thisVar,returnVar,params);     return;   }  else {     defaultMethod(method,thisVar,returnVar,params);     return;   } } "
"public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages,TimeZone timeZone,Locale locale){   Map<String,Object> target=new HashMap<String,Object>();   if (source == null) {     return target;   }   if (!\"IN\".equals(mode) && !\"OUT\".equals(mode) && !\"INOUT\".equals(mode)) {     return target;   }   if (contextInfo.size() == 0) {     return target;   }   if (locale == null) {     if (source.containsKey(\"locale\")) {       locale=(Locale)source.get(\"locale\");     }     if (locale == null) {       locale=Locale.getDefault();     }   }   if (timeZone == null) {     if (source.containsKey(\"timeZone\")) {       timeZone=(TimeZone)source.get(\"timeZone\");     }     if (timeZone == null) {       timeZone=TimeZone.getDefault();     }   }   for (  ModelParam param : contextParamList) {     if (param.mode.equals(\"INOUT\") || param.mode.equals(mode)) {       String key=param.name;       if (UtilValidate.isNotEmpty(param.stringMapPrefix) && !source.containsKey(key)) {         Map<String,Object> paramMap=this.makePrefixMap(source,param);         if (UtilValidate.isNotEmpty(paramMap)) {           target.put(key,paramMap);         }       }  else       if (UtilValidate.isNotEmpty(param.stringListSuffix) && !source.containsKey(key)) {         List<Object> paramList=this.makeSuffixList(source,param);         if (UtilValidate.isNotEmpty(paramList)) {           target.put(key,paramList);         }       }  else {         if (source.containsKey(key)) {           if ((param.internal && includeInternal) || (!param.internal)) {             Object value=source.get(key);             try {               value=ObjectType.simpleTypeConvert(value,param.type,null,timeZone,locale,false);             }  catch (            GeneralException e) {               String errMsg=\"Type conversion of field [\" + key + \"] to type [\"+ param.type+ \"] failed for value \\\"\"+ value+ \"\\\": \"+ e.toString();               Debug.logWarning(\"[ModelService.makeValid] : \" + errMsg,module);               if (errorMessages != null) {                 errorMessages.add(errMsg);               }             }             target.put(key,value);           }         }       }     }   }   return target; } "
"private synchronized void rebuildJournal() throws IOException {   if (journalWriter != null) {     journalWriter.close();   }   Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));   try {     writer.write(MAGIC);     writer.write(\"\\n\");     writer.write(VERSION_1);     writer.write(\"\\n\");     writer.write(Integer.toString(appVersion));     writer.write(\"\\n\");     writer.write(Integer.toString(valueCount));     writer.write(\"\\n\");     writer.write(\"\\n\");     for (    Entry entry : lruEntries.values()) {       if (entry.currentEditor != null) {         writer.write(DIRTY + ' ' + entry.key+ '\\n');       }  else {         writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\\n');       }     }   }   finally {     writer.close();   }   if (journalFile.exists()) {     renameTo(journalFile,journalFileBackup,true);   }   renameTo(journalFileTmp,journalFile,false);   journalFileBackup.delete();   journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII)); } "
"private void explain(String systemId){   if (!suppressExplanation) {     System.out.println(\"Parser probably encountered bad URI in \" + systemId);     System.out.println(\"For example, replace '/some/uri' with 'file:/some/uri'.\");   } } "
"@Override public void parse(XMLInputSource source) throws XNIException, IOException {   if (fParseInProgress) {     throw new XNIException(\"FWK005 parse may not be called while parsing.\");   }   fParseInProgress=true;   try {     setInputSource(source);     parse(true);   }  catch (  XNIException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  IOException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  RuntimeException ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw ex;   } catch (  Exception ex) {     if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();     throw new XNIException(ex);   }  finally {     fParseInProgress=false;     this.cleanup();   } } "
"public boolean isAlreadyMatched(){   return false; } "
"public WikiMetricLoader(int sketchSize){   this.sketchSize=sketchSize; } "
"@Override protected int sizeOf(String key,BitmapDrawable value){   final int bitmapSize=getBitmapSize(value) / 1024;   return bitmapSize == 0 ? 1 : bitmapSize; } "
"@Override public int read(byte[] b) throws IOException {   return this.read(b,0,b.length); } "
"public final static boolean isJavaKeyword(String s){   if (s == null || s.length() == 0) {     return false;   }   for (int i=0; i < keywords.length; i++) {     if (keywords[i].equals(s)) {       return true;     }   }   return false; } "
"public void onDelete(){   if (getOwner().isInWorld()) {     this.onDespawn();     this.delete();   } } "
"public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... posts){   super(client,\"wall.getById\",GetByIdExtendedResponse.class);   accessToken(actor.getAccessToken());   posts(posts);   extended(true); } "
"boolean isDirty(CoordinatorLayout parent,View child){   return mBehavior != null && mBehavior.isDirty(parent,child); } "
"public static String xor(String key,String input){   StringBuilder output=new StringBuilder();   for (int i=0; i < input.length(); i++) {     output.append((char)(input.charAt(i) ^ key.charAt(i % key.length())));   }   return output.toString(); } "
"private ULong(BigInteger value) throws NumberFormatException {   if (value.compareTo(MIN_VALUE) < 0 || value.compareTo(MAX_VALUE) > 0) {     throw new NumberFormatException();   }  else {     this.value=value.longValue();   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_ME_TO_SELF(String skillname){   return new SM_SYSTEM_MESSAGE(1200342,skillname); } "
"public NumericHaving withType(HavingType type){   return new NumericHaving(type,getAggregation(),getValue()); } "
"@Override public void updateValue(String key,List<String> stringList){   StringBuilder sb=new StringBuilder();   for (  String string : stringList) {     if (sb.length() > 0) {       sb.append(LIST_DELIMETER);     }     sb.append(string);   }   updateValue(key,sb.toString()); } "
"public static int addEntryType(String name,int numArgs){   entryTypes.put(name,new Integer(nextEntry));   entryArgs.add(nextEntry,new Integer(numArgs));   nextEntry++;   return nextEntry - 1; } "
"protected double partialerror(double x[],double z) throws IllegalArgumentException {   if (x.length < 1) {     throw new IllegalArgumentException(\"Interpolation array cannot be empty.\");   }   double out=1;   for (int i=0; i < x.length; i++) {     out*=(z - x[i]) / (i + 1);   }   return out; } "
"public VisibilityFilter(Predicate p){   setPredicate(p); } "
"public boolean contains(int val){   return index(val) >= 0; } "
"public AccountRegisterDeviceQuery systemVersion(String value){   return unsafeParam(\"system_version\",value); } "
"public VOGeoServerContrastEnhancementNormalizeGrey(Class<?> panelId,RasterSymbolizerDetails parentPanel){   super(panelId,\"geoserver/GeoServerContrastEnhancementNormalizeGrey.xml\",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_GREY,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_GREY,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_GREY); } "
"public MessagesSendQuery message(String value){   return unsafeParam(\"message\",value); } "
"public UserFeedback(String username){   this.username=username; } "
"public static int cmdHdr(GeomCmd cmd,int length){   return (cmd.getCmdId() & 0x7) | (length << 3); } "
"public CoreDocumentImpl(DocumentType doctype){   this(doctype,false); } "
"public void removeHeader(String header){   clientHeaderMap.remove(header); } "
"public void maxLocal(Vector3f other){   x=other.x > x ? other.x : x;   y=other.y > y ? other.y : y;   z=other.z > z ? other.z : z; } "
"public void enterFullScreen(){   View decorView=mContext.getWindow().getDecorView();   hideSystemUI(decorView);   for (  View view : views) {     view.setVisibility(View.GONE);     view.invalidate();   } } "
"private float constrain(float amount,float low,float high){   return amount < low ? low : (amount > high ? high : amount); } "
"public GroupByKey(){ } "
"protected Dfp(final DfpField field,long x){   mant=new int[field.getRadixDigits()];   nans=FINITE;   this.field=field;   boolean isLongMin=false;   if (x == Long.MIN_VALUE) {     isLongMin=true;     ++x;   }   if (x < 0) {     sign=-1;     x=-x;   }  else {     sign=1;   }   exp=0;   while (x != 0) {     System.arraycopy(mant,mant.length - exp,mant,mant.length - 1 - exp,exp);     mant[mant.length - 1]=(int)(x % RADIX);     x/=RADIX;     exp++;   }   if (isLongMin) {     for (int i=0; i < mant.length - 1; i++) {       if (mant[i] != 0) {         mant[i]++;         break;       }     }   } } "
"public void stop(boolean force){   getProcess().destroy();   try {     if (!force)     waitFor(60 * 1000);   }  catch (  InterruptedException e1) {   }   getCommand().destroy(force);   try {     boolean destroyed=waitFor(1500);     if (!destroyed)     throw new IllegalStateException(\"Timeout of 1 minute occurred while waiting for the process to terminate. (force=\" + force + \")\");   }  catch (  InterruptedException e) {   } } "
"public boolean isNavigationImageEnabled(){   return navigationImageEnabled; } "
"protected void beforeMove(){ synchronized (System.err) {     System.err.println(getLocalName() + \" is now migrating.\");   } } "
"public static final void emoteStartWalking(Npc owner){   owner.setState(CreatureState.WALKING);   PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.WALK)); } "
"private void handleConnectError(int retry,String host,int port,SocketChannel sockChannel,ClosedSelectorException e){   if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,\"retrying connection due to closed selector exception: connecting to \" + host + \":\"+ port+ \", connect timeout=\"+ _config.getSocketConnectTimeout()+ \" keepalive=\"+ LRMIUtilities.KEEP_ALIVE_MODE,e);   try {     sockChannel.close();   }  catch (  Exception ex) {     if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,\"Failed to close socket: connecting to \" + host + \":\"+ port+ \", connect timeout=\"+ _config.getSocketConnectTimeout()+ \" keepalive=\"+ LRMIUtilities.KEEP_ALIVE_MODE,ex);   }   if (retry + 1 == SELECTOR_BUG_CONNECT_RETRY)   throw e; } "
"public synchronized void addFunction(D sourceVal,N target,D targetVal,EdgeFunction<L> function){   assert sourceVal != null;   assert target != null;   assert targetVal != null;   assert function != null;   if (function.equalTo(allTop))   return;   Map<D,EdgeFunction<L>> sourceValToFunc=nonEmptyReverseLookup.get(target,targetVal);   if (sourceValToFunc == null) {     sourceValToFunc=new LinkedHashMap<D,EdgeFunction<L>>();     nonEmptyReverseLookup.put(target,targetVal,sourceValToFunc);   }   sourceValToFunc.put(sourceVal,function);   Map<D,EdgeFunction<L>> targetValToFunc=nonEmptyForwardLookup.get(sourceVal,target);   if (targetValToFunc == null) {     targetValToFunc=new LinkedHashMap<D,EdgeFunction<L>>();     nonEmptyForwardLookup.put(sourceVal,target,targetValToFunc);   }   targetValToFunc.put(targetVal,function);   Table<D,D,EdgeFunction<L>> table=nonEmptyLookupByTargetNode.get(target);   if (table == null) {     table=HashBasedTable.create();     nonEmptyLookupByTargetNode.put(target,table);   }   table.put(sourceVal,targetVal,function); } "
"public static long microsecond2tick(Sequence seq,long micros,TempoCache cache){   if (seq.getDivisionType() != Sequence.PPQ) {     double dTick=(((double)micros) * ((double)seq.getDivisionType()) * ((double)seq.getResolution())) / ((double)1000000);     long tick=(long)dTick;     if (cache != null) {       cache.currTempo=(int)cache.getTempoMPQAt(tick);     }     return tick;   }   if (cache == null) {     cache=new TempoCache(seq);   }   long[] ticks=cache.ticks;   int[] tempos=cache.tempos;   int cacheCount=tempos.length;   int resolution=seq.getResolution();   long us=0;   long tick=0;   int newReadPos=0;   int i=1;   if (micros > 0 && cacheCount > 0) {     while (i < cacheCount) {       long nextTime=us + ticks2microsec(ticks[i] - ticks[i - 1],tempos[i - 1],resolution);       if (nextTime > micros) {         break;       }       us=nextTime;       i++;     }     tick=ticks[i - 1] + microsec2ticks(micros - us,tempos[i - 1],resolution);     if (Printer.debug)     Printer.debug(\"microsecond2tick(\" + (micros / 1000) + \") = \"+ tick+ \" ticks.\");   }   cache.currTempo=tempos[i - 1];   return tick; } "
"public void asinh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){   double[] function=new double[1 + order];   final double x=operand[operandOffset];   function[0]=FastMath.asinh(x);   if (order > 0) {     final double[] p=new double[order];     p[0]=1;     final double x2=x * x;     final double f=1.0 / (1 + x2);     double coeff=FastMath.sqrt(f);     function[1]=coeff * p[0];     for (int n=2; n <= order; ++n) {       double v=0;       p[n - 1]=(1 - n) * p[n - 2];       for (int k=n - 1; k >= 0; k-=2) {         v=v * x2 + p[k];         if (k > 2) {           p[k - 2]=(k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];         }  else         if (k == 2) {           p[0]=p[1];         }       }       if ((n & 0x1) == 0) {         v*=x;       }       coeff*=f;       function[n]=coeff * v;     }   }   compose(operand,operandOffset,function,result,resultOffset); } "
"void assignLocalToStaticField(Local right,String field){   PurityNode node=PurityGlobalNode.node;   localEscapes(right);   mutated.put(node,field);   nodes.add(node);   if (doCheck)   sanityCheck(); } "
"static VersionNumber identifyBSDVersion(final String userAgent){   VersionNumber version=VersionNumber.UNKNOWN;   final Pattern pattern=Pattern.compile(\"\\\\w+bsd\\\\s?((\\\\d+)((\\\\.\\\\d+)+)?((\\\\-|_)[\\\\w\\\\d\\\\-]+)?)\",Pattern.CASE_INSENSITIVE);   final Matcher m=pattern.matcher(userAgent);   if (m.find()) {     version=parseFirstVersionNumber(m.group(MAJOR_INDEX));   }   return version; } "
"public static <X,Y>boolean containsSubclass(Set<? extends Class<? extends Y>> classes,X superclassInstance){   for (  Class<? extends Y> classs : classes)   if (classs.isInstance(superclassInstance))   return true;   return false; } "
"private void handleRemoveWaitingForInfoSA_TemplateBased(Context context,ITemplateHolder template) throws SAException {   ILockObject entryLock=null;   Collection<IEntryHolder> clonedWaitingFor;   ILockObject templateLock=getTemplateLockObject(template);   try { synchronized (templateLock) {       clonedWaitingFor=template.getEntriesWaitingForTemplate() != null ? new ArrayList<IEntryHolder>(template.getEntriesWaitingForTemplate()) : null;       if (clonedWaitingFor == null)       return;     }   }   finally {     freeTemplateLockObject(templateLock);   }   for (  IEntryHolder entry : clonedWaitingFor) {     boolean need_unpin=false;     try {       entryLock=getEntryLockObject(entry); synchronized (entryLock) {         try {           if (entry.isOffHeapEntry()) {             need_unpin=true;             entry=((IOffHeapEntryHolder)entry).getLatestEntryVersion(_cacheManager,true,context);           }           handleRemoveWaitingForInfoSA_Template(context,entry,template);         }   finally {           if (need_unpin)           _cacheManager.unpinIfNeeded(context,entry,null,null);         }       }     }   finally {       if (entryLock != null) {         freeEntryLockObject(entryLock);         entryLock=null;       }     }   } } "
"public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_5_FORESTRY(String value0){   return new SM_SYSTEM_MESSAGE(1330020,value0); } "
"HashMap<String,Object> cloneProperties(){   if (Properties == null) {     return null;   }   HashMap<String,Object> props=new HashMap<String,Object>(Properties.size());   props.putAll(Properties);   return props; } "
"public static boolean kingLike(Item tokenItem){   String kingName=((String)tokenItem.findFeature(\"p.name\")).toLowerCase();   if (inKingSectionLikeHash(kingName,KING_NAMES)) {     return true;   }  else {     String kingTitle=((String)tokenItem.findFeature(\"p.p.name\")).toLowerCase();     return inKingSectionLikeHash(kingTitle,KING_TITLES);   } } "
"public BatchResponsePacket(int[] result){   _result=result; } "
"public boolean containsEx(String memberName){   return legionMemberExByName.containsKey(memberName); } "
"public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {   writeLines(lines,lineEnding,output,Charsets.toCharset(encoding)); } "
"public DexlibAbstractInstruction instructionAtAddress(int address){   DexlibAbstractInstruction i=null;   while (i == null && address >= 0) {     i=instructionAtAddress.get(address);     address--;   }   return i; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_END_ME_TO_B(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200443,skilltarget); } "
"public boolean isCritical(){   return true; } "
"void paintGridCell(Graphics2D gr2d,FontRenderContext render,int index){   if (index >= cellCount)   return;   int x=(((index - cornerIndex) % panelColumns) * horizStep) + PANEL_MARGIN;   int y=(((index - cornerIndex) / panelColumns) * vertiStep) + PANEL_MARGIN;   gr2d.setColor(GRID_COLOUR);   gr2d.fillRect(x,y,(horizStep + GRID_WIDTH),(vertiStep + GRID_WIDTH));   if (index == clickIndex) {     gr2d.setColor(TEXT_COLOUR);   }  else   if (index == hoverIndex) {   }  else {     gr2d.setColor(PANEL_COLOUR);   }   if ((index == selectedChar) && (selectedFont.compareTo(charMap4.getDisplayFont().getFontName()) == 0)) {     gr2d.setColor(SELECTED_COLOUR);   }   gr2d.fillRect((x + GRID_WIDTH),(y + GRID_WIDTH),(horizStep - GRID_WIDTH),(vertiStep - GRID_WIDTH));   gr2d.setColor((index == clickIndex) ? PANEL_COLOUR : TEXT_COLOUR);   if (CharMap4.isGlyphFlag()) {     int[] list=new int[1];     list[0]=cellGlyph[index];     GlyphVector glyvector=panelFont.createGlyphVector(render,list);     gr2d.drawGlyphVector(glyvector,(x + GRID_WIDTH + TEXT_MARGIN+ ((maxWidth - ((int)glyvector.getGlyphMetrics(0).getAdvanceX())) / 2)),(y + GRID_WIDTH + TEXT_MARGIN+ lineAscent));   }  else {     int ch=cellChar[index];     gr2d.setFont(panelFont);     gr2d.drawString(CharMap4.charToString(ch),(x + GRID_WIDTH + TEXT_MARGIN+ ((maxWidth - fontData.charWidth(ch)) / 2)),(y + GRID_WIDTH + TEXT_MARGIN+ lineAscent));   } } "
"void onException(JMSException jE){   if (errorHandler != null) {     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"calling ExceptionListener.onException(): \" + cnxKey);     }     errorHandler.onException(jE);   }  else {     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"ExceptionListener is not set for connection: \" + cnxKey);     }   } } "
"public AccountRegisterDeviceQuery(VkApiClient client,UserActor actor,String token,String deviceId){   super(client,\"account.registerDevice\",OkResponse.class);   accessToken(actor.getAccessToken());   token(token);   deviceId(deviceId); } "
"public RequestHandler(PokemonGo api,OkHttpClient client){   this.api=api;   this.client=client;   apiEndpoint=ApiSettings.API_ENDPOINT;   asyncHttpThread=new Thread(this,\"Async HTTP Thread\");   asyncHttpThread.setDaemon(true);   asyncHttpThread.start(); } "
"public void handleEntryExpiredCoreSA(IEntryHolder entry,ServerTransaction txn,boolean fromReplication) throws Exception {   boolean anyNotityExpiredTemplates=_cacheManager.getTemplatesManager().anyNotifyLeaseTemplates();   if (!anyNotityExpiredTemplates)   return;   Context context=null;   try {     context=_cacheManager.getCacheContext();     context.setFromReplication(fromReplication);     NotifyContextsHolder notifyContextsHolder=new NotifyContextsHolder(null,entry,context.getOperationID(),NotifyActionType.NOTIFY_LEASE_EXPIRATION);     _engine.getTemplateScanner().scanNotifyTemplates(notifyContextsHolder,context,null,FifoSearch.NO);   }   finally {     _cacheManager.freeCacheContext(context);   } } "
"private boolean handleScroll(MotionEvent e1,MotionEvent e2,float distanceY){   if (!mHasDeterminedGestureOrientation && isDistanceGreaterThanTouchSlop(e1,e2)) {     determineGestureOrientation(e1,e2);   }   final boolean mayChangeEventTarget=mMayChangeEventTarget && e2.getPointerCount() == 1;   if (mHasDeterminedGestureOrientation && (!mHasDeterminedEventTarget || mayChangeEventTarget)) {     determineEventTarget(distanceY);   }   return false; } "
"@Override public int compareTo(StyleWrapper o){   if (o == null) {     return -1;   }   String s1=this.workspace + this.style;   String s2=o.workspace + o.style;   return s1.compareTo(s2); } "
"public boolean isAssumedNonNullBefore(Unit s,Immediate i){   AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);   return ai.get(i) == NON_NULL; } "
"@Override public StyledLayerDescriptor create(){   StyledLayerDescriptor sld=getStyleFactory().createStyledLayerDescriptor();   NamedLayer namedLayer=getStyleFactory().createNamedLayer();   sld.addStyledLayer(namedLayer);   Style style=getStyleFactory().createStyle();   namedLayer.addStyle(style);   List<FeatureTypeStyle> ftsList=style.featureTypeStyles();   FeatureTypeStyle fts=getStyleFactory().createFeatureTypeStyle();   ftsList.add(fts);   Rule rule=getStyleFactory().createRule();   fts.rules().add(rule);   RasterSymbolizer raster=DefaultSymbols.createDefaultRasterSymbolizer();   rule.symbolizers().add(raster);   return sld; } "
"public UserObject(){   service=UserService.getService(); } "
"@Override public boolean isReadOnly() throws RemoteException {   return this.readOnly; } "
"public <R>Plan<R> then(Function<? super T1,? extends R> selector){   if (selector == null) {     throw new NullPointerException();   }   return new Plan1<T1,R>(this,selector); } "
"public static byte[] fromHex(String hex){   try {     return Hex.decodeHex(hex.toCharArray());   }  catch (  DecoderException e) {     return null;   } } "
"protected void computeCoefficients(){   final int n=degree();   coefficients=new double[n + 1];   for (int i=0; i <= n; i++) {     coefficients[i]=0.0;   }   coefficients[0]=a[n];   for (int i=n - 1; i >= 0; i--) {     for (int j=n - i; j > 0; j--) {       coefficients[j]=coefficients[j - 1] - c[i] * coefficients[j];     }     coefficients[0]=a[i] - c[i] * coefficients[0];   }   coefficientsComputed=true; } "
"public OutOfRangeException(Localizable specific,Number wrong,Number lo,Number hi){   super(specific,wrong,lo,hi);   this.lo=lo;   this.hi=hi; } "
"private Object parseElementRaw(Node element) throws ParseException {   ElementType type=ElementType.valueOf(element.getNodeName().toUpperCase()); switch (type) { case INTEGER:     return parseInt(getValue(element)); case REAL:   return Double.valueOf(getValue(element)); case STRING: return getValue(element); case DATE: return this.m_dateFormat.parse(getValue(element)); case DATA: return base64decode(getValue(element)); case ARRAY: return parseArray(element.getChildNodes()); case TRUE: return Boolean.TRUE; case FALSE: return Boolean.FALSE; case DICT: return parseDict(element.getChildNodes()); default : throw new RuntimeException(\"Unexpected type: \" + element.getNodeName()); } } "
"public UsersSearchQuery universityFaculty(Integer value){   return unsafeParam(\"university_faculty\",value); } "
"public void cancel(Account account){   Log_OC.d(TAG,\"Account= \" + account.name);   if (mCurrentDownload != null) {     Log_OC.d(TAG,\"Current Download Account= \" + mCurrentDownload.getAccount().name);     if (mCurrentDownload.getAccount().name.equals(account.name)) {       mCurrentDownload.cancel();     }   }   cancelDownloadsForAccount(account); } "
"public PhotosGetUserPhotosQuery extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public void remove(RequestFilter filter){   filters.remove(filter); } "
"public FuzzyKMeansClusterer(final int k,final double fuzziness,final int maxIterations,final DistanceMeasure measure,final double epsilon,final RandomGenerator random) throws MathIllegalArgumentException {   super(measure);   if (fuzziness <= 1.0d) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,fuzziness,1.0);   }   this.k=k;   this.fuzziness=fuzziness;   this.maxIterations=maxIterations;   this.epsilon=epsilon;   this.random=random;   this.membershipMatrix=null;   this.points=null;   this.clusters=null; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_A_TO_SELF(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200832,skillcaster,skillname); } "
"Item newFieldItem(final String owner,final String name,final String desc){   key3.set(FIELD,owner,name,desc);   Item result=get(key3);   if (result == null) {     put122(FIELD,newClass(owner),newNameType(name,desc));     result=new Item(index++,key3);     put(result);   }   return result; } "
"public Object clone(){   ConditionedRuleExpression clone=(ConditionedRuleExpression)super.clone();   clone.conditions=new ArrayList<IRuleCondition>();   Iterator<IRuleCondition> i=conditions.iterator();   while (i.hasNext()) {     final IRuleCondition condition=i.next();     clone.conditions.add((IRuleCondition)condition.clone());   }   return clone; } "
"public void removeNotificationListener(){   Listener=null; } "
"synchronized public void allowCertForProcess(@NonNull X509Certificate[] chain) throws KeyStoreException, NoSuchAlgorithmException {   for (  X509Certificate cert : chain) {     String alias=cert.getSubjectDN().getName();     transientKeyStore.setCertificateEntry(alias,cert);   }   initTrustManager(); } "
"@Override public void endParameterEntity(String name,Augmentations augmentations) throws XNIException { } "
"private void initState(){   ScopedStateStore state=getState();   Project project=getProject();   NewProjectWizardDynamic.initState(state,determineGradlePluginVersion(project));   if (project != null) {     state.put(WizardConstants.PROJECT_LOCATION_KEY,project.getBasePath());   } } "
"public boolean disableCharacteristicIndicate(){   return disableCharacteristicIndicate(getCharacteristic()); } "
"public static boolean searchInArray(int[] data,int key){   for (int i=0; i < data.length; i++) {     if (key == data[i]) {       return true;     }   }   return false; } "
"public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_IS_MY_GUILD_MEMBER(String value0){   return new SM_SYSTEM_MESSAGE(1300255,value0); } "
"private static void deleteRecursive(CarbonFile f) throws CarbonUtilException {   if (f.isDirectory()) {     if (f.listFiles() != null) {       for (      CarbonFile c : f.listFiles()) {         deleteRecursive(c);       }     }   }   if (f.exists() && !f.delete()) {     throw new CarbonUtilException(\"Error while deleting the folders and files\");   } } "
"private Point estimateContentSize(){   Point screenSize=new Point();   WindowManager wm=(WindowManager)mApplication.getSystemService(Context.WINDOW_SERVICE);   wm.getDefaultDisplay().getSize(screenSize);   Resources resources=mApplication.getResources();   int statusBarId=resources.getIdentifier(\"status_bar_height\",\"dimen\",\"android\");   try {     screenSize.y-=resources.getDimensionPixelSize(R.dimen.custom_tabs_control_container_height);     screenSize.y-=resources.getDimensionPixelSize(statusBarId);   }  catch (  Resources.NotFoundException e) {   }   float density=resources.getDisplayMetrics().density;   screenSize.x/=density;   screenSize.y/=density;   return screenSize; } "
"protected SybaseDatabaseType(){   String bulkType=System.getProperty(BULK_INSERT_TYPE_KEY,\"jtds\");   if (bulkType.equalsIgnoreCase(\"file\")) {     forceFile=true;   }   try {     Class<?> aClass=Class.forName(\"com.gs.fw.common.mithra.bulkloader.JtdsBcpBulkLoader\");     this.bulkConstructor=aClass.getDeclaredConstructor(String.class,String.class,String.class,Integer.TYPE,SybaseDatabaseType.class,Boolean.TYPE);   }  catch (  Exception e) {     getLogger().info(\"Sybase bulk loader not found. Bulk loading disabled.\");   } } "
"void onRendererCrashed(){   if (mRestoreStartedAtMillis != -1) {     mRestoreStartedAtMillis=-1;   } } "
"public void invalidate() throws LogException {   if (operationsLogger.isLoggable(Level.FINER)) {     operationsLogger.entering(TransientLogFile.class.getName(),\"invalidate\");   }   if (persistenceLogger.isLoggable(Level.FINEST)) {     persistenceLogger.log(Level.FINEST,\"Calling logMgr to release cookie: {0}\",new Long(cookie));   }   logMgr.release(cookie);   if (operationsLogger.isLoggable(Level.FINER)) {     operationsLogger.exiting(TransientLogFile.class.getName(),\"invalidate\");   } } "
"public Coord add(Coord coord){   return new Coord(x + coord.x,y + coord.y); } "
"public static Record createRecord(ModelRecord modelRecord) throws DataFileException {   Record record=new Record(modelRecord);   return record; } "
"private void computeCoordinates(Graphics gc,Point center,String label,Font font,Triplet<Integer,Integer,Dimension> previous){   int x=center.x;   int y=center.y;   Rectangle bbox=new Rectangle();   Dimension labelSize=Basic.getStringSize(gc,label,font).getSize();   if (labelSize.height < 1)   return;   bbox.setSize(labelSize);   if (rTree.size() == 0) {     bbox.setLocation(x - bbox.width / 2,y);     if (!rTree.overlaps(bbox)) {       Pair<String,Integer> pair=new Pair<>(label,font.getSize());       rTree.add(bbox,pair);       return;     }   }   int direction=previous.getFirst();   for (int k=1; true; k++) {     for (int i=0; i < 2; i++) {       if (direction == 3)       direction=0;  else       direction++;       for (int j=previous.getSecond(); j <= k; j++) { switch (direction) { case 0:           x+=useRectangleShape ? 8 : 5;         break; case 1:       y+=5;     break; case 2:   x-=useRectangleShape ? 8 : 5; break; case 3: y-=5; break; } bbox.setLocation(x - bbox.width / 2,y); if (!rTree.overlaps(bbox)) { Pair<String,Integer> pair=new Pair<>(label,font.getSize()); previous.setFirst(direction); previous.setSecond(j); previous.setThird(labelSize); rTree.add(bbox,pair); return; } } } } } "
"public boolean hasPhysicalStateEffect(){   Iterator<Effect> effectIterator=this.abnormalEffectMap.values().iterator();   while (effectIterator.hasNext()) {     Effect localEffect=effectIterator.next();     if (localEffect.isPhysicalState()) {       return true;     }   }   return false; } "
"protected void startJobAcquisitionThread(){   if (asyncJobAcquisitionThread == null) {     asyncJobAcquisitionThread=new Thread(asyncJobsDueRunnable);   }   asyncJobAcquisitionThread.start(); } "
"public static String toString(Object o) throws JSONException {   return toString(o,null); } "
"@Override public OrientedPoint copySelf(){   return this; } "
"@Override public int hashCode(){   return this.id.hashCode(); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_OTHER_IS_BANISHED(String value0){   return new SM_SYSTEM_MESSAGE(1400103,value0); } "
"public void addGossipMember(GossipMember member){   gossipMembers.add(member); } "
"public static SymbolTypeConfig parseSymbolTypeConfig(Class<?> localisationClass,Class<?> panelId,XMLFieldConfigEnumValue valueObj){   SymbolTypeConfig config=new SymbolTypeConfig(panelId);   String groupName=valueObj.getGroupName();   boolean isSeparateGroup=valueObj.isSeparateGroup();   if (groupName != null) {     config.setGroupName(groupName);   }   config.setSeparateGroup(isSeparateGroup);   for (  XMLFieldConfigEnumValueItem itemObj : valueObj.getItem()) {     config.addOption(itemObj.getId(),getLocalisedText(localisationClass,itemObj.getLabel()));   }   FieldList fieldList=valueObj.getFieldList();   if (fieldList != null) {     for (    XMLFieldConfigEnumValueField field : fieldList.getField()) {       config.addField(field.getId(),field.isEnabled());     }   }   return config; } "
"public static void syncCollapsedFromSummary2Viewer(final DataTable table,final ClassificationViewer classificationViewer){   final String classificationName=classificationViewer.getClassName();   if (table.getCollapsed(classificationName) != null && table.getCollapsed(classificationName).size() > 0) {     classificationViewer.getCollapsedIds().clear();     classificationViewer.getCollapsedIds().addAll(table.getCollapsed(classificationName));   } } "
"public static int calcTextWidth(Paint paint,String demoText){   return (int)paint.measureText(demoText); } "
"private void load(ByteBuffer input){   magic=input.getInt();   version=input.getInt();   type=input.getInt(); } "
"public static Map<String,Object> cancelOrderItem(DispatchContext ctx,Map<String,? extends Object> context){   LocalDispatcher dispatcher=ctx.getDispatcher();   Delegator delegator=ctx.getDelegator();   Locale locale=(Locale)context.get(\"locale\");   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   BigDecimal cancelQuantity=(BigDecimal)context.get(\"cancelQuantity\");   String orderId=(String)context.get(\"orderId\");   String orderItemSeqId=(String)context.get(\"orderItemSeqId\");   String shipGroupSeqId=(String)context.get(\"shipGroupSeqId\");   Map<String,String> itemReasonMap=UtilGenerics.checkMap(context.get(\"itemReasonMap\"));   Map<String,String> itemCommentMap=UtilGenerics.checkMap(context.get(\"itemCommentMap\"));   Map<String,String> itemQuantityMap=UtilGenerics.checkMap(context.get(\"itemQtyMap\"));   if ((cancelQuantity == null) && UtilValidate.isNotEmpty(itemQuantityMap)) {     String key=orderItemSeqId + \":\" + shipGroupSeqId;     if (UtilValidate.isNotEmpty(itemQuantityMap.get(key))) {       cancelQuantity=new BigDecimal(itemQuantityMap.get(key));     }   }   String itemMsgInfo=orderId + \" / \" + orderItemSeqId+ \" / \"+ shipGroupSeqId;   Security security=ctx.getSecurity();   boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,\"UPDATE\",security,delegator);   if (!hasPermission) {     return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderYouDoNotHavePermissionToChangeThisOrdersStatus\",locale));   }   Map<String,String> fields=UtilMisc.<String,String>toMap(\"orderId\",orderId);   if (orderItemSeqId != null) {     fields.put(\"orderItemSeqId\",orderItemSeqId);   }   if (shipGroupSeqId != null) {     fields.put(\"shipGroupSeqId\",shipGroupSeqId);   }   OrderReadHelper orh=new OrderReadHelper(delegator,orderId);   List<GenericValue> orderItemShipGroupAssocs=null;   try {     orderItemShipGroupAssocs=EntityQuery.use(delegator).from(\"OrderItemShipGroupAssoc\").where(fields).queryList();   }  catch (  GenericEntityException e) {     Debug.logError(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderErrorCannotGetOrderItemAssocEntity\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));   }   if (orderItemShipGroupAssocs != null) {     for (    GenericValue orderItemShipGroupAssoc : orderItemShipGroupAssocs) {       GenericValue orderItem=null;       String itemStatus=\"ITEM_CANCELLED\";       try {         orderItem=orderItemShipGroupAssoc.getRelatedOne(\"OrderItem\",false);       }  catch (      GenericEntityException e) {         Debug.logError(e,module);       }       if (orderItem == null) {         return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderErrorCannotCancelItemItemNotFound\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));       }       BigDecimal aisgaCancelQuantity=orderItemShipGroupAssoc.getBigDecimal(\"cancelQuantity\");       if (aisgaCancelQuantity == null) {         aisgaCancelQuantity=BigDecimal.ZERO;       }       BigDecimal availableQuantity=orderItemShipGroupAssoc.getBigDecimal(\"quantity\").subtract(aisgaCancelQuantity);       BigDecimal itemCancelQuantity=orderItem.getBigDecimal(\"cancelQuantity\");       if (itemCancelQuantity == null) {         itemCancelQuantity=BigDecimal.ZERO;       }       BigDecimal itemQuantity=orderItem.getBigDecimal(\"quantity\").subtract(itemCancelQuantity);       if (availableQuantity == null)       availableQuantity=BigDecimal.ZERO;       if (itemQuantity == null)       itemQuantity=BigDecimal.ZERO;       if (\"PURCHASE_ORDER\".equals(orh.getOrderTypeId())) {         BigDecimal receivedQty=orh.getItemReceivedQuantity(orderItem);         if (receivedQty.compareTo(BigDecimal.ZERO) > 0)         itemStatus=\"ITEM_COMPLETED\";         itemQuantity=itemQuantity.subtract(receivedQty);       }  else {         BigDecimal shippedQty=orh.getItemShippedQuantity(orderItem);         if (shippedQty.compareTo(BigDecimal.ZERO) > 0)         itemStatus=\"ITEM_COMPLETED\";         itemQuantity=itemQuantity.subtract(shippedQty);       }       BigDecimal thisCancelQty=null;       if (cancelQuantity != null) {         thisCancelQty=cancelQuantity;       }  else {         thisCancelQty=itemQuantity;       }       if (availableQuantity.compareTo(thisCancelQty) >= 0) {         if (availableQuantity.compareTo(BigDecimal.ZERO) == 0) {           continue;         }         orderItem.set(\"cancelQuantity\",itemCancelQuantity.add(thisCancelQty));         orderItemShipGroupAssoc.set(\"cancelQuantity\",aisgaCancelQuantity.add(thisCancelQty));         try {           List<GenericValue> toStore=UtilMisc.toList(orderItem,orderItemShipGroupAssoc);           delegator.storeAll(toStore);         }  catch (        GenericEntityException e) {           Debug.logError(e,module);           return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderUnableToSetCancelQuantity\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));         }         Map<String,Object> localCtx=UtilMisc.toMap(\"userLogin\",userLogin,\"orderId\",orderItem.getString(\"orderId\"),\"orderItemSeqId\",orderItem.getString(\"orderItemSeqId\"),\"shipGroupSeqId\",orderItemShipGroupAssoc.getString(\"shipGroupSeqId\"));         if (availableQuantity.compareTo(thisCancelQty) == 0) {           try {             dispatcher.runSync(\"deleteOrderItemShipGroupAssoc\",localCtx);           }  catch (          GenericServiceException e) {             Debug.logError(e,module);             return ServiceUtil.returnError(e.getMessage());           }         }         if (!\"Y\".equals(orderItem.getString(\"isPromo\"))) {           String reasonEnumId=null;           String changeComments=null;           if (UtilValidate.isNotEmpty(itemReasonMap)) {             reasonEnumId=itemReasonMap.get(orderItem.getString(\"orderItemSeqId\"));           }           if (UtilValidate.isNotEmpty(itemCommentMap)) {             changeComments=itemCommentMap.get(orderItem.getString(\"orderItemSeqId\"));           }           Map<String,Object> serviceCtx=FastMap.newInstance();           serviceCtx.put(\"orderId\",orderItem.getString(\"orderId\"));           serviceCtx.put(\"orderItemSeqId\",orderItem.getString(\"orderItemSeqId\"));           serviceCtx.put(\"cancelQuantity\",thisCancelQty);           serviceCtx.put(\"changeTypeEnumId\",\"ODR_ITM_CANCEL\");           serviceCtx.put(\"reasonEnumId\",reasonEnumId);           serviceCtx.put(\"changeComments\",changeComments);           serviceCtx.put(\"userLogin\",userLogin);           Map<String,Object> resp=null;           try {             resp=dispatcher.runSync(\"createOrderItemChange\",serviceCtx);           }  catch (          GenericServiceException e) {             Debug.logError(e,module);             return ServiceUtil.returnError(e.getMessage());           }           if (ServiceUtil.isError(resp)) {             return ServiceUtil.returnError((String)resp.get(ModelService.ERROR_MESSAGE));           }         }         try {           BigDecimal quantity=thisCancelQty.setScale(1,orderRounding);           String cancelledItemToOrder=UtilProperties.getMessage(resource,\"OrderCancelledItemToOrder\",locale);           dispatcher.runSync(\"createOrderNote\",UtilMisc.<String,Object>toMap(\"orderId\",orderId,\"note\",cancelledItemToOrder + orderItem.getString(\"productId\") + \" (\"+ quantity+ \")\",\"internalNote\",\"Y\",\"userLogin\",userLogin));         }  catch (        GenericServiceException e) {           Debug.logError(e,module);         }         if (thisCancelQty.compareTo(itemQuantity) >= 0) {           if (\"ITEM_COMPLETED\".equals(itemStatus) && \"SALES_ORDER\".equals(orh.getOrderTypeId())) {             Map<String,Object> cancelOrderItemInvResCtx=UtilMisc.toMap(\"orderId\",orderId,\"orderItemSeqId\",orderItem.getString(\"orderItemSeqId\"),\"shipGroupSeqId\",shipGroupSeqId,\"cancelQuantity\",thisCancelQty,\"userLogin\",userLogin);             try {               dispatcher.runSyncIgnore(\"cancelOrderItemInvResQty\",cancelOrderItemInvResCtx);             }  catch (            GenericServiceException e) {               Debug.logError(e,module);               return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderUnableToUpdateInventoryReservations\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));             }           }           Map<String,Object> statusCtx=UtilMisc.<String,Object>toMap(\"orderId\",orderId,\"orderItemSeqId\",orderItem.getString(\"orderItemSeqId\"),\"statusId\",itemStatus,\"userLogin\",userLogin);           try {             dispatcher.runSyncIgnore(\"changeOrderItemStatus\",statusCtx);           }  catch (          GenericServiceException e) {             Debug.logError(e,module);             return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderUnableToCancelOrderLine\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));           }         }  else {           Map<String,Object> invCtx=UtilMisc.<String,Object>toMap(\"orderId\",orderId,\"orderItemSeqId\",orderItem.getString(\"orderItemSeqId\"),\"shipGroupSeqId\",shipGroupSeqId,\"cancelQuantity\",thisCancelQty,\"userLogin\",userLogin);           try {             dispatcher.runSyncIgnore(\"cancelOrderItemInvResQty\",invCtx);           }  catch (          GenericServiceException e) {             Debug.logError(e,module);             return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderUnableToUpdateInventoryReservations\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));           }         }       }  else {         return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderInvalidCancelQuantityCannotCancel\",UtilMisc.toMap(\"thisCancelQty\",thisCancelQty),locale));       }     }   }  else {     return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,\"OrderErrorCannotCancelItemItemNotFound\",UtilMisc.toMap(\"itemMsgInfo\",itemMsgInfo),locale));   }   return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,\"OrderOrderItemCancelled\",locale)); } "
"public static double distance(S2Point p1,S2Point p2){   return Vector3D.angle(p1.vector,p2.vector); } "
"public static SinkRecord spoofSinkRecord(String topic,String value){   return spoofSinkRecord(topic,\"sink_task_test_field\",value); } "
"private UnitsOfMeasure(){   unitMap.put(\"pixel\",NonSI.PIXEL);   unitMap.put(\"metre\",SI.METRE);   unitMap.put(\"foot\",NonSI.FOOT); } "
"@Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){ switch (requestCode) { case REQUEST_STORAGE_READ_ACCESS_PERMISSION:     if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {       pickFromGallery();     }   break; default : super.onRequestPermissionsResult(requestCode,permissions,grantResults); } } "
"public boolean isBlockPopups(){   return isOptionEnabled(UrlFilterRuleOption.BLOCK_POPUPS); } "
"public DatabaseGetRegionsQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public void initialize(){   enqueue(new GetVersionMessageClass().doRequest());   enqueue(new MemoryGetIdMessageClass().doRequest());   enqueue(new SerialApiGetCapabilitiesMessageClass().doRequest());   enqueue(new SerialApiSetTimeoutsMessageClass().doRequest(150,15));   enqueue(new GetSucNodeIdMessageClass().doRequest()); } "
"public static SM_SYSTEM_MESSAGE STR_COMBINE_DO_NOT_HAVE_TOOL(String value0){   return new SM_SYSTEM_MESSAGE(1330041,value0); } "
"public PhotosGetAlbumsQuery count(Integer value){   return unsafeParam(\"count\",value); } "
"public XMLGrammarPoolImplExtension(){   super(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200465,skilltarget,skillname); } "
"public static boolean isUniformCollection(Collection<?> c,Class<?> e){   if (e == null) {     throw new IllegalArgumentException(\"Null reference type\");   }   if (c == null) {     throw new IllegalArgumentException(\"Null collection\");   }   if (c.isEmpty()) {     return false;   }   for (  Object o : c) {     if (o == null || !e.isAssignableFrom(o.getClass())) {       return false;     }   }   return true; } "
"public ForceDirectedLayout(String group,ForceSimulator fsim,boolean enforceBounds,boolean runonce){   super(group);   m_nodeGroup=PrefuseLib.getGroupName(group,Graph.NODES);   m_edgeGroup=PrefuseLib.getGroupName(group,Graph.EDGES);   m_enforceBounds=enforceBounds;   m_runonce=runonce;   m_fsim=fsim; } "
"public void multLocal(float scalar){   m00*=scalar;   m01*=scalar;   m02*=scalar;   m03*=scalar;   m10*=scalar;   m11*=scalar;   m12*=scalar;   m13*=scalar;   m20*=scalar;   m21*=scalar;   m22*=scalar;   m23*=scalar;   m30*=scalar;   m31*=scalar;   m32*=scalar;   m33*=scalar; } "
"public void addConnection(final IConnectionWithReconnect connection,final Runnable connector){ synchronized (connections) {     connections.put(connection,connector);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Hide_A_TO_B(String skilltarget,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200987,skilltarget,skillcaster,skillname); } "
"public void checkCurrentCredentials(Account account){   Intent service=new Intent(mFileActivity,OperationsService.class);   service.setAction(OperationsService.ACTION_CHECK_CURRENT_CREDENTIALS);   service.putExtra(OperationsService.EXTRA_ACCOUNT,account);   mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);   mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_checking_credentials)); } "
"public void destroyAndUnBindDestination(String destinationName) throws JMSException {   try {     getInitialContext().unbind(destinationName);   }  catch (  NamingException ne) {   } } "
"int generateBridgeSecret(){   SecureRandom randGen=new SecureRandom();   expectedBridgeSecret=randGen.nextInt(Integer.MAX_VALUE);   return expectedBridgeSecret; } "
"static String encode(ByteBufferRange range){   String start=Hex.encodeHexString(toArray(range.getStart()));   String end=Hex.encodeHexString(toArray(range.getEnd()));   int prefix=getCommonPrefixLength(start,end);   return start.substring(0,prefix) + ':' + start.substring(prefix)+ '-'+ end.substring(prefix); } "
"public synchronized void saveCustomPropertiesTo(File file){   if (file == null)   throw new NullPointerException(\"File cannot be null\");   if (file.isDirectory())   throw new IllegalArgumentException(\"Not a valid file: \" + file);   Properties prop=getCustomProperties(false);   if (prop != null && !prop.isEmpty())   storeProperties(prop,file); } "
"public void discardRecording(){   if (recorder != null) {     try {       recorder.stop();       recorder.release();       recorder=null;       if (file != null && file.exists() && !file.isDirectory()) {         file.delete();       }     }  catch (    IllegalStateException e) {     } catch (    RuntimeException e) {     }     isRecording=false;   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Dispel_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200659,skillcaster,skillname); } "
"private Grammar removeEntry(Entry entry){   if (entry.prev != null) {     entry.prev.next=entry.next;   }  else {     fGrammars[entry.bucket]=entry.next;   }   if (entry.next != null) {     entry.next.prev=entry.prev;   }   --fGrammarCount;   entry.grammar.entry=null;   return (Grammar)entry.grammar.get(); } "
"private void createInitialTab(){   String url=HomepageManager.getHomepageUri(getApplicationContext());   if (TextUtils.isEmpty(url))   url=UrlConstants.NTP_URL;   getTabCreator(false).launchUrl(url,TabLaunchType.FROM_MENU_OR_OVERVIEW); } "
"public void init$Children(){   children=new ASTNode[3];   setChild(new Opt(),1);   setChild(new List(),2); } "
"public void abort(){ } "
"public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_UPGRADE_LEVEL(String value0){   return new SM_SYSTEM_MESSAGE(1400137,value0); } "
"public void addAttribute(AXmlAttribute<?> attr){   if (attr == null)   throw new NullPointerException(\"AXmlAttribute is null\");   if (this.attributes == null)   this.attributes=new HashMap<String,AXmlAttribute<?>>();   this.attributes.put(attr.getName(),attr); } "
"public boolean hasNoDragOffset(){   return mViewPortHandler.hasNoDragOffset(); } "
"protected void captureResponseSize(HttpContent httpContent){   ByteBuf bufferedContent=httpContent.content();   int contentSize=bufferedContent.readableBytes();   responseBodySize.addAndGet(contentSize); } "
"private boolean checkNoAcquiredQuests(QuestStateList qsl){   if (noacquired != null && noacquired.size() > 0) {     for (    Integer questId : noacquired) {       QuestState qs=qsl.getQuestState(questId);       if (qs != null && (qs.getStatus() == QuestStatus.START || qs.getStatus() == QuestStatus.REWARD)) {         return false;       }     }   }   return true; } "
"@Override public void apply(NexusStreamParser np) throws Exception { } "
"public DataSizeAction(String group,String field,int bins,int scale){   super(group,NO_SIZE);   m_dataField=field;   setScale(scale);   setBinCount(bins); } "
"private ProxyBypassListSelector buildLocalBypassSelector(ProtocolDispatchSelector ps){   List<UriFilter> localBypassFilter=new ArrayList<UriFilter>();   localBypassFilter.add(new IELocalByPassFilter());   return new ProxyBypassListSelector(localBypassFilter,ps); } "
"private void addContribution(final SubHyperplane<Euclidean2D> sub,final BSPTree<Euclidean2D> node,final Iterable<BSPTree<Euclidean2D>> splitters,final boolean reversed){   @SuppressWarnings(\"unchecked\") final AbstractSubHyperplane<Euclidean2D,Euclidean1D> absSub=(AbstractSubHyperplane<Euclidean2D,Euclidean1D>)sub;   final Line line=(Line)sub.getHyperplane();   final List<Interval> intervals=((IntervalsSet)absSub.getRemainingRegion()).asList();   for (  final Interval i : intervals) {     final Vector2D startV=Double.isInfinite(i.getInf()) ? null : (Vector2D)line.toSpace((Point<Euclidean1D>)new Vector1D(i.getInf()));     final Vector2D endV=Double.isInfinite(i.getSup()) ? null : (Vector2D)line.toSpace((Point<Euclidean1D>)new Vector1D(i.getSup()));     final BSPTree<Euclidean2D> startN=selectClosest(startV,splitters);     final BSPTree<Euclidean2D> endN=selectClosest(endV,splitters);     if (reversed) {       segments.add(new ConnectableSegment(endV,startV,line.getReverse(),node,endN,startN));     }  else {       segments.add(new ConnectableSegment(startV,endV,line,node,startN,endN));     }   } } "
"@Override public String toString(){   return this.getClass().getSimpleName() + \": Excludes fields with these names: \" + blacklist.toString(); } "
"public ClearCacheRequest(Cache cache,Runnable callback){   super(Method.GET,null,null);   mCache=cache;   mCallback=callback; } "
"public Builder transparent(Boolean transparent){   this.transparent=transparent;   return this; } "
"public void addBodyDecl(BodyDecl node){   List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();   list.addChild(node); } "
"public Graph(Table nodes,boolean directed){   this(nodes,directed,DEFAULT_NODE_KEY,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY); } "
"@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException { } "
"void STAR_encoding_diag1(){   int i, j, stripe, k;   char[][] tmp;   tmp=new char[block_nbr + 1][block_size];   for (stripe=0; stripe < block_nbr + 1; stripe++) {     for (i=0; i < data_disk_nbr; i++) {       for (j=0; j < block_size; j++) {         k=(stripe - i + p) % p;         if (k < block_nbr) {           tmp[stripe][j]^=check_data[i][(stripe - i + p) % p * block_size + j];         }       }     }   }   for (i=0; i < block_nbr; i++) {     for (j=0; j < block_size; j++) {       tmp[i][j]=(char)(tmp[i][j] ^ tmp[block_nbr][j]);     }   }   for (i=0; i < block_nbr; i++) {     System.arraycopy(tmp[i],0,check_data[data_disk_nbr + 1],i * block_size,block_size);   } } "
"public boolean isCritical(){   return true; } "
"public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){   this.statusCode=statusCode;   this.data=data;   this.headers=headers;   this.notModified=notModified;   this.networkTimeMs=networkTimeMs; } "
"protected Udb82DatabaseType(){ } "
"public synchronized VisualTable addTable(String group,Table table){   return addTable(group,table,(Predicate)null); } "
"public boolean isOk(){   return ok; } "
"public static void openPlayStoreAppPage(Context context){   final String appPackageName=context.getPackageName();   try {     context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(\"market://details?id=\" + appPackageName)));   }  catch (  android.content.ActivityNotFoundException anfe) {     context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));   } } "
"Node(K key,Object value,Node<K,V> next){   this.key=key;   this.value=value;   this.next=next; } "
"public static final void sort(int[] a,double[] b,int length){   mergesort(a,b,0,length - 1); } "
"public void register(String key,ItemStack value){   register(key,matcherOf(value)); } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"public static <K,R>Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends ObservableSource<? extends R>> mapOfCases,ObservableSource<? extends R> defaultCase){   ObjectHelper.requireNonNull(caseSelector,\"caseSelector is null\");   ObjectHelper.requireNonNull(mapOfCases,\"mapOfCases is null\");   ObjectHelper.requireNonNull(defaultCase,\"defaultCase is null\");   return RxJavaPlugins.onAssembly(new ObservableSwitchCase<R,K>(caseSelector,mapOfCases,defaultCase)); } "
"public void recover(TxnManagerTransaction tmt) throws CannotRecoverException {   try {     for (int i=0; i < parts.length; i++) {       tmt.add(parts[i]);     }     tmt.modifyTxnState(ABORTED);   }  catch (  InternalManagerException ime) {     throw new CannotRecoverException(\"AbortRecord: recover: \" + ime.getMessage());   }   if (logger.isLoggable(Level.FINEST)) {     logger.log(Level.FINEST,\"AbortJob:recover recovered\");   } } "
"public <T>void bindTwoWay(@NotNull SettableValue<T> first,@NotNull SettableValue<T> second){   releaseTwoWay(first,second);   myTwoWayBindings.add(new TwoWayBinding<>(first,second)); } "
"public void removeUpdateListener(final BaseListener<? extends Tag> pListener){   listeners.remove(pListener); } "
"public boolean isCaseSensitive(){   return sensitive; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_INTERVAL_TO_B(String skilltarget,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201068,skilltarget,num0,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_SUBMIT(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1390258,value0,value1); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_CANT_GATHERING_B_LEVEL_CHECK(String value0){   return new SM_SYSTEM_MESSAGE(1400737,value0); } "
"@Override public SplitSubHyperplane<Euclidean3D> split(Hyperplane<Euclidean3D> hyperplane){   final Plane otherPlane=(Plane)hyperplane;   final Plane thisPlane=(Plane)getHyperplane();   final Line inter=otherPlane.intersection(thisPlane);   final double tolerance=thisPlane.getTolerance();   if (inter == null) {     final double global=otherPlane.getOffset(thisPlane);     if (global < -tolerance) {       return new SplitSubHyperplane<Euclidean3D>(null,this);     }  else     if (global > tolerance) {       return new SplitSubHyperplane<Euclidean3D>(this,null);     }  else {       return new SplitSubHyperplane<Euclidean3D>(null,null);     }   }   Vector2D p=thisPlane.toSubSpace((Point<Euclidean3D>)inter.toSpace((Point<Euclidean1D>)Vector1D.ZERO));   Vector2D q=thisPlane.toSubSpace((Point<Euclidean3D>)inter.toSpace((Point<Euclidean1D>)Vector1D.ONE));   Vector3D crossP=Vector3D.crossProduct(inter.getDirection(),thisPlane.getNormal());   if (crossP.dotProduct(otherPlane.getNormal()) < 0) {     final Vector2D tmp=p;     p=q;     q=tmp;   }   final SubHyperplane<Euclidean2D> l2DMinus=new org.hipparchus.geometry.euclidean.twod.Line(p,q,tolerance).wholeHyperplane();   final SubHyperplane<Euclidean2D> l2DPlus=new org.hipparchus.geometry.euclidean.twod.Line(q,p,tolerance).wholeHyperplane();   final BSPTree<Euclidean2D> splitTree=getRemainingRegion().getTree(false).split(l2DMinus);   final BSPTree<Euclidean2D> plusTree=getRemainingRegion().isEmpty(splitTree.getPlus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DPlus,new BSPTree<Euclidean2D>(Boolean.FALSE),splitTree.getPlus(),null);   final BSPTree<Euclidean2D> minusTree=getRemainingRegion().isEmpty(splitTree.getMinus()) ? new BSPTree<Euclidean2D>(Boolean.FALSE) : new BSPTree<Euclidean2D>(l2DMinus,new BSPTree<Euclidean2D>(Boolean.FALSE),splitTree.getMinus(),null);   return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(),new PolygonsSet(plusTree,tolerance)),new SubPlane(thisPlane.copySelf(),new PolygonsSet(minusTree,tolerance))); } "
"public GroupsEditPlaceQuery address(String value){   return unsafeParam(\"address\",value); } "
"public final Account removeAccountFromGameServer(int accountId){   return accountsOnGameServer.remove(accountId); } "
"public static String format(Date date){   return format(date,false,TIMEZONE_UTC); } "
"public void executeLsPacket(Runnable pkt){   execute(pkt); } "
"private String interpretMessage(Message message,boolean displayHex) throws IOException {   byte[] msgData=message.getData();   ByteArrayOutputStream out=new ByteArrayOutputStream();   if (!displayHex) {     return new String(msgData);   }  else {     HexDump.dump(msgData,0,out,0);     return new String(out.toByteArray());   } } "
"public static boolean after(GenericRecord first,GenericRecord second,String timestampFieldName){   return compareTimestamp(first,second,timestampFieldName) == 1; } "
"synchronized public int writeBulk(List<LogRecord> records) throws IOException {   int numRecords=0;   for (  LogRecord r : records) {     write(r);     numRecords++;   }   return numRecords; } "
"public void removeMember(String targetMemberName) throws ClusterException {   removeMemberFromReplGroup(targetMemberName);   try {     saveFile();   }  catch (  FileNotFoundException ex) {     throw new ClusterException(\"Failed to remove \" + targetMemberName + \" member from \"+ clusterConfigFile+ \". \"+ ex.toString(),ex);   } } "
"public static boolean nanSafeEqualsDoubles(Double d1,Double d2){   Boolean xIsNan=Double.isNaN(d1);   Boolean yIsNan=Double.isNaN(d2);   if ((xIsNan && yIsNan) || (d1.doubleValue() == d2.doubleValue())) {     return true;   }   return false; } "
"public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {   int dimension=image.length;   BitMatrix bits=new BitMatrix(dimension);   for (int i=0; i < dimension; i++) {     for (int j=0; j < dimension; j++) {       if (image[i][j]) {         bits.set(j,i);       }     }   }   return decode(bits,hints); } "
"public void saveAuxiliaryData() throws IOException {   if (getMeganFile().hasDataConnector() && !getMeganFile().isReadOnly()) {     if (dir != null) {       final MainViewer mainViewer=dir.getMainViewer();       if (mainViewer != null)       SyncDataTableAndTaxonomy.syncFormattingFromViewer2Summary(mainViewer,getDataTable());       for (      String cName : ClassificationManager.getAllSupportedClassifications()) {         if (dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) != null && dir.getViewerByClassName(ClassificationViewer.getClassName(cName)) instanceof ClassificationViewer) {           ClassificationViewer classificationViewer=(ClassificationViewer)dir.getViewerByClassName(ClassificationViewer.getClassName(cName));           SyncDataTableAndClassificationViewer.syncFormattingFromViewer2Summary(classificationViewer,getDataTable());         }       }     }     getDataTable().setColorTable(getChartColorManager().getColorTableName(),getChartColorManager().isColorByPosition(),getChartColorManager().getHeatMapTable().getName());     getDataTable().setColorEdits(getChartColorManager().getColorEdits());     byte[] userState=getDataTable().getUserStateAsBytes();     byte[] sampleAttributes=getSampleAttributeTable().getBytes();     Map<String,byte[]> label2data=new HashMap<>();     label2data.put(SampleAttributeTable.USER_STATE,userState);     label2data.put(SampleAttributeTable.SAMPLE_ATTRIBUTES,sampleAttributes);     getMeganFile().getDataConnector().putAuxiliaryData(label2data);   } } "
"@Override public Filter createFilter(){   return new AndExtended(); } "
"public boolean isSetStatus(){   return __isset_bit_vector.get(__STATUS_ISSET_ID); } "
"public boolean intersects(S2CellId id){   int pos=Collections.binarySearch(cellIds,id);   if (pos < 0) {     pos=-pos - 1;   }   if (pos < cellIds.size() && cellIds.get(pos).rangeMin().lessOrEquals(id.rangeMax())) {     return true;   }   return pos != 0 && cellIds.get(pos - 1).rangeMax().greaterOrEquals(id.rangeMin()); } "
"public static boolean isFloat(String s){   if (isEmpty(s))   return defaultEmptyOK;   boolean seenDecimalPoint=false;   if (s.startsWith(decimalPointDelimiter))   return false;   for (int i=0; i < s.length(); i++) {     char c=s.charAt(i);     if (c == decimalPointDelimiter.charAt(0)) {       if (!seenDecimalPoint) {         seenDecimalPoint=true;       }  else {         return false;       }     }  else {       if (!isDigit(c))       return false;     }   }   return true; } "
"public static int geometric(double p){   if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException(\"Probability must be between 0.0 and 1.0\");   return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p)); } "
"private char peek(int n){   return getLITERAL().charAt(idx + n); } "
"public JSONObject(){   this.map=new HashMap<String,Object>(); } "
"public List<ModelEntity> induceModelFromDb(Collection<String> messages){   ExecutorService executor=Executors.newFixedThreadPool(datasourceInfo.getMaxWorkerPoolSize());   TreeSet<String> tableNames=this.getTableNames(messages);   Map<String,Map<String,ColumnCheckInfo>> colInfo=getColumnInfo(tableNames,true,messages,executor);   List<ModelEntity> newEntList=new LinkedList<ModelEntity>();   boolean isCaseSensitive=getIsCaseSensitive(messages);   for (  String tableName : new TreeSet<String>(colInfo.keySet())) {     Map<String,ColumnCheckInfo> colMap=colInfo.get(tableName);     ModelEntity newEntity=new ModelEntity(tableName,colMap,modelFieldTypeReader,isCaseSensitive);     newEntList.add(newEntity);   }   executor.shutdown();   return newEntList; } "
"private void playBoosterSound(World world,BlockPos pos,double planarMotion){   if (!world.isRemote && planarMotion > 0.02D && world.rand.nextDouble() < planarMotion)   world.playSound(null,pos,SoundEvents.BLOCK_WOOD_BUTTON_CLICK_ON,SoundCategory.BLOCKS,1.0F,2.0F); } "
"public boolean isEnum(){   return kind == Type.TYPE_ENUM; } "
"@Override public Node nextSibling(){   if (fCurrentNode == null)   return null;   Node node=getNextSibling(fCurrentNode);   if (node != null) {     fCurrentNode=node;   }   return node; } "
"public AbstractInfoflow(BiDirICFGFactory icfgFactory){   if (icfgFactory == null)   this.icfgFactory=new DefaultBiDiICFGFactory();  else   this.icfgFactory=icfgFactory; } "
"public void addContactMech(String contactMechPurposeTypeId,String contactMechId){   if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException(\"You must specify a contactMechPurposeTypeId to add a ContactMech\");   contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId); } "
"public AppsGetCatalogQuery sort(AppsGetCatalogSort value){   return unsafeParam(\"sort\",value); } "
"private void transferToSpecificBuilderAndReset(){   if (currentTag == Tag.VERSION) {     dataBuilder.setVersion(buffer.toString());   }   addToRobotBuilder();   addToBrowserBuilder();   addToOperatingSystemBuilder();   addToBrowserPatternBuilder();   addToBrowserTypeBuilder();   addToBrowserOsMappingBuilder();   addToOperatingSystemPatternBuilder();   addToDeviceBuilder();   addToDevicePatternBuilder();   buffer=new StringBuilder(); } "
"public synchronized ZooKeeperClientBuilder sessionTimeoutMs(int sessionTimeoutMs){   this.sessionTimeoutMs=sessionTimeoutMs;   if (this.conectionTimeoutMs <= 0) {     this.conectionTimeoutMs=2 * sessionTimeoutMs;   }   return this; } "
"public DoubleColumn(int nrows,int capacity,double defaultValue){   super(double.class,new Double(defaultValue));   if (capacity < nrows) {     throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");   }   m_values=new double[capacity];   Arrays.fill(m_values,defaultValue);   m_size=nrows; } "
"public DistributedLogConfiguration(){   super();   addConfiguration(new SystemConfiguration()); } "
"public VideoCreateCommentQuery attachments(String... value){   return unsafeParam(\"attachments\",value); } "
"public static SetSpawn handle(World world,BlockPos spawnPoint){   SetSpawn event=new SetSpawn(world,spawnPoint);   OpenModLoader.getEventBus().post(event);   return event; } "
"public void onDrawerOpened(View drawerView){   super.onDrawerOpened(drawerView);   try {     if (pokemonGo != null && pokemonGo.getPlayerProfile() != null) {       renderProfile(pokemonGo.getPlayerProfile());     }   }  catch (  Exception e) {   }   getSupportActionBar().setTitle(R.string.profile); } "
"public Activity put(String key,Activity activity){   return (Activity)m_map.put(key,activity); } "
"private int sourceRegister(){   if (instruction instanceof Instruction23x)   return ((Instruction23x)instruction).getRegisterA();  else   if (instruction instanceof Instruction22c)   return ((Instruction22c)instruction).getRegisterA();  else   if (instruction instanceof Instruction21c)   return ((Instruction21c)instruction).getRegisterA();  else   throw new RuntimeException(\"Instruction is not a instance, array or static op\"); } "
"public static float saturate(float input){   return clamp(input,0f,1f); } "
"public int hashCode(){   final int PRIME=59;   int result=1;   final Object $context=this.getContexts();   result=result * PRIME + ($context == null ? 43 : $context.hashCode());   result=result * PRIME + (this.isOp() ? 79 : 97);   result=result * PRIME + (this.isIncludeGlobal() ? 79 : 97);   result=result * PRIME + (this.isIncludeGlobalWorld() ? 79 : 97);   result=result * PRIME + (this.isApplyGroups() ? 79 : 97);   result=result * PRIME + (this.isApplyGlobalGroups() ? 79 : 97);   result=result * PRIME + (this.isApplyGlobalWorldGroups() ? 79 : 97);   return result; } "
"private void remove_impl(ObjectInfo<T> oiToRemove){   if (oiToRemove.getPosInList() == -1)   throw new RuntimeException(\" Stored list- called remove but element already deleted !\");   if (m_Size == 0)   throw new RuntimeException(\" Stored list- called remove but list is empty !\");   if (oiToRemove.getBackwardsRef() != null)   oiToRemove.getBackwardsRef().setForwardRef(oiToRemove.getForwardRef());   if (oiToRemove.getForwardRef() != null)   oiToRemove.getForwardRef().setBackwardsRef(oiToRemove.getBackwardsRef());   if (m_Tail == oiToRemove)   m_Tail=oiToRemove.getForwardRef();   if (m_Head == oiToRemove)   m_Head=oiToRemove.getBackwardsRef();   m_Size--;   if (m_Support_Random_Scans && (m_BasicOccupied != null)) {     ArrayList<ObjectInfo<T>> last_al=m_LastChunk > 0 ? m_AllOccupiedPos.get(m_LastChunk) : m_BasicOccupied;     int my_chunknum=(oiToRemove.getPosInList() - 1) / NUMBER_OF_OCCUPIED_POS_QUOTA;     int my_pos_inside=(oiToRemove.getPosInList() - 1) % NUMBER_OF_OCCUPIED_POS_QUOTA;     ArrayList<ObjectInfo<T>> my_al=my_chunknum > 0 ? m_AllOccupiedPos.get(my_chunknum) : m_BasicOccupied;     if (m_Size > 0 && (my_chunknum != m_LastChunk || my_pos_inside != m_LastPos)) {       ObjectInfo<T> soi=last_al.get(m_LastPos);       soi.setPosInList(oiToRemove.getPosInList());       my_al.set(my_pos_inside,soi);     }     last_al.remove(m_LastPos);     if (m_LastPos == 0 && m_LastChunk > 0)     m_AllOccupiedPos.remove(m_LastChunk);     m_LastPos--;     if (m_LastPos < 0) {       if (m_LastChunk > 0) {         m_LastChunk--;         m_LastPos=NUMBER_OF_OCCUPIED_POS_QUOTA - 1;         if (m_LastChunk == 0)         m_AllOccupiedPos=null;       }  else       m_LastPos=0;     }   }   oiToRemove.setPosInList(-1); } "
"public StatsGetQuery appId(Integer value){   return unsafeParam(\"app_id\",value); } "
"public ChangeSet addAllToCollection(String path,Serializable... newItems){   return addAllToCollection(path,Arrays.asList(newItems)); } "
"public boolean simple_edges_bidirectional(){   return soot.PhaseOptions.getBoolean(options,\"simple-edges-bidirectional\"); } "
"public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput,List<String> activeNodes){   Map<String,List<Distributable>> nodeBlocksMap=new HashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   List<NodeBlockRelation> flattenedList=new ArrayList<NodeBlockRelation>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   Set<Distributable> uniqueBlocks=new HashSet<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   Set<String> nodes=new HashSet<String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   createFlattenedListFromMap(blockInfos,flattenedList,uniqueBlocks,nodes);   int noofNodes=(-1 == noOfNodesInput) ? nodes.size() : noOfNodesInput;   if (null != activeNodes) {     noofNodes=activeNodes.size();   }   int blocksPerNode=blockInfos.size() / noofNodes;   blocksPerNode=blocksPerNode <= 0 ? 1 : blocksPerNode;   Collections.sort(flattenedList);   Map<String,List<Distributable>> nodeAndBlockMapping=new LinkedHashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   createNodeVsBlockMapping(flattenedList,nodeAndBlockMapping);   createOutputMap(nodeBlocksMap,blocksPerNode,uniqueBlocks,nodeAndBlockMapping,activeNodes);   assignLeftOverBlocks(nodeBlocksMap,uniqueBlocks,blocksPerNode,activeNodes);   return nodeBlocksMap; } "
"public String toString(){   StringBuffer buf=new StringBuffer();   if (type != null) {     buf.append(type.toString() + \" (.\" + type.getExtension()+ \") file\");   }  else {     buf.append(\"unknown file format\");   }   if (byteLength != AudioSystem.NOT_SPECIFIED) {     buf.append(\", byte length: \" + byteLength);   }   buf.append(\", data format: \" + format);   if (frameLength != AudioSystem.NOT_SPECIFIED) {     buf.append(\", frame length: \" + frameLength);   }   return new String(buf); } "
"protected String millisecondsToYearMonth(long millis){   return getSimpleDateFormatForMilliseconds(\"yyyy-MM\",millis); } "
"public static boolean isNotSet(double value){   return Double.isInfinite(value) || (Math.abs(value) < 0.001); } "
"public boolean supportsSeek(){   return false; } "
"protected void scheduleEdgeProcessing(PathEdge<N,D> edge){   if (executor.isTerminating())   return;   executor.execute(new PathEdgeProcessingTask(edge));   propagationCount++; } "
"public Location add(Vector vec){   this.x+=vec.getX();   this.y+=vec.getY();   this.z+=vec.getZ();   return this; } "
"public InvocationConstraints(InvocationConstraint req,InvocationConstraint pref){   if (req != null) {     reqs=new InvocationConstraint[]{req};   }   if (pref != null) {     prefs=new InvocationConstraint[]{pref};   }   reduce(); } "
"public WeaponCursor queryWeapon(){   QueryHelper qh=new QueryHelper();   qh.Columns=null;   qh.Table=S.TABLE_WEAPONS;   qh.Selection=null;   qh.SelectionArgs=null;   qh.GroupBy=null;   qh.Having=null;   qh.OrderBy=null;   qh.Limit=null;   return new WeaponCursor(wrapJoinHelper(builderWeapon(),qh)); } "
"@Override public void mouseMoved(MouseEvent e){ synchronized (mouseLock) {     mouseX=StdDraw.userX(e.getX());     mouseY=StdDraw.userY(e.getY());   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_GETMONEY(int num0){   return new SM_SYSTEM_MESSAGE(1380001,num0); } "
"public static boolean shouldUseOpaqueTextboxBackground(int color){   return getLightnessForColor(color) > LIGHTNESS_OPAQUE_BOX_THRESHOLD; } "
"public static void o(Zdiagmat D,int w,int d){   int n=D.order;   int ww=w + d + 10;   int ncp=(Parameters.PageWidth) / ww;   int jl=0;   while (jl < n) {     int ju=Math.min(n,jl + ncp);     System.out.print(\"\\n\");     String head=\"\";     for (int j=jl; j < ju; j++) {       head=Integer.toString(j + D.bx);       while (head.length() < ww)       head=\" \" + head;       System.out.print(head);     }     System.out.print(\"\\n\");     for (int j=jl; j < ju; j++) {       System.out.print(ZtoEstring(new Z(D.re[j],D.im[j]),w,d));     }     System.out.print(\"\\n\");     jl=jl + ncp;   } } "
"private static Permission[] flatten(Permission[] pa){   List l=new ArrayList(pa.length);   for (int i=0; i < pa.length; i++) {     Permission p=pa[i];     if (p instanceof GrantPermission) {       l.addAll(Arrays.asList(((GrantPermission)p).grants));     }  else {       l.add(p);     }   }   return (Permission[])l.toArray(new Permission[l.size()]); } "
"public void generateAllDotDescForWagon(PrintWriter out){   generateAllDotDescForWagon(out,null); } "
"@RequestMapping(value=\"/race-data\",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceData> createRaceData(@RequestBody RaceData raceData) throws URISyntaxException {   log.debug(\"REST request to save RaceData : {}\",raceData);   if (raceData.getRaceDataId() != null) {     return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(\"raceData\",\"idexists\",\"A new raceData cannot already have an ID\")).body(null);   }   RaceData result=raceDataRepository.save(raceData);   return ResponseEntity.created(new URI(\"/api/race-data/\" + result.getRaceDataId())).headers(HeaderUtil.createEntityCreationAlert(\"raceData\",result.getRaceDataId().toString())).body(result); } "
"public AudioGetAlbumsQuery(VkApiClient client,UserActor actor){   super(client,\"audio.getAlbums\",GetAlbumsResponse.class);   accessToken(actor.getAccessToken()); } "
"@Override public void onMenuItemClick(int position){ switch (position) { case 0:     switchFragment(getString(R.string.menu_recommend),Constants.Topic.EXCELLENT);   break; case 1: switchFragment(getString(R.string.menu_hot),Constants.Topic.VOTE); break; case 2: switchFragment(getString(R.string.menu_newest),Constants.Topic.NEWEST); break; case 3: switchFragment(getString(R.string.menu_nobody),Constants.Topic.NOBODY); break; case 4: switchFragment(getString(R.string.menu_jobs),Constants.Topic.JOBS); break; case 5: switchFragment(getString(R.string.menu_wiki),Constants.Topic.WIKI); break; case 6: mToolBar.setTitle(getString(R.string.menu_vote)); mTopicListByMeFragment.TYPE=Constants.User.USER_TOPIC_VOTES; toUserFragment(); break; case 7: mToolBar.setTitle(getString(R.string.menu_topic)); mTopicListByMeFragment.TYPE=Constants.User.USER_TOPIC_MY; toUserFragment(); break; case 8: OpenWebViewUtils.myReply(MainActivity.this,mUserInfoEntity.getData().getLinks().getReplies_web_view()); break; } if (position != 8) { mMenuAdapter.setSelectPosition(position); mMenuAdapter.notifyDataSetChanged(); mDrawerLayout.closeDrawers(); } } "
"@ExceptionHandler(TypeNotFoundException.class) @ResponseStatus(value=HttpStatus.NOT_FOUND) public @ResponseBody ErrorResponse resolveTypeDescriptorNotFoundException(TypeNotFoundException e) throws IOException {   if (logger.isLoggable(Level.FINE))   logger.fine(\"type descriptor for typeName: \" + e.getTypeName() + \" not found, returning error response\");   return new ErrorResponse(new ErrorMessage(\"Type: \" + e.getTypeName() + \" is not registered in space\")); } "
"public PersistentCookieStore(Context context){   cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);   cookies=new HashMap<String,ConcurrentHashMap<String,Cookie>>();   Map<String,?> prefsMap=cookiePrefs.getAll();   for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {     if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {       String[] cookieNames=TextUtils.split((String)entry.getValue(),\",\");       for (      String name : cookieNames) {         String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);         if (encodedCookie != null) {           Cookie decodedCookie=decodeCookie(encodedCookie);           if (decodedCookie != null) {             if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,Cookie>());             cookies.get(entry.getKey()).put(name,decodedCookie);           }         }       }     }   } } "
"@Override public String toString(){   StringBuilder builder=new StringBuilder();   builder.append(super.toString());   builder.append('{');   for (int i=0; i < delegates.length; i++) {     if (i > 0) {       builder.append(',');     }     builder.append(delegates[i]);   }   builder.append('}');   return builder.toString(); } "
"public static boolean createNewLockFile(String filePath,FileType fileType) throws IOException {   filePath=filePath.replace(\"\\\\\",\"/\"); switch (fileType) { case HDFS: case VIEWFS:     Path path=new Path(filePath);   FileSystem fs=path.getFileSystem(configuration); if (fs.createNewFile(path)) {   fs.deleteOnExit(path);   return true; } return false; case LOCAL: default : File file=new File(filePath); return file.createNewFile(); } } "
"default boolean hasDataFromPeer(){   return false; } "
"public static void displayMessages(NodeInterface destinationTreeNode,TransferredData transferredData,int action){   if ((destinationTreeNode == null) || (transferredData == null)) {     return;   }   String actionString=\"???\";   if (action == TransferHandler.MOVE) {     actionString=\"Moved\";   }  else   if (action == TransferHandler.COPY) {     actionString=\"Copied\";   }   String destinationString=destinationTreeNode.getHandler().getDestinationText(destinationTreeNode);   for (int index=0; index < transferredData.getDataListSize(); index++) {     NodeInterface nodeToTransfer=(NodeInterface)transferredData.getTreePath(index).getLastPathComponent();     SelectedFiles selectedFiles=nodeToTransfer.getHandler().getSLDContents(nodeToTransfer);     for (    SLDDataInterface sldData : selectedFiles.getSldData()) {       ConsoleManager.getInstance().information(DataFlavourManager.class,String.format(\"%s %s -> %s\",actionString,sldData.getLayerName(),destinationString));     }   } } "
"@Override @Deprecated public int writeBulk(List<LogRecord> records) throws IOException {   return getLedgerWriter(records.get(0).getTransactionId(),false).writeBulk(records); } "
"@Override public boolean isFingerprintRegistered(){   return impl.isFingerprintRegistered(); } "
"public static boolean coordinateIsValid(String coordinate){   if (coordinate == null || coordinate.trim().isEmpty()) {     return false;   }   Matcher matcher=POINT_PATTERN.matcher(coordinate);   if (!matcher.find()) {     return false;   }   double longitude=0.0;   double latitude=0.0;   try {     longitude=Double.parseDouble(matcher.group(1));     latitude=Double.parseDouble(matcher.group(2));   }  catch (  NumberFormatException ex) {     return false;   }   return longitude >= LONG_MIN && longitude <= LONG_MAX && latitude >= LAT_MIN && latitude <= LAT_MAX; } "
"public static void main(String[] args){   try {     ProgramProperties.setProgramName(\"ReferencesAnnotator\");     ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);     PeakMemoryUsageMonitor.start();     (new ReferencesAnnotator()).run(args);     System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());     System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());     System.exit(0);   }  catch (  Exception ex) {     Basic.caught(ex);     System.exit(1);   } } "
"public int apply(ProgressListener progress) throws CanceledException {   final Graph overlapGraphWorkingCopy=new Graph();   final NodeMap<Node> new2oldNode=new NodeMap<>(overlapGraphWorkingCopy);   final EdgeMap<Edge> new2oldEdge=new EdgeMap<>(overlapGraphWorkingCopy); {     progress.setSubtask(\"Copying graph\");     progress.setMaximum(overlapGraph.getNumberOfNodes() + overlapGraph.getNumberOfEdges());     progress.setProgress(0);     NodeMap<Node> old2newNode=new NodeMap<>(this.overlapGraph);     for (Node v=this.overlapGraph.getFirstNode(); v != null; v=this.overlapGraph.getNextNode(v)) {       final Node w=overlapGraphWorkingCopy.newNode(v.getInfo());       w.setData(v.getData());       new2oldNode.set(w,v);       old2newNode.set(v,w);       progress.incrementProgress();     }     for (Edge e=this.overlapGraph.getFirstEdge(); e != null; e=this.overlapGraph.getNextEdge(e)) {       final Edge f=overlapGraphWorkingCopy.newEdge(old2newNode.get(e.getSource()),old2newNode.get(e.getTarget()),e.getInfo());       new2oldEdge.set(f,e);       progress.incrementProgress();     }   }   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();   progress.setSubtask(\"Extracting paths\");   progress.setMaximum(overlapGraphWorkingCopy.getNumberOfNodes());   progress.setProgress(0);   final List<Node> toDelete=new ArrayList<>(overlapGraphWorkingCopy.getNumberOfNodes());   final EdgeMap<Integer> edgeWeights=new EdgeMap<>(overlapGraphWorkingCopy);   for (Node v=overlapGraphWorkingCopy.getFirstNode(); v != null; v=v.getNext()) {     if (v.getInDegree() == 0) {       visitNodesRec(v,edgeWeights);     }     progress.incrementProgress();   }   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();   final List<Node[]> pathsList=new ArrayList<>();   progress.setSubtask(\"Extracting paths\");   final int initialNumberOfEdges=overlapGraphWorkingCopy.getNumberOfEdges();   progress.setMaximum(initialNumberOfEdges);   progress.setProgress(0);   while (overlapGraphWorkingCopy.getNumberOfEdges() > 0) {     Edge bestEdge=overlapGraphWorkingCopy.getFirstEdge();     for (Edge e=overlapGraphWorkingCopy.getFirstEdge(); e != null; e=overlapGraphWorkingCopy.getNextEdge(e)) {       if (edgeWeights.get(e) > edgeWeights.get(bestEdge))       bestEdge=e;     }     Node v=bestEdge.getSource();     final List<Node> path=new ArrayList<>();     path.add(new2oldNode.get(bestEdge.getSource()));     int weight=edgeWeights.get(bestEdge);     while (v.getOutDegree() > 0) {       Node w=null;       for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {         int eWeight=edgeWeights.get(f);         if (eWeight == weight) {           w=f.getTarget();           weight-=(Integer)f.getInfo();           break;         }       }       if (w == null)       throw new RuntimeException(\"w==null\");       path.add(new2oldNode.get(w));       toDelete.add(v);       v=w;     }     toDelete.add(v);     for (    Node z : toDelete) {       overlapGraphWorkingCopy.deleteNode(z);     }     toDelete.clear();     for (Edge z=overlapGraphWorkingCopy.getFirstEdge(); z != null; z=z.getNext()) {       edgeWeights.set(z,null);     }     for (Node z=overlapGraphWorkingCopy.getFirstNode(); z != null; z=z.getNext()) {       if (z.getInDegree() == 0) {         visitNodesRec(z,edgeWeights);       }     }     pathsList.add(path.toArray(new Node[path.size()]));     progress.setProgress(initialNumberOfEdges - overlapGraphWorkingCopy.getNumberOfEdges());   }   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();   final List<Node> singletonList=new ArrayList<>();   for (Node v=overlapGraphWorkingCopy.getFirstNode(); v != null; v=overlapGraphWorkingCopy.getNextNode(v)) {     int readId=(Integer)v.getInfo();     if (readId2ContainedReads != null && readId < readId2ContainedReads.length && readId2ContainedReads[readId] != null && readId2ContainedReads[readId].size() > 0)     pathsList.add(new Node[]{v});  else     singletonList.add(new2oldNode.get(v));   }   paths=pathsList.toArray(new Node[pathsList.size()][]);   singletons=singletonList.toArray(new Node[singletonList.size()]);   return paths.length; } "
"private static ServiceTypeBase toServiceTypeBase(Class cls,boolean needCodebase) throws MarshalException {   if (cls == null)   return null;   SoftReference cref=(SoftReference)serviceMap.get(cls);   ServiceTypeBase stype=null;   if (cref != null)   stype=(ServiceTypeBase)cref.get();   if (stype == null) {     stype=new ServiceTypeBase(new ServiceType(cls,toServiceType(cls.getSuperclass()),toServiceType(cls.getInterfaces())),null);     serviceMap.put(cls,new SoftReference(stype));   }   if (needCodebase && stype.codebase == null)   stype.setCodebase(cls);   return stype; } "
"public DrawerObject(){   selectedId=R.id.action_home; } "
"@Override public Writer append(char c) throws IOException {   try {     beforeWrite(1);     out.append(c);     afterWrite(1);   }  catch (  IOException e) {     handleIOException(e);   }   return this; } "
"public static byte[] objectToBytes(Object obj) throws java.io.IOException {   ByteArrayOutputStream bos=new ByteArrayOutputStream();   ObjectOutputStream oos=new ObjectOutputStream(bos);   oos.writeObject(obj);   oos.flush();   oos.close();   bos.close();   byte[] data=bos.toByteArray();   return data; } "
"public ServerRequest(RequestTypeOuterClass.RequestType type,GeneratedMessage req){   RequestOuterClass.Request.Builder reqBuilder=RequestOuterClass.Request.newBuilder();   reqBuilder.setRequestMessage(req.toByteString());   reqBuilder.setRequestType(type);   this.request=reqBuilder.build();   this.type=type; } "
"public static boolean copyFile(File file,File copy){   if (file == null || copy == null)   throw new NullPointerException(\"File cannot be null\");   if (!file.isFile() || copy.isDirectory())   throw new IllegalArgumentException(\"Not a valid file\");   FileInputStream fis=null;   FileOutputStream fos=null;   try {     fis=new FileInputStream(file);     fos=new FileOutputStream(copy);     int bytes;     byte[] packet=new byte[COPY_PACKET_SIZE];     while ((bytes=fis.read(packet,0,COPY_PACKET_SIZE)) != -1)     fos.write(packet,0,bytes);     return true;   }  catch (  Exception e) {     LOGGER.log(Level.SEVERE,\"Error copying file\",e);     return false;   }  finally {     try {       if (fos != null)       fos.close();     }  catch (    Exception e) {       LOGGER.log(Level.SEVERE,\"Problem closing target stream\",e);     }     try {       if (fis != null)       fis.close();     }  catch (    Exception e) {       LOGGER.log(Level.SEVERE,\"Problem closing source stream\",e);     }   } } "
"public synchronized void resetColumns(SegmentMetadata segmentMetadata,DimensionDictionary dimensionDictionary){ synchronized (mutex) {     Map<String,Set<Interval>> dimensionIntervals=segmentMetadata.getDimensionIntervals();     Map<String,Set<Interval>> metricIntervals=segmentMetadata.getMetricIntervals();     workingIntervals.clear();     for (    Map.Entry<String,Set<Interval>> nameIntervals : dimensionIntervals.entrySet()) {       String physicalName=nameIntervals.getKey();       String apiName=getLogicalColumnName(physicalName);       Dimension dimension=dimensionDictionary.findByApiName(apiName);       if (dimension == null) {         continue;       }       DimensionColumn dimensionColumn=DimensionColumn.addNewDimensionColumn(this,dimension);       workingIntervals.put(dimensionColumn,nameIntervals.getValue());     }     for (    Map.Entry<String,Set<Interval>> nameIntervals : metricIntervals.entrySet()) {       MetricColumn metricColumn=MetricColumn.addNewMetricColumn(this,nameIntervals.getKey());       workingIntervals.put(metricColumn,nameIntervals.getValue());     }     commit();   } } "
"public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){   if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {     int tempSpec=widthMeasureSpec;     widthMeasureSpec=heightMeasureSpec;     heightMeasureSpec=tempSpec;   }   int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);   int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);   if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {     width=widthMeasureSpec;     height=heightMeasureSpec;   }  else   if (mVideoWidth > 0 && mVideoHeight > 0) {     int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);     int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);     int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);     int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);     if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {       float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;       float displayAspectRatio; switch (mCurrentAspectRatio) { case IRenderView.AR_16_9_FIT_PARENT:         displayAspectRatio=16.0f / 9.0f;       if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;     break; case IRenderView.AR_4_3_FIT_PARENT:   displayAspectRatio=4.0f / 3.0f; if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio; break; case IRenderView.AR_ASPECT_FIT_PARENT: case IRenderView.AR_ASPECT_FILL_PARENT: case IRenderView.AR_ASPECT_WRAP_CONTENT: default : displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight; if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen; break; } boolean shouldBeWider=displayAspectRatio > specAspectRatio; switch (mCurrentAspectRatio) { case IRenderView.AR_ASPECT_FIT_PARENT: case IRenderView.AR_16_9_FIT_PARENT: case IRenderView.AR_4_3_FIT_PARENT: if (shouldBeWider) { width=widthSpecSize; height=(int)(width / displayAspectRatio); }  else { height=heightSpecSize; width=(int)(height * displayAspectRatio); } break; case IRenderView.AR_ASPECT_FILL_PARENT: if (shouldBeWider) { height=heightSpecSize; width=(int)(height * displayAspectRatio); }  else { width=widthSpecSize; height=(int)(width / displayAspectRatio); } break; case IRenderView.AR_ASPECT_WRAP_CONTENT: default : if (shouldBeWider) { width=Math.min(mVideoWidth,widthSpecSize); height=(int)(width / displayAspectRatio); }  else { height=Math.min(mVideoHeight,heightSpecSize); width=(int)(height * displayAspectRatio); } break; } }  else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) { width=widthSpecSize; height=heightSpecSize; if (mVideoWidth * height < width * mVideoHeight) { width=height * mVideoWidth / mVideoHeight; }  else if (mVideoWidth * height > width * mVideoHeight) { height=width * mVideoHeight / mVideoWidth; } }  else if (widthSpecMode == View.MeasureSpec.EXACTLY) { width=widthSpecSize; height=width * mVideoHeight / mVideoWidth; if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) { height=heightSpecSize; } }  else if (heightSpecMode == View.MeasureSpec.EXACTLY) { height=heightSpecSize; width=height * mVideoWidth / mVideoHeight; if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) { width=widthSpecSize; } }  else { width=mVideoWidth; height=mVideoHeight; if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) { height=heightSpecSize; width=height * mVideoWidth / mVideoHeight; } if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) { width=widthSpecSize; height=width * mVideoHeight / mVideoWidth; } } }  else { } mMeasuredWidth=width; mMeasuredHeight=height; } "
"@Override public void close(){   getConceptLog().clearTransaction();   try {     graph.close();   }  catch (  Exception e) {     throw new RuntimeException(e);   } } "
"@Override public String resolveTemplateParameter(TemplateParameter templateParameter,ContextInfo contextInfo){   SegmentContextParameters segmentParameter=SegmentContextParameters.fromName(templateParameter.getName());   if (segmentParameter == null) {     throw new UnknownTemplateParameterNameException(templateParameter.toString(),String.format(\"Unknown Segment Template Parameter Name '%s'. Supported Segment Parameter Names: %s'\",templateParameter.getName(),SegmentContextParameters.getSupportedContextParameters()));   }   return getParameterValue(templateParameter,segmentParameter,contextInfo); } "
"public static boolean isExtension(String filename,String[] extensions){   if (filename == null) {     return false;   }   if (extensions == null || extensions.length == 0) {     return indexOfExtension(filename) == -1;   }   String fileExt=getExtension(filename);   for (  String extension : extensions) {     if (fileExt.equals(extension)) {       return true;     }   }   return false; } "
"public int append_file1(String appender_file_id,byte[] file_buff,int offset,int length) throws IOException, MyException {   String[] parts=new String[2];   this.errno=this.split_file_id(appender_file_id,parts);   if (this.errno != 0) {     return this.errno;   }   return this.append_file(parts[0],parts[1],file_buff,offset,length); } "
"public synchronized void increaseCurrentCounter(){   counters[currentCounter]=counters[currentCounter] + 1; } "
"@Override public void put(K key,V value){   Item cur=map.get(key);   if (cur != null) {     cur.value=value;     moveToHead(cur);     return;   }   if (map.size() >= maxSize && maxSize != 0) {     cur=endItem.previous;     map.remove(cur.key);     removeItem(cur);   }   Item item=new Item(key,value);   insertHead(item);   map.put(key,item); } "
"@TargetApi(Build.VERSION_CODES.LOLLIPOP) public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {   ArrayUtils.checkOffsetAndCount(bytes.length,byteOffset,byteCount);   if (byteCount == 0) {     return;   }   try {     while (byteCount > 0) {       int bytesWritten=Os.write(fd,bytes,byteOffset,byteCount);       byteCount-=bytesWritten;       byteOffset+=bytesWritten;     }   }  catch (  ErrnoException errnoException) {     throw new IOException(errnoException);   } } "
"private void requestForDownload(OCFile file){   Intent i=new Intent(mContext,FileDownloader.class);   i.putExtra(FileDownloader.EXTRA_ACCOUNT,mAccount);   i.putExtra(FileDownloader.EXTRA_FILE,file);   mContext.startService(i);   mTransferWasRequested=true; } "
"public boolean isUploading(Account account,OCFile file){   if (account == null || file == null)   return false;   return (mPendingUploads.contains(account.name,file.getRemotePath())); } "
"public MarketReorderItemsQuery reorderItems(UserActor actor,int ownerId,int itemId){   return new MarketReorderItemsQuery(getClient(),actor,ownerId,itemId); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public RawInterfaceDecl fullCopy(){   RawInterfaceDecl tree=(RawInterfaceDecl)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) { switch (i) { case 2: case 3: case 4:         tree.children[i]=new List();       continue;   }   ASTNode child=(ASTNode)children[i];   if (child != null) {     child=child.fullCopy();     tree.setChild(child,i);   } } } return tree; } "
"void stop(){   if (!configuration.customExecutor) {     ((ExecutorService)taskExecutor).shutdownNow();   }   if (!configuration.customExecutorForCachedImages) {     ((ExecutorService)taskExecutorForCachedImages).shutdownNow();   }   cacheKeysForImageAwares.clear();   uriLocks.clear(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201163,num0,skillname); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200430,skilltarget,skillname); } "
"public static Object evaluateProvisioningTimeBindings(Object state,List<Binding> bindings,Map<String,Object> provisionedResources){   Object result=state;   for (  Binding binding : bindings) {     if (!binding.isProvisioningTimeBinding()) {       continue;     }     try {       result=evaluateProvisioningTimeBinding(binding,state,provisionedResources);     }  catch (    ReflectiveOperationException|IOException e) {       throw new RuntimeException(e);     }   }   return result; } "
"public static NumericSummaryTable create(String tableName){   return new NumericSummaryTable(tableName); } "
"public void shuffleTrainingSet(){   utils.shuffleList(TrainingFiles); } "
"public static void o(Zmat A,int w,int d){   int nr=A.nrow;   int nc=A.ncol;   A.getProperties();   boolean real=true;   real:   for (int i=A.bx; i <= A.rx; i++) {     for (int j=A.bx; j <= A.cx; j++) {       if (A.im[i - A.bx][j - A.bx] != 0.) {         real=false;         break real;       }     }   }   if (!real) {     String temp=Integer.toString(nr + A.bx - 1);     int rfw=temp.length() + 1;     int ww=w + d + 10;     int ncp=(Parameters.PageWidth - rfw) / ww;     int jl=0;     while (jl < nc) {       int ju=Math.min(nc,jl + ncp);       System.out.print(\"\\n\");       String head=\"\";       while (head.length() < rfw)       head=head + \" \";       System.out.print(head);       for (int j=jl; j < ju; j++) {         head=Integer.toString(j + A.bx);         while (head.length() < ww)         head=\" \" + head;         System.out.print(head);       }       System.out.print(\"\\n\");       for (int i=0; i < nr; i++) {         String row=Integer.toString(i + A.bx);         while (row.length() < rfw)         row=\" \" + row;         System.out.print(row);         for (int j=jl; j < ju; j++) {           String snum=DoubletoEstring(A.re[i][j],w,d);           if (A.im[i][j] < 0)           snum=snum + \" - \" + DoubletoEstring(-A.im[i][j],d + 6,d)+ \"i\";  else           snum=snum + \" + \" + DoubletoEstring(A.im[i][j],d + 6,d)+ \"i\";           System.out.print(snum);         }         System.out.print(\"\\n\");       }       jl=jl + ncp;     }   }  else {     String temp=Integer.toString(A.rx);     int rfw=temp.length() + 1;     int ncp=(Parameters.PageWidth - rfw) / w;     int jl=A.bx;     while (jl <= A.cx) {       int ju=Math.min(A.cx,jl + ncp - 1);       System.out.print(\"\\n\");       String head=\"\";       while (head.length() < rfw)       head=head + \" \";       System.out.print(head);       for (int j=jl; j <= ju; j++) {         head=Integer.toString(j);         while (head.length() < w)         head=\" \" + head;         System.out.print(head);       }       System.out.print(\"\\n\");       for (int i=A.bx; i <= A.rx; i++) {         String row=Integer.toString(i);         while (row.length() < rfw)         row=\" \" + row;         System.out.print(row);         for (int j=jl; j <= ju; j++)         System.out.print(DoubletoEstring(A.re[i - A.bx][j - A.bx],w,d));         System.out.print(\"\\n\");       }       jl=jl + ncp;     }   } } "
"private void writeSudoUserinformationToFile(){   PrintWriter pw;   try {     pw=new PrintWriter(Settings.sServerInfo);     pw.println(EncryptionManager.encrypt64bits(sSudoID));     pw.println(EncryptionManager.encrypt64bits(sSudoPassword));     pw.println(EncryptionManager.encrypt64bits(sEmailAddress));     pw.println(EncryptionManager.encrypt64bits(Boolean.toString(isMakeSudoId)));     pw.close();   }  catch (  FileNotFoundException e) {     System.out.println(\"serverinfo.jrc do not exist\");   } catch (  Exception e) {     e.printStackTrace();   } } "
"public CaughtExceptionRef newCaughtExceptionRef(){   return new JCaughtExceptionRef(); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_A_TO_ME(String value0){   return new SM_SYSTEM_MESSAGE(1201093,value0); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200530,skilltarget,skillname); } "
"public final boolean useSkill(int skillId){   return useSkill(skillId,1); } "
"public APIUser(String username){   this.username=username; } "
"public TIntObjectHashMap(){   super(); } "
"public boolean isItemForce(){   return true; } "
"public Builder preProcessor(BitmapProcessor preProcessor){   this.preProcessor=preProcessor;   return this; } "
"public void java_io_ObjectOutputStream_getObjectFieldValue(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   throw new NativeMethodNotSupportedException(method); } "
"public static int calculatevCenterServerCount(int vmconcurrentcount,int vcvmlimit){   Float f=((float)vmconcurrentcount / (float)vcvmlimit);   f=(float)Math.ceil(f);   final int i=f.intValue();   return i; } "
"@Override public void start(){   m_line.start();   super.start(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Summon_A_TO_SELF(String skillcaster,String value0,String skillname){   return new SM_SYSTEM_MESSAGE(1200880,skillcaster,value0,skillname); } "
"private static boolean itemStackIngredientsMatch(ItemStack A,ItemStack B){   if (A == null && B == null)   return true;   if (A == null || B == null)   return false;   if (A.getMetadata() == OreDictionary.WILDCARD_VALUE || B.getMetadata() == OreDictionary.WILDCARD_VALUE)   return A.getItem() == B.getItem();   return ItemStack.areItemsEqual(A,B); } "
"public EnvironmentVariablePanel(ExpressionFilterInterface parent){   this.parent=parent;   createUI(); } "
"public ByteBuffer flushAndReleaseBuffer() throws IOException {   _lock.lock();   try {     _flushPending=true;     while (_bufferUseCount != 0) {       _flushReady.await();     }     _buffer.flip();     if (_buffer.limit() != 0 && _modified) {       if (_backingFile == null) {         _backingFile=Files.createTempFile(\"tablebuffer\",\".tmp\");       }       _log.debug(\"Flushing buffer for index {} to {} ({}/{} bytes)\",_startIndex,_backingFile,_buffer.limit(),_blockSize);       try (ByteChannel out=Files.newByteChannel(_backingFile,WRITE)){         out.write(_buffer);       }      }  else {       _log.debug(\"Releasing unmodified buffer for index {}\",_startIndex);     }     ByteBuffer oldBuffer=_buffer;     _buffer=null;     _loaded=false;     return oldBuffer;   }  catch (  InterruptedException e) {     throw Throwables.propagate(e);   }  finally {     _flushPending=false;     _flushComplete.signalAll();     _lock.unlock();   } } "
"public void moveRelativeTo(float dx,float dy){   moveTo(currentXOffset + dx,currentYOffset + dy); } "
"public static final void emoteStartDancing4(Npc owner){   owner.unsetState(CreatureState.NPC_IDLE);   owner.setState(CreatureState.ACTIVE);   PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,19,0)); } "
"public ConjugateGradient(final IterationManager manager,final double delta,final boolean check) throws NullArgumentException {   super(manager);   this.delta=delta;   this.check=check; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCMPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200394,num0,skillname); } "
"@Override protected void initData(){ } "
"protected void skip(){   do {     readBlock();   }  while ((blockSize > 0) && !err()); } "
"public void replaceInFile(String oldStr,String newStr,int fromIndex,boolean isOneIteration) throws IOException {   int next=0;   int indexCounter=1;   String line=null;   if (fromIndex <= 0)   fromIndex=0;   line=sb.toString();   while ((next=line.indexOf(oldStr,next)) != -1) {     if (indexCounter >= fromIndex) {       line=sb.replace(next,next + oldStr.length(),newStr).toString();       if (isOneIteration)       return;     }     indexCounter++;   } } "
"public GroupsSetCallbackSettingsQuery boardPostEdit(Boolean value){   return unsafeParam(\"board_post_edit\",value); } "
"public PhotosObject(Activity a,int photosType){   this.adapter=new PhotoAdapter(a,new ArrayList<Photo>());   this.service=PhotoService.getService();   this.requestKey=Mysplash.getInstance().getUser();   this.photosType=photosType;   this.photosOrder=PhotoApi.ORDER_BY_LATEST;   this.photosPage=0;   this.refreshing=false;   this.loading=false;   this.over=false; } "
"private void unsetBoundsAction(){   NullBounds bounds=new NullBounds(); synchronized (Simulation.LOCK) {     this.simulation.getWorld().setBounds(bounds);   }   this.bounds.setUserObject(bounds);   this.model.reload(this.bounds); } "
"public void loading(){   mHintView.setVisibility(View.GONE);   mProgressBar.setVisibility(View.VISIBLE); } "
"public static <T>ConsList<T> concat(ConsList<T> lhs,ConsList<T> rhs){   return lhs.concat(rhs); } "
"@Override public Filter createFilter(List<Expression> parameterList){   TOverlapsImpl filter=null;   if ((parameterList == null) || (parameterList.size() != 2)) {     filter=new TOverlapsExtended();   }  else {     filter=new TOverlapsExtended(parameterList.get(0),parameterList.get(1));   }   return filter; } "
"public void testWriteReadEmpty() throws Exception {   ByteArrayOutputStream out=new ByteArrayOutputStream(0);   ObjectOutputStream os=new ObjectOutputStream(out);   os.writeObject(empty);   ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));   LoadBalancingPolicy.LoadBalancingPolicyDescription copy=(LoadBalancingPolicy.LoadBalancingPolicyDescription)is.readObject();   is.close();   os.close();   assertTrue(helper.areEquals(empty,copy)); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedSkill_A_TO_ME(String skillname,String skillcaster){   return new SM_SYSTEM_MESSAGE(1201267,skillname,skillcaster); } "
"public boolean isString(String name){   Param p=type.params.get(name);   assert p != null : \"name \\\"\" + name + \"\\\" is not a known parameter\";   Object v=params.get(name);   return v instanceof String; } "
"private static IntervalsSet buildIntervalSet(final Vector3D start,final Vector3D end,final double tolerance) throws MathIllegalArgumentException {   final Line line=new Line(start,end,tolerance);   return new IntervalsSet(line.toSubSpace((Point<Euclidean3D>)start).getX(),line.toSubSpace((Point<Euclidean3D>)end).getX(),tolerance); } "
"public boolean isZero(){   return this.milliseconds == 0 && this.seconds == 0 && this.minutes == 0 && this.hours == 0 && this.days == 0 && this.months == 0 && this.years == 0; } "
"private void deleteFile(){   FileFactory.FileType fileType=FileFactory.getFileType(this.filePath);   CarbonFile carbonFile=FileFactory.getCarbonFile(this.filePath,fileType);   carbonFile.delete(); } "
"public GroupsGetInvitesQuery(VkApiClient client,UserActor actor){   super(client,\"groups.getInvites\",GetInvitesResponse.class);   accessToken(actor.getAccessToken()); } "
"private void removeAnyUnneededPeriodTypes(){   Set<PeriodTypeExtended> periodTypeXs=new HashSet<>(periodTypeExtendedMap.values());   for (  PeriodTypeExtended periodTypeX : periodTypeXs) {     if (periodTypeX.getRules().isEmpty()) {       periodTypeExtendedMap.remove(periodTypeX.getPeriodType());     }   } } "
"public void init$Children(){   children=new ASTNode[2]; } "
"public StartRecord(long txNum){   this.txNum=txNum;   this.lsn=null; } "
"private List<Float> createDashArray(String dashString){   String[] dashes=dashString.split(\" \");   List<Float> floatDashArray=new ArrayList<Float>();   for (  String dashValue : dashes) {     try {       floatDashArray.add(Float.parseFloat(dashValue));     }  catch (    NumberFormatException e) {       return null;     }   }   return floatDashArray; } "
"public void putValue(String series,String className,Number value){   if (value == null)   value=0;   Map<String,Number> class2value=series2Class2Values.get(series);   if (class2value == null) {     class2value=new HashMap<>();     series2Class2Values.put(series,class2value);   }   class2value.put(className,value);   Pair<Number,Number> range=getRange(series);   if (range == null) {     range=new Pair<>(value,value);     series2Range.put(series,range);   }  else {     if (value.doubleValue() < range.get1().doubleValue())     range.set1(value);     if (value.doubleValue() > range.get2().doubleValue())     range.set2(value);   }   Pair<Number,Number> wholeRange=getRange();   if (wholeRange == null) {     this.range=new Pair<>(value,value);   }  else {     if (value.doubleValue() < wholeRange.get1().doubleValue())     wholeRange.set1(value);     if (value.doubleValue() > wholeRange.get2().doubleValue())     wholeRange.set2(value);   }   Double previous=series2total.get(series);   series2total.put(series,previous == null ? value.doubleValue() : previous + value.doubleValue());   samplesTooltips.put(series,String.format(\"%s: %.0f\",series,series2total.get(series)));   previous=classes2total.get(className);   classes2total.put(className,previous == null ? value.doubleValue() : previous + value.doubleValue());   classesTooltips.put(className,String.format(\"%s: %.0f\",className,classes2total.get(className))); } "
"public Matrix(Vector<double[]> rows,boolean clone){   m=rows.size();   n=rows.get(0).length;   A=new double[m][n];   if (clone) {     for (int i=0; i < m; i++)     A[i]=rows.get(i).clone();   }  else {     for (int i=0; i < m; i++)     A[i]=rows.get(i);   }   for (int i=0; i < m; i++)   if (A[i].length != n)   (new IllegalArgumentException(\"Length of row \" + i + \" is \"+ A[i].length+ \". Should be \"+ n)).printStackTrace(); } "
"public String makeLinkFull(HttpServletRequest request,HttpServletResponse response,String url){   return makeLink(request,response,url,true,null,null); } "
"private Iterator<byte[]> load(ColumnIdentifier columnIdentifier,long startOffset,long endOffset) throws IOException {   CarbonDictionaryReader dictionaryReader=getDictionaryReader(columnIdentifier);   try {     Iterator<byte[]> columnDictionaryChunkWrapper=dictionaryReader.read(startOffset,endOffset);     return columnDictionaryChunkWrapper;   }   finally {     dictionaryReader.close();   } } "
"public boolean gotoLast(){   current.set1(table.getGrid().getRowCount() - 1);   current.set2(table.getGrid().getColumnCount() - 1);   return isCurrentSet(); } "
"private int pathPositionAtLevel(DataApprovalLevel level){   return pathPositionAtLevel(level.getOrgUnitLevel()); } "
"public void testProcessDefinitionListenerDefinitionIllegalType() throws Exception {   org.activiti.engine.repository.Deployment deployment=null;   try {     deployment=repositoryService.createDeployment().addClasspathResource(\"org/activiti/standalone/event/invalidEventListenerType.bpmn20.xml\").deploy();     fail(\"Exception expected\");   }  catch (  ActivitiException ae) {     assertTrue(ae instanceof ActivitiIllegalArgumentException);     assertEquals(\"Invalid event-type: invalid\",ae.getMessage());   }  finally {     if (deployment != null) {       repositoryService.deleteDeployment(deployment.getId(),true);     }   } } "
"public void onTransactionSynchronization(TransactionData transactionData){ } "
"protected DocsGetByIdQuery docs(List<String> value){   return unsafeParam(\"docs\",value); } "
"public FileExistsException(File file){   super(\"File \" + file + \" exists\"); } "
"public int scanLiteral(int quote,XMLString content) throws IOException {   if (DEBUG_BUFFER) {     System.out.print(\"(scanLiteral, '\" + (char)quote + \"': \");     XMLEntityManager.print(fCurrentEntity);     System.out.println();   }   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }  else   if (fCurrentEntity.position == fCurrentEntity.count - 1) {     fCurrentEntity.ch[0]=fCurrentEntity.ch[fCurrentEntity.count - 1];     load(1,false);     fCurrentEntity.position=0;     fCurrentEntity.startPosition=0;   }   int offset=fCurrentEntity.position;   int c=fCurrentEntity.ch[offset];   int newlines=0;   boolean external=fCurrentEntity.isExternal();   if (c == '\\n' || (c == '\\r' && external)) {     if (DEBUG_BUFFER) {       System.out.print(\"[newline, \" + offset + \", \"+ fCurrentEntity.position+ \": \");       XMLEntityManager.print(fCurrentEntity);       System.out.println();     }     do {       c=fCurrentEntity.ch[fCurrentEntity.position++];       if (c == '\\r' && external) {         newlines++;         fCurrentEntity.lineNumber++;         fCurrentEntity.columnNumber=1;         if (fCurrentEntity.position == fCurrentEntity.count) {           offset=0;           fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);           fCurrentEntity.position=newlines;           fCurrentEntity.startPosition=newlines;           if (load(newlines,false)) {             break;           }         }         if (fCurrentEntity.ch[fCurrentEntity.position] == '\\n') {           fCurrentEntity.position++;           offset++;         }  else {           newlines++;         }       }  else       if (c == '\\n') {         newlines++;         fCurrentEntity.lineNumber++;         fCurrentEntity.columnNumber=1;         if (fCurrentEntity.position == fCurrentEntity.count) {           offset=0;           fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);           fCurrentEntity.position=newlines;           fCurrentEntity.startPosition=newlines;           if (load(newlines,false)) {             break;           }         }       }  else {         fCurrentEntity.position--;         break;       }     }  while (fCurrentEntity.position < fCurrentEntity.count - 1);     for (int i=offset; i < fCurrentEntity.position; i++) {       fCurrentEntity.ch[i]='\\n';     }     int length=fCurrentEntity.position - offset;     if (fCurrentEntity.position == fCurrentEntity.count - 1) {       content.setValues(fCurrentEntity.ch,offset,length);       if (DEBUG_BUFFER) {         System.out.print(\"]newline, \" + offset + \", \"+ fCurrentEntity.position+ \": \");         XMLEntityManager.print(fCurrentEntity);         System.out.println();       }       return -1;     }     if (DEBUG_BUFFER) {       System.out.print(\"]newline, \" + offset + \", \"+ fCurrentEntity.position+ \": \");       XMLEntityManager.print(fCurrentEntity);       System.out.println();     }   }   while (fCurrentEntity.position < fCurrentEntity.count) {     c=fCurrentEntity.ch[fCurrentEntity.position++];     if ((c == quote && (!fCurrentEntity.literal || external)) || c == '%' || !XMLChar.isContent(c)) {       fCurrentEntity.position--;       break;     }   }   int length=fCurrentEntity.position - offset;   fCurrentEntity.columnNumber+=length - newlines;   content.setValues(fCurrentEntity.ch,offset,length);   if (fCurrentEntity.position != fCurrentEntity.count) {     c=fCurrentEntity.ch[fCurrentEntity.position];     if (c == quote && fCurrentEntity.literal) {       c=-1;     }   }  else {     c=-1;   }   if (DEBUG_BUFFER) {     System.out.print(\")scanLiteral, '\" + (char)quote + \"': \");     XMLEntityManager.print(fCurrentEntity);     System.out.println(\" -> '\" + (char)c + \"'\");   }   return c; } "
"public static int hsb(float h,float s,float b){   return Color.HSBtoRGB(h,s,b); } "
"@Override public int read() throws IOException {   int c=in.read();   if (c == -1)   return -1;   if ((c & ~0xff) != 0) {     System.out.println(\"MD5InputStream.read() got character with (c & ~0xff) != 0)!\");   }  else {     md5.Update(c);   }   return c; } "
"public PatternN and(Observable<? extends Object> other){   if (other == null) {     throw new NullPointerException();   }   List<Observable<? extends Object>> list=new ArrayList<Observable<? extends Object>>();   list.add(o1);   list.add(o2);   list.add(o3);   list.add(o4);   list.add(o5);   list.add(o6);   list.add(o7);   list.add(o8);   list.add(o9);   list.add(other);   return new PatternN(list); } "
"public int size(){   if (mListeners != null) {     return mListeners.size();   }  else {     return 0;   } } "
"public static boolean similar(ItemStack a,ItemStack b){   if (a == null || b == null) {     return a == b;   }   return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage(); } "
"public void dump(){   System.out.println(\"Diphone: \" + name);   System.out.println(\"    MP : \" + midPoint);   for (int i=0; i < samples.length; i++) {     samples[i].dump();   } } "
"public void addElementValuePair(ElementValuePair node){   List<ElementValuePair> list=(parent == null || state == null) ? getElementValuePairListNoTransform() : getElementValuePairList();   list.addChild(node); } "
"public static String childElementValue(Element element,String childElementName){   if (element == null)   return null;   Element childElement=firstChildElement(element,childElementName);   return elementValue(childElement); } "
"public EqDataTagException(final String descr){   super(descr); } "
"private StringBuffer formatImaginary(double absIm,StringBuffer toAppendTo,FieldPosition pos){   pos.setBeginIndex(0);   pos.setEndIndex(0);   CompositeFormat.formatDouble(absIm,getImaginaryFormat(),toAppendTo,pos);   if (toAppendTo.toString().equals(\"1\")) {     toAppendTo.setLength(0);   }   return toAppendTo; } "
"public void closeServer(ServerInfo server){   if (server.sock == null || this.keep_alive) {     return;   }   try {     server.sock.close();     server.sock=null;   }  catch (  IOException ex) {     System.err.println(\"close socket error: \" + ex.getMessage());   } } "
"@NotNull private Point viewToModel(@NotNull Point p){   return new Point((int)(p.x / myScale),(int)(p.y / myScale)); } "
"public FriendsGetByPhonesQuery fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {   return toInputStream(input,Charsets.toCharset(encoding)); } "
"public void add(UIElement element){   elements.add(element); } "
"public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow){   iMinCharNGram=iMinChar;   iMaxCharNGram=iMaxChar;   iMinWordNGram=iMinWord;   iMaxWordNGram=iMaxWord;   DistroDocs=new TreeMap<Integer,DistributionDocument>();   DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();   StringBuffer sb=new StringBuffer();   Iterator iTexts=FileNames.iterator();   while (iTexts.hasNext()) {     String sFile=(String)iTexts.next();     try {       BufferedReader bf=new BufferedReader(new FileReader(sFile));       String sTmp;       while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);       bf.close();     }  catch (    FileNotFoundException ex) {       ex.printStackTrace(System.err);     } catch (    IOException ex) {       ex.printStackTrace(System.err);     }     sb.append((char)0);   }   FullTextDataString=sb.toString();   for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {     DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));   }   for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {     DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));   } } "
"private void validatePTCLoginForm(){   mUsernameView.setError(null);   mPasswordView.setError(null);   String username=mUsernameView.getText().toString();   String password=mPasswordView.getText().toString();   boolean cancel=false;   View focusView=null;   if (TextUtils.isEmpty(password)) {     mPasswordView.setError(getString(R.string.error_field_required));     focusView=mPasswordView;     cancel=true;   }   if (TextUtils.isEmpty(username)) {     mUsernameView.setError(getString(R.string.error_field_required));     focusView=mUsernameView;     cancel=true;   }   if (cancel) {     focusView.requestFocus();   }  else {     showProgress(true);     mNianticManager.login(username,password,mNianticLoginListener);   } } "
"protected void updateEntryInfoFromTabState(Entry entry,TabState tabState){   entry.currentUrl=tabState.getVirtualUrlFromState(); } "
"public void add(IResource[] resources,IProgressMonitor monitor) throws TeamException {   if (monitor == null) {     monitor=new NullProgressMonitor();   }   Map table=getProviderMapping(resources);   if (table.get(null) != null) {     throw new SVNException(Policy.bind(\"RepositoryManager.addErrorNotAssociated\"));   }   Set keySet=table.keySet();   monitor.beginTask(\"\",keySet.size() * 1000);   monitor.setTaskName(Policy.bind(\"RepositoryManager.adding\"));   Iterator iterator=keySet.iterator();   while (iterator.hasNext()) {     IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);     SVNTeamProvider provider=(SVNTeamProvider)iterator.next();     List list=(List)table.get(provider);     IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);     provider.add(providerResources,IResource.DEPTH_ZERO,subMonitor);   } } "
"private static boolean haveChecked(String category,String name,boolean createWithProject){   String key=getCheckKey(category,name,createWithProject);   return ourTemplatesChecked.contains(key); } "
"public void editItem(Configuration.Item item,ItemChangedListener listener){   Intent editIntent=new Intent(this,ItemActivity.class);   this.itemChangedListener=listener;   if (item != null) {     editIntent.putExtra(\"ITEM_TITLE\",item.title);     editIntent.putExtra(\"ITEM_LOCATION\",item.location);     editIntent.putExtra(\"ITEM_STATE\",item.state);   }   startActivityForResult(editIntent,REQUEST_ITEM_EDIT); } "
"public void writeBoolean(boolean value) throws JMSException {   initializeWriting();   try {     this.dataOut.write(_BOOLEAN);     this.dataOut.writeBoolean(value);   }  catch (  IOException ioe) {     raise(ioe);   } } "
"static boolean objectsEquality(Object a,Object b){   if (a == null)   return b == null;   if (a == b)   return true;   return (a.equals(b)); } "
"public Builder delayBeforeLoading(int delayInMillis){   this.delayBeforeLoading=delayInMillis;   return this; } "
"public void printEntrypoints(){   if (this.entrypoints == null)   System.out.println(\"Entry points not initialized\");  else {     System.out.println(\"Classes containing entry points:\");     for (    String className : entrypoints)     System.out.println(\"\\t\" + className);     System.out.println(\"End of Entrypoints\");   } } "
"public int rankOf(double value){   int ret=0;   if (!hasCapacity()) {     ret=Arrays.binarySearch(data,value);     if (ret < 0) {       return -ret - 1;     }  else {       return ret;     }   }  else {     for (int i=0; i < next; i++) {       if (data[i] < value) {         ret++;       }     }     return ret;   } } "
"public LookupExtractionFunction withReplaceMissingValueWith(String replaceMissingValueWith){   return new LookupExtractionFunction(lookup,retainMissingValue,replaceMissingValueWith,injective,optimize); } "
"public static <T extends RealFieldElement<T>>T distance1(final FieldVector3D<T> v1,final Vector3D v2){   return v1.distance1(v2); } "
"public ChangeSet lease(long lease){   _lease=lease;   return this; } "
"public static void buildCoffeeTable(Connection conn){   try {     Statement stmt=conn.createStatement();     stmt.execute(\"CREATE TABLE Coffee (\" + \"Description CHAR(25), \" + \"ProdNum CHAR(10) NOT NULL PRIMARY KEY, \"+ \"Price DOUBLE \"+ \")\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Bolivian Dark', \" + \"'14-001', \"+ \"8.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Bolivian Medium', \" + \"'14-002', \"+ \"8.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Brazilian Dark', \" + \"'15-001', \"+ \"7.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Brazilian Medium', \" + \"'15-002', \"+ \"7.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Brazilian Decaf', \" + \"'15-003', \"+ \"8.55 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Central American Dark', \" + \"'16-001', \"+ \"9.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Central American Medium', \" + \"'16-002', \"+ \"9.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Sumatra Dark', \" + \"'17-001', \"+ \"7.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Sumatra Decaf', \" + \"'17-002', \"+ \"8.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Sumatra Medium', \" + \"'17-003', \"+ \"7.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Sumatra Organic Dark', \" + \"'17-004', \"+ \"11.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Kona Medium', \" + \"'18-001', \"+ \"18.45 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Kona Dark', \" + \"'18-002', \"+ \"18.45 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'French Roast Dark', \" + \"'19-001', \"+ \"9.65 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Galapagos Medium', \" + \"'20-001', \"+ \"6.85 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Guatemalan Dark', \" + \"'21-001', \"+ \"9.95 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Guatemalan Decaf', \" + \"'21-002', \"+ \"10.45 )\");     stmt.execute(\"INSERT INTO Coffee VALUES ( \" + \"'Guatemalan Medium', \" + \"'21-003', \"+ \"9.95 )\");   }  catch (  SQLException ex) {     System.out.println(\"ERROR: \" + ex.getMessage());   } } "
"public AsyncServerRequest(RequestType type,GeneratedMessage req,boolean requireCommonRequest){   Request.Builder reqBuilder=Request.newBuilder();   reqBuilder.setRequestMessage(req.toByteString());   reqBuilder.setRequestType(type);   this.type=type;   this.request=reqBuilder.build();   this.requireCommonRequest=requireCommonRequest; } "
"private Text createCopiableLabel(Composite parent,String text,int span,int horizontalIndent){   Text textControl=new Text(parent,SWT.READ_ONLY);   textControl.setText(text);   GridData data=new GridData();   data.horizontalAlignment=GridData.FILL;   data.horizontalSpan=span;   data.horizontalAlignment=GridData.FILL;   data.horizontalIndent=horizontalIndent;   textControl.setLayoutData(data);   return textControl; } "
"public Builder addColumnsLong(String... names){   for (  String s : names)   addColumnLong(s);   return this; } "
"public CountModifiers add(CountModifiers modifiers){   return createIfNeeded(super.add(modifiers)); } "
"public void testLongStringPerformance(){   ISpellingCorrector sc=getSpellingCorrector();   sc.correct(\"thisisareallylongstringthatshouldcalusethingstorunreallyslow\"); } "
"public CollapsedStackLayout(String group,String field){   super(group);   m_polyField=field; } "
"@Override public String leaveDTD(){   if (_writer == _dtdWriter) {     _line.append(_text);     _text=new StringBuffer(20);     flushLine(false);     _writer=_docWriter;     return _dtdWriter.toString();   }   return null; } "
"private void runScript(Connection conn,Reader reader) throws IOException, SQLException {   StringBuffer command=null;   try {     LineNumberReader lineReader=new LineNumberReader(reader);     String line;     while ((line=lineReader.readLine()) != null) {       if (command == null) {         command=new StringBuffer();       }       String trimmedLine=line.trim();       final Matcher delimMatch=delimP.matcher(trimmedLine);       if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"//\")) {       }  else       if (delimMatch.matches()) {         setDelimiter(delimMatch.group(2),false);       }  else       if (trimmedLine.startsWith(\"--\")) {         println(trimmedLine);       }  else       if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"--\")) {       }  else       if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {         command.append(line.substring(0,line.lastIndexOf(getDelimiter())));         command.append(\" \");         this.execCommand(conn,command,lineReader);         command=null;       }  else {         command.append(line);         command.append(\"\\n\");       }     }     if (command != null) {       this.execCommand(conn,command,lineReader);     }     if (!autoCommit) {       conn.commit();     }   }  catch (  Exception e) {     throw new IOException(String.format(\"Error executing '%s': %s\",command,e.getMessage()),e);   }  finally {     conn.rollback();     flush();   } } "
"public static SpawnTemplate addNewSingleTimeSpawn(int worldId,int npcId,float x,float y,float z,byte heading){   return addNewSpawn(worldId,npcId,x,y,z,heading,0); } "
"public boolean notmainentry(){   return soot.PhaseOptions.getBoolean(options,\"notmainentry\"); } "
"private static void drawRect(Graphics2D g,int x,int y,int w1,int h1){   g.setColor(linecolor);   g.setStroke(stroke1f);   if (x == 0) {     g.drawLine(x,y,x,y + h1);   }   if (y == 0) {     g.drawLine(x,y,x + w1,y);   }   g.drawLine(x + w1,y,x + w1,y + h1);   g.drawLine(x,y + h1,x + w1,y + h1); } "
"public static int[] concat(int[]... args){   int totalLength=0;   for (  int[] arg : args) {     totalLength+=arg.length;   }   int[] res=new int[totalLength];   int i=0;   for (  int[] arg : args) {     for (    int element : arg) {       res[i]=element;       i++;     }   }   return res; } "
"public boolean hasAggregationLevels(){   return aggregationLevels.size() > 0; } "
"@Override public String addSymbol(char[] buffer,int offset,int length){ synchronized (fSymbolTable) {     return fSymbolTable.addSymbol(buffer,offset,length);   } } "
"public boolean isBigEndian(){   return bigEndian; } "
"public static byte[] hexStringToByte(final String source){   byte[] bytes=null;   if (source != null) {     bytes=new byte[source.length() / 2];     int i=0;     while (i < bytes.length) {       bytes[i]=(byte)(Integer.parseInt(source.substring(i * 2,(i + 1) * 2),16));       i++;     }   }   return bytes; } "
"public DocumentNGramGraph inverseIntersectGraph(DocumentNGramGraph dgOtherGraph){   DocumentNGramGraph dgUnion=(DocumentNGramGraph)clone();   dgUnion.mergeGraph(dgOtherGraph,0);   DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);   for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {     UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);     UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);     EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);     if (gIntersection == null)     continue;     java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();     while (iIter.hasNext()) {       WeightedEdge weCurItem=(WeightedEdge)iIter.next();       Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());       if (eEdge != null)       try {         gUnion.removeEdge(eEdge);       }  catch (      Exception ex) {         ex.printStackTrace();       }     }   }   return dgUnion; } "
"public void end(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers,boolean canceled){ } "
"public Fraction(double value,double epsilon,int maxIterations) throws FractionConversionException {   this(value,epsilon,Integer.MAX_VALUE,maxIterations); } "
"public JsonArray add(long value){   values.add(Json.value(value));   return this; } "
"public void clear(){   getProps().clear();   getOverlay().clear(); } "
"EventOccurrence(final Action action,final ODEState newState,final double stopTime){   this.action=action;   this.newState=newState;   this.stopTime=stopTime; } "
"private void startLoadingData(){   Random random=new Random();   mHandler.postDelayed(null,1000 + random.nextInt(2000)); } "
"public static double combination(double n,double r){   double nFac=MathUtils.factorial(n);   double rFac=MathUtils.factorial(r);   double nMinusRFac=MathUtils.factorial((n - r));   return nFac / (rFac * nMinusRFac); } "
"public boolean isCheckUpper(){   return upperCheck; } "
"public static List<String> readLines(Reader input) throws IOException {   BufferedReader reader=toBufferedReader(input);   List<String> list=new ArrayList<String>();   String line=reader.readLine();   while (line != null) {     list.add(line);     line=reader.readLine();   }   return list; } "
"public static Matrix constructWithCopy(double[][] A){   int m=A.length;   int n=A[0].length;   Matrix X=new Matrix(m,n);   double[][] C=X.getArray();   for (int i=0; i < m; i++) {     if (A[i].length != n) {       throw new IllegalArgumentException(\"All rows must have the same length.\");     }     for (int j=0; j < n; j++) {       C[i][j]=A[i][j];     }   }   return X; } "
"public void expand(double b){   clip[0]-=b;   clip[1]-=b;   clip[6]+=b;   clip[7]+=b; } "
"public static ArrayList<String> jsonArrayStringToArrayList(String jsonString){   String modString=jsonString.replaceFirst(\"\\\\[\",\"\");   modString=modString.replaceFirst(\"\\\\]\",\"\");   modString=modString.replaceAll(\"\\\"\",\"\");   String[] elements=modString.split(\"\\\\s*,\\\\s*\");   return new ArrayList<>(Arrays.asList(elements)); } "
"public void initSiegeLocations(){   if (SiegeConfig.SIEGE_ENABLED) {     log.info(\"Loading Siege Locations...\");     if (siegeSchedule != null) {       log.error(\"SiegeService should not be initialized two times!\");       return;     }     artifacts=DataManager.SIEGE_LOCATION_DATA.getArtifacts();     fortresses=DataManager.SIEGE_LOCATION_DATA.getFortress();     outposts=DataManager.SIEGE_LOCATION_DATA.getOutpost();     locations=DataManager.SIEGE_LOCATION_DATA.getSiegeLocations();     DAOManager.getDAO(SiegeDAO.class).loadSiegeLocations(locations);     log.info(\"Loaded \" + locations.size() + \" siege locations\");   }  else {     artifacts=Collections.emptyMap();     fortresses=Collections.emptyMap();     outposts=Collections.emptyMap();     locations=Collections.emptyMap();     log.info(\"Sieges are disabled in config.\");   } } "
"public void detach(AppCompatActivity activity){   attrViewMaps.remove(activity.hashCode()); } "
"public int available(){   return _count - _position; } "
"static ActivationGroupID restoreGroupID(final String dir) throws IOException, ClassNotFoundException {   File log=new File(dir);   String absDir=log.getAbsolutePath();   if (!log.exists() || !log.isDirectory()) {     throw new IOException(\"Log directory [\" + absDir + \"] does not exist.\");   }   File cookieFile=new File(log,GROUP_COOKIE_FILE);   ObjectInputStream ois=null;   ActivationGroupID obj=null;   try {     ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(cookieFile)));     MarshalledObject mo=(MarshalledObject)ois.readObject();     obj=(ActivationGroupID)mo.get();   }   finally {     if (ois != null)     ois.close();   }   return obj; } "
"@Override public boolean isConstant(){   return true; } "
"public AnnotationDefaultAttr(ElemValPair s){   elem=s; } "
"public static double value(double order,double x) throws MathIllegalArgumentException, MathIllegalStateException {   final int n=(int)order;   final double alpha=order - n;   final int nb=n + 1;   final BesselJResult res=rjBesl(x,alpha,nb);   if (res.nVals >= nb) {     return res.vals[n];   }  else   if (res.nVals < 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.BESSEL_FUNCTION_BAD_ARGUMENT,order,x);   }  else   if (FastMath.abs(res.vals[res.nVals - 1]) < 1e-100) {     return res.vals[n];   }   throw new MathIllegalStateException(LocalizedCoreFormats.BESSEL_FUNCTION_FAILED_CONVERGENCE,order,x); } "
"public Value newExtension(FilterListener listener,Value target,Value args){   throw new RuntimeException(\"Unsupported operation.\"); } "
"public <T>T inject(Class<T> clazz){   return inject(clazz,new FramePath()); } "
"private static Font decodeFontElement(Document document,Node child){   String name=child.getTextContent();   NamedNodeMap attributes=child.getAttributes();   Node sizeNode=attributes.getNamedItem(FONT_SIZE);   Node styleNode=attributes.getNamedItem(FONT_STYLE);   int size=Integer.valueOf(sizeNode.getNodeValue()).intValue();   int style=Integer.valueOf(styleNode.getNodeValue()).intValue();   Font font=new Font(name,style,size);   return font; } "
"@Override public void onPageFinished(WebView view,String url){   super.onPageFinished(view,url);   if (!isCurrentlyLoading && !url.startsWith(\"about:\")) {     return;   }   isCurrentlyLoading=false;   if (this.doClearHistory) {     view.clearHistory();     this.doClearHistory=false;   }   parentEngine.client.onPageFinishedLoading(url); } "
"public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HIS_PARTY_LEAVE_ALLIANCE(String value0){   return new SM_SYSTEM_MESSAGE(1300199,value0); } "
"public static ContextSet singleton(String key,String value){   if (key == null) {     throw new NullPointerException(\"key\");   }   if (value == null) {     throw new NullPointerException(\"value\");   }   MutableContextSet set=new MutableContextSet();   set.add(key,value);   return set.immutableCopy(); } "
"public void trimToSize(){   if (_data.length > size()) {     int[] tmp=new int[size()];     toNativeArray(tmp,0,tmp.length);     _data=tmp;   } } "
"public StorageSetQuery value(String value){   return unsafeParam(\"value\",value); } "
"public boolean extended(){   return soot.PhaseOptions.getBoolean(options,\"extended\"); } "
"public Object opt(int index){   return (index < 0 || index >= length()) ? null : this.myArrayList.get(index); } "
"private void checkWhitespace(XMLString value){   int end=value.offset + value.length;   for (int i=value.offset; i < end; ++i) {     if (!XMLChar.isSpace(value.ch[i])) {       reportFatalError(\"ContentIllegalAtTopLevel\");       return;     }   } } "
"protected void resetInternalState(){   setStepStart(null);   setStepSize(FastMath.sqrt(minStep * maxStep)); } "
"public void createCheckpoint(Transaction checkpointTx){   List<Long> txNums; synchronized (this) {     txNums=new LinkedList<Long>(activeTxs);     checkpointTx.bufferMgr().flushAll();     LogSeqNum lsn=checkpointTx.recoveryMgr().checkpoint(txNums);     VanillaDb.logMgr().flush(lsn);   } } "
"public void put(HttpSession session,T value,Map<String,Object> expandContext){   AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);   aa.put(session,value); } "
"public static double indicator(final double x){   if (Double.isNaN(x)) {     return Double.NaN;   }   return (x >= 0.0) ? 1.0 : -1.0; } "
"private void addResultAndPopulateProject(@NotNull ModuleSearchResult result,@NotNull DataNode<ProjectData> projectInfo,@NotNull List<DataNode<ModuleData>> selectedModules,@NotNull File file){   DataNode<ModuleData> moduleNode=result.moduleNode;   String moduleName=getNameOf(moduleNode);   String text;   if (result.selected) {     String tmp=String.format(\"File '%1$s' is already in module '%2$s'\",file.getName(),moduleName);     SourceFileContainerInfo containerInfo=result.containerInfo;     if (containerInfo != null) {       containerInfo.updateSelectedVariantIn(moduleNode);       Variant variant=containerInfo.variant;       if (variant != null) {         tmp+=String.format(\", variant '%1$s'\",variant.getName());       }     }     text=tmp;   }  else {     text=String.format(\"Module '%1$s' was added to the project.\",moduleName);     SourceFileContainerInfo containerInfo=result.containerInfo;     if (containerInfo != null) {       containerInfo.updateSelectedVariantIn(moduleNode);     }     selectedModules.add(moduleNode);     setSelection(selectedModules);   }   invokeLaterIfNeeded(null);   populate(myProject,projectInfo,selectedModules,true); } "
"@Override public DistinguishableEffectSize distinguishableEffectSizes(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2){   SymmetricInputValidation(number_impressions_1,number_actions_1,number_impressions_2,number_actions_2);   double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);   double pooled_rate=1.0 * (number_actions_1 + number_actions_2) / (number_impressions_1 + number_impressions_2);   double effect_size=zval * sqrt(pooled_rate * (1 - pooled_rate) * (1.0 / number_impressions_1 + 1.0 / number_impressions_2));   return new DistinguishableEffectSize.Builder().withNegativeEffectSize(-effect_size).withPositiveEffectSize(effect_size).build(); } "
"public JSONArray put(long value){   put(new Long(value));   return this; } "
"public StatusGetQuery(VkApiClient client,UserActor actor){   super(client,\"status.get\",Status.class);   accessToken(actor.getAccessToken()); } "
"@Override public String toString(){   return String.format(\"%s,%s,%s,%s,%d,%s,%s,%s\",cname,mname,shorty,prototype,opcount,mhash_tight,mhash_loose,caller); } "
"public WishlistDataCursor queryWishlistsData(){   QueryHelper qh=new QueryHelper();   qh.Distinct=false;   qh.Table=S.TABLE_WISHLIST_DATA;   qh.Columns=null;   qh.Selection=null;   qh.SelectionArgs=null;   qh.GroupBy=null;   qh.Having=null;   qh.OrderBy=null;   qh.Limit=null;   SQLiteQueryBuilder qb=builderWishlistData();   Cursor cursor=qb.query(getWritableDatabase(),qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);   return new WishlistDataCursor(cursor); } "
"private void migrate(){   if (!migrated) {     BlazeUserSettings userSettings=BlazeUserSettings.getInstance();     this.attachSourcesByDefault=userSettings.getAttachSourcesByDefault();     this.attachSourcesOnDemand=userSettings.getAttachSourcesOnDemand();     this.migrated=true;   } } "
"private boolean zzRefill() throws java.io.IOException {   if (zzStartRead > 0) {     System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);     zzEndRead-=zzStartRead;     zzCurrentPos-=zzStartRead;     zzMarkedPos-=zzStartRead;     zzPushbackPos-=zzStartRead;     zzStartRead=0;   }   if (zzCurrentPos >= zzBuffer.length) {     char newBuffer[]=new char[zzCurrentPos * 2];     System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);     zzBuffer=newBuffer;   }   int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);   if (numRead < 0) {     return true;   }  else {     zzEndRead+=numRead;     return false;   } } "
"public boolean increment(K key){   return adjustValue(key,(short)1); } "
"private int findNextIndexNonZero(double[] contour,int current){   for (int i=current + 1; i < contour.length; i++) {     if (contour[i] != 0) {       return i;     }   }   return -1; } "
"@Override public List<CentroidCluster<T>> cluster(final Collection<T> points) throws MathIllegalArgumentException, MathIllegalStateException {   List<CentroidCluster<T>> best=null;   double bestVarianceSum=Double.POSITIVE_INFINITY;   for (int i=0; i < numTrials; ++i) {     List<CentroidCluster<T>> clusters=clusterer.cluster(points);     final double varianceSum=evaluator.score(clusters);     if (evaluator.isBetterScore(varianceSum,bestVarianceSum)) {       best=clusters;       bestVarianceSum=varianceSum;     }   }   return best; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_END_A_TO_SELF(String skilltarget){   return new SM_SYSTEM_MESSAGE(1200776,skilltarget); } "
"public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){   final int deltaValue, currentScrollValue, scrollValue; switch (view.getPullToRefreshScrollDirection()) { case HORIZONTAL:     deltaValue=deltaX;   scrollValue=scrollX; currentScrollValue=view.getScrollX(); break; case VERTICAL: default : deltaValue=deltaY; scrollValue=scrollY; currentScrollValue=view.getScrollY(); break; } if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) { final Mode mode=view.getMode(); if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) { final int newScrollValue=(deltaValue + scrollValue); if (PullToRefreshBase.DEBUG) { Log.d(LOG_TAG,\"OverScroll. DeltaX: \" + deltaX + \", ScrollX: \"+ scrollX+ \", DeltaY: \"+ deltaY+ \", ScrollY: \"+ scrollY+ \", NewY: \"+ newScrollValue+ \", ScrollRange: \"+ scrollRange+ \", CurrentScroll: \"+ currentScrollValue); } if (newScrollValue < (0 - fuzzyThreshold)) { if (mode.showHeaderLoadingLayout()) { if (currentScrollValue == 0) { view.setState(State.OVERSCROLLING); } view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue))); } }  else if (newScrollValue > (scrollRange + fuzzyThreshold)) { if (mode.showFooterLoadingLayout()) { if (currentScrollValue == 0) { view.setState(State.OVERSCROLLING); } view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange))); } }  else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) { view.setState(State.RESET); } }  else if (isTouchEvent && State.OVERSCROLLING == view.getState()) { view.setState(State.RESET); } } } "
"public boolean handleNotifyFifoInCommit(Context context,XtnEntry xtnEntry,boolean fifoNotifyForNonFifoEvents) throws SAException {   boolean res=false;   if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplates() && !_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplates() && !_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplates())   return res;   if (fifoNotifyForNonFifoEvents) {     if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplatesForNonFifoType() && !_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplatesForNonFifoType() && !_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplatesForNonFifoType())     return res;   }   ISAdapterIterator iter=null;   IServerTypeDesc typeDesc=null;   try {     iter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.NEED_NOTIFY_ENTRIES);     final XtnData pXtn=xtnEntry.getXtnData();     if (iter != null) {       while (true) {         IEntryHolder entry=(IEntryHolder)iter.next();         if (entry == null)         break;         if (!_engine.getLeaseManager().isNoReapUnderXtnLeases() && entry.isExpired(_engine.getLeaseManager().getEffectiveEntryLeaseTime(xtnEntry.m_CommitRollbackTimeStamp)) && !_engine.isExpiredEntryStayInSpace(entry))         continue;         context.setOperationID(pXtn.getOperationID(entry.getUID()));         int operation; switch (entry.getWriteLockOperation()) { case SpaceOperations.TAKE: case SpaceOperations.TAKE_IE:           if (!_cacheManager.getTemplatesManager().anyNotifyFifoTakeTemplates())           continue;         if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName()))         typeDesc=_engine.getTypeTableEntry(entry.getClassName());       if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents))       continue;     if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.TAKE))     continue;   operation=SpaceOperations.TAKE; break; case SpaceOperations.UPDATE: if (!_cacheManager.getTemplatesManager().anyNotifyFifoUpdateTemplates()) continue; if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName())) typeDesc=_engine.getTypeTableEntry(entry.getClassName()); if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents)) continue; if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.UPDATE)) continue; operation=SpaceOperations.UPDATE; break; default : if (!_cacheManager.getTemplatesManager().anyNotifyFifoWriteTemplates()) continue; if (typeDesc == null || !typeDesc.getTypeName().equals(entry.getClassName())) typeDesc=_engine.getTypeTableEntry(entry.getClassName()); if ((typeDesc.isFifoSupported() && fifoNotifyForNonFifoEvents) || (!typeDesc.isFifoSupported() && !fifoNotifyForNonFifoEvents)) continue; if (!typeDesc.isFifoSupported() && !_cacheManager.getTemplatesManager().anyNotifyFifoForNonFifoTypePerOperation(typeDesc,SpaceOperations.WRITE)) continue; operation=SpaceOperations.WRITE; } IEntryHolder notifyeh=operation != SpaceOperations.TAKE ? entry.createCopy() : entry; IEntryHolder shadowEh=entry.getTxnEntryData() != null ? entry.getTxnEntryData().getOtherUpdateUnderXtnEntry() : null; FifoBackgroundRequest red=new FifoBackgroundRequest(context.getOperationID(),true,false,entry,shadowEh,xtnEntry.isFromReplication(),operation,null,notifyeh); red.setXtnEnd(); red.setTime(xtnEntry.m_CommitRollbackTimeStamp); if (fifoNotifyForNonFifoEvents) red.setAllowFifoNotificationsForNonFifoEvents(xtnEntry.getAllowFifoNotificationsForNonFifoEntries()); _fifoBackgroundDispatcher.positionAndActivateRequest(red); res=true; } } }   finally { if (iter != null) iter.close(); } return res; } "
"public Boolean createProductCategory(EntityManager em,String productCategory){   Boolean status=true;   ProductCategory prodcat=null;   try {     if (!em.getTransaction().isActive()) {       em.getTransaction().begin();     }     prodcat=new ProductCategory();     prodcat.setCategory(productCategory);     prodcat.setCategoryName(productCategory);     em.persist(prodcat);     em.getTransaction().commit();   }  catch (  Exception e) {     status=false;     logger.error(\"Error occured during creation of Product category . Detailed info: \" + e);   }   return status; } "
"private void checkXSLAvailability() throws ClusterConfigurationException {   if (System.getProperty(\"java.runtime.version\").indexOf(\"1.4\") > -1) {     String[] membersName=getClusterMemberNames();     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"cluster members: \" + Arrays.asList(membersName));     }     for (int i=0; i < membersName.length; i++) {       String name=membersName[i];       validateMemberName(name);     }     String[] groupMembersArray=getGroupMemberNames();     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"cluster Group members: \" + Arrays.asList(groupMembersArray));     }     for (int i=0; i < groupMembersArray.length; i++) {       validateMemberName(groupMembersArray[i]);     }   } } "
"public static SM_SYSTEM_MESSAGE STR_PARTY_INVITED_HIM(String value0){   return new SM_SYSTEM_MESSAGE(1300173,value0); } "
"public static int objectIndex(int luaState,Object obj,String methodName) throws LuaException {   LuaState L=LuaStateFactory.getExistingState(luaState); synchronized (L) {     int top=L.getTop();     Object[] objs=new Object[top - 1];     Class clazz;     if (obj instanceof Class) {       clazz=(Class)obj;     }  else {       clazz=obj.getClass();     }     Method[] methods=clazz.getMethods();     Method method=null;     for (int i=0; i < methods.length; i++) {       if (!methods[i].getName().equals(methodName))       continue;       Class[] parameters=methods[i].getParameterTypes();       if (parameters.length != top - 1)       continue;       boolean okMethod=true;       for (int j=0; j < parameters.length; j++) {         try {           objs[j]=compareTypes(L,parameters[j],j + 2);         }  catch (        Exception e) {           okMethod=false;           break;         }       }       if (okMethod) {         method=methods[i];         break;       }     }     if (method == null) {       throw new LuaException(\"Invalid method call. No such method.\");     }     Object ret;     try {       if (Modifier.isPublic(method.getModifiers())) {         method.setAccessible(true);       }       if (obj instanceof Class) {         ret=method.invoke(null,objs);       }  else {         ret=method.invoke(obj,objs);       }     }  catch (    Exception e) {       throw new LuaException(e);     }     if (ret == null) {       return 0;     }     L.pushObjectValue(ret);     return 1;   } } "
"public MarketSearchQueryWithExtended albumId(Integer value){   return unsafeParam(\"album_id\",value); } "
"public void insertBefore(List<E> toInsert,E point){   LinkedList<E> backwardList=new LinkedList<E>(); {     Iterator<E> it=toInsert.iterator();     while (it.hasNext())     backwardList.addFirst(it.next());   }   E previousPoint=point;   Iterator<E> it=backwardList.iterator();   while (it.hasNext()) {     E o=it.next();     insertBeforeNoRedirect(o,previousPoint);     previousPoint=o;   }   point.redirectJumpsToThisTo(toInsert.get(0)); } "
"public void load() throws IOException {   if (magicNumber == 0) {     try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){       magicNumber=ins.readLong();       if (magicNumber != MAGIC_NUMBER)       throw new IOException(\"Input file is not a DAA file.\");       version=ins.readLong();       if (version > DAA_VERSION)       throw new IOException(\"DAA version requires later version of MEGAN.\");       diamondBuild=ins.readLong();       dbSeqs=ins.readLong();       dbSeqsUsed=ins.readLong();       dbLetters=ins.readLong();       flags=ins.readLong();       queryRecords=ins.readLong();       modeRank=ins.readInt();       gapOpen=ins.readInt();       gapExtend=ins.readInt();       reward=ins.readInt();       penalty=ins.readInt();       reserved1=ins.readInt();       reserved2=ins.readInt();       reserved3=ins.readInt();       k=ins.readDouble();       lambda=ins.readDouble();       reserved4=ins.readDouble();       reserved5=ins.readDouble();       for (int i=0; i < scoreMatrix.length; i++) {         scoreMatrix[i]=(byte)ins.read();       }       scoreMatrixName=Basic.toString(scoreMatrix);       for (int i=0; i < blockSize.length; i++)       blockSize[i]=ins.readLong();       if (blockSize[0] == 0)       throw new IOException(\"Invalid DAA file. DIAMOND run probably has not completed successfully.\");       for (int i=0; i < blockTypeRank.length; i++) {         blockTypeRank[i]=(byte)ins.read(); switch (BlockType.value(blockTypeRank[i])) { case ref_names:           if (refNamesBlockIndex != -1)           throw new IOException(\"DAA file contains multiple ref_names blocks, not implemented.\");         refNamesBlockIndex=i;       break; case ref_lengths:     if (refLengthsBlockIndex != -1)     throw new IOException(\"DAA file contains multiple ref_lengths blocks, not implemented.\");   refLengthsBlockIndex=i; break; case alignments: if (alignmentsBlockIndex != -1) throw new IOException(\"DAA file contains multiple alignments blocks, not implemented.\"); alignmentsBlockIndex=i; break; } } if (refNamesBlockIndex == -1) throw new IOException(\"DAA file contains 0 ref_names blocks, not implemented.\"); if (refLengthsBlockIndex == -1) throw new IOException(\"DAA file contains 0 ref_lengths blocks, not implemented.\"); if (alignmentsBlockIndex == -1) throw new IOException(\"DAA file contains 0 alignments blocks, not implemented.\"); if (refLengthsBlockIndex < refNamesBlockIndex) throw new IOException(\"DAA file contains ref_lengths block before ref_names block, not implemented.\"); headerSize=ins.getPosition(); lnK=Math.log(k); }  } } "
"public static List<String> prepContentPurposeList(Map<String,Object> context){   List<String> contentPurposeList=UtilGenerics.checkList(context.get(\"contentPurposeList\"));   String contentPurposeString=(String)context.get(\"contentPurposeString\");   if (Debug.infoOn()) {     Debug.logInfo(\"in prepContentPurposeList, contentPurposeString(0):\" + contentPurposeString,\"\");   }   if (UtilValidate.isNotEmpty(contentPurposeString)) {     List<String> purposesFromString=StringUtil.split(contentPurposeString,\"|\");     if (UtilValidate.isEmpty(contentPurposeList)) {       contentPurposeList=FastList.newInstance();     }     contentPurposeList.addAll(purposesFromString);   }   if (UtilValidate.isEmpty(contentPurposeList)) {     contentPurposeList=FastList.newInstance();   }   if (Debug.infoOn()) {     Debug.logInfo(\"in prepContentPurposeList, contentPurposeList(0):\" + contentPurposeList,\"\");   }   return contentPurposeList; } "
"public static Transformer createTtmlTransformer(String xslt){   TransformerFactory tf=TransformerFactory.newInstance(XSLT2_TRANSFORMER_IMPLEMENTATION,null);   InputStream transformationStream=ResourceHelper.getResourceInputStream(xslt);   if (transformationStream == null) {     throw new ConvertException(String.format(\"The transformation file is absent: %s\",xslt));   }   try {     return tf.newTransformer(new StreamSource(transformationStream));   }  catch (  TransformerConfigurationException e) {     throw new ConvertException(e);   } } "
"private static boolean canDetermineAvailability(Interval available,Interval needed){   if (available != null && needed != null) {     if (available.contains(needed) || available.getStart().isAfter(needed.getStart())) {       return true;     }   }   return false; } "
"public LogEntries(LogProcessType processType,long pid,String hostName,String hostAddress){   this(processType,new ArrayList<LogEntry>(0),0,pid,0,hostName,hostAddress); } "
"public static String timeToString(String time){   String theTime=null;   if (Pattern.matches(\"[012][0-9]:[0-5][0-9]\",time)) {     int hour=Integer.parseInt(time.substring(0,2));     int min=Integer.parseInt(time.substring(3));     theTime=timeToString(hour,min);   }   return theTime; } "
"void addRTypeResourceName(RType rType,String resourceName,String resourceValue,ResourceDirectory resourceDirectory){   Map<String,Set<ResourceDirectory>> directoryResourceDirectoryMap=null;   if (this.rTypeResourceDirectoryMap.containsKey(rType)) {     directoryResourceDirectoryMap=this.rTypeResourceDirectoryMap.get(rType);   }  else {     directoryResourceDirectoryMap=new HashMap<String,Set<ResourceDirectory>>();     this.rTypeResourceDirectoryMap.put(rType,directoryResourceDirectoryMap);   }   Set<ResourceDirectory> resourceDirectorySet=null;   if (directoryResourceDirectoryMap.containsKey(resourceDirectory.directoryName)) {     resourceDirectorySet=directoryResourceDirectoryMap.get(resourceDirectory.directoryName);   }  else {     resourceDirectorySet=new HashSet<ResourceDirectory>();     directoryResourceDirectoryMap.put(resourceDirectory.directoryName,resourceDirectorySet);   }   boolean find=false;   ResourceDirectory newResourceDirectory=new ResourceDirectory(resourceDirectory.directoryName,resourceDirectory.resourceFullFilename);   if (!resourceDirectorySet.contains(newResourceDirectory)) {     resourceDirectorySet.add(newResourceDirectory);   }   for (  ResourceDirectory oldResourceDirectory : resourceDirectorySet) {     if (oldResourceDirectory.resourceEntrySet.contains(new ResourceEntry(resourceName,resourceValue))) {       find=true;       String resourceKey=rType + \"/\" + resourceDirectory.directoryName+ \"/\"+ resourceName;       Set<String> fullFilenameSet=null;       if (!this.duplicateResourceMap.containsKey(resourceKey)) {         fullFilenameSet=new HashSet<String>();         fullFilenameSet.add(oldResourceDirectory.resourceFullFilename);         this.duplicateResourceMap.put(resourceKey,fullFilenameSet);       }  else {         fullFilenameSet=this.duplicateResourceMap.get(resourceKey);       }       fullFilenameSet.add(resourceDirectory.resourceFullFilename);     }   }   if (!find) {     for (    ResourceDirectory oldResourceDirectory : resourceDirectorySet) {       if (oldResourceDirectory.equals(newResourceDirectory)) {         if (!oldResourceDirectory.resourceEntrySet.contains(new ResourceEntry(resourceName,resourceValue))) {           oldResourceDirectory.resourceEntrySet.add(new ResourceEntry(resourceName,resourceValue));         }       }     }   } } "
"public static ItemStack sanitize(ItemStack stack){   if (stack != null) {     if (stack.hasTagCompound() && stack.getTagCompound().hasKey(DATA_TAG)) {       stack.getTagCompound().removeTag(DATA_TAG);     }     if (stack.hasTagCompound() && stack.getTagCompound().hasNoTags()) {       stack.setTagCompound(null);     }   }   return stack; } "
"public Assignment(){ } "
"private static void writeMD(DAAMatchRecord match,ByteOutputBuffer buffer,byte[] queryAlphabet){ {     int matches=0, del=0;     for (    CombinedOperation cop : match.getTranscript().gather()) { switch (cop.getEditOperation()) { case op_match:         del=0;       matches+=cop.getCount();     break; case op_insertion:   break; case op_substitution: if (matches > 0) {   buffer.writeString(String.format(\"%d\",matches));   matches=0; }  else if (del > 0) {   buffer.write((byte)'0');   del=0; } buffer.write(queryAlphabet[cop.getLetter()]); break; case op_deletion: if (matches > 0) { buffer.writeString(String.format(\"%d\",matches)); matches=0; } if (del == 0) buffer.write((byte)'^'); buffer.write(queryAlphabet[cop.getLetter()]); ++del; } } if (matches > 0) buffer.writeString(String.format(\"%d\",matches)); } } "
"public void close(){   if (textStorageReader != null)   textStorageReader.closeAllFiles();   if (dataIndexReader != null)   try {     dataIndexReader.close();   }  catch (  IOException e) {     Basic.caught(e);   } } "
"@Override public void actionPerformed(ActionEvent ev){   final ParametersDialog parametersDialog=(ParametersDialog)getParent();   final Director dir=(Director)getDir();   parametersDialog.setVisible(false);   if (dir.getDocument().getMeganFile().hasDataConnector()) {     ReadMagnitudeParser.setEnabled(parametersDialog.isUseMagnitudes());     int numberOfMatches=0;     try {       final IConnector connector=dir.getDocument().getMeganFile().getDataConnector();       numberOfMatches=connector.getNumberOfMatches();     }  catch (    IOException e) {       Basic.caught(e);     }     if (numberOfMatches > 10000000) {       int result=JOptionPane.showConfirmDialog(MainViewer.getLastActiveFrame(),String.format(\"This sample contains %,d matches, processing may take a long time, proceed?\",numberOfMatches),\"Very large dataset, proceed?\",JOptionPane.YES_NO_OPTION);       if (result != JOptionPane.YES_OPTION)       return;     }   }   parametersDialog.setCanceled(false); } "
"@SuppressWarnings(\"unchecked\") Collection<? extends ClientRequestResult> handleDeviceRequest(final ClientRequest deviceRequest){   Collection<TransferDevice> transferDevices=new ArrayList<>();   List<Device> devices;   if (deviceRequest.getObjectParameter() != null) {     Set<DeviceInfo> deviceInfoList=(Set<DeviceInfo>)deviceRequest.getObjectParameter();     devices=deviceFacade.getDevices(deviceInfoList);   }  else {     String deviceClassName=deviceRequest.getRequestParameter();     devices=deviceFacade.getDevices(deviceClassName);   }   for (  Device device : devices) {     transferDevices.add(TransferObjectFactory.createTransferDevice(device,deviceFacade.getClassNameForDevice(device.getId())));   }   return transferDevices; } "
"public boolean binomialTest(int numberOfTrials,int numberOfSuccesses,double probability,AlternativeHypothesis alternativeHypothesis,double alpha){   double pValue=binomialTest(numberOfTrials,numberOfSuccesses,probability,alternativeHypothesis);   return pValue < alpha; } "
"private Path generateFilledPath(ILineDataSet dataSet,int from,int to){   float fillMin=dataSet.getFillFormatter().getFillLinePosition(dataSet,mChart);   float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX()));   float phaseY=mAnimator.getPhaseY();   final boolean isDrawSteppedEnabled=dataSet.isDrawSteppedEnabled();   Path filled=new Path();   Entry entry=dataSet.getEntryForIndex(from);   filled.moveTo(entry.getXIndex(),fillMin);   filled.lineTo(entry.getXIndex(),entry.getVal() * phaseY);   for (int x=from + 1, count=(int)Math.ceil((to - from) * phaseX + from); x < count; x++) {     Entry e=dataSet.getEntryForIndex(x);     if (isDrawSteppedEnabled) {       final Entry ePrev=dataSet.getEntryForIndex(x - 1);       if (ePrev == null)       continue;       filled.lineTo(e.getXIndex(),ePrev.getVal() * phaseY);     }     filled.lineTo(e.getXIndex(),e.getVal() * phaseY);   }   filled.lineTo(dataSet.getEntryForIndex(Math.max(Math.min((int)Math.ceil((to - from) * phaseX + from) - 1,dataSet.getEntryCount() - 1),0)).getXIndex(),fillMin);   filled.close();   return filled; } "
"public void attachTo(ImmersiveEffect effect) throws RuntimeException {   if (mEffect != null) {     throw new RuntimeException(\"Previous effect is still attached, call detach() first\");   }   mEffect=effect;   mEffect.addParameter(mParameter); } "
"public SM_RIFT_ANNOUNCE(int objectId){   this.objectId=objectId;   this.actionId=5; } "
"void freeNodeListCache(NodeListCache c){   c.next=fFreeNLCache;   fFreeNLCache=c; } "
"protected boolean isValidUser(String user){   return USER_PATTERN.matcher(user).matches(); } "
"public static void dropTable(SQLiteDatabase db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"WEEK_FORE_CAST\\\"\";   db.execSQL(sql); } "
"public static Activity scanForActivity(Context context){   if (context == null)   return null;   if (context instanceof Activity) {     return (Activity)context;   }  else   if (context instanceof ContextWrapper) {     return scanForActivity(((ContextWrapper)context).getBaseContext());   }   return null; } "
"public void increaseDefeat(){   defeat++; } "
"public void contentTag(String tag,String name,String value,String content){   spacing();   m_out.print('<');   m_out.print(tag);   m_out.print(' ');   m_out.print(name);   m_out.print('=');   m_out.print('\\\"');   escapeString(value);   m_out.print('\\\"');   m_out.print('>');   escapeString(content);   m_out.print('<');   m_out.print('/');   m_out.print(tag);   m_out.print('>');   println(); } "
"@RequestMapping(value=\"/race-results\",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceResult> updateRaceResult(@RequestBody RaceResult raceResult) throws URISyntaxException {   log.debug(\"REST request to update RaceResult : {}\",raceResult);   if (raceResult.getRaceResultId() == null) {     return createRaceResult(raceResult);   }   RaceResult result=raceResultRepository.save(raceResult);   return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(\"raceResult\",raceResult.getRaceResultId().toString())).body(result); } "
"protected boolean checkPrevTokens(Element currentRulePart,int position,NodeList tokens){   NamedNodeMap attNodes=currentRulePart.getAttributes();   for (int z=0; z < attNodes.getLength(); z++) {     Node el=attNodes.item(z);     String currentAtt=el.getNodeName();     String currentVal=el.getNodeValue();     if (currentAtt.equals(\"num\")) {       int num=Integer.parseInt(currentVal.substring(0,1));       int requiredFirstTokenPosition=position - num;       if (currentVal.length() == 1) {         if (!(requiredFirstTokenPosition == 0))         return false;       }  else       if (currentVal.substring(1,2).equals(\"+\")) {         if (!(0 <= requiredFirstTokenPosition))         return false;       }  else       if (currentVal.substring(1,2).equals(\"-\")) {         if (!(0 >= requiredFirstTokenPosition))         return false;       }     }   }   return true; } "
"public void jsFnCall(String jsString){   showDialog(jsString); } "
"public void storeOriginals(){   mStartingStartTrim=mStartTrim;   mStartingEndTrim=mEndTrim;   mStartingRotation=mRotation; } "
"public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){   if (reference == null) {     throw new NullPointerException(String.valueOf(errorMessage));   }   return reference; } "
"public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected,Map hEdgeDistros){   StringBuffer sb=new StringBuffer();   String sConnector;   boolean bDistroGraph=(hEdgeDistros != null);   if (!bDirected) {     sb.append(\"graph {\\n\");     sConnector=\"--\";   }  else {     sb.append(\"digraph {\\n\");     sConnector=\"->\";   }   Iterator iIter=gTree.getEdgeSet().iterator();   while (iIter.hasNext()) {     Edge e=(Edge)iIter.next();     String sA=\"_\" + e.getVertexA().toString().replaceAll(\"\\\\W\",\"_\");     String sB=\"_\" + e.getVertexB().toString().replaceAll(\"\\\\W\",\"_\");     String sLabel=\"\";     if (e instanceof WeightedEdge) {       sLabel+=String.format(\"%4.2f\",((WeightedEdge)e).getWeight());     }     if (bDistroGraph) {       Distribution dTmp;       if ((dTmp=(Distribution)(hEdgeDistros.get(e))) != null)       sLabel+=\" - Distro: \" + dTmp.toString();     }     if (e instanceof WeightedEdge)     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \" [label=\\\"\"+ sLabel.replaceAll(\"\\\\s+\",\" \")+ \"\\\"]\\n\");  else     sb.append(\"\\t\" + sA + \" \"+ sConnector+ \" \"+ sB+ \"\\n\");     sb.append(\"\\t\" + sA + \" [label=\\\"\"+ sA+ \"\\\"] \"+ \"\\n\");   }   sb.append(\"}\");   return sb.toString(); } "
"public static String formatDateLong(Context context,Date date){   DateFormat dateFormat=android.text.format.DateFormat.getLongDateFormat(context);   return dateFormat.format(date); } "
"public void addOrganisationUnit(OrganisationUnit unit){   this.organisationUnits.add(unit); } "
"public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){   return put(null,url,params,responseHandler); } "
"public void cancelCurrentSkill(){   if (getOwner().getCastingSkill() == null) {     return;   }   Creature creature=getOwner();   Skill castingSkill=creature.getCastingSkill();   castingSkill.cancelCast();   creature.removeSkillCoolDown(castingSkill.getSkillTemplate().getCooldownId());   creature.setCasting(null);   PacketSendUtility.broadcastPacketAndReceive(creature,new SM_SKILL_CANCEL(creature,castingSkill.getSkillTemplate().getSkillId()));   if (getOwner().getAi2() instanceof NpcAI2) {     NpcAI2 npcAI=(NpcAI2)getOwner().getAi2();     npcAI.setSubStateIfNot(AISubState.NONE);     npcAI.onGeneralEvent(AIEventType.ATTACK_COMPLETE);     if (creature.getSkillNumber() > 0) {       creature.setSkillNumber(creature.getSkillNumber() - 1);     }   } } "
"public void disconnectAndCloseTab(final MqttAsyncConnection connection){   disconnectFromBroker(connection);   connection.closeConnection();   if (connection.getMessageLogger() != null && connection.getMessageLogger().isRunning()) {     connection.getMessageLogger().stop();   }   TabUtils.requestClose(connectionControllersMapping.get(connection).getTab());   subscriptionManagers.remove(connectionControllersMapping.get(connection));   connectionControllersMapping.remove(connection);   connectionTabs.remove(connection);   logger.debug(\"Closing connection tab; sm = {}; cc = {}; ct = {}\",subscriptionManagers.keySet().size(),connectionControllersMapping.keySet().size(),connectionTabs.keySet().size());   connection.getScriptManager().stopScripts();   for (  final BaseMqttSubscription subscription : connection.getSubscriptions().values()) {     subscription.getStore().cleanUp();   }   connection.getStore().cleanUp(); } "
"public ArrayList<Entry> process(File inputFileOrDir,File outputRoot) throws Exception {   if (!inputFileOrDir.exists())   throw new IllegalArgumentException(\"Input file does not exist: \" + inputFileOrDir.getAbsolutePath());   if (inputFileOrDir.isFile())   return process(new File[]{inputFileOrDir},outputRoot);  else   return process(inputFileOrDir.listFiles(),outputRoot); } "
"@TargetApi(11) public void zoomAndCenterAnimated(float scaleX,float scaleY,float xValue,float yValue,AxisDependency axis,long duration){   if (android.os.Build.VERSION.SDK_INT >= 11) {     MPPointD origin=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);     Runnable job=AnimatedZoomJob.getInstance(mViewPortHandler,this,getTransformer(axis),getAxis(axis),mXAxis.mAxisRange,scaleX,scaleY,mViewPortHandler.getScaleX(),mViewPortHandler.getScaleY(),xValue,yValue,(float)origin.x,(float)origin.y,duration);     addViewportJob(job);     MPPointD.recycleInstance(origin);   }  else {     Log.e(LOG_TAG,\"Unable to execute zoomAndCenterAnimated(...) on API level < 11\");   } } "
"public BoardGetCommentsQuery startCommentId(Integer value){   return unsafeParam(\"start_comment_id\",value); } "
"public FilterImageTransform(String filters,int width,int height,int channels){   super(null);   int pixelFormat=channels == 1 ? AV_PIX_FMT_GRAY8 : channels == 3 ? AV_PIX_FMT_BGR24 : channels == 4 ? AV_PIX_FMT_RGBA : AV_PIX_FMT_NONE;   if (pixelFormat == AV_PIX_FMT_NONE) {     throw new IllegalArgumentException(\"Unsupported number of channels: \" + channels);   }   try {     filter=new FFmpegFrameFilter(filters,width,height);     filter.setPixelFormat(pixelFormat);     filter.start();   }  catch (  FrameFilter.Exception e) {     throw new RuntimeException(e);   } } "
"public boolean interiorIntersects(final S1Interval y){   if (isEmpty() || y.isEmpty() || lo() == hi()) {     return false;   }   if (isInverted()) {     return y.isInverted() || y.lo() < hi() || y.hi() > lo();   }  else {     if (y.isInverted()) {       return y.lo() < hi() || y.hi() > lo();     }     return (y.lo() < hi() && y.hi() > lo()) || isFull();   } } "
"public boolean end(){   return true; } "
"public void rotateImage(RotateDegrees degrees){   rotateImage(degrees,mAnimationDurationMillis); } "
"public AudioGetLyricsQuery(VkApiClient client,UserActor actor,int lyricsId){   super(client,\"audio.getLyrics\",Lyrics.class);   accessToken(actor.getAccessToken());   lyricsId(lyricsId); } "
"@Override public String toString(){   return MoreObjects.toStringHelper(this).add(\"id\",getId()).add(\"title\",getTitle()).add(\"summary\",getSummary()).add(\"extractBinary\",getExtractBinary()).add(\"extractFileName\",getExtractFileName()).add(\"extractContentType\",getExtractContentType()).add(\"extractSize\",getExtractSize()).add(\"publicationDate\",getPublicationDate()).add(\"bestSeller\",getBestSeller()).add(\"price\",getPrice()).toString(); } "
"public VideoSearchQuery filters(VideoSearchFilter... value){   return unsafeParam(\"filters\",value); } "
"private double mahalanobis(double[] v1,double[] v2,double[] sig2){   if (v1.length != v2.length)   throw new RuntimeException(\"Given array lengths were not equal.\");   if (v1.length != sig2.length)   throw new RuntimeException(\"Given array lengths were not equal.\");   double sum=0.0;   double diff=0.0;   for (int i=0; i < v1.length; i++) {     diff=v1[i] - v2[i];     sum+=((diff * diff) / sig2[i]);   }   return (sum); } "
"public PhotosSearchQuery radius(Integer value){   return unsafeParam(\"radius\",value); } "
"void addFillComponents(Container panel,int[] cols,int[] rows){   Dimension filler=new Dimension(10,10);   boolean filled_cell_11=false;   CellConstraints cc=new CellConstraints();   if (cols.length > 0 && rows.length > 0) {     if (cols[0] == 1 && rows[0] == 1) {       panel.add(Box.createRigidArea(filler),cc.xy(1,1));       filled_cell_11=true;     }   }   for (int index=0; index < cols.length; index++) {     if (cols[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));   }   for (int index=0; index < rows.length; index++) {     if (rows[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));   } } "
"public void registerObserver(SpinnerNotifyInterface observer){   observers.add(observer); } "
"public void testHighNewApiParent(){   doTestForParentApi(\"android:Theme.Holo.NoActionBar.Overscan\",\"apiParentTestAfter4\");   myFixture.checkResultByFile(\"res/values-v18/styles.xml\",\"themeEditor/apiParentTestAfter4/stylesApi-v18.xml\",true); } "
"public int stringLength(){   String sqlTypeUpperCase=sqlType.toUpperCase();   if (sqlTypeUpperCase.indexOf(\"VARCHAR\") >= 0) {     if (sqlTypeUpperCase.indexOf(\"(\") > 0 && sqlTypeUpperCase.indexOf(\")\") > 0) {       String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf(\"(\") + 1,sqlTypeUpperCase.indexOf(\")\"));       return Integer.parseInt(length);     }  else {       return 255;     }   }  else   if (sqlTypeUpperCase.indexOf(\"CHAR\") >= 0) {     if (sqlTypeUpperCase.indexOf(\"(\") > 0 && sqlTypeUpperCase.indexOf(\")\") > 0) {       String length=sqlTypeUpperCase.substring(sqlTypeUpperCase.indexOf(\"(\") + 1,sqlTypeUpperCase.indexOf(\")\"));       return Integer.parseInt(length);     }  else {       return 255;     }   }  else   if (sqlTypeUpperCase.indexOf(\"TEXT\") >= 0 || sqlTypeUpperCase.indexOf(\"LONG\") >= 0 || sqlTypeUpperCase.indexOf(\"CLOB\") >= 0) {     return 5000;   }   return 20; } "
"public Set possibleTypes(){   Set ret=new HashSet();   ret.addAll(oldSet.possibleTypes());   ret.addAll(newSet.possibleTypes());   return ret; } "
"public synchronized void openDriver(SurfaceHolder holder) throws IOException {   Camera theCamera=camera;   if (theCamera == null) {     if (requestedCameraId >= 0) {       theCamera=OpenCameraInterface.open(requestedCameraId);     }  else {       theCamera=OpenCameraInterface.open();     }     if (theCamera == null) {       throw new IOException();     }     camera=theCamera;   }   theCamera.setPreviewDisplay(holder);   if (!initialized) {     initialized=true;     configManager.initFromCameraParameters(theCamera);   }   Camera.Parameters parameters=theCamera.getParameters();   String parametersFlattened=parameters == null ? null : parameters.flatten();   try {     configManager.setDesiredCameraParameters(theCamera,false);   }  catch (  RuntimeException re) {     Log.w(TAG,\"Camera rejected parameters. Setting only minimal safe-mode parameters\");     Log.i(TAG,\"Resetting to saved camera params: \" + parametersFlattened);     if (parametersFlattened != null) {       parameters=theCamera.getParameters();       parameters.unflatten(parametersFlattened);       try {         theCamera.setParameters(parameters);         configManager.setDesiredCameraParameters(theCamera,true);       }  catch (      RuntimeException re2) {         Log.w(TAG,\"Camera rejected even safe-mode parameters! No configuration\");       }     }   } } "
"public IOUtils(){   super(); } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"@Override public void onCaptureStarted(){ } "
"public boolean optimizeScanForSingleObject(){   return true; } "
"public CompleteLinkClusterer(){ } "
"@Override @Transactional(value=\"cacheTransactionManager\") public ProcessChange doCreateControlTag(ConfigurationElement element) throws IllegalAccessException {   checkId(element.getEntityId());   tagCache.acquireWriteLockOnKey(element.getEntityId());   try {     LOGGER.trace(\"Creating ControlTag \" + element.getEntityId());     ControlTag controlTag=commonTagFacade.createCacheObject(element.getEntityId(),element.getElementProperties());     if (controlTag.getEquipmentId() != null) {       throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,\"Equipment id cannot be set at creation time for ControlTags - unable to configure.\");     }     try {       configurableDAO.insert(controlTag);     }  catch (    Exception e) {       LOGGER.error(\"Exception caught while inserting a new Control Tag into the DB - rolling back changes\",e);       throw new UnexpectedRollbackException(\"Unexpected exception while creating a Control Tag: rolling back the change\",e);     }     try {       tagCache.putQuiet(controlTag);       ProcessChange processChange=new ProcessChange();       if (processFacade.getProcessIdFromControlTag(controlTag.getId()) != null) {         processChange=new ProcessChange(processFacade.getProcessIdFromControlTag(controlTag.getId()));       }       return processChange;     }  catch (    Exception e) {       LOGGER.error(\"Exception caught while creating a ControlTag in cache - \" + \"rolling back DB transaction and removing from cache.\",e);       tagCache.remove(controlTag.getId());       throw new UnexpectedRollbackException(\"Unexpected exception while creating a Control Tag: rolling back the change\",e);     }   }   finally {     tagCache.releaseWriteLockOnKey(element.getEntityId());   } } "
"public void delFriend(int friendOid){   Iterator<Friend> it=iterator();   while (it.hasNext()) {     if (it.next().getOid() == friendOid) {       it.remove();     }   } } "
"private int blockHeight(final int blockRow){   return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE; } "
"public final synchronized void clear(){   fCatalog=null; } "
"private boolean journalRebuildRequired(){   final int redundantOpCompactThreshold=2000;   return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size(); } "
"public long ticks(){   long ret=0; synchronized (eventsList) {     if (eventsList.size() > 0) {       ret=((MidiEvent)eventsList.get(eventsList.size() - 1)).getTick();     }   }   return ret; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_TO_B(int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201076,num0,skilltarget,skillname); } "
"static ByteBufferRange decode(String string){   int prefix=string.indexOf(':');   int sep=string.indexOf('-',prefix + 1);   checkArgument(prefix >= 0 && sep >= 0,\"Invalid split string: %s\",string);   char[] start=new char[prefix + sep - (prefix + 1)];   string.getChars(0,prefix,start,0);   string.getChars(prefix + 1,sep,start,prefix);   char[] end=new char[prefix + string.length() - (sep + 1)];   string.getChars(0,prefix,end,0);   string.getChars(sep + 1,string.length(),end,prefix);   byte[] startBytes, endBytes;   try {     startBytes=Hex.decodeHex(start);     endBytes=Hex.decodeHex(end);   }  catch (  DecoderException e) {     throw new IllegalArgumentException(format(\"Invalid split string: %s\",string));   }   return new ByteBufferRangeImpl(ByteBuffer.wrap(startBytes),ByteBuffer.wrap(endBytes),-1,false); } "
"@Override public boolean bulkAdd(IndexRequest request){   if (bulkProcessor == null) {     log.error(\"bulkProcessor is null. This should not happen!\");     return false;   }   if (request == null) {     return false;   }   bulkProcessor.add(request);   log.trace(\"bulkAdd() - BulkProcessor will handle indexing of new index.\");   return true; } "
"private static long toLong(int x,int z){   return ((long)x << 32) + z - Integer.MIN_VALUE; } "
"public void updateInventories(boolean forceUpdate) throws LoginFailedException, RemoteServerException {   if (forceUpdate) {     lastInventoryUpdate=0;     itemBag.reset();     pokebank.reset();     candyjar.reset();     pokedex.reset();     incubators.clear();     hatchery.reset();   }   GetInventoryMessage invReqMsg=GetInventoryMessage.newBuilder().setLastTimestampMs(lastInventoryUpdate).build();   ServerRequest inventoryRequest=new ServerRequest(RequestTypeOuterClass.RequestType.GET_INVENTORY,invReqMsg);   api.getRequestHandler().sendServerRequests(inventoryRequest);   GetInventoryResponse response;   try {     response=GetInventoryResponse.parseFrom(inventoryRequest.getData());   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException(e);   }   updateInventories(response); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200503,skilltarget,num0,skillname); } "
"public void ignoreRelationship(RelatedFinder relatedFinder){   this.ignored.add(relatedFinder); } "
"public static void v(String tag,String msg,Throwable throwable){   if (sLevel > LEVEL_VERBOSE) {     return;   }   Log.v(tag,msg,throwable); } "
"@Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){   rootView=(ViewGroup)inflater.inflate(R.layout.fragement,container,false);   initCurrentMonthInGridview();   if (Singleton.getInstance().getIsSwipeViewPager() == 2)   refreshDays();   return rootView; } "
"public JSONStringer(){   super(new StringWriter()); } "
"public EntityXmlAssertTest(String caseName,Element mainElement){   super(caseName);   this.entityXmlUrlString=mainElement.getAttribute(\"entity-xml-url\");   this.action=mainElement.getAttribute(\"action\");   if (UtilValidate.isEmpty(this.action))   this.action=\"assert\"; } "
"public RoleAlreadyExistsException(){   super(); } "
"public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.sql.Timestamp moment){   return filterByDate(datedValues,moment,null,null,true); } "
"private void DrawPrimitive(DrawItem i,World w) throws Exception {   ItemStack item=MinecraftTypeHelper.getItemStackFromDrawItem(i);   if (item == null)   throw new Exception(\"Unrecognised item type: \" + i.getType());   BlockPos pos=new BlockPos(i.getX(),i.getY(),i.getZ());   placeItem(item,pos,w,true); } "
"private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){   Integer value=table.get(key);   table.put(key,value == null ? 1 : value + 1); } "
"public ClearCacheRequest(Cache cache,Runnable callback){   super(Method.GET,null,null);   mCache=cache;   mCallback=callback; } "
"public T walkInOptimizedOrder(final FieldVectorChangingVisitor<T> visitor){   return walkInDefaultOrder(visitor); } "
"public CompilationUnit addSourceFile(String name){   return sourceFiles.addSourceFile(name); } "
"public TAC2008DirectoryFileSet(String sCorpusDir){   CorpusDir=sCorpusDir;   Categories=null;   TrainingFiles=new ArrayList<CategorizedFileEntry>();   TestFiles=new ArrayList<CategorizedFileEntry>(); } "
"public void addToSpellingCorrector(String contents){   if (contents == null) {     return;   }   ISpellingCorrector sc=Singleton.getSpellingCorrector();   if (contents.length() > this.MAXSPLITLENGTH) {     contents=contents.substring(0,MAXSPLITLENGTH);   }   List<String> splitString=Arrays.asList(contents.replaceAll(\"[^a-zA-Z0-9]\",\" \").toLowerCase().split(\" \"));   if (splitString.size() > 10000) {     splitString=splitString.subList(0,10000);   }   for (  String s : splitString) {     if (s.length() >= 3) {       sc.putWord(s);     }   } } "
"public synchronized VisualTree addTree(String group,Tree tree){   return addTree(group,tree,null); } "
"protected void handleEnd(Collection<T> results) throws IOException { } "
"@Deprecated public ItemStack(final int type,final int amount,final short damage){   this.type=type;   this.amount=amount;   this.durability=damage; } "
"public double normInf(){   double f=0;   for (int i=0; i < m; i++) {     double s=0;     for (int j=0; j < n; j++) {       s+=Math.abs(A[i][j]);     }     f=Math.max(f,s);   }   return f; } "
"public boolean on_fly_cg(){   return soot.PhaseOptions.getBoolean(options,\"on-fly-cg\"); } "
"private void readDetailedResultsFromFile(String sFilename){   PerformanceTableModel tTmp=new PerformanceTableModel();   String sDetailedRes=utils.loadFileToStringWithNewlines(sFilename);   String[] sRows=sDetailedRes.split(\"\\n\");   for (int iRowCnt=0; iRowCnt < sRows.length; iRowCnt++) {     String sLine=sRows[iRowCnt];     if (sLine.startsWith(\"Theme\"))     continue;     String[] sResult=sLine.split(\"\\\\s+\");     if (sResult.length > 0)     tTmp.append(sResult[1],sResult[0],Double.valueOf(sResult[3]).doubleValue());   }   DetailedResultsTbl.setModel(tTmp); } "
"@Override public boolean accept(File file){   return file.isDirectory(); } "
"static public File copyMapFiles(File mapFile,boolean isTemporary){   System.out.println(\"Current directory: \" + System.getProperty(\"user.dir\"));   File savesDir=FMLClientHandler.instance().getSavesDir();   File dst=null;   if (mapFile != null && mapFile.exists()) {     dst=new File(savesDir,getNewSaveFileLocation(isTemporary));     try {       FileUtils.copyDirectory(mapFile,dst);     }  catch (    IOException e) {       System.out.println(\"Failed to load file: \" + mapFile.getPath());       return null;     }   }   return dst; } "
"public void onAccuracyChanged(Sensor sensor,int accuracy){   if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {     return;   }   if (this.status == AccelListener.STOPPED) {     return;   }   this.accuracy=accuracy; } "
"private Object findTemplatesByIndex(Context context,TypeData templateType,IEntryHolder entry,MatchTarget matchTarget){   Object result=null;   IStoredList<TemplateCacheInfo>[] t_vec;   IStoredList<TemplateCacheInfo>[] min_array=null;   boolean need_search=true;   if (matchTarget == MatchTarget.NOTIFY && templateType.getM_NumRegularNotifyTemplatesStored() == 0)   need_search=false;   final IEntryData entryData=entry.getEntryData();   if (!templateType.hasIndexes()) {     if (need_search)     result=templateType.getTemplates(matchTarget);     result=getTemplatesWaitingForUid(templateType,matchTarget,result,entry);     if (need_search)     result=getTemplatesExtendedSearch(templateType,matchTarget,result);     return result;   }   int minIndexSize=0;   IStoredList templVector=null, nullTemplVector=null;   int latestIndexToConsider=0;   if (need_search) {     boolean anyIndex=false;     final TypeDataIndex<?>[] indexes=templateType.getIndexes();     for (    TypeDataIndex<?> index : indexes) {       if (index.getIndexCreationNumber() > latestIndexToConsider)       continue;       if (index.isCompound())       continue;       anyIndex=true;       IStoredList<TemplateCacheInfo> templatesVector=null, nullTemplatesVector=null;       t_vec=null;       Object entryValue=index.getIndexValue(entryData);       if (index.isMultiValuePerEntryIndex() && entryValue != null) {         IStoredList<TemplateCacheInfo> multiValueTemplates=new ConcurrentSegmentedStoredList<TemplateCacheInfo>(false);         nullTemplatesVector=(matchTarget == MatchTarget.READ_TAKE) ? index._RTNullTemplates : index._NNullTemplates;         for (        Object value : (Collection<?>)entryValue) {           if (matchTarget == MatchTarget.READ_TAKE) {             if (value != null) {               t_vec=index._RTTemplates.get(value);               if ((t_vec != null) && (!t_vec[0].isEmpty())) {                 templatesVector=t_vec[0];                 for (IStoredListIterator<TemplateCacheInfo> it=templatesVector.establishListScan(false); it != null; it=templatesVector.next(it)) {                   multiValueTemplates.add(it.getSubject());                 }               }             }           }  else {             if (value != null) {               t_vec=index._NTemplates.get(value);               if ((t_vec != null) && (!t_vec[0].isEmpty())) {                 templatesVector=t_vec[0];                 for (IStoredListIterator<TemplateCacheInfo> it=templatesVector.establishListScan(false); it != null; it=templatesVector.next(it)) {                   TemplateCacheInfo subject=it.getSubject();                   if (subject != null)                   multiValueTemplates.add(subject);                 }               }             }           }         }         t_vec=new IStoredList[2];         t_vec[0]=multiValueTemplates;         t_vec[1]=nullTemplatesVector;         if (!multiValueTemplates.isEmpty())         templatesVector=multiValueTemplates;       }  else {         if (matchTarget == MatchTarget.READ_TAKE) {           if (entryValue != null) {             t_vec=index._RTTemplates.get(entryValue);             if ((t_vec != null) && (!t_vec[0].isEmpty()))             templatesVector=t_vec[0];           }           nullTemplatesVector=index._RTNullTemplates;         }  else {           if (entryValue != null) {             t_vec=index._NTemplates.get(entryValue);             if ((t_vec != null) && (!t_vec[0].isEmpty()))             templatesVector=t_vec[0];           }           nullTemplatesVector=index._NNullTemplates;         }       }       int size=(templatesVector == null) ? nullTemplatesVector.size() : templatesVector.size() + nullTemplatesVector.size();       if (nullTemplVector == null) {         minIndexSize=size;         templVector=templatesVector;         nullTemplVector=nullTemplatesVector;         if (templatesVector != null)         min_array=t_vec;       }  else {         if (size < minIndexSize) {           minIndexSize=size;           templVector=templatesVector;           nullTemplVector=nullTemplatesVector;           if (templatesVector != null)           min_array=t_vec;  else           min_array=null;         }       }       if (size == 0)       break;     }     result=min_array;     if (anyIndex) {       if (templVector == null) {         result=nullTemplVector;       }     }  else {       result=templateType.getTemplates(matchTarget);     }   }   result=getTemplatesWaitingForUid(templateType,matchTarget,result,entry);   if (need_search)   result=templateType.anyInitialExtendedIndex() ? TypeDataIndex.getTemplatesExtendedIndexSearch(templateType,matchTarget,entry,result) : getTemplatesExtendedSearch(templateType,matchTarget,result);   return result; } "
"public Object invoke(MethodInvocation methodInvocation) throws Throwable {   int retries=retryCountOnFailure;   while (true) {     try {       if (actualService == null) { synchronized (actualServiceMonitor) {           if (actualService == null) {             actualService=lookupService();           }         }       }       return methodInvocation.getMethod().invoke(actualService,methodInvocation.getArguments());     }  catch (    InvocationTargetException e) {       if (logger.isTraceEnabled()) {         logger.trace(\"Failed to execute [\" + methodInvocation.getMethod().getName() + \"] on [\"+ actualService+ \"]\",e);       } synchronized (actualServiceMonitor) {         actualService=null;       }       if (--retries == 0) {         throw e.getTargetException();       }     }   } } "
"private static void paintShadow(Graphics2D g,ColorSet colorSet,ConnectionDrawing drawing){   Color pre=g.getColor();   Stroke s=g.getStroke();   if (colorSet.getStyle() == WidgetDecorator.BLUEPRINT_STYLE) {     g.setPaint(colorSet.getBackgroundPaint());     g.setStroke(sLineShadowStroke);   }  else {     g.setColor(colorSet.getShadow());     g.setStroke(colorSet.getShadowStroke());   }   drawing.draw(g);   g.setColor(pre);   g.setStroke(s); } "
"@Override public SparseGradient log10(){   return new SparseGradient(FastMath.log10(value),1.0 / (FastMath.log(10.0) * value),derivatives); } "
"public RMA6FromBlastCreator(String creator,BlastFileFormat format,BlastMode blastMode,String[] blastFiles,String[] readsFiles,String rma6File,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes) throws IOException {   this.format=format;   this.blastMode=blastMode;   this.blastFiles=blastFiles;   this.readsFiles=readsFiles;   this.rma6File=rma6File;   this.maxMatchesPerRead=maxMatchesPerRead;   this.doc=doc;   doc.getMeganFile().setFile(rma6File,MeganFile.Type.RMA6_FILE);   if (doc.getActiveViewers().size() > 0)   cNames=doc.getActiveViewers().toArray(new String[doc.getActiveViewers().size()]);  else   cNames=new String[]{Classification.Taxonomy};   this.parsers=new IdParser[cNames.length];   int taxonMapperIndex=-1;   System.err.println(\"Classifications: \" + Basic.toString(cNames,\",\"));   for (int i=0; i < cNames.length; i++) {     parsers[i]=ClassificationManager.get(cNames[i],true).getIdMapper().createIdParser();     if (cNames[i].equals(Classification.Taxonomy)) {       taxonMapperIndex=i;     }   }   if (taxonMapperIndex == -1)   throw new IOException(\"Internal error: taxonMapperIndex=-1\");  else   this.taxonMapperIndex=taxonMapperIndex;   ReadMagnitudeParser.setEnabled(hasMagnitudes);   this.pairedReads=doc.isPairedReads();   this.pairedReadSuffixLength=doc.getPairedReadSuffixLength();   rma6FileCreator=new RMA6FileCreator(rma6File,useCompression);   final String[] matchClassificationNames=new String[parsers.length];   for (int i=0; i < parsers.length; i++)   matchClassificationNames[i]=parsers[i].getCName();   rma6FileCreator.writeHeader(creator,blastMode,matchClassificationNames,doc.isPairedReads()); } "
"@Override protected void reset() throws XNIException {   if (fValidationManager != null)   fValidationManager.reset();   configurePipeline();   super.reset(); } "
"private boolean release(String id){   AudioPlayer audio=players.remove(id);   if (audio == null) {     return false;   }   if (players.isEmpty()) {     onLastPlayerReleased();   }   audio.destroy();   return true; } "
"public FileExistsException(File file){   super(\"File \" + file + \" exists\"); } "
"@Override protected ArrayList<Point> internalTrim(ArrayList<Point> input){   int length=input.size();   float leaveOutPeriod=(float)length / (length - DataNormalizer.POINT_COUNT);   ArrayList<Point> result=new ArrayList<>(DataNormalizer.POINT_COUNT);   int previousBase=-1;   for (int i=0; i < length; i++) {     if (i == 0) {       previousBase=0;       result.add(input.get(0));       continue;     }     int newBase=(int)((i + 1) / leaveOutPeriod);     if (newBase == previousBase) {       result.add(input.get(i));     }     previousBase=newBase;   }   return new DataCutTrimmer().trim(result); } "
"private static String doNormalize(String filename,char separator,boolean keepSeparator){   if (filename == null) {     return null;   }   int size=filename.length();   if (size == 0) {     return filename;   }   int prefix=getPrefixLength(filename);   if (prefix < 0) {     return null;   }   char[] array=new char[size + 2];   filename.getChars(0,filename.length(),array,0);   char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;   for (int i=0; i < array.length; i++) {     if (array[i] == otherSeparator) {       array[i]=separator;     }   }   boolean lastIsDirectory=true;   if (array[size - 1] != separator) {     array[size++]=separator;     lastIsDirectory=false;   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == separator) {       System.arraycopy(array,i,array,i - 1,size - i);       size--;       i--;     }   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {       if (i == size - 1) {         lastIsDirectory=true;       }       System.arraycopy(array,i + 1,array,i - 1,size - i);       size-=2;       i--;     }   }   outer:   for (int i=prefix + 2; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {       if (i == prefix + 2) {         return null;       }       if (i == size - 1) {         lastIsDirectory=true;       }       int j;       for (j=i - 4; j >= prefix; j--) {         if (array[j] == separator) {           System.arraycopy(array,i + 1,array,j + 1,size - i);           size-=i - j;           i=j + 1;           continue outer;         }       }       System.arraycopy(array,i + 1,array,prefix,size - i);       size-=i + 1 - prefix;       i=prefix + 1;     }   }   if (size <= 0) {     return \"\";   }   if (size <= prefix) {     return new String(array,0,size);   }   if (lastIsDirectory && keepSeparator) {     return new String(array,0,size);   }   return new String(array,0,size - 1); } "
"public boolean isApplicable(){   CompareWindow viewer=(CompareWindow)getParent();   return viewer != null; } "
"private static final boolean hasWildcard(String s){   String test=s.replace(\"\\\\*\",\"\").replace(\"\\\\?\",\"\");   return (test.contains(\"*\") || test.contains(\"?\")); } "
"public RecordId insertIntoDeletedSlot(){   RecordId nds=getNextDeletedSlotId();   setNextDeletedSlotId(new RecordId(new BlockId(\"\",0),0));   Constant flag=INUSE_CONST;   setVal(currentPos(),flag);   return nds; } "
"public static int arraySize(final int expected,final float f){   final long s=Math.max(2,nextPowerOfTwo((long)Math.ceil(expected / f)));   if (s > (1 << 30))   throw new IllegalArgumentException(\"Too large (\" + expected + \" expected elements with load factor \"+ f+ \")\");   return (int)s; } "
"public static boolean performBuyFromAbyssShop(Npc npc,Player player,TradeList tradeList){   if (!RestrictionsManager.canTrade(player)) {     return false;   }   if (!validateBuyItems(npc,tradeList,player)) {     PacketSendUtility.sendMessage(player,\"Some items are not allowed to be selled from this npc\");     return false;   }   Storage inventory=player.getInventory();   int freeSlots=inventory.getFreeSlots();   if (!tradeList.calculateAbyssBuyListPrice(player)) {     return false;   }   if (tradeList.getRequiredAp() < 0) {     AuditLogger.info(player,\"Posible client hack. tradeList.getRequiredAp() < 0\");     PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300927));     return false;   }   if (freeSlots < tradeList.size()) {     PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300762));     return false;   }   AbyssPointsService.addAp(player,-tradeList.getRequiredAp());   Map<Integer,Long> requiredItems=tradeList.getRequiredItems();   for (  Integer itemId : requiredItems.keySet()) {     if (!player.getInventory().decreaseByItemId(itemId,requiredItems.get(itemId))) {       AuditLogger.info(player,\"Possible hack. Not removed items on buy in abyss shop.\");       return false;     }   }   LimitedItem item=null;   for (  TradeItem tradeItem : tradeList.getTradeItems()) {     item=LimitedItemTradeService.getInstance().getLimitedItem(tradeItem.getItemId(),npc.getNpcId());     if (item != null) {       if (item.getBuyLimit() == 0 && item.getDefaultSellLimit() != 0) {         item.getBuyCount().putIfAbsent(player.getObjectId(),0);         if (item.getSellLimit() - tradeItem.getCount() < 0)         return false;         item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());       }  else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() == 0) {         item.getBuyCount().putIfAbsent(player.getObjectId(),0);         if (item.getBuyLimit() - tradeItem.getCount() < 0)         return false;         if (item.getBuyCount().containsKey(player.getObjectId())) {           if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {             item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());           }  else           return false;         }       }  else       if (item.getBuyLimit() != 0 && item.getDefaultSellLimit() != 0) {         item.getBuyCount().putIfAbsent(player.getObjectId(),0);         if (item.getBuyLimit() - tradeItem.getCount() < 0 || item.getSellLimit() - tradeItem.getCount() < 0)         return false;         if (item.getBuyCount().containsKey(player.getObjectId())) {           if (item.getBuyCount().get(player.getObjectId()) < item.getBuyLimit()) {             item.getBuyCount().put(player.getObjectId(),item.getBuyCount().get(player.getObjectId()) + (int)tradeItem.getCount());           }  else           return false;         }         item.setSellLimit(item.getSellLimit() - (int)tradeItem.getCount());       }     }     long count=ItemService.addItem(player,tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount());     if (count != 0) {       log.warn(String.format(\"CHECKPOINT: itemservice couldnt add all items on buy: %d %d %d %d\",player.getObjectId(),tradeItem.getItemTemplate().getTemplateId(),tradeItem.getCount(),count));       return false;     }     if (tradeItem.getCount() > 1) {       PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300785,new DescriptionId(tradeItem.getItemTemplate().getNameId()),tradeItem.getCount()));     }  else {       PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300784,new DescriptionId(tradeItem.getItemTemplate().getNameId())));     }   }   return true; } "
"public FriendsGetSuggestionsQuery fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"private void generateFilledPath(final ILineDataSet dataSet,final int startIndex,final int endIndex,final Path outputPath){   final float fillMin=dataSet.getFillFormatter().getFillLinePosition(dataSet,mDataProvider);   final float phaseY=mAnimator.getPhaseY();   final boolean isDrawSteppedEnabled=dataSet.getMode() == LineDataSet.Mode.STEPPED;   final Path filled=outputPath;   filled.reset();   final Entry entry=dataSet.getEntryForIndex(startIndex);   filled.moveTo(entry.getX(),fillMin);   filled.lineTo(entry.getX(),entry.getY() * phaseY);   Entry currentEntry=null;   Entry previousEntry=null;   for (int x=startIndex + 1; x <= endIndex; x++) {     currentEntry=dataSet.getEntryForIndex(x);     if (isDrawSteppedEnabled && previousEntry != null) {       filled.lineTo(currentEntry.getX(),previousEntry.getY() * phaseY);     }     filled.lineTo(currentEntry.getX(),currentEntry.getY() * phaseY);     previousEntry=currentEntry;   }   if (currentEntry != null) {     filled.lineTo(currentEntry.getX(),fillMin);   }   filled.close(); } "
"protected void paint3DRectLighting(Graphics2D g2,int x,int y,int width,int height){   g2.setColor(Color.white);   g2.drawLine(x + 1,y + 1,x + 1,y + height - 1);   g2.drawLine(x + 1,y + 1,x + width - 1,y + 1);   g2.setColor(Color.gray);   g2.drawLine(x + 1,y + height - 1,x + width - 1,y + height - 1);   g2.drawLine(x + width - 1,y + 1,x + width - 1,y + height - 1);   g2.setColor(Color.darkGray);   g2.drawLine(x,y + height,x + width,y + height);   g2.drawLine(x + width,y,x + width,y + height); } "
"public PackageScanner useClassLoader(ClassLoader classLoader){   this.classLoader=classLoader;   return this; } "
"public void delete(String id){   log.debug(\"Request to delete PetCategory : {}\",id);   petCategoryRepository.delete(UUID.fromString(id)); } "
"private boolean isApprovalEnabled(){   boolean setting=systemSettingManager.hideUnapprovedDataInAnalytics();   boolean levels=!dataApprovalLevelService.getAllDataApprovalLevels().isEmpty();   return setting && levels; } "
"public static int expandJTreeNode(javax.swing.JTree tree,javax.swing.tree.TreeModel model,Object node,int row,int depth){   if (node != null && !model.isLeaf(node)) {     tree.expandRow(row);     if (depth != 0) {       for (int index=0; row + 1 < tree.getRowCount() && index < model.getChildCount(node); index++) {         row++;         Object child=model.getChild(node,index);         if (child == null)         break;         javax.swing.tree.TreePath path;         while ((path=tree.getPathForRow(row)) != null && path.getLastPathComponent() != child)         row++;         if (path == null)         break;         row=expandJTreeNode(tree,model,child,row,depth - 1);       }     }   }   return row; } "
"private ProcessFunction showTransformationDialog(ProcessFunction existingProcessFunction){   ProcessFunction processFunction=null;   RenderTransformationDialog dlg=new RenderTransformationDialog(GeoServerConnectionManager.getInstance());   if (dlg.showDialog(existingProcessFunction)) {     processFunction=dlg.getTransformationProcessFunction();   }   return processFunction; } "
"@Override public boolean isEqualNode(Node arg){   if (!super.isEqualNode(arg)) {     return false;   }   boolean hasAttrs=hasAttributes();   if (hasAttrs != arg.hasAttributes()) {     return false;   }   if (hasAttrs) {     NamedNodeMap map1=getAttributes();     NamedNodeMap map2=arg.getAttributes();     int len=map1.getLength();     if (len != map2.getLength()) {       return false;     }     for (int i=0; i < len; i++) {       Node n1=map1.item(i);       if (n1.getLocalName() == null) {         Node n2=map2.getNamedItem(n1.getNodeName());         if (n2 == null || !n1.isEqualNode(n2)) {           return false;         }       }  else {         Node n2=map2.getNamedItemNS(n1.getNamespaceURI(),n1.getLocalName());         if (n2 == null || !n1.isEqualNode(n2)) {           return false;         }       }     }   }   return true; } "
"public final boolean equals(Object oObj){   return Word.equals(((WordDefinition)oObj).Word); } "
"public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){   if (options.mCancel) {     return null;   }   Thread thread=Thread.currentThread();   if (!canThreadDecoding(thread)) {     Log.d(TAG,\"Thread \" + thread + \" is not allowed to decode.\");     return null;   }   setDecodingOptions(thread,options);   Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);   removeDecodingOptions(thread);   return b; } "
"public static <T>void update(Map<String,String> properties,T obj) throws IllegalArgumentException {   Field[] fields=obj.getClass().getDeclaredFields();   Arrays.stream(fields).forEach(null); } "
"public boolean equals(Object obj){   if (this == obj) {     return true;   }  else   if (!(obj instanceof MethodDesc)) {     return false;   }   MethodDesc od=(MethodDesc)obj;   return ((name == null ? od.name == null : name.equals(od.name)) && Arrays.equals(types,od.types) && (constraints == null ? od.constraints == null : constraints.equals(od.constraints))); } "
"private Date extrapolateStartTimeFromScanRanges(List<ScanRangeStatus> pendingScanRanges,List<ScanRangeStatus> activeScanRanges,List<ScanRangeStatus> completeScanRanges){   Date startTime=null;   for (  ScanRangeStatus status : Iterables.concat(pendingScanRanges,activeScanRanges,completeScanRanges)) {     Date queuedTime=status.getScanQueuedTime();     if (queuedTime != null && (startTime == null || queuedTime.before(startTime))) {       startTime=queuedTime;     }   }   if (startTime == null) {     startTime=new Date(0);   }   return startTime; } "
"public void addColumn(String name,int length){   int idx=names.length;   ensureCapacity(idx + 1);   names[idx]=name;   cols[idx + 1]=cols[idx] + length; } "
"public static <V>boolean isEmpty(V[] sourceArray){   return (sourceArray == null || sourceArray.length == 0); } "
"private static void initializeArcGISLicenses(){   System.out.println(\"Initialise ArcGIS License\");   try {     aoInit=new AoInitialize();     if (aoInit.isProductCodeAvailable(esriLicenseProductCode.esriLicenseProductCodeEngine) == esriLicenseStatus.esriLicenseAvailable)     aoInit.initialize(esriLicenseProductCode.esriLicenseProductCodeEngine);  else     if (aoInit.isProductCodeAvailable(esriLicenseProductCode.esriLicenseProductCodeBasic) == esriLicenseStatus.esriLicenseAvailable)     aoInit.initialize(esriLicenseProductCode.esriLicenseProductCodeBasic);   }  catch (  Exception e) {     e.printStackTrace();   } } "
"public Builder zoomInTitle(String zoomInTitle){   this.zoomInTitle=zoomInTitle;   return this; } "
"private Map<String,String> parseQueryString(String queryString){   TreeMap<String,String> queryMap=new TreeMap<String,String>();   String[] queryPairs=queryString.split(\"&\");   for (  String pair : queryPairs) {     int idx=pair.indexOf(\"=\");     try {       queryMap.put(URLDecoder.decode(pair.substring(0,idx),\"UTF-8\"),URLDecoder.decode(pair.substring(idx + 1),\"UTF-8\"));     }  catch (    UnsupportedEncodingException e) {       e.printStackTrace();     }   }   return queryMap; } "
"public static int indexOf(long[] set,int bitsPerElement,int size,long val){   int low=0;   int high=size - 1;   int mid=0;   while (low <= high) {     mid=(low + high) >>> 1;     long curr=get(set,bitsPerElement,mid);     if (curr < val) {       low=mid + 1;     }  else     if (curr > val) {       high=mid - 1;     }  else {       return mid;     }   }   return -(low + 1); } "
"public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){   this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort)); } "
"public Decision suggest(Map CategoryValues){   String sSuggestion=\"\";   double dMaxSimil=-1.0;   if (sSuggestion.equals(\"\")) {     Iterator iIter=CategoryValues.keySet().iterator();     while (iIter.hasNext()) {       String sCurCategory=(String)iIter.next();       double dCurSimilarity=((Double)CategoryValues.get(sCurCategory)).doubleValue();       if (dCurSimilarity > dMaxSimil) {         sSuggestion=sCurCategory;         dMaxSimil=dCurSimilarity;       }     }   }   double dUncertainty=UncertaintyCalculator.computeUncertainty(CategoryValues,dMaxSimil,sSuggestion);   if (dUncertainty > LookupThreshold) {     System.out.println(\"High uncertainty. Looking up for similar decision.\");     double dMinDistance=Double.MAX_VALUE;     Iterator iIter=vPreviousDecisions.iterator();     DecisionSupport dpSecondarySuggestion=null;     while (iIter.hasNext()) {       DecisionSupport dp=(DecisionSupport)iIter.next();       double dCurDist=dp.distanceFrom(CategoryValues,sSuggestion);       if ((dMinDistance > dCurDist) && (dCurDist < Double.MAX_VALUE)) {         dpSecondarySuggestion=dp;         dMinDistance=dCurDist;       }     }     double dFoundUncertainty=0;     if (dpSecondarySuggestion != null) {       dFoundUncertainty=EntropyUncertaintyCalculator.computeUncertainty(dpSecondarySuggestion.CategoryEstimations,((Double)dpSecondarySuggestion.CategoryEstimations.get(dpSecondarySuggestion.SuggestedCategory)).doubleValue(),dpSecondarySuggestion.SuggestedCategory);       if (dFoundUncertainty <= dUncertainty) {         sSuggestion=dpSecondarySuggestion.CorrectCategory;         dUncertainty=dUncertainty / dFoundUncertainty;         System.out.println(\"Found decision \" + dpSecondarySuggestion.CorrectCategory + \" for \"+ CategoryValues.toString());       }     }   }   return new Decision(null,sSuggestion,1 - dUncertainty,CategoryValues); } "
"public MonsterHabitatCursor queryHabitatMonster(long id){   QueryHelper qh=new QueryHelper();   qh.Distinct=true;   qh.Table=S.TABLE_HABITAT;   qh.Columns=null;   qh.Selection=S.COLUMN_HABITAT_MONSTER_ID + \" = ?\";   qh.SelectionArgs=new String[]{String.valueOf(id)};   qh.GroupBy=null;   qh.Having=null;   qh.OrderBy=null;   qh.Limit=null;   return new MonsterHabitatCursor(wrapJoinHelper(builderHabitat(qh.Distinct),qh)); } "
"private static Reader makeReader(String templateLocation) throws IOException {   if (UtilValidate.isEmpty(templateLocation)) {     throw new IllegalArgumentException(\"FreeMarker template location null or empty\");   }   URL locationUrl=null;   try {     locationUrl=FlexibleLocation.resolveLocation(templateLocation);   }  catch (  MalformedURLException e) {     throw new IllegalArgumentException(e.getMessage());   }   if (locationUrl == null) {     throw new IllegalArgumentException(\"FreeMarker file not found at location: \" + templateLocation);   }   InputStream locationIs=locationUrl.openStream();   Reader templateReader=new InputStreamReader(locationIs);   String locationProtocol=locationUrl.getProtocol();   if (\"file\".equals(locationProtocol) && Debug.verboseOn()) {     String locationFile=locationUrl.getFile();     int lastSlash=locationFile.lastIndexOf(\"/\");     String locationDir=locationFile.substring(0,lastSlash);     String filename=locationFile.substring(lastSlash + 1);     Debug.logVerbose(\"FreeMarker render: filename=\" + filename + \", locationDir=\"+ locationDir,module);   }   return templateReader; } "
"public static String fileNameClean(String s){   char[] chars=s.toCharArray();   StringBuilder sb=new StringBuilder();   for (  char c : chars) {     if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')|| (c == '_')) {       sb.append(c);     }  else {       if (c == ' ' || c == '-') {         sb.append('_');       }  else {         sb.append(\"x\" + (int)c + \"x\");       }     }   }   return sb.toString(); } "
"public static String encodeHexString(byte[] data){   return new String(encodeHex(data)); } "
"public LeadsStartQuery(VkApiClient client,UserActor actor,int leadId,String secret){   super(client,\"leads.start\",Start.class);   accessToken(actor.getAccessToken());   leadId(leadId);   secret(secret); } "
"@Override public String writeToString(Node wnode) throws DOMException, LSException {   XMLSerializer ser=null;   String ver=_getXmlVersion(wnode);   if (ver != null && ver.equals(\"1.1\")) {     if (xml11Serializer == null) {       xml11Serializer=new XML11Serializer();       initSerializer(xml11Serializer);     }     copySettings(serializer,xml11Serializer);     ser=xml11Serializer;   }  else {     ser=serializer;   }   StringWriter destination=new StringWriter();   try {     prepareForSerialization(ser,wnode);     ser._format.setEncoding(\"UTF-16\");     ser.setOutputCharStream(destination);     if (wnode.getNodeType() == Node.DOCUMENT_NODE) {       ser.serialize((Document)wnode);     }  else     if (wnode.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {       ser.serialize((DocumentFragment)wnode);     }  else     if (wnode.getNodeType() == Node.ELEMENT_NODE) {       ser.serialize((Element)wnode);     }  else {       String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,\"unable-to-serialize-node\",null);       if (ser.fDOMErrorHandler != null) {         DOMErrorImpl error=new DOMErrorImpl();         error.fType=\"unable-to-serialize-node\";         error.fMessage=msg;         error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;         ser.fDOMErrorHandler.handleError(error);       }       throw new LSException(LSException.SERIALIZE_ERR,msg);     }   }  catch (  LSException lse) {     throw lse;   } catch (  RuntimeException e) {     if (e == DOMNormalizer.abort) {       return null;     }     throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();   } catch (  IOException ioe) {     String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"STRING_TOO_LONG\",new Object[]{ioe.getMessage()});     throw new DOMException(DOMException.DOMSTRING_SIZE_ERR,msg);   }  finally {     ser.clearDocumentState();   }   return destination.toString(); } "
"private void initWidget(View v){   TextView content=(TextView)v.findViewById(R.id.dialog_rate_limit_content);   DisplayUtils.setTypeface(getActivity(),content);   v.findViewById(R.id.dialog_rate_limit_button).setOnClickListener(this); } "
"public boolean isCritical(){   return true; } "
"@Override public String toString(){   return this.getClass().getSimpleName() + \": Includes fields with these names: \" + whitelist.toString(); } "
"private void write(String s) throws SAXException {   try {     output.write(s);   }  catch (  IOException e) {     throw new SAXException(e);   } } "
"protected AbstractLeaseMap(Map map,Lease lease,long duration){   this(map);   map.put(lease,new Long(duration)); } "
"private void updateFixutreFilterMask(int mask){   Filter filter=bodyFixture.getFilter();   if (filter == Filter.DEFAULT_FILTER) {     CategoryFilter cf=new CategoryFilter(Integer.MAX_VALUE,mask);     bodyFixture.setFilter(cf);   }  else {     CategoryFilter cf=new CategoryFilter(((CategoryFilter)filter).getCategory(),mask);     bodyFixture.setFilter(cf);   } } "
"public boolean containsHeader(String name){   for (int i=0; i < headers.size(); i++) {     Header header=(Header)headers.get(i);     if (header.getName().equalsIgnoreCase(name)) {       return true;     }   }   return false; } "
"public SubEquipmentConfiguration createSubEquipmentConfiguration(String subEquipmentUnitXml){   Element subEquipmentElement=parser.parse(subEquipmentUnitXml).getDocumentElement();   Long subEquipmentId=Long.parseLong(subEquipmentElement.getAttribute(ID_ATTRIBUTE));   String subEquipmentName=subEquipmentElement.getAttribute(NAME_ATTRIBUTE);   log.debug(\"Creating SubEquipment configuration: id=\" + subEquipmentId + \" name=\"+ subEquipmentName);   Long commFaultTagId=Long.parseLong(getTagValue(subEquipmentElement,COMMFAULT_TAG_ID_ELEMENT));   Boolean commFaultTagValue=Boolean.parseBoolean(getTagValue(subEquipmentElement,COMMFAULT_TAG_VALUE_ELEMENT));   SubEquipmentConfiguration subEquipmentConfiguration=new SubEquipmentConfiguration(subEquipmentId,subEquipmentName,commFaultTagId,commFaultTagValue);   try {     subEquipmentConfiguration.setAliveTagId(Long.parseLong(getTagValue(subEquipmentElement,ALIVE_TAG_ID_ELEMENT)));   }  catch (  NullPointerException e) {     log.debug(\"SubEquipment has no alive tag id.\");   }   try {     subEquipmentConfiguration.setAliveInterval(Long.parseLong(getTagValue(subEquipmentElement,ALIVE_INTERVAL_ELEMENT)));   }  catch (  NullPointerException e) {     log.debug(\"SubEquipment has no alive tag interval.\");   }   return subEquipmentConfiguration; } "
"public void mergeHistogram(DocumentNGramHistogram dnOtherDocumentNGram,double fNewDataImportance){   java.util.Iterator iIter=dnOtherDocumentNGram.NGramHistogram.keySet().iterator();   while (iIter.hasNext()) {     String sCurNGram=(String)iIter.next();     if (this.NGramHistogram.containsKey(sCurNGram)) {       double dPrev=((Double)NGramHistogram.get(sCurNGram)).doubleValue();       double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();       NGramHistogram.put(sCurNGram,dPrev + (dNew - dPrev) * fNewDataImportance);     }  else {       double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();       NGramHistogram.put(sCurNGram,dNew);     }   } } "
"public void wipeUser(int handle){   try {     mService.wipeUser(handle);   }  catch (  RemoteException re) {     Log.w(TAG,\"Could not wipe user \" + handle);   } } "
"public void handleDecode(Result result,Bitmap barcode){   inactivityTimer.onActivity();   playBeepSoundAndVibrate();   String resultString=result.getText();   if (resultString.equals(\"\")) {     Toast.makeText(CaptureActivity.this,\"Scan failed!\",Toast.LENGTH_SHORT).show();   }  else {     Intent resultIntent=new Intent();     Bundle bundle=new Bundle();     bundle.putString(\"result\",resultString);     resultIntent.putExtras(bundle);     this.setResult(RESULT_OK,resultIntent);   }   CaptureActivity.this.finish(); } "
"public void startInitialisation(){   startInitialisation(ZWaveNodeInitStage.EMPTYNODE); } "
"public boolean isInNet(String host,String pattern,String mask){   host=dnsResolve(host);   if (host == null || host.length() == 0) {     return false;   }   long lhost=parseIpAddressToLong(host);   long lpattern=parseIpAddressToLong(pattern);   long lmask=parseIpAddressToLong(mask);   return (lhost & lmask) == lpattern; } "
"public BaseViewHolder linkify(int viewId){   TextView view=getView(viewId);   Linkify.addLinks(view,Linkify.ALL);   return this; } "
"public char readChar(){   scanner.useDelimiter(EMPTY_PATTERN);   String ch=scanner.next();   assert ch.length() == 1 : \"Internal (Std)In.readChar() error!\" + \" Please contact the authors.\";   scanner.useDelimiter(WHITESPACE_PATTERN);   return ch.charAt(0); } "
"public static final void release(final Summon summon,final UnsummonType unsummonType,final boolean isAttacked){   if (summon.getMode() == SummonMode.RELEASE) {     return;   }   summon.getController().cancelCurrentSkill();   summon.setMode(SummonMode.RELEASE);   final Player master=summon.getMaster(); switch (unsummonType) { case COMMAND:     PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_FOLLOWER(summon.getNameId()));   PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon)); break; case DISTANCE: PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_BY_TOO_DISTANCE); PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon)); break; case LOGOUT: case UNSPECIFIED: break; } summon.getObserveController().notifySummonReleaseObservers(); summon.setReleaseTask(ThreadPoolManager.getInstance().schedule(new ReleaseSummonTask(summon,unsummonType,isAttacked),5000)); } "
"public NewsfeedGetRecommendedQuery maxPhotos(Integer value){   return unsafeParam(\"max_photos\",value); } "
"public boolean hasAttributeWithValue(final WebElement element,final String attribute,final String value,int timeout){   return isConditionMet(null,timeout); } "
"private InputStream gzipInputStream(String contentEncoding,InputStream inputStream) throws IOException {   if (HeaderUtil.isGzipContent(contentEncoding)) {     inputStream=new GZIPInputStream(inputStream);   }   return inputStream; } "
"protected void removeBogusHeads(){   Chain<Unit> units=body.getUnits();   Unit trueHead=units.getFirst();   while (this.getHeads().size() > 1) {     for (Iterator<Unit> headItr=this.getHeads().iterator(); headItr.hasNext(); ) {       Unit head=headItr.next();       if (trueHead == head)       continue;       this.unitToPreds.remove(head);       List<Unit> succs=this.unitToSuccs.get(head);       for (Iterator<Unit> succsItr=succs.iterator(); succsItr.hasNext(); ) {         List<Unit> tobeRemoved=new ArrayList<Unit>();         Unit succ=succsItr.next();         List<Unit> predOfSuccs=this.unitToPreds.get(succ);         for (Iterator<Unit> predItr=predOfSuccs.iterator(); predItr.hasNext(); ) {           Unit pred=predItr.next();           if (pred == head)           tobeRemoved.add(pred);         }         predOfSuccs.removeAll(tobeRemoved);       }       this.unitToSuccs.remove(head);       if (units.contains(head))       units.remove(head);     }     this.buildHeadsAndTails();   } } "
"@Override public BlockPos next(){   return hasNext() ? diagonalMode ? centerPosition.add(allDirections[iterationStep++]) : centerPosition.add(mainDirections[iterationStep++]) : null; } "
"public int compareTo(GenericEntity that){   if (that == null)   return -1;   int tempResult=this.entityName.compareTo(that.entityName);   if (tempResult != 0)   return tempResult;   Iterator<ModelField> pkIter=getModelEntity().getPksIterator();   while (pkIter.hasNext()) {     ModelField curField=pkIter.next();     tempResult=compareToFields(that,curField.getName());     if (tempResult != 0)     return tempResult;   }   Iterator<ModelField> nopkIter=getModelEntity().getNopksIterator();   while (nopkIter.hasNext()) {     ModelField curField=nopkIter.next();     if (!curField.getIsAutoCreatedInternal()) {       tempResult=compareToFields(that,curField.getName());       if (tempResult != 0)       return tempResult;     }   }   return tempResult; } "
"public static void sendServerListFor(int accountId){   if (accountsOnLS.containsKey(accountId)) {     accountsOnLS.get(accountId).sendPacket(new SM_SERVER_LIST());   } } "
"public static void writeAnalysisHTMLToFile(String outputPath,DataAnalysis dataAnalysis,JavaSparkContext sc){   try {     String analysisAsHtml=HtmlAnalysis.createHtmlAnalysisString(dataAnalysis);     writeStringToFile(outputPath,analysisAsHtml,sc);   }  catch (  Exception e) {     throw new RuntimeException(\"Error generating or writing HTML analysis file (normalized data)\",e);   } } "
"public static Zmat bahi(Zmat B,Zltmat L) throws JampackException {   int i, j, k;   Z x=new Z();   L.getProperties();   B.getProperties();   if (L.nr != L.nc)   throw new JampackException(\"Rectangular matrix.\");   if (L.nc != B.nc)   throw new JampackException(\"Inconsistent dimensions.\");   return H.o(Solve.aib(L,H.o(B))); } "
"public static void generateSampleXml(String path){   File file=new File(path);   JAXBContext jaxbContext;   try {     jaxbContext=JAXBContext.newInstance(FilmMetadataDescriptor.INSTANCE.getMetadataClass());     Marshaller jaxbMarshaller=jaxbContext.createMarshaller();     jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);     JAXBElement<PackageType> metadataJaxb=new ObjectFactory().createPackage(FilmMetadataXmlSampleBuilder.buildPackage());     jaxbMarshaller.marshal(metadataJaxb,file);   }  catch (  JAXBException e) {     throw new RuntimeException(e);   } } "
"public MessagesGetLongPollHistoryQuery fields(List<EnumParam> value){   return unsafeParam(\"fields\",value); } "
"public boolean isEmpty(){   final Segment<K,V>[] segments=this.segments;   int[] mc=new int[segments.length];   int mcsum=0;   for (int i=0; i < segments.length; ++i) {     if (segments[i].count != 0)     return false;  else     mcsum+=mc[i]=segments[i].modCount;   }   if (mcsum != 0) {     for (int i=0; i < segments.length; ++i) {       if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;     }   }   return true; } "
"public void updateCurrentTag(String tagPath){   scenarioContext.add(ContextKeys.CURRENT_TAG,tagPath); } "
"public IReadBlock next(){   try {     currentCount++;     countReads++;     return ReadBlockRMA2.read(rma2Formatter,classDumpReader.readLong(),wantReadText,wantMatchData,wantMatchText,minScore,maxExpected,textStorageReader,dataIndexReader);   }  catch (  IOException e) {     Basic.caught(e);     error=true;     return null;   } } "
"public static String formatNumber(float number,int digitCount,boolean separateThousands){   return formatNumber(number,digitCount,separateThousands,'.'); } "
"protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units){   this(type,minimum,maximum,precision,updatePeriod,initialValue,units,\"\",\"\",\"\"); } "
"private void calculateNewAverage(final long removedValue,final long timeDifference,final boolean increaseUsedFields){   float oldSum=currentAverage * usedFields;   if (increaseUsedFields)   usedFields++;   currentAverage=(oldSum - removedValue + timeDifference) / usedFields; } "
"public static boolean isCategoryContainsProduct(ServletRequest request,String productCategoryId,String productId){   return isCategoryContainsProduct((Delegator)request.getAttribute(\"delegator\"),(LocalDispatcher)request.getAttribute(\"dispatcher\"),productCategoryId,productId); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_MOVE_BIRTHAREA_FRIENDLY_IDARENA(String value0){   return new SM_SYSTEM_MESSAGE(1400933,value0); } "
"public double calcTotalValues(){   Iterator iIter=hDistro.entrySet().iterator();   double dSum=0.0;   while (iIter.hasNext()) {     java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();     dSum+=(Double)(e.getValue());   }   return dSum; } "
"public static int monthsBetween(Date startDate,Date endDate){   final Months days=Months.monthsBetween(new DateTime(startDate),new DateTime(endDate));   return days.getMonths(); } "
"public static SM_SYSTEM_MESSAGE STR_CHANGE_REMAIN_PLAYTIME(String value0){   return new SM_SYSTEM_MESSAGE(1300720,value0); } "
"public static SM_SYSTEM_MESSAGE STR_ITEM_COLOR_CHANGE_SUCCEED(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1300511,value0,value1); } "
"public static boolean isLoaded(String name,IdMapper.MapType mapType){   return name2classification.get(name) != null && get(name,true).getIdMapper().isLoaded(mapType); } "
"public boolean process(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   String cname=method.getDeclaringClass().getName();   NativeMethodClass clsSim=cnameToSim.get(cname);   if (clsSim == null) {     return true;   }  else {     try {       clsSim.simulateMethod(method,thisVar,returnVar,params);     }  catch (    NativeMethodNotSupportedException e) {       if (DEBUG) {         G.v().out.println(\"WARNING: it is unsafe to simulate the method \");         G.v().out.println(\"         \" + method.toString());       }     }     return true;   } } "
"public static DockerPortMapping fromString(String portMappingStr){   DockerPortMapping portMapping=new DockerPortMapping();   Matcher matcher=PORT_PATTERN.matcher(portMappingStr);   if (!matcher.matches()) {     throw new IllegalArgumentException(\"Invalid format for port mapping: \" + portMappingStr);   }   portMapping.hostIp=matcher.group(1);   portMapping.hostPort=matcher.group(2);   portMapping.containerPort=matcher.group(3);   String protocolStr=matcher.group(5);   if (protocolStr != null) {     portMapping.protocol=Protocol.fromString(protocolStr);   }  else {     portMapping.protocol=Protocol.TCP;   }   if (\"\".equals(portMapping.hostPort)) {     portMapping.hostPort=null;   }   return portMapping; } "
"public ECDSASignature toCanonicalised(){   if (!isCanonical()) {     return new ECDSASignature(r,CURVE.getN().subtract(s));   }  else {     return this;   } } "
"protected void flushPendingCacheWrites(){   if ((pendingCacheWrites.size() > 0) && (!ResourcesPlugin.getWorkspace().isTreeLocked())) {     int count=pendingCacheWrites.size();     for (int i=0; i < count; i++) {       Map.Entry cachedEntry=nextFromPendingCache();       if (cachedEntry != null) {         IResource resource=(IResource)cachedEntry.getKey();         byte[] value=(byte[])cachedEntry.getValue();         if (value == BYTES_REMOVED)         value=null;         try {           ResourcesPlugin.getWorkspace().getSynchronizer().setSyncInfo(StatusCacheManager.SVN_BC_SYNC_KEY,resource,value);         }  catch (        CoreException e) {           SVNProviderPlugin.log(SVNException.wrapException(e));         }         removeFromPendingCacheIfEqual((IResource)cachedEntry.getKey(),(byte[])cachedEntry.getValue());       }     }   } } "
"public NumericLiteral(Object x){   if (x instanceof Number) {     m_number=(Number)x;     m_type=TypeLib.getPrimitiveType(m_number.getClass());   }  else {     throw new IllegalArgumentException(\"Invalid type!\");   } } "
"protected Object interpret(Node n,FeatureVector fv){   if (n == null)   return null;  else   if (n.isLeafNode()) {     return n.getAllData();   }  else   if (n.isDecisionNode()) {     Node next=((DecisionNode)n).getNextNode(fv);     return interpret(next,fv);   }  else   if (n.isDirectedGraphNode()) {     DirectedGraphNode g=(DirectedGraphNode)n;     Object data=interpret(g.getDecisionNode(),fv);     if (data != null) {       return data;     }     return interpret(g.getLeafNode(),fv);   }   throw new IllegalArgumentException(\"Unknown node type: \" + n.getClass()); } "
"@NotNull public static ResizePolicy scaled(){   return ourScaled; } "
"public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){   this(sInputFile,sArgs);   SSpellExecutable=sExecutable; } "
"public static Long writeOpCRC32(String stream,byte[] payload){   CRC32 crc=requestCRC.get();   try {     crc.update(stream.getBytes(UTF_8));     crc.update(payload);     return crc.getValue();   }   finally {     crc.reset();   } } "
"public boolean isNested(){   return (depth() > 1); } "
"static Type[] mapKeyAndValueTypes(Type context,Class<?> contextRawType){   if (context == Properties.class)   return new Type[]{String.class,String.class};   Type mapType=getSupertype(context,contextRawType,Map.class);   if (mapType instanceof ParameterizedType) {     ParameterizedType mapParameterizedType=(ParameterizedType)mapType;     return mapParameterizedType.getActualTypeArguments();   }   return new Type[]{Object.class,Object.class}; } "
"@Override public void unsubscribe(String topic) throws AWSIotException {   super.unsubscribe(topic); } "
"public Time parseTime(String text) throws DataParseException {   m_pos.setErrorIndex(0);   m_pos.setIndex(0);   Time t=null;   try {     t=Time.valueOf(text);     m_pos.setIndex(text.length());   }  catch (  IllegalArgumentException e) {     t=null;   }   if (t == null) {     java.util.Date d1=m_dfmt.parse(text,m_pos);     if (d1 != null) {       t=new Time(d1.getTime());     }   }   if (t == null || m_pos.getIndex() < text.length()) {     throw new DataParseException(\"Could not parse Date: \" + text);   }  else {     return t;   } } "
"public boolean verbose(){   return soot.PhaseOptions.getBoolean(options,\"verbose\"); } "
"@Override public ElementLocator createLocator(Field field){   return new SelectorScopedElementLocator(searchContext,selector,field); } "
"BKDistributedLogManager(String name,DistributedLogConfiguration conf,URI uri,ZooKeeperClientBuilder writerZKCBuilder,ZooKeeperClientBuilder readerZKCBuilder,ZooKeeperClient zkcForWriterBKC,ZooKeeperClient zkcForReaderBKC,BookKeeperClientBuilder writerBKCBuilder,BookKeeperClientBuilder readerBKCBuilder,FeatureProvider featureProvider,PermitLimiter writeLimiter,StatsLogger statsLogger) throws IOException {   this(name,conf,ConfUtils.getConstDynConf(conf),uri,writerZKCBuilder,readerZKCBuilder,zkcForWriterBKC,zkcForReaderBKC,writerBKCBuilder,readerBKCBuilder,null,null,null,OrderedScheduler.newBuilder().name(\"BKDL-\" + name).corePoolSize(1).build(),null,null,null,null,new ReadAheadExceptionsLogger(statsLogger),DistributedLogConstants.UNKNOWN_CLIENT_ID,DistributedLogConstants.LOCAL_REGION_ID,null,writeLimiter,PermitManager.UNLIMITED_PERMIT_MANAGER,featureProvider,statsLogger,NullStatsLogger.INSTANCE);   this.ownExecutor=true; } "
"public void loadBcpFile(String bcpFilename,String delimiter,List<Attribute> attributes,String dateFormatString,SourcelessConnectionManager connectionManager){   loadBcpFile(bcpFilename,delimiter,attributes,connectionManager,dateFormatString != null ? new SimpleDateFormat(dateFormatString) : null); } "
"public PhotosGetUploadServerQuery groupId(Integer value){   return unsafeParam(\"group_id\",value); } "
"public static AstyanaxTable createUnknown(long uuid,Placement placement,@Nullable String name){   AstyanaxStorage storage=new AstyanaxStorage(uuid,RowKeyUtils.NUM_SHARDS_UNKNOWN,false,placement.getName(),Suppliers.ofInstance(placement));   return new AstyanaxTable(name != null ? name : \"__unknown:\" + TableUuidFormat.encode(uuid),new TableOptionsBuilder().setPlacement(placement.getName()).build(),ImmutableMap.<String,Object>of(\"~unknown\",true,\"uuid\",uuid),null,storage,ImmutableList.of(storage),Suppliers.<Collection<DataCenter>>ofInstance(ImmutableList.<DataCenter>of())); } "
"public DataTypeException(){   super(); } "
"public static Object makeParamValueFromComposite(HttpServletRequest request,String prefix,Locale locale){   String compositeType=request.getParameter(makeCompositeParam(prefix,\"compositeType\"));   if (UtilValidate.isEmpty(compositeType))   return null;   Map<String,String> data=new HashMap<String,String>();   for (Enumeration<String> names=UtilGenerics.cast(request.getParameterNames()); names.hasMoreElements(); ) {     String name=names.nextElement();     if (!name.startsWith(prefix + COMPOSITE_DELIMITER))     continue;     String suffix=name.substring(name.indexOf(COMPOSITE_DELIMITER) + COMPOSITE_DELIMITER_LENGTH);     String value=request.getParameter(name);     data.put(suffix,value);   }   if (Debug.verboseOn()) {     Debug.logVerbose(\"Creating composite type with parameter data: \" + data.toString(),module);   }   if (\"Timestamp\".equals(compositeType)) {     String date=data.get(\"date\");     String hour=data.get(\"hour\");     String minutes=data.get(\"minutes\");     String ampm=data.get(\"ampm\");     if (date == null || date.length() < 10)     return null;     if (UtilValidate.isEmpty(hour))     return null;     if (UtilValidate.isEmpty(minutes))     return null;     boolean isTwelveHour=UtilValidate.isNotEmpty(ampm);     try {       int h=Integer.parseInt(hour);       Timestamp timestamp=Timestamp.valueOf(date.substring(0,10) + \" 00:00:00.000\");       Calendar cal=Calendar.getInstance(locale);       cal.setTime(timestamp);       if (isTwelveHour) {         boolean isAM=(\"AM\".equals(ampm) ? true : false);         if (isAM && h == 12)         h=0;         if (!isAM && h < 12)         h+=12;       }       cal.set(Calendar.HOUR_OF_DAY,h);       cal.set(Calendar.MINUTE,Integer.parseInt(minutes));       return new Timestamp(cal.getTimeInMillis());     }  catch (    IllegalArgumentException e) {       Debug.logWarning(\"User input for composite timestamp was invalid: \" + e.getMessage(),module);       return null;     }   }   return null; } "
"public static void println(Object... msg){   String line=joiner.join(msg);   trace.println(line); } "
"public void addCarbonTable(CarbonTable carbonTable){   tableInfoMap.put(convertToLowerCase(carbonTable.getTableUniqueName()),carbonTable); } "
"@Override protected void onPostExecute(Boolean result){   mAdapter.notifyDataSetChanged();   mCurrentDialog.dismiss();   mCurrentDialog=null;   findViewById(R.id.ok).setEnabled(true);   if (result) {     Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_success),Toast.LENGTH_LONG);     t.show();     finish();   }  else {     Toast t=Toast.makeText(ErrorsWhileCopyingHandlerActivity.this,getString(R.string.foreign_files_fail),Toast.LENGTH_LONG);     t.show();   } } "
"public WallPostQuery services(String value){   return unsafeParam(\"services\",value); } "
"@ObjectiveCName(\"updateList:\") private void updateList(Collection entries){   Map<String,ArrayList<Integer>> oldStructure=this.beforeChange();   this.record.set(entries);   this.afterChange(oldStructure); } "
"public EventBuilder async(){   this.event.setAsync(true);   return this; } "
"public UserAdapter(Context a,List<User> list){   this.a=a;   this.itemList=list; } "
"public String findTitleFormattingTag(){   bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(currentScope));   WebElement titleTagFound=currentScope.findElement(TITLE_TAG_BY);   return titleTagFound.getTagName(); } "
"public int addEdge(int s,int t){   throw new UnsupportedOperationException(\"Changes to graph structure not allowed for spanning trees.\"); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_RESISTED_A_TO_ME(String value0){   return new SM_SYSTEM_MESSAGE(1390132,value0); } "
"public synchronized long size(){   return size; } "
"public JimpleBody toJimpleBody(){   ShimpleBody sBody=(ShimpleBody)this.clone();   sBody.eliminateNodes();   JimpleBody jBody=Jimple.v().newBody(sBody.getMethod());   jBody.importBodyContentsFrom(sBody);   return jBody; } "
"public NGramGaussNormDocument(){   Graph=new DocumentNGramGaussNormGraph();   Histogram=new DocumentNGramHistogram(); } "
"protected boolean sameFile(URL u1,URL u2){   if (!((u1.getProtocol() == u2.getProtocol()) || (u1.getProtocol() != null && u1.getProtocol().equalsIgnoreCase(u2.getProtocol())))) {     return false;   }   if (!hostsEqual(u1,u2)) {     return false;   }   String path1=u1.getPath();   String path2=u2.getPath();   if (path1 == path2) {   }  else   if (path1 == null || path2 == null) {     return false;   }  else   if (!path1.equals(path2)) {     int param=path1.lastIndexOf(';');     if (param < 0 || param != path2.lastIndexOf(';')) {       return false;     }     if (!path1.regionMatches(0,path2,0,param)) {       return false;     }     int comment1=path1.indexOf(',',param + 1);     int len=(comment1 != -1) ? comment1 : path1.length();     int comment2=path2.indexOf(',',param + 1);     int len2=(comment2 != -1) ? comment2 : path2.length();     if (len != len2) {       return false;     }     if (!path1.regionMatches(true,param + 1,path2,param + 1,len - param - 1)) {       return false;     }   }   if (u1.getQuery() == null ? u2.getQuery() != null : !u1.getQuery().equals(u2.getQuery())) {     return false;   }   int port1=(u1.getPort() != -1) ? u1.getPort() : u1.getDefaultPort();   int port2=(u2.getPort() != -1) ? u2.getPort() : u2.getDefaultPort();   if (port1 != port2) {     return false;   }   return true; } "
"public NotesGetQuery noteIds(List<Integer> value){   return unsafeParam(\"note_ids\",value); } "
"@Override public void confirmStatus(Tag tag){   notifyElementUpdated(tag); } "
"private HttpURLConnection openHttpURLConnection(URL url,HttpClientRequest httpClientRequest,String method) throws IOException {   logger.info(\"Open connection for api \" + url.getPath());   HttpURLConnection.setFollowRedirects(true);   HttpURLConnection conn;   conn=(HttpURLConnection)url.openConnection();   conn.setRequestMethod(method);   String downloadFile=httpClientRequest.getDownloadFile();   if (downloadFile != null) {     File file=new File(downloadFile);     if (file.exists()) {       conn.setRequestProperty(\"RANGE\",\"bytes=\" + file.length() + \"-\");     }   }   Map<String,String> headers=httpClientRequest.getHeaders();   if (headers != null && !headers.isEmpty()) {     for (    Map.Entry<String,String> entry : headers.entrySet()) {       conn.setRequestProperty(entry.getKey(),entry.getValue());     }   }   logger.info(\"Hold cookie: %s.\",cookieManager.getCookieStore().getCookies());   conn.setRequestProperty(\"Content-Type\",httpClientRequest.getContentType());   conn.setRequestProperty(\"User-Agent\",httpClientRequest.getUserAgent());   return conn; } "
"static Flake createFlake(float xRange,Bitmap originalBitmap,Context Context){   Flake flake=new Flake();   DisplayMetrics metrics=DvAppUtil.getDisplayMetrics(Context);   if (metrics.widthPixels >= 1080) {     flake.width=(int)(5 + (float)Math.random() * 80);     float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();     flake.height=(int)(flake.width * hwRatio + 60);   }  else {     flake.width=(int)(5 + (float)Math.random() * 50);     float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();     flake.height=(int)(flake.width * hwRatio + 40);   }   flake.x=(float)Math.random() * (xRange - flake.width);   flake.y=0 - (flake.height + (float)Math.random() * flake.height);   flake.speed=50 + (float)Math.random() * 150;   flake.rotation=(float)Math.random() * 180 - 90;   flake.rotationSpeed=(float)Math.random() * 90 - 45;   flake.bitmap=bitmapMap.get(flake.width);   if (flake.bitmap == null) {     flake.bitmap=Bitmap.createScaledBitmap(originalBitmap,(int)flake.width,(int)flake.height,true);     bitmapMap.put(flake.width,flake.bitmap);   }   return flake; } "
"@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){   FieldConfigGeometryField copy=null;   if (fieldConfigBase != null) {     copy=new FieldConfigGeometryField(fieldConfigBase.getCommonData());   }   return copy; } "
"@Override public void write(String str){ } "
"public static void drawButtonRewiConnect(RewiButtonConnectType connectType,IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){   if (!visible)   return;   boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);   RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);   getTextureHandler().bindModTexture(\"textures/misc/\" + (connectType == RewiButtonConnectType.MINECRAFT ? \"rewiHead16\" : \"teamspeak256\") + \".png\");   getGlStateManager().color(1.0F,1.0F,1.0F);   drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14); } "
"public static void dropAllTables(SQLiteDatabase db,boolean ifExists){   TcNoteDao.dropTable(db,ifExists);   CustomerDao.dropTable(db,ifExists); } "
"private void notifyActionListeners(String command,SandboxBody body){   ActionListener[] listeners=this.getListeners(ActionListener.class);   int size=listeners.length;   BodyActionEvent event=new BodyActionEvent(this,ActionEvent.ACTION_PERFORMED,command,body);   for (int i=0; i < size; i++) {     listeners[i].actionPerformed(event);   } } "
"public static String toString(JSONObject jo) throws JSONException {   StringBuilder sb=new StringBuilder();   int i;   JSONArray ja;   String key;   Iterator<String> keys;   int length;   Object object;   String tagName;   String value;   tagName=jo.optString(\"tagName\");   if (tagName == null) {     return XML.escape(jo.toString());   }   XML.noSpace(tagName);   tagName=XML.escape(tagName);   sb.append('<');   sb.append(tagName);   keys=jo.keys();   while (keys.hasNext()) {     key=keys.next();     if (!\"tagName\".equals(key) && !\"childNodes\".equals(key)) {       XML.noSpace(key);       value=jo.optString(key);       if (value != null) {         sb.append(' ');         sb.append(XML.escape(key));         sb.append('=');         sb.append('\"');         sb.append(XML.escape(value));         sb.append('\"');       }     }   }   ja=jo.optJSONArray(\"childNodes\");   if (ja == null) {     sb.append('/');     sb.append('>');   }  else {     sb.append('>');     length=ja.length();     for (i=0; i < length; i+=1) {       object=ja.get(i);       if (object != null) {         if (object instanceof String) {           sb.append(XML.escape(object.toString()));         }  else         if (object instanceof JSONObject) {           sb.append(toString((JSONObject)object));         }  else         if (object instanceof JSONArray) {           sb.append(toString((JSONArray)object));         }  else {           sb.append(object.toString());         }       }     }     sb.append('<');     sb.append('/');     sb.append(tagName);     sb.append('>');   }   return sb.toString(); } "
"public static boolean isSolo(String cc){   String first4digs=cc.substring(0,4);   String first2digs=cc.substring(0,2);   if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first2digs.equals(\"63\") || first4digs.equals(\"6767\")))   return isCreditCard(cc);   return false; } "
"private EncryptedProperties(String password){   PBEParameterSpec ps=new javax.crypto.spec.PBEParameterSpec(salt,20);   SecretKeyFactory kf;   try {     kf=SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");     SecretKey k=kf.generateSecret(new javax.crypto.spec.PBEKeySpec(password.toCharArray()));     encrypter=Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");     decrypter=Cipher.getInstance(\"PBEWithMD5AndDES/CBC/PKCS5Padding\");     encrypter.init(Cipher.ENCRYPT_MODE,k,ps);     decrypter.init(Cipher.DECRYPT_MODE,k,ps);   }  catch (  NoSuchAlgorithmException e) {     e.printStackTrace();   } catch (  NoSuchPaddingException e) {     e.printStackTrace();   } catch (  InvalidKeySpecException e) {     e.printStackTrace();   } catch (  InvalidKeyException e) {     e.printStackTrace();   } catch (  InvalidAlgorithmParameterException e) {     e.printStackTrace();   } } "
"public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize){   this(field,expectedSize,field.getZero()); } "
"public SecurityContext(String username,String password){   setUsername(username);   setPassword(password); } "
"private MessageDigest cloneMessageDigest(){   try {     return (MessageDigest)messageDigest.clone();   }  catch (  CloneNotSupportedException e) {     return getMessageDigest();   } } "
"public WildcardFilter(List<String> wildcards){   if (wildcards == null) {     throw new IllegalArgumentException(\"The wildcard list must not be null\");   }   this.wildcards=wildcards.toArray(new String[wildcards.size()]); } "
"public boolean equals(Object obj){   if (this == obj) {     return true;   }  else   if (!(obj instanceof ActivatableInvocationHandler)) {     return false;   }   ActivatableInvocationHandler other=(ActivatableInvocationHandler)obj;   return (id.equals(other.id) && (clientConstraints == other.clientConstraints || (clientConstraints != null && clientConstraints.equals(other.clientConstraints)))); } "
"public StyleWrapper(String style){   super();   this.style=style; } "
"@Override public double[] makeCumulativeTestValues(){   return new double[]{0.0,0.0,0.0001,0.25 / 1.75,0.4999 / 1.75,0.5 / 1.75,0.5001 / 1.75,0.75 / 1.75,1.5 / 1.75,1.7499 / 1.75,1.0,1.0}; } "
"public ImageIcon loadImage(String imageName){   try {     ClassLoader classloader=getClass().getClassLoader();     java.net.URL url=classloader.getResource(imageName);     if (url != null) {       ImageIcon icon=new ImageIcon(url);       return icon;     }   }  catch (  Exception e) {     e.printStackTrace();   }   throw new IllegalArgumentException(\"Unable to load image: \" + imageName); } "
"public boolean addAbyssSkill(Player player,int skillId,int skillLevel){   return addSkill(player,skillId,skillLevel,false,false,PersistentState.NOACTION); } "
"public static SM_SYSTEM_MESSAGE STR_GATHER_START_5_FORESTRY(String value0){   return new SM_SYSTEM_MESSAGE(1330015,value0); } "
"public boolean isSelected(int fId){   Node v=getANode(fId);   return v != null && getSelected(v); } "
"public BooleanColumn(){   this(0,10,false); } "
"private void markActivityUsed(){   ActivityAssigner.instance(this).markActivityUsed(mActivityIndex,getWebappInfo().id()); } "
"private boolean isDebuggable(Level level){   if (level.intValue() < debugLevel.intValue() || debugLevel == Level.OFF) {     return false;   }   return true; } "
"public boolean isNavBarTintEnabled(){   return mNavBarTintEnabled; } "
"public boolean isDisplayed(final List<WebElement> elements,int timeout){   return isConditionMet(visibilityOfAllElements(elements),timeout); } "
"public AdsGetSuggestionsQuery q(String value){   return unsafeParam(\"q\",value); } "
"private static void savePgr(DispatchContext dctx,GenericValue pgr){   Map<String,GenericValue> context=UtilMisc.<String,GenericValue>toMap(\"paymentGatewayResponse\",pgr);   LocalDispatcher dispatcher=dctx.getDispatcher();   Delegator delegator=dctx.getDelegator();   try {     dispatcher.addRollbackService(\"savePaymentGatewayResponse\",context,true);     delegator.create(pgr);   }  catch (  Exception e) {     Debug.logError(e,module);   } } "
"public static boolean isUpgradeble(Item item){   if (item.getItemTemplate().isNoEnchant()) {     return false;   }   if (item.getItemTemplate().isWeapon()) {     return true;   }   if (item.getItemTemplate().getCategory() == ItemCategory.STIGMA) {     return false;   }   if (item.getEnchantLevel() == 15) {     return false;   }   if (item.getItemTemplate().isArmor()) {     int at=item.getItemTemplate().getItemSlot();     if (at == 1 || at == 2 || at == 8 || at == 16 || at == 32 || at == 2048 || at == 4096 || at == 131072 || at == 262144) {       return true;     }   }   return false; } "
"public static List<ReadData> apply(final IReadBlockIterator iterator,final ProgressListener progress) throws IOException, CanceledException {   progress.setSubtask(\"Collecting reads:\");   final List<ReadData> list=new LinkedList<>();   int countReads=0; {     progress.setMaximum(iterator.getMaximumProgress());     progress.setProgress(0);     while (iterator.hasNext()) {       final IReadBlock readBlock=iterator.next();       list.add(createReadData(countReads++,readBlock));       progress.setProgress(iterator.getProgress());     }   }   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();   return list; } "
"@Override public void onMessageReceived(MessageEvent messageEvent){   Bundle data=new Bundle();   data.putString(MessageHandler.KEY_PATH,messageEvent.getPath());   data.putString(MessageHandler.KEY_SOURCE_NODE_ID,messageEvent.getSourceNodeId());   data.putByteArray(MessageHandler.KEY_DATA,messageEvent.getData());   Message message=new Message();   message.setData(data);   notifyMessageHandlers(message); } "
"private MouseGesture processCurrentData() throws IOException {   int size=coordinates.size();   return mouseGestureRecognizer.classifyGesture(coordinates,size); } "
"public AgeFileFilter(long cutoff,boolean acceptOlder){   this.acceptOlder=acceptOlder;   this.cutoff=cutoff; } "
"@Override public void update(){ } "
"public CombinedOperation[] gather(){   final ArrayList<CombinedOperation> list=new ArrayList<>();   for (int i=0; i < size(); i++) {     PackedOperation pop=getPackedOperation(i);     final CombinedOperation cop=new CombinedOperation();     cop.setEditOperation(pop.getEditOperation());     if (pop.getEditOperation().equals(EditOperation.op_deletion) || pop.getEditOperation().equals(EditOperation.op_substitution)) {       cop.setLetter(pop.getLetter());       cop.setCount(1);     }  else {       cop.setCount(0);       while (true) {         cop.incrementCount(pop.getCount());         i++;         if (i == size())         break;         pop=getPackedOperation(i);         if (cop.getEditOperation() != pop.getEditOperation())         break;       }       i--;     }     list.add(cop);   }   return list.toArray(new CombinedOperation[list.size()]); } "
"public static void o(double[][] A,int w,int d){   int nr=A.length;   int nc=A[0].length;   String temp=Integer.toString(nr - 1);   int rfw=temp.length() + 1;   int ncp=(Parameters.PageWidth - rfw) / w;   int jl=0;   while (jl < nc) {     int ju=Math.min(nc,jl + ncp);     System.out.print(\"\\n\");     String head=\"\";     while (head.length() < rfw)     head=head + \" \";     System.out.print(head);     for (int j=jl; j < ju; j++) {       head=Integer.toString(j);       while (head.length() < w)       head=\" \" + head;       System.out.print(head);     }     System.out.print(\"\\n\");     for (int i=0; i < nr; i++) {       String row=Integer.toString(i);       while (row.length() < rfw)       row=\" \" + row;       System.out.print(row);       for (int j=jl; j < ju; j++)       System.out.print(DoubletoEstring(A[i][j],w,d));       System.out.print(\"\\n\");     }     jl=jl + ncp;   } } "
"private static void generator(String vmFile,Packages pkg) throws Exception {   Template template=ve.getTemplate(vmFile);   VelocityContext vctx=new VelocityContext();   vctx.put(\"package\",pkg);   StringWriter sw=new StringWriter();   template.merge(vctx,sw);   String filePath=getFilePath(vmFile,pkg);   createFile(filePath,sw.toString()); } "
"public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){   double dStartWeight=0;   double dIncreaseWeight=0;   if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {     VertexImpl v=new VertexImpl();     v.setLabel(sStartNode);     try {       gGraph.add(v);     }  catch (    Exception e) {       e.printStackTrace();     }     return;   }   java.util.Iterator iIter=lOtherNodes.iterator();   Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);   Vertex vA;   if (vOldA != null)   vA=vOldA;  else {     vA=new VertexImpl();     vA.setLabel(sStartNode);     try {       gGraph.add(vA);     }  catch (    Exception e) {     }   }   List lOldEdges;   lOldEdges=gGraph.getEdges(vA);   int iCnt=0;   while (iIter.hasNext()) {     VertexImpl vB=new VertexImpl();     vB.setLabel((String)iIter.next());     double dOldWeight=0;     double dNewWeight=0;     dStartWeight=ScalingFunction(Math.abs(++iCnt - (lOtherNodes.size() / 2)));     dIncreaseWeight=dStartWeight;     if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);     WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);     if (weCorrectEdge == null)     dNewWeight=dStartWeight;  else {       dOldWeight=weCorrectEdge.getWeight();       dNewWeight=dOldWeight + dIncreaseWeight;     }     try {       if (weCorrectEdge == null) {         WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);         eclLocator.addedEdge(e);       }  else       weCorrectEdge.setWeight(dNewWeight);     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"public void addUpdateStmt(Stmt node){   List<Stmt> list=(parent == null || state == null) ? getUpdateStmtListNoTransform() : getUpdateStmtList();   list.addChild(node); } "
"public String prototype(cp_info constant_pool[]){   String access, rt, name, params;   Code_attribute c=locate_code_attribute();   access=ClassFile.access_string(access_flags,\" \");   rt=ClassFile.parseMethodDesc_return(cp_info.getTypeDescr(constant_pool,descriptor_index));   name=toName(constant_pool);   params=ClassFile.parseMethodDesc_params(cp_info.getTypeDescr(constant_pool,descriptor_index));   if (access.length() > 0)   return access + \" \" + rt+ \" \"+ name+ \"(\"+ params+ \")\";   return rt + \" \" + name+ \"(\"+ params+ \")\"; } "
"public static SM_SYSTEM_MESSAGE STR_DUEL_HE_REJECT_DUEL(String value0){   return new SM_SYSTEM_MESSAGE(1300097,value0); } "
"public String exportResources(VariableSpace space,Map<String,ResourceDefinition> definitions,ResourceNamingInterface resourceNamingInterface,Repository repository) throws KettleException {   try {     if (Const.isEmpty(filenameField)) {       FileObject fileObject=KettleVFS.getFileObject(space.environmentSubstitute(filename),space);       if (fileObject.exists()) {         filename=resourceNamingInterface.nameResource(fileObject,space,true);         return filename;       }     }     return null;   }  catch (  Exception e) {     throw new KettleException(e);   } } "
"public void takeThreadDump(CoreDump coreDump,boolean openView){   threadDumpProvider.createThreadDump(coreDump,openView); } "
"public <T>Every<T> every(Task<T> task){   return new Every<>(this.executor_,task); } "
"@Override public void draw(Canvas canvas){   canvas.drawCircle(mRadius,mRadius,mRadius,mBackground);   canvas.drawText(mText,mRadius,mRadius - ((mTextPaint.descent() + mTextPaint.ascent()) / 2),mTextPaint); } "
"public static float[] mean(float[][] p){   int order=p[0].length - 1;   float[] meanCoeffs=new float[order + 1];   for (int k=0; k <= order; k++) {     for (int i=0; i < p.length; i++) {       meanCoeffs[k]+=p[i][k];     }     meanCoeffs[k]/=p.length;   }   return meanCoeffs; } "
"public void writePraatPitchTier(String fileName) throws IOException {   ArrayList<Double> times=new ArrayList<Double>();   ArrayList<Double> values=new ArrayList<Double>();   double time=0;   ListIterator<Phone> phoneIterator=phones.listIterator(1);   while (phoneIterator.hasNext()) {     Phone phone=phoneIterator.next();     double[] frameTimes=phone.getRealizedFrameDurations();     double[] frameF0s=phone.getUnitFrameF0s();     for (int f=0; f < frameF0s.length; f++) {       time+=frameTimes[f];       times.add(time);       values.add(frameF0s[f]);     }   }   File durationTierFile=new File(fileName);   PrintWriter out=new PrintWriter(durationTierFile);   out.println(\"\\\"ooTextFile\\\"\");   out.println(\"\\\"PitchTier\\\"\");   out.println(String.format(\"0 %f %d\",time,times.size()));   for (int i=0; i < times.size(); i++) {     out.println(String.format(\"%.16f %f\",times.get(i),values.get(i)));   }   out.close(); } "
"private Object writeReplace() throws ObjectStreamException {   Object impl_proxy=impl;   if (impl instanceof ProxyAccessor) {     impl_proxy=((ProxyAccessor)impl).getProxy();     logger.log(Level.FINEST,\"Obtained implementation proxy: {0}\",impl_proxy);     if (impl_proxy == null) {       throw new InvalidObjectException(\"Implementation's getProxy() returned null\");     }   }   return impl_proxy; } "
"public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   String subSignature=method.getSubSignature();   if (subSignature.equals(\"java.lang.ClassLoader latestUserDefinedLoader()\")) {     java_io_ObjectInputStream_latestUserDefinedLoader(method,thisVar,returnVar,params);     return;   }  else   if (subSignature.equals(\"java.lang.Object allocateNewObject(java.lang.Class,java.lang.Class)\")) {     java_io_ObjectInputStream_allocateNewObject(method,thisVar,returnVar,params);     return;   }  else   if (subSignature.equals(\"java.lang.Object allocateNewArray(java.lang.Class,int)\")) {     java_io_ObjectInputStream_allocateNewArray(method,thisVar,returnVar,params);     return;   }  else {     defaultMethod(method,thisVar,returnVar,params);     return;   } } "
"public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper,int toggleViewId,boolean dragOnLongPress){   itemDragEnabled=true;   mItemTouchHelper=itemTouchHelper;   setToggleViewId(toggleViewId);   setToggleDragOnLongPress(dragOnLongPress); } "
"public void updateLastLogin(){   this.lastLogin=new Date(); } "
"public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {   this.callbackContext=callbackContext;   if (action.equals(\"takePicture\")) {     this.srcType=CAMERA;     this.destType=FILE_URI;     this.saveToPhotoAlbum=false;     this.targetHeight=0;     this.targetWidth=0;     this.encodingType=JPEG;     this.mediaType=PICTURE;     this.mQuality=80;     this.destType=args.getInt(1);     this.srcType=args.getInt(2);     this.mQuality=args.getInt(0);     this.targetWidth=args.getInt(3);     this.targetHeight=args.getInt(4);     this.encodingType=args.getInt(5);     this.mediaType=args.getInt(6);     this.allowEdit=args.getBoolean(7);     this.correctOrientation=args.getBoolean(8);     this.saveToPhotoAlbum=args.getBoolean(9);     if (this.targetWidth < 1) {       this.targetWidth=-1;     }     if (this.targetHeight < 1) {       this.targetHeight=-1;     }     if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation && this.encodingType == PNG && this.srcType == CAMERA) {       this.encodingType=JPEG;     }     try {       if (this.srcType == CAMERA) {         this.callTakePicture(destType,encodingType);       }  else       if ((this.srcType == PHOTOLIBRARY) || (this.srcType == SAVEDPHOTOALBUM)) {         if (!PermissionHelper.hasPermission(this,permissions[0])) {           PermissionHelper.requestPermission(this,SAVE_TO_ALBUM_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);         }  else {           this.getImage(this.srcType,destType,encodingType);         }       }     }  catch (    IllegalArgumentException e) {       callbackContext.error(\"Illegal Argument Exception\");       PluginResult r=new PluginResult(PluginResult.Status.ERROR);       callbackContext.sendPluginResult(r);       return true;     }     PluginResult r=new PluginResult(PluginResult.Status.NO_RESULT);     r.setKeepCallback(true);     callbackContext.sendPluginResult(r);     return true;   }   return false; } "
"public HadoopFileSystemStore(FileSystem fs,SerializationService serial){   super(serial);   hadoopFileSystem=fs; } "
"public boolean isApplicable(){   AlignmentViewer viewer=(AlignmentViewer)getViewer();   return viewer.getAlignment().getNumberOfSequences() > 0 && viewer.getSelectedBlock().isSelected() && viewer.getSelectedBlock().getLastRow() < viewer.getAlignment().getNumberOfSequences() - 1; } "
"public static boolean instanceOf(Class<?> objectClass,String typeName){   return instanceOf(objectClass,typeName,null); } "
"public <T>T inject(Class<T> clazz,Object object){   return inject(clazz,frameMap.get(object)); } "
"public boolean isHighQualityRenderingEnabled(){   return highQualityRenderingEnabled; } "
"public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){   MediaFormat format=new MediaFormat();   format.setString(KEY_MIME,mime);   format.setInteger(KEY_SAMPLE_RATE,sampleRate);   format.setInteger(KEY_CHANNEL_COUNT,channelCount);   return format; } "
"public boolean isSelected(){   ClusterViewer viewer=getViewer();   return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.BRAYCURTIS); } "
"private static void estimateBinaryProbability(ScoutWidget from,int orientation,ScoutWidget to1,Direction toDir1,ScoutWidget to2,Direction toDir2,ScoutWidget[] list,float[] result){   result[RESULT_PROBABILITY]=0;   result[RESULT_MARGIN]=0;   if (from == to1 || from == to2) {     return;   }   if (from.isGuideline()) {     return;   }   if ((orientation == Direction.ORIENTATION_VERTICAL) & from.hasBaseline()) {     if (from.hasConnection(Direction.BASE)) {       return;     }   }   float scale=0.5f * ((orientation == Direction.ORIENTATION_VERTICAL) ? from.getParent().getHeight() : from.getParent().getWidth());   Direction fromLeft=Direction.getDirections(orientation)[0];   Direction fromRight=Direction.getDirections(orientation)[1];   float location1=from.getLocation(fromLeft);   float location2=from.getLocation(fromRight);   float toLoc1=to1.getLocation(toDir1);   float toLoc2=to2.getLocation(toDir2);   float positionDiff1=location1 - toLoc1;   float positionDiff2=toLoc2 - location2;   if (positionDiff1 < 0 || positionDiff2 < 0) {     boolean badCandidate=true;     if (positionDiff2 < 0 && to2.isRoot() && positionDiff2 > -MAX_ROOT_OVERHANG) {       badCandidate=false;       positionDiff2=0;     }     if (positionDiff1 < 0 && to1.isRoot() && positionDiff2 > -MAX_ROOT_OVERHANG) {       badCandidate=false;       positionDiff2=0;     }     if (badCandidate) {       result[RESULT_PROBABILITY]=NEGATIVE_GAP_FLAG;       return;     }   }   float distance1=ScoutWidget.distance(from,to1) / scale;   float distance2=ScoutWidget.distance(from,to2) / scale;   float diff=Math.abs(positionDiff1 - positionDiff2);   float probability=((diff < SLOPE_CENTER_CONNECTION) ? 1 : 0);   probability=probability / (1 + distance1 + distance2);   probability+=1 / (1 + Math.abs(positionDiff1 - positionDiff2));   probability*=(to1.isRoot() && to2.isRoot()) ? 2 : ((SUPPORT_CENTER_TO_NON_ROOT) ? 1f : 0);   result[RESULT_PROBABILITY]=probability;   result[RESULT_MARGIN]=Math.min(positionDiff1,positionDiff2); } "
"public void loadFile(IName2IdMap label2id,String fileName,ProgressListener progressListener) throws IOException, CanceledException {   System.err.println(\"Loading map from file: \" + fileName);   FileInputIterator it=new FileInputIterator(new InputStreamReader(ResourceManager.getFileAsStream(fileName)),fileName);   it.setSkipCommentLines(true);   it.setSkipEmptyLines(true);   progressListener.setProgress(0);   progressListener.setMaximum(it.getMaximumProgress());   try {     while (it.hasNext()) {       String aLine=it.next();       String[] tokens=aLine.split(\"\\t\");       if (tokens.length >= 2) {         final Integer id;         if (Basic.isInteger(tokens[1])) {           id=Basic.parseInt(tokens[1]);         }  else {           id=label2id.get(tokens[1]);         }         if (id != 0)         put(tokens[0],id);  else         System.err.println(\"Line \" + it.getLineNumber() + \": invalid id: \"+ tokens[1]);       }  else {         throw new IOException(\"Loading synonyms-to-id file, line: \" + it.getLineNumber() + \": expected two entries separated by a tab,  got: <\"+ aLine+ \">\");       }       progressListener.setProgress(it.getProgress());     }   }   finally {     it.close();     System.err.println(\"Lines loaded: \" + size());   } } "
"private void moveOverlay(Boolean moveUp){   WindowManager.LayoutParams newParams=(WindowManager.LayoutParams)infoLayout.getLayoutParams();   if (moveUp) {     newParams.gravity=Gravity.TOP;     newParams.y=sharedPref.getInt(APPRAISAL_WINDOW_POSITION,0);   }  else {     newParams.gravity=Gravity.BOTTOM;     newParams.y=0;   }   windowManager.updateViewLayout(infoLayout,newParams); } "
"public void java_lang_reflect_Array_multiNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){   throw new NativeMethodNotSupportedException(method); } "
"public boolean isApplicable(){   return ((Director)getDir()).getDocument().getSampleSelection().size() > 0; } "
"public HttpUrl baseUrl(){   return baseUrl; } "
"public static UInteger valueOf(String value) throws NumberFormatException {   return valueOfUnchecked(rangeCheck(Long.parseLong(value))); } "
"public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff) throws IOException, MyException {   return this.do_modify_file(group_name,appender_filename,file_offset,file_buff.length,new UploadBuff(file_buff,0,file_buff.length)); } "
"public NewsfeedSaveListQuery sourceIds(List<Integer> value){   return unsafeParam(\"source_ids\",value); } "
"protected AdsGetSuggestionsQuery section(AdsGetSuggestionsSection value){   return unsafeParam(\"section\",value); } "
"public static int calculateDeviceSpeedRank(Context context){   return 150; } "
"private static List<Class<?>> findClasses(File directory,String packageName,String classPrefix,String classSuffix,Class<? extends Annotation> methodAnnotation) throws ClassNotFoundException {   List<Class<?>> classes=new ArrayList<Class<?>>();   if (!directory.exists()) {     return classes;   }   File[] files=directory.listFiles();   for (  File file : files) {     if (file.isDirectory()) {       classes.addAll(findClasses(file,packageName + \".\" + file.getName(),classPrefix,classSuffix,methodAnnotation));     }  else     if (file.getName().startsWith(classPrefix) && file.getName().endsWith(classSuffix + \".class\")) {       Class<?> clazz=Class.forName(packageName + '.' + file.getName().substring(0,file.getName().length() - 6));       boolean classHasTest=false;       for (      Method method : clazz.getMethods()) {         if (method.getAnnotation(methodAnnotation) != null) {           classHasTest=true;           break;         }       }       if (classHasTest) {         classes.add(clazz);       }     }   }   return classes; } "
"public static List<PathSegment> decodePath(URI u,boolean decode){   String rawPath=u.getRawPath();   if (rawPath != null && rawPath.length() > 0 && rawPath.charAt(0) == '/') {     rawPath=rawPath.substring(1);   }   return decodePath(rawPath,decode); } "
"public PhotosReportCommentQuery reportComment(UserActor actor,int ownerId,int commentId){   return new PhotosReportCommentQuery(getClient(),actor,ownerId,commentId); } "
"public static void fixme(Object... notes){ } "
"public boolean hasVisited(SimpleMethod method){   return simpleMethodNameSet.contains(method.getLocationAndName()); } "
"public static int verifyOrder(String input,String[] subStrings){   int prev=-1;   for (int i=0; i < subStrings.length; i++) {     int current=input.indexOf(subStrings[i]);     if (current < prev) {       return i;     }  else {       prev=current;     }   }   return -1; } "
"@Override public boolean skipString(String s) throws IOException {   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }   final int length=s.length();   for (int i=0; i < length; i++) {     char c=fCurrentEntity.ch[fCurrentEntity.position++];     if (c != s.charAt(i)) {       fCurrentEntity.position-=i + 1;       return false;     }     if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {       System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);       if (load(i + 1,false)) {         fCurrentEntity.startPosition-=i + 1;         fCurrentEntity.position-=i + 1;         return false;       }     }   }   fCurrentEntity.columnNumber+=length;   return true; } "
"private void saveState(){   SharedPreferences prefs=getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);   SharedPreferences.Editor editor=prefs.edit();   editor.putBoolean(PREF_SEND_INSTALL_EVENT,mSendInstallEvent);   setIsFreshInstallOrDataHasBeenCleared(this);   editor.putLong(PREF_TIMESTAMP_OF_INSTALL,mTimestampOfInstall);   editor.putLong(PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT,mTimestampForNextPostAttempt);   editor.putLong(PREF_TIMESTAMP_FOR_NEW_REQUEST,mTimestampForNewRequest);   editor.putLong(PREF_TIMESTAMP_OF_REQUEST,hasRequest() ? mCurrentRequest.getCreationTimestamp() : INVALID_TIMESTAMP);   editor.putString(PREF_PERSISTED_REQUEST_ID,hasRequest() ? mCurrentRequest.getRequestID() : INVALID_REQUEST_ID);   editor.putString(PREF_LATEST_VERSION,mLatestVersion == null ? \"\" : mLatestVersion);   editor.putString(PREF_MARKET_URL,mMarketURL == null ? \"\" : mMarketURL);   if (mInstallSource != null)   editor.putString(PREF_INSTALL_SOURCE,mInstallSource);   editor.apply(); } "
"public Expression greaterThanEqual(Value v1,Value v2){   return new BinaryExpression(v1,v2,ExpressionType.GREATER_THAN_OR_EQUAL); } "
"protected final void writeS(String text,int size){   if (text == null) {     buf.put(new byte[size]);   }  else {     final int len=text.length();     for (int i=0; i < len; i++) {       buf.putChar(text.charAt(i));     }     buf.put(new byte[size - (len * 2)]);   } } "
"public void cancelRequests(Context context,boolean mayInterruptIfRunning){   List<WeakReference<Future<?>>> requestList=requestMap.get(context);   if (requestList != null) {     for (    WeakReference<Future<?>> requestRef : requestList) {       Future<?> request=requestRef.get();       if (request != null) {         request.cancel(mayInterruptIfRunning);       }     }   }   requestMap.remove(context); } "
"public Fraction abs(){   Fraction ret;   if (numerator >= 0) {     ret=this;   }  else {     ret=negate();   }   return ret; } "
"public WrapLayout(int align,int hgap,int vgap){   super(align,hgap,vgap); } "
"private MediaNotificationInfo(String title,boolean isPaused,String origin,int tabId,boolean isPrivate,int icon,int actions,int id,MediaNotificationListener listener){   this.title=title;   this.isPaused=isPaused;   this.origin=origin;   this.tabId=tabId;   this.isPrivate=isPrivate;   this.icon=icon;   this.mActions=actions;   this.id=id;   this.listener=listener; } "
"public static double ssTotal(double[] residuals,double[] targetAttribute){   return ssReg(residuals,targetAttribute) + ssError(residuals,targetAttribute); } "
"public SREntry(String internedSymbol,SREntry next,int bucket,ReferenceQueue q){   super(new SREntryData(internedSymbol),q);   initialize(next,bucket); } "
"public static String createXmlString(AnnotatedString input){   Document doc=createXmlDocument(input);   StringWriter out=new StringWriter();   try {     Transformer transformer=TransformerFactory.newInstance().newTransformer();     transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");     DOMSource source=new DOMSource(doc);     StreamResult result=new StreamResult(out);     transformer.transform(source,result);   }  catch (  TransformerException te) {     throw new ProcessingException(te.getLocalizedMessage(),te);   }   return out.toString(); } "
"public synchronized long fileCount(){   return fileCount; } "
"protected MarketReportQuery reason(ReportReason value){   return unsafeParam(\"reason\",value); } "
"public GroupsIsMemberQuery isMember(String groupId){   return new GroupsIsMemberQuery(getClient(),groupId); } "
"static void checkParameterArrayIsNotNull(final String parameterName,final int[] parameterValues){   checkParameterIsNotNull(parameterName,parameterValues);   if (parameterValues.length == 0) {     throw new IllegalArgumentException(parameterName + \" cannot be empty.\");   } } "
"public SparseIntArray(int initialCapacity){   if (initialCapacity == 0) {     mKeys=SparseIntArray.EMPTY_INT_ARRAY;     mValues=SparseIntArray.EMPTY_INT_ARRAY;   }  else {     mKeys=new int[initialCapacity];     mValues=new int[mKeys.length];   }   mSize=0; } "
"public SelectSdkDialog(@Nullable String jdkPath,@Nullable String sdkPath){   super(false);   init();   setTitle(\"Select SDKs\");   if (jdkPath != null) {     String err=validateJdkPath(jdkPath);     if (err != null) {       jdkPath=null;     }   }   if (sdkPath != null) {     String err=validateAndroidSdkPath(sdkPath);     if (err != null) {       sdkPath=null;     }   }   mySelectJdkLabel.setLabelFor(myJdkTextFieldWithButton.getTextField());   mySelectSdkDescriptionLabel.setText(\"Please provide the path to the Android SDK.\");   mySdkHyperlinkLabel.setHyperlinkTarget(\"http://d.android.com/sdk\");   mySdkHyperlinkLabel.setHyperlinkText(\"If you do not have the Android SDK, you can obtain it from \",\"d.android.com/sdk\",\".\");   mySelectJdkDescriptionLabel.setText(\"Please provide the path to a Java Development Kit (JDK) installation.\");   myJdkHyperlinkLabel.setHyperlinkTarget(\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\");   myJdkHyperlinkLabel.setHyperlinkText(\"If you do not have a JDK installed, you can obtain one \",\"here\",\".\");   if (jdkPath == null && sdkPath == null) {     mySpacer.setVisible(true);   }  else   if (jdkPath == null) {     mySpacer.setVisible(false);     mySelectSdkDescriptionLabel.setVisible(false);     mySdkHyperlinkLabel.setVisible(false);     mySelectSdkLabel.setVisible(false);     mySdkTextFieldWithButton.setVisible(false);   }  else {     mySpacer.setVisible(false);     mySelectJdkDescriptionLabel.setVisible(false);     myJdkHyperlinkLabel.setVisible(false);     mySelectJdkLabel.setVisible(false);     myJdkTextFieldWithButton.setVisible(false);   }   myJdkTextFieldWithButton.setTextFieldPreferredWidth(50);   mySdkTextFieldWithButton.setTextFieldPreferredWidth(50);   if (jdkPath != null) {     myJdkTextFieldWithButton.setText(jdkPath);   }   if (sdkPath != null) {     mySdkTextFieldWithButton.setText(sdkPath);   }   FileChooserDescriptor descriptor=JavaSdk.getInstance().getHomeChooserDescriptor();   BrowseFolderListener listener=new BrowseFolderListener(\"Select JDK Home\",myJdkTextFieldWithButton,descriptor,jdkPath);   myJdkTextFieldWithButton.addActionListener(listener);   descriptor=AndroidSdkType.getInstance().getHomeChooserDescriptor();   listener=new BrowseFolderListener(\"Select Android SDK Home\",mySdkTextFieldWithButton,descriptor,sdkPath);   mySdkTextFieldWithButton.addActionListener(listener); } "
"public double deriv(){   return deriv; } "
"public boolean onBackPressed(){   if (drawer.isDrawerOpen(GravityCompat.START)) {     drawer.closeDrawer(GravityCompat.START);     return true;   }  else {     drawer.removeDrawerListener(toggle);     return false;   } } "
"public static void write(File file,CharSequence data,String encoding) throws IOException {   write(file,data,encoding,false); } "
"protected void drawRoundedSlices(Canvas c){   if (!mChart.isDrawRoundedSlicesEnabled())   return;   IPieDataSet dataSet=mChart.getData().getDataSet();   if (!dataSet.isVisible())   return;   float phaseX=mAnimator.getPhaseX();   float phaseY=mAnimator.getPhaseY();   MPPointF center=mChart.getCenterCircleBox();   float r=mChart.getRadius();   float circleRadius=(r - (r * mChart.getHoleRadius() / 100f)) / 2f;   float[] drawAngles=mChart.getDrawAngles();   float angle=mChart.getRotationAngle();   for (int j=0; j < dataSet.getEntryCount(); j++) {     float sliceAngle=drawAngles[j];     Entry e=dataSet.getEntryForIndex(j);     if ((Math.abs(e.getY()) > 0.000001)) {       float x=(float)((r - circleRadius) * Math.cos(Math.toRadians((angle + sliceAngle) * phaseY)) + center.x);       float y=(float)((r - circleRadius) * Math.sin(Math.toRadians((angle + sliceAngle) * phaseY)) + center.y);       mRenderPaint.setColor(dataSet.getColor(j));       mBitmapCanvas.drawCircle(x,y,circleRadius,mRenderPaint);     }     angle+=sliceAngle * phaseX;   }   MPPointF.recycleInstance(center); } "
"public boolean equals(Object obj){   return (this == obj || (obj instanceof DiscoveryPermission && getName().equals(((DiscoveryPermission)obj).getName()))); } "
"public void updateYawAndPitch(){   long timeNow=System.currentTimeMillis();   long deltaTime=timeNow - this.lastAngularUpdateTime;   this.lastAngularUpdateTime=timeNow;   double overclockScale=50.0 / (double)TimeHelper.serverTickLength;   double deltaYaw=this.yawScale * overclockScale * this.maxAngularVelocityDegreesPerSecond* (deltaTime / 1000.0);   double deltaPitch=this.pitchScale * overclockScale * this.maxAngularVelocityDegreesPerSecond* (deltaTime / 1000.0);   mYaw+=deltaYaw;   mCameraPitch+=deltaPitch;   mCameraPitch=(mCameraPitch < -90) ? -90 : (mCameraPitch > 90 ? 90 : mCameraPitch); } "
"private void fft(double re[],double im[],int direction){   int n=re.length;   int bits=(int)Math.rint(Math.log(n) / Math.log(2));   if (n != (1 << bits))   throw new IllegalArgumentException(\"fft data must be power of 2\");   int localN;   int j=0;   for (int i=0; i < n - 1; i++) {     if (i < j) {       double temp=re[j];       re[j]=re[i];       re[i]=temp;       temp=im[j];       im[j]=im[i];       im[i]=temp;     }     int k=n / 2;     while ((k >= 1) && (k - 1 < j)) {       j=j - k;       k=k / 2;     }     j=j + k;   }   for (int m=1; m <= bits; m++) {     localN=1 << m;     double Wjk_r=1;     double Wjk_i=0;     double theta=twoPI / localN;     double Wj_r=Math.cos(theta);     double Wj_i=direction * Math.sin(theta);     int nby2=localN / 2;     for (j=0; j < nby2; j++) {       for (int k=j; k < n; k+=localN) {         int id=k + nby2;         double tempr=Wjk_r * re[id] - Wjk_i * im[id];         double tempi=Wjk_r * im[id] + Wjk_i * re[id];         re[id]=re[k] - tempr;         im[id]=im[k] - tempi;         re[k]+=tempr;         im[k]+=tempi;       }       double wtemp=Wjk_r;       Wjk_r=Wj_r * Wjk_r - Wj_i * Wjk_i;       Wjk_i=Wj_r * Wjk_i + Wj_i * wtemp;     }   } } "
"@Pollable(async=true,message=\"Start copying all translations with MD5 match between repository\") public PollableFuture copyAllTranslationsWithMD5MatchBetweenRepositories(Repository source,Repository target){   logger.debug(\"Get TmTextUnit that must be processed\");   List<TMTextUnit> tmTextUnits=tmTextUnitRepository.findByTm_id(target.getTm().getId());   leveragerByMd5.performLeveragingFor(tmTextUnits,source.getTm().getId());   return new PollableFutureTaskResult(); } "
"public static boolean isContactImpulseEnabled(){   return contactImpulseEnabled; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_PET_ABANDON_EXPIRE_TIME_COMPLETE(String value0){   return new SM_SYSTEM_MESSAGE(1401194,value0); } "
"private void logChildren(){   Log.d(TAG,\"internal representation of views on the screen\");   for (int i=0; i < getChildCount(); i++) {     View child=getChildAt(i);     Log.d(TAG,\"item \" + getPosition(child) + \", coord:\"+ mOrientationHelper.getDecoratedStart(child));   }   Log.d(TAG,\"==============\"); } "
"public CompletableFuture<?> optimizeOldFiles(){ synchronized (this) {     if (optimizeOldFiles)     return CompletableFuture.completedFuture(null);     CompletableFuture<?> task=new CompletableFuture<>();     Thread thr=new Thread(null);     thr.setDaemon(true);     thr.start();     pendingTasks.add(task);     optimizeOldFiles=true;     task.whenComplete(null);     return task;   } } "
"private void takePicture(){   lockFocus(); } "
"@Override public void flush(){ } "
"public YamlConfigurationOptions indent(int value){   Validate.isTrue(value >= 2,\"Indent must be at least 2 characters\");   Validate.isTrue(value <= 9,\"Indent cannot be greater than 9 characters\");   this.indent=value;   return this; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public PrimitiveTypeAccess fullCopy(){   PrimitiveTypeAccess tree=(PrimitiveTypeAccess)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor){   final int dim=getDimension();   visitor.start(dim,0,dim - 1);   for (int i=0; i < dim; i++) {     visitor.visit(i,getEntry(i));   }   return visitor.end(); } "
"public Kurtosis(){   moment=new FourthMoment();   incMoment=true; } "
"@Override public void onCreate(){   super.onCreate();   instance=this;   activityList=new ArrayList<>();   SharedPreferences sharedPreferences=getSharedPreferences(SP_STARTUP_ITEM,MODE_PRIVATE);   ValueUtils.readPhotoCount(this,sharedPreferences);   lightTheme=sharedPreferences.getBoolean(getString(R.string.key_light_theme),true);   language=sharedPreferences.getString(getString(R.string.key_language),\"follow_system\"); } "
"public static boolean isTableExists(String tableName,SQLiteDatabase db){   boolean exist;   try {     exist=BaseUtility.containsIgnoreCases(findAllTableNames(db),tableName);   }  catch (  Exception e) {     e.printStackTrace();     exist=false;   }   return exist; } "
"public void restMode(){   SummonsService.restMode(getOwner()); } "
"public RequestParams(Map<String,String> source){   init();   if (source != null) {     for (    Map.Entry<String,String> entry : source.entrySet()) {       put(entry.getKey(),entry.getValue());     }   } } "
"public static void validateValue(byte[] value) throws StateStoreException {   if (value == null) {     throw new StateStoreException(\"Property value must not be null.\");   }   if (value.length > MAX_VALUE_LENGTH_BYTES) {     throw new StateStoreException(String.format(\"Property value length %d exceeds limit of %d bytes.\",value.length,MAX_VALUE_LENGTH_BYTES));   } } "
"@RequestMapping(value=\"/register\",method=RequestMethod.POST,produces={MediaType.APPLICATION_JSON_VALUE,MediaType.TEXT_PLAIN_VALUE}) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody ManagedUserDTO managedUserDTO,HttpServletRequest request){   HttpHeaders textPlainHeaders=new HttpHeaders();   textPlainHeaders.setContentType(MediaType.TEXT_PLAIN);   return userRepository.findOneByLogin(managedUserDTO.getLogin().toLowerCase()).map(null).orElseGet(null); } "
"private static void expand2DigitNumber(String numberString,WordRelation wordRelation){   if (numberString.charAt(0) == '0') {     if (numberString.charAt(1) == '0') {     }  else {       String number=digit2num[numberString.charAt(1) - '0'];       wordRelation.addWord(number);     }   }  else   if (numberString.charAt(1) == '0') {     String number=digit2enty[numberString.charAt(0) - '0'];     wordRelation.addWord(number);   }  else   if (numberString.charAt(0) == '1') {     String number=digit2teen[numberString.charAt(1) - '0'];     wordRelation.addWord(number);   }  else {     String enty=digit2enty[numberString.charAt(0) - '0'];     wordRelation.addWord(enty);     expandDigits(numberString.substring(1,numberString.length()),wordRelation);   } } "
"@Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {   if (this.fElementDeclTab.containsKey(elementName)) {   }  else {     fCurrentElementIndex=createElementDecl();     XMLElementDecl elementDecl=new XMLElementDecl();     elementDecl.name.setValues(null,elementName,elementName,null);     elementDecl.scope=-1;     this.fElementDeclTab.put(elementName,elementDecl);     setElementDecl(fCurrentElementIndex,elementDecl);   }   int elementIndex=getElementDeclIndex(elementName);   if (getAttributeDeclIndex(elementIndex,attributeName) != -1) {     return;   }   fCurrentAttributeIndex=createAttributeDecl();   fSimpleType.clear();   if (defaultType != null) {     if (defaultType.equals(\"#FIXED\")) {       fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_FIXED;     }  else     if (defaultType.equals(\"#IMPLIED\")) {       fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_IMPLIED;     }  else     if (defaultType.equals(\"#REQUIRED\")) {       fSimpleType.defaultType=XMLSimpleType.DEFAULT_TYPE_REQUIRED;     }   }   if (DEBUG) {     System.out.println(\"defaultvalue = \" + defaultValue.toString());   }   fSimpleType.defaultValue=defaultValue != null ? defaultValue.toString() : null;   fSimpleType.nonNormalizedDefaultValue=nonNormalizedDefaultValue != null ? nonNormalizedDefaultValue.toString() : null;   fSimpleType.enumeration=enumeration;   if (type.equals(\"CDATA\")) {     fSimpleType.type=XMLSimpleType.TYPE_CDATA;   }  else   if (type.equals(\"ID\")) {     fSimpleType.type=XMLSimpleType.TYPE_ID;   }  else   if (type.startsWith(\"IDREF\")) {     fSimpleType.type=XMLSimpleType.TYPE_IDREF;     if (type.indexOf(\"S\") > 0) {       fSimpleType.list=true;     }   }  else   if (type.equals(\"ENTITIES\")) {     fSimpleType.type=XMLSimpleType.TYPE_ENTITY;     fSimpleType.list=true;   }  else   if (type.equals(\"ENTITY\")) {     fSimpleType.type=XMLSimpleType.TYPE_ENTITY;   }  else   if (type.equals(\"NMTOKENS\")) {     fSimpleType.type=XMLSimpleType.TYPE_NMTOKEN;     fSimpleType.list=true;   }  else   if (type.equals(\"NMTOKEN\")) {     fSimpleType.type=XMLSimpleType.TYPE_NMTOKEN;   }  else   if (type.startsWith(\"NOTATION\")) {     fSimpleType.type=XMLSimpleType.TYPE_NOTATION;   }  else   if (type.startsWith(\"ENUMERATION\")) {     fSimpleType.type=XMLSimpleType.TYPE_ENUMERATION;   }  else {     System.err.println(\"!!! unknown attribute type \" + type);   }   fQName.setValues(null,attributeName,attributeName,null);   fAttributeDecl.setValues(fQName,fSimpleType,false);   setAttributeDecl(elementIndex,fCurrentAttributeIndex,fAttributeDecl);   int chunk=fCurrentAttributeIndex >> CHUNK_SHIFT;   int index=fCurrentAttributeIndex & CHUNK_MASK;   ensureAttributeDeclCapacity(chunk);   fAttributeDeclIsExternal[chunk][index]=(fReadingExternalDTD || fPEDepth > 0) ? 1 : 0; } "
"public NewsfeedAddBanQuery groupIds(Integer... value){   return unsafeParam(\"group_ids\",value); } "
"public static void logThreadStarting(final String threadName){   Thread.currentThread().setName(APP_NAME + \" [\" + threadName+ \"]\");   logThreadStarting(); } "
"private void createDiskResources(ComputeAllocationTaskState state,ComputeDescription cd,String parentLink,String computeResourceId,String computeResourceLink,String computeName,List<String> networkLinks,ServiceTaskCallback taskCallback){   String diskDescLink=state.getCustomProperty(ComputeConstants.CUSTOM_PROP_DISK_LINK);   if (diskDescLink == null) {     createComputeResource(state,cd,parentLink,computeResourceId,computeResourceLink,computeName,new ArrayList<>(),networkLinks,taskCallback);     return;   }   ConcurrentLinkedQueue<String> diskLinks=new ConcurrentLinkedQueue<>();   int expected=1;   AtomicInteger counter=new AtomicInteger();   CompletionHandler diskCreateCompletion=null;   sendRequest(Operation.createGet(this,diskDescLink).setCompletion(null)); } "
"public boolean contains(T obj){   throw new RuntimeException(\"RwlSegmentedStoredList::contains not supported\"); } "
"public WallPostQuery message(String value){   return unsafeParam(\"message\",value); } "
"public void disableLabels(Collection<String> labels){   disabledLabels.addAll(labels); } "
"public static Color averageEdgeColor(Pixmap pixmap,boolean ninePatch){   int border=0;   if (ninePatch) {     border=1;   }   Color temp=new Color();   float sumR=0.0f;   float sumG=0.0f;   float sumB=0.0f;   int count=0;   for (int y=border; y < pixmap.getHeight() - border; y++) {     for (int x=border; x < pixmap.getWidth() - border; x++) {       temp.set(pixmap.getPixel(x,y));       if (temp.a > 0) {         sumR+=temp.r;         sumG+=temp.g;         sumB+=temp.b;         count++;         break;       }     }   }   for (int y=border; y < pixmap.getHeight() - border; y++) {     for (int x=pixmap.getWidth() - 1 - border; x > border; x--) {       temp.set(pixmap.getPixel(x,y));       if (temp.a > 0) {         sumR+=temp.r;         sumG+=temp.g;         sumB+=temp.b;         count++;         break;       }     }   }   for (int x=border; x < pixmap.getWidth() - border; x++) {     for (int y=border; y < pixmap.getHeight() - border; y++) {       temp.set(pixmap.getPixel(x,y));       if (temp.a > 0) {         sumR+=temp.r;         sumG+=temp.g;         sumB+=temp.b;         count++;         break;       }     }   }   for (int x=border; x < pixmap.getWidth() - border; x++) {     for (int y=pixmap.getHeight() - 1 - border; y > border; y--) {       temp.set(pixmap.getPixel(x,y));       if (temp.a > 0) {         sumR+=temp.r;         sumG+=temp.g;         sumB+=temp.b;         count++;         break;       }     }   }   if (count == 0) {     return new Color(Color.BLACK);   }  else {     return new Color(sumR / count,sumG / count,sumB / count,1.0f);   } } "
"public AutomaticNamespacedRegistry(Function<String,K> keyFactory){   this.keyFactory=keyFactory; } "
"public static InputStream toInputStream(CharSequence input){   return toInputStream(input,Charset.defaultCharset()); } "
"public void testRegistrationWithSupervision(){   cache.setNodeBulkLoadEnabled(false);   cache.setNodeBulkLoadEnabled(true);   cache.registerCacheLoader(cacheLoader);   EasyMock.expect(cache.getCacheEventNotificationService()).andReturn(registeredEventListeners);   DataTag tag=new DataTagCacheObject(100L);   CacheSupervisionListener<DataTag> listenerWithSup=mockControl.createMock(CacheSupervisionListener.class);   CacheSupervisionListener<DataTag> listenerWithSup2=mockControl.createMock(CacheSupervisionListener.class);   C2monCacheListener<DataTag> listenerStandard=mockControl.createMock(C2monCacheListener.class);   listenerStandard.notifyElementUpdated(tag);   mockControl.replay();   ((DataTagCacheImpl)dataTagCache).init();   dataTagCache.registerSynchronousListener(listenerStandard);   dataTagCache.notifyListenersOfUpdate(tag);   mockControl.verify(); } "
"public void intersection(Clip c){   if (status == INVALID)   return;   if (status == EMPTY) {     setClip(c);     status=INUSE;     return;   }   clip[0]=Math.max(clip[0],c.clip[0]);   clip[1]=Math.max(clip[1],c.clip[1]);   clip[6]=Math.min(clip[6],c.clip[6]);   clip[7]=Math.min(clip[7],c.clip[7]); } "
"private UShort(short value){   this.value=value & MAX_VALUE; } "
"private static X500Name createX500NameForCertificate(CertificateInfo certificateInfo){   X500NameBuilder x500NameBuilder=new X500NameBuilder(BCStyle.INSTANCE);   if (certificateInfo.getCommonName() != null) {     x500NameBuilder.addRDN(BCStyle.CN,certificateInfo.getCommonName());   }   if (certificateInfo.getOrganization() != null) {     x500NameBuilder.addRDN(BCStyle.O,certificateInfo.getOrganization());   }   if (certificateInfo.getOrganizationalUnit() != null) {     x500NameBuilder.addRDN(BCStyle.OU,certificateInfo.getOrganizationalUnit());   }   if (certificateInfo.getEmail() != null) {     x500NameBuilder.addRDN(BCStyle.E,certificateInfo.getEmail());   }   if (certificateInfo.getLocality() != null) {     x500NameBuilder.addRDN(BCStyle.L,certificateInfo.getLocality());   }   if (certificateInfo.getState() != null) {     x500NameBuilder.addRDN(BCStyle.ST,certificateInfo.getState());   }   if (certificateInfo.getCountryCode() != null) {     x500NameBuilder.addRDN(BCStyle.C,certificateInfo.getCountryCode());   }   return x500NameBuilder.build(); } "
"public boolean isClusteredExternalDBEnabled(){   return _isClusteredExternalDBEnabled; } "
"public static boolean addSmiles(Context context,Spannable spannable){   boolean hasChanges=false;   for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {     Matcher matcher=entry.getKey().matcher(spannable);     while (matcher.find()) {       boolean set=true;       for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span);  else {         set=false;         break;       }       if (set) {         hasChanges=true;         Object value=entry.getValue();         if (value instanceof String && !((String)value).startsWith(\"http\")) {           File file=new File((String)value);           if (!file.exists() || file.isDirectory()) {             return false;           }           spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);         }  else {           spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);         }       }     }   }   return hasChanges; } "
"protected void calcModulus(){   if (mXAxis == null || !mXAxis.isEnabled())   return;   if (!mXAxis.isAxisModulusCustom()) {     float[] values=new float[9];     mViewPortHandler.getMatrixTouch().getValues(values);     mXAxis.mAxisLabelModulus=(int)Math.ceil((mData.getXValCount() * mXAxis.mLabelRotatedWidth) / (mViewPortHandler.contentWidth() * values[Matrix.MSCALE_X]));   }   if (mLogEnabled)   Log.i(LOG_TAG,\"X-Axis modulus: \" + mXAxis.mAxisLabelModulus + \", x-axis label width: \"+ mXAxis.mLabelWidth+ \", x-axis label rotated width: \"+ mXAxis.mLabelRotatedWidth+ \", content width: \"+ mViewPortHandler.contentWidth());   if (mXAxis.mAxisLabelModulus < 1)   mXAxis.mAxisLabelModulus=1; } "
"public void moveTo(float offsetX,float offsetY,boolean moveHandle){   if (swipeVertical) {     if (toCurrentScale(optimalPageWidth) < getWidth()) {       offsetX=getWidth() / 2 - toCurrentScale(optimalPageWidth) / 2;     }  else {       if (offsetX > 0) {         offsetX=0;       }  else       if (offsetX + toCurrentScale(optimalPageWidth) < getWidth()) {         offsetX=getWidth() - toCurrentScale(optimalPageWidth);       }     }     if (getPageCount() * toCurrentScale(optimalPageHeight) < getHeight()) {       offsetY=(getHeight() - getPageCount() * toCurrentScale(optimalPageHeight)) / 2;     }  else {       if (offsetY > 0) {         offsetY=0;       }  else       if (offsetY + toCurrentScale(getPageCount() * optimalPageHeight) < getHeight()) {         offsetY=-toCurrentScale(getPageCount() * optimalPageHeight) + getHeight();       }     }     if (offsetY < currentYOffset) {       scrollDir=ScrollDir.END;     }  else     if (offsetY > currentYOffset) {       scrollDir=ScrollDir.START;     }  else {       scrollDir=ScrollDir.NONE;     }   }  else {     if (toCurrentScale(optimalPageHeight) < getHeight()) {       offsetY=getHeight() / 2 - toCurrentScale(optimalPageHeight) / 2;     }  else {       if (offsetY > 0) {         offsetY=0;       }  else       if (offsetY + toCurrentScale(optimalPageHeight) < getHeight()) {         offsetY=getHeight() - toCurrentScale(optimalPageHeight);       }     }     if (getPageCount() * toCurrentScale(optimalPageWidth) < getWidth()) {       offsetX=(getWidth() - getPageCount() * toCurrentScale(optimalPageWidth)) / 2;     }  else {       if (offsetX > 0) {         offsetX=0;       }  else       if (offsetX + toCurrentScale(getPageCount() * optimalPageWidth) < getWidth()) {         offsetX=-toCurrentScale(getPageCount() * optimalPageWidth) + getWidth();       }     }     if (offsetX < currentXOffset) {       scrollDir=ScrollDir.END;     }  else     if (offsetX > currentXOffset) {       scrollDir=ScrollDir.START;     }  else {       scrollDir=ScrollDir.NONE;     }   }   currentXOffset=offsetX;   currentYOffset=offsetY;   float positionOffset=getPositionOffset();   if (moveHandle && scrollHandle != null && !documentFitsView()) {     scrollHandle.setScroll(positionOffset);   }   if (onPageScrollListener != null) {     onPageScrollListener.onPageScrolled(getCurrentPage(),positionOffset);   }   redraw(); } "
"@SuppressWarnings(\"rawtypes\") public static void main(String args[]){   if (args.length < 1) {     System.out.println(\"Error: Must have 1 parameter: config filename\");     return;   }   System.out.println(\"java.version=\" + System.getProperty(\"java.version\"));   try {     ClientGlobal.init(args[0]);     System.out.println(\"network_timeout=\" + ClientGlobal.g_network_timeout + \"ms\");     System.out.println(\"charset=\" + ClientGlobal.g_charset);     file_ids=new java.util.concurrent.ConcurrentLinkedQueue();     for (int i=0; i < 10; i++) {       (new UploadThread(i)).start();     }     for (int i=0; i < 20; i++) {       (new DownloadThread(i)).start();     }   }  catch (  Exception ex) {     ex.printStackTrace();   } } "
"private void internal_updateSymbolEnumField(Map<String,String> options,FieldIdEnum field,String key){   ValueComboBoxData value=fieldConfigVisitor.getComboBox(field);   Object object=getDefaultFieldValue(field);   String defaultValue=null;   if (object instanceof TextSymbolizer.PolygonAlignOptions) {     TextSymbolizer.PolygonAlignOptions option=(PolygonAlignOptions)object;     defaultValue=option.toString();   }  else {     defaultValue=(String)object;   }   if (defaultValue == null) {     ConsoleManager.getInstance().error(this,\"Failed to find default for field : \" + field);   }  else   if (value.getKey().compareToIgnoreCase(defaultValue) != 0) {     options.put(key,value.getKey());   } } "
"public boolean contains(Object u){   return innerChain.contains(u); } "
"private void sleep(){   state=STATE.SLEEPING;   this.nextActTime+=(SLEEP_TIME_MS + (int)(SLEEP_FUZZ * rnd.nextDouble())) * MockTimeSource.NANOSECONDS_IN_MILLISECOND; } "
"public AemParsys insertComponent(String componentGroup,String componentName){   openInsertWindow().insertComponent(componentGroup,componentName);   return this; } "
"public static String shellEscape(String word){   int len=word.length();   if (len == 0) {     return \"''\";   }   for (int ii=0; ii < len; ii++) {     char c=word.charAt(ii);     if (!Character.isLetterOrDigit(c) && SAFE_PUNCTUATION.indexOf(c) == -1) {       return \"'\" + word.replace(\"'\",\"'\\\\''\") + \"'\";     }   }   return word; } "
"public String encodeSLD(StyledLayerDescriptor sld){   String xml=\"\";   if (sld != null) {     SLDTransformer transformer=new SLDTransformer();     transformer.setIndentation(2);     try {       xml=transformer.transform(sld);     }  catch (    TransformerException e) {       ConsoleManager.getInstance().exception(this,e);     }   }   return xml; } "
"public Document fromFiletoDOC(final String file){   Document confXMLDoc;   log.trace(\"fromFiletoDOC - trying to configure process using configuration xml from the file \" + file);   DOMParser parser=new DOMParser();   try {     parser.parse(file);     confXMLDoc=parser.getDocument();   }  catch (  java.io.IOException ex) {     log.error(\"fromFiletoDOC - Could not open processConfiguration XML file : \" + file);     return null;   } catch (  org.xml.sax.SAXException ex) {     log.error(\"fromFiletoDOC - Could not parse processConfiguration XML file : \" + file);     return null;   }   log.trace(\"fromFiletoDOC - Configuration XML loaded from filesystem and parsed\");   return confXMLDoc; } "
"public Single<AuthResult> createUserWithEmailAndPassword(final String _email,final String _password){   return observeSingleValue(firebaseAuth.createUserWithEmailAndPassword(_email,_password)); } "
"protected Stream<String> preOrderRightToLeftTraversal(String nodeName,List<String> path) throws SystemConfigException {   if (!moduleConfigurations.containsKey(nodeName)) {     LOG.error(MISSING_DEPENDENCY.logFormat(nodeName,path));     throw new SystemConfigException(MISSING_DEPENDENCY.format(nodeName,path));   }   if (path.contains(nodeName)) {     LOG.error(CIRCULAR_DEPENDENCY.logFormat(nodeName,path));     throw new SystemConfigException(CIRCULAR_DEPENDENCY.format(nodeName,path));   }   List<String> pathLocal=new ArrayList<>(path);   pathLocal.add(nodeName);   Stream<String> childrenStream=moduleDependencies.get(nodeName).stream().flatMap(null);   return Stream.concat(Stream.of(nodeName),childrenStream); } "
"@Override public void attributeSelection(String field){ } "
"public void sendRestorePasswordEmail(final String subject,final String[] recipients,final String url,final String login){   MimeMessagePreparator preparator=null;   this.send(preparator); } "
"private static Color decodeColourElement(Document document,Node child){   return ColourUtils.toColour(child.getTextContent()); } "
"public void removeXValue(int index){   mXVals.remove(index); } "
"public static boolean lowMemoryCondition(){   return MaryUtils.availableMemory() < lowMemoryThreshold(); } "
"public boolean containsValue(Object value){   return indexOfValue(value) >= 0; } "
"private static boolean permissionExists(String permission){   Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);   return minVersion == null || Build.VERSION.SDK_INT >= minVersion; } "
"private static boolean isDoubleEqual(double value,double valueToCompare){   return (Math.abs(value - valueToCompare) < 0.001); } "
"@Override public boolean layoutDependsOn(CoordinatorLayout parent,V child,View dependency){   if (dependency instanceof NestedScrollView) {     ((NestedScrollView)dependency).setOnScrollChangeListener(this);     this.parent=parent;   }   return false; } "
"public Criteria or(){   Criteria criteria=createCriteriaInternal();   oredCriteria.add(criteria);   return criteria; } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"add file=\");   final String fileName=np.getAbsoluteFileName();   np.matchIgnoreCase(\";\");   Basic.checkFileReadableNonEmpty(fileName);   CompareWindow viewer=(CompareWindow)getParent();   viewer.addFile(fileName); } "
"public void testAddActivity() throws Exception {   final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");   myFixture.configureFromExistingVirtualFile(file);   final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);   assertNotNull(action);   action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());   myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyActivity_manifest_after.xml\",true); } "
"public void pageLoadingStarted(){   mLoadTracker.pageLoadingStarted(); } "
"@Override public void readPacketData(PacketBuffer buf) throws IOException {   AbstractChannel<?> channel=ChannelManager.get(buf.readInt());   packet=channel.read(buf); } "
"public static void cleanDirectory(File directory) throws IOException {   if (!directory.exists()) {     String message=directory + \" does not exist\";     throw new IllegalArgumentException(message);   }   if (!directory.isDirectory()) {     String message=directory + \" is not a directory\";     throw new IllegalArgumentException(message);   }   File[] files=directory.listFiles();   if (files == null) {     throw new IOException(\"Failed to list contents of \" + directory);   }   IOException exception=null;   for (  File file : files) {     try {       forceDelete(file);     }  catch (    IOException ioe) {       exception=ioe;     }   }   if (null != exception) {     throw exception;   } } "
"public synchronized void requestPreviewFrame(Handler handler,int message){   Camera theCamera=camera;   if (theCamera != null && previewing) {     previewCallback.setHandler(handler,message);     theCamera.setOneShotPreviewCallback(previewCallback);   } } "
"@SuppressWarnings(\"unchecked\") public JsonParser(JsonHandler<?,?> handler){   if (handler == null) {     throw new NullPointerException(\"handler is null\");   }   this.handler=(JsonHandler<Object,Object>)handler;   handler.parser=this; } "
"public static void sendWarehouseInfo(Player player,boolean sendAccountWh){   List<Item> items=player.getStorage(StorageType.REGULAR_WAREHOUSE.getId()).getItems();   int whSize=player.getWarehouseSize();   int itemsSize=items.size();   boolean firstPacket=true;   if (itemsSize != 0) {     int index=0;     while (index + 10 < itemsSize) {       PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,index + 10),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));       index+=10;       firstPacket=false;     }     PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,itemsSize),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));   }   PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.REGULAR_WAREHOUSE.getId(),whSize,false,player));   if (sendAccountWh) {     PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(player.getStorage(StorageType.ACCOUNT_WAREHOUSE.getId()).getItemsWithKinah(),StorageType.ACCOUNT_WAREHOUSE.getId(),0,true,player));   }   PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.ACCOUNT_WAREHOUSE.getId(),0,false,player)); } "
"public EntryInfo __getEntryInfo(){   return entryInfo; } "
"@Override public synchronized void initialize(){   if (!mRootDirectory.exists()) {     if (!mRootDirectory.mkdirs()) {       VolleyLog.e(\"Unable to create cache dir %s\",mRootDirectory.getAbsolutePath());     }     return;   }   File[] files=mRootDirectory.listFiles();   if (files == null) {     return;   }   for (  File file : files) {     BufferedInputStream fis=null;     try {       fis=new BufferedInputStream(new FileInputStream(file));       CacheHeader entry=CacheHeader.readHeader(fis);       entry.size=file.length();       putEntry(entry.key,entry);     }  catch (    IOException e) {       if (file != null) {         file.delete();       }     }  finally {       try {         if (fis != null) {           fis.close();         }       }  catch (      IOException ignored) {       }     }   } } "
"public boolean findPrevious(String regularExpression){   return findAndUncollapseNext(regularExpression,true,false) > 0; } "
"public static boolean ensureInlinability(SootMethod target,Stmt toInline,SootMethod container,String modifierOptions){   if (!InlinerSafetyManager.canSafelyInlineInto(target,toInline,container)) {     return false;   }   if (!AccessManager.ensureAccess(container,target,modifierOptions)) {     return false;   }   if (!checkSpecialInlineRestrictions(container,target,modifierOptions)) {     return false;   }   if (!checkAccessRestrictions(container,target,modifierOptions)) {     return false;   }   return true; } "
"@Override public PolyhedronsSet wholeSpace(){   return new PolyhedronsSet(tolerance); } "
"public JSONWriter key(String string) throws JSONException {   if (string == null) {     throw new JSONException(\"Null key.\");   }   if (this.mode == 'k') {     try {       this.stack[this.top - 1].putOnce(string,Boolean.TRUE);       if (this.comma) {         this.writer.write(',');       }       this.writer.write(JSONObject.quote(string));       this.writer.write(':');       this.comma=false;       this.mode='o';       return this;     }  catch (    IOException e) {       throw new JSONException(e);     }   }   throw new JSONException(\"Misplaced key.\"); } "
"public void die(){   getOwner().getLifeStats().reduceHp(getOwner().getLifeStats().getCurrentHp() + 1,getOwner()); } "
"@SpaceDataEvent public Data processData(Data data){   try {     Thread.sleep(workDuration);   }  catch (  InterruptedException e) {   }   data.setProcessed(true);   data.setData(\"PROCESSED : \" + data.getRawData());   log.info(\" ------ PROCESSED : \" + data);   return data; } "
"static <T extends REAL,REAL>AnyVal<T> typeAlias(TypeAliasType<REAL,T> typeAliasType){   return new AnyAlias<>(typeAliasType); } "
"boolean isAlive(){   if (vertex == null)   return false;   try {     return vertex.property(Schema.BaseType.TYPE.name()).isPresent();   }  catch (  IllegalStateException e) {     return false;   } } "
"@Override public CompletableFuture<Void> close(){   CompletableFuture<Void> closeFuture=new CompletableFuture<>();   lock.writeLock().lock();   try {     if (!isFenced) {       isFenced=true;     }  else {       log.warn(\"[{}] Topic is already being closed or deleted\",topic);       closeFuture.completeExceptionally(new TopicFencedException(\"Topic is already fenced\"));       return closeFuture;     }   }   finally {     lock.writeLock().unlock();   }   List<CompletableFuture<Void>> futures=Lists.newArrayList();   replicators.forEach(null);   producers.forEach(null);   subscriptions.forEach(null);   FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);   return closeFuture; } "
"public boolean isCritical(){   return true; } "
"public Set<E> keySet(){   return entries.keySet(); } "
"public void addAsset(UUID uuid,String assetPath){   assetMap.put(uuid,assetPath); } "
"protected void createVolume() throws Throwable {   sendContainerVolumeRequest(VolumeOperationType.CREATE);   verifyVolumeStateExists(volumeStateReference);   sendGetVolumeStateRequest(); } "
"private void fill() throws IOException {   int i=in.read(buf,0,buf.length);   if (i > 0) {     pos=0;     count=i;   } } "
"@Override public void startPrefixMapping(String prefix,String uri) throws SAXException {   return; } "
"protected MessagesGetChatUsersQueryWithChatIds chatIds(Integer... value){   return unsafeParam(\"chat_ids\",value); } "
"private void prepareDataSet(){   dataSet1=Arrays.asList(new String[]{\"a\",\"b\"});   dataSet2=Arrays.asList(new String[]{\"c\",\"d\"});   dataSet3=Arrays.asList(new String[]{\"e\",\"f\"}); } "
"public boolean unequal(final Dfp x){   if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {     return false;   }   return greaterThan(x) || lessThan(x); } "
"@Override public void onRemoval(RemovalNotification<ResourceKey<K>,R> notification){   ResourceKey<K> resourceKey=notification.getKey();   for (; ; ) {     Status status=resourceKey.getStatus(); switch (status) { case IDLE:       if (resourceKey.goFromIdleToDead()) {         discardFromIdle(resourceKey,notification.getValue());         return;       }     break; case IN_FLIGHT:   if (resourceKey.goFromInFlightToRetired()) {     return;   } break; case RETIRED: if (resourceKey.goFromRetiredToDead()) { discardFromRetired(resourceKey,notification.getValue()); return; } break; default : throw new IllegalStateException(\"Unnexpected state: \" + status); } } } "
"private void verifyIdentifierIsConventionalClassOrInterfaceName(String id,Location loc) throws CompileException {   if (!Character.isUpperCase(id.charAt(0))) {     this.warning(\"UCOIN1\",\"Class or interface name \\\"\" + id + \"\\\" does not begin with an upper-case letter (see JLS7 6.8.2)\",loc);     return;   }   for (int i=0; i < id.length(); ++i) {     char c=id.charAt(i);     if (!Character.isLetter(c) && !Character.isDigit(c)) {       this.warning(\"UCOIN\",(\"Class or interface name \\\"\" + id + \"\\\" contains unconventional character \\\"\"+ c+ \"\\\" (see JLS7 6.8.2)\"),loc);       return;     }   } } "
"private Stream<String> resolve(String template,Stream<File> files){   Stream<Json> json=files.map(null);   return partitionedStream(json.iterator()).map(null).map(null); } "
"public void success(){   sendPluginResult(new PluginResult(PluginResult.Status.OK)); } "
"@Override public boolean isSpecified(int attrIndex){   return fAttributes[attrIndex].specified; } "
"public ConsoleWriter print(){   return println(0); } "
"public static void main(String[] sArgs){   if (sArgs.length > 0) {     SymbolicGraph sg=new SymbolicGraph(1,7);     sg.setDataString(sArgs[0]);     System.out.println(utils.graphToDot(sg,true));   }  else   try {     SymbolicGraph sg=new SymbolicGraph(1,1);     sg.addEdge(new VertexImpl(\"a\"),new VertexImpl(\"b\"));     sg.addEdge(new VertexImpl(\"b\"),new VertexImpl(\"c\"));     sg.addEdge(new VertexImpl(\"b\"),new VertexImpl(\"d\"));     sg.addEdge(new VertexImpl(\"e\"),new VertexImpl(\"d\"));     sg.addEdge(new VertexImpl(\"f\"),new VertexImpl(\"e\"));     sg.addEdge(new VertexImpl(\"f\"),new VertexImpl(\"g\"));     sg.addEdge(new VertexImpl(\"f\"),new VertexImpl(\"h\"));     sg.addEdge(new VertexImpl(\"c\"),new VertexImpl(\"h\"));     for (int iCnt=0; iCnt < 100; iCnt++)     System.err.println(sg.getShortestLinkBetween(new VertexImpl(\"a\"),new VertexImpl(\"h\")));   }  catch (  Exception ex) {     ex.printStackTrace(System.err);   } } "
"@Override public void onAddCommandTag(final ISourceCommandTag sourceCommandTag,final ChangeReport changeReport){   changeReport.appendError(\"The equipment has no implementation to\" + \" add command tags. You have to restart the DAQ.\");   changeReport.setState(CHANGE_STATE.REBOOT); } "
"public static boolean parseBooleanTag(String tag,String s){   return parseBooleanTag(tag,s,false); } "
"public static String encodeString(String s){   return new String(encode(s.getBytes())); } "
"public void addFocusGroup(String group,TupleSet tset){   checkGroupExists(group);   m_focus.put(group,tset); } "
"public void destroy(){   if (mTabModelSelector != null) {     mTabModelSelector.removeObserver(mSelectorObserver);     mTabModelSelector=null;   } } "
"private boolean isUnsignedNumber(String string){   String s=string.trim();   if (s.length() < 1)   return false;   if (s.charAt(0) != '+' && s.charAt(0) != '-') {     double value=0;     try {       value=Double.parseDouble(s);     }  catch (    NumberFormatException e) {       return false;     }     return true;   }   return false; } "
"public void addEntry(Label start,Label end,Label handler,CP cat){   addEntry(new CatchEntry(start,end,handler,cat)); } "
"@Override public void addEnvVarUpdatedListener(EnvVarUpdateInterface listener){   if (!listenerList.contains(listener)) {     listenerList.add(listener);   } } "
"private void handleFailedSendDataRequest(SerialMessage originalMessage){   new SendDataMessageClass().handleFailedSendDataRequest(this,originalMessage); } "
"public Z Minus(Z a,Z b){   re=a.re - b.re;   im=a.im - b.im;   return this; } "
"public PartialDataRequestHandler(DataRequestHandler next,PhysicalTableDictionary physicalTableDictionary,PartialDataHandler partialDataHandler){   this.next=next;   this.physicalTableDictionary=physicalTableDictionary;   this.partialDataHandler=partialDataHandler; } "
"public static String capitalizeFirstLetter(String original){   if (original == null || original.length() == 0) {     return original;   }   return original.substring(0,1).toUpperCase() + original.substring(1).toLowerCase(); } "
"@Override public Object clone(){   try {     TinkerZipEntry result=(TinkerZipEntry)super.clone();     result.extra=extra != null ? extra.clone() : null;     return result;   }  catch (  CloneNotSupportedException e) {     throw new AssertionError(e);   } } "
"public String toIdString(Object id){   if (id == null)   return null;   return id.toString(); } "
"static private boolean connectionNetwork(){   boolean result=false;   HttpURLConnection httpUrl=null;   try {     httpUrl=(HttpURLConnection)new URL(\"http://www.baidu.com\").openConnection();     httpUrl.setConnectTimeout(TIMEOUT);     httpUrl.connect();     result=true;   }  catch (  IOException e) {   }  finally {     if (null != httpUrl) {       httpUrl.disconnect();     }     httpUrl=null;   }   return result; } "
"public IllinoisSolver(){   super(DEFAULT_ABSOLUTE_ACCURACY,Method.ILLINOIS); } "
"public static SM_SYSTEM_MESSAGE STR_EXCHANGE_HE_REJECTED_EXCHANGE(String value0){   return new SM_SYSTEM_MESSAGE(1300354,value0); } "
"public TrustManagerBuilder withManifestConfig(@NonNull Context ctxt){   if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {     return (withConfig(new ManifestConfigSource(ctxt)));   }   return (this); } "
"public long next(){   return next(RecurrenceUtil.now()); } "
"public boolean removeItem(ForceItem item){   return items.remove(item); } "
"public void removeCertChainListener(CertChainListener listener){   certChainListeners.remove(listener); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201027,skillcaster,num0,skilltarget,skillname); } "
"public boolean isComplex(){   return false; } "
"protected void removeAt(int index){   _states[index]=REMOVED;   super.removeAt(index); } "
"@Override public Object clone(){   return GenericValue.create(this); } "
"public boolean canManage(User user){   if (user == null || user.getGroups() == null) {     return false;   }   for (  UserGroup group : user.getGroups()) {     if (canManage(group)) {       return true;     }   }   return false; } "
"public void add(E o){   if (o == null)   o=(E)NULL_CONST;   if (index == LENGTH - 1) {     Object[] temp=new Object[LENGTH];     q[index]=temp;     q=temp;     index=0;   }   q[index++]=o; } "
"private void readSudoUserinformationFromFile(){   BufferedReader br;   try {     br=new BufferedReader(new FileReader(Settings.sServerInfo));     sSudoID=EncryptionManager.decrypt64bits(br.readLine());     sSudoPassword=EncryptionManager.decrypt64bits(br.readLine());     sEmailAddress=EncryptionManager.decrypt64bits(br.readLine());     isMakeSudoId=Boolean.parseBoolean(EncryptionManager.decrypt64bits(br.readLine()));     br.close();   }  catch (  FileNotFoundException e) {     System.out.println(\"serverinfo.jrc do not exist\");   } catch (  IOException e) {     e.printStackTrace();   } catch (  Exception e) {     e.printStackTrace();   }   System.out.println(\"file reading complete\"); } "
"@Deprecated public T[] mapState(final FieldODEState<T> state){   return state.getCompleteState(); } "
"public CART(Node rootNode,FeatureDefinition featDef,Properties properties){   super(rootNode,featDef,properties); } "
"public static SM_SYSTEM_MESSAGE STR_ARTIFACT_WIN_FORT(String value1,String value0,String value2){   return new SM_SYSTEM_MESSAGE(1390208,value1,value0,value2); } "
"public int append_file(String group_name,String appender_filename,byte[] file_buff) throws IOException, MyException {   return this.do_append_file(group_name,appender_filename,file_buff.length,new UploadBuff(file_buff,0,file_buff.length)); } "
"public VOGeoServerWeatherSymbol(){   String fullResourceName=\"geoserver/GeoServerExtShapeSymbol.xml\";   SymbolTypeConfigReader.readConfig(VOGeoServerWeatherSymbol.class,fullResourceName,fieldEnableMap); } "
"public WebLink(String key){   this(BundleSupport.getLabel(key),BundleSupport.getURL(key),true); } "
"protected void propagate(D sourceVal,N target,D targetVal,N relatedCallSite,boolean isUnbalancedReturn){   propagate(sourceVal,target,targetVal,relatedCallSite,isUnbalancedReturn,false); } "
"private double computeCorrelationCoefficient(int[] x,double[] y,int n){   double sumX=0;   double sumY=0;   double sumXY=0;   double sumX2=0;   double sumY2=0;   for (int i=0; i < n; i++) {     sumX+=x[i];     sumY+=y[i];     sumXY+=x[i] * y[i];     sumX2+=x[i] * x[i];     sumY2+=y[i] * y[i];   }   final double bottom=Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));   if (bottom == 0)   return 0;   final double top=n * sumXY - sumX * sumY;   return top / bottom; } "
"@Override protected void loadData() throws IOException, MaryConfigurationException {   if (htsData == null)   htsData=new HMMData();   htsData.initHMMDataForHMMModel(voiceName);   cart=htsData.getCartTreeSet();   fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());   predictionFeatureNames=htsData.getFeatureDefinition().getFeatureNames(); } "
"private void rotate(){   final int fullCircle=360;   mAngle+=ROTATION_DEGREES;   mAngle%=fullCircle;   mCropView.rotateImage(ROTATION_DEGREES); } "
"public static Label createLabel(String name,String value){   return new Label().withName(name).withValue(value); } "
"public static Uri PathToUri(String path){   return Uri.fromFile(new File(path)); } "
"public SelectorScopedLocatorFactory(SearchContext searchContext,By selector){   this.searchContext=searchContext;   this.selector=selector; } "
"private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {   readFromVersion1Stream(dis);   lockOwner=dis.readUTF();   if (lockOwner.equals(\"\"))   lockOwner=null;   lockCreationDate=dis.readLong();   lockComment=dis.readUTF();   if (lockComment.equals(\"\"))   lockComment=null;   readOnly=dis.readBoolean(); } "
"public Object postProcessAfterInitialization(Object bean,String beanName) throws BeansException {   return bean; } "
"public TLongObjectHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){   super(initialCapacity,loadFactor,strategy); } "
"static final TypeKey valueOf(Class<?> rawType,java.lang.reflect.Type[] typeArguments){   byte[] identityHashBytes=new byte[(typeArguments.length + 1) * 4];   intToByteArray(getTypeIndex(rawType),identityHashBytes,0);   for (int i=0, len=typeArguments.length; i < len; ++i) {     intToByteArray(getTypeIndex(typeArguments[i]),identityHashBytes,i + 1);   }   return new TypeKey(identityHashBytes); } "
"public Syncer(String threadName,DirectPersistencySyncHandler handler){   super(threadName);   _handler=handler;   this.setDaemon(true); } "
"public SootClass(String name){   this(name,0); } "
"private boolean isFreeName(String name){   return !DAOManager.getDAO(LegionDAO.class).isNameUsed(name); } "
"@Override public byte[] next(){   if (iteratorIndex >= dictionaryChunks.get(outerIndex).size()) {     iteratorIndex=0;     outerIndex++;   }   byte[] value=dictionaryChunks.get(outerIndex).get(iteratorIndex);   currentIndex++;   iteratorIndex++;   return value; } "
"public NumberIsTooSmallException(Localizable specific,Number wrong,Number min,boolean boundIsAllowed){   super(specific,wrong,min);   this.min=min;   this.boundIsAllowed=boundIsAllowed; } "
"@Override public boolean compareAndSet(long expectedValue,long newValue){   throw new UnsupportedOperationException(); } "
"private void accumulateSamRecord(final SAMRecord rec){   final SAMSequenceRecord ref=getReferenceSequence(rec.getReferenceIndex());   final int alignmentStart=rec.getAlignmentStart();   final int alignmentEnd=rec.getAlignmentEnd();   final int alignmentLength=alignmentEnd - alignmentStart;   for (int i=accumulator.size(); i <= alignmentLength; ++i) {     accumulator.add(new LocusInfo(ref,alignmentStart + i));   }   final int minQuality=getQualityScoreCutoff();   final boolean dontCheckQualities=minQuality == 0;   final byte[] baseQualities=dontCheckQualities ? null : rec.getBaseQualities();   for (  final AlignmentBlock alignmentBlock : rec.getAlignmentBlocks()) {     final int readStart=alignmentBlock.getReadStart();     final int refStart=alignmentBlock.getReferenceStart();     final int blockLength=alignmentBlock.getLength();     for (int i=0; i < blockLength; ++i) {       final int readOffset=readStart + i - 1;       final int refOffset=refStart + i - alignmentStart;       if (baseQualities.length == 0 || dontCheckQualities || baseQualities[readOffset] >= minQuality) {         accumulator.get(refOffset).add(rec,readOffset);       }     }   } } "
"public static SM_SYSTEM_MESSAGE STR_MSG_DONT_USE_ITEM_BY_NOT_MENTEE(String value1){   return new SM_SYSTEM_MESSAGE(1400774,value1); } "
"public boolean add_tags(){   return soot.PhaseOptions.getBoolean(options,\"add-tags\"); } "
"Domino<T,R> defaultScheduler(){   return schedule(new DefaultScheduler()); } "
"public SiteAdminPage open(String nodePath){   webDriver.get(authorDomain + WCM_PATH + \"#\"+ nodePath);   String wcmTitle=getWcmTitle();   if (StringUtils.isNotBlank(nodePath)) {     bobcatWait.withTimeout(Timeouts.BIG).until(not(titleIs(wcmTitle)));   }  else {     bobcatWait.withTimeout(Timeouts.BIG).until(titleIs(wcmTitle));   }   grid.getActionBar().waitToBeDisplayed();   grid.waitForLoaderNotPresent();   return this; } "
"public void showLoadingDialog(){   Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);   LoadingDialog loading=null;   if (frag == null) {     loading=new LoadingDialog(getResources().getString(R.string.wait_a_moment));     FragmentManager fm=getActivity().getSupportFragmentManager();     FragmentTransaction ft=fm.beginTransaction();     loading.show(ft,DIALOG_WAIT_TAG);   }  else {     loading=(LoadingDialog)frag;     loading.setShowsDialog(true);   } } "
"public boolean uploadAndInstallApk(@NotNull IDevice device,@NotNull String packageName,@NotNull File localFile,@NotNull LaunchStatus launchStatus){   if (!needsInstall(device,localFile,packageName)) {     return true;   }   String remotePath=\"/data/local/tmp/\" + packageName;   myPrinter.stdout(\"$ adb push \" + localFile + \" \"+ remotePath);   try {     device.pushFile(localFile.getPath(),remotePath);     boolean installed=installApp(device,remotePath,packageName,launchStatus);     if (installed) {       myInstalledApkCache.setInstalled(device,localFile,packageName);     }     return installed;   }  catch (  Exception e) {     myPrinter.stderr(e.toString());     return false;   } } "
"public void closeDriver(){   if (camera != null) {     FlashlightManager.disableFlashlight();     camera.release();     camera=null;   } } "
"public boolean hasBlock(){   return getBlockOpt().getNumChild() != 0; } "
"public static void show(Context context,CharSequence msg){   show(context,msg,LENGTH_SHORT); } "
"public BaseResponseContext dispatchRequest(JsonPath jsonPath,String requestType,Map<String,Set<String>> parameters,RepositoryMethodParameterProvider parameterProvider,@SuppressWarnings(\"SameParameterValue\") RequestBody requestBody){   try {     BaseController controller=controllerRegistry.getController(jsonPath,requestType);     Class<?> resourceClass=getRequestedResource(jsonPath);     QueryAdapter queryAdapter=queryAdapterBuilder.build(resourceClass,parameters);     DefaultFilterRequestContext context=new DefaultFilterRequestContext(jsonPath,queryAdapter,parameterProvider,requestBody);     DefaultFilterChain chain=new DefaultFilterChain(controller);     return chain.doFilter(context);   }  catch (  Exception e) {     Optional<JsonApiExceptionMapper> exceptionMapper=exceptionMapperRegistry.findMapperFor(e.getClass());     if (exceptionMapper.isPresent()) {       return exceptionMapper.get().toErrorResponse(e);     }  else {       logger.error(\"failed to process request\",e);       throw e;     }   } } "
"private void drawItems(Canvas canvas){   canvas.save();   int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;   canvas.translate(PADDING,-top + scrollingOffset);   itemsLayout.draw(canvas);   canvas.restore(); } "
"public synchronized void replicateCompactionDeltas(){   _onlyReplicateDeletesUponCompaction=false;   while (!_addCompactQueue.isEmpty()) {     _addCompactQueue.remove().run();   } } "
"public Collection<String> targetFields(){   return new ArrayList<String>(fldVals.keySet()); } "
"void insert(DynamicAABBTreeNode item){   if (this.root == null) {     this.root=item;     return;   }   AABB itemAABB=item.aabb;   DynamicAABBTreeNode node=this.root;   while (!node.isLeaf()) {     AABB aabb=node.aabb;     double perimeter=aabb.getPerimeter();     AABB union=aabb.getUnion(itemAABB);     double unionPerimeter=union.getPerimeter();     double cost=2 * unionPerimeter;     double descendCost=2 * (unionPerimeter - perimeter);     DynamicAABBTreeNode left=node.left;     DynamicAABBTreeNode right=node.right;     double costl=0.0;     if (left.isLeaf()) {       AABB u=left.aabb.getUnion(itemAABB);       costl=u.getPerimeter() + descendCost;     }  else {       AABB u=left.aabb.getUnion(itemAABB);       double oldPerimeter=left.aabb.getPerimeter();       double newPerimeter=u.getPerimeter();       costl=newPerimeter - oldPerimeter + descendCost;     }     double costr=0.0;     if (right.isLeaf()) {       AABB u=right.aabb.getUnion(itemAABB);       costr=u.getPerimeter() + descendCost;     }  else {       AABB u=right.aabb.getUnion(itemAABB);       double oldPerimeter=right.aabb.getPerimeter();       double newPerimeter=u.getPerimeter();       costr=newPerimeter - oldPerimeter + descendCost;     }     if (cost < costl && cost < costr) {       break;     }     if (costl < costr) {       node=left;     }  else {       node=right;     }   }   DynamicAABBTreeNode parent=node.parent;   DynamicAABBTreeNode newParent=new DynamicAABBTreeNode();   newParent.parent=node.parent;   newParent.aabb=node.aabb.getUnion(itemAABB);   newParent.height=node.height + 1;   if (parent != null) {     if (parent.left == node) {       parent.left=newParent;     }  else {       parent.right=newParent;     }     newParent.left=node;     newParent.right=item;     node.parent=newParent;     item.parent=newParent;   }  else {     newParent.left=node;     newParent.right=item;     node.parent=newParent;     item.parent=newParent;     this.root=newParent;   }   node=item.parent;   while (node != null) {     node=balance(node);     DynamicAABBTreeNode left=node.left;     DynamicAABBTreeNode right=node.right;     node.height=1 + Math.max(left.height,right.height);     node.aabb=left.aabb.getUnion(right.aabb);     node=node.parent;   } } "
"public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){   contour=null;   header=new PitchFileHeader();   header.windowSizeInSeconds=windowSizeInSeconds;   header.skipSizeInSeconds=skipSizeInSeconds;   header.fs=samplingRate;   try {     contour=readSPTKF0Data(lf0SPTKFile);   }  catch (  IOException e) {     e.printStackTrace();   } } "
"public static IOFileFilter prefixFileFilter(String prefix,IOCase caseSensitivity){   return new PrefixFileFilter(prefix,caseSensitivity); } "
"@Override public long nodeNumber(){   return nodeNumber; } "
"public boolean filterOut(final SAMRecord first,final SAMRecord second){   throw new UnsupportedOperationException(\"Paired *Filter not implemented!\"); } "
"@Override public synchronized void maybeStartTrackingJob(JobStatus job){   if (job.hasTimingDelayConstraint() || job.hasDeadlineConstraint()) {     maybeStopTrackingJob(job);     ListIterator<JobStatus> it=mTrackedJobs.listIterator(mTrackedJobs.size());     while (it.hasPrevious()) {       JobStatus ts=it.previous();       if (ts.getLatestRunTimeElapsed() < job.getLatestRunTimeElapsed()) {         break;       }     }     it.add(job);     maybeUpdateAlarms(job.hasTimingDelayConstraint() ? job.getEarliestRunTime() : Long.MAX_VALUE,job.hasDeadlineConstraint() ? job.getLatestRunTimeElapsed() : Long.MAX_VALUE);   } } "
"public boolean isLazy(){   return lazy; } "
"@Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {   if (fPEDepth == fPEntityStack.length) {     boolean[] entityarray=new boolean[fPEntityStack.length * 2];     System.arraycopy(fPEntityStack,0,entityarray,0,fPEntityStack.length);     fPEntityStack=entityarray;   }   fPEntityStack[fPEDepth]=fReadingExternalDTD;   fPEDepth++; } "
"public ConnectionAbsoluteTime(long time){   this.time=time; } "
"private boolean permissionOnInAndroid(String permission,Context context){   if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M)   return true;   return PackageManager.PERMISSION_GRANTED == context.getPackageManager().checkPermission(permission,context.getPackageName()); } "
"protected BoardGetCommentsQueryWithExtended topicId(int value){   return unsafeParam(\"topic_id\",value); } "
"public void intercept(SecurityContext securityContext,Privilege privilege,String className){   if (securityContext == null) {     throw new SecurityException(\"Invalid security context\");   }   AuthenticationToken token=securityContext.getAuthenticationToken();   if (token == null) {     throw new AuthenticationException(\"Authentication token is invalid\");   }   if (trustInterceptor.verifyTrust(securityContext)) {     return;   }   SessionDetails sessionDetails=cache.get(token);   if (sessionDetails == null) {     if (token.equals(trustedToken)) {       return;     }     if (securityAudit != null) {       securityAudit.authenticationInvalid(token);     }     throw new AuthenticationException(\"Authentication session is invalid\");   }   Authentication authentication=sessionDetails.getAuthentication();   GrantedAuthorities grantedAuthorities=authentication.getGrantedAuthorities();   boolean granted=grantedAuthorities.isGranted(privilege,className);   if (!granted) {     AccessDeniedException accessDeniedException=new AccessDeniedException(\"User [\" + authentication.getUserDetails().getUsername() + \"] lacks [\"+ privilege+ \"] privileges\"+ (className == null ? \"\" : \" for class [\" + className + \"]\"));     if (securityAudit != null) {       securityAudit.accessDenied(securityContext,sessionDetails,privilege,className);     }     throw accessDeniedException;   }   if (securityAudit != null) {     securityAudit.accessGranted(securityContext,sessionDetails,privilege,className);   }   SecurityContextAccessor.fillSecurityContext(securityContext,sessionDetails); } "
"public static void throwable(int level,String msg,Throwable throwable){   log(level,0,null,new ThrowableFormatter(),null,msg,throwable); } "
"public static boolean readBool(byte b){   if (b == 0) {     return true;   }  else {     return false;   } } "
"public void updateAnchor(){   if (mOwner != null) {     ConstraintWidget widget=mOwner.getConstraintWidget();     if (widget instanceof Guideline) {       mAnchor=((Guideline)widget).getAnchor();     }  else {       mAnchor=widget.getAnchor(mType);     }   }  else {     mAnchor=null;   } } "
"public Builder closeButton(Boolean closeButton){   this.closeButton=closeButton;   return this; } "
"@Nonnull public DataBuilder appendOperatingSystemPattern(@Nonnull final OperatingSystemPattern pattern){   Check.notNull(pattern,\"pattern\");   if (!operatingSystemPatterns.containsKey(pattern.getId())) {     operatingSystemPatterns.put(pattern.getId(),new TreeSet<OperatingSystemPattern>(OS_PATTERN_COMPARATOR));   }   operatingSystemPatterns.get(pattern.getId()).add(pattern);   return this; } "
"public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){   String userId=null;   ResponseData data=null;   if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {     if (signedData == null) {       handleInvalidResponse();       return;     }     try {       Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);       sig.initVerify(publicKey);       sig.update(signedData.getBytes());       if (!sig.verify(Base64.decode(signature))) {         Log.e(TAG,\"Signature verification failed.\");         handleInvalidResponse();         return;       }     }  catch (    NoSuchAlgorithmException e) {       throw new RuntimeException(e);     } catch (    InvalidKeyException e) {       handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PUBLIC_KEY);       return;     } catch (    SignatureException e) {       throw new RuntimeException(e);     } catch (    Base64DecoderException e) {       Log.e(TAG,\"Could not Base64-decode signature.\");       handleInvalidResponse();       return;     }     try {       data=ResponseData.parse(signedData);     }  catch (    IllegalArgumentException e) {       Log.e(TAG,\"Could not parse response.\");       handleInvalidResponse();       return;     }     if (data.responseCode != responseCode) {       Log.e(TAG,\"Response codes don't match.\");       handleInvalidResponse();       return;     }     if (data.nonce != mNonce) {       Log.e(TAG,\"Nonce doesn't match.\");       handleInvalidResponse();       return;     }     if (!data.packageName.equals(mPackageName)) {       Log.e(TAG,\"Package name doesn't match.\");       handleInvalidResponse();       return;     }     if (!data.versionCode.equals(mVersionCode)) {       Log.e(TAG,\"Version codes don't match.\");       handleInvalidResponse();       return;     }     userId=data.userId;     if (TextUtils.isEmpty(userId)) {       Log.e(TAG,\"User identifier is empty.\");       handleInvalidResponse();       return;     }   } switch (responseCode) { case LICENSED: case LICENSED_OLD_KEY:     int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);   handleResponse(limiterResponse,data); break; case NOT_LICENSED: handleResponse(Policy.NOT_LICENSED,data); break; case ERROR_CONTACTING_SERVER: Log.w(TAG,\"Error contacting licensing server.\"); handleResponse(Policy.RETRY,data); break; case ERROR_SERVER_FAILURE: Log.w(TAG,\"An error has occurred on the licensing server.\"); handleResponse(Policy.RETRY,data); break; case ERROR_OVER_QUOTA: Log.w(TAG,\"Licensing server is refusing to talk to this device, over quota.\"); handleResponse(Policy.RETRY,data); break; case ERROR_INVALID_PACKAGE_NAME: handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME); break; case ERROR_NON_MATCHING_UID: handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID); break; case ERROR_NOT_MARKET_MANAGED: handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED); break; default : Log.e(TAG,\"Unknown response code for license check.\"); handleInvalidResponse(); } } "
"public static boolean isXML11NameHighSurrogate(int c){   return (0xD800 <= c && c <= 0xDB7F); } "
"public long optLong(int index){   LazyNode token=getOptionalValueToken(index);   if (token == null)   return 0l;   if (token.type == LazyNode.VALUE_NULL)   return 0l;   return token.getLongValue(cbuf); } "
"public static String toString(URI uri,Charset encoding) throws IOException {   return toString(uri.toURL(),Charsets.toCharset(encoding)); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_DICE_PASSED(String value0){   return new SM_SYSTEM_MESSAGE(1300782,value0); } "
"public List<Element> initSimpleFields(final Object pojo,final Element element) throws NoSuchFieldException, IllegalAccessException, NoSimpleValueParseException {   List<Element> complexElements=new ArrayList<Element>();   NamedNodeMap attributes=element.getAttributes();   for (int i=0; i < attributes.getLength(); i++) {     Attr attribute=(Attr)attributes.item(i);     String attributeName=attribute.getNodeName();     if (!attributeName.startsWith(XMLConstants.XMLNS_ATTRIBUTE) && !attributeName.startsWith(\"xsi\")) {       setSimpleFieldForTag(pojo,attributeName,attribute.getNodeValue());     }   }   NodeList children=element.getChildNodes();   for (int i=0; i < children.getLength(); i++) {     Node node=children.item(i);     if (node.getNodeType() == Node.ELEMENT_NODE) {       Element child=(Element)node;       if (child.hasAttributes() || (child.hasChildNodes() && child.getChildNodes().getLength() > 1 || child.getChildNodes().item(0).getNodeType() != Node.TEXT_NODE)) {         complexElements.add(child);       }  else {         setSimpleFieldForTag(pojo,child.getTagName(),child.getTextContent());       }     }   }   return complexElements; } "
"@Override public SubEquipmentCacheObject clone(){   return (SubEquipmentCacheObject)super.clone(); } "
"public void union(double x,double y,double w,double h){   if (status == INVALID)   return;   if (status == EMPTY) {     setClip(x,y,w,h);     status=INUSE;     return;   }   clip[0]=Math.min(clip[0],x);   clip[1]=Math.min(clip[1],y);   clip[6]=Math.max(clip[6],x + w);   clip[7]=Math.max(clip[7],y + h); } "
"public boolean removeEdge(Edge e){   throw new UnsupportedOperationException(\"Changes to graph structure not allowed for spanning trees.\"); } "
"@Override public boolean implementsInterface(@Nonnull String iface){   if (getInterfaces().containsKey(iface)) {     return true;   }   if (!interfacesFullyResolved) {     throw new UnresolvedClassException(\"Interfaces for class %s not fully resolved\",getType());   }   return false; } "
"public boolean isClosed(){   return m_closed; } "
"public int end(){   return start + rawString.length(); } "
"private boolean isConfigurationPluginAvailable(){   if (configurationPluginAvailable == null) {     try {       String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");       configurationPluginAvailable=(value != null);     }  catch (    Exception e) {       Logger.warn(this,\"Exception while trying to get property 'environment' \",e);       configurationPluginAvailable=false;     }     Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);   }   return configurationPluginAvailable; } "
"public MarketDeleteAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){   super(client,\"market.deleteAlbum\",OkResponse.class);   accessToken(actor.getAccessToken());   ownerId(ownerId);   albumId(albumId); } "
"public boolean isClosed(){   return journalWriter == null; } "
"public boolean equals(Object o){   return ReferentUuids.compare(this,o); } "
"protected void computeReachablePts(){   int i;   IVarAbstraction pn;   off_graph_edge p;   queue.clear();   for (i=0; i < n_var; ++i) {     pn=int2var.get(i);     if (pn.willUpdate == true)     queue.add(i);   }   while (!queue.isEmpty()) {     i=queue.getFirst();     queue.removeFirst();     p=varGraph.get(i);     while (p != null) {       pn=int2var.get(p.t);       if (pn.willUpdate == false) {         pn.willUpdate=true;         queue.add(p.t);       }       pn=p.base_var;       if (pn != null && pn.willUpdate == false) {         pn.willUpdate=true;         queue.add(pn.id);       }       p=p.next;     }   } } "
"public Iterator tuples(Predicate filter){   if (filter == null) {     return tuples();   }  else {     return new CompositeIterator(m_edgeTuples.iterator(getEdgeTable().rows(filter)),m_nodeTuples.iterator(getNodeTable().rows(filter)));   } } "
"public static boolean isExtension(String filename,String[] extensions){   if (filename == null) {     return false;   }   if (extensions == null || extensions.length == 0) {     return indexOfExtension(filename) == -1;   }   String fileExt=getExtension(filename);   for (  String extension : extensions) {     if (fileExt.equals(extension)) {       return true;     }   }   return false; } "
"public void close() throws SAException { } "
"public void requestQueryFocus(){   mFindQuery.requestFocus();   showKeyboard(); } "
"public static int download(String url,File f){   log.debug(\"url=\\\"\" + url + \"\\\"\");   String[] ss=url.split(\" \");   url=ss[ss.length - 1];   DefaultHttpClient client=getClient(url);   if (client != null) {     HttpGet get=null;     try {       get=new HttpGet(url);       if (!get.containsHeader(\"User-Agent\")) {         get.addHeader(\"User-Agent\",UA);       }       log.debug(\"get url=\" + url);       HttpResponse resp=client.execute(get);       if (resp.getStatusLine().getStatusCode() == 200) {         HttpEntity e=resp.getEntity();         InputStream in=e.getContent();         f.getParentFile().mkdirs();         FileOutputStream out=new FileOutputStream(f);         return IOUtil.copy(in,out);       }       return 0;     }  catch (    Exception e) {       log.error(\"\\\"\" + url + \"\\\"\",e);     }  finally {       if (get != null)       get.abort();     }   }   return 0; } "
"public Builder maxHeight(Number maxHeight){   this.maxHeight=maxHeight;   return this; } "
"public static List<GenericValue> findPartiesById(Delegator delegator,String idToFind,String partyIdentificationTypeId,boolean searchPartyFirst,boolean searchAllId) throws GenericEntityException {   if (Debug.verboseOn())   Debug.logVerbose(\"Analyze partyIdentification: entered id = \" + idToFind + \", partyIdentificationTypeId = \"+ partyIdentificationTypeId,module);   GenericValue party=null;   List<GenericValue> partiesFound=null;   if (searchPartyFirst) {     party=EntityQuery.use(delegator).from(\"Party\").where(\"partyId\",idToFind).cache().queryOne();   }   if (searchAllId || (searchPartyFirst && UtilValidate.isEmpty(party))) {     Map<String,String> conditions=UtilMisc.toMap(\"idValue\",idToFind);     if (UtilValidate.isNotEmpty(partyIdentificationTypeId)) {       conditions.put(\"partyIdentificationTypeId\",partyIdentificationTypeId);     }     partiesFound=EntityQuery.use(delegator).from(\"PartyIdentificationAndParty\").where(conditions).orderBy(\"partyId\").cache(true).queryList();   }   if (!searchPartyFirst) {     party=EntityQuery.use(delegator).from(\"Party\").where(\"partyId\",idToFind).cache().queryOne();   }   if (UtilValidate.isNotEmpty(party)) {     if (UtilValidate.isNotEmpty(partiesFound))     partiesFound.add(party);  else     partiesFound=UtilMisc.toList(party);   }   if (Debug.verboseOn())   Debug.logVerbose(\"Analyze partyIdentification: found party.partyId = \" + party + \", and list : \"+ partiesFound,module);   return partiesFound; } "
"void STAR_encoding_diag2(){   int i, j, stripe, k;   char[] tmp;   tmp=new char[p * block_size];   for (stripe=0; stripe < block_nbr + 1; stripe++) {     for (i=0; i < data_disk_nbr; i++) {       for (j=0; j < block_size; j++) {         k=(stripe + i + p) % p;         if (k < block_nbr)         tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];       }     }   }   for (i=0; i < block_nbr; i++) {     for (j=0; j < block_size; j++) {       tmp[i * block_size + j]^=tmp[block_nbr * block_size + j];     }   }   System.arraycopy(tmp,0,check_data[data_disk_nbr + 2],0,stripe_unit_size); } "
"public Math_Vector rotate(double angle){   double rad=angle * TO_RADIANS;   double cos=Math.cos(rad);   double sin=Math.sin(rad);   double newX=this.x * cos - this.y * sin;   double newY=this.x * sin + this.y * cos;   this.x=newX;   this.y=newY;   return this; } "
"protected final boolean isClosed(){   return m_closed; } "
"public static String validateConnectionDetails(final UserInterfaceMqttConnectionDetails connectionDetails,final boolean finalCheck){   String returnValue=pl.baczkowicz.mqttspy.utils.ConnectionUtils.validateConnectionDetails(connectionDetails);   if (connectionDetails.getUserAuthentication() != null && connectionDetails.getUserCredentials() != null) {     if ((finalCheck || !connectionDetails.getUserAuthentication().isAskForUsername()) && (connectionDetails.getUserCredentials().getUsername() == null || connectionDetails.getUserCredentials().getUsername().trim().isEmpty())) {       returnValue=\"With user authentication enabled, user name cannot be empty\";     }   }   return returnValue; } "
"public SOCKS4Connector(String socks4host,int socks4port,String socks4user){   this.socks4host=socks4host;   this.socks4port=socks4port;   this.socks4user=socks4user; } "
"public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_FAILED(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1300550,value0,value1); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public EQExpr fullCopy(){   EQExpr tree=(EQExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public static String escapeHTML(String string){   if (string == null) {     return null;   }   StringBuilder sb=new StringBuilder();   boolean lastCharacterWasSpace=false;   char[] chars=string.toCharArray();   for (  char c : chars) {     if (c == ' ') {       if (lastCharacterWasSpace) {         lastCharacterWasSpace=false;         sb.append(\"&nbsp;\");       }  else {         lastCharacterWasSpace=true;         sb.append(\" \");       }     }  else {       lastCharacterWasSpace=false; switch (c) { case '<':         sb.append(\"&lt;\");       break; case '>':     sb.append(\"&gt;\");   break; case '&': sb.append(\"&amp;\"); break; case '\"': sb.append(\"&quot;\"); break; default : sb.append(c); break; } } } return sb.toString(); } "
"public DatabaseGetRegionsQuery q(String value){   return unsafeParam(\"q\",value); } "
"public static boolean verify(PublicKey publicKey,String signedData,String signature){   Signature sig;   try {     sig=Signature.getInstance(SIGNATURE_ALGORITHM);     sig.initVerify(publicKey);     sig.update(signedData.getBytes());     if (!sig.verify(Base64.decode(signature))) {       Log.e(TAG,\"Signature verification failed.\");       return false;     }     return true;   }  catch (  NoSuchAlgorithmException e) {     Log.e(TAG,\"NoSuchAlgorithmException.\");   } catch (  InvalidKeyException e) {     Log.e(TAG,\"Invalid key specification.\");   } catch (  SignatureException e) {     Log.e(TAG,\"Signature exception.\");   } catch (  Base64DecoderException e) {     Log.e(TAG,\"Base64 decoding failed.\");   }   return false; } "
"public static final void emoteStopAttacking(Npc owner){   owner.unsetState(CreatureState.WEAPON_EQUIPPED);   if (owner.getTarget() != null && owner.getTarget() instanceof Player) {     PacketSendUtility.sendPacket((Player)owner.getTarget(),SM_SYSTEM_MESSAGE.STR_UI_COMBAT_NPC_RETURN(owner.getObjectTemplate().getNameId()));   } } "
"private RxJavaInterop(){   throw new IllegalStateException(\"No instances!\"); } "
"public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){   this(Method.GET,url,listener,errorListener); } "
"public PlacesGetCheckinsQuery longitude(Float value){   return unsafeParam(\"longitude\",value); } "
"@NotNull public BoolProperty dogEared(){   return myDogEared; } "
"public static final BodyFixture show(Window owner){   AddConvexHullFixtureDialog dialog=new AddConvexHullFixtureDialog(owner);   dialog.setLocationRelativeTo(owner);   dialog.setVisible(true);   if (!dialog.canceled) {     Convex convex=dialog.pnlPolygon.getShape();     BodyFixture fixture=dialog.fixture;     Vector2 tx=dialog.pnlTransform.getTranslation();     double a=dialog.pnlTransform.getRotation();     if (!tx.isZero()) {       convex.translate(tx);     }     if (a != 0.0) {       convex.rotateAboutCenter(a);     }     BodyFixture newFixture=new BodyFixture(convex);     newFixture.setUserData(fixture.getUserData());     newFixture.setDensity(fixture.getDensity());     newFixture.setFilter(fixture.getFilter());     newFixture.setFriction(fixture.getFriction());     newFixture.setRestitution(fixture.getRestitution());     newFixture.setSensor(fixture.isSensor()); synchronized (AddConvexFixtureDialog.class) {       AddConvexFixtureDialog.N++;     }     return newFixture;   }   return null; } "
"protected NotesAddQuery title(String value){   return unsafeParam(\"title\",value); } "
"public ImageOverlayOptions build(){   ImageOverlayOptions options=new ImageOverlayOptions();   options.opacity=this.opacity;   options.attribution=this.attribution;   return options; } "
"public void loadAndParseRClassSilently(){   final String rClassName=getRClassName(myModule);   try {     if (rClassName == null) {       LOG.info(String.format(\"loadAndParseRClass: failed to find manifest package for project %1$s\",myModule.getProject().getName()));       return;     }     myLogger.setResourceClass(rClassName);     loadAndParseRClass(rClassName);   }  catch (  ClassNotFoundException e) {     myLogger.setMissingResourceClass(true);   } catch (  NoClassDefFoundError e) {     myLogger.setMissingResourceClass(true);   } catch (  InconvertibleClassError e) {     assert rClassName != null;     myLogger.addIncorrectFormatClass(rClassName,e);   } } "
"public Map(PokemonGo api){   this.api=api;   cachedMapObjects=new MapObjects(api);   lastMapUpdate=0; } "
"public static String toString(final byte[] bytes){   StringBuilder hexed=new StringBuilder();   for (int i=0; i < bytes.length; i++) {     hexed.append(toString(bytes[i]));     hexed.append(' ');   }   return hexed.substring(0,hexed.length() - 1); } "
"public GSBytesMessageImpl() throws JMSException {   super(); } "
"public void removeChangeReport(final ChangeReport changeReport){   changeReports.remove(changeReport); } "
"public RemoteEventBusPacket(ITemplateHolder templateHolder,RemoteEvent re,int TTL,NotifyContext notifyContext,boolean fromReplication){   super((OperationID)null,templateHolder,null,0);   if (re instanceof EntryArrivedRemoteEvent)   super.setOperationID(((EntryArrivedRemoteEvent)re).getOperationID());   _remoteEvent=re;   _TTL=TTL;   _notifyContext=notifyContext;   _fromReplication=fromReplication; } "
"public NativeImageLoader(){ } "
"public Object[] patch_apply(LinkedList<Patch> patches,String text){   if (patches.isEmpty()) {     return new Object[]{text,new boolean[0]};   }   patches=patch_deepCopy(patches);   String nullPadding=patch_addPadding(patches);   text=nullPadding + text + nullPadding;   patch_splitMax(patches);   int x=0;   int delta=0;   boolean[] results=new boolean[patches.size()];   for (  Patch aPatch : patches) {     int expected_loc=aPatch.start2 + delta;     String text1=diff_text1(aPatch.diffs);     int start_loc;     int end_loc=-1;     if (text1.length() > this.Match_MaxBits) {       start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);       if (start_loc != -1) {         end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);         if (end_loc == -1 || start_loc >= end_loc) {           start_loc=-1;         }       }     }  else {       start_loc=match_main(text,text1,expected_loc);     }     if (start_loc == -1) {       results[x]=false;       delta-=aPatch.length2 - aPatch.length1;     }  else {       results[x]=true;       delta=start_loc - expected_loc;       String text2;       if (end_loc == -1) {         text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));       }  else {         text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));       }       if (text1.equals(text2)) {         text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());       }  else {         LinkedList<Diff> diffs=diff_main(text1,text2,false);         if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {           results[x]=false;         }  else {           diff_cleanupSemanticLossless(diffs);           int index1=0;           for (          Diff aDiff : aPatch.diffs) {             if (aDiff.operation != Operation.EQUAL) {               int index2=diff_xIndex(diffs,index1);               if (aDiff.operation == Operation.INSERT) {                 text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);               }  else               if (aDiff.operation == Operation.DELETE) {                 text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));               }             }             if (aDiff.operation != Operation.DELETE) {               index1+=aDiff.text.length();             }           }         }       }     }     x++;   }   text=text.substring(nullPadding.length(),text.length() - nullPadding.length());   return new Object[]{text,results}; } "
"public static boolean isDark(@NonNull Bitmap bitmap){   return isDark(bitmap,bitmap.getWidth() / 2,bitmap.getHeight() / 2); } "
"public RotationControl(){   this(Control.LEFT_MOUSE_BUTTON); } "
"private static TxnManager constrainServer(TxnManager server,MethodConstraints constraints){   RemoteMethodControl constrainedServer=((RemoteMethodControl)server).setConstraints(constraints);   return ((TxnManager)constrainedServer); } "
"public DragControl(String action){   this.repaint=false;   this.action=action; } "
"public void remove() throws UnsupportedOperationException {   if (this.lastIndex < 0) {     throw new IllegalStateException(\"No header to remove.\");   }   this.allHeaders.remove(this.lastIndex);   this.lastIndex=-1;   this.currentIndex--; } "
"public boolean hasASTForSootName(String name){   if (sootNameToAST == null)   return false;   if (sootNameToAST.containsKey(name))   return true;   return false; } "
"public void append(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {   if (!file.exists()) {     throw new FileNotFoundException(file.getAbsolutePath());   }   InputStream inputStream=null;   try {     inputStream=new FileInputStream(file);   }  catch (  IOException e) {     throw new FTPDataTransferException(e);   }   try {     append(file.getName(),inputStream,0,listener);   }  catch (  IllegalStateException e) {     throw e;   } catch (  IOException e) {     throw e;   } catch (  FTPIllegalReplyException e) {     throw e;   } catch (  FTPException e) {     throw e;   } catch (  FTPDataTransferException e) {     throw e;   } catch (  FTPAbortedException e) {     throw e;   }  finally {     if (inputStream != null) {       try {         inputStream.close();       }  catch (      Throwable t) {         ;       }     }   } } "
"public static double[] generatePolynomialValues(double[] coeffs,int numSamples,double a,double b){   if (numSamples <= 0)   throw new IllegalArgumentException(\"Need positive number of samples\");   if (a >= b)   throw new IllegalArgumentException(\"Not a valid interval: [\" + a + \",\"+ b+ \"[\");   double[] pred=new double[numSamples];   double step=(b - a) / numSamples;   double t=a;   for (int i=0; i < numSamples; i++) {     pred[i]=getValueAt(coeffs,t);     t+=step;   }   return pred; } "
"public void checkCorrectChannelLayout() throws InvalidAudioChannelAssignmentException {   for (  SequenceUUID seqUuid : contextProvider.getSequenceContext().getUuids(SequenceType.AUDIO)) {     String channelLayout=null;     for (    SegmentUUID segmUuid : contextProvider.getSegmentContext().getUuids()) {       for (      ResourceUUID resUuid : contextProvider.getResourceContext().getUuids(ResourceKey.create(segmUuid,seqUuid,SequenceType.AUDIO))) {         ContextInfo contextInfo=new ContextInfoBuilder().setResourceUuid(resUuid).setSegmentUuid(segmUuid).setSequenceUuid(seqUuid).setSequenceType(SequenceType.AUDIO).build();         if (!contextProvider.getResourceContext().hasResourceParameter(ResourceContextParameters.CHANNELS_LAYOUT,contextInfo)) {           throw new InvalidAudioChannelAssignmentException(\"All resources within a sequence must have a channel layout set in the Essence Descriptor.\");         }         String nextChannelLayout=contextProvider.getResourceContext().getParameterValue(ResourceContextParameters.CHANNELS_LAYOUT,contextInfo);         if (StringUtils.isEmpty(nextChannelLayout)) {           throw new InvalidAudioChannelAssignmentException(\"All resources within a sequence must have a channel layout set in the Essence Descriptor.\");         }         if (channelLayout != null && !channelLayout.equals(nextChannelLayout)) {           throw new InvalidAudioChannelAssignmentException(\"All resources within a sequence must have the same channel layout.\");         }         if (!contextProvider.getResourceContext().hasResourceParameter(ResourceContextParameters.CHANNELS_NUM,contextInfo)) {           throw new InvalidAudioChannelAssignmentException(\"All resources within a sequence must have a channels number set.\");         }         Integer channelsCount=Integer.parseInt(contextProvider.getResourceContext().getParameterValue(ResourceContextParameters.CHANNELS_NUM,contextInfo));         if (FFmpegAudioChannels.toFFmpegAudioChannels(nextChannelLayout).length != channelsCount) {           throw new InvalidAudioChannelAssignmentException(String.format(\"A number of channels in channel layout (%s) must match real number of channels (%d)\",nextChannelLayout,channelsCount));         }         channelLayout=nextChannelLayout;       }     }   } } "
"public static boolean hasFlagSameLine(CharSequence sequence,char flag,int fromIndex){   for (int i=fromIndex; i < sequence.length(); i++) {     char c=sequence.charAt(i);     if (c == NEW_LINE) {       return false;     }     if (c == flag) {       return i != fromIndex;     }   }   return false; } "
"public void readBody(DataInput dataIn) throws IOException {   try {     Body=SerializationHelper.readObject((InputStream)dataIn);   }  catch (  ClassNotFoundException ex) {     throw new IOException(ex.toString());   } } "
"public static boolean loadLibraryFromTinker(Context context,String relativePath,String libname) throws UnsatisfiedLinkError {   final Tinker tinker=Tinker.with(context);   libname=libname.startsWith(\"lib\") ? libname : \"lib\" + libname;   libname=libname.endsWith(\".so\") ? libname : libname + \".so\";   String relativeLibPath=relativePath + \"/\" + libname;   if (tinker.isEnabledForNativeLib() && tinker.isTinkerLoaded()) {     TinkerLoadResult loadResult=tinker.getTinkerLoadResultIfPresent();     if (loadResult.libs != null) {       for (      String name : loadResult.libs.keySet()) {         if (name.equals(relativeLibPath)) {           String patchLibraryPath=loadResult.libraryDirectory + \"/\" + name;           File library=new File(patchLibraryPath);           if (library.exists()) {             boolean verifyMd5=tinker.isTinkerLoadVerify();             if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadResult.libs.get(name))) {               tinker.getLoadReporter().onLoadFileMd5Mismatch(library,ShareConstants.TYPE_LIBRARY);             }  else {               System.load(patchLibraryPath);               TinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);               return true;             }           }         }       }     }   }   return false; } "
"@RequestMapping(value=\"/{namespace}/{key}\",method=RequestMethod.DELETE,produces=\"application/json\") public void deleteKeyJsonValue(@PathVariable String namespace,@PathVariable String key,HttpServletResponse response) throws WebMessageException {   if (!hasAccess(namespace)) {     throw new WebMessageException(WebMessageUtils.forbidden(\"The namespace '\" + namespace + \"' is protected, and you don't have the right authority to access it.\"));   }   KeyJsonValue keyJsonValue=keyJsonValueService.getKeyJsonValue(namespace,key);   if (keyJsonValue == null) {     throw new WebMessageException(WebMessageUtils.notFound(\"The key '\" + key + \"' was not found in the namespace '\"+ namespace+ \"'.\"));   }   keyJsonValueService.deleteKeyJsonValue(keyJsonValue);   messageService.sendJson(WebMessageUtils.ok(\"Key '\" + key + \"' deleted from namespace '\"+ namespace+ \"'.\"),response); } "
"public SootClass resolveClass(String className,int desiredLevel){   SootClass resolvedClass=null;   try {     resolvedClass=makeClassRef(className);     addToResolveWorklist(resolvedClass,desiredLevel);     processResolveWorklist();     return resolvedClass;   }  catch (  SootClassNotFoundException e) {     if (resolvedClass != null) {       assert resolvedClass.resolvingLevel() == SootClass.DANGLING;       Scene.v().removeClass(resolvedClass);     }     throw e;   } } "
"public SiteAdminPage waitForPageNotExists(String title){   bobcatWait.withTimeout(Timeouts.BIG).until(not(pageExists(title)),Timeouts.SMALL);   return this; } "
"@Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException { } "
"AssignmentsImpl(AssignmentsRepository assignmentRepository,MutexRepository mutRepository){   repository=null;   mutexRepository=mutRepository;   assignmentsRepository=assignmentRepository;   random=null; } "
"public HintsExample(){   oredCriteria=new ArrayList<Criteria>(); } "
"public synchronized ZooKeeperClientBuilder name(String name){   this.name=name;   return this; } "
"public EdgeCachedLocator(int iCacheMaxSize){   CacheMaxSize=iCacheMaxSize;   Cache=new HashMap();   CacheAccess=new TreeMap();   ElementAccessTime=new HashMap(); } "
"public MultiFilterBarImplementor(MultiFilterBarModel model,MultiFilterBarView view){   this.model=model;   this.view=view; } "
"protected XMLErrorReporter createErrorReporter(){   return new XMLErrorReporter(); } "
"static boolean equal(Object v1,Object v2){   v1=maybeConvertToString(v1);   v2=maybeConvertToString(v2);   return Objects.equals(v1,v2); } "
"public TShortHash(int initialCapacity,TShortHashingStrategy strategy){   super(initialCapacity);   this._hashingStrategy=strategy; } "
"public static Map<String,Object> resetGrandTotal(DispatchContext ctx,Map<String,? extends Object> context){   Delegator delegator=ctx.getDelegator();   String orderId=(String)context.get(\"orderId\");   GenericValue orderHeader=null;   try {     orderHeader=EntityQuery.use(delegator).from(\"OrderHeader\").where(\"orderId\",orderId).queryOne();   }  catch (  GenericEntityException e) {     String errMsg=\"ERROR: Could not set grantTotal on OrderHeader entity: \" + e.toString();     Debug.logError(e,errMsg,module);     return ServiceUtil.returnError(errMsg);   }   if (orderHeader != null) {     OrderReadHelper orh=new OrderReadHelper(orderHeader);     BigDecimal currentTotal=orderHeader.getBigDecimal(\"grandTotal\");     BigDecimal currentSubTotal=orderHeader.getBigDecimal(\"remainingSubTotal\");     BigDecimal updatedTotal=orh.getOrderGrandTotal();     String productStoreId=orderHeader.getString(\"productStoreId\");     String showPricesWithVatTax=null;     if (UtilValidate.isNotEmpty(productStoreId)) {       GenericValue productStore=null;       try {         productStore=EntityQuery.use(delegator).from(\"ProductStore\").where(\"productStoreId\",productStoreId).cache().queryOne();       }  catch (      GenericEntityException e) {         String errorMessage=UtilProperties.getMessage(resource_error,\"OrderErrorCouldNotFindProductStoreWithID\",UtilMisc.toMap(\"productStoreId\",productStoreId),(Locale)context.get(\"locale\")) + e.toString();         Debug.logError(e,errorMessage,module);         return ServiceUtil.returnError(errorMessage + e.getMessage() + \").\");       }       showPricesWithVatTax=productStore.getString(\"showPricesWithVatTax\");     }     BigDecimal remainingSubTotal=ZERO;     if (UtilValidate.isNotEmpty(productStoreId) && \"Y\".equalsIgnoreCase(showPricesWithVatTax)) {       remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getShippingTotal());     }  else {       remainingSubTotal=updatedTotal.subtract(orh.getOrderReturnedTotal()).subtract(orh.getOrderNonReturnedTaxAndShipping());     }     if (currentTotal == null || currentSubTotal == null || updatedTotal.compareTo(currentTotal) != 0 || remainingSubTotal.compareTo(currentSubTotal) != 0) {       orderHeader.set(\"grandTotal\",updatedTotal);       orderHeader.set(\"remainingSubTotal\",remainingSubTotal);       try {         orderHeader.store();       }  catch (      GenericEntityException e) {         String errMsg=\"ERROR: Could not set grandTotal on OrderHeader entity: \" + e.toString();         Debug.logError(e,errMsg,module);         return ServiceUtil.returnError(errMsg);       }     }   }   return ServiceUtil.returnSuccess(); } "
"public boolean isLocked(){   return getInt(\"locked\") > 0; } "
"@Override protected void synchronizeChildren(){   needsSyncChildren(false);   DocumentType doctype;   NamedNodeMap entities;   EntityImpl entDef;   if (null != (doctype=getOwnerDocument().getDoctype()) && null != (entities=doctype.getEntities())) {     entDef=(EntityImpl)entities.getNamedItem(getNodeName());     if (entDef == null)     return;     isReadOnly(false);     for (Node defkid=entDef.getFirstChild(); defkid != null; defkid=defkid.getNextSibling()) {       Node newkid=defkid.cloneNode(true);       insertBefore(newkid,null);     }     setReadOnly(true,true);   } } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200536,skilltarget,num0,skillname); } "
"protected final boolean removeInternal(Tuple t){   return (m_tuples.remove(t)); } "
"public NotesGetCommentsQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public CatchOptions maxPokeballs(int maxPokeballs){   if (maxPokeballs <= 1)   maxPokeballs=-1;   this.maxPokeballs=maxPokeballs;   return this; } "
"public static boolean exists(long id){   try {     return Helper.exists(id,User.class);   }  catch (  Exception e1) {     log.error(e1.getMessage(),e1);   }   return false; } "
"public PhotosSaveQuery groupId(Integer value){   return unsafeParam(\"group_id\",value); } "
"public int addSplit(Split split){   nsplits++;   index2split.put(nsplits,split);   split2index.put(split,nsplits);   return nsplits; } "
"protected void validateDTDattribute(QName element,String attValue,XMLAttributeDecl attributeDecl) throws XNIException { switch (attributeDecl.simpleType.type) { case XMLSimpleType.TYPE_ENTITY: {       boolean isAlistAttribute=attributeDecl.simpleType.list;       try {         if (isAlistAttribute) {           fValENTITIES.validate(attValue,fValidationState);         }  else {           fValENTITY.validate(attValue,fValidationState);         }       }  catch (      InvalidDatatypeValueException ex) {         fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);       }       break;     } case XMLSimpleType.TYPE_NOTATION: case XMLSimpleType.TYPE_ENUMERATION: {     boolean found=false;     String[] enumVals=attributeDecl.simpleType.enumeration;     if (enumVals == null) {       found=false;     }  else     for (int i=0; i < enumVals.length; i++) {       if (attValue == enumVals[i] || attValue.equals(enumVals[i])) {         found=true;         break;       }     }     if (!found) {       StringBuffer enumValueString=new StringBuffer();       if (enumVals != null)       for (int i=0; i < enumVals.length; i++) {         enumValueString.append(enumVals[i] + \" \");       }       fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"MSG_ATTRIBUTE_VALUE_NOT_IN_LIST\",new Object[]{attributeDecl.name.rawname,attValue,enumValueString},XMLErrorReporter.SEVERITY_ERROR);     }     break;   } case XMLSimpleType.TYPE_ID: {   try {     fValID.validate(attValue,fValidationState);   }  catch (  InvalidDatatypeValueException ex) {     fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);   }   break; } case XMLSimpleType.TYPE_IDREF: { boolean isAlistAttribute=attributeDecl.simpleType.list; try {   if (isAlistAttribute) {     fValIDRefs.validate(attValue,fValidationState);   }  else {     fValIDRef.validate(attValue,fValidationState);   } }  catch (InvalidDatatypeValueException ex) {   if (isAlistAttribute) {     fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"IDREFSInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);   }  else {     fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);   } } break; } case XMLSimpleType.TYPE_NMTOKEN: { boolean isAlistAttribute=attributeDecl.simpleType.list; try { if (isAlistAttribute) {   fValNMTOKENS.validate(attValue,fValidationState); }  else {   fValNMTOKEN.validate(attValue,fValidationState); } }  catch (InvalidDatatypeValueException ex) { if (isAlistAttribute) {   fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"NMTOKENSInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR); }  else {   fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"NMTOKENInvalid\",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR); } } break; } } } "
"private ColumnWithIntIndex[] createColumnWithIndexArray(byte[][] keyBlock,boolean isNoDictionary){   ColumnWithIntIndex[] columnWithIndexs;   if (isNoDictionary) {     columnWithIndexs=new ColumnWithIntIndexForHighCard[keyBlock.length];     for (int i=0; i < columnWithIndexs.length; i++) {       columnWithIndexs[i]=new ColumnWithIntIndexForHighCard(keyBlock[i],i);     }   }  else {     columnWithIndexs=new ColumnWithIntIndex[keyBlock.length];     for (int i=0; i < columnWithIndexs.length; i++) {       columnWithIndexs[i]=new ColumnWithIntIndex(keyBlock[i],i);     }   }   return columnWithIndexs; } "
"private DataStoreStreaming(){ } "
"private void resetPreviousView(){   if (mPreviousContentView == null)   return;   View view=mPreviousContentView;   FrameLayout contentView=mCurrentContentView;   view.setX(0);   contentView.removeView(view);   mPreviousContentView=null;   if (mPreviousActivity == null || mPreviousActivity.isFinishing())   return;   Activity preActivity=mPreviousActivity;   final ViewGroup previewContentView=getContentView(preActivity.getWindow());   previewContentView.addView(view,0);   mPreviousActivity=null; } "
"public synchronized void returnBuf(byte[] buf){   if (buf == null || buf.length > mSizeLimit) {     return;   }   mBuffersByLastUse.add(buf);   int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);   if (pos < 0) {     pos=-pos - 1;   }   mBuffersBySize.add(pos,buf);   mCurrentSize+=buf.length;   trim(); } "
"protected Dfp trunc(final DfpField.RoundingMode rmode){   boolean changed=false;   if (isNaN()) {     return newInstance(this);   }   if (nans == INFINITE) {     return newInstance(this);   }   if (mant[mant.length - 1] == 0) {     return newInstance(this);   }   if (exp < 0) {     field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);     Dfp result=newInstance(getZero());     result=dotrap(DfpField.FLAG_INEXACT,TRUNC_TRAP,this,result);     return result;   }   if (exp >= mant.length) {     return newInstance(this);   }   Dfp result=newInstance(this);   for (int i=0; i < mant.length - result.exp; i++) {     changed|=result.mant[i] != 0;     result.mant[i]=0;   }   if (changed) { switch (rmode) { case ROUND_FLOOR:       if (result.sign == -1) {         result=result.add(newInstance(-1));       }     break; case ROUND_CEIL:   if (result.sign == 1) {     result=result.add(getOne());   } break; case ROUND_HALF_EVEN: default : final Dfp half=newInstance(\"0.5\"); Dfp a=subtract(result); a.sign=1; if (a.greaterThan(half)) { a=newInstance(getOne()); a.sign=sign; result=result.add(a); } if (a.equals(half) && result.exp > 0 && (result.mant[mant.length - result.exp] & 1) != 0) { a=newInstance(getOne()); a.sign=sign; result=result.add(a); } break; } field.setIEEEFlagsBits(DfpField.FLAG_INEXACT); result=dotrap(DfpField.FLAG_INEXACT,TRUNC_TRAP,this,result); return result; } return result; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_ME_TO_SELF(String skillname){   return new SM_SYSTEM_MESSAGE(1200326,skillname); } "
"public List<Sequence<K,V>> matchPattern(Event<K,V> event){   int numberOfStateToProcess=computationStages.size();   List<ComputationStage<K,V>> finalStates=new LinkedList<>();   while (numberOfStateToProcess-- > 0) {     ComputationStage<K,V> computationStage=computationStages.poll();     Collection<ComputationStage<K,V>> states=matchPattern(new ComputationContext<>(event,computationStage));     if (states.isEmpty())     removePattern(computationStage);  else     finalStates.addAll(getAllFinalStates(states));     computationStages.addAll(getAllNonFinalStates(states));   }   return matchConstruction(finalStates); } "
"private void generateActivityLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){   createIfStmt(endClassStmt);   Set<SootClass> referenceClasses=new HashSet<SootClass>();   if (applicationClass != null)   referenceClasses.add(applicationClass);   for (  SootClass callbackClass : this.applicationCallbackClasses)   referenceClasses.add(callbackClass);   referenceClasses.add(currentClass);   Stmt onCreateStmt=new JNopStmt();   body.getUnits().add(onCreateStmt); {     Stmt onCreateStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONCREATE,currentClass,entryPoints,classLocal);     boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYCREATED);     if (found && onCreateStmt2 != null)     createIfStmt(onCreateStmt2);   }   Stmt onStartStmt=new JNopStmt();   body.getUnits().add(onStartStmt); {     Stmt onStartStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSTART,currentClass,entryPoints,classLocal);     boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSTARTED);     if (found && onStartStmt2 != null)     createIfStmt(onStartStmt2);   }   searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESTOREINSTANCESTATE,currentClass,entryPoints,classLocal);   searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPOSTCREATE,currentClass,entryPoints,classLocal);   Stmt onResumeStmt=new JNopStmt();   body.getUnits().add(onResumeStmt); {     Stmt onResumeStmt2=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESUME,currentClass,entryPoints,classLocal);     boolean found=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYRESUMED);     if (found && onResumeStmt2 != null)     createIfStmt(onResumeStmt2);   }   searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPOSTRESUME,currentClass,entryPoints,classLocal);   searchAndBuildMethodWithGetIntent(AndroidEntryPointConstants.ACTIVITY_ONNEWINTENT,currentClass,entryPoints,classLocal);   Set<SootMethod> methodsToInvoke=new HashSet<SootMethod>();   if (modelAdditionalMethods)   for (  SootMethod currentMethod : currentClass.getMethods())   if (entryPoints.contains(currentMethod.toString()) && !AndroidEntryPointConstants.getActivityLifecycleMethods().contains(currentMethod.getSubSignature()))   methodsToInvoke.add(currentMethod);   if (!JadeCfg.isEnhance_callback_body()) {     System.out.println(\"jade body enhancement not enabled, fallback to default callback impl.\");     boolean hasCallbacks=this.callbackFunctions.containsKey(currentClass.getName());     if (!methodsToInvoke.isEmpty() || hasCallbacks) {       JNopStmt startWhileStmt=new JNopStmt();       JNopStmt endWhileStmt=new JNopStmt();       body.getUnits().add(startWhileStmt);       createIfStmt(endWhileStmt);       addCallbackMethods(currentClass);       boolean hasAdditionalMethods=false;       for (      SootMethod currentMethod : currentClass.getMethods())       if (entryPoints.contains(currentMethod.toString()))       hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);       body.getUnits().add(endWhileStmt);       if (hasAdditionalMethods)       createIfStmt(startWhileStmt);     }   }  else {     System.out.println(\"jade body enhancement enabled, not enabling default callback impl in dummyMain.\");   }   Stmt onPause=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONPAUSE,currentClass,entryPoints,classLocal);   boolean hasAppOnPause=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYPAUSED);   if (hasAppOnPause && onPause != null)   createIfStmt(onPause);   searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONCREATEDESCRIPTION,currentClass,entryPoints,classLocal);   Stmt onSaveInstance=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSAVEINSTANCESTATE,currentClass,entryPoints,classLocal);   boolean hasAppOnSaveInstance=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSAVEINSTANCESTATE);   if (hasAppOnSaveInstance && onSaveInstance != null)   createIfStmt(onSaveInstance);   createIfStmt(onResumeStmt);   Stmt onStop=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONSTOP,currentClass,entryPoints,classLocal);   boolean hasAppOnStop=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYSTOPPED);   if (hasAppOnStop && onStop != null)   createIfStmt(onStop);   JNopStmt stopToDestroyStmt=new JNopStmt();   createIfStmt(stopToDestroyStmt);   searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONRESTART,currentClass,entryPoints,classLocal);   createIfStmt(onStartStmt);   body.getUnits().add(stopToDestroyStmt);   Stmt onDestroy=searchAndBuildMethod(AndroidEntryPointConstants.ACTIVITY_ONDESTROY,currentClass,entryPoints,classLocal);   boolean hasAppOnDestroy=addCallbackMethods(applicationClass,referenceClasses,AndroidEntryPointConstants.APPLIFECYCLECALLBACK_ONACTIVITYDESTROYED);   if (hasAppOnDestroy && onDestroy != null)   createIfStmt(onDestroy);   createIfStmt(endClassStmt); } "
"public RegexValidator(String regex,boolean caseSensitive){   this(new String[]{regex},caseSensitive); } "
"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {   String abi=Build.CPU_ABI;   String libraryName;   if (abi.equalsIgnoreCase(\"armeabi\")) {     libraryName=\"armeabi\";   }  else   if (abi.equalsIgnoreCase(\"x86\")) {     libraryName=\"x86\";   }  else   if (abi.contains(\"armeabi-v7\")) {     libraryName=\"armeabi-v7a\";   }  else {     return;   }   AssetManager manager=context.getAssets();   final InputStream is=manager.open(libraryName + \"/\" + assetsFilename);   copyFile(file,is,mode); } "
"private void printModifiers(List<IExtendedModifier> ext){   for (Iterator<IExtendedModifier> it=ext.iterator(); it.hasNext(); ) {     ASTNode p=(ASTNode)it.next();     p.accept(this);     this.fBuffer.append(\" \");   } } "
"public final boolean canSetString(String field){   Column col=getColumn(field);   return (col == null ? false : col.canSetString()); } "
"public synchronized boolean removeAll(Collection c){   Object[] elements=getArray();   int len=elements.length;   if (len != 0) {     int newlen=0;     Object[] temp=new Object[len];     for (int i=0; i < len; ++i) {       Object element=elements[i];       if (!c.contains(element))       temp[newlen++]=element;     }     if (newlen != len) {       setArray(copyOfRange(temp,0,newlen,Object[].class));       return true;     }   }   return false; } "
"public static String readFile(final File file){   try {     return readFileWithExceptions(file);   }  catch (  IOException e) {     System.out.println(ExceptionMessages.COULD_NOT_READ.with(e));   }   return null; } "
"public static boolean isCorsPreflight(String requestMethod,SecurityContext securityContext){   return HttpMethod.OPTIONS.equals(requestMethod) && (securityContext == null || securityContext.getUserPrincipal() == null); } "
"private void layout(int width,int height){   int itemsWidth=width - 2 * PADDING;   itemsLayout.layout(0,0,itemsWidth,height); } "
"@Override public void clear(){   if (mSize != 0) {     freeArrays(mHashes,mArray,mSize);     mHashes=ContainerHelpers.EMPTY_INTS;     mArray=ContainerHelpers.EMPTY_OBJECTS;     mSize=0;   } } "
"private static void sendFailureSelfPatch(StatefulService service,Throwable e){   StatefulTaskDocument body=new StatefulTaskDocument();   body.taskInfo=new TaskState();   body.taskInfo.stage=TaskStage.FAILED;   body.taskInfo.failure=Utils.toServiceErrorResponse(e);   service.logWarning(\"Operation failed: %s\",Utils.toString(e));   sendPatch(service,body); } "
"public boolean isJiniProtocol(){   return StringUtils.equalsIgnoreCase(getProtocol(),JINI_PROTOCOL); } "
"private void replaceAltClassNames(byte[] classBytes){   for (  Map.Entry<String,String> entry : nameToMangledName.entrySet()) {     String origName=entry.getKey();     origName=origName.replace('.','/');     String mangledName=entry.getValue();     mangledName=mangledName.replace('.','/');     findAndReplace(classBytes,stringToUtf8Pattern(origName),stringToUtf8Pattern(mangledName));     findAndReplace(classBytes,stringToTypeStringPattern(origName),stringToTypeStringPattern(mangledName));   } } "
"public static <K,V>Map<K,V> makeImmutable(Map<K,V> mutableMap){   Map<K,V> newMap=new HashMap<>();   for (  Map.Entry<K,V> entry : mutableMap.entrySet()) {     newMap.put(entry.getKey(),Utils.makeImmutable(entry.getValue()));   }   return Collections.unmodifiableMap(newMap); } "
"private void initialize(String roots) throws BindException {   initialize(roots,null); } "
"public GroupsSetCallbackSettingsQuery messageDeny(Boolean value){   return unsafeParam(\"message_deny\",value); } "
"private void updatePrimaryKeyMaxSurrogateMap(){   Map<String,Boolean> primaryKeyMap=columnsInfo.getPrimaryKeyMap();   for (  Entry<String,Boolean> entry : primaryKeyMap.entrySet()) {     if (!primaryKeyMap.get(entry.getKey())) {       int repeatedPrimaryFromLevels=getRepeatedPrimaryFromLevels(dimInsertFileNames,entry.getKey());       if (null == primaryKeysMaxSurroagetMap) {         primaryKeysMaxSurroagetMap=new HashMap<String,Integer>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);       }       primaryKeysMaxSurroagetMap.put(entry.getKey(),max[repeatedPrimaryFromLevels]);     }   } } "
"private void drawShadows(Canvas canvas){   int height=(int)(3 * getItemHeight());   topShadow.setBounds(0,0,getWidth(),height);   topShadow.draw(canvas);   bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());   bottomShadow.draw(canvas); } "
"public LeastSquaresBuilder lazyEvaluation(final boolean newValue){   lazyEvaluation=newValue;   return this; } "
"public ClientKey(final InputStream inputStream,final String password) throws InvalidKeystoreException {   this.password=password;   final KeyStore keystore=getKeyStore(inputStream,password);   final Enumeration<String> aliases=getAliases(keystore);   if (aliases.hasMoreElements()) {     this.alias=aliases.nextElement();     logger.info(\"Client certificate serial number: \" + getCertificateInfo(keystore,alias));   }  else {     throw new InvalidKeystoreException(\"Keystore doesn't contain any keys!\");   }   this.keyStore=keystore;   this.clientPasswordCallback=new ClientPasswordCallback(alias,password); } "
"public AccountSaveProfileInfoQuery cityId(Integer value){   return unsafeParam(\"city_id\",value); } "
"public static void o(Z[][] A){   o(A,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces); } "
"private void addHeaders(DataQueryParams params,Grid grid){   if (!params.isSkipData() && !params.isSkipHeaders()) {     for (    DimensionalObject col : params.getDimensions()) {       grid.addHeader(new GridHeader(col.getDimension(),col.getDisplayName(),String.class.getName(),false,true));     }     grid.addHeader(new GridHeader(VALUE_ID,VALUE_HEADER_NAME,Double.class.getName(),false,false));     if (params.isIncludeNumDen()) {       grid.addHeader(new GridHeader(NUMERATOR_ID,NUMERATOR_HEADER_NAME,Double.class.getName(),false,false));       grid.addHeader(new GridHeader(DENOMINATOR_ID,DENOMINATOR_HEADER_NAME,Double.class.getName(),false,false));       grid.addHeader(new GridHeader(FACTOR_ID,FACTOR_HEADER_NAME,Double.class.getName(),false,false));     }   } } "
"protected static SAXParseException createSAXParseException(XMLParseException exception){   return new SAXParseException(exception.getMessage(),exception.getPublicId(),exception.getExpandedSystemId(),exception.getLineNumber(),exception.getColumnNumber(),exception.getException()); } "
"public boolean isQuiet(){   return quiet; } "
"private void discard(float x,float y,float amountX,float amountY){   if (mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.UNDISCARD)) {     return;   }   if (mDiscardingTab == null) {     if (!mInSwipe) {       mDiscardingTab=getTabAtPositon(x,y);     }  else {       if (mTabModel.index() < 0)       return;       mDiscardingTab=mStackTabs[mTabModel.index()];     }     if (mDiscardingTab != null) {       cancelDiscardScrollingAnimation();       RectF target=mDiscardingTab.getLayoutTab().getClickTargetBounds();       float distanceToEdge;       float edgeToEdge;       if (mCurrentMode == Orientation.PORTRAIT) {         mDiscardDirection=1.0f;         distanceToEdge=Math.max(target.left - x,x - target.right);         edgeToEdge=target.width();       }  else {         mDiscardDirection=2.0f - 4.0f * (x / mLayout.getWidth());         mDiscardDirection=MathUtils.clamp(mDiscardDirection,-1.0f,1.0f);         distanceToEdge=Math.max(target.top - y,y - target.bottom);         edgeToEdge=target.height();       }       float scaledDiscardX=x - mDiscardingTab.getLayoutTab().getX();       float scaledDiscardY=y - mDiscardingTab.getLayoutTab().getY();       mDiscardingTab.setDiscardOriginX(scaledDiscardX / mDiscardingTab.getScale());       mDiscardingTab.setDiscardOriginY(scaledDiscardY / mDiscardingTab.getScale());       mDiscardingTab.setDiscardFromClick(false);       if (Math.abs(distanceToEdge) < DISCARD_SAFE_SELECTION_PCTG * edgeToEdge) {         mDiscardingTab=null;       }     }   }   if (mDiscardingTab != null) {     float deltaAmount=mCurrentMode == Orientation.PORTRAIT ? amountX : amountY;     mDiscardingTab.addToDiscardAmount(deltaAmount);   } } "
"public float rating(){   return mRating; } "
"public AdsGetSuggestionsQuery ids(String value){   return unsafeParam(\"ids\",value); } "
"public void onDownloadFailed(DownloadInfo downloadInfo,int reason,String notifyURI){   String status=DOWNLOAD_STATUS_DEVICE_ABORTED; switch (reason) { case DownloadManager.ERROR_CANNOT_RESUME:     status=DOWNLOAD_STATUS_LOSS_OF_SERVICE;   break; case DownloadManager.ERROR_HTTP_DATA_ERROR: case DownloadManager.ERROR_TOO_MANY_REDIRECTS: case DownloadManager.ERROR_UNHANDLED_HTTP_CODE: status=DOWNLOAD_STATUS_LOADER_ERROR; break; case DownloadManager.ERROR_INSUFFICIENT_SPACE: status=DOWNLOAD_STATUS_INSUFFICIENT_MEMORY; break; default : break; } long downloadId=downloadInfo.getDownloadId(); OMAInfo omaInfo=mPendingOMADownloads.get(downloadId); if (omaInfo == null) { omaInfo=new OMAInfo(); omaInfo.addAttributeValue(OMA_INSTALL_NOTIFY_URI,notifyURI); sendInstallNotificationAndNextStep(omaInfo,downloadInfo,status); return; } showDownloadWarningDialog(R.string.oma_download_failed,omaInfo,downloadInfo,status); mPendingOMADownloads.remove(downloadId); } "
"public void updateEnableState(){   if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();   for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {     ICommand command=menuItem2CommandFX.get(menuItem);     menuItem.setDisable(!command.isApplicable());     if (command instanceof ICheckBoxCommand) {       ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());     }   } } "
"public smaliFlexLexer(java.io.Reader in){   this.zzReader=in; } "
"public boolean isCritical(){   return true; } "
"public static void reset(){   fuelCaches=new HashMap<EntityPlayerMP,Integer>(); } "
"public void runJob(Job job) throws JobManagerException {   assertIsRunning();   if (job.isValid()) {     JobPoller.getInstance().queueNow(job);   } } "
"@Override public synchronized void reset() throws IOException {   fbIndex=markFbIndex;   if (markedAtStart) {     firstBytes=null;   }   in.reset(); } "
"public Request(Request parent,String name,JSONObject params,StructType type){   this.params=params;   this.type=type;   this.parent=parent;   this.name=name; } "
"public void writeByteByteInt(ByteByteInt a) throws IOException {   outs.write(a.getByte1());   outs.write(a.getByte2());   position+=2;   writeInt(a.getValue()); } "
"public boolean canGetInt(){   return canGet(int.class); } "
"public void requestRemoveNodesStart(){   if (exclusion == true || inclusion == true) {     logger.debug(\"ZWave exclusion already in progress - aborted\");     return;   }   enqueue(new RemoveNodeMessageClass().doRequestStart());   exclusion=true;   startInclusionTimer();   logger.debug(\"ZWave controller start exclusion\"); } "
"public static boolean isLegacyIdeaAndroidModule(@NotNull Module module){   AndroidFacet facet=AndroidFacet.getInstance(module);   if (facet != null && !facet.requiresAndroidModel()) {     return true;   }   return false; } "
"public BlurDrawable(Window blurredWindow){   this(blurredWindow.getDecorView()); } "
"public FilterNode(){   setDisplayString(); } "
"private void pushAnnotatorsRef(String values){   annotatorsRef.push(annotatorsRef.peek());   setAnnotatorsRef(values); } "
"public static String joinStringFrom(final String arr[],final int start){   return joinStringFrom(arr,start,\" \"); } "
"public static boolean isVideo(File file){   Uri selectedUri=Uri.fromFile(file);   String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());   String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);   return (mimeType != null && mimeType.startsWith(\"video/\")); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_ME_TO_SELF(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200408,num0,skillname); } "
"public short remove(K key){   short prev=(short)0;   int index=index(key);   if (index >= 0) {     prev=_values[index];     removeAt(index);   }   return prev; } "
"public TypeVariable typeVariable(SootClass sootClass){   return typeVariable(hierarchy.typeNode(sootClass.getType())); } "
"public void unsetPeak(){   peak=Integer.MIN_VALUE;   repaint(); } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"private Localisation(){ } "
"public MqttSpyDaemonConfigLoader() throws XMLException {   super();   readFromClassPath(MqttSpyDaemonConstants.DEFAULT_PROPERTIES_FILE_NAME);   this.parser=new XMLParser(MqttSpyDaemonConstants.PACKAGE,new String[]{MqttConfigurationUtils.SPY_COMMON_SCHEMA,MqttConfigurationUtils.MQTT_COMMON_SCHEMA,MqttSpyDaemonConstants.SCHEMA}); } "
"public SQLQuery<?> build(ITemplateHolder template,String typeName,ITypeDesc typeDesc){   if (typeDesc == null)   return new SQLQuery<Object>(typeName,\"\");   return template.toSQLQuery(typeDesc); } "
"private void createBody(soot.SootMethod sootMethod){   body=soot.jimple.Jimple.v().newBody(sootMethod);   sootMethod.setActiveBody(body); } "
"@Override public void requestPhotos(Context c,int page,boolean refresh){   if (!model.isRefreshing() && !model.isLoading()) {     if (refresh) {       model.setRefreshing(true);     }  else {       model.setLoading(true);     }     page=refresh ? 1 : page + 1;     listener=new OnRequestPhotosListener(c,page,refresh);     model.getService().searchPhotos(model.getSearchQuery(),page,listener);   } } "
"public ArithmeticMaker(MetricDictionary metricDictionary,ArithmeticPostAggregationFunction function){   this(metricDictionary,function,new SketchRoundUpMapper()); } "
"public void delete(RecordId rid){   moveToRecordId(rid);   delete(); } "
"public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){   this(AccountManager.get(context),account,authTokenType,notifyAuthFailure); } "
"@Override public int hashCode(){   final int prime=31;   int result=1;   result=prime * result + ((getId() == null) ? 0 : getId().hashCode());   result=prime * result + ((getTitle() == null) ? 0 : getTitle().hashCode());   result=prime * result + ((getRequestUri() == null) ? 0 : getRequestUri().hashCode());   result=prime * result + ((getParammeters() == null) ? 0 : getParammeters().hashCode());   result=prime * result + ((getMethod() == null) ? 0 : getMethod().hashCode());   result=prime * result + ((getClientHost() == null) ? 0 : getClientHost().hashCode());   result=prime * result + ((getUserAgent() == null) ? 0 : getUserAgent().hashCode());   result=prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());   result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());   result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());   result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());   result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());   result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());   result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());   return result; } "
"@Override public void populateExpression(Object objValue){   if (objValue != null) {     if (objValue instanceof Boolean) {       populateField((Boolean)objValue);       valueUpdated();     }   } } "
"public static void verifyInterval(final double lower,final double upper) throws MathIllegalArgumentException {   if (lower >= upper) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);   } } "
"public static void e(String tag,String msg){   if (LOG_ENABLE) {     Log.e(tag,buildMsg(msg));   } } "
"public void checkLevel(int level){   if (!Scene.v().doneResolving())   return;   checkLevelIgnoreResolving(level); } "
"public static Value[] selectBaseList(Value val,boolean keepArrayRef){   if (val instanceof BinopExpr) {     Value[] set=new Value[2];     BinopExpr expr=(BinopExpr)val;     set[0]=expr.getOp1();     set[1]=expr.getOp2();     return set;   }  else   if (val instanceof InstanceOfExpr) {     Value[] set=new Value[]{((InstanceOfExpr)val).getOp()};     return set;   }  else   return new Value[]{selectBase(val,keepArrayRef)}; } "
"public JsonParseException(String msg,Throwable cause){   super(msg,cause); } "
"public void associateAsyncPrettyPrinterWithId(String requestId,AsyncPrettyPrinter asyncPrettyPrinter){   if (mRequestIdMap.put(requestId,asyncPrettyPrinter) != null) {     throw new IllegalArgumentException(\"cannot associate different \" + \"pretty printers with the same request id: \" + requestId);   } } "
"public PtcCredentialProvider(OkHttpClient client,String username,String password) throws LoginFailedException, RemoteServerException {   this(client,username,password,new SystemTimeImpl()); } "
"@Override protected void handleIOException(IOException e) throws IOException {   throw new TaggedIOException(e,tag); } "
"public void addEntry(Entry e,int dataSetIndex){   if (mDataSets.size() > dataSetIndex && dataSetIndex >= 0) {     IDataSet set=mDataSets.get(dataSetIndex);     if (!set.addEntry(e))     return;     float val=e.getVal();     if (mYValCount == 0) {       mYMin=val;       mYMax=val;       if (set.getAxisDependency() == AxisDependency.LEFT) {         mLeftAxisMax=e.getVal();         mLeftAxisMin=e.getVal();       }  else {         mRightAxisMax=e.getVal();         mRightAxisMin=e.getVal();       }     }  else {       if (mYMax < val)       mYMax=val;       if (mYMin > val)       mYMin=val;       if (set.getAxisDependency() == AxisDependency.LEFT) {         if (mLeftAxisMax < e.getVal())         mLeftAxisMax=e.getVal();         if (mLeftAxisMin > e.getVal())         mLeftAxisMin=e.getVal();       }  else {         if (mRightAxisMax < e.getVal())         mRightAxisMax=e.getVal();         if (mRightAxisMin > e.getVal())         mRightAxisMin=e.getVal();       }     }     mYValCount+=1;     handleEmptyAxis(getFirstLeft(),getFirstRight());   }  else {     Log.e(\"addEntry\",\"Cannot add Entry because dataSetIndex too high or too low.\");   } } "
"public DotGraph createSubGraph(String label){   DotGraph subgraph=new DotGraph(label);   subgraph.isSubGraph=true;   this.drawElements.add(subgraph);   return subgraph; } "
"@Override public Filter createFilter(){   return new TEqualsExtended(); } "
"public boolean intersectsRange(DateRange range){   if (isPoint() && range.isPoint() && this.start.equals(range.start)) {     return true;   }   return !before(range) && !after(range); } "
"public Observable<FirebaseChildEvent> observeChildMoved(final Query firebaseRef){   return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.MOVED)); } "
"public Skill(SkillTemplate skillTemplate,Player effector,Creature firstTarget){   this(skillTemplate,effector,effector.getSkillList().getSkillLevel(skillTemplate.getSkillId()),firstTarget,null); } "
"public Well512a(){   super(K); } "
"public void addImplements(Access node){   List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();   list.addChild(node); } "
"public static boolean isEmpty(CharSequence str){   return TextUtils.isEmpty(str); } "
"protected FriendsAreFriendsQuery userIds(List<Integer> value){   return unsafeParam(\"user_ids\",value); } "
"private ErrorHandler(ErrorHandler parentErrorHandler){   this();   this.parentErrorHandler=parentErrorHandler; } "
"public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){   FriendDao.createTable(db,ifNotExists);   GroupsDao.createTable(db,ifNotExists);   BlackListDao.createTable(db,ifNotExists);   GroupMemberDao.createTable(db,ifNotExists); } "
"private JSONArray readArray() throws JSONException {   JSONArray result=new JSONArray();   boolean hasTrailingSeparator=false;   while (true) { switch (nextCleanInternal()) { case -1:       throw syntaxError(\"Unterminated array\"); case ']':     if (hasTrailingSeparator) {       result.put(null);     }   return result; case ',': case ';': result.put(null); hasTrailingSeparator=true; continue; default : pos--; } result.put(nextValue()); switch (nextCleanInternal()) { case ']': return result; case ',': case ';': hasTrailingSeparator=true; continue; default : throw syntaxError(\"Unterminated array\"); } } } "
"public static boolean isResourceReference(@NotNull PsiElement element){   return getResourceReferenceType(element) != ResourceReferenceType.NONE; } "
"public void addBodyDecl(BodyDecl node){   List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();   list.addChild(node); } "
"@Override public void notifyOnUpdate(final Tag tag,final List<Alarm> alarms){   TagWithAlarms tagWithAlarms=new TagWithAlarmsImpl(tag,alarms);   try {     publish(tagWithAlarms);   }  catch (  JmsException e) {     LOGGER.error(\"notifyOnUpdate - Error publishing tag update to topic for tag \" + tagWithAlarms.getTag().getId() + \" - submitting for republication\",e);     republisher.publicationFailed(tagWithAlarms);   } } "
"void reset(){   myParserCount=0;   myParserFiles=null;   myLayoutName=null;   myLayoutEmbeddedParser=null; } "
"public static QueueClientFactory forClusterAndHttpClient(String clusterName,Client client){   return new QueueClientFactory(clusterName,client); } "
"public void add(WXDomObject child,int index){   if (child == null || index < -1 || sDestroy.get()) {     return;   }   if (children == null) {     children=new ArrayList<>();   }   int count=children.size();   index=index >= count ? -1 : index;   if (index == -1) {     children.add(child);     super.addChildAt(child,super.getChildCount());   }  else {     children.add(index,child);     super.addChildAt(child,index);   }   child.parent=this; } "
"private void drawHorizontal(Canvas c,RecyclerView parent){   final int top=parent.getPaddingTop();   final int bottom=parent.getHeight() - parent.getPaddingBottom();   final int childCount=parent.getChildCount();   for (int i=0; i < childCount; i++) {     final View child=parent.getChildAt(i);     final RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)child.getLayoutParams();     final int left=child.getRight() + params.rightMargin;     final int right=left + divider.getIntrinsicHeight();     divider.setBounds(left,top,right,bottom);     divider.draw(c);   } } "
"public static Map<String,Object> singletonMap(String key,Object value){   Map<String,Object> map=new HashMap<String,Object>();   map.put(key,value);   return map; } "
"@Override public void attributeSelection(String field){ } "
"public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_TITLE(int value0){   return new SM_SYSTEM_MESSAGE(1300035,new DescriptionId(value0)); } "
"@After @Before @CacheEvict(\"default\") public void post(){ } "
"public void draw(Canvas canvas){   canvas.drawCircle(x,y,radius,paint); } "
"public void addBitmapToCache(String data,BitmapDrawable value){   if (data == null || value == null) {     return;   }   if (mMemoryCache != null) {     if (RecyclingBitmapDrawable.class.isInstance(value)) {       ((RecyclingBitmapDrawable)value).setIsCached(true);     }     mMemoryCache.put(data,value);   } } "
"public AppTest(String testName){   super(testName); } "
"public LoginServerConnection connect(){   SocketChannel sc;   for (; ; ) {     loginServer=null;     log.info(\"Connecting to LoginServer: \" + NetworkConfig.LOGIN_ADDRESS);     try {       sc=SocketChannel.open(NetworkConfig.LOGIN_ADDRESS);       sc.configureBlocking(false);       Dispatcher d=nioServer.getReadWriteDispatcher();       loginServer=new LoginServerConnection(sc,d);       d.register(sc,SelectionKey.OP_READ,loginServer);       loginServer.initialized();       return loginServer;     }  catch (    Exception e) {       log.info(\"Cant connect to LoginServer: \" + e.getMessage());     }     try {       Thread.sleep(10 * 1000);     }  catch (    Exception e) {     }   } } "
"private void storeLegionMemberExInCache(Player player){   if (this.allCachedLegionMembers.containsEx(player.getObjectId())) {     LegionMemberEx legionMemberEx=allCachedLegionMembers.getMemberEx(player.getObjectId());     legionMemberEx.setNickname(player.getLegionMember().getNickname());     legionMemberEx.setSelfIntro(player.getLegionMember().getSelfIntro());     legionMemberEx.setPlayerClass(player.getPlayerClass());     legionMemberEx.setExp(player.getCommonData().getExp());     legionMemberEx.setLastOnline(player.getCommonData().getLastOnline());     legionMemberEx.setWorldId(player.getPosition().getMapId());     legionMemberEx.setOnline(false);   }  else {     LegionMemberEx legionMemberEx=new LegionMemberEx(player,player.getLegionMember(),false);     addCachedLegionMemberEx(legionMemberEx);   } } "
"@Override public void startAttlist(String elementName,Augmentations augs) throws XNIException { } "
"@Override public void startMerging(){   for (  Api api : getModel().getServiceConfig().getApisList()) {     Interface including=resolveInterface(api.getName(),getLocationInConfig(api,\"name\"));     for (    Mixin mixin : api.getMixinsList()) {       Interface included=resolveInterface(mixin.getName(),getLocationInConfig(mixin,\"name\"));       if (including == null || included == null) {         continue;       }       MixinAttribute mixinAttr=MixinAttribute.create(included,mixin);       including.addAttribute(MixinAttribute.KEY,mixinAttr);       for (      Method method : included.getMethods()) {         startMergeMethod(including,method);       }     }   } } "
"@deprecated public UScriptRun(char[] chars){   reset(chars); } "
"public Builder preProcessor(BitmapProcessor preProcessor){   this.preProcessor=preProcessor;   return this; } "
"private Vector resolveAllLocalSystem(String systemId){   Vector map=new Vector();   String osname=System.getProperty(\"os.name\");   boolean windows=(osname.indexOf(\"Windows\") >= 0);   Enumeration en=catalogEntries.elements();   while (en.hasMoreElements()) {     CatalogEntry e=(CatalogEntry)en.nextElement();     if (e.getEntryType() == SYSTEM && (e.getEntryArg(0).equals(systemId) || (windows && e.getEntryArg(0).equalsIgnoreCase(systemId)))) {       map.addElement(e.getEntryArg(1));     }   }   if (map.size() == 0) {     return null;   }  else {     return map;   } } "
"public static ValueCompressonHolder.UnCompressValue unCompressNone(DataType compDataType,DataType actualDataType){   if (actualDataType == DataType.DATA_BIGINT) {     return new UnCompressDefaultLong();   }  else { switch (compDataType) { case DATA_BYTE:       return new UnCompressNoneByte(); case DATA_SHORT:     return new UnCompressNoneShort(); case DATA_INT:   return new UnCompressNoneInt(); case DATA_LONG: return new UnCompressNoneLong(); case DATA_FLOAT: return new UnCompressNoneFloat(); default : return new UnCompressNoneDefault(); } } } "
"public SlickForm withDefaultFields(){   FormField userField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_user).withHint(mContext.getString(R.string.form_field_username));   FormField emailField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_email).withHint(mContext.getString(R.string.form_field_email));   FormField passField=new FormField(mContext).withType(PASSWORD).withIcon(R.drawable.ic_slick_lock).withHint(mContext.getString(R.string.form_field_password));   this.formFields.add(userField);   this.formFields.add(emailField);   this.formFields.add(passField);   return this; } "
"public void addPages(){   mainPage=new MoveRemoteResourceWizardMainPage(\"newRemoteFolderPage1\",Policy.bind(\"MoveRemoteFolderWizard.heading\"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER));   mainPage.setRemoteResource(selection);   addPage(mainPage);   String pageTitle=Policy.bind(\"CommentCommitWizardPage.pageTitle\");   String pageDescription=Policy.bind(\"CommentCommitWizardPage.pageDescription\");   ImageDescriptor image=SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER);   commitCommentPage=new CommentCommitWizardPage(parentDialog,pageTitle,pageTitle,image,pageDescription);   addPage(commitCommentPage); } "
"private void addVendorOption(VendorOptionTypeInterface vendorOption){   options.put(vendorOption,vendorOption.getName()); } "
"public Builder encrypt(String key){   this.encryptKey=key;   return this; } "
"public boolean isApplicable(){   AlignmentViewer viewer=(AlignmentViewer)getViewer();   SelectedBlock selectedBlock=viewer.getSelectedBlock();   return viewer.getAlignment().getNumberOfSequences() > 0 && selectedBlock.isSelected() && selectedBlock.getFirstRow() > 0; } "
"public final void log(){   if (this.values != null) {     for (    FilteredDataTagValue tagValue : values) {       tagValue.log();     }   } } "
"public static void init(Context context){   if (cameraManager == null) {     cameraManager=new CameraManager(context);   } } "
"public static String decodeURN(String urn){   String publicId=\"\";   if (urn.startsWith(\"urn:publicid:\")) {     publicId=urn.substring(13);   }  else {     return urn;   }   publicId=PublicId.stringReplace(publicId,\"%2F\",\"/\");   publicId=PublicId.stringReplace(publicId,\":\",\"//\");   publicId=PublicId.stringReplace(publicId,\"%3A\",\":\");   publicId=PublicId.stringReplace(publicId,\";\",\"::\");   publicId=PublicId.stringReplace(publicId,\"+\",\" \");   publicId=PublicId.stringReplace(publicId,\"%2B\",\"+\");   publicId=PublicId.stringReplace(publicId,\"%23\",\"#\");   publicId=PublicId.stringReplace(publicId,\"%3F\",\"?\");   publicId=PublicId.stringReplace(publicId,\"%27\",\"'\");   publicId=PublicId.stringReplace(publicId,\"%3B\",\";\");   publicId=PublicId.stringReplace(publicId,\"%25\",\"%\");   return publicId; } "
"private static String extractValueForConversion(final SubstringFormatterDetails details,final String text) throws ConversionException {   final int startTagIndex=text.indexOf(details.getStartTag());   if (startTagIndex != -1) {     final int endTagIndex=text.indexOf(details.getEndTag(),startTagIndex);     if (endTagIndex != -1) {       return text.substring(startTagIndex + details.getStartTag().length(),endTagIndex);     }   }   throw new ConversionException(\"Cannot find tags\"); } "
"public static double max(final double[] values){   double max=values[0];   for (int i=1; i < values.length; i++) {     if (values[i] > max) {       max=values[i];     }   }   return max; } "
"public void requestPasswordForShareViaLink(boolean createShare){   SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(mFile,createShare);   dialog.show(getFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT); } "
"public void addClassification(String name,int size,long dumpStart,long dumpEnd,long indexStart,long indexEnd){   classificationNames=extend(classificationNames,name);   classificationSizes=extend(classificationSizes,size);   classificationDumpSectionStart=extend(classificationDumpSectionStart,dumpStart);   classificationDumpSectionEnd=extend(classificationDumpSectionEnd,dumpEnd);   classificationIndexSectionStart=extend(classificationIndexSectionStart,indexStart);   classificationIndexSectionEnd=extend(classificationIndexSectionEnd,indexEnd); } "
"public MarketSearchQueryWithExtended sort(MarketSearchSort value){   return unsafeParam(\"sort\",value); } "
"public MessagesGetChatUsersQueryWithFields nameCase(UsersNameCase value){   return unsafeParam(\"name_case\",value); } "
"@TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){   if (Utils.hasGingerbread()) {     return Environment.isExternalStorageRemovable();   }   return true; } "
"public int readUnsignedShort() throws JMSException {   initializeReading();   try {     this.dataIn.mark(Integer.MAX_VALUE);     return this.dataIn.readUnsignedShort();   }  catch (  EOFException eof) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageEOFException(eof.toString());     jmsEx.setLinkedException(eof);     throw jmsEx;   } catch (  IOException ioe) {     try {       this.dataIn.reset();     }  catch (    IOException e) {       JMSException jmsEx=new JMSException(e.toString());       jmsEx.setLinkedException(e);       throw jmsEx;     }     JMSException jmsEx=new MessageFormatException(\"Format error occurred\" + ioe.toString());     jmsEx.setLinkedException(ioe);     throw jmsEx;   } } "
"private void initModel(Photo p){   this.photoDetailsModel=new PhotoDetailsObject(p);   this.loadModel=new LoadObject(LoadObject.LOADING_STATE); } "
"public Editor edit() throws IOException {   return DiskLruCache.this.edit(key,sequenceNumber); } "
"private String extractValue(Document doc,String tagName) throws PIRException {   NodeList itemList=doc.getElementsByTagName(tagName);   if (itemList.getLength() != 1) {     throw new PIRException(\"itemList.getLength() = \" + itemList.getLength() + \" -- should be 1\");   }   return itemList.item(0).getTextContent().trim(); } "
"private float[] doFitPlane(float u,float v,double rgbTimestamp){   TangoXyzIjData xyzIj=tangoPointCloudManager.getLatestXyzIj();   if (xyzIj == null) {     return null;   }   TangoPoseData colorTdepthPose=TangoSupport.calculateRelativePose(rgbTimestamp,TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR,xyzIj.timestamp,TangoPoseData.COORDINATE_FRAME_CAMERA_DEPTH);   IntersectionPointPlaneModelPair intersectionPointPlaneModelPair=TangoSupport.fitPlaneModelNearClick(xyzIj,tangoCameraIntrinsics,colorTdepthPose,u,v);   TangoMatrixTransformData transform=TangoSupport.getMatrixTransformAtTime(xyzIj.timestamp,TangoPoseData.COORDINATE_FRAME_START_OF_SERVICE,TangoPoseData.COORDINATE_FRAME_CAMERA_DEPTH,TANGO_SUPPORT_ENGINE_OPENGL,TANGO_SUPPORT_ENGINE_TANGO);   if (transform.statusCode == TangoPoseData.POSE_VALID) {     float[] openGlTPlane=calculatePlaneTransform(intersectionPointPlaneModelPair.intersectionPoint,intersectionPointPlaneModelPair.planeModel,transform.matrix);     return openGlTPlane;   }  else {     Log.w(TAG,\"Can't get depth camera transform at time \" + xyzIj.timestamp);     return null;   } } "
"public void show(boolean animate){   show(animate,fadeIn); } "
"@Timed(name=\"bv.emodb.sor.AstyanaxDataWriterDAO.compact\",absolute=true) @Override public void compact(Table tbl,String key,UUID compactionKey,Compaction compaction,UUID changeId,Delta delta,Collection<UUID> changesToDelete,List<History> historyList,WriteConsistency consistency){   checkNotNull(tbl,\"table\");   checkNotNull(key,\"key\");   checkNotNull(compactionKey,\"compactionKey\");   checkNotNull(compaction,\"compaction\");   checkNotNull(changeId,\"changeId\");   checkNotNull(delta,\"delta\");   checkNotNull(changesToDelete,\"changesToDelete\");   checkNotNull(consistency,\"consistency\");   AstyanaxTable table=(AstyanaxTable)tbl;   for (  AstyanaxStorage storage : table.getWriteStorage()) {     DeltaPlacement placement=(DeltaPlacement)storage.getPlacement();     CassandraKeyspace keyspace=placement.getKeyspace();     ByteBuffer rowKey=storage.getRowKey(key);     writeCompaction(rowKey,compactionKey,compaction,consistency,placement,keyspace,tbl,key);     deleteCompactedDeltas(rowKey,consistency,placement,keyspace,changesToDelete,historyList,tbl,key);   } } "
"public static <E>E justNot(E v,E not){   return v; } "
"PersistentRegistrarImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {   super(configArgs,null,true,lifeCycle); } "
"private Double completeOperation(Double first,Double second,Character operation){   Double result=0.0; switch (operation) { case '+':     result=first + second;   break; case '-': if (first == null) {   result=-second; }  else {   result=first - second; } break; case '*': result=first * second; break; case '/': result=first / second; break; default : break; } return result; } "
"public final boolean contains(Node n){   return s.contains(n); } "
"public static BufferedImage createErrorImage(String error){   String str=\"Error creating map image: \" + error;   BufferedImage image=new BufferedImage(500,25,BufferedImage.TYPE_INT_RGB);   Graphics2D graphics=image.createGraphics();   graphics.setColor(Color.WHITE);   graphics.fill(new Rectangle(500,25));   graphics.setColor(Color.RED);   graphics.drawString(str,1,12);   return image; } "
"public static int distanceFinderZValue(double[] vector){   StringBuilder binaryBuffer=new StringBuilder();   List<String> binaryReps=new ArrayList<>(vector.length);   for (  double d : vector) {     int j=(int)d;     String binary=Integer.toBinaryString(j);     binaryReps.add(binary);   }   while (!binaryReps.isEmpty()) {     for (int j=0; j < binaryReps.size(); j++) {       String curr=binaryReps.get(j);       if (!curr.isEmpty()) {         char first=curr.charAt(0);         binaryBuffer.append(first);         curr=curr.substring(1);         binaryReps.set(j,curr);       }  else       binaryReps.remove(j);     }   }   return Integer.parseInt(binaryBuffer.toString(),2); } "
"public static ProcessEngineInfo retry(String resourceUrl){   log.debug(\"retying initializing of resource {}\",resourceUrl);   try {     return initProcessEnginFromResource(new URL(resourceUrl));   }  catch (  MalformedURLException e) {     throw new ActivitiIllegalArgumentException(\"invalid url: \" + resourceUrl,e);   } } "
"protected MessageReactor findMessageReactor(byte[] messageType,int offset,int length){   for (int i=0; i < messageReactors.length; i++) {     if (NodeUtil.equals(messageType,offset,length,messageReactors[i].messageType,0,messageReactors[i].messageType.length)) {       return messageReactors[i];     }   }   return null; } "
"@NotNull public UpdateFaceToPersonAction updatePersonFace(@NotNull String personGroupId,@NotNull String personId,@NotNull String persistedFaceId,@Nullable String userData){   Validation.validate(personGroupId,\"^[a-z0-9_-]{1,64}$\",new ParameterValidationException(\"personGroupId\",\"Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters.\"));   Validation.validate(userData,1,new ParameterValidationException(\"userData\",\"User-specified data for any purpose. The maximum length is 1KB.\"));   return new UpdateFaceToPersonAction(cognitiveContext,personGroupId,personId,persistedFaceId,userData); } "
"@Override public List<Class<? extends ConfigAspect>> mergeDependencies(){   return ImmutableList.of(); } "
"private void clear(){   stop();   for (  View view : mViews) {     removeView(view);   }   mViews.clear(); } "
"@Override public void populateExpression(Object objValue){ } "
"public Bucket(){ } "
"@Override public void onCreate(){   super.onCreate();   Log_OC.d(TAG,\"Creating service\");   mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);   HandlerThread thread=new HandlerThread(\"FileUploaderThread\",Process.THREAD_PRIORITY_BACKGROUND);   thread.start();   mServiceLooper=thread.getLooper();   mServiceHandler=new ServiceHandler(mServiceLooper,this);   mBinder=new FileUploaderBinder();   mUploadsStorageManager=new UploadsStorageManager(getContentResolver());   int failedCounter=mUploadsStorageManager.failInProgressUploads(UploadResult.SERVICE_INTERRUPTED);   if (failedCounter > 0) {     resurrection();   }   AccountManager am=AccountManager.get(getApplicationContext());   am.addOnAccountsUpdatedListener(this,null,false); } "
"private static DummyFreeTTSVoice createFreeTTSVoice(Voice maryVoice){   DummyFreeTTSVoice freeTTSVoice;   if (maryVoice.getLocale() != null && maryVoice.getLocale().equals(Locale.US)) {     try {       freeTTSVoice=(DummyFreeTTSVoice)Class.forName(\"marytts.language.en.DummyFreeTTSVoice\").newInstance();     }  catch (    InstantiationException e) {       throw new RuntimeException(e);     } catch (    IllegalAccessException e) {       throw new RuntimeException(e);     } catch (    ClassNotFoundException e) {       throw new RuntimeException(e);     }     freeTTSVoice.initialise(maryVoice,null);   }  else {     freeTTSVoice=new DummyFreeTTSVoice(maryVoice,null);   }   return freeTTSVoice; } "
"public static boolean isPubid(int c){   return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0; } "
"private DensityUtil(){   throw new UnsupportedOperationException(\"cannot be instantiated\"); } "
"private BpmResult logOnPtc(final LoginData loginData){   OkHttpClient http;   CredentialProvider cp;   http=new OkHttpClient();   final String username=loginData.getUsername();   final String password=loginData.getPassword();   final boolean saveAuth=config.getBool(ConfigKey.LOGIN_SAVE_AUTH);   try {     cp=new PtcCredentialProvider(http,username,password);     config.setString(ConfigKey.LOGIN_PTC_USERNAME,username);     if (saveAuth) {       config.setString(ConfigKey.LOGIN_PTC_PASSWORD,password);     }  else {       deleteLoginData(LoginType.PTC);     }   }  catch (  LoginFailedException|RemoteServerException e) {     deleteLoginData(LoginType.PTC);     return new BpmResult(e.getMessage());   }   try {     prepareLogin(cp,http);     return new BpmResult();   }  catch (  LoginFailedException|RemoteServerException e) {     deleteLoginData(LoginType.ALL);     return new BpmResult(e.getMessage());   } } "
"public NumberIsTooSmallException(Number wrong,Number min,boolean boundIsAllowed){   this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,wrong,min,boundIsAllowed); } "
"public boolean addProcessId(final Long processId){   if (processId != null && processId > 0) {     return processIds.add(processId);   }   return false; } "
"public void add(Predicate p,Font font){   super.add(p,font); } "
"@Override public void addSLDOutputListener(SLDOutputInterface sldOutput){ } "
"public void tabClosureCancelled(long time,int id){   final boolean selected=TabModelUtils.getCurrentTabId(mModel) == id;   tabCreated(time,id,Tab.INVALID_TAB_ID,selected); } "
"private boolean canAppointRank(Player activePlayer,int targetObjId){   Legion legion=activePlayer.getLegion();   if (!isBrigadeGeneral(activePlayer)) {     PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MEMBER_RANK_DONT_HAVE_RIGHT);     return false;   }   if (isSelf(activePlayer,targetObjId)) {     PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MASTER_ERROR_SELF);     return false;   }  else   if (!legion.isMember(targetObjId)) {     return false;   }   return true; } "
"private boolean batchTextToSpeech(String text){   boolean ok;   voice.startBatch();   ok=textToSpeech(text);   voice.endBatch();   return ok; } "
"@Override public Node cloneNode(boolean deep){   PSVIDocumentImpl newdoc=new PSVIDocumentImpl();   callUserDataHandlers(this,newdoc,UserDataHandler.NODE_CLONED);   cloneNode(newdoc,deep);   newdoc.mutationEvents=mutationEvents;   return newdoc; } "
"private String splitAsGzipFile(String split){   return split + \".gz\"; } "
"public void destroyView() throws CanceledException {   super.destroyView(); } "
"public static boolean isUrl(String s){   if (isEmpty(s))   return defaultEmptyOK;   if (s.indexOf(\"://\") != -1)   return true;   return false; } "
"public byte[] generateKek(PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {   PublicKey vlPublic=this.getValueLinkPublicKey();   KeyAgreement ka=KeyAgreement.getInstance(\"DH\");   ka.init(privateKey);   ka.doPhase(vlPublic,true);   byte[] secretKey=ka.generateSecret();   if (debug) {     Debug.logInfo(\"Secret Key : \" + StringUtil.toHexString(secretKey) + \" / \"+ secretKey.length,module);   }   MessageDigest md=MessageDigest.getInstance(\"SHA1\");   byte[] digest=md.digest(secretKey);   byte[] des2=getByteRange(digest,0,16);   byte[] first8=getByteRange(des2,0,8);   byte[] kek=copyBytes(des2,first8,0);   if (debug) {     Debug.logInfo(\"Generated KEK : \" + StringUtil.toHexString(kek) + \" / \"+ kek.length,module);   }   return kek; } "
"public static VendorOptionVersion fromString(String value){   String[] components=value.split(DELIMETER);   if (components.length == 3) {     Class<?> classType=null;     VersionData minimumVersion=null;     VersionData maximumVersion=null;     try {       classType=Class.forName(components[0]);     }  catch (    ClassNotFoundException e) {       ConsoleManager.getInstance().error(VendorOptionVersion.class,\"Unknown VendorOption class : \" + components[0]);       return null;     }     if (components[1].compareTo(NULL_STRING) != 0) {       minimumVersion=VersionData.getDecodedString(components[1]);     }     if (components[2].compareTo(NULL_STRING) != 0) {       maximumVersion=VersionData.getDecodedString(components[2]);     }     VendorOptionVersion vendorOptionVersion=new VendorOptionVersion(classType,minimumVersion,maximumVersion);     return vendorOptionVersion;   }   return null; } "
"public static int pairBytesToHashcode(byte[] pairBytes){   return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF); } "
"public void addDiscoveryListener(DiscoveryListener listener){   if (listener == null) {     throw new NullPointerException(\"can't add null listener\");   }   if (!listeners.contains(listener)) {     listeners.add(listener);   }   HashMap groupsMap; synchronized (discoveredSet) {     groupsMap=new HashMap(discoveredSet.size());     if (discoveredSet.isEmpty())     return;     for (int i=0; i < discoveredSet.size(); i++) {       ProxyReg reg=(ProxyReg)discoveredSet.get(i);       groupsMap.put(reg.proxy,reg.getMemberGroups());     }   }   notifyListener(listener,groupsMap,DISCOVERED); } "
"public String toString(){   return \"ClientMinPrincipalType\" + Constraint.toString(classes); } "
"public List<Sweet> extractSweetsForFeatureWithOpenCV(Mat img,Mat feature,int i){   STEP=10;   DIFFERENCE_LIMIT=60;   Imgproc.pyrDown(feature,feature,new Size(feature.cols() / 2,feature.rows() / 2));   Mat result=createResultMat(img,feature);   result=matchFeature(img,feature,result);   if (i != 5) {     THRESHOLD=0.96;   }  else {     THRESHOLD=0.85;   }   Core.MinMaxLocResult mmr=Core.minMaxLoc(result);   Point matchLoc=mmr.maxLoc;   int refX=(int)matchLoc.x + feature.cols() / 2;   int refY=(int)matchLoc.y + feature.rows() / 2;   if (!isFeatureAbsent(img,feature,refX,refY)) {     Imgproc.threshold(result,result,THRESHOLD,255,Imgproc.THRESH_BINARY);     return extractSweetsForFeatureWithOpenCV(result,i);   }   return Collections.emptyList(); } "
"public static RequestQueue newRequestQueue(Context context,String type,String assetFile) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException {   SSLContext sslContext=AndroidSelfSigned.newSSLContext(context,type,assetFile);   HurlStack hurlStack=new HurlStack(null,sslContext.getSocketFactory());   return Volley.newRequestQueue(context,hurlStack); } "
"private void snapEdgesToBounds(RectF edges,RectF bounds,float margin){   if (edges.left < bounds.left + margin) {     edges.offset(bounds.left - edges.left,0);   }   if (edges.top < bounds.top + margin) {     edges.offset(0,bounds.top - edges.top);   }   if (edges.right > bounds.right - margin) {     edges.offset(bounds.right - edges.right,0);   }   if (edges.bottom > bounds.bottom - margin) {     edges.offset(0,bounds.bottom - edges.bottom);   } } "
"public void show(){   LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();   lp.height=LayoutParams.WRAP_CONTENT;   mContentView.setLayoutParams(lp); } "
"public void testStaticWrongThread(){   doCheck(\"package test.pkg;\\n\" + \"\\n\" + \"import android.content.Context;\\n\"+ \"import android.os.AsyncTask;\\n\"+ \"import android.support.annotation.WorkerThread;\\n\"+ \"import android.view.View;\\n\"+ \"\\n\"+ \"public class X extends View {\\n\"+ \"    public X(Context context) {\\n\"+ \"        super(context);\\n\"+ \"    }\\n\"+ \"\\n\"+ \"    class MyAsyncTask extends AsyncTask<Long, Void, Boolean> {\\n\"+ \"        @Override\\n\"+ \"        protected Boolean doInBackground(Long... sizes) {\\n\"+ \"            return workedThreadMethod();\\n\"+ \"        }\\n\"+ \"\\n\"+ \"        @Override\\n\"+ \"        protected void onPostExecute(Boolean isEnoughFree) {\\n\"+ \"        }\\n\"+ \"    }\\n\"+ \"\\n\"+ \"    public static boolean workedThreadMethod() {\\n\"+ \"        return true;\\n\"+ \"    }\\n\"+ \"}\"); } "
"public static void drawTransparentString(String text,int xPos,int yPos,int transparency,boolean shadow){   if (transparency > 100 || transparency < 0)   throw new IllegalArgumentException(\"Transparency can not be \" + transparency + \"%\");   int i=0xF | (int)((transparency / 100d) * 255) << 24;   getGlStateManager().pushMatrix();   getGlStateManager().enableBlend();   if (shadow) {     getFontRendererObjHandler().drawStringWithShadow(text,xPos,yPos,i);   }  else {     getFontRendererObjHandler().drawString(text,xPos,yPos,i);   }   getGlStateManager().disableAlpha();   getGlStateManager().disableBlend();   getGlStateManager().popMatrix(); } "
"public void createSets(boolean bEvenly,double dPartOfTheCorpus){   createSets(bEvenly,dPartOfTheCorpus,false); } "
"public static Bitmap blurNatively(Bitmap original,int radius,boolean canReuseInBitmap){   if (radius < 1) {     return null;   }   Bitmap bitmap=buildBitmap(original,canReuseInBitmap);   if (radius == 1) {     return bitmap;   }   blurBitmap(bitmap,radius);   return (bitmap); } "
"public Builder translationY(float translationY){   this.translationY=translationY;   return this; } "
"private BackToTopUtils(Context c){   SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(c);   backValue=sharedPreferences.getString(c.getString(R.string.key_back_to_top),\"all\");   notified=sharedPreferences.getBoolean(c.getString(R.string.key_notified_set_back_to_top),false); } "
"public boolean apply(){   setVisible(true);   return !isCanceled(); } "
"public static <V>int distinctList(List<V> sourceList){   if (isEmpty(sourceList)) {     return 0;   }   int sourceCount=sourceList.size();   int sourceListSize=sourceList.size();   for (int i=0; i < sourceListSize; i++) {     for (int j=(i + 1); j < sourceListSize; j++) {       if (sourceList.get(i).equals(sourceList.get(j))) {         sourceList.remove(j);         sourceListSize=sourceList.size();         j--;       }     }   }   return sourceCount - sourceList.size(); } "
"public static IOFileFilter sizeFileFilter(long threshold){   return new SizeFileFilter(threshold); } "
"public S1Angle angle(){   if (isEmpty()) {     return S1Angle.radians(-1);   }   return S1Angle.radians(2 * Math.asin(Math.sqrt(0.5 * height))); } "
"ConfigurationError(String msg,Exception x){   super(msg);   this.exception=x; } "
"public int max_inlinee_size(){   return soot.PhaseOptions.getInt(options,\"max-inlinee-size\"); } "
"public void addPage(@NonNull List<MODEL> items){   setAutoNotifyDataSetChanged(false);   addAll(items);   setAutoNotifyDataSetChanged(true);   onNewItemsAdded(items.size());   notifyItemRangeInsertedIfNeed(size() - (items.size() + getHeadersCount()),items.size()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_ME_TO_B(String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200466,skilltarget,skillname); } "
"@Override public synchronized void reset() throws IOException {   in.reset();   pos=mark; } "
"public static int colorVariant(int color,float intensity){   float[] hsv=new float[3];   Color.colorToHSV(color,hsv);   hsv[2]*=intensity;   color=Color.HSVToColor(hsv);   return color; } "
"private void appendVal(Constant val){   myPage.setVal(currentPos,val);   currentPos+=Page.size(val); } "
"public byte[] download_file1(String file_id,long file_offset,long download_bytes) throws IOException, MyException {   String[] parts=new String[2];   this.errno=this.split_file_id(file_id,parts);   if (this.errno != 0) {     return null;   }   return this.download_file(parts[0],parts[1],file_offset,download_bytes); } "
"public void init$Children(){   children=new ASTNode[6];   setChild(new List(),1);   setChild(new List(),2);   setChild(new Opt(),3);   setChild(new List(),5); } "
"public void denyAll(Map<PermissionFlag,Message> flags){   generalPermissions.putAll(flags); } "
"public static boolean isIdCardNumber(String str){   return isRegexMatch(str,REGEX_ID_CARD); } "
"public ConcurrentHashSet(){   delegate=new MapMaker().concurrencyLevel(Runtime.getRuntime().availableProcessors()).makeMap(); } "
"protected double homoscedasticTTest(double m1,double m2,double v1,double v2,double n1,double n2) throws MathIllegalArgumentException, MathIllegalStateException {   final double t=FastMath.abs(homoscedasticT(m1,m2,v1,v2,n1,n2));   final double degreesOfFreedom=n1 + n2 - 2;   final TDistribution distribution=new TDistribution(degreesOfFreedom);   return 2.0 * distribution.cumulativeProbability(-t); } "
"private Integer[] splitPointsByDelimiterList(String sStr,char[] lDelimiters){   TreeMap tmDels=new TreeMap();   for (int iCnt=0; iCnt < lDelimiters.length; iCnt++)   tmDels.put(iCnt,new String() + lDelimiters[iCnt]);   return splitPointsByDelimiterList(sStr,tmDels); } "
"public static JSONArray toJSONArray(String string) throws JSONException {   return toJSONArray(new XMLTokener(string)); } "
"private void drawYAxisTicksLog(Graphics2D gc){   gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));   int x0=leftMargin;   int y0=getHeight() - bottomMargin;   int y1=topMargin;   double maxValue=getChartData().getRangeY().get2().doubleValue();   double botY=0;   double topY=computeMaxYAxisValueLogScale(maxValue);   double yFactor;   if (topY > botY)   yFactor=(y0 - y1) / (topY - botY);  else   yFactor=1;   double value=0;   double previousY=-100000;   int mantisse=0;   int exponent=0;   while (value <= maxValue) {     if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;     double yPos=y0 - (value > 0 ? Math.log10(value) : 0) * yFactor;     if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {       String label=\"\" + (long)value;       Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();       previousY=yPos;       int x=leftMargin - (int)(labelSize.getWidth() + 3);       int y=(int)(yPos + labelSize.getHeight() / 2.0);       gc.drawString(label,x,y);       gc.drawLine(x0,(int)Math.round(yPos),x0 + 2,(int)Math.round(yPos));     }     if (mantisse < 9)     mantisse++;  else {       mantisse=1;       exponent++;     }     value=mantisse * Math.pow(10,exponent);   } } "
"public static Crop of(Uri source,Uri destination){   return new Crop(source,destination); } "
"@Override public Object evaluate(final Map<Long,Object> pInputParams) throws RuleEvaluationException {   Object result=null;   Iterator<IRuleCondition> i=conditions.iterator();   while (result == null && i.hasNext()) {     result=i.next().evaluate(pInputParams);   }   if (result == null) {     throw new RuleEvaluationException(\"Evaluation error: none of the rule's conditions are TRUE.\");   }   return result; } "
"private SwipeMode computeInputMode(long time,float x,float y,float dx,float dy){   if (!mStacks[1].isDisplayable())   return SwipeMode.SEND_TO_STACK;   int currentIndex=getTabStackIndex();   if (currentIndex != getViewportParameters().getStackIndexAt(x,y)) {     return SwipeMode.SWITCH_STACK;   }   float relativeX=mLastOnDownX - (x + dx);   float relativeY=mLastOnDownY - (y + dy);   float distanceToDownSqr=dx * dx + dy * dy;   float switchDelta=getOrientation() == Orientation.PORTRAIT ? relativeX : relativeY;   float otherDelta=getOrientation() == Orientation.PORTRAIT ? relativeY : relativeX;   if (distanceToDownSqr > mMinDirectionThreshold * mMinDirectionThreshold && Math.abs(otherDelta) > Math.abs(switchDelta)) {     return SwipeMode.SEND_TO_STACK;   }   if (Math.abs(switchDelta) > mMinDirectionThreshold) {     if ((currentIndex == 0) ^ (switchDelta > 0) ^ (getOrientation() == Orientation.PORTRAIT && LocalizationUtils.isLayoutRtl())) {       return SwipeMode.SEND_TO_STACK;     }   }   if (isDraggingStackInWrongDirection(mLastOnDownX,mLastOnDownY,x,y,dx,dy,getOrientation(),currentIndex)) {     return SwipeMode.SWITCH_STACK;   }   if (time - mLastOnDownTimeStamp > THRESHOLD_TIME_TO_SWITCH_STACK_INPUT_MODE) {     return SwipeMode.SEND_TO_STACK;   }   if (distanceToDownSqr > mMinShortPressThresholdSqr) {     return SwipeMode.SWITCH_STACK;   }   return SwipeMode.NONE; } "
"public static LikesAttributesImpl empty(){   return new LikesAttributesImpl(); } "
"void commit(){   queryExecutor.submit(null); } "
"private void bodyGuard(){   if (race == 1) {     sp(209680,638.04425f,874.08044f,1600.8944f,(byte)28,1000,\"GUARD1\",false);     sp(209680,639.54205f,873.6535f,1600.9027f,(byte)28,1000,\"GUARD2\",false);     sp(209680,640.8667f,873.54987f,1600.9072f,(byte)28,1000,\"GUARD3\",false);     sp(209680,642.6332f,873.41156f,1600.903f,(byte)28,1000,\"GUARD4\",false);     sp(209680,635.89276f,874.06696f,1600.8887f,(byte)28,1000,\"GUARD5\",false);     sp(209680,634.5438f,874.1542f,1600.8843f,(byte)28,1000,\"GUARD6\",false);     sp(209680,633.2586f,874.2546f,1600.8798f,(byte)28,1000,\"GUARD7\",false);     sp(209680,631.68494f,874.3776f,1600.8743f,(byte)28,1000,\"GUARD8\",false);   }   if (race == 2) {     sp(209745,638.04425f,874.08044f,1600.8944f,(byte)28,1000,\"GUARD1\",false);     sp(209745,639.54205f,873.6535f,1600.9027f,(byte)28,1000,\"GUARD2\",false);     sp(209745,640.8667f,873.54987f,1600.9072f,(byte)28,1000,\"GUARD3\",false);     sp(209745,642.6332f,873.41156f,1600.903f,(byte)28,1000,\"GUARD4\",false);     sp(209745,635.89276f,874.06696f,1600.8887f,(byte)28,1000,\"GUARD5\",false);     sp(209745,634.5438f,874.1542f,1600.8843f,(byte)28,1000,\"GUARD6\",false);     sp(209745,633.2586f,874.2546f,1600.8798f,(byte)28,1000,\"GUARD7\",false);     sp(209745,631.68494f,874.3776f,1600.8743f,(byte)28,1000,\"GUARD8\",false);   } } "
"private void refreshProject(){   String projectPath=myProject.getBasePath();   if (projectPath != null) {     VirtualFile rootDir=LocalFileSystem.getInstance().findFileByPath(projectPath);     if (rootDir != null && rootDir.isDirectory()) {       rootDir.refresh(true,true);     }   } } "
"private int peek() throws CompileException, IOException {   if (this.nextChar != -1)   return this.nextChar;   try {     return (this.nextChar=this.internalRead());   }  catch (  UnicodeUnescapeException ex) {     throw new CompileException(ex.getMessage(),this.location(),ex);   } } "
"public InputSource resolveEntity(String arg0,String arg1) throws SAXException, IOException {   return new InputSource(new ByteArrayInputStream(\"\".getBytes())); } "
"public static boolean isJavaLangObject(String signature){   return OBJECT_SIGNATURE.equals(signature); } "
"static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {   try {     Class providerClass=findProviderClass(className,cl,doFallback);     Object instance=providerClass.newInstance();     if (DEBUG)     debugPrintln(\"created new instance of \" + providerClass + \" using ClassLoader: \"+ cl);     return instance;   }  catch (  ClassNotFoundException x) {     throw new ConfigurationError(\"Provider \" + className + \" not found\",x);   } catch (  Exception x) {     throw new ConfigurationError(\"Provider \" + className + \" could not be instantiated: \"+ x,x);   } } "
"public ScopedElementLocatorFactory(WebDriver webDriver,ElementLocatorFactory parentFactory,Field parentField){   this.parentFactory=parentFactory;   this.parentField=parentField;   this.webDriver=webDriver; } "
"public void clear(){   setAccessToken(null); } "
"private boolean[] correctBits(boolean[] rawbits) throws FormatException {   GenericGF gf;   int codewordSize;   if (ddata.getNbLayers() <= 2) {     codewordSize=6;     gf=GenericGF.AZTEC_DATA_6;   }  else   if (ddata.getNbLayers() <= 8) {     codewordSize=8;     gf=GenericGF.AZTEC_DATA_8;   }  else   if (ddata.getNbLayers() <= 22) {     codewordSize=10;     gf=GenericGF.AZTEC_DATA_10;   }  else {     codewordSize=12;     gf=GenericGF.AZTEC_DATA_12;   }   int numDataCodewords=ddata.getNbDatablocks();   int numCodewords=rawbits.length / codewordSize;   if (numCodewords < numDataCodewords) {     throw FormatException.getFormatInstance();   }   int offset=rawbits.length % codewordSize;   int numECCodewords=numCodewords - numDataCodewords;   int[] dataWords=new int[numCodewords];   for (int i=0; i < numCodewords; i++, offset+=codewordSize) {     dataWords[i]=readCode(rawbits,offset,codewordSize);   }   try {     ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);     rsDecoder.decode(dataWords,numECCodewords);   }  catch (  ReedSolomonException ex) {     throw FormatException.getFormatInstance(ex);   }   int mask=(1 << codewordSize) - 1;   int stuffedBits=0;   for (int i=0; i < numDataCodewords; i++) {     int dataWord=dataWords[i];     if (dataWord == 0 || dataWord == mask) {       throw FormatException.getFormatInstance();     }  else     if (dataWord == 1 || dataWord == mask - 1) {       stuffedBits++;     }   }   boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];   int index=0;   for (int i=0; i < numDataCodewords; i++) {     int dataWord=dataWords[i];     if (dataWord == 1 || dataWord == mask - 1) {       Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);       index+=codewordSize - 1;     }  else {       for (int bit=codewordSize - 1; bit >= 0; --bit) {         correctedBits[index++]=(dataWord & (1 << bit)) != 0;       }     }   }   return correctedBits; } "
"private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {   File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);   if (srcFiles == null) {     throw new IOException(\"Failed to list contents of \" + srcDir);   }   if (destDir.exists()) {     if (destDir.isDirectory() == false) {       throw new IOException(\"Destination '\" + destDir + \"' exists but is not a directory\");     }   }  else {     if (!destDir.mkdirs() && !destDir.isDirectory()) {       throw new IOException(\"Destination '\" + destDir + \"' directory cannot be created\");     }   }   if (destDir.canWrite() == false) {     throw new IOException(\"Destination '\" + destDir + \"' cannot be written to\");   }   for (  File srcFile : srcFiles) {     File dstFile=new File(destDir,srcFile.getName());     if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {       if (srcFile.isDirectory()) {         doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);       }  else {         doCopyFile(srcFile,dstFile,preserveFileDate);       }     }   }   if (preserveFileDate) {     destDir.setLastModified(srcDir.lastModified());   } } "
"public static int calculateDeliveryControllerCount(int vmcount){   int itmp=0;   Float f=(vmcount / 2000.00F);   f=(float)Math.ceil(f);   f++;   itmp=f.intValue();   return itmp; } "
"NewProjectDescriptor withMinSdk(@NotNull String minSdk){   myMinSdk=minSdk;   return this; } "
"@NotNull public FindSimilarSet findSimilar(@NotNull String faceListId,@NotNull String imageUrl){   Face singleFace=findSingleFace(imageUrl);   List<FindSimilar> result=faceTaskBuilder.findSimilarFace(singleFace.faceId,Collections.emptyList(),faceListId,20).withResult();   FaceList faceList=faceListBuilder.getFaceList(faceListId).withResult();   return new FindSimilarSet(singleFace,faceList,result); } "
"private void unbindSession(){   SessionFactory sessionFactory=(SessionFactory)getBean(\"sessionFactory\");   SessionHolder sessionHolder=(SessionHolder)TransactionSynchronizationManager.unbindResource(sessionFactory);   SessionFactoryUtils.closeSession(sessionHolder.getSession()); } "
"public boolean isRoot(OCFile file){   return file == null || (file.isFolder() && file.getParentId() == FileDataStorageManager.ROOT_PARENT_ID); } "
"static int rootDistanceX(ConstraintWidget widget){   int rootWidth=widget.getParent().getWidth();   int aX=widget.getX();   int aWidth=widget.getWidth();   return Math.min(aX,rootWidth - (aX + aWidth)); } "
"protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){   return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f; } "
"public int peekChar() throws IOException {   if (DEBUG_BUFFER) {     System.out.print(\"(peekChar: \");     XMLEntityManager.print(fCurrentEntity);     System.out.println();   }   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }   int c=fCurrentEntity.ch[fCurrentEntity.position];   if (DEBUG_BUFFER) {     System.out.print(\")peekChar: \");     XMLEntityManager.print(fCurrentEntity);     if (fCurrentEntity.isExternal()) {       System.out.println(\" -> '\" + (c != '\\r' ? (char)c : '\\n') + \"'\");     }  else {       System.out.println(\" -> '\" + (char)c + \"'\");     }   }   if (fCurrentEntity.isExternal()) {     return c != '\\r' ? c : '\\n';   }  else {     return c;   } } "
"public UsersReportQuery(VkApiClient client,UserActor actor,int userId,UsersReportType type){   super(client,\"users.report\",OkResponse.class);   accessToken(actor.getAccessToken());   userId(userId);   type(type); } "
"public static boolean constantTimeEq(byte[] a,byte[] b){   if (a.length != b.length) {     return false;   }   int result=0;   for (int i=0; i < a.length; i++) {     result|=a[i] ^ b[i];   }   return result == 0; } "
"public AccountBanUserQuery banUser(UserActor actor,int userId){   return new AccountBanUserQuery(getClient(),actor,userId); } "
"public List<SAMValidationError> isValid(final String readName,final long recordNumber){   if (this.isEmpty()) {     return null;   }   List<SAMValidationError> ret=null;   boolean seenRealOperator=false;   for (int i=0; i < cigarElements.size(); ++i) {     final CigarElement element=cigarElements.get(i);     final CigarOperator op=element.getOperator();     if (isClippingOperator(op)) {       if (op == CigarOperator.H) {         if (i != 0 && i != cigarElements.size() - 1) {           if (ret == null)           ret=new ArrayList<>();           ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Hard clipping operator not at start or end of CIGAR\",readName,recordNumber));         }       }  else {         if (op != CigarOperator.S)         throw new IllegalStateException(\"Should never happen: \" + op.name());         if (i == 0 || i == cigarElements.size() - 1) {         }  else         if (i == 1) {           if (cigarElements.size() == 3 && cigarElements.get(2).getOperator() == CigarOperator.H) {           }  else           if (cigarElements.get(0).getOperator() != CigarOperator.H) {             if (ret == null)             ret=new ArrayList<>();             ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Soft clipping CIGAR operator can only be inside of hard clipping operator\",readName,recordNumber));           }         }  else         if (i == cigarElements.size() - 2) {           if (cigarElements.get(cigarElements.size() - 1).getOperator() != CigarOperator.H) {             if (ret == null)             ret=new ArrayList<>();             ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Soft clipping CIGAR operator can only be inside of hard clipping operator\",readName,recordNumber));           }         }  else {           if (ret == null)           ret=new ArrayList<>();           ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Soft clipping CIGAR operator can at start or end of read, or be inside of hard clipping operator\",readName,recordNumber));         }       }     }  else     if (isRealOperator(op)) {       seenRealOperator=true;       if (isInDelOperator(op)) {         for (int j=i + 1; j < cigarElements.size(); ++j) {           final CigarOperator nextOperator=cigarElements.get(j).getOperator();           if ((isRealOperator(nextOperator) && !isInDelOperator(nextOperator)) || isPaddingOperator(nextOperator)) {             break;           }           if (isInDelOperator(nextOperator) && op == nextOperator) {             if (ret == null)             ret=new ArrayList<>();             ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"No M or N operator between pair of \" + op.name() + \" operators in CIGAR\",readName,recordNumber));           }         }       }     }  else     if (isPaddingOperator(op)) {       if (i == 0 || i == cigarElements.size() - 1) {         if (ret == null)         ret=new ArrayList<>();         ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Padding operator not valid at start or end of CIGAR\",readName,recordNumber));       }  else       if (!isRealOperator(cigarElements.get(i - 1).getOperator()) || !isRealOperator(cigarElements.get(i + 1).getOperator())) {         if (ret == null)         ret=new ArrayList<>();         ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"Padding operator not between real operators in CIGAR\",readName,recordNumber));       }     }   }   if (!seenRealOperator) {     if (ret == null)     ret=new ArrayList<>();     ret.add(new SAMValidationError(SAMValidationError.Type.INVALID_CIGAR,\"No real operator (M|I|D|N) in CIGAR\",readName,recordNumber));   }   return ret; } "
"public static int update(String table,String sets,String where,Object[] whereArgs,String db){   StringBuilder sql=new StringBuilder();   sql.append(\"update \").append(table).append(\" set \").append(sets);   if (where != null) {     sql.append(\" where \").append(where);   }   Connection c=null;   PreparedStatement p=null;   ResultSet r=null;   try {     if (X.isEmpty(db)) {       c=getConnection();     }  else {       c=getConnection(db);     }     if (c == null)     return -1;     p=c.prepareStatement(sql.toString());     int order=1;     if (whereArgs != null) {       for (int i=0; i < whereArgs.length; i++) {         Object o=whereArgs[i];         setParameter(p,order++,o);       }     }     return p.executeUpdate();   }  catch (  Exception e) {     if (log.isErrorEnabled())     log.error(sql.toString() + toString(whereArgs),e);   }  finally {     close(c,p,r);   }   return 0; } "
"public static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {   for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {     try {       Method method=clazz.getDeclaredMethod(name,parameterTypes);       if (!method.isAccessible()) {         method.setAccessible(true);       }       return method;     }  catch (    NoSuchMethodException e) {     }   }   throw new NoSuchMethodException(\"Method \" + name + \" with parameters \"+ Arrays.asList(parameterTypes)+ \" not found in \"+ instance.getClass()); } "
"static <T>AnyVal<T> anySome(AnyVal<T> value){   return new AnyOptional<>(value,null); } "
"public BoardGetTopicsQueryWithExtended count(Integer value){   return unsafeParam(\"count\",value); } "
"@Override public boolean isToTop(){   return toTop; } "
"public void compressMyOwnWay(int[] indexes){   List<Integer> list=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);   List<Integer> map=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);   int k=0;   int i=1;   for (; i < indexes.length; i++) {     if (indexes[i] - indexes[i - 1] == 1) {       k++;     }  else {       if (k > 0) {         map.add((list.size()));         list.add(indexes[i - k - 1]);         list.add(indexes[i - 1]);       }  else {         list.add(indexes[i - 1]);       }       k=0;     }   }   if (k > 0) {     map.add((list.size()));     list.add(indexes[i - k - 1]);     list.add(indexes[i - 1]);   }  else {     list.add(indexes[i - 1]);   }   dataAfterComp=convertToArray(list);   if (indexes.length == dataAfterComp.length) {     indexMap=new int[0];   }  else {     indexMap=convertToArray(map);   }   if (dataAfterComp.length == 2 && indexMap.length == 1) {     alreadySorted=true;   } } "
"public static <T>T checkNotNull(T reference){   if (reference == null) {     throw new NullPointerException();   }   return reference; } "
"public PhotosGetQuery photoIds(String... value){   return unsafeParam(\"photo_ids\",value); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public SuperConstructorAccess fullCopy(){   SuperConstructorAccess tree=(SuperConstructorAccess)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public UsersGetFollowersQueryWithFields(VkApiClient client,List<UserField> fields){   super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);   fields(fields); } "
"public static NullSpacePredicate isNull(){   return NULL; } "
"public RectangleArea(ZoneName zoneName,int worldId,float minX,float minY,float maxX,float maxY,float minZ,float maxZ){   super(zoneName,worldId,minZ,maxZ);   this.minX=minX;   this.maxX=maxX;   this.minY=minY;   this.maxY=maxY; } "
"public static String toJson(Map<String,String> map){   if (map == null || map.size() == 0) {     return null;   }   StringBuilder paras=new StringBuilder();   paras.append(\"{\");   Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();   while (ite.hasNext()) {     Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();     paras.append(\"\\\"\").append(entry.getKey()).append(\"\\\":\\\"\").append(entry.getValue()).append(\"\\\"\");     if (ite.hasNext()) {       paras.append(\",\");     }   }   paras.append(\"}\");   return paras.toString(); } "
"private void acquirePrecachingWakeLock(){   if (mPrecachingWakeLock == null) {     PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);     mPrecachingWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);   }   mPrecachingWakeLock.acquire(); } "
"public String toString(cp_info constant_pool[]){   CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);   return ci.convert(); } "
"private boolean addViewFromPreviousActivity(){   if (mCurrentContentView.getChildCount() == 0) {     mPreviousActivity=null;     mPreviousContentView=null;     return false;   }   SwipeBackApplication application=(SwipeBackApplication)mCurrentWindow.getContext().getApplicationContext();   mPreviousActivity=application.getActivityLifecycleHelper().getPreActivity();   if (mPreviousActivity == null) {     mPreviousActivity=null;     mPreviousContentView=null;     return false;   }   ViewGroup previousActivityContainer=getContentView(mPreviousActivity.getWindow());   if (previousActivityContainer == null || previousActivityContainer.getChildCount() == 0) {     mPreviousActivity=null;     mPreviousContentView=null;     return false;   }   mPreviousContentView=(ViewGroup)previousActivityContainer.getChildAt(0);   previousActivityContainer.removeView(mPreviousContentView);   mCurrentContentView.addView(mPreviousContentView,0);   return true; } "
"private void doScroll(int delta){   scrollingOffset+=delta;   int itemHeight=getItemHeight();   int count=scrollingOffset / itemHeight;   int pos=currentItem - count;   int itemCount=viewAdapter.getItemsCount();   int fixPos=scrollingOffset % itemHeight;   if (Math.abs(fixPos) <= itemHeight / 2) {     fixPos=0;   }   if (isCyclic && itemCount > 0) {     if (fixPos > 0) {       pos--;       count++;     }  else     if (fixPos < 0) {       pos++;       count--;     }     while (pos < 0) {       pos+=itemCount;     }     pos%=itemCount;   }  else {     if (pos < 0) {       count=currentItem;       pos=0;     }  else     if (pos >= itemCount) {       count=currentItem - itemCount + 1;       pos=itemCount - 1;     }  else     if (pos > 0 && fixPos > 0) {       pos--;       count++;     }  else     if (pos < itemCount - 1 && fixPos < 0) {       pos++;       count--;     }   }   int offset=scrollingOffset;   if (pos != currentItem) {     setCurrentItem(pos,false);   }  else {     invalidate();   }   scrollingOffset=offset - count * itemHeight;   if (scrollingOffset > getHeight()) {     scrollingOffset=scrollingOffset % getHeight() + getHeight();   } } "
"private static double[] computeMean(double[] px,double[] py){   double[] m=new double[px.length];   for (int i=0; i < px.length; i++)   m[i]=0.5 * (px[i] + py[i]);   return m; } "
"private void finishNode(Node node){   if (node.getNodeType() == Node.ELEMENT_NODE) {     fCurrentElement=node;     fillQName(fElementQName,node);     fSchemaValidator.endElement(fElementQName,null);     fNamespaceContext.popContext();   } } "
"public void loadFromFile(String sFileName) throws FileNotFoundException, IOException {   FileReader frFile=new FileReader(sFileName);   String sText=\"\";   int c=frFile.read();   while (c != -1) {     sText+=c;     c=frFile.read();   }   addText(sText);   frFile.close(); } "
"public void actionPerformed(ActionEvent ev){   File lastOpenFile=ProgramProperties.getFile(MeganProperties.TAXONOMYFILE);   getDir().notifyLockInput();   File file=ChooseFileDialog.chooseFileToOpen(getViewer().getFrame(),lastOpenFile,new TextFileFilter(\"tre\"),new TextFileFilter(\"tre\"),ev,\"Open Tree File\");   getDir().notifyUnlockInput();   if (file != null && file.exists() && file.canRead()) {     ProgramProperties.put(MeganProperties.TAXONOMYFILE,file.getAbsolutePath());     String mappingFile=Basic.replaceFileSuffix(file.getPath(),\".map\");     if (!(new File(mappingFile)).exists()) {       mappingFile=null;     }     StringBuilder buf=new StringBuilder();     buf.append(\"load taxonomyFile='\").append(file.getPath()).append(\"'\");     if (mappingFile != null)     buf.append(\" mapfile='\").append(mappingFile).append(\"';\");  else     buf.append(\";\");     buf.append(\"collapse level=2;\");     execute(buf.toString());   } } "
"@NotNull public ImageOverlayBuilder toClipboard(){   new CopyImagetoClipBoard().copyImage(bufferedImage);   return this; } "
"public void changeAccount(String account) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException { synchronized (lock) {     if (!connected) {       throw new IllegalStateException(\"Client not connected\");     }     if (!authenticated) {       throw new IllegalStateException(\"Client not authenticated\");     }     communication.sendFTPCommand(\"ACCT \" + account);     FTPReply r=communication.readFTPReply();     touchAutoNoopTimer();     if (!r.isSuccessCode()) {       throw new FTPException(r);     }   } } "
"private int measureHeight(int measureSpec){   int result=0;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if (specMode == MeasureSpec.EXACTLY) {     result=specSize;   }  else {     result=(int)(2 * radius + getPaddingTop() + getPaddingBottom() + 1);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return result; } "
"private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {   char c;   int i;   JSONObject jsonobject=null;   String string;   String tagName;   Object token;   token=x.nextToken();   if (token == BANG) {     c=x.next();     if (c == '-') {       if (x.next() == '-') {         x.skipPast(\"-->\");         return false;       }       x.back();     }  else     if (c == '[') {       token=x.nextToken();       if (\"CDATA\".equals(token)) {         if (x.next() == '[') {           string=x.nextCDATA();           if (string.length() > 0) {             context.accumulate(\"content\",string);           }           return false;         }       }       throw x.syntaxError(\"Expected 'CDATA['\");     }     i=1;     do {       token=x.nextMeta();       if (token == null) {         throw x.syntaxError(\"Missing '>' after '<!'.\");       }  else       if (token == LT) {         i+=1;       }  else       if (token == GT) {         i-=1;       }     }  while (i > 0);     return false;   }  else   if (token == QUEST) {     x.skipPast(\"?>\");     return false;   }  else   if (token == SLASH) {     token=x.nextToken();     if (name == null) {       throw x.syntaxError(\"Mismatched close tag \" + token);     }     if (!token.equals(name)) {       throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);     }     if (x.nextToken() != GT) {       throw x.syntaxError(\"Misshaped close tag\");     }     return true;   }  else   if (token instanceof Character) {     throw x.syntaxError(\"Misshaped tag\");   }  else {     tagName=(String)token;     token=null;     jsonobject=new JSONObject();     for (; ; ) {       if (token == null) {         token=x.nextToken();       }       if (token instanceof String) {         string=(String)token;         token=x.nextToken();         if (token == EQ) {           token=x.nextToken();           if (!(token instanceof String)) {             throw x.syntaxError(\"Missing value\");           }           jsonobject.accumulate(string,XML.stringToValue((String)token));           token=null;         }  else {           jsonobject.accumulate(string,\"\");         }       }  else       if (token == SLASH) {         if (x.nextToken() != GT) {           throw x.syntaxError(\"Misshaped tag\");         }         if (jsonobject.length() > 0) {           context.accumulate(tagName,jsonobject);         }  else {           context.accumulate(tagName,\"\");         }         return false;       }  else       if (token == GT) {         for (; ; ) {           token=x.nextContent();           if (token == null) {             if (tagName != null) {               throw x.syntaxError(\"Unclosed tag \" + tagName);             }             return false;           }  else           if (token instanceof String) {             string=(String)token;             if (string.length() > 0) {               jsonobject.accumulate(\"content\",XML.stringToValue(string));             }           }  else           if (token == LT) {             if (parse(x,jsonobject,tagName)) {               if (jsonobject.length() == 0) {                 context.accumulate(tagName,\"\");               }  else               if (jsonobject.length() == 1 && jsonobject.opt(\"content\") != null) {                 context.accumulate(tagName,jsonobject.opt(\"content\"));               }  else {                 context.accumulate(tagName,jsonobject);               }               return false;             }           }         }       }  else {         throw x.syntaxError(\"Misshaped tag\");       }     }   } } "
"public void tabLoadStarted(int id){   StripLayoutTab tab=findTabById(id);   if (tab != null)   tab.loadingStarted(); } "
"public @NonNull ChargeRequest.Builder restrictTendersTo(@NonNull Collection<TenderType> tenderTypes){   nonNull(tenderTypes,\"tenderTypes\");   if (tenderTypes.isEmpty()) {     throw new IllegalArgumentException(\"Please restrict to at least one TenderType.\");   }   this.tenderTypes.clear();   this.tenderTypes.addAll(tenderTypes);   return this; } "
"public void fireEvent(final String instanceId,final String ref,final String type,final Map<String,Object> data,final Map<String,Object> domChanges){   if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref) || TextUtils.isEmpty(type)|| mJSHandler == null) {     return;   }   if (!checkMainThread()) {     throw new WXRuntimeException(\"fireEvent must be called by main thread\");   }   addJSTask(METHOD_FIRE_EVENT,instanceId,ref,type,data,domChanges);   sendMessage(instanceId,WXJSBridgeMsgType.CALL_JS_BATCH); } "
"public void exp(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){   double[] function=new double[1 + order];   Arrays.fill(function,FastMath.exp(operand[operandOffset]));   compose(operand,operandOffset,function,result,resultOffset); } "
"public boolean isIgnoreUnknownTypes(){   return m_ignoreUnknownTypes; } "
"private void processAuthentication(RequestContext context,Runnable callback){   DockerImage image=DockerImage.fromImageName(context.containerDescription.image);   if (image.getHost() == null) {     callback.run();     return;   }   QueryTask registryQuery=QueryUtil.buildQuery(RegistryState.class,false);   if (context.containerDescription.tenantLinks != null) {     registryQuery.querySpec.query.addBooleanClause(QueryUtil.addTenantGroupAndUserClause(context.containerDescription.tenantLinks));   }   registryQuery.querySpec.query.addBooleanClause(createAnyPropertyClause(String.format(\"*://%s\",image.getHost()),RegistryState.FIELD_NAME_ADDRESS));   List<String> registryLinks=new ArrayList<>();   new ServiceDocumentQuery<ContainerState>(getHost(),ContainerState.class).query(registryQuery,null); } "
"public NBodyForce(float gravConstant,float minDistance,float theta){   params=new float[]{gravConstant,minDistance,theta};   minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT,DEFAULT_MIN_DISTANCE,DEFAULT_MIN_THETA};   maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT,DEFAULT_MAX_DISTANCE,DEFAULT_MAX_THETA};   root=factory.getQuadTreeNode(); } "
"public static ActivityAssigner instance(Context context){   ThreadUtils.assertOnUiThread();   if (sInstance == null) {     sInstance=new ActivityAssigner(context);   }   return sInstance; } "
"private CountingThreadPoolExecutor createExecutor(int numThreads){   return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>()); } "
"public FriendsGetRequestsQuery suggested(Boolean value){   return unsafeParam(\"suggested\",value); } "
"public boolean isSPD(){   return isspd; } "
"public SimplexSolver(final double epsilon,final int maxUlps,final double cutOff){   this.epsilon=epsilon;   this.maxUlps=maxUlps;   this.cutOff=cutOff;   this.pivotSelection=PivotSelectionRule.DANTZIG; } "
"public void read(IInputReader reader) throws IOException {   final int magicNumber=reader.readInt();   if (magicNumber != RMA6File.MAGIC_NUMBER) {     throw new IOException(\"Not an RMA file\");   }   final int version=reader.readInt();   if (version != RMA6File.VERSION) {     throw new IOException(\"Not an RMA \" + RMA6File.VERSION + \" file\");   }   int minorVersion=reader.readInt();   creator=reader.readString();   creationDate=reader.readLong();   blastMode=BlastMode.valueOf(reader.readString());   pairedReads=(reader.read() == 1);   matchClassNames=new String[reader.readInt()];   for (int i=0; i < matchClassNames.length; i++) {     matchClassNames[i]=reader.readString();   } } "
"private static void resolveBinaryExpression(BinaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){   PsiElement objOperation=objSubjectExpression.getOperation();   if (null == objOperation) {     return;   }   IElementType objOperationType=objOperation.getNode().getElementType();   if (objOperationType == PhpTokenTypes.opCONCAT) {     objTypesSet.add(Types.strString);     return;   }  else   if (objOperationType == PhpTokenTypes.opAND || objOperationType == PhpTokenTypes.opOR) {     objTypesSet.add(Types.strBoolean);     return;   }   storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet); } "
"@Override public boolean onTouchEvent(MotionEvent event){ switch (event.getAction()) { case MotionEvent.ACTION_DOWN:     pressPaint.setAlpha(pressAlpha);   invalidate(); break; case MotionEvent.ACTION_UP: pressPaint.setAlpha(0); invalidate(); break; case MotionEvent.ACTION_MOVE: break; default : pressPaint.setAlpha(0); invalidate(); break; } return super.onTouchEvent(event); } "
"public static void main(String[] args){   RenderingImagesOnBodies simulation=new RenderingImagesOnBodies();   simulation.run(); } "
"@Override public String toString(){   String json=gson.toJson(this);   log.debug(json);   return json; } "
"@Override public double value(double z){   return evaluateInternal(x,y,z); } "
"public FriendsGetRequestsQuery offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public void pausePlayingAudio(String id){   AudioPlayer audio=this.players.get(id);   if (audio != null) {     audio.pausePlaying();   } } "
"public static String whichDoctypeSystem(Document doc){   DocumentType doctype;   doctype=doc.getDoctype();   if (doctype != null) {     try {       return doctype.getSystemId();     }  catch (    Error except) {     }   }   if (doc instanceof HTMLDocument)   return DTD.XHTMLSystemId;   return null; } "
"public static float calculateWidth(float top,float bottom,float targetAspectRatio){   final float height=bottom - top;   final float width=targetAspectRatio * height;   return width; } "
"@Override public final void cook(@Nullable String[] optionalFileNames,Reader[] readers) throws CompileException, IOException {   Scanner[] scanners=new Scanner[readers.length];   for (int i=0; i < readers.length; ++i) {     scanners[i]=new Scanner(optionalFileNames == null ? null : optionalFileNames[i],readers[i]);   }   this.cook(scanners); } "
"public void draw(Node v,boolean selected){   final NodeView nv=viewer.getNV(v);   final NodeData data=(NodeData)v.getData();   if (selected)   hilite(v);   if ((!drawLeavesOnly || v.getOutDegree() == 0) && scaleBy != ScaleBy.None && nv.getShape() != NodeView.NONE_NODE) { switch (style) { case HeatMap:       drawAsHeatMap(v,nv,data);     break; case BarChart:   drawAsBarChart(v,nv,data); break; case PieChart: drawAsCircle(v,nv,data); drawAsPieChart(v,nv,data); break; case CoxComb: drawAsCoxComb(v,nv,data); break; default : case Circle: drawAsCircle(v,nv,data); break; } }  else { nv.setShape(NodeView.NONE_NODE); } } "
"public void paint(Graphics gc0){   Graphics2D gc=(Graphics2D)gc0;   SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);   if (sgc == null) {     super.paint(gc);     gc.setColor(Color.WHITE);     gc.fill(getVisibleRect());   }   draw(gc,null); } "
"protected BoardRestoreCommentQuery topicId(int value){   return unsafeParam(\"topic_id\",value); } "
"private static int findInsertionIndex(final int[] keys,final byte[] states,final int key,final int mask){   final int hash=hashOf(key);   int index=hash & mask;   if (states[index] == FREE) {     return index;   }  else   if (states[index] == FULL && keys[index] == key) {     return changeIndexSign(index);   }   int perturb=perturb(hash);   int j=index;   if (states[index] == FULL) {     while (true) {       j=probe(perturb,j);       index=j & mask;       perturb>>=PERTURB_SHIFT;       if (states[index] != FULL || keys[index] == key) {         break;       }     }   }   if (states[index] == FREE) {     return index;   }  else   if (states[index] == FULL) {     return changeIndexSign(index);   }   final int firstRemoved=index;   while (true) {     j=probe(perturb,j);     index=j & mask;     if (states[index] == FREE) {       return firstRemoved;     }  else     if (states[index] == FULL && keys[index] == key) {       return changeIndexSign(index);     }     perturb>>=PERTURB_SHIFT;   } } "
"public Tree(final Material type,TreeSpecies species){   this(type,species,DEFAULT_DIRECTION); } "
"public void addRepositoryListener(ISVNListener listener){   repositoryListeners.add(listener); } "
"public SampleAttributeTable mergeSamples(Collection<String> samples,String newName){   SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();   Map<String,Object> attribute2value=new HashMap<>();   for (  String attribute : getAttributeSet()) {     boolean valueMismatch=false;     Object previousValue=null;     for (    String sample : samples) {       Object value=table.get(sample,attribute);       if (value != null) {         if (previousValue == null)         previousValue=value;  else         if (!value.equals(previousValue)) {           valueMismatch=true;           break;         }       }     }     if (!valueMismatch && previousValue != null) {       attribute2value.put(attribute,previousValue);     }   }   sampleAttributeTable.addSample(newName,attribute2value,true,true);   return sampleAttributeTable; } "
"public static void validateModuleName(String name) throws SystemConfigException {   char[] nameChars=name.toCharArray();   if (nameChars.length < 2) {     LOG.error(INVALID_MODULE_CONFIGURATION.logFormat(MODULE_NAME_IS_TOO_SHORT,name));     throw new SystemConfigException(INVALID_MODULE_CONFIGURATION.format(MODULE_NAME_IS_TOO_SHORT,name));   }   List<Character> invalidCharacters=new ArrayList<>(name.length());   if (!Character.isJavaIdentifierStart(name.charAt(0))) {     invalidCharacters.add(name.charAt(0));   }   name.substring(1).chars().mapToObj(null).filter(null).forEach(null);   if (!invalidCharacters.isEmpty()) {     String message=String.format(ILLEGAL_CHARACTER_IN_MODULE_NAME,invalidCharacters);     LOG.error(INVALID_MODULE_NAME.logFormat(name,message));     throw new SystemConfigException(INVALID_MODULE_NAME.logFormat(name,message));   } } "
"protected void loader() throws IOException {   setupFeatureSet();   setupUtteranceProcessors();   setupFeatureProcessors(); } "
"@Override public void syncStateChanged(){   boolean wasSyncInitialized=mIsBackendInitialized;   boolean wasPassphraseRequired=mIsPassphraseRequired;   mIsBackendInitialized=mProfileSyncService.isBackendInitialized();   mIsPassphraseRequired=mIsBackendInitialized && mProfileSyncService.isPassphraseRequiredForDecryption();   if (mIsBackendInitialized != wasSyncInitialized || mIsPassphraseRequired != wasPassphraseRequired) {     updateSyncStateFromSwitch();   } } "
"public boolean finish(){   if (!started)   return false;   boolean ok=true;   started=false;   try {     out.write(0x3b);     out.flush();     if (closeStream) {       out.close();     }   }  catch (  IOException e) {     ok=false;   }   return ok; } "
"public synchronized boolean unexport(boolean force){   if (!mainExporter.unexport(force)) {     return false;   }   bootExporter.unexport(true);   if (ref != null) {     ref.enqueue();   }   return true; } "
"protected GroupsDeleteLinkQuery linkId(int value){   return unsafeParam(\"link_id\",value); } "
"public CriteriaHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){   this.sessionFactory=sessionFactory;   return this; } "
"public void yypushback(int number){   if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);   zzMarkedPos-=number; } "
"public static void checkState(boolean expression,Object errorMessage){   if (!expression) {     throw new IllegalStateException(String.valueOf(errorMessage));   } } "
"protected PhotosGetQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public static long readLong(){   return scanner.nextLong(); } "
"private void log(final Level level,final Object o,final Throwable t){   if (logger.isEnabledFor(level)) {     NDC.push(ndcPush);     logger.log(level,o,t);     NDC.pop();   } } "
"protected void addToken(Tokens tokens,int token) throws XNIException {   tokens.addToken(token); } "
"public void usage(){   consoleWriter.a(\"Usage: \").a(PROGRAM_NAME).fg(Ansi.Color.CYAN).a(\" <command>\").reset().a(\" [options]\").println(2);   consoleWriter.a(\"Commands:\").println();   for (  Command command : commands.values()) {     if (!command.getName().isEmpty()) {       String paddedCommandName=Strings.padStart(command.getName(),20,' ');       consoleWriter.fg(Ansi.Color.CYAN).a(paddedCommandName).reset().a(\" \").a(command.getDescription()).println();     }   }   consoleWriter.newLine().a(\"Get help for a specific command: mojito <command> -h\").println(2); } "
"public GroupsEditQuery marketWiki(Integer value){   return unsafeParam(\"market_wiki\",value); } "
"@Override public void onPassphraseTypeSelected(PassphraseType type){   if (!mProfileSyncService.isBackendInitialized()) {     return;   }   boolean isAllDataEncrypted=mProfileSyncService.isEncryptEverythingEnabled();   boolean isUsingSecondaryPassphrase=mProfileSyncService.isUsingSecondaryPassphrase();   assert !isAllDataEncrypted;   assert !isUsingSecondaryPassphrase;   displayCustomPassphraseDialog(); } "
"public static Map<String,List<DataFileFooter>> createDataFileFooterMappingForSegments(List<TableBlockInfo> tableBlockInfoList) throws IndexBuilderException {   Map<String,List<DataFileFooter>> segmentBlockInfoMapping=new HashMap<>();   for (  TableBlockInfo blockInfo : tableBlockInfoList) {     List<DataFileFooter> eachSegmentBlocks=new ArrayList<>();     String segId=blockInfo.getSegmentId();     DataFileFooter dataFileMatadata=null;     List<DataFileFooter> metadataList=segmentBlockInfoMapping.get(segId);     try {       dataFileMatadata=CarbonUtil.readMetadatFile(blockInfo.getFilePath(),blockInfo.getBlockOffset(),blockInfo.getBlockLength());     }  catch (    CarbonUtilException e) {       throw new IndexBuilderException(e);     }     if (null == metadataList) {       eachSegmentBlocks.add(dataFileMatadata);       segmentBlockInfoMapping.put(segId,eachSegmentBlocks);     }  else {       metadataList.add(dataFileMatadata);     }   }   return segmentBlockInfoMapping; } "
"@Override public void cycleState(){   if (isEditable(indexOf(this))) {     mySource.setEnabled(!mySource.isEnabled());   } } "
"public void createBmxDppParameterFiles(){   JAXBSource source=dppToJaxbSource(dpp);   bmxDppParameters=new HashMap<>();   bmxDppParameters.put(DMFramework.UKDPP,createBmxFrameworkParameterFile(source,DMFramework.UKDPP,workingDir));   bmxDppParameters.put(DMFramework.AS11CORE,createBmxFrameworkParameterFile(source,DMFramework.AS11CORE,workingDir));   bmxDppParameters.put(DMFramework.AS11Segmentation,createBmxFrameworkParameterFile(source,DMFramework.AS11Segmentation,workingDir)); } "
"public boolean is(String k,String value){   String v=get(k);   return v == null && value == null || v != null && v.equals(value); } "
"public static List<Grid> fromHtml(String html,String title) throws Exception {   if (html == null || html.trim().isEmpty()) {     return null;   }   List<Grid> grids=new ArrayList<>();   Parser parser=Parser.createParser(html,\"UTF-8\");   Node[] tables=parser.extractAllNodesThatMatch(new TagNameFilter(\"table\")).toNodeArray();   for (  Node t : tables) {     Grid grid=new ListGrid();     grid.setTitle(title);     TableTag table=(TableTag)t;     TableRow[] rows=table.getRows();     Integer firstColumnCount=null;     for (    TableRow row : rows) {       if (getColumnCount(row) == 0) {         log.warn(\"Ignoring row with no columns\");         continue;       }       Node[] cells=row.getChildren().extractAllNodesThatMatch(HTML_ROW_FILTER).toNodeArray();       if (firstColumnCount == null) {         firstColumnCount=getColumnCount(row);         for (        Node c : cells) {           TagNode cell=(TagNode)c;           grid.addHeader(new GridHeader(getValue(cell),false,false));           Integer colSpan=MathUtils.parseInt(cell.getAttribute(\"colspan\"));           if (colSpan != null && colSpan > 1) {             grid.addEmptyHeaders((colSpan - 1));           }         }       }  else {         if (firstColumnCount != getColumnCount(row)) {           log.warn(\"Ignoring row which has \" + row.getColumnCount() + \" columns since table has \"+ firstColumnCount+ \" columns\");           continue;         }         grid.addRow();         for (        Node c : cells) {           TagNode cell=(TagNode)c;           grid.addValue(getValue(cell));           Integer colSpan=MathUtils.parseInt(cell.getAttribute(\"colspan\"));           if (colSpan != null && colSpan > 1) {             grid.addEmptyValues((colSpan - 1));           }         }       }     }     grids.add(grid);   }   return grids; } "
"private boolean readLine(InputStream in,StringBuffer buf) throws IOException {   while (true) {     int c=in.read();     if (c < 0)     return (buf.length() > 0);     if (c == '\\r') {       in.mark(1);       c=in.read();       if (c != '\\n')       in.reset();       return (true);     }     if (c == '\\n')     return (true);     buf.append((char)c);   } } "
"public Set<Atomic> selectAtoms(){   Set<Atomic> atoms=new HashSet<>(atomSet).stream().filter(null).filter(null).collect(Collectors.toSet());   if (atoms.size() == 1)   return atoms;   Set<Atomic> selectedAtoms=atoms.stream().filter(null).collect(Collectors.toSet());   if (selectedAtoms.isEmpty())   throw new IllegalStateException(ErrorMessage.NO_ATOMS_SELECTED.getMessage(this.toString()));   return selectedAtoms; } "
"@Override public Object analyse(double[] frame){   int expectedFrameLength=0;   for (int i=0; i < periodLengths.length; i++) {     expectedFrameLength+=periodLengths[i];   }   if (frame.length != expectedFrameLength)   System.err.println(\"Expected frame of length \" + expectedFrameLength + \"(\"+ periodLengths.length+ \" periods)\"+ \", got \"+ frame.length);   return LpcAnalyser.calcLPC(frame,lpOrder); } "
"private static <T>String flagDefaultValue(FlagField<T> field){   return field.valueString(field.defaultValue()); } "
"public static TransferTagValueImpl createTransferTagValue(final TagWithAlarms tagWithAlarms){   Tag tag=tagWithAlarms.getTag();   TransferTagValueImpl tagValue=null;   if (tag != null) {     tagValue=new TransferTagValueImpl(tag.getId(),tag.getValue(),tag.getValueDescription(),(DataTagQualityImpl)tag.getDataTagQuality(),getTagMode(tag),tag.getTimestamp(),tag instanceof DataTag ? ((DataTag)tag).getDaqTimestamp() : null,tag.getCacheTimestamp(),tag.getDescription());     String dataType=isKnownClass(tag.getDataType()) ? getType(tag.getDataType()).getName() : tag.getDataType();     tagValue.setValueClassName(dataType);     addAlarmValues(tagValue,tagWithAlarms.getAlarms());     tagValue.setSimulated(tag.isSimulated());   }   return tagValue; } "
"private void BrowseSummaryDirBtnActionPerformed(java.awt.event.ActionEvent evt){   JFileChooser fc=new JFileChooser();   fc.setCurrentDirectory((SummariesRootDirEdt.getText().length() == 0) ? new java.io.File(\".\") : new java.io.File(SummariesRootDirEdt.getText()));   fc.setSelectedFile(fc.getCurrentDirectory());   fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);   int iRet=fc.showOpenDialog(this);   if (iRet == JFileChooser.APPROVE_OPTION) {     SummariesRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());   } } "
"public void terminate() throws RemoteException {   Hashtable<String,IJSpace> tmpDepot=(Hashtable<String,IJSpace>)_registeredSpaces.clone();   for (  String spaceName : tmpDepot.keySet())   unregister(spaceName);   if (_logger.isLoggable(Level.FINE))   _logger.fine(\"All spaces unregistered successfully\"); } "
"public boolean isAlwaysNonNullBefore(Unit s,Immediate i){   return getFlowBefore(s).get(i) == NON_NULL; } "
"private Response requireJSON(IHTTPSession session){   final Map<String,String> headers=session.getHeaders();   if (!APPLICATION_JSON.equals(headers.get(CONTENT_TYPE))) {     return newFixedLengthResponse(Response.Status.NOT_ACCEPTABLE,MIME_PLAINTEXT,\"Set content-type to application/json\");   }  else {     return null;   } } "
"public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_LOW_GUILD_LEVEL(String value1,String value0){   return new SM_SYSTEM_MESSAGE(1400906,value1,value0); } "
"protected PhotosReportCommentQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"public boolean isDataLayer(){   return MapView.DATA_LAYERS.contains(layer); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_ATTACK(String value0,int num2,String value1){   return new SM_SYSTEM_MESSAGE(1200002,value0,num2,value1); } "
"@Override public WebElement findElementByLinkText(String linkText){   return ((FindsByLinkText)super.getWrappedDriver()).findElementByLinkText(linkText); } "
"public AccessPath mayAlias(AccessPath taintedAP,AccessPath referencedAP){   if (taintedAP.equals(referencedAP))   return taintedAP;   if (taintedAP.isInstanceFieldRef() || taintedAP.isLocal()) {     if (taintedAP.getPlainValue() != referencedAP.getPlainValue())     return null;     if (referencedAP.getFieldCount() == 0)     return taintedAP;     if (!referencedAP.isInstanceFieldRef())     return null;   }   if (taintedAP.isStaticFieldRef())   if (!referencedAP.isStaticFieldRef())   return null;   return getReferencedAPBase(taintedAP,referencedAP.getFields()); } "
"public ColorPanel(Color initialColor){   this(initialColor,true); } "
"public void recordSplashscreenBackgroundColor(int type){   assert !mCommitted;   assert type >= 0 && type < SPLASHSCREEN_COLOR_STATUS_MAX;   mSplashScreenBackgroundColor=type; } "
"public <T>T until(ExpectedCondition<T> condition,long delay){   webDriver.manage().timeouts().implicitlyWait(IMPLICITLY_WAIT_TIME,TimeUnit.SECONDS);   final T result=new WebDriverWait(webDriver,timeOutInSeconds,delay * 1000L).until(condition);   webDriver.manage().timeouts().implicitlyWait(defaultTimeout,TimeUnit.SECONDS);   return result; } "
"public Disk(String name,int used,int free){   this.name=name;   this.free=free;   this.used=used; } "
"public static String toString(URL url) throws IOException {   return toString(url,Charset.defaultCharset()); } "
"public static <T>T createPojoFromString(String response,Class<T> pojo){   GsonBuilder gsonBuilder=new GsonBuilder();   gsonBuilder.serializeNulls();   return gsonBuilder.create().fromJson(response,pojo); } "
"public SemiVariance(final boolean corrected,final Direction direction){   this.biasCorrected=corrected;   this.varianceDirection=direction; } "
"public static boolean isValidGetId(DispatchContext ctx,Map<String,?> context){   String currentUserLoginId=null;   GenericValue userLogin=(GenericValue)context.get(\"userLogin\");   if (userLogin == null) {     currentUserLoginId=DEFAULT_UID;   }  else {     currentUserLoginId=userLogin.getString(\"userLoginId\");   }   String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);   if (!currentUserLoginId.equals(DEFAULT_UID) && !currentUserLoginId.equals(userLoginIdArg) && userLoginIdArg != null) {     Security security=ctx.getSecurity();     return security.hasPermission(ADMIN_PERMISSION,userLogin);   }   return true; } "
"@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){   dateTimeUnit.setMonth(1);   dateTimeUnit.setDay(1);   List<Period> periods=Lists.newArrayList();   int year=dateTimeUnit.getYear();   Calendar calendar=getCalendar();   while (year == dateTimeUnit.getYear()) {     periods.add(createPeriod(dateTimeUnit,null));     dateTimeUnit=calendar.plusDays(dateTimeUnit,1);   }   return periods; } "
"@Override public void startEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {   super.startEntity(name,identifier,encoding,augs);   boolean dtdEntity=name.equals(\"[dtd]\");   if (dtdEntity) {     if (fDTDHandler != null && !fStartDTDCalled) {       fDTDHandler.startDTD(fEntityScanner,null);     }     if (fDTDHandler != null) {       fDTDHandler.startExternalSubset(identifier,null);     }     fEntityManager.startExternalSubset();     fExtEntityDepth++;   }  else   if (name.charAt(0) == '%') {     pushPEStack(fMarkUpDepth,fReportEntity);     if (fEntityScanner.isExternal()) {       fExtEntityDepth++;     }   }   if (fDTDHandler != null && !dtdEntity && fReportEntity) {     fDTDHandler.startParameterEntity(name,identifier,encoding,augs);   } } "
"public static void clearAll(){   if (sManagers == null)   return;   for (int i=0; i < sManagers.size(); ++i) {     MediaNotificationManager manager=sManagers.valueAt(i);     manager.clearNotification();   }   sManagers.clear(); } "
"@BeforeClass public static void init() throws Exception {   testBrokerService.createAndStartBroker(); } "
"public static boolean isConfigured(){   return DB.isConfigured(); } "
"public static IntBuffer createIntBuffer(IntBuffer buf,int size){   if (buf != null && buf.limit() == size) {     buf.rewind();     return buf;   }   buf=createIntBuffer(size);   return buf; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_CANT_BE_MENTOR(String worldname0){   return new SM_SYSTEM_MESSAGE(1400769,worldname0); } "
"public void disableCrashUploading(){   mCrashUploadingEnabled=false; } "
"public float[] generateTransformedValuesBarChart(IBarDataSet data,int dataSetIndex,BarData bd,float phaseY){   float[] valuePoints=new float[data.getEntryCount() * 2];   int setCount=bd.getDataSetCount();   float space=bd.getGroupSpace();   for (int j=0; j < valuePoints.length; j+=2) {     Entry e=data.getEntryForIndex(j / 2);     int i=e.getXIndex();     float x=e.getXIndex() + i * (setCount - 1) + dataSetIndex + space * i + space / 2f;     float y=e.getVal();     valuePoints[j]=x;     valuePoints[j + 1]=y * phaseY;   }   getValueToPixelMatrix().mapPoints(valuePoints);   return valuePoints; } "
"public void unify(Atomic parentAtom){   unifyViaAtom(parentAtom);   propagateConstraints(parentAtom); } "
"public static StorableActivityFence during(@ActivityType int... activityTypes){   return new StorableActivityFence(activityTypes,DURING_TYPE); } "
"private void updateFooterViewSize(int dy,XRecyclerView view){   if (dy > 0) {     if (view.mFooterView.getLayoutParams().height < view.mFooterViewHeight) {       view.mFooterView.getLayoutParams().height+=dy / 2;     }  else {       view.mFooterView.getLayoutParams().height+=dy / 4;     }   }   view.mFooterView.setVisibility(VISIBLE);   view.mFooterView.requestLayout(); } "
"public Rect addImage(BufferedImage image,String name){   Rect rect=processImage(image,name);   if (rect == null) {     if (!settings.silent)     System.out.println(\"Ignoring blank input image: \" + name);     return null;   }   if (settings.alias) {     String crc=hash(rect.getImage(this));     Rect existing=crcs.get(crc);     if (existing != null) {       if (!settings.silent)       System.out.println(rect.name + \" (alias of \" + existing.name+ \")\");       existing.aliases.add(new Alias(rect));       return null;     }     crcs.put(crc,rect);   }   rects.add(rect);   return rect; } "
"@Override public Relation putRolePlayer(RoleType roleType,Instance instance){   if (roleType == null) {     throw new IllegalArgumentException(ErrorMessage.ROLE_IS_NULL.getMessage(instance));   }   if (mindmapsGraph.isBatchLoadingEnabled()) {     return addNewRolePlayer(null,roleType,instance);   }  else {     Map<RoleType,Instance> roleMap=rolePlayers();     roleMap.put(roleType,instance);     Relation otherRelation=mindmapsGraph.getRelation(type(),roleMap);     if (otherRelation == null) {       return addNewRolePlayer(roleMap,roleType,instance);     }     if (!this.equals(otherRelation)) {       throw new ConceptException(ErrorMessage.RELATION_EXISTS.getMessage(otherRelation));     }  else {       return this;     }   } } "
"public synchronized void notifyNonActiveIfNeedTo(){   _status=INITIAL_SCAN_NOTACTIVE;   if (_needNotifyTermination) {     this.notify();   } } "
"protected void patch_addContext(Patch patch,String text){   if (text.length() == 0) {     return;   }   String pattern=text.substring(patch.start2,patch.start2 + patch.length1);   int padding=0;   while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {     padding+=Patch_Margin;     pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));   }   padding+=Patch_Margin;   String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);   if (prefix.length() != 0) {     patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));   }   String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));   if (suffix.length() != 0) {     patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));   }   patch.start1-=prefix.length();   patch.start2-=prefix.length();   patch.length1+=prefix.length() + suffix.length();   patch.length2+=prefix.length() + suffix.length(); } "
"private static void paintConstraint(NlGraphics graphics,ConstraintType type,NlComponent sourceNode,Rectangle sourceBounds,NlComponent targetNode,Rectangle targetBounds,@Nullable Set<DependencyGraph.Constraint> allConstraints,boolean highlightTargetEdge,TextDirection textDirection){   SegmentType sourceSegmentTypeX=type.sourceSegmentTypeX;   SegmentType sourceSegmentTypeY=type.sourceSegmentTypeY;   SegmentType targetSegmentTypeX=type.targetSegmentTypeX;   SegmentType targetSegmentTypeY=type.targetSegmentTypeY;   if (sourceSegmentTypeX == SegmentType.CENTER_VERTICAL && targetSegmentTypeX == SegmentType.CENTER_VERTICAL) {     paintHorizontalCenterConstraint(graphics,sourceBounds,targetBounds);     return;   }   if (sourceSegmentTypeY == SegmentType.CENTER_HORIZONTAL && targetSegmentTypeY == SegmentType.CENTER_HORIZONTAL) {     paintVerticalCenterConstraint(graphics,sourceBounds,targetBounds);     return;   }   if (allConstraints != null && (type == ConstraintType.LAYOUT_ABOVE || type == ConstraintType.LAYOUT_BELOW || type == ConstraintType.LAYOUT_LEFT_OF || type == ConstraintType.LAYOUT_RIGHT_OF)) {     if (paintCornerConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,allConstraints,textDirection)) {       return;     }   }   if (sourceSegmentTypeX == SegmentType.UNKNOWN) {     paintVerticalConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,highlightTargetEdge);     return;   }   if (sourceSegmentTypeY == SegmentType.UNKNOWN) {     paintHorizontalConstraint(graphics,type,sourceNode,sourceBounds,targetNode,targetBounds,highlightTargetEdge,textDirection);     return;   }   assert false; } "
"@SuppressWarnings(\"unchecked\") public ValueStore branch(long run){   V o=get();   if (o != null)   backedStore.put(new SequenceStateKey(key.topic,key.partition,run),o);   return new ValueStore(this.key.topic,this.key.partition,run,this.backedStore); } "
"void validate(DynamicAABBTreeNode node){   if (node == null) {     return;   }   if (node == this.root) {     assert (node.parent == null);   }   DynamicAABBTreeNode left=node.left;   DynamicAABBTreeNode right=node.right;   if (node.isLeaf()) {     @SuppressWarnings(\"unchecked\") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)node;     assert (node.left == null);     assert (node.right == null);     assert (node.height == 0);     assert (leaf.collidable != null);     return;   }   assert (node.aabb.contains(left.aabb));   if (right != null)   assert (node.aabb.contains(right.aabb));   assert (left.parent == node);   assert (right.parent == node);   validate(left);   validate(right); } "
"@Override public void startExecuting(){   this.theEntityCreature.getNavigator().tryMoveToXYZ(this.randPosX,this.randPosY,this.randPosZ,this.speed); } "
"public WallGetQueryWithExtended(VkApiClient client,UserActor actor){   super(client,\"wall.get\",GetExtendedResponse.class);   accessToken(actor.getAccessToken());   extended(true); } "
"public void init$Children(){   children=new ASTNode[5];   setChild(new Opt(),1);   setChild(new List(),2);   setChild(new List(),3);   setChild(new List(),4); } "
"static String toString(Object[] a){   if (a.length == 0) {     return \"{}\";   }  else   if (a.length == 1) {     String s;     if (a[0] instanceof Class) {       s=((Class)a[0]).getName();     }  else {       s=a[0].toString();     }     return \"{\" + s + \"}\";   }   String[] as=new String[a.length];   int len=a.length * 2;   if (a[0] instanceof Class) {     for (int i=a.length; --i >= 0; ) {       String val=((Class)a[i]).getName();       as[i]=val;       len+=val.length();     }   }  else {     for (int i=a.length; --i >= 0; ) {       String val=a[i].toString();       as[i]=val;       len+=val.length();     }   }   Arrays.sort(as);   StringBuffer buf=new StringBuffer(len);   buf.append(\"{\");   for (int i=0; i < as.length; i++) {     if (i > 0) {       buf.append(\", \");     }     buf.append(as[i]);   }   buf.append(\"}\");   return buf.toString(); } "
"public static double distFrom(Point start,Point end){   return distFrom(start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude()); } "
"public MessagesSendQuery randomId(Integer value){   return unsafeParam(\"random_id\",value); } "
"public OrdersChangeStateQuery changeState(UserActor actor,int orderId,OrdersChangeStateAction action){   return new OrdersChangeStateQuery(getClient(),actor,orderId,action); } "
"public IntIterator columnRows(int col){   return new ColumnRowIterator(rows(),col); } "
"public static String makeCompositeParam(String prefix,String suffix){   return prefix + COMPOSITE_DELIMITER + suffix; } "
"public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){   int index=firstItem;   for (int i=0; i < layout.getChildCount(); ) {     if (!range.contains(index)) {       recycleView(layout.getChildAt(i),index);       layout.removeViewAt(i);       if (i == 0) {         firstItem++;       }     }  else {       i++;     }     index++;   }   return firstItem; } "
"public static ContextSet fromMap(Map<String,String> map){   if (map == null) {     throw new NullPointerException(\"map\");   }   MutableContextSet set=new MutableContextSet();   set.addAll(map);   return set.immutableCopy(); } "
"public T key(){   return k; } "
"void submit(ProcessAndDisplayImageTask task){   initExecutorsIfNeed();   taskExecutorForCachedImages.execute(task); } "
"private ConfigurationReportConverter(){ } "
"public static PsiElement lastElementInSubtree(PsiElement element){   PsiElement lastChild;   while ((lastChild=element.getLastChild()) != null) {     element=lastChild;   }   return element; } "
"public AdaptableList(int size){   children=new ArrayList(size); } "
"public void write(int a) throws IOException {   outs.write(a);   position++; } "
"public PhotosDeleteCommentQuery ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"public static final int daysBetween(Date early,Date late){   Calendar c1=Calendar.getInstance();   Calendar c2=Calendar.getInstance();   c1.setTime(early);   c2.setTime(late);   return daysBetween(c1,c2); } "
"public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {   int dimension=image.length;   BitMatrix bits=new BitMatrix(dimension);   for (int i=0; i < dimension; i++) {     for (int j=0; j < dimension; j++) {       if (image[i][j]) {         bits.set(j,i);       }     }   }   return decode(bits,hints); } "
"public Type<?> findAncestor(final Class<?> ancestor){   if (ancestor.isInterface()) {     return findInterface(ancestor);   }  else {     if (this.getRawType().equals(ancestor)) {       return this;     }  else     if (!TypeFactory.TYPE_OF_OBJECT.equals(this)) {       return getSuperType().findAncestor(ancestor);     }  else {       return null;     }   } } "
"private boolean isMultipart(Object content){   return content instanceof Multipart; } "
"protected String readFromFile(String sFileName){   ByteArrayOutputStream bsOut=new ByteArrayOutputStream();   FileInputStream fiIn=null;   BufferedInputStream bIn=null;   String sDataString=\"\";   try {     fiIn=new FileInputStream(sFileName);     bIn=new BufferedInputStream(fiIn);     int iData=0;     while ((iData=bIn.read()) > -1)     bsOut.write(iData);     sDataString=bsOut.toString();     fiIn.close();     bIn.close();   }  catch (  IOException ioe) {     ioe.printStackTrace(System.err);   }   return sDataString; } "
"public static String encode(String s,Type t,boolean template){   return _encode(s,t,template,false); } "
"@Ignore @Test(timeout=110000l) public void testEmitSoundTimer() throws IOException {   Chip8 soundChip=Chip8Utils.createFromRom(getClass().getResource(\"/E05SoundLoop.ch8\"));   while (soundChip.getV5() != 255) {     soundChip.cycle();   } } "
"public Builder weight(Number weight){   this.weight=weight;   return this; } "
"public void searchMagInCartTree(HTSModel m,FeatureVector fv,FeatureDefinition featureDef){   for (int s=0; s < numStates; s++) {     PdfLeafNode node=(PdfLeafNode)magTree[s].interpretToNode(fv,1);     m.setMagMean(s,node.getMean());     m.setMagVariance(s,node.getVariance());   } } "
"public SerialMessage checkVersion(ZWaveCommandClass commandClass){   ZWaveVersionCommandClass versionCommandClass=(ZWaveVersionCommandClass)this.getNode().getCommandClass(CommandClass.VERSION);   if (versionCommandClass == null) {     logger.debug(String.format(\"NODE %d: Version command class not supported,\" + \"reverting to version 1 for command class %s (0x%02x)\",getNode().getNodeId(),commandClass.getCommandClass().getLabel(),commandClass.getCommandClass().getKey()));     return null;   }   return versionCommandClass.getCommandClassVersionMessage(commandClass.getCommandClass()); } "
"public LiteralPanel(ExpressionFilterInterface parent){   this.parent=parent;   createUI(); } "
"@Override public void onRequestError(int code,String message){   progressDialog.cancel();   if (code == ConnectAPI.COUPON_CODE) {     showMessage(message);   } } "
"private FormBody bodyFromMap(Map<String,String> map){   FormBody.Builder formBody=new FormBody.Builder();   if (map != null) {     for (    final Map.Entry<String,String> entrySet : map.entrySet()) {       if (entrySet.getValue() != null) {         formBody.add(entrySet.getKey(),entrySet.getValue());       }     }   }   return formBody.build(); } "
"@Override public long limit(){   return limit; } "
"public synchronized void begin(Vector2 mousePosition){   this.active=true;   this.beginPosition=mousePosition; } "
"public static void changeSpeed(EntityLivingBase entity,UUID speedModifierUUID,String name,double modifier){   AttributeModifier speedModifier=(new AttributeModifier(speedModifierUUID,name,modifier - 1,2));   IAttributeInstance iattributeinstance=entity.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED);   if (iattributeinstance.getModifier(speedModifierUUID) != null) {     iattributeinstance.removeModifier(speedModifier);   }   iattributeinstance.applyModifier(speedModifier); } "
"public PagesSaveAccessQuery groupId(Integer value){   return unsafeParam(\"group_id\",value); } "
"public DatabaseGetUniversitiesQuery(VkApiClient client,UserActor actor){   super(client,\"database.getUniversities\",GetUniversitiesResponse.class);   accessToken(actor.getAccessToken()); } "
"public TShortLongHashMap(int initialCapacity,float loadFactor,TShortHashingStrategy strategy){   super(initialCapacity,loadFactor,strategy); } "
"public TrustManagerBuilder add(TrustManager... mgrs){   for (  TrustManager tm : mgrs) {     if (tm instanceof X509TrustManager) {       mgr.add((X509TrustManager)tm);     }   }   return (this); } "
"private boolean checkBlockDrifting(int x,int y,int z){   for (int height=y - 1; height <= y + 1; height++) {     IBlockState blockState=worldObj.getBlockState(new BlockPos(x,height,z));     if (blockState.getBlock() == Blocks.FLOWING_WATER || blockState.getBlock() == Blocks.WATER) {       int meta=blockState.getBlock().getMetaFromState(blockState);       if (meta >= 8)       return true;     }   }   return false; } "
"public void open() throws IOException {   FileFactory.FileType fileType=FileFactory.getFileType(fileName);   dataOutputStream=FileFactory.getDataOutputStream(fileName,fileType,bufferSize,append);   binaryOut=new TCompactProtocol(new TIOStreamTransport(dataOutputStream)); } "
"public void calcMinMax(int start,int end){   if (mDataSets == null || mDataSets.size() < 1) {     mYMax=0f;     mYMin=0f;   }  else {     mYMin=Float.MAX_VALUE;     mYMax=-Float.MAX_VALUE;     for (int i=0; i < mDataSets.size(); i++) {       IDataSet set=mDataSets.get(i);       set.calcMinMax(start,end);       if (set.getYMin() < mYMin)       mYMin=set.getYMin();       if (set.getYMax() > mYMax)       mYMax=set.getYMax();     }     if (mYMin == Float.MAX_VALUE) {       mYMin=0.f;       mYMax=0.f;     }     T firstLeft=getFirstLeft();     if (firstLeft != null) {       mLeftAxisMax=firstLeft.getYMax();       mLeftAxisMin=firstLeft.getYMin();       for (      IDataSet dataSet : mDataSets) {         if (dataSet.getAxisDependency() == AxisDependency.LEFT) {           if (dataSet.getYMin() < mLeftAxisMin)           mLeftAxisMin=dataSet.getYMin();           if (dataSet.getYMax() > mLeftAxisMax)           mLeftAxisMax=dataSet.getYMax();         }       }     }     T firstRight=getFirstRight();     if (firstRight != null) {       mRightAxisMax=firstRight.getYMax();       mRightAxisMin=firstRight.getYMin();       for (      IDataSet dataSet : mDataSets) {         if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {           if (dataSet.getYMin() < mRightAxisMin)           mRightAxisMin=dataSet.getYMin();           if (dataSet.getYMax() > mRightAxisMax)           mRightAxisMax=dataSet.getYMax();         }       }     }     handleEmptyAxis(firstLeft,firstRight);   } } "
"private void notJustAlphasToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){   int index=0;   int tokenLength=tokenVal.length();   for (; index < tokenLength; index++) {     if (isTextSplitable(tokenVal,index)) {       break;     }   }   String aaa=tokenVal.substring(0,index + 1);   String bbb=tokenVal.substring(index + 1,tokenLength);   if (matches(drStPattern,aaa)) {     drStToWords(wordRelation,tokenItem,tokenVal);   }  else {     if (aaa.equals(\"Mr\")) {       tokenItem.getFeatures().setString(\"punc\",\"\");       wordRelation.addWord(tokenItem,\"mister\");     }  else {       if (aaa.equals(\"Mrs\")) {         tokenItem.getFeatures().setString(\"punc\",\"\");         wordRelation.addWord(tokenItem,\"missus\");       }  else {         if (aaa.equals(\"Ms\")) {           tokenItem.getFeatures().setString(\"punc\",\"\");           wordRelation.addWord(tokenItem,\"miss\");         }  else {           FeatureSet featureSet=tokenItem.getFeatures();           featureSet.setString(\"nsw\",\"nide\");           tokenToWords(wordRelation,tokenItem,aaa);           tokenToWords(wordRelation,tokenItem,bbb);         }       }     }   } } "
"public static boolean equals(String filename1,String filename2){   return equals(filename1,filename2,false,IOCase.SENSITIVE); } "
"public AirMapFlightStatus(JSONObject statusJson){   constructFromJson(statusJson); } "
"public Infoflow(String androidPath,boolean forceAndroidJar){   super();   this.androidPath=androidPath;   this.forceAndroidJar=forceAndroidJar;   this.pathBuilderFactory=new DefaultPathBuilderFactory(); } "
"public Builder insertAfter(String columnName){   this.insertAfter=columnName;   return this; } "
"private boolean handleStaticOpcode(String owner,String name,String desc,boolean itf){   if (DEBUG) {     System.out.println(\"Static Method : \" + name + \":\"+ desc+ \":\"+ itf+ \":\"+ isStatic);   }   AccessRight accessRight=getMethodAccessRight(owner,name,desc);   if (accessRight == AccessRight.PUBLIC) {     return false;   }   pushMethodRedirectArgumentsOnStack(name,desc);   visitLdcInsn(Type.getType(\"L\" + owner + \";\"));   invokeStatic(RUNTIME_TYPE,Method.getMethod(\"Object invokeProtectedStaticMethod(Object[], Class[], String, Class)\"));   handleReturnType(desc);   return true; } "
"public final boolean containsKey(String name){   return mMap.containsKey(name); } "
"public AppTest(String testName){   super(testName); } "
"void submit(ProcessAndDisplayImageTask task){   initExecutorsIfNeed();   taskExecutorForCachedImages.execute(task); } "
"@Override public ListenableFuture<LeaseGrantResponse> grant(long ttl){   LeaseGrantRequest leaseGrantRequest=LeaseGrantRequest.newBuilder().setTTL(ttl).build();   return this.leaseFutureStub.leaseGrant(leaseGrantRequest); } "
"public static byte[] decode(byte[] source) throws Base64DecoderException {   return decode(source,0,source.length); } "
"@Override public void updateClassifications(String[] cNames,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {   final UpdateItemList updateItems=(UpdateItemList)updateItemList;   long maxProgress=0;   for (int i=0; i < cNames.length; i++) {     maxProgress+=updateItems.getClassIds(i).size();   }   progressListener.setMaximum(maxProgress);   final Map<Integer,ListOfLongs>[] fName2ClassId2Location=new HashMap[cNames.length];   final Map<Integer,Integer>[] fName2ClassId2Weight=new HashMap[cNames.length];   for (int i=0; i < cNames.length; i++) {     fName2ClassId2Location[i]=new HashMap<>(10000);     fName2ClassId2Weight[i]=new HashMap<>(10000);   }   for (int i=0; i < cNames.length; i++) {     final Map<Integer,ListOfLongs> classId2Location=fName2ClassId2Location[i];     final Map<Integer,Integer> classId2weight=fName2ClassId2Weight[i];     for (    Integer classId : updateItems.getClassIds(i)) {       int weightedSize=updateItems.getSize(i,classId);       final ListOfLongs positions=new ListOfLongs();       classId2Location.put(classId,positions);       classId2weight.put(classId,weightedSize);       if (weightedSize > 0) {         for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {           positions.add(item.getReadUId());         }       }       progressListener.incrementProgress();     }   }   ModifyClassificationsDAA.saveClassifications(daaHeader,cNames,fName2ClassId2Location,fName2ClassId2Weight); } "
"public String toString(){   return \"JavaStreamingAudioPlayer\"; } "
"private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){   if (count == 1 && startmode == TEXT_COMPACTION) {     sb.append((char)SHIFT_TO_BYTE);   }  else {     if ((count % 6) == 0) {       sb.append((char)LATCH_TO_BYTE);     }  else {       sb.append((char)LATCH_TO_BYTE_PADDED);     }   }   int idx=startpos;   if (count >= 6) {     char[] chars=new char[5];     while ((startpos + count - idx) >= 6) {       long t=0;       for (int i=0; i < 6; i++) {         t<<=8;         t+=bytes[idx + i] & 0xff;       }       for (int i=0; i < 5; i++) {         chars[i]=(char)(t % 900);         t/=900;       }       for (int i=chars.length - 1; i >= 0; i--) {         sb.append(chars[i]);       }       idx+=6;     }   }   for (int i=idx; i < startpos + count; i++) {     int ch=bytes[i] & 0xff;     sb.append((char)ch);   } } "
"private List<Proxy> findProxy(URI uri){   try {     List<Proxy> proxies=new ArrayList<Proxy>();     String parseResult=this.pacScriptParser.evaluate(uri.toString(),uri.getHost());     if (parseResult == null) {       parseResult=PAC_DIRECT;     }     String[] proxyDefinitions=parseResult.split(\"[;]\");     for (    String proxyDef : proxyDefinitions) {       if (proxyDef.trim().length() > 0) {         proxies.add(buildProxyFromPacResult(proxyDef));       }     }     return proxies;   }  catch (  ProxyEvaluationException e) {     Logger.log(getClass(),LogLevel.ERROR,\"PAC resolving error.\",e);     return ProxyUtil.noProxyList();   } } "
"GitReference resolveReference(String reference) throws RepoException {   return new GitReference(this,revParse(reference)); } "
"public void startPreview(){   if (camera != null && !previewing) {     camera.startPreview();     previewing=true;   } } "
"public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){   mMode=FLING_MODE;   final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);   final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);   return spingbackX || spingbackY; } "
"protected double populationVariance(double[] v){   double mean=StatUtils.mean(v);   double sum=0;   for (  double val : v) {     sum+=(val - mean) * (val - mean);   }   return sum / v.length; } "
"public void reset(){   fDeclaration=null;   fTypeDecl=null;   fNil=false;   fSpecified=false;   fNotation=null;   fValidationAttempted=ItemPSVI.VALIDATION_NONE;   fValidity=ItemPSVI.VALIDITY_NOTKNOWN;   fErrors=null;   fValidationContext=null;   fValue.reset(); } "
"final public static int insertCollection(String collection,V v){   MongoCollection<Document> c=getCollection(collection);   if (c != null) {     Document d=new Document();     for (    String name : v.names()) {       Object v1=v.value(name);       d.append(name,v1);     }     try {       c.insertOne(d);       if (log.isDebugEnabled())       log.debug(\"inserted collection=\" + collection + \", d=\"+ d);       return 1;     }  catch (    Exception e) {       if (log.isErrorEnabled())       log.error(e.getMessage(),e);     }   }   return 0; } "
"public static int patchLessMemory(RandomAccessFile oldFile,int oldsize,byte[] diffBuf,int diffSize,File newFile,int extLen) throws IOException {   if (oldFile == null || oldsize <= 0) {     return RETURN_OLD_FILE_ERR;   }   if (newFile == null) {     return RETURN_NEW_FILE_ERR;   }   if (diffBuf == null || diffSize <= 0) {     return RETURN_DIFF_FILE_ERR;   }   int commentLenPos=oldsize - extLen - 2;   if (commentLenPos <= 2) {     return RETURN_OLD_FILE_ERR;   }   DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));   diffIn.skip(8);   long ctrlBlockLen=diffIn.readLong();   long diffBlockLen=diffIn.readLong();   int newsize=(int)diffIn.readLong();   diffIn.close();   InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);   in.skip(BSUtil.HEADER_SIZE);   DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));   in=new ByteArrayInputStream(diffBuf,0,diffSize);   in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);   InputStream diffBlockIn=new GZIPInputStream(in);   in=new ByteArrayInputStream(diffBuf,0,diffSize);   in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);   InputStream extraBlockIn=new GZIPInputStream(in);   OutputStream outStream=new FileOutputStream(newFile);   try {     int oldpos=0;     int newpos=0;     int[] ctrl=new int[3];     while (newpos < newsize) {       for (int i=0; i <= 2; i++) {         ctrl[i]=ctrlBlockIn.readInt();       }       if (newpos + ctrl[0] > newsize) {         outStream.close();         return RETURN_DIFF_FILE_ERR;       }       byte[] buffer=new byte[ctrl[0]];       if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {         outStream.close();         return RETURN_DIFF_FILE_ERR;       }       byte[] oldBuffer=new byte[ctrl[0]];       if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {         outStream.close();         return RETURN_DIFF_FILE_ERR;       }       for (int i=0; i < ctrl[0]; i++) {         if (oldpos + i == commentLenPos) {           oldBuffer[i]=0;           oldBuffer[i + 1]=0;         }         if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {           buffer[i]+=oldBuffer[i];         }       }       outStream.write(buffer);       newpos+=ctrl[0];       oldpos+=ctrl[0];       if (newpos + ctrl[1] > newsize) {         outStream.close();         return RETURN_DIFF_FILE_ERR;       }       buffer=new byte[ctrl[1]];       if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {         outStream.close();         return RETURN_DIFF_FILE_ERR;       }       outStream.write(buffer);       outStream.flush();       newpos+=ctrl[1];       oldpos+=ctrl[2];       oldFile.seek(oldpos);     }     ctrlBlockIn.close();     diffBlockIn.close();     extraBlockIn.close();   }   finally {     oldFile.close();     outStream.close();   }   return RETURN_SUCCESS; } "
"public static NamedLayer createNewNamedLayer(){   NamedLayer namedLayer=styleFactory.createNamedLayer();   return namedLayer; } "
"public ExceptionWithContext(Throwable cause,String message,Object... formatArgs){   super((message != null) ? formatMessage(message,formatArgs) : (cause != null) ? cause.getMessage() : null,cause);   if (cause instanceof ExceptionWithContext) {     String ctx=((ExceptionWithContext)cause).context.toString();     context=new StringBuffer(ctx.length() + 200);     context.append(ctx);   }  else {     context=new StringBuffer(200);   } } "
"static double[] loadExpIntA(){   return EXP_INT_A.clone(); } "
"public ParameterRef newParameterRef(Type paramType,int number){   return new ParameterRef(paramType,number); } "
"@Deprecated public short toDamageValue(){   return 0; } "
"public QueueReader<Edge> listener(){   return reader.clone(); } "
"@Override public boolean parseParameters(Object params){   if (params == null || !(params instanceof BuildBattleDecorator))   return false;   this.params=(BuildBattleDecorator)params;   this.sourceBounds=this.params.getGoalStructureBounds();   this.destBounds=this.params.getPlayerStructureBounds();   this.delta=new Vec3i(destBounds.getMin().getX() - sourceBounds.getMin().getX(),destBounds.getMin().getY() - sourceBounds.getMin().getY(),destBounds.getMin().getZ() - sourceBounds.getMin().getZ());   this.structureVolume=volumeOfBounds(this.sourceBounds);   assert (this.structureVolume == volumeOfBounds(this.destBounds));   this.dest=new ArrayList<IBlockState>(Collections.nCopies(this.structureVolume,(IBlockState)null));   this.source=new ArrayList<IBlockState>(Collections.nCopies(this.structureVolume,(IBlockState)null));   DrawBlockBasedObjectType tickBlock=this.params.getBlockTypeOnCorrectPlacement();   DrawBlockBasedObjectType crossBlock=this.params.getBlockTypeOnIncorrectPlacement();   this.blockTypeOnCorrectPlacement=(tickBlock != null) ? new XMLBlockState(tickBlock.getType(),tickBlock.getColour(),tickBlock.getFace(),tickBlock.getVariant()) : null;   this.blockTypeOnIncorrectPlacement=(crossBlock != null) ? new XMLBlockState(crossBlock.getType(),crossBlock.getColour(),crossBlock.getFace(),crossBlock.getVariant()) : null;   return true; } "
"public Bundler putBoolean(String key,boolean value){   bundle.putBoolean(key,value);   return this; } "
"public static String escape(String url) throws UnsupportedEncodingException {   return escape(url,\"UTF-8\"); } "
"private void putForeignKeyValue(ContentValues values,DataSupport baseObj){   Map<String,Long> associatedModelMap=baseObj.getAssociatedModelsMapWithoutFK();   for (  String associatedTableName : associatedModelMap.keySet()) {     values.put(getForeignKeyColumnName(associatedTableName),associatedModelMap.get(associatedTableName));   } } "
"public static long readUnsignedLong(ByteInput in,int zwidth,boolean fillOnRight){   long result=0;   if (!fillOnRight) {     for (int i=zwidth; i >= 0; i--) {       result=(result >>> 8) | ((in.readByte() & 0xffL) << 56);     }     result>>>=(7 - zwidth) * 8;   }  else {     for (int i=zwidth; i >= 0; i--) {       result=(result >>> 8) | ((in.readByte() & 0xffL) << 56);     }   }   return result; } "
"private String constantToObjectName(String string){   if (!Character.isUpperCase(string.charAt(0))) {     string=StringUtils.capitalize(string);     int length=string.length();     for (int i=0; i < length; i++) {       char character=string.charAt(i);       if (character == \"_\".charAt(0)) {         String firstPart=string.substring(0,i);         String secondPart=string.substring(i + 1,length);         String newSecondPart=StringUtils.capitalize(secondPart);         string=firstPart + newSecondPart;         i=firstPart.length();         length--;       }     }   }   return string; } "
"private TopBaseConfiguration calculateTopBase(Element prosody,TopBaseConfiguration origConf){   int topStart=origConf.topStart();   int topEnd=origConf.topEnd();   int baseStart=origConf.baseStart();   int baseEnd=origConf.baseEnd();   String pitch=prosody.getAttribute(\"pitch\");   if (!pitch.equals(\"\")) {     if (MaryUtils.isPercentageDelta(pitch)) {       int percentage=MaryUtils.getPercentageDelta(pitch);       baseStart=(baseStart * (100 + percentage)) / 100;       baseEnd=(baseEnd * (100 + percentage)) / 100;       topStart=(topStart * (100 + percentage)) / 100;       topEnd=(topEnd * (100 + percentage)) / 100;     }  else     if (MaryUtils.isSemitonesDelta(pitch)) {       double semitones=MaryUtils.getSemitonesDelta(pitch);       double factor=Math.pow(1.0595,semitones);       baseStart=(int)(baseStart * factor);       baseEnd=(int)(baseEnd * factor);       topStart=(int)(topStart * factor);       topEnd=(int)(topEnd * factor);     }  else     if (MaryUtils.isNumberDelta(pitch)) {       int delta=MaryUtils.getNumberDelta(pitch);       baseStart+=delta;       baseEnd+=delta;       topStart+=delta;       topEnd+=delta;     }  else     if (MaryUtils.isUnsignedNumber(pitch)) {       int baseMean=(baseStart + baseEnd) / 2;       int topMean=(topStart + topEnd) / 2;       double topBaseRatio=((double)topMean) / baseMean;       int topSpread=(topEnd - topStart) / 2;       int newBaseMean=MaryUtils.getUnsignedNumber(pitch);       int baseSpread=(baseEnd - baseStart) / 2;       baseStart=newBaseMean - baseSpread;       baseEnd=newBaseMean + baseSpread;       topStart=(int)(newBaseMean * topBaseRatio - topSpread);       topEnd=(int)(newBaseMean * topBaseRatio + topSpread);     }   }   String range=prosody.getAttribute(\"range\");   if (!range.equals(\"\")) {     if (MaryUtils.isPercentageDelta(range)) {       int percentage=MaryUtils.getPercentageDelta(range);       topStart=baseStart + ((topStart - baseStart) * (100 + percentage)) / 100;       topEnd=baseEnd + ((topEnd - baseEnd) * (100 + percentage)) / 100;     }  else     if (MaryUtils.isSemitonesDelta(range)) {       double semitones=MaryUtils.getSemitonesDelta(range);       double factor=Math.pow(1.0595,semitones);       int deltaStart=(int)((topStart - baseStart) * factor);       int deltaEnd=(int)((topEnd - baseEnd) * factor);       topStart=baseStart + deltaStart;       topEnd=baseEnd + deltaEnd;     }  else     if (MaryUtils.isNumberDelta(range)) {       int delta=MaryUtils.getNumberDelta(range);       topStart+=delta;       topEnd+=delta;     }  else     if (MaryUtils.isUnsignedSemitones(range)) {       double semitones=MaryUtils.getUnsignedSemitones(range);       double factor=Math.pow(1.0595,semitones);       topStart=(int)(baseStart * factor);       topEnd=(int)(baseEnd * factor);     }  else     if (MaryUtils.isUnsignedNumber(range)) {       int baseMean=(baseStart + baseEnd) / 2;       int topSpread=(topEnd - topStart) / 2;       int newRange=MaryUtils.getUnsignedNumber(range);       topStart=baseMean + newRange - topSpread;       topEnd=baseMean + newRange + topSpread;     }   }   String pitchDynamics=prosody.getAttribute(\"pitch-dynamics\");   if (!pitchDynamics.equals(\"\")) {     if (MaryUtils.isPercentageDelta(pitchDynamics)) {       int percentage=MaryUtils.getPercentageDelta(pitchDynamics);       int baseMean=(baseStart + baseEnd) / 2;       baseStart=(200 * baseMean) / (200 + percentage);       baseEnd=(baseStart * (100 + percentage)) / 100;     }  else     if (MaryUtils.isNumberDelta(pitchDynamics)) {       int delta=MaryUtils.getNumberDelta(pitchDynamics);       int baseMean=(baseStart + baseEnd) / 2;       baseStart=baseMean + delta / 2;       baseEnd=baseMean - delta / 2;     }  else     if (MaryUtils.isSemitonesDelta(pitchDynamics)) {       double semitones=MaryUtils.getSemitonesDelta(pitchDynamics);       double factor=Math.pow(1.0595,semitones);       int baseMean=(baseStart + baseEnd) / 2;       baseStart=(int)((2 * baseMean) / (1 + factor));       baseEnd=(int)(factor * baseStart);     }   }   String rangeDynamics=prosody.getAttribute(\"range-dynamics\");   if (!rangeDynamics.equals(\"\")) {     if (MaryUtils.isPercentageDelta(rangeDynamics)) {       int percentage=MaryUtils.getPercentageDelta(rangeDynamics);       int baseMean=(baseStart + baseEnd) / 2;       int topMean=(topStart + topEnd) / 2;       int rangeMean=topMean - baseMean;       int rangeStart=(200 * rangeMean) / (200 + percentage);       int rangeEnd=(rangeStart * (100 + percentage)) / 100;       topStart=baseStart + rangeStart;       topEnd=baseEnd + rangeEnd;     }  else     if (MaryUtils.isNumberDelta(rangeDynamics)) {       int delta=MaryUtils.getNumberDelta(rangeDynamics);       int baseMean=(baseStart + baseEnd) / 2;       int topMean=(topStart + topEnd) / 2;       int rangeMean=topMean - baseMean;       int rangeStart=rangeMean + delta / 2;       int rangeEnd=rangeMean - delta / 2;       topStart=baseStart + rangeStart;       topEnd=baseEnd + rangeEnd;     }  else     if (MaryUtils.isSemitonesDelta(rangeDynamics)) {       double semitones=MaryUtils.getSemitonesDelta(rangeDynamics);       double factor=Math.pow(1.0595,semitones);       int baseMean=(baseStart + baseEnd) / 2;       int topMean=(topStart + topEnd) / 2;       int rangeMean=topMean - baseMean;       int rangeStart=(int)((2 * rangeMean) / (1 + factor));       int rangeEnd=(int)(factor * rangeStart);       topStart=baseStart + rangeStart;       topEnd=baseEnd + rangeEnd;     }   }   if (topStart < baseStart)   topStart=baseStart;   if (topEnd < baseEnd)   topEnd=baseEnd;   return new TopBaseConfiguration(topStart,topEnd,baseStart,baseEnd,origConf.startTime(),origConf.endTime()); } "
"public void init$Children(){   children=new ASTNode[2]; } "
"public FloatBuffer fillFloatBuffer(FloatBuffer fb,boolean columnMajor){   if (columnMajor) {     fb.put(m00).put(m10).put(m20);     fb.put(m01).put(m11).put(m21);     fb.put(m02).put(m12).put(m22);   }  else {     fb.put(m00).put(m01).put(m02);     fb.put(m10).put(m11).put(m12);     fb.put(m20).put(m21).put(m22);   }   return fb; } "
"public InvalidDatatypeFacetException(String key,Object[] args){   super(key,args); } "
"void addFillComponents(Container panel,int[] cols,int[] rows){   Dimension filler=new Dimension(10,10);   boolean filled_cell_11=false;   CellConstraints cc=new CellConstraints();   if (cols.length > 0 && rows.length > 0) {     if (cols[0] == 1 && rows[0] == 1) {       panel.add(Box.createRigidArea(filler),cc.xy(1,1));       filled_cell_11=true;     }   }   for (int index=0; index < cols.length; index++) {     if (cols[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));   }   for (int index=0; index < rows.length; index++) {     if (rows[index] == 1 && filled_cell_11) {       continue;     }     panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));   } } "
"public void destroy(){   mTabStripTreeProvider.destroy();   mTabStripTreeProvider=null; } "
"public TupleManagerIterator(TupleManager tuples,IntIterator rows){   m_tuples=tuples;   m_rows=rows; } "
"public boolean isSetStatus(){   return __isset_bit_vector.get(__STATUS_ISSET_ID); } "
"public AemSidekick expandFieldsetIfCollapsed(String fieldsetName){   final WebElement fieldset=getFieldsetByName(fieldsetName);   bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandFieldset(fieldset),Timeouts.SMALL);   return this; } "
"@Override protected FlowSet<N> entryInitialFlow(){   FlowSet<N> initSet=(FlowSet<N>)emptySet.clone();   for (  N h : graph.getHeads()) {     initSet.add(h);   }   return initSet; } "
"public boolean isAskForUsername(){   return askForUsername; } "
"private boolean isTypedTimeFullyLegal(){   if (mIs24HourMode) {     int[] values=getEnteredTime(null);     return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);   }  else {     return (mTypedTimes.contains(getAmOrPmKeyCode(HALF_DAY_1)) || mTypedTimes.contains(getAmOrPmKeyCode(HALF_DAY_2)));   } } "
"private boolean hasURL(URL url){   URL[] urls=getURLs();   for (int i=0; i < urls.length; i++) {     if (urls[i].equals(url))     return (true);   }   return (false); } "
"public static @Lightness int isDark(Palette palette){   Palette.Swatch mostPopulous=getMostPopulousSwatch(palette);   if (mostPopulous == null)   return LIGHTNESS_UNKNOWN;   return isDark(mostPopulous.getHsl()) ? IS_DARK : IS_LIGHT; } "
"void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){   mListener=listener;   mMediaFactory=mediaFactory; } "
"private static Simulation fromXml(InputSource source) throws ParserConfigurationException, SAXException, IOException {   SAXParserFactory factory=SAXParserFactory.newInstance();   SAXParser parser=factory.newSAXParser();   XmlReader reader=new XmlReader();   parser.parse(source,reader);   Capacity capacity=new Capacity(reader.bodies.size(),reader.joints.size(),10);   World world=new World(capacity);   List<SandboxRay> rays=new ArrayList<SandboxRay>();   Camera camera=new Camera();   world.setSettings(reader.settings);   if (reader.broadphase != null)   world.setBroadphaseDetector(reader.broadphase);   if (reader.narrowphase != null)   world.setNarrowphaseDetector(reader.narrowphase);   if (reader.manifoldSolver != null)   world.setManifoldSolver(reader.manifoldSolver);   if (reader.timeOfImpact != null)   world.setTimeOfImpactDetector(reader.timeOfImpact);   if (reader.gravity != null)   world.setGravity(reader.gravity);   if (reader.bounds != null)   world.setBounds(reader.bounds);   if (reader.worldName != null) {     world.setUserData(reader.worldName);   }  else {     world.setUserData(Messages.getString(\"world.name.default\"));   }   for (  SandboxBody body : reader.bodies) {     world.addBody(body);   }   for (  Joint joint : reader.joints) {     world.addJoint(joint);   }   for (  SandboxRay ray : reader.rays) {     rays.add(ray);   }   if (reader.camera != null) {     camera.setScale(reader.camera.getScale());     camera.setTranslation(reader.camera.getTranslation());   }   return new Simulation(camera,rays,world); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_PET_TAME_COMPLETE(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1400697,value0,value1); } "
"private static NotificationCompat.Builder makeCommonBuilder(Context context,long currentTime,long dismissedTaskId){   Intent primaryAction=new Intent(context,MainActivity.class);   PendingIntent primaryActionPI=PendingIntent.getActivity(context,0,primaryAction,PendingIntent.FLAG_UPDATE_CURRENT);   Intent dismissAction=new Intent(context,NagboxService.class);   dismissAction.setAction(NagboxService.ACTION_ON_NOTIFICATION_DISMISSED);   dismissAction.putExtra(NagboxService.EXTRA_TASK_ID,dismissedTaskId);   PendingIntent dismissActionPI=PendingIntent.getService(context,(int)dismissedTaskId,dismissAction,PendingIntent.FLAG_UPDATE_CURRENT);   return new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_nag).setColor(ContextCompat.getColor(context,R.color.primaryDark)).setCategory(NotificationCompat.CATEGORY_REMINDER).setPriority(NotificationCompat.PRIORITY_HIGH).setContentIntent(primaryActionPI).setDeleteIntent(dismissActionPI).setAutoCancel(true).setWhen(currentTime).setShowWhen(true).setDefaults(NotificationCompat.DEFAULT_ALL); } "
"public boolean isValidRow(int row){   return m_rows.isValidRow(row); } "
"@Override public Vector2D toSubSpace(final Point<Euclidean3D> point){   final Vector3D p3D=(Vector3D)point;   return new Vector2D(p3D.dotProduct(u),p3D.dotProduct(v)); } "
"private static List<SubHyperplane<Euclidean3D>> buildBoundary(final List<Vector3D> vertices,final List<int[]> facets,final double tolerance){   for (int i=0; i < vertices.size() - 1; ++i) {     final Vector3D vi=vertices.get(i);     for (int j=i + 1; j < vertices.size(); ++j) {       if (Vector3D.distance(vi,vertices.get(j)) <= tolerance) {         throw new MathIllegalArgumentException(LocalizedGeometryFormats.CLOSE_VERTICES,vi.getX(),vi.getY(),vi.getZ());       }     }   }   final int[][] references=findReferences(vertices,facets);   final int[][] successors=successors(vertices,facets,references);   for (int vA=0; vA < vertices.size(); ++vA) {     for (    final int vB : successors[vA]) {       if (vB >= 0) {         boolean found=false;         for (        final int v : successors[vB]) {           found=found || (v == vA);         }         if (!found) {           final Vector3D start=vertices.get(vA);           final Vector3D end=vertices.get(vB);           throw new MathIllegalArgumentException(LocalizedGeometryFormats.EDGE_CONNECTED_TO_ONE_FACET,start.getX(),start.getY(),start.getZ(),end.getX(),end.getY(),end.getZ());         }       }     }   }   final List<SubHyperplane<Euclidean3D>> boundary=new ArrayList<SubHyperplane<Euclidean3D>>();   for (  final int[] facet : facets) {     Plane plane=new Plane(vertices.get(facet[0]),vertices.get(facet[1]),vertices.get(facet[2]),tolerance);     final Vector2D[] two2Points=new Vector2D[facet.length];     for (int i=0; i < facet.length; ++i) {       final Vector3D v=vertices.get(facet[i]);       if (!plane.contains(v)) {         throw new MathIllegalArgumentException(LocalizedGeometryFormats.OUT_OF_PLANE,v.getX(),v.getY(),v.getZ());       }       two2Points[i]=plane.toSubSpace(v);     }     boundary.add(new SubPlane(plane,new PolygonsSet(tolerance,two2Points)));   }   return boundary; } "
"public synchronized void shutdown(){   if (!isActive) {     return;   }   log.info(\"Shutting down the default async job executor [{}].\",getClass().getName());   if (timerJobRunnable != null) {     timerJobRunnable.stop();   }   if (asyncJobsDueRunnable != null) {     asyncJobsDueRunnable.stop();   }   if (resetExpiredJobsRunnable != null) {     resetExpiredJobsRunnable.stop();   }   stopResetExpiredJobsThread();   stopTimerAcquisitionThread();   stopJobAcquisitionThread();   stopExecutingAsyncJobs();   timerJobRunnable=null;   asyncJobsDueRunnable=null;   resetExpiredJobsRunnable=null;   isActive=false; } "
"public void removeHeader(String header){   clientHeaderMap.remove(header); } "
"@Deployment public void testActivityMessageBoundaryEventsOnUserTask() throws Exception {   ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"messageOnUserTaskProcess\");   assertNotNull(processInstance);   Execution executionWithMessage=runtimeService.createExecutionQuery().messageEventSubscriptionName(\"message_1\").singleResult();   assertNotNull(executionWithMessage);   runtimeService.messageEventReceived(\"message_1\",executionWithMessage.getId());   assertEquals(3,listener.getEventsReceived().size());   assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);   ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);   assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());   assertEquals(\"boundaryMessageEventCatching\",messageEvent.getActivityId());   assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());   assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());   assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());   assertEquals(\"message_1\",messageEvent.getMessageName());   assertNull(messageEvent.getMessageData());   assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);   messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);   assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED,messageEvent.getType());   assertEquals(\"boundaryMessageEventCatching\",messageEvent.getActivityId());   assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());   assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());   assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());   assertEquals(\"message_1\",messageEvent.getMessageName());   assertNull(messageEvent.getMessageData());   assertTrue(listener.getEventsReceived().get(2) instanceof ActivitiActivityCancelledEvent);   ActivitiActivityCancelledEvent signalEvent=(ActivitiActivityCancelledEvent)listener.getEventsReceived().get(2);   assertEquals(ActivitiEventType.ACTIVITY_CANCELLED,signalEvent.getType());   assertEquals(\"cloudformtask1\",signalEvent.getActivityId());   assertEquals(executionWithMessage.getId(),signalEvent.getExecutionId());   assertEquals(executionWithMessage.getProcessInstanceId(),signalEvent.getProcessInstanceId());   assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());   assertNotNull(signalEvent.getCause());   assertTrue(signalEvent.getCause() instanceof MessageEventSubscriptionEntity);   MessageEventSubscriptionEntity cause=(MessageEventSubscriptionEntity)signalEvent.getCause();   assertEquals(\"message_1\",cause.getEventName());   assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);   assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED); } "
"private void decode(byte[] data,int width,int height){   if (null == mRotatedData) {     mRotatedData=new byte[width * height];   }  else {     if (mRotatedData.length < width * height) {       mRotatedData=new byte[width * height];     }   }   Arrays.fill(mRotatedData,(byte)0);   for (int y=0; y < height; y++) {     for (int x=0; x < width; x++) {       if (x + y * width >= data.length) {         break;       }       mRotatedData[x * height + height - y - 1]=data[x + y * width];     }   }   int tmp=width;   width=height;   height=tmp;   Result rawResult=null;   try {     PlanarYUVLuminanceSource source=new PlanarYUVLuminanceSource(mRotatedData,width,height,0,0,width,height,false);     BinaryBitmap bitmap1=new BinaryBitmap(new HybridBinarizer(source));     rawResult=mQrCodeReader.decode(bitmap1,mHints);   }  catch (  ReaderException e) {   }  finally {     mQrCodeReader.reset();   }   if (rawResult != null) {     Message message=Message.obtain(mActivity.getCaptureActivityHandler(),R.id.decode_succeeded,rawResult);     message.sendToTarget();   }  else {     Message message=Message.obtain(mActivity.getCaptureActivityHandler(),R.id.decode_failed);     message.sendToTarget();   } } "
"public static <T extends Serializable,R>DistributedTask<T,R> task(Callable<T> callable,AsyncResultsReducer<T,R> reducer,AsyncResultFilter<T> filter){   return new CallableDistributedTaskAdapter<T,R>(callable,reducer,filter); } "
"Item newLong(final long value){   key.set(value);   Item result=get(key);   if (result == null) {     pool.putByte(LONG).putLong(value);     result=new Item(index,key);     put(result);     index+=2;   }   return result; } "
"public OpenIntToDoubleHashMap(final int expectedSize){   this(expectedSize,Double.NaN); } "
"public void addArg(Expr node){   List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();   list.addChild(node); } "
"public boolean isApplicable(){   ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"SEED\");   return viewer != null && viewer.hasComparableData(); } "
"@Override public boolean isEntityUnparsed(String name){   return (fUnparsedEntityChecking) ? super.isEntityUnparsed(name) : true; } "
"protected void bottomUpDispatch(DominatorNode<N> node){   if (isFrontierKnown(node))   return;   for (  DominatorNode<N> child : dt.getChildrenOf(node)) {     if (!isFrontierKnown(child))     bottomUpDispatch(child);   }   processNode(node); } "
"@Override public int nodeSize(){   return listOfKeys.size(); } "
"private void updateHull(final Vector2D point,final List<Vector2D> hull){   final double tolerance=getTolerance();   if (hull.size() == 1) {     final Vector2D p1=hull.get(0);     if (p1.distance(point) < tolerance) {       return;     }   }   while (hull.size() >= 2) {     final int size=hull.size();     final Vector2D p1=hull.get(size - 2);     final Vector2D p2=hull.get(size - 1);     final double offset=new Line(p1,p2,tolerance).getOffset(point);     if (FastMath.abs(offset) < tolerance) {       final double distanceToCurrent=p1.distance(point);       if (distanceToCurrent < tolerance || p2.distance(point) < tolerance) {         return;       }       final double distanceToLast=p1.distance(p2);       if (isIncludeCollinearPoints()) {         final int index=distanceToCurrent < distanceToLast ? size - 1 : size;         hull.add(index,point);       }  else {         if (distanceToCurrent > distanceToLast) {           hull.remove(size - 1);           hull.add(point);         }       }       return;     }  else     if (offset > 0) {       hull.remove(size - 1);     }  else {       break;     }   }   hull.add(point); } "
"public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){   if (mScannerCompletionListener != null) {     mScannerCompletionListener.OnScannerCompletion(rawResult,Scanner.parseResult(rawResult),barcode);   }   if (barcode != null) {     mViewfinderView.drawResultBitmap(barcode);   }   boolean fromLiveScan=barcode != null;   if (fromLiveScan) {     mBeepManager.playBeepSoundAndVibrate();     drawResultPoints(barcode,scaleFactor,rawResult);   } } "
"protected GroupsRemoveUserQuery groupId(int value){   return unsafeParam(\"group_id\",value); } "
"public Map<Instance,Long> degrees(){   Map<Instance,Long> allDegrees=new HashMap<>();   MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();   ComputerResult result=computer.compute(new DegreeVertexProgram(subtypes));   MindmapsGraph graph=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraph();   result.graph().traversal().V().forEachRemaining(null);   return allDegrees; } "
"private boolean addCallbackMethods(SootClass currentClass,Set<SootClass> referenceClasses,String callbackSignature){   if (currentClass == null)   return false;   if (!this.callbackFunctions.containsKey(currentClass.getName()))   return false;   boolean callbackFound=false;   Map<SootClass,Set<SootMethod>> callbackClasses=new HashMap<SootClass,Set<SootMethod>>();   for (  String methodSig : this.callbackFunctions.get(currentClass.getName())) {     SootMethodAndClass methodAndClass=SootMethodRepresentationParser.v().parseSootMethodString(methodSig);     if (!callbackSignature.isEmpty() && !callbackSignature.equals(methodAndClass.getSubSignature()))     continue;     SootClass theClass=Scene.v().getSootClass(methodAndClass.getClassName());     SootMethod theMethod=findMethod(theClass,methodAndClass.getSubSignature());     if (theMethod == null) {       continue;     }     if (getComponentType(theClass) == ComponentType.Activity && AndroidEntryPointConstants.getActivityLifecycleMethods().contains(theMethod.getSubSignature()))     continue;     if (getComponentType(theClass) == ComponentType.Service && AndroidEntryPointConstants.getServiceLifecycleMethods().contains(theMethod.getSubSignature()))     continue;     if (getComponentType(theClass) == ComponentType.BroadcastReceiver && AndroidEntryPointConstants.getBroadcastLifecycleMethods().contains(theMethod.getSubSignature()))     continue;     if (getComponentType(theClass) == ComponentType.ContentProvider && AndroidEntryPointConstants.getContentproviderLifecycleMethods().contains(theMethod.getSubSignature()))     continue;     if (callbackClasses.containsKey(theClass))     callbackClasses.get(theClass).add(theMethod);  else {       Set<SootMethod> methods=new HashSet<SootMethod>();       methods.add(theMethod);       callbackClasses.put(theClass,methods);     }   }   if (referenceClasses == null || referenceClasses.isEmpty())   referenceClasses=Collections.singleton(currentClass);  else {     referenceClasses=new HashSet<SootClass>(referenceClasses);     referenceClasses.add(currentClass);   }   Stmt beforeCallbacks=Jimple.v().newNopStmt();   body.getUnits().add(beforeCallbacks);   for (  SootClass callbackClass : callbackClasses.keySet()) {     Set<Local> classLocals=new HashSet<Local>();     for (    SootClass parentClass : referenceClasses) {       Local parentLocal=this.localVarsForClasses.get(parentClass.getName());       if (isCompatible(parentClass,callbackClass))       classLocals.add(parentLocal);     }     if (classLocals.isEmpty()) {       Local classLocal=generateClassConstructor(callbackClass,body,referenceClasses);       if (classLocal == null) {         logger.warn(\"Constructor cannot be generated for callback class {}\",callbackClass.getName());         continue;       }       classLocals.add(classLocal);     }     for (    Local classLocal : classLocals) {       for (      SootMethod callbackMethod : callbackClasses.get(callbackClass)) {         JNopStmt thenStmt=new JNopStmt();         createIfStmt(thenStmt);         buildMethodCall(callbackMethod,body,classLocal,generator,referenceClasses);         body.getUnits().add(thenStmt);       }       callbackFound=true;     }   }   if (callbackFound)   createIfStmt(beforeCallbacks);   return callbackFound; } "
"public boolean unregisterTask(UserDefinedAction action){   for (  KeyChain k : action.getActivation().getHotkeys()) {     unregisterKey(k);   }   mouseGestureManager.unRegisterAction(action);   return true; } "
"public final char yycharat(int pos){   return zzBuffer.charAt(zzStartRead + pos); } "
"public void unregister(Class<?> service,Object provider){   ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>(); synchronized (providers) {     Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();     try {       while (it.hasNext()) {         Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();         if (entry.getKey() != service) {           continue;         }         Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();         try {           while (it2.hasNext()) {             RegisteredServiceProvider<?> registered=it2.next();             if (registered.getProvider() == provider) {               it2.remove();               unregisteredEvents.add(new ServiceUnregisterEvent(registered));             }           }         }  catch (        NoSuchElementException e) {         }         if (entry.getValue().size() == 0) {           it.remove();         }       }     }  catch (    NoSuchElementException e) {     }   }   for (  ServiceUnregisterEvent event : unregisteredEvents) {     Bukkit.getServer().getPluginManager().callEvent(event);   } } "
"public float[] toArray(float[] floats){   if (floats == null) {     floats=new float[2];   }   floats[0]=x;   floats[1]=y;   return floats; } "
"protected AbstractFormat(){   this(getDefaultNumberFormat()); } "
"@CheckForNull private static Template findTemplate(String nodeLabelString,List<Template> templates){   Template selectedTemplate=null;   for (  Template template : templates) {     String templateLabel=template.getLabel();     if (templateLabel != null && nodeLabelString.contains(templateLabel)) {       selectedTemplate=template;       break;     }   }   return selectedTemplate; } "
"@Override public boolean resetStorage(){   logger.info(\"Checking if Storage needs to be reset to master\");   localRedisConnect();   String localRedisInfo=null;   try {     localRedisInfo=localJedis.info();   }  catch (  JedisConnectionException e) {     try {       localRedisConnect();       localRedisInfo=localJedis.info();     }  catch (    JedisConnectionException ex) {       logger.error(\"Cannot connect to Redis\");       return false;     }   }   Iterable<String> result=Splitter.on('\\n').split(localRedisInfo);   String role=null;   for (  String line : result) {     if (line.startsWith(\"role\")) {       String[] items=line.split(\":\");       role=items[1].trim();       if (role.equals(\"slave\")) {         logger.info(\"Redis: Stop replication. Switch from slave to master\");         stopPeerSync();       }       return true;     }   }   return false; } "
"public void appendInfo(final String infoMessage){   if (this.infoMessage == null) {     this.infoMessage=infoMessage;   }  else {     this.infoMessage+=(\"\\n\" + infoMessage);   } } "
"protected void writePixels() throws IOException {   Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);   encoder.encode(out); } "
"PasswordAuthenticator(String username,String password){   this.m_password=password;   this.m_username=username; } "
"public void lerp(Vector2 dp,double da,double alpha){   this.translate(dp.x * alpha,dp.y * alpha);   this.rotate(da * alpha,this.getTranslationX(),this.getTranslationY()); } "
"private void transform(){   final int n=householderVectors.length;   final int high=n - 1;   for (int m=1; m <= high - 1; m++) {     double scale=0;     for (int i=m; i <= high; i++) {       scale+=FastMath.abs(householderVectors[i][m - 1]);     }     if (!Precision.equals(scale,0)) {       double h=0;       for (int i=high; i >= m; i--) {         ort[i]=householderVectors[i][m - 1] / scale;         h+=ort[i] * ort[i];       }       final double g=(ort[m] > 0) ? -FastMath.sqrt(h) : FastMath.sqrt(h);       h-=ort[m] * g;       ort[m]-=g;       for (int j=m; j < n; j++) {         double f=0;         for (int i=high; i >= m; i--) {           f+=ort[i] * householderVectors[i][j];         }         f/=h;         for (int i=m; i <= high; i++) {           householderVectors[i][j]-=f * ort[i];         }       }       for (int i=0; i <= high; i++) {         double f=0;         for (int j=high; j >= m; j--) {           f+=ort[j] * householderVectors[i][j];         }         f/=h;         for (int j=m; j <= high; j++) {           householderVectors[i][j]-=f * ort[j];         }       }       ort[m]=scale * ort[m];       householderVectors[m][m - 1]=scale * g;     }   } } "
"public static TableColumnInfo createTableMetadata(Connection connection,String schema,String tableName,String fullyQualifiedTableName) throws SQLException {   DatabaseMetaData metaData=connection.getMetaData();   ResultSet resultSet=null;   String catalog=null;   String dbSchema=null;   String dbName=null;   boolean tableExists=false;   try {     resultSet=metaData.getTables(null,schema,tableName,null);     if (resultSet.next()) {       catalog=resultSet.getString(\"TABLE_CAT\");       dbSchema=resultSet.getString(\"TABLE_SCHEM\");       dbName=resultSet.getString(\"TABLE_NAME\");       if (dbSchema == null) {         dbSchema=schema;       }       if (resultSet.next()) {         throw new SQLException(\"Too many tables matching tablename '\" + tableName + \"' and schema '\"+ schema+ \"'.\");       }       tableExists=true;     }   }   finally {     close(resultSet);   }   if (!tableExists) {     return null;   }   List columns=new ArrayList();   try {     resultSet=metaData.getColumns(null,schema,tableName,null);     while (resultSet.next()) {       String columnName=resultSet.getString(\"COLUMN_NAME\");       int dataType=resultSet.getInt(\"DATA_TYPE\");       int columnSize=resultSet.getInt(\"COLUMN_SIZE\");       int scale=resultSet.getInt(\"DECIMAL_DIGITS\");       int ordinalPosition=resultSet.getInt(\"ORDINAL_POSITION\");       int nullable=resultSet.getInt(\"NULLABLE\");       ColumnInfo columnInfo=new ColumnInfo(columnName,dataType,columnSize,columnSize,scale,ordinalPosition,nullable == DatabaseMetaData.columnNullable);       columns.add(columnInfo);     }   }   finally {     close(resultSet);   }   return new TableColumnInfo(catalog,dbSchema,dbName,(ColumnInfo[])columns.toArray(new ColumnInfo[columns.size()])); } "
"public LeaseException(){   super(); } "
"public Iterator<T> iterator(){   return iterator; } "
"private static CopyState readCopyState(DataInput in) throws IOException {   byte[] infosBytes=new byte[in.readVInt()];   in.readBytes(infosBytes,0,infosBytes.length);   long gen=in.readVLong();   long version=in.readVLong();   Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in);   int count=in.readVInt();   Set<String> completedMergeFiles=new HashSet<>();   for (int i=0; i < count; i++) {     completedMergeFiles.add(in.readString());   }   long primaryGen=in.readVLong();   return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null); } "
"public boolean simulate_natives(){   return soot.PhaseOptions.getBoolean(options,\"simulate-natives\"); } "
"@Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {   writeText4Links();   if (!ignoreElement(uri,localName,qName,atts)) {     elementLevel++;     nsSupport.pushContext();     if (forceDTD && !hasOutputDTD) {       startDTD(localName == null ? qName : localName,\"\",\"\");     }     write('<');     writeName(uri,localName,qName,true);     writeAttributes(atts);     if (elementLevel == 1) {       forceNSDecls();     }     if (!mOmitXHTMLNamespace || !\"html\".equalsIgnoreCase(localName)) {       writeNSDecls();     }     write('>');     if (htmlMode && (qName.equals(\"script\") || qName.equals(\"style\"))) {       cdataElement=true;     }     if (htmlMode && localName.equals(\"a\")) {       mIgnoreChars=true;     }     super.startElement(uri,localName,qName,atts);   } } "
"public static String parseCharset(Map<String,String> headers,String defaultCharset){   String contentType=headers.get(HTTP.CONTENT_TYPE);   if (contentType != null) {     String[] params=contentType.split(\";\");     for (int i=1; i < params.length; i++) {       String[] pair=params[i].trim().split(\"=\");       if (pair.length == 2) {         if (pair[0].equals(\"charset\")) {           return pair[1];         }       }     }   }   return defaultCharset; } "
"public void addGroup(OptionGroup group){   if (group != null) {     this.optionMap.put(group.getId().toString(),group);     this.optionList.add(group);   } } "
"public static NameValue create(String name,String value){   NameValue h=new NameValue();   h.name=name;   h.value=value;   return h; } "
"public final int yylength(){   return zzMarkedPos - zzStartRead; } "
"public static void d(String tag,String msg){   if (isDebug) {     Log.d(tag,msg);   } } "
"public boolean isAnnotated(){   return isSource || isSink || isNeitherNor; } "
"@Override protected Expression generateExpression(){   Expression expression=null;   if (inlineGML != null) {     String text=inlineGML.getInlineFeatures();     if ((text != null) && !text.isEmpty()) {       expression=getFilterFactory().literal(text);     }   }   return expression; } "
"public boolean isCritical(){   return true; } "
"private ArrayList<OWASPResult> loadDatabase(){   ArrayList<OWASPResult> database=new ArrayList<>();   try {     Gson gson=new GsonBuilder().create();     OWASPResult[] myArray=gson.fromJson(new FileReader(this.DATABASEPATH),OWASPResult[].class);     database=new ArrayList<>(Arrays.asList(myArray));   }  catch (  FileNotFoundException|JsonSyntaxException ex) {     System.out.println(ex);   }   return database; } "
"public static void parse(String pathString,Path p){   int n=pathString.length();   ParserHelper ph=new ParserHelper(pathString,0);   ph.skipWhitespace();   float lastX=0;   float lastY=0;   float lastX1=0;   float lastY1=0;   float subPathStartX=0;   float subPathStartY=0;   char prevCmd=0;   while (ph.pos < n) {     char cmd=pathString.charAt(ph.pos); switch (cmd) { case '-': case '+': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':       if (prevCmd == 'm' || prevCmd == 'M') {         cmd=(char)(((int)prevCmd) - 1);         break;       }  else       if (prevCmd == 'c' || prevCmd == 'C') {         cmd=prevCmd;         break;       }  else       if (prevCmd == 'l' || prevCmd == 'L') {         cmd=prevCmd;         break;       } default : {       ph.advance();       prevCmd=cmd;     } } boolean wasCurve=false; switch (cmd) { case 'M': case 'm': {     float x=ph.nextFloat();     float y=ph.nextFloat();     if (cmd == 'm') {       subPathStartX+=x;       subPathStartY+=y;       p.rMoveTo(x,y);       lastX+=x;       lastY+=y;     }  else {       subPathStartX=x;       subPathStartY=y;       p.moveTo(x,y);       lastX=x;       lastY=y;     }     break;   } case 'Z': case 'z': {   p.close();   p.moveTo(subPathStartX,subPathStartY);   lastX=subPathStartX;   lastY=subPathStartY;   lastX1=subPathStartX;   lastY1=subPathStartY;   wasCurve=true;   break; } case 'L': case 'l': { float x=ph.nextFloat(); float y=ph.nextFloat(); if (cmd == 'l') {   p.rLineTo(x,y);   lastX+=x;   lastY+=y; }  else {   p.lineTo(x,y);   lastX=x;   lastY=y; } break; } case 'H': case 'h': { float x=ph.nextFloat(); if (cmd == 'h') { p.rLineTo(x,0); lastX+=x; }  else { p.lineTo(x,lastY); lastX=x; } break; } case 'V': case 'v': { float y=ph.nextFloat(); if (cmd == 'v') { p.rLineTo(0,y); lastY+=y; }  else { p.lineTo(lastX,y); lastY=y; } break; } case 'C': case 'c': { wasCurve=true; float x1=ph.nextFloat(); float y1=ph.nextFloat(); float x2=ph.nextFloat(); float y2=ph.nextFloat(); float x=ph.nextFloat(); float y=ph.nextFloat(); if (cmd == 'c') { x1+=lastX; x2+=lastX; x+=lastX; y1+=lastY; y2+=lastY; y+=lastY; } p.cubicTo(x1,y1,x2,y2,x,y); lastX1=x2; lastY1=y2; lastX=x; lastY=y; break; } case 'S': case 's': { wasCurve=true; float x2=ph.nextFloat(); float y2=ph.nextFloat(); float x=ph.nextFloat(); float y=ph.nextFloat(); if (cmd == 's') { x2+=lastX; x+=lastX; y2+=lastY; y+=lastY; } float x1=2 * lastX - lastX1; float y1=2 * lastY - lastY1; p.cubicTo(x1,y1,x2,y2,x,y); lastX1=x2; lastY1=y2; lastX=x; lastY=y; break; } case 'A': case 'a': { float rx=ph.nextFloat(); float ry=ph.nextFloat(); float theta=ph.nextFloat(); int largeArc=(int)ph.nextFloat(); int sweepArc=(int)ph.nextFloat(); float x=ph.nextFloat(); float y=ph.nextFloat(); drawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc); lastX=x; lastY=y; break; } } if (!wasCurve) { lastX1=lastX; lastY1=lastY; } ph.skipWhitespace(); } } "
"public Builder keyboardPanOffset(Number keyboardPanOffset){   this.keyboardPanOffset=keyboardPanOffset;   return this; } "
"public Fraction multiply(final int i){   return new Fraction(numerator * i,denominator); } "
"public ReplicationFilterException(String message){   super(message); } "
"public boolean catchableAsAllOf(ThrowableSet set,List<RefType> members){   boolean result=true;   for (  RefType member : members) {     result=result && set.catchableAs(member);   }   return result; } "
"private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){   BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);   output.clear();   for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {     for (int x=0; x < input[0].length; x++) {       if (input[y][x] == 1) {         output.set(x + margin,yOutput);       }     }   }   return output; } "
"public JSearchPanel(Visualization vis,String group,String field,boolean autoIndex,boolean monitorKeystrokes){   this(vis,group,Visualization.SEARCH_ITEMS,new String[]{field},autoIndex,true); } "
"public static <K,R>Flowable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends Publisher<? extends R>> mapOfCases,Publisher<? extends R> defaultCase){   ObjectHelper.requireNonNull(caseSelector,\"caseSelector is null\");   ObjectHelper.requireNonNull(mapOfCases,\"mapOfCases is null\");   ObjectHelper.requireNonNull(defaultCase,\"defaultCase is null\");   return RxJavaPlugins.onAssembly(new FlowableSwitchCase<R,K>(caseSelector,mapOfCases,defaultCase)); } "
"public Builder format(String format){   this.format=format;   return this; } "
"private List<Map<String,byte[]>> prepareFavorites(){   List<Map<String,byte[]>> queryResult=new ArrayList<>();   for (int i=0; i < 8; ++i) {     Map<String,byte[]> row=new HashMap<>();     byte[] id=new byte[16];     new Random().nextBytes(id);     id[0]=(byte)i;     row.put(\"experiment_id\",id);     queryResult.add(row);   }   return queryResult; } "
"public void traverseExpressionTree(ExpNode root) throws SQLException {   if (root != null) {     Stack<ExpNode> stack=new Stack<ExpNode>();     Stack<ExpNode> stack2=new Stack<ExpNode>();     stack.push(root);     while (!stack.isEmpty()) {       ExpNode curr=stack.pop();       stack2.push(curr);       if (curr.getLeftChild() != null)       stack.push(curr.getLeftChild());       if (curr.getRightChild() != null)       stack.push(curr.getRightChild());     }     while (!stack2.isEmpty()) {       ExpNode node=stack2.pop();       node.accept(this);       if (node.getTemplate() == null) {         if (node.getLeftChild() != null && node.getLeftChild().getTemplate() != null)         node.getLeftChild().getTemplate().prepareForSpace(query.getTypeInfo());         if (node.getRightChild() != null && node.getRightChild().getTemplate() != null)         node.getRightChild().getTemplate().prepareForSpace(query.getTypeInfo());       }  else       if (stack2.isEmpty()) {         node.getTemplate().prepareForSpace(query.getTypeInfo());       }     }   }   if (query.isJoined()) {     buildJoinInfo();   } } "
"@Override public final void separator(short separator,Augmentations augs) throws XNIException {   if (separator == XMLDTDContentModelHandler.SEPARATOR_CHOICE) {     fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_CHOICE;   }  else   if (separator == XMLDTDContentModelHandler.SEPARATOR_SEQUENCE) {     fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_SEQ;   } } "
"public InfoflowResults runInfoflow(ResultsAvailableHandler onResultsAvailable){   if (this.sourceSinkProvider == null)   throw new RuntimeException(\"Sources and/or sinks not calculated yet\");   System.out.println(\"Running data flow analysis on \" + apkFileLocation + \" with \"+ getSources().size()+ \" sources and \"+ getSinks().size()+ \" sinks...\");   Infoflow info;   if (cfgFactory == null)   info=new Infoflow(androidJar,forceAndroidJar,null,new DefaultPathBuilderFactory(pathBuilder,computeResultPaths));  else   info=new Infoflow(androidJar,forceAndroidJar,cfgFactory,new DefaultPathBuilderFactory(pathBuilder,computeResultPaths));   final String path;   if (forceAndroidJar)   path=androidJar;  else   path=Scene.v().getAndroidJarPath(androidJar,apkFileLocation);   info.setTaintWrapper(taintWrapper);   if (onResultsAvailable != null)   info.addResultsAvailableHandler(onResultsAvailable);   System.out.println(\"Starting infoflow computation...\");   info.setSootConfig(sootConfig);   info.setStopAfterFirstFlow(stopAfterFirstFlow);   info.setEnableImplicitFlows(enableImplicitFlows);   info.setEnableStaticFieldTracking(enableStaticFields);   info.setEnableExceptionTracking(enableExceptions);   Infoflow.setAccessPathLength(accessPathLength);   info.setFlowSensitiveAliasing(flowSensitiveAliasing);   info.setIgnoreFlowsInSystemPackages(ignoreFlowsInSystemPackages);   info.setCodeEliminationMode(codeEliminationMode);   info.setInspectSources(false);   info.setInspectSinks(false);   info.setCallgraphAlgorithm(callgraphAlgorithm);   if (null != ipcManager) {     info.setIPCManager(ipcManager);   }   info.computeInfoflow(apkFileLocation,path,entryPointCreator,sourceSinkManager);   icfg=info.getiCfg();   this.maxMemoryConsumption=info.getMaxMemoryConsumption();   return info.getResults(); } "
"private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,String queryString){   GraqlLexer lexer=getLexer(queryString);   GraqlErrorListener errorListener=new GraqlErrorListener(queryString);   lexer.removeErrorListeners();   lexer.addErrorListener(errorListener);   CommonTokenStream tokens=new CommonTokenStream(lexer);   return parseQueryFragment(parseRule,visit,errorListener,tokens); } "
"public ResourceLazyLoadingScript type(String type){   this.type=type;   return this; } "
"public VideoGetQueryWithExtended albumId(Integer value){   return unsafeParam(\"album_id\",value); } "
"@Override public double[] makeCumulativeTestPoints(){   return new double[]{-0.5001,-0.5,-0.4999,-0.25,-0.0001,0.0,0.0001,0.25,1.0,1.2499,1.25,1.2501}; } "
"public final int computeHashCode(short val){   return HashFunctions.hash(val); } "
"public void onNewIntent(Intent intent){   if (mInitializationComplete) {     mActivityDelegate.onNewIntentWithNative(intent);   }  else {     if (mPendingNewIntents == null)     mPendingNewIntents=new ArrayList<Intent>(1);     mPendingNewIntents.add(intent);   } } "
"public long nextLong(long least,long bound){   if (least >= bound)   throw new IllegalArgumentException();   return nextLong(bound - least) + least; } "
"public TransformWork withConsole(Console newConsole){   return new TransformWork(checkoutDir,metadata,changes,Preconditions.checkNotNull(newConsole)); } "
"public static long hash64(final byte[] data,int length){   return hash64(data,length,0xe17a1465); } "
"public boolean isSendInstallEvent(){   return mSendInstallEvent; } "
"void applyFacets(XSFacets facets,short presentFacet,short fixedFacet,short patternType,ValidationContext context) throws InvalidDatatypeFacetException {   if (fIsImmutable)   return;   ValidatedInfo tempInfo=new ValidatedInfo();   fFacetsDefined=0;   fFixedFacet=0;   int result=0;   short allowedFacet=fDVs[fValidationDV].getAllowedFacets();   if ((presentFacet & FACET_LENGTH) != 0) {     if ((allowedFacet & FACET_LENGTH) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"length\",fTypeName});     }  else {       fLength=facets.length;       lengthAnnotation=facets.lengthAnnotation;       fFacetsDefined|=FACET_LENGTH;       if ((fixedFacet & FACET_LENGTH) != 0)       fFixedFacet|=FACET_LENGTH;     }   }   if ((presentFacet & FACET_MINLENGTH) != 0) {     if ((allowedFacet & FACET_MINLENGTH) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"minLength\",fTypeName});     }  else {       fMinLength=facets.minLength;       minLengthAnnotation=facets.minLengthAnnotation;       fFacetsDefined|=FACET_MINLENGTH;       if ((fixedFacet & FACET_MINLENGTH) != 0)       fFixedFacet|=FACET_MINLENGTH;     }   }   if ((presentFacet & FACET_MAXLENGTH) != 0) {     if ((allowedFacet & FACET_MAXLENGTH) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"maxLength\",fTypeName});     }  else {       fMaxLength=facets.maxLength;       maxLengthAnnotation=facets.maxLengthAnnotation;       fFacetsDefined|=FACET_MAXLENGTH;       if ((fixedFacet & FACET_MAXLENGTH) != 0)       fFixedFacet|=FACET_MAXLENGTH;     }   }   if ((presentFacet & FACET_PATTERN) != 0) {     if ((allowedFacet & FACET_PATTERN) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"pattern\",fTypeName});     }  else {       patternAnnotations=facets.patternAnnotations;       RegularExpression regex=null;       try {         regex=new RegularExpression(facets.pattern,\"X\",context.getLocale());       }  catch (      Exception e) {         reportError(\"InvalidRegex\",new Object[]{facets.pattern,e.getLocalizedMessage()});       }       if (regex != null) {         fPattern=new Vector();         fPattern.addElement(regex);         fPatternStr=new Vector();         fPatternStr.addElement(facets.pattern);         fFacetsDefined|=FACET_PATTERN;         if ((fixedFacet & FACET_PATTERN) != 0)         fFixedFacet|=FACET_PATTERN;       }     }   }   if ((presentFacet & FACET_WHITESPACE) != 0) {     if ((allowedFacet & FACET_WHITESPACE) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"whiteSpace\",fTypeName});     }  else {       fWhiteSpace=facets.whiteSpace;       whiteSpaceAnnotation=facets.whiteSpaceAnnotation;       fFacetsDefined|=FACET_WHITESPACE;       if ((fixedFacet & FACET_WHITESPACE) != 0)       fFixedFacet|=FACET_WHITESPACE;     }   }   if ((presentFacet & FACET_ENUMERATION) != 0) {     if ((allowedFacet & FACET_ENUMERATION) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"enumeration\",fTypeName});     }  else {       Vector enumVals=facets.enumeration;       int size=enumVals.size();       fEnumeration=new ValidatedInfo[size];       Vector enumNSDecls=facets.enumNSDecls;       ValidationContextImpl ctx=new ValidationContextImpl(context);       enumerationAnnotations=facets.enumAnnotations;       fEnumerationSize=0;       for (int i=0; i < size; i++) {         if (enumNSDecls != null)         ctx.setNSContext((NamespaceContext)enumNSDecls.elementAt(i));         try {           ValidatedInfo info=getActualEnumValue((String)enumVals.elementAt(i),ctx,null);           fEnumeration[fEnumerationSize++]=info;         }  catch (        InvalidDatatypeValueException ide) {           reportError(\"enumeration-valid-restriction\",new Object[]{enumVals.elementAt(i),this.getBaseType().getName()});         }       }       fFacetsDefined|=FACET_ENUMERATION;       if ((fixedFacet & FACET_ENUMERATION) != 0)       fFixedFacet|=FACET_ENUMERATION;     }   }   if ((presentFacet & FACET_MAXINCLUSIVE) != 0) {     if ((allowedFacet & FACET_MAXINCLUSIVE) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"maxInclusive\",fTypeName});     }  else {       maxInclusiveAnnotation=facets.maxInclusiveAnnotation;       try {         fMaxInclusive=fBase.getActualValue(facets.maxInclusive,context,tempInfo,true);         fFacetsDefined|=FACET_MAXINCLUSIVE;         if ((fixedFacet & FACET_MAXINCLUSIVE) != 0)         fFixedFacet|=FACET_MAXINCLUSIVE;       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.maxInclusive,\"maxInclusive\",fBase.getName()});       }       if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {         if ((fBase.fFixedFacet & FACET_MAXINCLUSIVE) != 0) {           if (fDVs[fValidationDV].compare(fMaxInclusive,fBase.fMaxInclusive) != 0)           reportError(\"FixedFacetValue\",new Object[]{\"maxInclusive\",fMaxInclusive,fBase.fMaxInclusive,fTypeName});         }       }       try {         fBase.validate(context,tempInfo);       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.maxInclusive,\"maxInclusive\",fBase.getName()});       }     }   }   boolean needCheckBase=true;   if ((presentFacet & FACET_MAXEXCLUSIVE) != 0) {     if ((allowedFacet & FACET_MAXEXCLUSIVE) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"maxExclusive\",fTypeName});     }  else {       maxExclusiveAnnotation=facets.maxExclusiveAnnotation;       try {         fMaxExclusive=fBase.getActualValue(facets.maxExclusive,context,tempInfo,true);         fFacetsDefined|=FACET_MAXEXCLUSIVE;         if ((fixedFacet & FACET_MAXEXCLUSIVE) != 0)         fFixedFacet|=FACET_MAXEXCLUSIVE;       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.maxExclusive,\"maxExclusive\",fBase.getName()});       }       if (((fBase.fFacetsDefined & FACET_MAXEXCLUSIVE) != 0)) {         result=fDVs[fValidationDV].compare(fMaxExclusive,fBase.fMaxExclusive);         if ((fBase.fFixedFacet & FACET_MAXEXCLUSIVE) != 0 && result != 0) {           reportError(\"FixedFacetValue\",new Object[]{\"maxExclusive\",facets.maxExclusive,fBase.fMaxExclusive,fTypeName});         }         if (result == 0) {           needCheckBase=false;         }       }       if (needCheckBase) {         try {           fBase.validate(context,tempInfo);         }  catch (        InvalidDatatypeValueException ide) {           reportError(ide.getKey(),ide.getArgs());           reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.maxExclusive,\"maxExclusive\",fBase.getName()});         }       }  else       if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {         if (fDVs[fValidationDV].compare(fMaxExclusive,fBase.fMaxInclusive) > 0) {           reportError(\"maxExclusive-valid-restriction.2\",new Object[]{facets.maxExclusive,fBase.fMaxInclusive});         }       }     }   }   needCheckBase=true;   if ((presentFacet & FACET_MINEXCLUSIVE) != 0) {     if ((allowedFacet & FACET_MINEXCLUSIVE) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"minExclusive\",fTypeName});     }  else {       minExclusiveAnnotation=facets.minExclusiveAnnotation;       try {         fMinExclusive=fBase.getActualValue(facets.minExclusive,context,tempInfo,true);         fFacetsDefined|=FACET_MINEXCLUSIVE;         if ((fixedFacet & FACET_MINEXCLUSIVE) != 0)         fFixedFacet|=FACET_MINEXCLUSIVE;       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.minExclusive,\"minExclusive\",fBase.getName()});       }       if (((fBase.fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {         result=fDVs[fValidationDV].compare(fMinExclusive,fBase.fMinExclusive);         if ((fBase.fFixedFacet & FACET_MINEXCLUSIVE) != 0 && result != 0) {           reportError(\"FixedFacetValue\",new Object[]{\"minExclusive\",facets.minExclusive,fBase.fMinExclusive,fTypeName});         }         if (result == 0) {           needCheckBase=false;         }       }       if (needCheckBase) {         try {           fBase.validate(context,tempInfo);         }  catch (        InvalidDatatypeValueException ide) {           reportError(ide.getKey(),ide.getArgs());           reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.minExclusive,\"minExclusive\",fBase.getName()});         }       }  else       if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0)) {         if (fDVs[fValidationDV].compare(fMinExclusive,fBase.fMinInclusive) < 0) {           reportError(\"minExclusive-valid-restriction.3\",new Object[]{facets.minExclusive,fBase.fMinInclusive});         }       }     }   }   if ((presentFacet & FACET_MININCLUSIVE) != 0) {     if ((allowedFacet & FACET_MININCLUSIVE) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"minInclusive\",fTypeName});     }  else {       minInclusiveAnnotation=facets.minInclusiveAnnotation;       try {         fMinInclusive=fBase.getActualValue(facets.minInclusive,context,tempInfo,true);         fFacetsDefined|=FACET_MININCLUSIVE;         if ((fixedFacet & FACET_MININCLUSIVE) != 0)         fFixedFacet|=FACET_MININCLUSIVE;       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.minInclusive,\"minInclusive\",fBase.getName()});       }       if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0)) {         if ((fBase.fFixedFacet & FACET_MININCLUSIVE) != 0) {           if (fDVs[fValidationDV].compare(fMinInclusive,fBase.fMinInclusive) != 0)           reportError(\"FixedFacetValue\",new Object[]{\"minInclusive\",facets.minInclusive,fBase.fMinInclusive,fTypeName});         }       }       try {         fBase.validate(context,tempInfo);       }  catch (      InvalidDatatypeValueException ide) {         reportError(ide.getKey(),ide.getArgs());         reportError(\"FacetValueFromBase\",new Object[]{fTypeName,facets.minInclusive,\"minInclusive\",fBase.getName()});       }     }   }   if ((presentFacet & FACET_TOTALDIGITS) != 0) {     if ((allowedFacet & FACET_TOTALDIGITS) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"totalDigits\",fTypeName});     }  else {       totalDigitsAnnotation=facets.totalDigitsAnnotation;       fTotalDigits=facets.totalDigits;       fFacetsDefined|=FACET_TOTALDIGITS;       if ((fixedFacet & FACET_TOTALDIGITS) != 0)       fFixedFacet|=FACET_TOTALDIGITS;     }   }   if ((presentFacet & FACET_FRACTIONDIGITS) != 0) {     if ((allowedFacet & FACET_FRACTIONDIGITS) == 0) {       reportError(\"cos-applicable-facets\",new Object[]{\"fractionDigits\",fTypeName});     }  else {       fFractionDigits=facets.fractionDigits;       fractionDigitsAnnotation=facets.fractionDigitsAnnotation;       fFacetsDefined|=FACET_FRACTIONDIGITS;       if ((fixedFacet & FACET_FRACTIONDIGITS) != 0)       fFixedFacet|=FACET_FRACTIONDIGITS;     }   }   if (patternType != SPECIAL_PATTERN_NONE) {     fPatternType=patternType;   }   if (fFacetsDefined != 0) {     if (((fFacetsDefined & FACET_MINLENGTH) != 0) && ((fFacetsDefined & FACET_MAXLENGTH) != 0)) {       if (fMinLength > fMaxLength)       reportError(\"minLength-less-than-equal-to-maxLength\",new Object[]{Integer.toString(fMinLength),Integer.toString(fMaxLength),fTypeName});     }     if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {       reportError(\"maxInclusive-maxExclusive\",new Object[]{fMaxInclusive,fMaxExclusive,fTypeName});     }     if (((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {       reportError(\"minInclusive-minExclusive\",new Object[]{fMinInclusive,fMinExclusive,fTypeName});     }     if (((fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {       result=fDVs[fValidationDV].compare(fMinInclusive,fMaxInclusive);       if (result != -1 && result != 0)       reportError(\"minInclusive-less-than-equal-to-maxInclusive\",new Object[]{fMinInclusive,fMaxInclusive,fTypeName});     }     if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {       result=fDVs[fValidationDV].compare(fMinExclusive,fMaxExclusive);       if (result != -1 && result != 0)       reportError(\"minExclusive-less-than-equal-to-maxExclusive\",new Object[]{fMinExclusive,fMaxExclusive,fTypeName});     }     if (((fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && ((fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {       if (fDVs[fValidationDV].compare(fMinExclusive,fMaxInclusive) != -1)       reportError(\"minExclusive-less-than-maxInclusive\",new Object[]{fMinExclusive,fMaxInclusive,fTypeName});     }     if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {       if (fDVs[fValidationDV].compare(fMinInclusive,fMaxExclusive) != -1)       reportError(\"minInclusive-less-than-maxExclusive\",new Object[]{fMinInclusive,fMaxExclusive,fTypeName});     }     if (((fFacetsDefined & FACET_FRACTIONDIGITS) != 0) && ((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {       if (fFractionDigits > fTotalDigits)       reportError(\"fractionDigits-totalDigits\",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fTotalDigits),fTypeName});     }     if ((fFacetsDefined & FACET_LENGTH) != 0) {       if ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0 && fLength < fBase.fMinLength) {         reportError(\"length-minLength-maxLength.1.1\",new Object[]{fTypeName,Integer.toString(fLength),Integer.toString(fBase.fMinLength)});       }       if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0 && fLength > fBase.fMaxLength) {         reportError(\"length-minLength-maxLength.2.1\",new Object[]{fTypeName,Integer.toString(fLength),Integer.toString(fBase.fMaxLength)});       }       if ((fBase.fFacetsDefined & FACET_LENGTH) != 0) {         if (fLength != fBase.fLength)         reportError(\"length-valid-restriction\",new Object[]{Integer.toString(fLength),Integer.toString(fBase.fLength),fTypeName});       }     }     if ((fBase.fFacetsDefined & FACET_LENGTH) != 0 || (fFacetsDefined & FACET_LENGTH) != 0) {       if ((fFacetsDefined & FACET_MINLENGTH) != 0) {         if (fBase.fLength < fMinLength) {           reportError(\"length-minLength-maxLength.1.1\",new Object[]{fTypeName,Integer.toString(fBase.fLength),Integer.toString(fMinLength)});         }         if ((fBase.fFacetsDefined & FACET_MINLENGTH) == 0) {           reportError(\"length-minLength-maxLength.1.2.a\",new Object[]{fTypeName});         }         if (fMinLength != fBase.fMinLength) {           reportError(\"length-minLength-maxLength.1.2.b\",new Object[]{fTypeName,Integer.toString(fMinLength),Integer.toString(fBase.fMinLength)});         }       }       if ((fFacetsDefined & FACET_MAXLENGTH) != 0) {         if (fBase.fLength > fMaxLength) {           reportError(\"length-minLength-maxLength.2.1\",new Object[]{fTypeName,Integer.toString(fBase.fLength),Integer.toString(fMaxLength)});         }         if ((fBase.fFacetsDefined & FACET_MAXLENGTH) == 0) {           reportError(\"length-minLength-maxLength.2.2.a\",new Object[]{fTypeName});         }         if (fMaxLength != fBase.fMaxLength) {           reportError(\"length-minLength-maxLength.2.2.b\",new Object[]{fTypeName,Integer.toString(fMaxLength),Integer.toString(fBase.fBase.fMaxLength)});         }       }     }     if (((fFacetsDefined & FACET_MINLENGTH) != 0)) {       if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {         if (fMinLength > fBase.fMaxLength) {           reportError(\"minLength-less-than-equal-to-maxLength\",new Object[]{Integer.toString(fMinLength),Integer.toString(fBase.fMaxLength),fTypeName});         }       }  else       if ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0) {         if ((fBase.fFixedFacet & FACET_MINLENGTH) != 0 && fMinLength != fBase.fMinLength) {           reportError(\"FixedFacetValue\",new Object[]{\"minLength\",Integer.toString(fMinLength),Integer.toString(fBase.fMinLength),fTypeName});         }         if (fMinLength < fBase.fMinLength) {           reportError(\"minLength-valid-restriction\",new Object[]{Integer.toString(fMinLength),Integer.toString(fBase.fMinLength),fTypeName});         }       }     }     if (((fFacetsDefined & FACET_MAXLENGTH) != 0) && ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0)) {       if (fMaxLength < fBase.fMinLength) {         reportError(\"minLength-less-than-equal-to-maxLength\",new Object[]{Integer.toString(fBase.fMinLength),Integer.toString(fMaxLength)});       }     }     if ((fFacetsDefined & FACET_MAXLENGTH) != 0) {       if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {         if (((fBase.fFixedFacet & FACET_MAXLENGTH) != 0) && fMaxLength != fBase.fMaxLength) {           reportError(\"FixedFacetValue\",new Object[]{\"maxLength\",Integer.toString(fMaxLength),Integer.toString(fBase.fMaxLength),fTypeName});         }         if (fMaxLength > fBase.fMaxLength) {           reportError(\"maxLength-valid-restriction\",new Object[]{Integer.toString(fMaxLength),Integer.toString(fBase.fMaxLength),fTypeName});         }       }     }     if (((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {       if (((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0)) {         if ((fBase.fFixedFacet & FACET_TOTALDIGITS) != 0 && fTotalDigits != fBase.fTotalDigits) {           reportError(\"FixedFacetValue\",new Object[]{\"totalDigits\",Integer.toString(fTotalDigits),Integer.toString(fBase.fTotalDigits),fTypeName});         }         if (fTotalDigits > fBase.fTotalDigits) {           reportError(\"totalDigits-valid-restriction\",new Object[]{Integer.toString(fTotalDigits),Integer.toString(fBase.fTotalDigits),fTypeName});         }       }     }     if ((fFacetsDefined & FACET_FRACTIONDIGITS) != 0) {       if ((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0) {         if (fFractionDigits > fBase.fTotalDigits)         reportError(\"fractionDigits-totalDigits\",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fTotalDigits),fTypeName});       }     }     if (((fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {       if (((fBase.fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {         if (((fBase.fFixedFacet & FACET_FRACTIONDIGITS) != 0 && fFractionDigits != fBase.fFractionDigits) || (fValidationDV == DV_INTEGER && fFractionDigits != 0)) {           reportError(\"FixedFacetValue\",new Object[]{\"fractionDigits\",Integer.toString(fFractionDigits),Integer.toString(fBase.fFractionDigits),fTypeName});         }         if (fFractionDigits > fBase.fFractionDigits) {           reportError(\"fractionDigits-valid-restriction\",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fBase.fFractionDigits),fTypeName});         }       }  else       if (fValidationDV == DV_INTEGER && fFractionDigits != 0) {         reportError(\"FixedFacetValue\",new Object[]{\"fractionDigits\",Integer.toString(fFractionDigits),\"0\",fTypeName});       }     }     if ((fFacetsDefined & FACET_WHITESPACE) != 0 && (fBase.fFacetsDefined & FACET_WHITESPACE) != 0) {       if ((fBase.fFixedFacet & FACET_WHITESPACE) != 0 && fWhiteSpace != fBase.fWhiteSpace) {         reportError(\"FixedFacetValue\",new Object[]{\"whiteSpace\",whiteSpaceValue(fWhiteSpace),whiteSpaceValue(fBase.fWhiteSpace),fTypeName});       }       if (fWhiteSpace == WS_PRESERVE && fBase.fWhiteSpace == WS_COLLAPSE) {         reportError(\"whiteSpace-valid-restriction.1\",new Object[]{fTypeName,\"preserve\"});       }       if (fWhiteSpace == WS_REPLACE && fBase.fWhiteSpace == WS_COLLAPSE) {         reportError(\"whiteSpace-valid-restriction.1\",new Object[]{fTypeName,\"replace\"});       }       if (fWhiteSpace == WS_PRESERVE && fBase.fWhiteSpace == WS_REPLACE) {         reportError(\"whiteSpace-valid-restriction.2\",new Object[]{fTypeName});       }     }   }   if ((fFacetsDefined & FACET_LENGTH) == 0 && (fBase.fFacetsDefined & FACET_LENGTH) != 0) {     fFacetsDefined|=FACET_LENGTH;     fLength=fBase.fLength;     lengthAnnotation=fBase.lengthAnnotation;   }   if ((fFacetsDefined & FACET_MINLENGTH) == 0 && (fBase.fFacetsDefined & FACET_MINLENGTH) != 0) {     fFacetsDefined|=FACET_MINLENGTH;     fMinLength=fBase.fMinLength;     minLengthAnnotation=fBase.minLengthAnnotation;   }   if ((fFacetsDefined & FACET_MAXLENGTH) == 0 && (fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {     fFacetsDefined|=FACET_MAXLENGTH;     fMaxLength=fBase.fMaxLength;     maxLengthAnnotation=fBase.maxLengthAnnotation;   }   if ((fBase.fFacetsDefined & FACET_PATTERN) != 0) {     if ((fFacetsDefined & FACET_PATTERN) == 0) {       fFacetsDefined|=FACET_PATTERN;       fPattern=fBase.fPattern;       fPatternStr=fBase.fPatternStr;       patternAnnotations=fBase.patternAnnotations;     }  else {       for (int i=fBase.fPattern.size() - 1; i >= 0; --i) {         fPattern.addElement(fBase.fPattern.elementAt(i));         fPatternStr.addElement(fBase.fPatternStr.elementAt(i));       }       if (fBase.patternAnnotations != null) {         if (patternAnnotations != null) {           for (int i=fBase.patternAnnotations.getLength() - 1; i >= 0; --i) {             patternAnnotations.addXSObject(fBase.patternAnnotations.item(i));           }         }  else {           patternAnnotations=fBase.patternAnnotations;         }       }     }   }   if ((fFacetsDefined & FACET_WHITESPACE) == 0 && (fBase.fFacetsDefined & FACET_WHITESPACE) != 0) {     fFacetsDefined|=FACET_WHITESPACE;     fWhiteSpace=fBase.fWhiteSpace;     whiteSpaceAnnotation=fBase.whiteSpaceAnnotation;   }   if ((fFacetsDefined & FACET_ENUMERATION) == 0 && (fBase.fFacetsDefined & FACET_ENUMERATION) != 0) {     fFacetsDefined|=FACET_ENUMERATION;     fEnumeration=fBase.fEnumeration;     fEnumerationSize=fBase.fEnumerationSize;     enumerationAnnotations=fBase.enumerationAnnotations;   }   if (((fBase.fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {     fFacetsDefined|=FACET_MAXEXCLUSIVE;     fMaxExclusive=fBase.fMaxExclusive;     maxExclusiveAnnotation=fBase.maxExclusiveAnnotation;   }   if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {     fFacetsDefined|=FACET_MAXINCLUSIVE;     fMaxInclusive=fBase.fMaxInclusive;     maxInclusiveAnnotation=fBase.maxInclusiveAnnotation;   }   if (((fBase.fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {     fFacetsDefined|=FACET_MINEXCLUSIVE;     fMinExclusive=fBase.fMinExclusive;     minExclusiveAnnotation=fBase.minExclusiveAnnotation;   }   if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0) && !((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {     fFacetsDefined|=FACET_MININCLUSIVE;     fMinInclusive=fBase.fMinInclusive;     minInclusiveAnnotation=fBase.minInclusiveAnnotation;   }   if (((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0) && !((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {     fFacetsDefined|=FACET_TOTALDIGITS;     fTotalDigits=fBase.fTotalDigits;     totalDigitsAnnotation=fBase.totalDigitsAnnotation;   }   if (((fBase.fFacetsDefined & FACET_FRACTIONDIGITS) != 0) && !((fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {     fFacetsDefined|=FACET_FRACTIONDIGITS;     fFractionDigits=fBase.fFractionDigits;     fractionDigitsAnnotation=fBase.fractionDigitsAnnotation;   }   if ((fPatternType == SPECIAL_PATTERN_NONE) && (fBase.fPatternType != SPECIAL_PATTERN_NONE)) {     fPatternType=fBase.fPatternType;   }   fFixedFacet|=fBase.fFixedFacet;   calcFundamentalFacets(); } "
"public void loadMoreComplate(){   isLoadingMoreData=false;   if (mFooterView != null) {     if (isManualLoadMoreData) {       mFooterView.getLayoutParams().height=0;     }  else {       mFooterView.setVisibility(GONE);     }   }   getAdapter().notifyDataSetChanged(); } "
"private int initFromStream(final InputStream is) throws MathIllegalStateException, IOException {   for (int i=1; i <= BITS; i++) {     direction[0][i]=1l << (BITS - i);   }   final Charset charset=Charset.forName(FILE_CHARSET);   final BufferedReader reader=new BufferedReader(new InputStreamReader(is,charset));   int dim=-1;   try {     reader.readLine();     int lineNumber=2;     int index=1;     String line=null;     while ((line=reader.readLine()) != null) {       StringTokenizer st=new StringTokenizer(line,\" \");       try {         dim=Integer.parseInt(st.nextToken());         if (dim >= 2 && dim <= dimension) {           final int s=Integer.parseInt(st.nextToken());           final int a=Integer.parseInt(st.nextToken());           final int[] m=new int[s + 1];           for (int i=1; i <= s; i++) {             m[i]=Integer.parseInt(st.nextToken());           }           initDirectionVector(index++,a,m);         }         if (dim > dimension) {           return dim;         }       }  catch (      NoSuchElementException|NumberFormatException e) {         throw new MathIllegalStateException(LocalizedCoreFormats.CANNOT_PARSE,line,lineNumber);       }       lineNumber++;     }   }   finally {     reader.close();   }   return dim; } "
"public ChangeEntriesSpaceOperationRequest(){ } "
"protected boolean isObjectLikeType(Type tp){   if (!(tp instanceof RefType))   return false;   RefType rt=(RefType)tp;   return rt.getSootClass().getName().equals(\"java.lang.Object\") || rt.getSootClass().getName().equals(\"java.io.Serializable\") || rt.getSootClass().getName().equals(\"java.lang.Cloneable\"); } "
"private int measureShort(int measureSpec){   int result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if (specMode == MeasureSpec.EXACTLY) {     result=specSize;   }  else {     result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return result; } "
"public void clearAll(){   if (items != null) {     items.clear();   }   if (emptyItems != null) {     emptyItems.clear();   } } "
"public static String toString(URL url,String encoding) throws IOException {   return toString(url,Charsets.toCharset(encoding)); } "
"private void writeItemStones(ByteBuffer buf){   Item item=ownerItem;   int count=0;   if (item.hasManaStones()) {     Set<ManaStone> itemStones=item.getItemStones();     ArrayList<ManaStone> basicStones=new ArrayList<ManaStone>();     ArrayList<ManaStone> ancientStones=new ArrayList<ManaStone>();     for (    ManaStone itemStone : itemStones) {       if (itemStone.isBasic()) {         basicStones.add(itemStone);       }  else {         ancientStones.add(itemStone);       }     }     if (item.getItemTemplate().getSpecialSlots() > 0) {       if (ancientStones.size() > 0) {         for (        ManaStone ancientStone : ancientStones) {           if (count == 6) {             break;           }           writeD(buf,ancientStone.getItemId());           count++;         }       }       for (int i=count; i < item.getItemTemplate().getSpecialSlots(); i++) {         writeD(buf,0);         count++;       }     }     for (    ManaStone basicStone : basicStones) {       if (count == 6) {         break;       }       writeD(buf,basicStone.getItemId());       count++;     }     skip(buf,(6 - count) * 4);   }  else {     skip(buf,24);   } } "
"public Shape triangle_right(float x,float y,float height){   m_path.reset();   m_path.moveTo(x,y + height);   m_path.lineTo(x + height,y + height / 2);   m_path.lineTo(x,y);   m_path.closePath();   return m_path; } "
"public void apply(ProgressListener progress) throws CanceledException {   progress.setSubtask(\"Computing graph layout\");   progress.setMaximum(-1);   progress.setProgress(0);   Set<Edge> pathEdges=new HashSet<>();   if (paths != null) {     for (    Node[] path : paths) {       for (int i=0; i < path.length - 1; i++) {         Node v=path[i];         for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {           if (e.getTarget() == path[i + 1])           pathEdges.add(e);         }       }     }   }   final FruchtermanReingoldLayout fruchtermanReingoldLayout=new FruchtermanReingoldLayout(overlapGraph,null);   NodeArray<Point2D> coordinates=new NodeArray<>(overlapGraph);   fruchtermanReingoldLayout.apply(1000,coordinates);   for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {     graphView.setLocation(v,coordinates.get(v));     graphView.setHeight(v,5);     graphView.setWidth(v,5);   }   for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {     graphView.setDirection(e,EdgeView.DIRECTED);     if (pathEdges.contains(e)) {       graphView.setLineWidth(e,2);       graphView.setLineWidth(e.getSource(),2);       graphView.setLineWidth(e.getTarget(),2);     }   }   JFrame frame=new JFrame(\"Assembly Graph\");   graphView.setFrame(frame);   frame.setSize(graphView.getSize());   frame.setLocation(100,100);   frame.addKeyListener(graphView.getGraphViewListener());   frame.getContentPane().setLayout(new BorderLayout());   frame.getContentPane().add(graphView.getScrollPane(),BorderLayout.CENTER);   frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);   CommandManager commandManager=new CommandManager(dir,graphView,new String[]{\"megan.commands\"});   commandManager.addCommands(this,Collections.singletonList((ICommand)(new SelectFromPreviousWindowCommand())),true);   MenuConfiguration menuConfig=GUIConfiguration.getMenuConfiguration();   MenuBar menuBar=new jloda.gui.MenuBar(menuConfig,commandManager);   frame.setJMenuBar(menuBar);   Rectangle2D bbox=graphView.getBBox();   graphView.trans.setCoordinateRect(bbox);   frame.setVisible(true);   graphView.getScrollPane().revalidate();   graphView.centerGraph();   if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted(); } "
"public void showMetrics(){   timer.show(toString()); } "
"public boolean isApplicable(){   return getViewer().isPCoATab(); } "
"@Override public int available() throws IOException {   throw exception; } "
"private void drawSun(Canvas canvas){   final Matrix matrix=mMatrix;   matrix.reset();   float dragPercent=Math.min(1f,Math.abs(mPercent));   final float offsetX=isRefreshing ? mScreenWidth / 2 * (2 - dragPercent) - mSunWidth / 2 : (mScreenWidth * dragPercent - mSunWidth) / 2;   final float offsetY=totalDistance * func(dragPercent);   matrix.preRotate(mSunRotateAngle == 0.0f ? (360 * dragPercent) : mSunRotateAngle,mSunWidth / 2,mSunHeight / 2);   matrix.postTranslate(offsetX,offsetY);   canvas.drawBitmap(mSun,matrix,null); } "
"@Override public Object clone() throws CloneNotSupportedException {   return super.clone(); } "
"@Override public void onPatchPackageCheckFail(File patchFile,boolean isUpgradePatch,int errorCode){   TinkerLog.i(TAG,\"patchReporter: package check failed. path:%s, isUpgrade:%b, code:%d\",patchFile.getAbsolutePath(),isUpgradePatch,errorCode);   if (errorCode == ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED) {     Tinker.with(context).cleanPatchByVersion(patchFile);   } } "
"@Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augmentations) throws XNIException { } "
"public static String returnWindowsFileAppropriateName(String nameOfFile){   return nameOfFile.replaceAll(\" \",\"\").replace(\":\",\"-\"); } "
"@deprecated public static int indexOf(CharSequence s,int codePoint){   int cp;   for (int i=0; i < s.length(); i+=Character.charCount(cp)) {     cp=Character.codePointAt(s,i);     if (cp == codePoint) {       return i;     }   }   return -1; } "
"public Builder tileSize(Number tileSize){   this.tileSize=tileSize;   return this; } "
"public static String makeLogTag(Class cls){   return makeLogTag(cls.getSimpleName()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_A_TO_B(String skillcaster,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1201026,skillcaster,skilltarget,skillname); } "
"public ThreadList(int iMaxThreads){   super(iMaxThreads); } "
"public static String checkCreateUpdateAnonUser(HttpServletRequest request,HttpServletResponse response){   throw new UnsupportedOperationException(\"Not implemented\"); } "
"private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){   for (  ByteBuffer buffer : dictionaryValueBufferList) {     int length=buffer.limit();     byte[] value=new byte[length];     buffer.get(value,0,value.length);     dictionaryValues.add(value);   } } "
"public double calcCoexistenceImportance(String sNode){   VertexImpl v=new VertexImpl();   v.setLabel(sNode);   return calcCoexistenceImportance(v); } "
"public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){   Window window=activity.getWindow();   ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);   View mChildView=mContentView.getChildAt(0);   if (mChildView != null) {     ViewCompat.setFitsSystemWindows(mChildView,false);   }   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {     int statusBarHeight=getStatusBarHeight(activity);     window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {       window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);       if (hideStatusBarBackground) {         window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);         window.setStatusBarColor(COLOR_TRANSLUCENT);       }  else {         window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));       }       if (mChildView != null) {         ViewCompat.requestApplyInsets(mChildView);       }     }  else {       ViewGroup mDecorView=(ViewGroup)window.getDecorView();       if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {         mChildView=mDecorView.getChildAt(0);         mContentView.removeView(mChildView);         mChildView=mContentView.getChildAt(0);         if (mChildView != null) {           FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();           if (lp != null && lp.topMargin >= statusBarHeight) {             lp.topMargin-=statusBarHeight;             mChildView.setLayoutParams(lp);           }         }         mDecorView.setTag(false);       }     }   } } "
"public boolean bottomAllowed(){   return (myFlags & BOTTOM_EDGE) != 0; } "
"public static String wordPunc(Item item) throws ProcessException {   Item ww=item.getItemAs(Relation.TOKEN);   if (ww != null && ww.getNext() != null) {     return \"\";   }  else {     if (ww != null && ww.getParent() != null) {       return ww.getParent().getFeatures().getString(\"punc\");     }  else {       return \"\";     }   } } "
"private InputStream toBufferedInputStream(){   int remaining=count;   if (remaining == 0) {     return new ClosedInputStream();   }   List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());   for (  byte[] buf : buffers) {     int c=Math.min(buf.length,remaining);     list.add(new ByteArrayInputStream(buf,0,c));     remaining-=c;     if (remaining == 0) {       break;     }   }   return new SequenceInputStream(Collections.enumeration(list)); } "
"protected void deleteExceptionByteArrayRef(SuspendedJobEntity jobEntity){   ByteArrayRef exceptionByteArrayRef=jobEntity.getExceptionByteArrayRef();   if (exceptionByteArrayRef != null) {     exceptionByteArrayRef.delete();   } } "
"@Override public boolean treeExpanded(Object selectedItem){   return false; } "
"private boolean focusCenter(){   return !showGuidelines(); } "
"public Vector3f multNormal(Vector3f vec,Vector3f store){   if (store == null) {     store=new Vector3f();   }   float vx=vec.x, vy=vec.y, vz=vec.z;   store.x=m00 * vx + m01 * vy + m02 * vz;   store.y=m10 * vx + m11 * vy + m12 * vz;   store.z=m20 * vx + m21 * vy + m22 * vz;   return store; } "
"private Vector2D create(){   final double t=randomDataGenerator.nextUniform(0,MathUtils.TWO_PI);   final double pX=randomDataGenerator.nextNormal(x,xSigma) + radius * FastMath.cos(t);   final double pY=randomDataGenerator.nextNormal(y,ySigma) + radius * FastMath.sin(t);   return new Vector2D(pX,pY); } "
"public GroupsGetMembersQueryWithFields(VkApiClient client,List<UserField> fields){   super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);   fields(fields); } "
"public boolean isCritical(){   return true; } "
"public void startSorting() throws CarbonSortKeyAndGroupByException {   LOGGER.info(\"File based sorting will be used\");   if (this.entryCount > 0) {     Object[][] toSort;     toSort=new Object[entryCount][];     System.arraycopy(recordHolderList,0,toSort,0,entryCount);     if (parameters.getNoDictionaryCount() > 0) {       Arrays.sort(toSort,new RowComparator(parameters.getNoDictionaryDimnesionColumn(),parameters.getNoDictionaryCount()));     }  else {       Arrays.sort(toSort,new RowComparatorForNormalDims(parameters.getDimColCount()));     }     recordHolderList=toSort;     File file=new File(parameters.getTempFileLocation() + File.separator + parameters.getTableName()+ System.nanoTime()+ CarbonCommonConstants.SORT_TEMP_FILE_EXT);     writeDataTofile(recordHolderList,this.entryCount,file);   }   startFileBasedMerge();   this.recordHolderList=null; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_ENEMY_ATTACK(int num1,String value0){   return new SM_SYSTEM_MESSAGE(1210006,num1,value0); } "
"private void correctTooLow(int childCount){   if (mFirstPosition == 0 && childCount > 0) {     final int firstTop=getScrollChildTop();     final int start=mListPadding.top;     final int end=(getBottom() - getTop()) - mListPadding.bottom;     int topOffset=firstTop - start;     final int lastBottom=getScrollChildBottom();     int lastPosition=mFirstPosition + childCount - 1;     if (topOffset > 0) {       if (lastPosition < mItemCount - 1 || lastBottom > end) {         if (lastPosition == mItemCount - 1) {           topOffset=Math.min(topOffset,lastBottom - end);         }         tryOffsetChildrenTopAndBottom(-topOffset);         if (lastPosition < mItemCount - 1) {           fillDown(lastPosition + 1,getFillChildTop() + mDividerHeight);           adjustViewsUpOrDown();         }       }  else       if (lastPosition == mItemCount - 1) {         adjustViewsUpOrDown();       }     }   } } "
"protected boolean doMatch(String pattern,String path,boolean fullMatch){   if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {     return false;   }   String[] pattDirs=tokenizeToStringArray(pattern,this.pathSeparator);   String[] pathDirs=tokenizeToStringArray(path,this.pathSeparator);   int pattIdxStart=0;   int pattIdxEnd=pattDirs.length - 1;   int pathIdxStart=0;   int pathIdxEnd=pathDirs.length - 1;   while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {     String patDir=pattDirs[pattIdxStart];     if (\"**\".equals(patDir)) {       break;     }     if (!matchStrings(patDir,pathDirs[pathIdxStart])) {       return false;     }     pattIdxStart++;     pathIdxStart++;   }   if (pathIdxStart > pathIdxEnd) {     if (pattIdxStart > pattIdxEnd) {       return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));     }     if (!fullMatch) {       return true;     }     if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(\"*\") && path.endsWith(this.pathSeparator)) {       return true;     }     for (int i=pattIdxStart; i <= pattIdxEnd; i++) {       if (!pattDirs[i].equals(\"**\")) {         return false;       }     }     return true;   }  else   if (pattIdxStart > pattIdxEnd) {     return false;   }  else   if (!fullMatch && \"**\".equals(pattDirs[pattIdxStart])) {     return true;   }   while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {     String patDir=pattDirs[pattIdxEnd];     if (patDir.equals(\"**\")) {       break;     }     if (!matchStrings(patDir,pathDirs[pathIdxEnd])) {       return false;     }     pattIdxEnd--;     pathIdxEnd--;   }   if (pathIdxStart > pathIdxEnd) {     for (int i=pattIdxStart; i <= pattIdxEnd; i++) {       if (!pattDirs[i].equals(\"**\")) {         return false;       }     }     return true;   }   while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {     int patIdxTmp=-1;     for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {       if (pattDirs[i].equals(\"**\")) {         patIdxTmp=i;         break;       }     }     if (patIdxTmp == pattIdxStart + 1) {       pattIdxStart++;       continue;     }     int patLength=(patIdxTmp - pattIdxStart - 1);     int strLength=(pathIdxEnd - pathIdxStart + 1);     int foundIdx=-1;     strLoop:     for (int i=0; i <= strLength - patLength; i++) {       for (int j=0; j < patLength; j++) {         String subPat=(String)pattDirs[pattIdxStart + j + 1];         String subStr=(String)pathDirs[pathIdxStart + i + j];         if (!matchStrings(subPat,subStr)) {           continue strLoop;         }       }       foundIdx=pathIdxStart + i;       break;     }     if (foundIdx == -1) {       return false;     }     pattIdxStart=patIdxTmp;     pathIdxStart=foundIdx + patLength;   }   for (int i=pattIdxStart; i <= pattIdxEnd; i++) {     if (!pattDirs[i].equals(\"**\")) {       return false;     }   }   return true; } "
"public int removeEntryIndexedField(IEntryHolder eh,ArrayList<IObjectInfo<IEntryCacheInfo>> deletedBackRefs,K fieldValue,int refpos,boolean removeIndexedValue,IEntryCacheInfo pEntry){   if (_fifoGroupsIndexExtention == null || !removeIndexedValue || fieldValue == null)   return removeEntryIndexedField_impl(eh,deletedBackRefs,fieldValue,refpos,removeIndexedValue,pEntry);  else   return _fifoGroupsIndexExtention.removeEntryIndexedField(eh,deletedBackRefs,fieldValue,refpos,removeIndexedValue,pEntry); } "
"public static Map<String,Object> updateContentMethod(DispatchContext dctx,Map<String,? extends Object> rcontext){   Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);   Delegator delegator=dctx.getDelegator();   LocalDispatcher dispatcher=dctx.getDispatcher();   Map<String,Object> result=FastMap.newInstance();   context.put(\"entityOperation\",\"_UPDATE\");   List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,\"_UPDATE\");   List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);   context.put(\"targetOperationList\",targetOperationList);   context.put(\"contentPurposeList\",contentPurposeList);   GenericValue content=null;   Locale locale=(Locale)context.get(\"locale\");   String contentId=(String)context.get(\"contentId\");   try {     content=EntityQuery.use(delegator).from(\"Content\").where(\"contentId\",contentId).queryOne();   }  catch (  GenericEntityException e) {     Debug.logWarning(e,module);     return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ContentNoContentFound\",UtilMisc.toMap(\"contentId\",contentId),locale));   }   context.put(\"currentContent\",content);   Map<String,Object> permResults=ContentWorker.callContentPermissionCheckResult(delegator,dispatcher,context);   String permissionStatus=(String)permResults.get(\"permissionStatus\");   if (permissionStatus != null && permissionStatus.equalsIgnoreCase(\"granted\")) {     GenericValue userLogin=(GenericValue)context.get(\"userLogin\");     String userLoginId=(String)userLogin.get(\"userLoginId\");     String lastModifiedByUserLogin=userLoginId;     Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();     if (UtilValidate.isNotEmpty(context.get(\"statusId\"))) {       Map<String,Object> statusInMap=UtilMisc.<String,Object>toMap(\"contentId\",context.get(\"contentId\"),\"statusId\",context.get(\"statusId\"),\"userLogin\",userLogin);       try {         dispatcher.runSync(\"setContentStatus\",statusInMap);       }  catch (      GenericServiceException e) {         Debug.logError(e,\"Problem updating content Status\",\"ContentServices\");         return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"ContentStatusUpdateError\",UtilMisc.toMap(\"errorString\",e),locale));       }     }     content.setNonPKFields(context);     content.put(\"lastModifiedByUserLogin\",lastModifiedByUserLogin);     content.put(\"lastModifiedDate\",lastModifiedDate);     try {       content.store();     }  catch (    GenericEntityException e) {       return ServiceUtil.returnError(e.getMessage());     }   }  else {     String errorMsg=ContentWorker.prepPermissionErrorMsg(permResults);     return ServiceUtil.returnError(errorMsg);   }   return result; } "
"public void addGroups(String[] newGroups) throws IOException {   testArrayForNullElement(newGroups);   checkGroups(newGroups); synchronized (registrars) {     if (terminated)     throw new IllegalStateException(\"discovery terminated\");     if (groups == null)     throw new UnsupportedOperationException(\"can't add to \\\"any groups\\\"\");     Collection req=new ArrayList(newGroups.length);     for (int i=0; i < newGroups.length; i++) {       if (groups.add(newGroups[i]))       req.add(newGroups[i]);     }     if (!req.isEmpty())     requestGroups(req);   } } "
"public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){   double dStartWeight=0;   double dIncreaseWeight=0;   if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {     VertexImpl v=new VertexImpl();     v.setLabel(sStartNode);     try {       gGraph.add(v);     }  catch (    Exception e) {       e.printStackTrace();     }     return;   }   java.util.Iterator iIter=lOtherNodes.iterator();   Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);   Vertex vA;   if (vOldA != null)   vA=vOldA;  else {     vA=new VertexImpl();     vA.setLabel(sStartNode);     try {       gGraph.add(vA);     }  catch (    Exception e) {     }   }   List lOldEdges;   lOldEdges=gGraph.getEdges(vA);   int iCnt=0;   while (iIter.hasNext()) {     VertexImpl vB=new VertexImpl();     vB.setLabel((String)iIter.next());     double dOldWeight=0;     double dNewWeight=0;     dStartWeight=ScalingFunction(Math.abs(++iCnt - (lOtherNodes.size() / 2)));     dIncreaseWeight=dStartWeight;     if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);     WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);     if (weCorrectEdge == null)     dNewWeight=dStartWeight;  else {       dOldWeight=weCorrectEdge.getWeight();       dNewWeight=dOldWeight + dIncreaseWeight;     }     try {       if (weCorrectEdge == null) {         WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);         eclLocator.addedEdge(e);       }  else       weCorrectEdge.setWeight(dNewWeight);     }  catch (    Exception e) {       e.printStackTrace();     }   } } "
"public static void validateCmdLineArguments(DppInputParameters inputParameters) throws ArgumentValidationException { switch (inputParameters.getCmdLineArgs().getMode()) { case convert:     validateConvertMode(inputParameters);   break; case metadata: validateMetadataMode(inputParameters); break; case audiomap: validateAudiomapMode(inputParameters); break; default : } } "
"private void openFile(){   stopPreview(true);   mContainerActivity.getFileOperationsHelper().openFile(getFile());   finish(); } "
"@SuppressLint(\"NewApi\") public static void postInvalidateOnAnimation(View view){   if (Build.VERSION.SDK_INT >= 16)   view.postInvalidateOnAnimation();  else   view.postInvalidateDelayed(10); } "
"public boolean splitSymbolizers(){   return splitSymbolizers; } "
"public void testLatestUpdatePersistedToDB(){   DataTagCacheObject floatTag=new DataTagCacheObject();   floatTag.setId(new Long(1000100));   floatTag.setName(\"Test float tag\");   floatTag.setMode(DataTagConstants.MODE_TEST);   floatTag.setDataType(\"Float\");   floatTag.setValue(new Float(10));   floatTag.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 10));   dataTagMapper.insertDataTag(floatTag);   assertNotNull(dataTagMapper.getItem(floatTag.getId()));   dataTagCache.put(floatTag.getId(),floatTag);   DataTagCacheObject cacheObject=(DataTagCacheObject)dataTagCache.get(floatTag.getId());   cacheObject.setValue(new Float(20));   cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis() - 1));   dataTagCache.notifyListenersOfUpdate(cacheObject);   cacheObject.setValue(new Float(30));   cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));   dataTagCache.notifyListenersOfUpdate(cacheObject);   assertEquals(new Float(30),cacheObject.getValue());   try {     Thread.sleep(30000);   }  catch (  InterruptedException e) {     e.printStackTrace();   }   DataTag objectInDB=dataTagMapper.getItem(floatTag.getId());   assertNotNull(objectInDB);   assertEquals(new Float(30),objectInDB.getValue());   dataTagCache.remove(floatTag.getId()); } "
"public Request(byte[] b,int offset){   this.data=b;   this.offset=offset; } "
"public void uncollapseAll(){   getCollapsedIds().clear();   updateTree(); } "
"public XHTMLSerializer(OutputStream output,OutputFormat format){   super(true,format != null ? format : new OutputFormat(Method.XHTML,null,false));   setOutputByteStream(output); } "
"public DirectedGraph load(String fileName) throws IOException, MaryConfigurationException {   InputStream is=new FileInputStream(fileName);   try {     return load(is);   }   finally {     is.close();   } } "
"private static final String toXml(Transform t){   StringBuilder sb=new StringBuilder();   sb.append(\"<Transform>\").append(XmlGenerator.toXml(t.getTranslation(),\"Translation\")).append(\"<Rotation>\").append(Math.toDegrees(t.getRotation())).append(\"</Rotation>\").append(\"</Transform>\");   return sb.toString(); } "
"public void storeOriginals(){   mStartingStartTrim=mStartTrim;   mStartingEndTrim=mEndTrim;   mStartingRotation=mRotation; } "
"public RunnableTaskAdapter(){ } "
"@JsonCreator public DataSourceMetadata(@JsonProperty(\"name\") String name,@JsonProperty(\"properties\") Map<String,String> properties,@JsonProperty(\"segments\") List<DataSegment> segments){   this.name=name;   this.properties=Collections.unmodifiableMap(properties);   this.segments=Collections.unmodifiableList(segments); } "
"private MetadataExportParams filterMetadataOptions(){   MetadataExportParams params=new MetadataExportParams();   params.addQuery(Query.from(schemaService.getSchema(DataElement.class)));   params.addQuery(Query.from(schemaService.getSchema(DataSet.class)));   params.addQuery(Query.from(schemaService.getSchema(DataElementCategoryOptionCombo.class)));   return params; } "
"public DataSourceDescriptor createModelFor(DataSource ds){   return new DefaultDataSourceDescriptor(ds); } "
"private void detectEncoding(char[] cbuf,int off,int len) throws IOException {   int size=len;   StringBuffer xmlProlog=xmlPrologWriter.getBuffer();   if (xmlProlog.length() + len > BUFFER_SIZE) {     size=BUFFER_SIZE - xmlProlog.length();   }   xmlPrologWriter.write(cbuf,off,size);   if (xmlProlog.length() >= 5) {     if (xmlProlog.substring(0,5).equals(\"<?xml\")) {       int xmlPrologEnd=xmlProlog.indexOf(\"?>\");       if (xmlPrologEnd > 0) {         Matcher m=ENCODING_PATTERN.matcher(xmlProlog.substring(0,xmlPrologEnd));         if (m.find()) {           encoding=m.group(1).toUpperCase();           encoding=encoding.substring(1,encoding.length() - 1);         }  else {           encoding=defaultEncoding;         }       }  else {         if (xmlProlog.length() >= BUFFER_SIZE) {           encoding=defaultEncoding;         }       }     }  else {       encoding=defaultEncoding;     }     if (encoding != null) {       xmlPrologWriter=null;       writer=new OutputStreamWriter(out,encoding);       writer.write(xmlProlog.toString());       if (len > size) {         writer.write(cbuf,off + size,len - size);       }     }   } } "
"private static X509Certificate convertToJcaCertificate(X509CertificateHolder bouncyCastleCertificate){   try {     return new JcaX509CertificateConverter().getCertificate(bouncyCastleCertificate);   }  catch (  CertificateException e) {     throw new CertificateCreationException(\"Unable to convert X590CertificateHolder to JCA X590Certificate\",e);   } } "
"private String fixedValue2RelativeValue(String pitchAttribute,double[] baseF0Contour){   pitchAttribute=pitchAttribute.substring(0,pitchAttribute.length() - 2);   double fixedValue=(new Float(pitchAttribute)).doubleValue();   double meanValue=MathUtils.mean(baseF0Contour);   double relative=(100.0 * fixedValue) / meanValue;   if (relative > 100) {     return \"+\" + df.format((relative - 100)) + \"%\";   }   return \"-\" + df.format((100 - relative)) + \"%\"; } "
"public static Patterns jars(String[] includes){   return new Patterns(includes,new String[]{}); } "
"public MannWhitneyUTest(){   naturalRanking=new NaturalRanking(NaNStrategy.FIXED,TiesStrategy.AVERAGE); } "
"public boolean exists(){   return scanner != null; } "
"public TObjectShortHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){   super(initialCapacity,strategy); } "
"public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks){   if (monitor == null)   return new NullProgressMonitor();   if (monitor instanceof NullProgressMonitor)   return monitor;   return new SubProgressMonitor(monitor,ticks,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK); } "
"void discardFromRetired(ResourceKey<K> resourceKey,R resource){   resourceKey.removeFromTransferStack();   lifecycle.onRemoval(resourceKey.getKey(),resource); } "
"private static String readFile(File file,Charset encoding) throws IOException {   byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));   return new String(encoded,encoding); } "
"public void invokeMain(String sClass,String[] args) throws Throwable {   Class<?> clazz=loadClass(sClass);   logInfo(LogArea.CONFIG,\"Launch: %s.main(); Loader: %s\",sClass,clazz.getClassLoader());   Method method=clazz.getMethod(\"main\",new Class<?>[]{String[].class});   boolean bValidModifiers=false;   boolean bValidVoid=false;   if (method != null) {     method.setAccessible(true);     int nModifiers=method.getModifiers();     bValidModifiers=Modifier.isPublic(nModifiers) && Modifier.isStatic(nModifiers);     Class<?> clazzRet=method.getReturnType();     bValidVoid=(clazzRet == void.class);   }   if (method == null || !bValidModifiers || !bValidVoid) {     throw new NoSuchMethodException(\"The main() method in class \\\"\" + sClass + \"\\\" not found.\");   }   try {     method.invoke(null,(Object)args);   }  catch (  InvocationTargetException e) {     throw e.getTargetException();   } } "
"public IncompatibleComparatorException(Throwable cause){   super(cause); } "
"public ArrayFieldVector(FieldVector<T> v1,FieldVector<T> v2) throws NullArgumentException {   MathUtils.checkNotNull(v1);   MathUtils.checkNotNull(v2);   field=v1.getField();   final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();   final T[] v2Data=(v2 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v2).data : v2.toArray();   data=MathArrays.buildArray(field,v1Data.length + v2Data.length);   System.arraycopy(v1Data,0,data,0,v1Data.length);   System.arraycopy(v2Data,0,data,v1Data.length,v2Data.length); } "
"public void reset(){   for (int i=0; i < measureDataChunk.length; i++) {     this.measureDataChunk[i]=null;   }   for (int i=0; i < dimensionDataChunk.length; i++) {     this.dimensionDataChunk[i]=null;   } } "
"private void handlIntroductionRequest(Peer peer,IntroductionRequest message) throws IOException {   peer.setNetworkOperator(message.getNetworkOperator());   peer.setConnectionType((int)message.getConnectionType());   if (peerList.size() > 1) {     Peer invitee=getEligiblePeer(peer);     if (invitee != null) {       sendIntroductionResponse(peer,invitee);       sendPunctureRequest(invitee,peer);       System.out.println(\"Introducing \" + invitee.getAddress() + \" to \"+ peer.getAddress());     }   }  else {     System.out.println(\"Peerlist too small, can't handle introduction request\");     sendIntroductionResponse(peer,null);   } } "
"public void handleEntryTakenSA(EntryTakenPacket packet) throws Exception {   Context context=null;   IEntryHolder entry=packet.getEntryHolder();   boolean anyNotityTakeTemplates=_cacheManager.getTemplatesManager().anyNotifyTakeTemplates();   if (!anyNotityTakeTemplates)   return;   try {     context=_cacheManager.getCacheContext();     context.setFromReplication(packet.isFromReplication());     context.setOperationID(packet.getOperationID());     context.setOperationVisibilityTime(packet.getCreationTime());     NotifyContextsHolder notifyContextHolder=new NotifyContextsHolder(packet.m_EntryValueToNotify,null,context.getOperationID(),NotifyActionType.NOTIFY_TAKE);     _engine.getTemplateScanner().scanNotifyTemplates(notifyContextHolder,context,null,FifoSearch.NO);   }   finally {     _cacheManager.freeCacheContext(context);   } } "
"public synchronized long commit() throws IOException {   long gen;   if (writer != null) {     if (taxoWriter != null) {       taxoWriter.commit();     }     gen=writer.commit();   }  else {     gen=-1;   }   return gen; } "
"public boolean isDir(){   return isDir; } "
"@Override public void close() throws IOException { } "
"public static void validateUTF8(byte[] utf8) throws MalformedInputException {   validateUTF8(utf8,0,utf8.length); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_Recall_CANCEL_EFFECT(String value0){   return new SM_SYSTEM_MESSAGE(1400101,value0); } "
"public static boolean hasJellyBean(){   return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN; } "
"@PostConstruct public void init(){   listenerContainer=cacheRegistrationService.registerToAlarms(this); } "
"private static void usage(boolean printDebugOptions){   SmaliHelpFormatter formatter=new SmaliHelpFormatter();   int consoleWidth=ConsoleUtil.getConsoleWidth();   if (consoleWidth <= 0) {     consoleWidth=80;   }   formatter.setWidth(consoleWidth);   formatter.printHelp(\"java -jar smali.jar [options] [--] [<smali-file>|folder]*\",\"assembles a set of smali files into a dex file\",basicOptions,printDebugOptions ? debugOptions : null); } "
"@Override public void normalize(){   if (isNormalized()) {     return;   }   if (needsSyncChildren()) {     synchronizeChildren();   }   ChildNode kid;   for (kid=firstChild; kid != null; kid=kid.nextSibling) {     kid.normalize();   }   isNormalized(true); } "
"private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){   int numCounters=counters.length;   int total=0;   int patternLength=0;   for (int i=0; i < numCounters; i++) {     total+=counters[i];     patternLength+=pattern[i];   }   if (total < patternLength) {     return Float.POSITIVE_INFINITY;   }   float unitBarWidth=(float)total / patternLength;   maxIndividualVariance*=unitBarWidth;   float totalVariance=0.0f;   for (int x=0; x < numCounters; x++) {     int counter=counters[x];     float scaledPattern=pattern[x] * unitBarWidth;     float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;     if (variance > maxIndividualVariance) {       return Float.POSITIVE_INFINITY;     }     totalVariance+=variance;   }   return totalVariance / total; } "
"private void initSpringSecurity(ServletContext servletContext,EnumSet<DispatcherType> disps){   log.debug(\"Registering Spring Security Filter\");   FilterRegistration.Dynamic springSecurityFilter=servletContext.addFilter(\"springSecurityFilterChain\",new DelegatingFilterProxy());   springSecurityFilter.addMappingForUrlPatterns(disps,false,\"/*\");   springSecurityFilter.setAsyncSupported(true); } "
"public static String toInternalName(SootClass cls){   return toInternalName(cls.getName()); } "
"public CART[] load(int numStates,InputStream treeStream,InputStream pdfStream,PdfFileFormat fileFormat,FeatureDefinition featDefinition,PhoneTranslator phTranslator) throws IOException, MaryConfigurationException {   featDef=featDefinition;   int i, j, length, state;   BufferedReader s=null;   String line, aux;   phTrans=phTranslator;   CART treeSet[]=new CART[numStates];   for (i=0; i < numStates; i++)   treeSet[i]=new CART();   double pdf[][][][];   pdf=loadPdfs(numStates,pdfStream,fileFormat);   assert featDefinition != null : \"Feature Definition was not set\";   s=new BufferedReader(new InputStreamReader(treeStream,\"UTF-8\"));   while ((line=s.readLine()) != null) {     if (line.indexOf(\"QS\") < 0)     break;   }   while ((line=s.readLine()) != null) {     if (line.indexOf(\"{*}\") >= 0) {       aux=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"]\"));       state=Integer.parseInt(aux);       treeSet[state - 2].setRootNode(loadStateTree(s,pdf[state - 2]));       if (treeSet[state - 2].getRootNode() instanceof DecisionNode)       ((DecisionNode)treeSet[state - 2].getRootNode()).countData();       Log.d(Mary.LOG,\"load: CART[\" + (state - 2) + \"], total number of nodes in this CART: \"+ treeSet[state - 2].getNumNodes());     }   }   if (s != null)   s.close();   if (treeSet.length == 0) {     throw new IOException(\"LoadTreeSet: error no trees loaded\");   }   return treeSet; } "
"public synchronized void removeListener(final Long tagId){   listeners.remove(tagId);   eventTimes.remove(tagId); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200675,num0,skillcaster,skillname); } "
"private void addLegionMember(Legion legion,Player player){   addLegionMember(legion,player,LegionRank.VOLUNTEER); } "
"public boolean isReleased(){   return mReleased; } "
"public UrlValidator(String[] schemes,long options){   this(schemes,null,options); } "
"public SimpleModule build(ResourceRegistry resourceRegistry,boolean isClient){   SimpleModule simpleModule=new SimpleModule(JSON_API_MODULE_NAME,new Version(1,0,0,null,null,null));   simpleModule.addSerializer(new ContainerSerializer(resourceRegistry,isClient)).addSerializer(new DataLinksContainerSerializer(resourceRegistry)).addSerializer(new RelationshipContainerSerializer(resourceRegistry,isClient)).addSerializer(new LinkageContainerSerializer()).addSerializer(new BaseResponseSerializer(resourceRegistry)).addSerializer(new ErrorResponseSerializer());   return simpleModule; } "
"public boolean changeUserRole(User user,Role role){   if (!isSelfAdmin()) {     return false;   }   ListIterator<Pair<User,Role>> it=users.listIterator();   while (it.hasNext()) {     Pair<User,Role> pair=it.next();     if (user.equals(pair.getFirst())) {       if (role.equals(pair.getSecond())) {         return false;       }       it.remove();       it.add(new Pair<>(user,role));       skype.changeUserRole(user,role,this);       return true;     }   }   return false; } "
"public boolean commit(){   if (mIsSuccess) {     mDatabase.setTransactionSuccessful();     mDatabase.endTransaction();   }   boolean isRealSuccess=mIsSuccess;   mIsSuccess=false;   return isRealSuccess; } "
"protected DocsEditQuery ownerId(int value){   return unsafeParam(\"owner_id\",value); } "
"public void addField(SootField f){   checkLevel(SIGNATURES);   if (f.isDeclared())   throw new RuntimeException(\"already declared: \" + f.getName());   if (declaresField(f.getName(),f.getType()))   throw new RuntimeException(\"Field already exists : \" + f.getName() + \" of type \"+ f.getType());   fields.add(f);   f.isDeclared=true;   f.declaringClass=this; } "
"protected int do_modify_file(String group_name,String appender_filename,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {   byte[] header;   boolean bNewConnection;   Socket storageSocket;   byte[] hexLenBytes;   byte[] appenderFilenameBytes;   int offset;   long body_len;   if ((group_name == null || group_name.length() == 0) || (appender_filename == null || appender_filename.length() == 0)) {     this.errno=ProtoCommon.ERR_NO_EINVAL;     return this.errno;   }   bNewConnection=this.newUpdatableStorageConnection(group_name,appender_filename);   try {     storageSocket=this.storageServer.getSocket();     appenderFilenameBytes=appender_filename.getBytes(ClientGlobal.g_charset);     body_len=3 * ProtoCommon.FDFS_PROTO_PKG_LEN_SIZE + appenderFilenameBytes.length + modify_size;     header=ProtoCommon.packHeader(ProtoCommon.STORAGE_PROTO_CMD_MODIFY_FILE,body_len,(byte)0);     byte[] wholePkg=new byte[(int)(header.length + body_len - modify_size)];     System.arraycopy(header,0,wholePkg,0,header.length);     offset=header.length;     hexLenBytes=ProtoCommon.long2buff(appender_filename.length());     System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);     offset+=hexLenBytes.length;     hexLenBytes=ProtoCommon.long2buff(file_offset);     System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);     offset+=hexLenBytes.length;     hexLenBytes=ProtoCommon.long2buff(modify_size);     System.arraycopy(hexLenBytes,0,wholePkg,offset,hexLenBytes.length);     offset+=hexLenBytes.length;     OutputStream out=storageSocket.getOutputStream();     System.arraycopy(appenderFilenameBytes,0,wholePkg,offset,appenderFilenameBytes.length);     offset+=appenderFilenameBytes.length;     out.write(wholePkg);     if ((this.errno=(byte)callback.send(out)) != 0) {       return this.errno;     }     ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);     this.errno=pkgInfo.errno;     if (pkgInfo.errno != 0) {       return this.errno;     }     return 0;   }  catch (  IOException ex) {     if (!bNewConnection) {       try {         this.storageServer.close();       }  catch (      IOException ex1) {         ex1.printStackTrace();       }  finally {         this.storageServer=null;       }     }     throw ex;   }  finally {     if (bNewConnection) {       try {         this.storageServer.close();       }  catch (      IOException ex1) {         ex1.printStackTrace();       }  finally {         this.storageServer=null;       }     }   } } "
"public Builder animate(Boolean animate){   this.animate=animate;   return this; } "
"private int[] createPalette(){   int[] palette=new int[PALETTE_SIZE];   float[] hsv=new float[3];   hsv[1]=hsv[2]=1;   for (int i=0; i < PALETTE_SIZE; i++) {     hsv[0]=(HUE_END - HUE_BEGIN) * i / PALETTE_SIZE + HUE_BEGIN;     palette[i]=Color.HSVToColor(hsv);   }   return palette; } "
"public boolean isCritical(){   return true; } "
"public boolean isEntryMethod(SootMethod method){   return !tgtToEdge.containsKey(method); } "
"public static String[] exclude(String... includes){   return includes; } "
"public static Range toRange(ICompilationUnit unit,int offset,int length) throws JavaModelException {   Range result=new Range();   final IBuffer buffer=unit.getBuffer();   int[] loc=JsonRpcHelpers.toLine(buffer,offset);   int[] endLoc=JsonRpcHelpers.toLine(buffer,offset + length);   if (loc != null && endLoc != null) {     result.setStart(new Position().withLine(loc[0]).withCharacter(loc[1]));     result.setEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));   }   return result; } "
"LockHandle(LockManager lockManager,Transaction tx,Object key){   this.lockManager=lockManager;   this.tx=tx;   this.key=key; } "
"public Sample nearestSample(float uIndex,int unitPart){   int i, iSize=0, nSize;   int start=(unitPart == 1) ? 0 : midPoint;   int end=(unitPart == 1) ? midPoint : samples.length;   for (i=start; i < end; i++) {     nSize=iSize + samples[i].getResidualSize();     if (Math.abs(uIndex - (float)iSize) < Math.abs(uIndex - (float)nSize)) {       return samples[i];     }     iSize=nSize;   }   return samples[end - 1]; } "
"public ExecutorDelivery(Executor executor){   mResponsePoster=executor; } "
"public Token(int kind){   this(kind,null); } "
"public final boolean canGetDouble(String field){   Column col=getColumn(field);   return (col == null ? false : col.canGetDouble()); } "
"public void chooseDayNightMode(@AppCompatDelegate.NightMode int mode){   checkInit();   mPreferences.edit().putInt(PREFERENCE_DAYNIGHT_KEY,mode).apply(); } "
"@Override public void scrollToTop(){   view.scrollToTop(); } "
"private <T>T constructObject(Class<T> newClass,Args mode,Stack<Class> stack) throws InstantiationException {   if (Modifier.isAbstract(newClass.getModifiers())) {     throw new InstantiationException();   }   if (Enum.class.isAssignableFrom(newClass)) {     return constructArg(newClass,mode,stack);   }   IllegalArgumentException cause=null;   try {     return newClass.newInstance();   }  catch (  Throwable e) {     cause=new IllegalArgumentException(newClass + \":\" + mode,e);   }   @SuppressWarnings(\"unchecked\") Constructor<T>[] constructors=(Constructor<T>[])newClass.getDeclaredConstructors();   constructor:   for (  Constructor<T> constructor : constructors) {     Class<?>[] argClass=constructor.getParameterTypes();     Object[] args=new Object[argClass.length];     for (int i=0; i < argClass.length; i++) {       Class<?> cls=argClass[i];       if (cls.isAssignableFrom(HashSet.class)) {         cls=HashSet.class;       }  else       if (cls.isAssignableFrom(ArrayList.class)) {         cls=ArrayList.class;       }  else       if (cls.isAssignableFrom(HashMap.class)) {         cls=HashMap.class;       }  else       if (cls.isAssignableFrom(Object[].class)) {         cls=Object[].class;       }       boolean notnull=false;       Args argMode=mode;       for (      Annotation annotation : constructor.getParameterAnnotations()[i]) {         if (annotation.annotationType().isAssignableFrom(NotNull.class)) {           argMode=Args.VALUES;           notnull=true;         }       }       Object arg=(cls == newClass ? null : constructArg(cls,argMode,stack));       if (notnull && arg == null) {         continue constructor;       }       args[i]=arg;     }     try {       constructor.setAccessible(true);       return constructor.newInstance(args);     }  catch (    Throwable e) {       cause=new IllegalArgumentException(constructor + \":\" + mode+ \":\"+ Arrays.asList(args),e);     }   }   throw (InstantiationException)new InstantiationException().initCause(cause); } "
"@Override public double[] makeLogDensityTestValues(){   return new double[]{Double.NEGATIVE_INFINITY,-0.916290731874155,-1.42711635564015,-1.93794197940614,-2.44876760317213,-2.95959322693812,-3.47041885070411,-3.9812444744701,-4.49207009823609,-5.00289572200208,-5.51372134576807,-6.02454696953406,-6.53537259330005,-7.04619821706604,-7.55702384083203,-8.06784946459802,-8.57867508836402,-9.08950071213001,-9.600326335896,-10.111151959662,-10.621977583428,-11.132803207194,-11.64362883096,-12.154454454726,-12.6652800784919,-13.1761057022579,-13.6869313260239,-14.1977569497899,-14.7085825735559,-15.2194081973219}; } "
"@Override public void stop() throws ContainerException {   this.pollTimer.shutdown();   Debug.logWarning(\"stop JavaMail poller\",module); } "
"public BasePanelPadding(Box box){   this.box=box; } "
"@Override public void removeAttributeNS(String namespaceURI,String localName){   if (ownerDocument.errorChecking && isReadOnly()) {     String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NO_MODIFICATION_ALLOWED_ERR\",null);     throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);   }   if (needsSyncData()) {     synchronizeData();   }   if (attributes == null) {     return;   }   attributes.safeRemoveNamedItemNS(namespaceURI,localName); } "
"private void processBE(final char ch[],int offset,final int count){   int curPos=0;   for (int i=0; i < count; ++i) {     final int b0=fBuffer[curPos++] & 0xff;     final int b1=fBuffer[curPos++] & 0xff;     ch[offset++]=(char)((b0 << 8) | b1);   } } "
"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {   PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();   readExternal(in,version); } "
"private static String doGetFullPath(String filename,boolean includeSeparator){   if (filename == null) {     return null;   }   int prefix=getPrefixLength(filename);   if (prefix < 0) {     return null;   }   if (prefix >= filename.length()) {     if (includeSeparator) {       return getPrefix(filename);     }  else {       return filename;     }   }   int index=indexOfLastSeparator(filename);   if (index < 0) {     return filename.substring(0,prefix);   }   int end=index + (includeSeparator ? 1 : 0);   if (end == 0) {     end++;   }   return filename.substring(0,end); } "
"void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){   mListener=listener;   mMediaFactory=mediaFactory; } "
"public GroupsEditLinkQuery editLink(UserActor actor,int groupId,int linkId){   return new GroupsEditLinkQuery(getClient(),actor,groupId,linkId); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1201010,skilltarget,num0,skillcaster,skillname); } "
"protected String resolveExternalSystem(String systemId,String resolver) throws IOException {   Resolver r=queryResolver(resolver,\"i2l\",systemId,null);   if (r != null) {     return r.resolveSystem(systemId);   }  else {     return null;   } } "
"public static boolean removeCount(Context context){   return applyCount(context,0); } "
"private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {   s.defaultReadObject();   if (!(server instanceof RemoteMethodControl)) {     throw new InvalidObjectException(\"TxnMgrAdminProxy.readObject failure - server \" + \"does not implement RemoteMethodControl\");   } } "
"public void registerEvent(Class<? extends Event> event,Listener listener,EventPriority priority,EventExecutor executor,Plugin plugin,boolean ignoreCancelled){   Validate.notNull(listener,\"Listener cannot be null\");   Validate.notNull(priority,\"Priority cannot be null\");   Validate.notNull(executor,\"Executor cannot be null\");   Validate.notNull(plugin,\"Plugin cannot be null\");   if (!plugin.isEnabled()) {     throw new IllegalPluginAccessException(\"Plugin attempted to register \" + event + \" while not enabled\");   }   getEventListeners(event).register(new RegisteredListener(listener,executor,priority,plugin,ignoreCancelled)); } "
"@Deployment(resources={\"org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity.bpmn20.xml\",\"org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity-subprocess.bpmn20.xml\"}) public void testDeleteHistoricProcessInstanceWithCallActivity(){   if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {     ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"callSimpleSubProcess\");     runtimeService.deleteProcessInstance(pi.getId(),\"testing\");     assertEquals(2L,historyService.createHistoricProcessInstanceQuery().count());     historyService.deleteHistoricProcessInstance(pi.getId());     assertEquals(0L,historyService.createHistoricProcessInstanceQuery().count());   } } "
"public NumberRangeModel(double lo,double hi,double min,double max){   this(new Double(lo),new Double(hi),new Double(min),new Double(max)); } "
"public void tabPageLoadStarted(int id){   StripLayoutTab tab=findTabById(id);   if (tab != null)   tab.pageLoadingStarted(); } "
"private void put(final Item i){   if (index > threshold) {     int ll=items.length;     int nl=ll * 2 + 1;     Item[] newItems=new Item[nl];     for (int l=ll - 1; l >= 0; --l) {       Item j=items[l];       while (j != null) {         int index=j.hashCode % newItems.length;         Item k=j.next;         j.next=newItems[index];         newItems[index]=j;         j=k;       }     }     items=newItems;     threshold=(int)(nl * 0.75);   }   int index=i.hashCode % items.length;   i.next=items[index];   items[index]=i; } "
"@Nullable private static String validateTemplate(TemplateMetadata metadata,int currentMinSdk,int buildApi){   if (!metadata.isSupported()) {     return \"This template requires a more recent version of Android Studio. Please update.\";   }   int templateMinSdk=metadata.getMinSdk();   if (templateMinSdk > currentMinSdk && currentMinSdk >= 1) {     return String.format(\"This template requires a minimum SDK version of at least %1$d, and the current min version is %2$d\",templateMinSdk,currentMinSdk);   }   int templateMinBuildApi=metadata.getMinBuildApi();   if (templateMinBuildApi > buildApi && buildApi >= 1) {     return String.format(\"This template requires a build target API version of at least %1$d, and the current version is %2$d\",templateMinBuildApi,buildApi);   }   return null; } "
"public ReadOnlyRequiredException(){   super(\"Not a read-only transaction\"); } "
"private void ensureDataConformance(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException {   if (x == null || y == null) {     throw new NullArgumentException();   }   if (x.length == 0 || y.length == 0) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);   }   MathArrays.checkEqualLength(y,x); } "
"public CriteriaHibernateSpaceDataSourceConfigurer useScrollableResultSet(boolean useScrollableResultSet){   this.useScrollableResultSet=useScrollableResultSet;   return this; } "
"public void load() throws IOException {   if (myFilename == null) {     throw new IOException(\"No filename specified for PreferenceStore.\");   }   FileInputStream in=new FileInputStream(myFilename);   try {     myProperties.load(in);     myChanged=false;   }   finally {     in.close();   } } "
"public static void updateFloat(VisualItem item,String field,float val){   item.setFloat(getStartField(field),item.getFloat(field));   item.setFloat(field,val);   item.setFloat(getEndField(field),val); } "
"public static Zmat ahib(Zmat A,Zmat B) throws JampackException {   Zludpp LU;   A.getProperties();   B.getProperties();   if (A.nr != A.nc)   throw new JampackException(\"Rectangular matrix.\");   if (A.nr != B.nr)   throw new JampackException(\"Inconsistent dimensions.\");   if (Parameters.History) {     A.clean();     if (A.LU == null)     A.LU=new Zludpp(A);     LU=A.LU;   }  else   LU=new Zludpp(A);   return Pivot.rowi(Solve.ahib(LU.L,Solve.ahib(LU.U,B)),LU.pvt); } "
"public void registerForUpdates(){   SigninManager manager=SigninManager.get(getContext());   manager.addSignInAllowedObserver(this);   ProfileDownloader.addObserver(this);   FirstRunSignInProcessor.updateSigninManagerFirstRunCheckDone(getContext()); } "
"public boolean isCritical(){   return true; } "
"protected void render(GL2 gl){   gl.glScaled(SCALE,SCALE,SCALE);   gl.glTranslated(0.0,-1.0,0.0);   for (int i=0; i < this.world.getBodyCount(); i++) {     GameObject go=(GameObject)this.world.getBody(i);     go.render(gl);   } } "
"private static void addProjects(@NonNull LintClient client,@NonNull Module module,@Nullable List<VirtualFile> files,@NonNull Map<Module,Project> moduleMap,@NonNull Map<AndroidLibrary,Project> libraryMap,@NonNull Map<Project,Module> projectMap,@NonNull List<Project> projects){   if (moduleMap.containsKey(module)) {     return;   }   LintModuleProject project=createModuleProject(client,module);   if (project == null) {     List<AndroidFacet> dependentFacets=AndroidUtils.getAllAndroidDependencies(module,false);     for (    AndroidFacet dependentFacet : dependentFacets) {       addProjects(client,dependentFacet.getModule(),files,moduleMap,libraryMap,projectMap,projects);     }     return;   }   projects.add(project);   moduleMap.put(module,project);   projectMap.put(project,module);   if (processFileFilter(module,files,project)) {     return;   }   List<Project> dependencies=Lists.newArrayList();   List<AndroidFacet> dependentFacets=AndroidUtils.getAllAndroidDependencies(module,true);   for (  AndroidFacet dependentFacet : dependentFacets) {     Project p=moduleMap.get(dependentFacet.getModule());     if (p != null) {       dependencies.add(p);     }  else {       addProjects(client,dependentFacet.getModule(),files,moduleMap,libraryMap,projectMap,dependencies);     }   }   AndroidFacet facet=AndroidFacet.getInstance(module);   if (facet != null) {     AndroidGradleModel androidGradleModel=AndroidGradleModel.get(facet);     if (androidGradleModel != null) {       addGradleLibraryProjects(client,files,libraryMap,projects,facet,androidGradleModel,project,projectMap,dependencies);     }   }   project.setDirectLibraries(dependencies); } "
"public boolean isLoadingMore(){   return STATUS.isLoadingMore(mStatus); } "
"private static String nextGraphFileName(Body b,String baseName) throws java.io.IOException {   File dir=makeDirectoryIfMissing(b);   final String prefix=dir.toString() + File.separatorChar + baseName;   File file=null;   int fileNumber=0;   do {     file=new File(prefix + fileNumber + DotGraph.DOT_EXTENSION);     fileNumber++;   }  while (file.exists());   return file.toString(); } "
"Item newFloat(final float value){   key.set(value);   Item result=get(key);   if (result == null) {     pool.putByte(FLOAT).putInt(key.intVal);     result=new Item(index++,key);     put(result);   }   return result; } "
"public ObjectFactory(){ } "
"public ConstraintWidget findWidget(ConstraintWidgetContainer container,float x,float y){   WidgetCompanion companion=(WidgetCompanion)container.getCompanionWidget();   WidgetDecorator containerDecorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);   if (!containerDecorator.isVisible()) {     return null;   }   ConstraintWidget found=null;   if (container == getRoot()) {     found=findWidgetInSelection(x,y);     if (found != null) {       return found;     }   }   int l=container.getDrawX();   int t=container.getDrawY();   int r=l + container.getWidth();   int b=t + container.getHeight();   if (x >= l && x <= r && y >= t && y <= b) {     found=container;   }   for (  ConstraintWidget widget : container.getChildren()) {     WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();     WidgetDecorator widgetDecorator=widgetCompanion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);     if (!widgetDecorator.isVisible()) {       continue;     }     if (widget instanceof ConstraintWidgetContainer) {       ConstraintWidget f=findWidget((ConstraintWidgetContainer)widget,x,y);       if (f != null) {         found=f;       }     }  else {       l=widget.getDrawX();       t=widget.getDrawY();       r=l + widget.getWidth();       b=t + widget.getHeight();       if (x >= l && x <= r && y >= t && y <= b) {         found=widget;       }     }   }   return found; } "
"public ZWaveHailCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){   super(node,controller,endpoint); } "
"private static GenericParser createParser(CarbonColumn carbonColumn,String[] complexDelimiters,int depth){ switch (carbonColumn.getDataType()) { case ARRAY:     List<CarbonDimension> listOfChildDimensions=((CarbonDimension)carbonColumn).getListOfChildDimensions();   ArrayParserImpl arrayParser=new ArrayParserImpl(complexDelimiters[depth]); for (CarbonDimension dimension : listOfChildDimensions) {   arrayParser.addChildren(createParser(dimension,complexDelimiters,depth + 1)); } return arrayParser; case STRUCT: List<CarbonDimension> dimensions=((CarbonDimension)carbonColumn).getListOfChildDimensions(); StructParserImpl parser=new StructParserImpl(complexDelimiters[depth]); for (CarbonDimension dimension : dimensions) { parser.addChildren(createParser(dimension,complexDelimiters,depth + 1)); } return parser; case MAP: throw new UnsupportedOperationException(\"Complex type Map is not supported yet\"); default : return new PrimitiveParserImpl(); } } "
"public void addGeneratedSourceFolder(@NotNull String path){   File directory=myFileStructure.createProjectDir(path);   myGeneratedSourceFolders.add(directory); } "
"public Response doPatch(String url){   return doPatch(url,null); } "
"public static int compare(byte[] buffer1,byte[] buffer2){   if (buffer1 == buffer2) {     return 0;   }   int i=0;   int j=0;   for (; i < buffer1.length && j < buffer2.length; i++, j++) {     int a=(buffer1[i] & 0xff);     int b=(buffer2[j] & 0xff);     if (a != b) {       return a - b;     }   }   return 0; } "
"public Builder enableHighAccuracy(Boolean enableHighAccuracy){   this.enableHighAccuracy=enableHighAccuracy;   return this; } "
"public static final float toJulian(Date date){   Calendar c=Calendar.getInstance();   c.setTime(date);   return toJulian(c); } "
"public static byte[] decode(String s) throws java.io.IOException {   return decode(s,NO_OPTIONS); } "
"Casting(VarAdmin rolePlayer){   this.roleType=Optional.empty();   this.rolePlayer=rolePlayer; } "
"public static Node makeSampleIconFX(Document doc,String sample,boolean setColor,boolean setShape,int size){   final javafx.scene.canvas.Canvas canvas=new javafx.scene.canvas.Canvas(size,size);   Color color=null;   if (setColor) {     color=doc.getSampleAttributeTable().getSampleColor(sample);     if (color == null)     color=doc.getChartColorManager().getSampleColor(sample);   }   final GraphicsContext gc=canvas.getGraphicsContext2D();   if (color != null)   gc.setFill(Utilities.getColorFX(color));   gc.setStroke(javafx.scene.paint.Color.BLACK);   String shapeName=doc.getSampleAttributeTable().getSampleShape(sample);   if (shapeName == null || !setShape)   shapeName=\"square\"; switch (shapeName.toLowerCase()) { case \"triangle\":     if (color != null)     gc.fillPolygon(new double[]{1,size - 1,size / 2},new double[]{size - 1,size - 1,1},3);   gc.strokePolygon(new double[]{1,size - 1,size / 2},new double[]{size - 1,size - 1,1},3); break; case \"diamond\": if (color != null) gc.fillPolygon(new double[]{1,size / 2,size - 1,size / 2},new double[]{size / 2,size - 1,size / 2,1},4); gc.strokePolygon(new double[]{1,size / 2,size - 1,size / 2},new double[]{size / 2,size - 1,size / 2,1},4); break; case \"circle\": if (color != null) gc.fillOval(1,1,size - 2,size - 2); gc.strokeOval(1,1,size - 2,size - 2); break; default : case \"square\": if (color != null) gc.fillRect(1,1,size - 2,size - 2); gc.strokeRect(1,1,size - 2,size - 2); } return canvas; } "
"public final String toJson(){   return getGson().toJson(this); } "
"public void reset(byte[] buf,int offset,int length){   this.buf=buf;   this.offset=offset;   this.length=length; } "
"public static void f(String tag,String msg,Object... args){   if (sLevel > LEVEL_FATAL) {     return;   }   if (args.length > 0) {     msg=String.format(msg,args);   }   Log.wtf(tag,msg); } "
"private void reportDisplaySelection(@Nullable GSAContextDisplaySelection displaySelection){   Tab currentTab=mActivity.getActivityTab();   reportUsageOfCurrentContextIfPossible(currentTab,false,displaySelection); } "
"boolean doesProfileMatch(Experiment experiment,SegmentationProfile segmentationProfile,HttpHeaders headers,Context context){   return doesProfileMatch(experiment,segmentationProfile,headers,context,false); } "
"public boolean skipChar(int c) throws IOException {   if (DEBUG_BUFFER) {     System.out.print(\"(skipChar, '\" + (char)c + \"': \");     XMLEntityManager.print(fCurrentEntity);     System.out.println();   }   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }   int cc=fCurrentEntity.ch[fCurrentEntity.position];   if (cc == c) {     fCurrentEntity.position++;     if (c == '\\n') {       fCurrentEntity.lineNumber++;       fCurrentEntity.columnNumber=1;     }  else {       fCurrentEntity.columnNumber++;     }     if (DEBUG_BUFFER) {       System.out.print(\")skipChar, '\" + (char)c + \"': \");       XMLEntityManager.print(fCurrentEntity);       System.out.println(\" -> true\");     }     return true;   }  else   if (c == '\\n' && cc == '\\r' && fCurrentEntity.isExternal()) {     if (fCurrentEntity.position == fCurrentEntity.count) {       fCurrentEntity.ch[0]=(char)cc;       load(1,false);     }     fCurrentEntity.position++;     if (fCurrentEntity.ch[fCurrentEntity.position] == '\\n') {       fCurrentEntity.position++;     }     fCurrentEntity.lineNumber++;     fCurrentEntity.columnNumber=1;     if (DEBUG_BUFFER) {       System.out.print(\")skipChar, '\" + (char)c + \"': \");       XMLEntityManager.print(fCurrentEntity);       System.out.println(\" -> true\");     }     return true;   }   if (DEBUG_BUFFER) {     System.out.print(\")skipChar, '\" + (char)c + \"': \");     XMLEntityManager.print(fCurrentEntity);     System.out.println(\" -> false\");   }   return false; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_HEAL_TO_ME(int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1201059,num0,skillname); } "
"public void drawResultBitmap(Bitmap barcode){   resultBitmap=barcode;   invalidate(); } "
"protected MessagesGetChatQueryWithFields fields(UserField... value){   return unsafeParam(\"fields\",value); } "
"public static BKTransmitException transmitException(int transmitResult){   return new BKTransmitException(\"Failed to write to bookkeeper; Error is (\" + transmitResult + \") \"+ BKException.getMessage(transmitResult),transmitResult); } "
"public ResourcesPoet addStringArray(String name,@NotNull List<String> values){   Element element=document.createElement(\"string-array\");   element.setAttribute(\"name\",name);   for (  String value : values) {     Element valueElement=document.createElement(\"item\");     valueElement.appendChild(document.createTextNode(value));     element.appendChild(valueElement);   }   resourceElement.appendChild(element);   return this; } "
"private synchronized void addTracker(String path,Object marker,FileDeleteStrategy deleteStrategy){   if (exitWhenFinished) {     throw new IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");   }   if (reaper == null) {     reaper=new Reaper();     reaper.start();   }   trackers.add(new Tracker(path,deleteStrategy,marker,q)); } "
"public JComponent createComponent(){   return createSearchPanel(); } "
"void register(String[] patterns){   for (  String pattern : patterns) {     register(pattern,TRUE);   } } "
"public void addHP(int delta){   if (stats.setHp(stats.getHp() + delta,this)) {     updateSingleStat(MapleStat.HP,stats.getHp());   } } "
"public static String makeLinkAuto(ServletContext servletContext,HttpServletRequest request,HttpServletResponse response,String uri,Boolean fullPath,Boolean secure,Boolean encode){   RequestHandler rh=RequestHandler.getRequestHandler(servletContext);   return rh.makeLinkAuto(request,response,uri,null,null,null,null,fullPath,secure,encode); } "
"private static int toHours(long millis){   return (int)(millis / 1000) / 3600; } "
"public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){   return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg); } "
"public static void addResource(Offer.Builder o,String name){   addResource(o,name,null); } "
"public static void e(String tag,String msg,Throwable tr){   println(ERROR,tag,msg,tr); } "
"public synchronized boolean remove(Object o){   Object[] elements=getArray();   int len=elements.length;   if (len != 0) {     int newlen=len - 1;     Object[] newElements=new Object[newlen];     for (int i=0; i < newlen; ++i) {       if (eq(o,elements[i])) {         for (int k=i + 1; k < len; ++k)         newElements[k - 1]=elements[k];         setArray(newElements);         return true;       }  else       newElements[i]=elements[i];     }     if (eq(o,elements[newlen])) {       setArray(newElements);       return true;     }   }   return false; } "
"private void init(){   parseActions();   parseName(new StringTokenizer(getName(),\" \",true),false); } "
"public MapEntryInfoKey(Object value,Object key){   super(value);   _hashCode=_hashCode ^ key.hashCode();   _key=key; } "
"public TEqualsExtended(Expression expression1,Expression expression2){   super(expression1,expression2); } "
"public TShortObjectHashMap(int initialCapacity,float loadFactor){   super(initialCapacity,loadFactor); } "
"@Override public long blocksAccessed(){   return lhs.blocksAccessed() + rhs.blocksAccessed(); } "
"public ObjectColumn(Class type,int nrows,int capacity,Object defaultValue){   super(type,defaultValue);   if (capacity < nrows) {     throw new IllegalArgumentException(\"Capacity value can not be less than the row count.\");   }   m_values=new Object[capacity];   try {     Cloneable def=(Cloneable)defaultValue;     Method m=def.getClass().getMethod(\"clone\",(Class[])null);     for (int i=0; i < capacity; ++i) {       m_values[i]=m.invoke(m_defaultValue,(Object[])null);     }   }  catch (  Exception e) {     if (defaultValue != null) {       Logger.getLogger(getClass().getName()).fine(\"Default value of type \\\"\" + defaultValue.getClass().getName() + \"\\\" is not \"+ \"cloneable. Using Object reference directly.\");     }     Arrays.fill(m_values,defaultValue);   }   m_size=nrows; } "
"@Override public void onEvent(int event,String path){   Log_OC.d(TAG,\"Got event \" + event + \" on FOLDER \"+ mPath+ \" about \"+ ((path != null) ? path : \"\"));   boolean shouldSynchronize=false; synchronized (mObservedChildren) {     if (path != null && path.length() > 0 && mObservedChildren.containsKey(path)) {       if (((event & FileObserver.MODIFY) != 0) || ((event & FileObserver.ATTRIB) != 0) || ((event & FileObserver.MOVED_TO) != 0)) {         if (mObservedChildren.get(path) != true) {           mObservedChildren.put(path,Boolean.valueOf(true));         }       }       if ((event & FileObserver.CLOSE_WRITE) != 0 && mObservedChildren.get(path)) {         mObservedChildren.put(path,Boolean.valueOf(false));         shouldSynchronize=true;       }     }   }   if (shouldSynchronize) {     startSyncOperation(path);   }   if ((event & IN_IGNORE) != 0 && (path == null || path.length() == 0)) {     Log_OC.d(TAG,\"Stopping the observance on \" + mPath);   } } "
"public void updateFile(OCFile file){   setFile(file); } "
"static void scheduleAt(Activity a,long startTime){   getInstance()._schedule(a,startTime); } "
"@Deployment public void testNonInterruptingSignal(){   ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"nonInterruptingSignalEvent\");   List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();   assertEquals(1,tasks.size());   Task currentTask=tasks.get(0);   assertEquals(\"My User Task\",currentTask.getName());   runtimeService.signalEventReceived(\"alert\");   tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();   assertEquals(2,tasks.size());   for (  Task task : tasks) {     if (!task.getName().equals(\"My User Task\") && !task.getName().equals(\"My Second User Task\")) {       fail(\"Expected: <My User Task> or <My Second User Task> but was <\" + task.getName() + \">.\");     }   }   taskService.complete(taskService.createTaskQuery().taskName(\"My User Task\").singleResult().getId());   tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();   assertEquals(1,tasks.size());   currentTask=tasks.get(0);   assertEquals(\"My Second User Task\",currentTask.getName()); } "
"public ConfigurationNotFoundException(String s,Throwable t){   super(s,t); } "
"@SuppressWarnings(\"deprecation\") void saveLocationServicesState(@NonNull ContentResolver contentResolver){   if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {     originalLocationProviders=Settings.Secure.getString(contentResolver,Settings.Secure.LOCATION_PROVIDERS_ALLOWED);   }  else {     try {       originalLocationMode=Settings.Secure.getInt(contentResolver,Settings.Secure.LOCATION_MODE);     }  catch (    Settings.SettingNotFoundException e) {       Log.e(TAG,\"Error reading location mode settings!\",e);     }   } } "
"public void animateAppearance(){   mOverlayPanel.addToAnimation(this,AnimationType.APPEARANCE,0.f,1.f,ContextualSearchPanelAnimation.BASE_ANIMATION_DURATION_MS,0); } "
"public static void showProgressDialog(final Context context,String tag,final String message){   final Activity activity=getActivity(context);   if (!isAlive(activity) || activity.isFinishing())   return;   if (tag == null)   tag=DEFAULT_TAG;   ProgressDialog dialog=null; synchronized (sLock) {     dialog=findDialog(tag);     if (!isAlive(dialog)) {       if (dialog != null)       sDialogs.remove(dialog);       dialog=new ProgressDialog(context);       dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);       dialog.setCancelable(false);       sDialogs.put(dialog,new Tag(tag,activity.hashCode()));     }   }   dialog.setMessage(message);   dialog.show(); } "
"public boolean isFullyZoomedOutX(){   return !(mScaleX > mMinScaleX || mMinScaleX > 1f); } "
"public List<String> listACL(int from,int to){   AmazonEC2 client=null;   try {     client=getEc2Client();     List<String> ipPermissions=new ArrayList<String>();     if (this.insEnvIdentity.isClassic()) {       DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withGroupNames(Arrays.asList(config.getACLGroupName()));       DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);       for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());       logger.info(\"Fetch current permissions for classic env of running instance\");     }  else {       Filter nameFilter=new Filter().withName(\"group-name\").withValues(config.getACLGroupName());       String vpcid=config.getVpcId();       if (vpcid == null || vpcid.isEmpty()) {         throw new IllegalStateException(\"vpcid is null even though instance is running in vpc.\");       }       Filter vpcFilter=new Filter().withName(\"vpc-id\").withValues(vpcid);       DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withFilters(nameFilter,vpcFilter);       DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);       for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());       logger.info(\"Fetch current permissions for vpc env of running instance\");     }     return ipPermissions;   }   finally {     if (client != null)     client.shutdown();   } } "
"public static int randomNumberBetween(double begin,double end){   if (begin > end)   throw new IllegalArgumentException(\"Begin must not be less than end\");   return (int)begin + (int)(Math.random() * ((end - begin) + 1)); } "
"public static int needInteger(String property) throws NoSuchPropertyException {   String value=getProperty(property);   if (value == null) {     throw new NoSuchPropertyException(\"Missing property `\" + property + \"' in configuration files\");   }   try {     return Integer.decode(value).intValue();   }  catch (  NumberFormatException e) {     throw new NoSuchPropertyException(\"Integer property `\" + property + \"' in configuration files has wrong value `\"+ value+ \"'\");   } } "
"public Builder paddingBottomRight(Point paddingBottomRight){   this.paddingBottomRight=paddingBottomRight;   return this; } "
"@SuppressWarnings(\"rawtypes\") public Expression isInstance(Value obj,Class c){   throw new RuntimeException(\"Unsupported operation.\"); } "
"public int next(){   if (index >= bits.length)   throw new NoSuchElementException();   long k=(save & (save - 1));   long diff=save ^ k;   save=k;   int result=(diff < 0) ? 64 * index + 63 : 64 * index + lookup[(int)(diff % 67)];   if (save == 0) {     index++;     while (index < bits.length && bits[index] == 0L)     index++;     if (index < bits.length)     save=bits[index];   }   return result; } "
"public Entry(char[] ch,int offset,int length,Entry next){   characters=new char[length];   System.arraycopy(ch,offset,characters,0,length);   symbol=new String(characters).intern();   this.next=next; } "
"public VideoGetQueryWithExtended offset(Integer value){   return unsafeParam(\"offset\",value); } "
"public boolean removeDataSet(int index){   if (index >= mDataSets.size() || index < 0)   return false;   T set=mDataSets.get(index);   return removeDataSet(set); } "
"public void endOfSuite() throws InterruptedException {   if (asynchronousThread == null) {     throw new IllegalStateException(\"Reporting thread not yet started\");   }   this.keepRunning=false;   asynchronousThread.join(); } "
"@Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){   PsiFile bestFile=null;   FolderConfiguration bestConfig=null;   for (  PsiFile file : files) {     PsiDirectory qualifiedDirectory=file.getParent();     assert qualifiedDirectory != null : \"Resource file's parent directory cannot be null\";     FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName());     if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) {       bestConfig=config;       bestFile=file;     }   }   return bestFile; } "
"public Matrix plus(Matrix B){   checkMatrixDimensions(B);   Matrix X=new Matrix(m,n);   double[][] C=X.getArray();   for (int i=0; i < m; i++) {     for (int j=0; j < n; j++) {       C[i][j]=A[i][j] + B.A[i][j];     }   }   return X; } "
"public EntityQuery from(String entityName){   this.entityName=entityName;   this.dynamicViewEntity=null;   return this; } "
"private void doPostConfigurationOfSubEquipmentControlTags(){   for (  Long key : getKeys()) {     doPostDbLoading(get(key));   } } "
"public static List<Integer> createColors(int[] colors){   List<Integer> result=new ArrayList<>();   for (  int i : colors) {     result.add(i);   }   return result; } "
"public void buildPathPartWithContextRoot(Appendable buffer,String url) throws WebAppConfigurationException, IOException {   if (contextPath == null) {     throw new IllegalStateException(\"Context path is unknown\");   }   buffer.append(contextPath);   if (!contextPath.endsWith(\"/\") && !url.startsWith(\"/\")) {     buffer.append(\"/\");   }   buffer.append(url); } "
"public TokenizerImpl(){ } "
"public static Page createPage(){   return new Page(Constants.DEFAULT_PREFIX_PAGE + internalId++,true); } "
"static public ObjectInputStream createArtifactObjectInputStream(String pathname) throws IOException {   return new ObjectInputStream(createArtifactInputStream(pathname)); } "
"@deprecated protected int writeValueAndFinal(int i,boolean isFinal){ } "
"private UInteger(int value){   this.value=value & MAX_VALUE; } "
"public boolean isSelected(){   ClusterViewer viewer=getViewer();   return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 1 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode(); } "
"public void copy(DataTable megan4Table){   clear();   StringWriter sw=new StringWriter();   try {     megan4Table.write(sw,false);     read(new BufferedReader(new StringReader(sw.toString())),false);   }  catch (  IOException e) {     Basic.caught(e);   } } "
"private boolean validateWorkspaceLocation(){   int type=getSaveType();   if (wsPathText.getText().equals(\"\")) {     if (type == WORKSPACE && wsBrowsed)     setErrorMessage(Policy.bind(\"GenerateSVNDiff.validFileName\"));     return false;   }   IPath pathToWorkspaceFile=new Path(wsPathText.getText());   IPath containerPath=pathToWorkspaceFile.removeLastSegments(1);   IResource container=ResourcesPlugin.getWorkspace().getRoot().findMember(containerPath);   if (container == null) {     if (type == WORKSPACE)     setErrorMessage(Policy.bind(\"GenerateSVNDiff.validFileName\"));     return false;   }   return true; } "
"@Override public void bindViewHolder(@NonNull ViewHolder viewHolder,@NonNull String item,int position){   Glide.with(viewHolder.itemView.getContext()).load(item).diskCacheStrategy(DiskCacheStrategy.NONE).into(viewHolder.photo);   viewHolder.itemView.setOnClickListener(null); } "
"public Bucket(String label,String experimentId,double allocationPercent,boolean isControl,String description){   this(label,experimentId,allocationPercent,isControl,description,null); } "
"public void showErrorDialog(final int errorCode,final Activity activity,final int requestCode,final OnCancelListener onCancelListener){   final Dialog dialog=GoogleApiAvailability.getInstance().getErrorDialog(activity,errorCode,requestCode,onCancelListener);   if (dialog != null) {     dialog.show();   } } "
"public void dumpRow(PrintStream out){   for (int i=0; i < columnNames.length; i++) {     out.print(\"Column \");     out.print(i);     out.print(\" \");     out.print(columnNames[i]);     out.print(\" : \");     try {       out.println(line[i]);     }  catch (    ArrayIndexOutOfBoundsException aioobe) {       out.println(\"Unable to get cell \" + i + \" of this line\");     }   } } "
"public byte readByte() throws JMSException {   initializeReading();   try {     if (this.dataIn.available() == 0) {       throw new MessageEOFException(\"reached end of data\");     }     this.dataIn.mark(10);     int type=this.dataIn.read();     if (type == _BYTE) {       return this.dataIn.readByte();     }     if (type == _STRING) {       return Byte.valueOf(this.dataIn.readUTF()).byteValue();     }     if (type == _NULL) {       this.dataIn.reset();       throw new NullPointerException(\"Cannot convert _NULL value to byte.\");     }  else {       this.dataIn.reset();       throw new MessageFormatException(\" not a byte type\");     }   }  catch (  NumberFormatException mfe) {     try {       this.dataIn.reset();     }  catch (    IOException ioe) {       JMSException jmsEx=new JMSException(\"reset failed\");       jmsEx.setLinkedException(ioe);     }     throw mfe;   } catch (  EOFException e) {     JMSException jmsEx=new MessageEOFException(e.toString());     jmsEx.setLinkedException(e);     throw jmsEx;   } catch (  IOException e) {     JMSException jmsEx=new MessageFormatException(e.toString());     jmsEx.setLinkedException(e);     throw jmsEx;   } } "
"public void addTypeDecl(TypeDecl node){   List<TypeDecl> list=(parent == null || state == null) ? getTypeDeclListNoTransform() : getTypeDeclList();   list.addChild(node); } "
"static boolean isLaidOut(View view){   if (Build.VERSION.SDK_INT >= 19) {     return view.isLaidOut();   }   return view.getWidth() > 0 && view.getHeight() > 0; } "
"protected IResource[] checkOverwriteOfDirtyResources(IResource[] resources) throws SVNException, InterruptedException {   IResource[] dirtyResources=getModifiedResources(resources,null);   if (dirtyResources == null || dirtyResources.length == 0) {     return resources;   }   PromptingDialog dialog=new PromptingDialog(getShell(),dirtyResources,getPromptCondition(dirtyResources),Policy.bind(\"ReplaceWithAction.confirmOverwrite\"));   return dialog.promptForMultiple(); } "
"public static boolean remove(String id){   id=GROUP + id;   if (cacheSystem != null) {     return cacheSystem.delete(id);   }   return false; } "
"public boolean end(){   outputList.add(new ByteArrayInputStream(outputData));   totBytes+=outputData.length;   return true; } "
"public DatagramPacket readPacket() throws IOException {   DatagramPacket dp=new DatagramPacket(new byte[65535],65535);   try {     socket.receive(dp);     dp.setData(Arrays.copyOf(dp.getData(),dp.getLength()));     return dp;   }  catch (  SocketTimeoutException e) {     return null;   } } "
"public GeometricDistribution(double p) throws MathIllegalArgumentException {   if (p <= 0 || p > 1) {     throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_LEFT,p,0,1);   }   probabilityOfSuccess=p;   logProbabilityOfSuccess=FastMath.log(p);   log1mProbabilityOfSuccess=FastMath.log1p(-p); } "
"public static boolean isXML11Valid(int c){   return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF); } "
"public void notifyDataSourceLoaded(){   for (  DataSourceUpdatedInterface listener : listenerList) {     listener.dataSourceLoaded(getGeometryType(),false);   } } "
"private void broadcastToAllianceMembers(final Player player){   player.getPlayerAlliance2().sendPacket(new SM_MESSAGE(player,message,type)); } "
"public static GenericValue create(GenericPK primaryKey){   GenericValue newValue=new GenericValue();   newValue.init(primaryKey);   return newValue; } "
"public View(String typeName,String sqlExpression,QueryResultType queryResultType,Object... parameters){   super(typeName,sqlExpression,queryResultType,parameters); } "
"public CompletableFuture<NewFile> run(){   LOG.log(Level.FINE,\"starting optimized file creation for {0} files\",files.size());   CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();   final List<TSData> fjpFiles=this.files;   TASK_POOL.execute(null); synchronized (OUTSTANDING) {     OUTSTANDING.add(fileCreation);   }   this.files=new LinkedList<>();   return fileCreation; } "
"@RequestMapping(value=\"/race-data/{id}\",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRaceData(@PathVariable String id){   log.debug(\"REST request to delete RaceData : {}\",id);   raceDataRepository.delete(UUID.fromString(id));   return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(\"raceData\",id.toString())).build(); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_CAN_BUY_ONLY_ONE(String value0){   return new SM_SYSTEM_MESSAGE(1390217,value0); } "
"private static char[] zzUnpackCMap(String packed){   char[] map=new char[0x10000];   int i=0;   int j=0;   while (i < 1790) {     int count=packed.charAt(i++);     char value=packed.charAt(i++);     do     map[j++]=value;  while (--count > 0);   }   return map; } "
"public MessagesMarkAsImportantQuery messageIds(Integer... value){   return unsafeParam(\"message_ids\",value); } "
"Vertex(final Vector2D location){   this.location=location;   this.incoming=null;   this.outgoing=null;   this.lines=new ArrayList<Line>(); } "
"public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){   Map<String,Object> result=createImageMethod(dctx,context);   return result; } "
"@Override public void propagate(GeomPointsTo ptAnalyzer,IWorklist worklist){   int i, j;   AllocNode obj;   SegmentNode pts, pe, int_entry1[], int_entry2[];   PtInsIntervalManager pim1, pim2;   PtInsNode qn, objn;   boolean added, has_new_edges;   if (complex_cons != null) {     for (    Map.Entry<AllocNode,PtInsIntervalManager> entry : new_pts.entrySet()) {       obj=entry.getKey();       int_entry1=entry.getValue().getFigures();       for (      PlainConstraint pcons : complex_cons) {         objn=(PtInsNode)ptAnalyzer.findAndInsertInstanceField(obj,pcons.f);         if (objn == null) {           pt_objs.put(obj,(PtInsIntervalManager)deadManager);           entry.setValue((PtInsIntervalManager)deadManager);           break;         }         if (objn.willUpdate == false) {           continue;         }         qn=(PtInsNode)pcons.otherSide;         for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {           pts=int_entry1[i];           while (pts != null && pts.is_new) { switch (pcons.type) { case Constants.STORE_CONS:               if (qn.add_simple_constraint_3(objn,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.I2,pts.L))               worklist.push(qn);             break; case Constants.LOAD_CONS:           if (objn.add_simple_constraint_3(qn,pts.I2,pcons.code == GeometricManager.ONE_TO_ONE ? pts.I1 : 0,pts.L))           worklist.push(objn);         break;     }     pts=pts.next;   } } } } } for (Map.Entry<PtInsNode,PtInsIntervalManager> entry1 : flowto.entrySet()) { added=false; qn=entry1.getKey(); pim1=entry1.getValue(); int_entry1=pim1.getFigures(); has_new_edges=pim1.isThereUnprocessedFigures(); Map<AllocNode,PtInsIntervalManager> objs=(has_new_edges ? pt_objs : new_pts); for (Map.Entry<AllocNode,PtInsIntervalManager> entry2 : objs.entrySet()) { obj=entry2.getKey(); pim2=entry2.getValue(); if (pim2 == deadManager) continue; if (!ptAnalyzer.castNeverFails(obj.getType(),qn.getWrappedNode().getType())) continue; int_entry2=pim2.getFigures(); for (i=0; i < PtInsIntervalManager.Divisions; ++i) { pts=int_entry2[i]; while (pts != null) {   if (!has_new_edges && !pts.is_new)   break;   for (j=0; j < PtInsIntervalManager.Divisions; ++j) {     pe=int_entry1[j];     while (pe != null) {       if (pts.is_new || pe.is_new) {         if (add_new_points_to_tuple(pts,pe,obj,qn))         added=true;       }  else       break;       pe=pe.next;     }   }   pts=pts.next; } } } if (added) worklist.push(qn); if (has_new_edges) { pim1.flush(); } } } "
"public boolean enclosedBy(NestableTransaction enclosing){   for (NestableServerTransaction ancestor=this.parent; ancestor != null; ancestor=ancestor.parent) {     if (ancestor.equals(enclosing))     return true;   }   return false; } "
"void generateLocalizedFilesWithoutLocaleMapping(Repository repository,FileMatch sourceFileMatch) throws CommandException {   logger.debug(\"Generate localized files (without locale mapping)\");   for (  RepositoryLocale repositoryLocale : repositoryLocalesWithoutRootLocale.values()) {     LocalizedAssetBody localizedAsset=getLocalizedAsset(repository,sourceFileMatch,repositoryLocale,null);     writeLocalizedAssetToTargetDirectory(localizedAsset,sourceFileMatch);   } } "
"public static DataFile readFile(URL fileUrl,URL definitionUrl,String dataFileName) throws DataFileException {   DataFile dataFile=makeDataFile(definitionUrl,dataFileName);   dataFile.readDataFile(fileUrl);   return dataFile; } "
"static public double KL_asymmetric(Distribution p,Distribution q){   double sum=0;   if (p.asTreeMap().size() == q.asTreeMap().size()) {     Iterator iIter=p.asTreeMap().keySet().iterator();     while (iIter.hasNext()) {       Object i=iIter.next();       sum+=p.getValue(i) * Math.log10(p.getValue(i) / q.getValue(i)) / Math.log10(2);     }   }  else {     return 0;   }   return sum; } "
"private IProject[] checkout(IProject[] projects,Map<IProject,LoadInfo> infoMap,IProgressMonitor monitor) throws TeamException, MalformedURLException {   if (projects == null || projects.length == 0) {     return new IProject[0];   }   ISchedulingRule[] ruleArray=new ISchedulingRule[projects.length];   for (int i=0; i < projects.length; i++) {     ruleArray[i]=projects[i].getWorkspace().getRuleFactory().modifyRule(projects[i]);   }   ISchedulingRule rule=MultiRule.combine(ruleArray);   Job.getJobManager().beginRule(rule,monitor);   monitor.beginTask(\"\",1000 * projects.length);   List<IProject> result=new ArrayList<IProject>();   try {     for (    IProject project : projects) {       if (monitor.isCanceled()) {         break;       }       LoadInfo info=infoMap.get(project);       if (info != null && info.checkout(new SubProgressMonitor(monitor,1000))) {         result.add(project);       }     }   }   finally {     Job.getJobManager().endRule(rule);     monitor.done();   }   return result.toArray(new IProject[result.size()]); } "
"public static synchronized DataSourceWindowManager sharedInstance(){   if (sharedInstance == null)   sharedInstance=new DataSourceWindowManager();   return sharedInstance; } "
"private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){   Mode subMode=Mode.ALPHA;   Mode priorToShiftMode=Mode.ALPHA;   int i=0;   while (i < length) {     int subModeCh=textCompactionData[i];     char ch=0; switch (subMode) { case ALPHA:       if (subModeCh < 26) {         ch=(char)('A' + subModeCh);       }  else {         if (subModeCh == 26) {           ch=' ';         }  else         if (subModeCh == LL) {           subMode=Mode.LOWER;         }  else         if (subModeCh == ML) {           subMode=Mode.MIXED;         }  else         if (subModeCh == PS) {           priorToShiftMode=subMode;           subMode=Mode.PUNCT_SHIFT;         }  else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {           result.append((char)byteCompactionData[i]);         }  else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {           subMode=Mode.ALPHA;         }       }     break; case LOWER:   if (subModeCh < 26) {     ch=(char)('a' + subModeCh);   }  else {     if (subModeCh == 26) {       ch=' ';     }  else     if (subModeCh == AS) {       priorToShiftMode=subMode;       subMode=Mode.ALPHA_SHIFT;     }  else     if (subModeCh == ML) {       subMode=Mode.MIXED;     }  else     if (subModeCh == PS) {       priorToShiftMode=subMode;       subMode=Mode.PUNCT_SHIFT;     }  else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {       result.append((char)byteCompactionData[i]);     }  else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {       subMode=Mode.ALPHA;     }   } break; case MIXED: if (subModeCh < PL) { ch=MIXED_CHARS[subModeCh]; }  else { if (subModeCh == PL) {   subMode=Mode.PUNCT; }  else if (subModeCh == 26) {   ch=' '; }  else if (subModeCh == LL) {   subMode=Mode.LOWER; }  else if (subModeCh == AL) {   subMode=Mode.ALPHA; }  else if (subModeCh == PS) {   priorToShiftMode=subMode;   subMode=Mode.PUNCT_SHIFT; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {   result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {   subMode=Mode.ALPHA; } } break; case PUNCT: if (subModeCh < PAL) { ch=PUNCT_CHARS[subModeCh]; }  else { if (subModeCh == PAL) { subMode=Mode.ALPHA; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; case ALPHA_SHIFT: subMode=priorToShiftMode; if (subModeCh < 26) { ch=(char)('A' + subModeCh); }  else { if (subModeCh == 26) { ch=' '; }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; case PUNCT_SHIFT: subMode=priorToShiftMode; if (subModeCh < PAL) { ch=PUNCT_CHARS[subModeCh]; }  else { if (subModeCh == PAL) { subMode=Mode.ALPHA; }  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { result.append((char)byteCompactionData[i]); }  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { subMode=Mode.ALPHA; } } break; } if (ch != 0) { result.append(ch); } i++; } } "
"@Override public void createApplication(Application.Name applicationName){ } "
"@Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException { } "
"public boolean save(File file,boolean async){   this.file=file;   return save(async); } "
"@Override protected void createOrUpgradeTable(SQLiteDatabase db,boolean force){   for (  TableModel tableModel : getAllTableModels()) {     createOrUpgradeTable(tableModel,db,force);   } } "
"public GlobalLexica(Element doc){   Element eLexica=XMLUtils.getFirstElementByTagName(doc,LEXICA);   if (eLexica == null)   return;   setAmbiguityClasses(getGlobalLexicon(eLexica,\"ambiguity_classes\",\"Loading ambiguity classes\"));   setWordClusters(getGlobalLexicon(eLexica,\"word_clusters\",\"Loading word clusters\"));   setWordEmbeddings(getGlobalLexicon(eLexica,\"word_embeddings\",\"Loading word embeddings\"));   setNamedEntityGazetteers(getGlobalLexicon(eLexica,\"named_entity_gazetteers\",\"Loading named entity gazetteers\"));   setStopWords(getGlobalLexicon(eLexica,\"stop_words\",\"Loading stop words\")); } "
"private void handleException(final Call call,final Exception e,final Callback callback){   if (call.isCanceled()) {     callback.onCancellation();   }  else {     callback.onFailure(e);   } } "
"public boolean collideWith(KeyChain other){   if (keys.size() > other.keys.size()) {     return Collections.indexOfSubList(keys,other.keys) == 0;   }  else {     return Collections.indexOfSubList(other.keys,keys) == 0;   } } "
"final public boolean has(String name){   return context != null && context.containsKey(name); } "
"public void shutdown() throws TeamException {   commentsManager.saveCommentHistory();   commentsManager.saveCommentTemplates();   keyFilesManager.saveKeyFilesHistory(); } "
"public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {   writeLines(lines,lineEnding,output,Charset.defaultCharset()); } "
"static void calculate(){   for (  byte levelByte : itemLevels) {     short level=(short)(levelByte & 0xFF);     if (level < 10) {       continue;     }     int countIndex=0;     for (    short countByte : fullCounts) {       short count=(short)(countByte & 0xFF);       int finalLevel=level;       if (finalLevel % 5 == 0) {         finalLevel--;       }       int pointLevel=(int)itemLevels[(finalLevel / 5)];       int feedPoints=Math.max(0,pointLevel - 5) / 5 * 8;       pointValues[finalLevel / 5][countIndex++]=getPoints(feedPoints,count);     }   } } "
"@Override public boolean isEnabled(){   if (ttfPanel != null) {     return ttfPanel.isEnabled();   }   return false; } "
"public Criteria createCriteria(){   Criteria criteria=createCriteriaInternal();   if (oredCriteria.size() == 0) {     oredCriteria.add(criteria);   }   return criteria; } "
"private void updateKeyWithLatestBlockKeygenerator(List<Object[]> listBasedResult){   try {     long[] data=null;     ByteArrayWrapper key=null;     for (int i=0; i < listBasedResult.size(); i++) {       key=(ByteArrayWrapper)listBasedResult.get(i)[0];       data=tableBlockExecutionInfos.getBlockKeyGenerator().getKeyArray(key.getDictionaryKey(),tableBlockExecutionInfos.getMaskedByteForBlock());       key.setDictionaryKey(QueryUtil.getMaskedKey(restructureInfos.getKeyGenerator().generateKey(data),restructureInfos.getMaxKey(),restructureInfos.getMaskByteRanges(),restructureInfos.getMaskByteRanges().length));     }   }  catch (  KeyGenException e) {     LOGGER.error(e);   } } "
"public String scanNCName() throws IOException {   if (DEBUG_BUFFER) {     System.out.print(\"(scanNCName: \");     XMLEntityManager.print(fCurrentEntity);     System.out.println();   }   if (fCurrentEntity.position == fCurrentEntity.count) {     load(0,true);   }   int offset=fCurrentEntity.position;   if (XMLChar.isNCNameStart(fCurrentEntity.ch[offset])) {     if (++fCurrentEntity.position == fCurrentEntity.count) {       fCurrentEntity.ch[0]=fCurrentEntity.ch[offset];       offset=0;       if (load(1,false)) {         fCurrentEntity.columnNumber++;         String symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,0,1);         if (DEBUG_BUFFER) {           System.out.print(\")scanNCName: \");           XMLEntityManager.print(fCurrentEntity);           System.out.println(\" -> \" + String.valueOf(symbol));         }         return symbol;       }     }     while (XMLChar.isNCName(fCurrentEntity.ch[fCurrentEntity.position])) {       if (++fCurrentEntity.position == fCurrentEntity.count) {         int length=fCurrentEntity.position - offset;         if (length == fCurrentEntity.ch.length) {           char[] tmp=new char[fCurrentEntity.ch.length << 1];           System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);           fCurrentEntity.ch=tmp;         }  else {           System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);         }         offset=0;         if (load(length,false)) {           break;         }       }     }   }   int length=fCurrentEntity.position - offset;   fCurrentEntity.columnNumber+=length;   String symbol=null;   if (length > 0) {     symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);   }   if (DEBUG_BUFFER) {     System.out.print(\")scanNCName: \");     XMLEntityManager.print(fCurrentEntity);     System.out.println(\" -> \" + String.valueOf(symbol));   }   return symbol; } "
"public void put(int ii,Z val){   re[ii - bx]=val.re;   im[ii - bx]=val.im; } "
"public static void toXls(Grid grid,OutputStream out) throws Exception {   WritableWorkbook workbook=openWorkbook(out);   String sheetName=CodecUtils.filenameEncode(StringUtils.defaultIfEmpty(grid.getTitle(),XLS_SHEET_PREFIX + 1));   toXlsInternal(grid,workbook,sheetName,0);   workbook.write();   workbook.close(); } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public AndLogicalExpr fullCopy(){   AndLogicalExpr tree=(AndLogicalExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public static int dpToPx(float dp,Resources resources){   float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());   return (int)px; } "
"@SuppressLint(\"SetTextI18n\") private void initView(){   this.handler=new SafeHandler<>(this);   NavigationView nav=(NavigationView)findViewById(R.id.activity_main_navView);   if (Mysplash.getInstance().isLightTheme()) {     nav.inflateMenu(R.menu.activity_main_drawer_light);   }  else {     nav.inflateMenu(R.menu.activity_main_drawer_dark);   }   nav.setNavigationItemSelectedListener(this);   View header=nav.getHeaderView(0);   header.setOnClickListener(this);   this.navAvatar=(CircleImageView)header.findViewById(R.id.container_nav_header_avatar);   this.appIcon=(ImageView)header.findViewById(R.id.container_nav_header_appIcon);   Glide.with(this).load(R.drawable.ic_launcher).into(appIcon);   this.navTitle=(TextView)header.findViewById(R.id.container_nav_header_title);   DisplayUtils.setTypeface(this,navTitle);   this.navSubtitle=(TextView)header.findViewById(R.id.container_nav_header_subtitle);   DisplayUtils.setTypeface(this,navSubtitle);   this.navButton=(ImageButton)header.findViewById(R.id.container_nav_header_button);   navButton.setOnClickListener(this);   drawMeAvatar();   drawMeTitle();   drawMeSubtitle();   drawMeButton();   if (AuthManager.getInstance().isAuthorized() && TextUtils.isEmpty(AuthManager.getInstance().getUsername())) {     AuthManager.getInstance().refreshPersonalProfile();   } } "
"public synchronized void damageReport(){   m_clip.invalidate(); } "
"public boolean add(E o){   if (o == null)   return false;   return map.put(o,PRESENT) == null; } "
"public Webster(int port,String roots,String bindAddress,int minThreads,int maxThreads) throws BindException {   this.port=port;   this.minThreads=minThreads;   this.maxThreads=maxThreads;   initialize(roots,bindAddress); } "
"private static void handleScrolling(@NotNull View view){   int scrollPosX=view.getScrollX();   int scrollPosY=view.getScrollY();   if (scrollPosX != 0 || scrollPosY != 0) {     if (view.isNestedScrollingEnabled()) {       int[] consumed=new int[2];       int axis=scrollPosX != 0 ? View.SCROLL_AXIS_HORIZONTAL : 0;       axis|=scrollPosY != 0 ? View.SCROLL_AXIS_VERTICAL : 0;       if (view.startNestedScroll(axis)) {         view.dispatchNestedPreScroll(scrollPosX,scrollPosY,consumed,null);         view.dispatchNestedScroll(consumed[0],consumed[1],scrollPosX,scrollPosY,null);         view.stopNestedScroll();         scrollPosX-=consumed[0];         scrollPosY-=consumed[1];       }     }     if (scrollPosX != 0 || scrollPosY != 0) {       view.scrollTo(scrollPosX,scrollPosY);     }   }   if (!(view instanceof ViewGroup)) {     return;   }   ViewGroup group=(ViewGroup)view;   for (int i=0; i < group.getChildCount(); i++) {     View child=group.getChildAt(i);     handleScrolling(child);   } } "
"public void or(Criteria criteria){   oredCriteria.add(criteria); } "
"public static Object normalizeIntAndLongValues(String data,DataType actualDataType){   if (null == data) {     return null;   }   try {     Object parsedValue=null; switch (actualDataType) { case INT:       parsedValue=Integer.parseInt(data);     break; case LONG:   parsedValue=Long.parseLong(data); break; default : return data; } if (null != parsedValue) { return data; } return null; }  catch (NumberFormatException ex) { return null; } } "
"protected boolean applyRules(Node n){   Element intonation=(Element)DomUtils.getAncestor(n,MaryXML.PROSODY);   return intonation == null || !intonation.getAttribute(\"rules\").equals(\"off\"); } "
"public static boolean isNetworkChanged(Context context,String prevConnectivityType,String mPrevConnectionSubType){   String connectivityType=getNetworkType(context);   String connectivitySubType=getNetworkSubType(context);   if (null == prevConnectivityType) {     return false;   }  else   if (!prevConnectivityType.equals(connectivityType)) {     return true;   }  else   if (!mPrevConnectionSubType.equals(connectivitySubType)) {     return true;   }   return false; } "
"public String sprintf(String x) throws IllegalArgumentException {   Enumeration e=vFmt.elements();   ConversionSpecification cs=null;   char c=0;   StringBuilder sb=new StringBuilder();   while (e.hasMoreElements()) {     cs=(ConversionSpecification)e.nextElement();     c=cs.getConversionCharacter();     if (c == '\\0')     sb.append(cs.getLiteral());  else     if (c == '%')     sb.append(\"%\");  else     sb.append(cs.internalsprintf(x));   }   return sb.toString(); } "
"public static final void toString(StringBuffer output,Hashtable table){   if (table == null) {     output.append(\"null\");     return;   }   output.append(\"(\");   int size=table.size();   output.append(size);   if (listMax == -1 || size <= listMax) {     for (Enumeration e=table.keys(); e.hasMoreElements(); ) {       Object key=e.nextElement();       output.append(\",(\");       toString(output,key);       output.append(\",\");       toString(output,table.get(key));       output.append(\")\");     }   }  else {     int border=size;     if (listBorder < border)     border=listBorder;     Enumeration e=table.keys();     for (int i=0; i < border; i++) {       Object key=e.nextElement();       output.append(\",(\");       toString(output,key);       output.append(\",\");       toString(output,table.get(key));       output.append(\")\");     }     if (border < size)     output.append(\",...\");   }   output.append(\")\"); } "
"public void centralizeContent(){   int measuredWidth=getMeasuredWidth();   int measuredHeight=getMeasuredHeight();   int scaledContentWidth=getScaledContentWidth();   int scaledContentHeight=getScaledContentHeight();   if (SHOW_LOGS)   Logger.d(TAG,\"centralizeContent, measuredWidth \" + measuredWidth + \", measuredHeight \"+ measuredHeight+ \", scaledContentWidth \"+ scaledContentWidth+ \", scaledContentHeight \"+ scaledContentHeight);   mContentX=0;   mContentY=0;   if (SHOW_LOGS)   Logger.d(TAG,\"centerVideo, mContentX \" + mContentX + \", mContentY \"+ mContentY);   updateMatrixScaleRotate(); } "
"public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {   try {     this.tabelName=rep.getStepAttributeString(idStep,\"TableName\");     this.outputRowSize=rep.getStepAttributeString(idStep,\"outputRowSize\");     this.databaseName=rep.getStepAttributeString(idStep,\"databaseName\");     this.tableName=rep.getStepAttributeString(idStep,\"tableName\");     this.dimensionCount=rep.getStepAttributeString(idStep,\"dimensionCount\");     this.noDictionaryDims=rep.getStepAttributeString(idStep,\"noDictionaryDims\");     this.noDictionaryDims=rep.getStepAttributeString(idStep,\"noDictionaryDimsMapping\");     this.complexDimensionCount=rep.getStepAttributeString(idStep,\"complexDimensionCount\");     this.measureCount=rep.getStepAttributeString(idStep,\"measureCount\");     this.updateMemberRequest=rep.getStepAttributeString(idStep,\"isUpdateMemberRequest\");     this.measureDataType=rep.getStepAttributeString(idStep,\"measureDataType\");     this.partitionID=rep.getStepAttributeString(idStep,\"partitionID\");     this.segmentId=rep.getStepAttributeString(idStep,\"segmentId\");     this.taskNo=rep.getStepAttributeString(idStep,\"taskNo\");   }  catch (  Exception ex) {     throw new KettleException(BaseMessages.getString(PKG,\"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo\",new String[0]),ex);   } } "
"@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base){   super.onBaseContextAttached(base);   MultiDex.install(base);   SampleApplicationContext.application=getApplication();   SampleApplicationContext.context=getApplication();   TinkerManager.setTinkerApplicationLike(this);   TinkerManager.initFastCrashProtect();   TinkerManager.setUpgradeRetryEnable(true);   TinkerInstaller.setLogIml(new MyLogImp());   TinkerManager.installTinker(this); } "
"public static String separatorsToSystem(String path){   if (path == null) {     return null;   }   if (isSystemWindows()) {     return separatorsToWindows(path);   }  else {     return separatorsToUnix(path);   } } "
"BiDiagonalTransformer(RealMatrix matrix){   final int m=matrix.getRowDimension();   final int n=matrix.getColumnDimension();   final int p=FastMath.min(m,n);   householderVectors=matrix.getData();   main=new double[p];   secondary=new double[p - 1];   cachedU=null;   cachedB=null;   cachedV=null;   if (m >= n) {     transformToUpperBiDiagonal();   }  else {     transformToLowerBiDiagonal();   } } "
"public static String removeExtraSpaces(String text){   text=text.replace(ChineseLanguageConstants.SPACE[0],ChineseLanguageConstants.SPACE[1]);   text=text.replaceAll(\"[ \\t\\u000B\\u000C\\u00A0\\uE5F1]+\",\" \");   text=text.replaceAll(\"(^ +)|( +$)\",\"\");   return text; } "
"public static boolean isBodyRotationDiscEnabled(){   return bodyRotationDiscEnabled; } "
"protected MessagesGetChatQueryWithFields fields(List<UserField> value){   return unsafeParam(\"fields\",value); } "
"public PagesGetQuery(VkApiClient client,UserActor actor){   super(client,\"pages.get\",WikipageFull.class);   accessToken(actor.getAccessToken()); } "
"public AdsGetSuggestionsQueryWithCities lang(AdsGetSuggestionsLang value){   return unsafeParam(\"lang\",value); } "
"@Override public Object[] toArray(){   return backedSet.toArray(); } "
"public boolean isActive(){   return this.isActive.get(); } "
"public DatabaseGetFacultiesQuery(VkApiClient client,UserActor actor,int universityId){   super(client,\"database.getFaculties\",GetFacultiesResponse.class);   accessToken(actor.getAccessToken());   universityId(universityId); } "
"protected MarketGetQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"@Override public boolean isCellEditable(int row,int col){   if (isConnectedToDataSource) {     if (col != FIELD_COLUMN_ID) {       return true;     }  else {       return false;     }   }  else {     return true;   } } "
"public boolean containsSet(TupleSet set){   return m_sets.contains(set); } "
"public AudioSearchQuery search(UserActor actor){   return new AudioSearchQuery(getClient(),actor); } "
"public Map<String,BufferedImage> createLegend(StyledLayerDescriptor sld,String heading,String filename,boolean separateSymbolizers){   Map<String,BufferedImage> imageMap=new HashMap<String,BufferedImage>();   GetLegendGraphicRequest request=new GetLegendGraphicRequest();   Map<String,Object> legendOptions=new HashMap<String,Object>();   if (heading != null) {     legendOptions.put(\"heading\",heading);   }   if (filename != null) {     legendOptions.put(\"filename\",filename);   }   if (legendOptionData == null) {     legendOptionData=new LegendOptionData();   }   request.setWidth(legendOptionData.getImageWidth());   request.setHeight(legendOptionData.getImageHeight());   request.setTransparent(legendOptionData.isTransparent());   request.setStrict(false);   legendOptions.put(\"bgColor\",ColourUtils.fromColour(legendOptionData.getBackgroundColour()));   legendOptions.put(\"fontColor\",ColourUtils.fromColour(legendOptionData.getLabelFontColour()));   Font font=legendOptionData.getLabelFont();   legendOptions.put(\"fontName\",font.getFontName());   String styleValue=null;   if ((font.getStyle() & java.awt.Font.BOLD) == java.awt.Font.BOLD) {     styleValue=\"bold\";   }   if ((font.getStyle() & java.awt.Font.ITALIC) == java.awt.Font.ITALIC) {     styleValue=\"italic\";   }   if (styleValue != null) {     legendOptions.put(\"fontStyle\",styleValue);   }   legendOptions.put(\"fontSize\",String.valueOf(font.getSize()));   legendOptions.put(\"dpi\",Integer.valueOf(legendOptionData.getDpi()));   legendOptions.put(\"fontAntiAliasing\",getBooleanValueOnOff(legendOptionData.isFontAntiAliasing()));   legendOptions.put(\"forceLabels\",getBooleanValueOnOff(legendOptionData.isShowLabels()));   legendOptions.put(\"forceTitles\",getBooleanValueOnOff(legendOptionData.isShowTitle()));   legendOptions.put(\"bandInfo\",getBooleanValueTrueFalse(legendOptionData.isBandInformation()));   legendOptions.put(\"border\",getBooleanValueTrueFalse(legendOptionData.isBorder()));   legendOptions.put(\"borderColor\",ColourUtils.fromColour(legendOptionData.getBorderColour()));   legendOptions.put(\"imageSize\",String.valueOf(legendOptionData.getImageSize()));   request.setLegendOptions(legendOptions);   if (sld != null) {     Map<String,Style> styleMap=new LinkedHashMap<String,Style>();     StyledLayer selectedStyledLayer=SelectedSymbol.getInstance().getStyledLayer();     Style selectedStyle=SelectedSymbol.getInstance().getStyle();     if (selectedStyle != null) {       createSingleStyleLegend(styleMap,selectedStyledLayer,selectedStyle);     }  else {       createMultipleStyleLegend(sld,styleMap,selectedStyledLayer);     }     if (!separateSymbolizers) {       for (      String key : styleMap.keySet()) {         Style style=styleMap.get(key);         if (!style.featureTypeStyles().isEmpty()) {           FeatureTypeStyle featureTypeStyle=style.featureTypeStyles().get(0);           if (featureTypeStyle != null) {             if (!featureTypeStyle.rules().isEmpty()) {               LegendRequest legendEntryRequest=request.new LegendRequest();               request.getLegends().add(legendEntryRequest);               legendEntryRequest.setTitle(key);               legendEntryRequest.setStyle(style);             }           }         }       }       imageMap.put(\"\",legendBuilder.buildLegendGraphic(request));     }  else {       for (      String key : styleMap.keySet()) {         request.getLegends().clear();         LegendRequest legendEntryRequest=request.new LegendRequest();         legendEntryRequest.setStyle(styleMap.get(key));         legendEntryRequest.setStyleName(key);         request.getLegends().add(legendEntryRequest);         imageMap.put(key,legendBuilder.buildLegendGraphic(request));       }     }   }   return imageMap; } "
"@Override public int hashCode(){   final int prime=31;   int result=1;   result=prime * result + ((dataType == null) ? 0 : dataType.hashCode());   result=prime * result + ((executionTime == null) ? 0 : executionTime.hashCode());   result=prime * result + ((host == null) ? 0 : host.hashCode());   result=prime * result + ((mode == null) ? 0 : mode.hashCode());   result=prime * result + ((name == null) ? 0 : name.hashCode());   result=prime * result + ((reportDescription == null) ? 0 : reportDescription.hashCode());   result=prime * result + ((reportStatus == null) ? 0 : reportStatus.hashCode());   result=prime * result + ((reportTime == null) ? 0 : reportTime.hashCode());   result=prime * result + ((tagId == null) ? 0 : tagId.hashCode());   result=prime * result + ((user == null) ? 0 : user.hashCode());   result=prime * result + ((value == null) ? 0 : value.hashCode());   return result; } "
"public static File createUniqueFile(File targetFolder,String originalFile,boolean keepOriginal){   String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(originalFile);   return createUniqueFile(targetFolder,originalFile,mimeType,keepOriginal); } "
"public EqualizeHistTransform(Random random,int conversionCode){   super(random);   this.conversionCode=conversionCode;   converter=new OpenCVFrameConverter.ToMat(); } "
"public void startIntent(String title,String... filters){   if (filters == null || filters.length == 0) {     startIntent(title);     return;   }   List<Intent> filteredIntents=getFilteredIntents(filters);   if (filteredIntents.size() == 0) {     startIntent(title);     return;   }   Intent tIntent=filteredIntents.remove(0);   Intent chooser=Intent.createChooser(tIntent,title);   chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,filteredIntents.toArray(new Parcelable[filteredIntents.size()]));   mContext.startActivity(chooser); } "
"private double linToMelFreq(double inputFreq){   return (2595.0 * (Math.log(1.0 + inputFreq / 700.0) / Math.log(10.0))); } "
"@Override public void dropClass(String className,SpaceContext sc) throws RemoteException, DropClassException {   beforeTypeOperation(false,sc,SpacePrivilege.ALTER,className);   _engine.dropClass(className);   if (_embeddedProxy != null)   _embeddedProxy.directDropClass(className);   if (_clusteredProxy != null)   _clusteredProxy.directDropClass(className);   if (_taskProxy != null)   _taskProxy.directDropClass(className);   LRMIClassLoadersHolder.dropClass(className); } "
"public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_IN_NO_CHAT(String value0){   return new SM_SYSTEM_MESSAGE(1300814,value0); } "
"public void onPrepared(MediaPlayer player){   this.player.setOnCompletionListener(this);   this.seekToPlaying(this.seekOnPrepared);   if (!this.prepareOnly) {     this.player.start();     this.setState(STATE.MEDIA_RUNNING);     this.seekOnPrepared=0;   }  else {     this.setState(STATE.MEDIA_STARTING);   }   this.duration=getDurationInSeconds();   this.prepareOnly=true;   sendStatusChange(MEDIA_DURATION,null,this.duration); } "
"public void prePaint(Display d,Graphics2D g){   AffineTransform at=g.getTransform();   boolean translate=isTranslation(at);   if (m_fixed || translate) {     int tx=m_fixed ? 0 : (int)at.getTranslateX();     int ty=m_fixed ? 0 : (int)at.getTranslateY();     g.setTransform(getIdentity());     if (m_tiled) {       int w=d.getWidth(), iw=m_img.getWidth(null);       int h=d.getHeight(), ih=m_img.getHeight(null);       int sx=m_fixed ? 0 : tx % iw;       int sy=m_fixed ? 0 : ty % ih;       if (sx > 0)       sx-=iw;       if (sy > 0)       sy-=ih;       for (int x=sx; x < w - sx; x+=iw) {         for (int y=sy; y < h - sy; y+=ih)         g.drawImage(m_img,x,y,null);       }     }  else {       g.drawImage(m_img,tx,ty,null);     }     g.setTransform(at);   }  else {     if (m_tiled) {       int iw=m_img.getWidth(null);       int ih=m_img.getHeight(null);       Clip c=getClip();       c.setClip(0,0,d.getWidth(),d.getHeight());       c.transform(d.getInverseTransform());       int w=(int)Math.ceil(c.getWidth());       int h=(int)Math.ceil(c.getHeight());       int tx=(int)c.getMinX();       int ty=(int)c.getMinY();       int dw=tx % iw + iw;       int dh=ty % ih + ih;       tx-=dw;       w+=dw;       ty-=dh;       h+=dh;       for (int x=tx; x < tx + w; x+=iw) {         for (int y=ty; y < ty + h; y+=ih)         g.drawImage(m_img,x,y,null);       }     }  else {       g.drawImage(m_img,0,0,null);     }   } } "
"public void apply(NexusStreamParser np) throws Exception { } "
"public void removePoint(int rowIndex){   if ((rowIndex < 0) || (rowIndex >= pointList.size())) {     return;   }   pointList.remove(rowIndex);   this.fireTableDataChanged(); } "
"public static SM_SYSTEM_MESSAGE STR_REMAIN_PLAYTIME_CENTER_DISPLAY(String value0){   return new SM_SYSTEM_MESSAGE(1400280,value0); } "
"public boolean isAintersects(BitSet H){   return A.intersects(H); } "
"private void drawText(Canvas canvas,int index,Paint paint,String text){   if (isIllegalIndex(index)) {     return;   }   int x=getXByIndex(index);   int y=getYByIndex(index);   float top=cellHeight + (y - 1) * cellHeight;   float bottom=top + cellHeight;   float baseline=RenderUtil.getBaseline(top,bottom,paint);   float startX=RenderUtil.getStartX(cellWidth * (x - 1) + cellWidth * 0.5f,paint,text);   canvas.drawText(text,startX,baseline,paint); } "
"public static void printUsage(){   System.out.println(\"Usage: \" + grammarAndContentAnalysis.class.getName() + \"[-corpusDir=dir\"+ System.getProperty(\"file.separator\")+ \"] The base directory\"+ \" of the corpus including the directory separator character.\\n\"+ \"[-categoriesForGrammar=#] \\t The number of categories to use for grammar extraction. Default is 2.\\n\"+ \" -trainPercent=#.## \\t The training percent to use for the grammar. Default is 0.66.\\n\"+ \" -minNGram=# \\t The min n-gram rank. Default is 3.\\n\"+ \" -maxNGram=# \\t The max n-gram rank. Default is 8.\\n\"+ \" -partOfCorpus=#.## \\t The percent of corpus to use for all \"+ \" experiments.\\n\"+ \" -windowSize=# \\t The neighbourhood window. Default is max(2*minNGram, maxNGram+1).\\n\"+ \" -cache \\t If selected will cache category graphs in memory. NOTE: Very memory consuming.\"); } "
"public PhotosSaveQuery photosList(String value){   return unsafeParam(\"photos_list\",value); } "
"protected SecureSendSMSNotificationQuery userId(int value){   return unsafeParam(\"user_id\",value); } "
"public void trim(int leftTrimNumberOfSample,int rightTrimNumberOfSample){   long chunkSize=waveHeader.getChunkSize();   long subChunk2Size=waveHeader.getSubChunk2Size();   long totalTrimmed=leftTrimNumberOfSample + rightTrimNumberOfSample;   if (totalTrimmed > subChunk2Size) {     leftTrimNumberOfSample=(int)subChunk2Size;   }   chunkSize-=totalTrimmed;   subChunk2Size-=totalTrimmed;   if (chunkSize >= 0 && subChunk2Size >= 0) {     waveHeader.setChunkSize(chunkSize);     waveHeader.setSubChunk2Size(subChunk2Size);     byte[] trimmedData=new byte[(int)subChunk2Size];     System.arraycopy(data,(int)leftTrimNumberOfSample,trimmedData,0,(int)subChunk2Size);     data=trimmedData;   }  else {     System.err.println(\"Trim error: Negative length\");   } } "
"synchronized public Remote export(Remote impl,boolean allowCache) throws ExportException {   return export(impl,_config,allowCache); } "
"public void clear(){   super.clear();   int[] set=_set;   byte[] states=_states;   for (int i=set.length; i-- > 0; ) {     set[i]=(int)0;     states[i]=FREE;   } } "
"public static CommandResult execCommand(List<String> commands,boolean isRoot,String path){   return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true,path); } "
"public void addIterationListener(final IterationListener listener){   listeners.add(listener); } "
"private TemplateParser(){   registerDefaultMacros(); } "
"public DocumentSet(String sBaseDir,double dTrainingPercent){   TrainingPercent=dTrainingPercent;   BaseDir=sBaseDir;   TrainingFiles=new ArrayList();   TestFiles=new ArrayList();   Categories=new ArrayList(); } "
"static PhoneMetadataCollection loadMetadataAndCloseInput(InputStream source){   ObjectInputStream ois=null;   try {     try {       ois=new ObjectInputStream(source);     }  catch (    IOException e) {       throw new RuntimeException(\"cannot load/parse metadata\",e);     }     PhoneMetadataCollection metadataCollection=new PhoneMetadataCollection();     try {       metadataCollection.readExternal(ois);     }  catch (    IOException e) {       throw new RuntimeException(\"cannot load/parse metadata\",e);     }     return metadataCollection;   }   finally {     try {       if (ois != null) {         ois.close();       }  else {         source.close();       }     }  catch (    IOException e) {       LOGGER.log(Level.WARNING,\"error closing input stream (ignored)\",e);     }   } } "
"public static void changeToTheme(Activity activity,int theme){   sTheme=theme;   activity.finish();   activity.startActivity(new Intent(activity,activity.getClass())); } "
"public static void forEachRegistry(ServiceHost serviceHost,String tenantLink,Consumer<Collection<String>> registryLinksConsumer,Consumer<Collection<Throwable>> failureConsumer){   List<QueryTask> queryTasks=new ArrayList<QueryTask>();   if (tenantLink != null) {     queryTasks.add(buildRegistryQueryByGroup(null));     queryTasks.add(buildRegistryQueryByGroup(tenantLink));   }  else {     queryTasks.add(buildAllRegistriesQuery());   }   List<Operation> queryOperations=new ArrayList<>();   for (  QueryTask queryTask : queryTasks) {     queryOperations.add(Operation.createPost(UriUtils.buildUri(serviceHost,ServiceUriPaths.CORE_QUERY_TASKS)).setBody(queryTask).setReferer(serviceHost.getUri()));   }   if (!queryOperations.isEmpty()) {     OperationJoin.create(queryOperations.toArray(new Operation[0])).setCompletion(null).sendWith(serviceHost);   }  else {     registryLinksConsumer.accept(Collections.emptyList());   } } "
"private static String bytesToHex(byte[] bytes){   final char[] HEX_ARRAY=\"0123456789ABCDEF\".toCharArray();   char[] hex=new char[bytes.length * 2];   for (int index=0; index < bytes.length; index++) {     int value=bytes[index] & 0xFF;     hex[index * 2]=HEX_ARRAY[value >>> 4];     hex[index * 2 + 1]=HEX_ARRAY[value & 0x0F];   }   String result=new String(hex);   return result.replaceAll(\"(\\\\w{8})(\\\\w{4})(\\\\w{4})(\\\\w{4})(\\\\w{12})\",\"$1-$2-$3-$4-$5\"); } "
"public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE_ORG(String value0){   return new SM_SYSTEM_MESSAGE(1300132,value0); } "
"public Event(){ } "
"private ConsolePrintStream(final LogController logController){   super(new ConsoleOutStream(logController));   setPrintStream(this,this); } "
"public SimplifiedIntervalList union(SimplifiedIntervalList that){   return simplifyIntervals(this,that); } "
"public double chiSquareTest(final double[] expected,final long[] observed) throws MathIllegalArgumentException, MathIllegalStateException {   final ChiSquaredDistribution distribution=new ChiSquaredDistribution(expected.length - 1.0);   return 1.0 - distribution.cumulativeProbability(chiSquare(expected,observed)); } "
"public void deleteKey(String publicKey){   this.api.deleteApiByPublicKey(publicKey); } "
"@Override public int read(char[] chars,int offset,int length) throws IOException {   if (eof) {     throw new IOException(\"Read after end of file\");   }   if (position == size) {     return doEndOfFile();   }   position+=length;   int returnLength=length;   if (position > size) {     returnLength=length - (int)(position - size);     position=size;   }   processChars(chars,offset,returnLength);   return returnLength; } "
"private void zzScanError(int errorCode){   String message;   try {     message=ZZ_ERROR_MSG[errorCode];   }  catch (  ArrayIndexOutOfBoundsException e) {     message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];   }   throw new Error(message); } "
"public ActivationExporter(ActivationID id,Exporter underlyingExporter,ClassLoader loader){   if (id == null || underlyingExporter == null) {     throw new NullPointerException();   }   this.id=id;   this.underlyingExporter=underlyingExporter;   this.loader=loader; } "
"protected static char[] encodeHex(byte[] data,char[] toDigits){   int l=data.length;   char[] out=new char[l << 1];   for (int i=0, j=0; i < l; i++) {     out[j++]=toDigits[(0xF0 & data[i]) >>> 4];     out[j++]=toDigits[0x0F & data[i]];   }   return out; } "
"public String toString(){   return image; } "
"public PhotosGetAllQueryWithExtended ownerId(Integer value){   return unsafeParam(\"owner_id\",value); } "
"protected boolean removeSubtree(E comparable){   if (comparable == null)   return false;   if (this.root == null)   return false;   BinarySearchTreeNode<E> node=this.root;   while (node != null) {     int diff=comparable.compareTo(node.comparable);     if (diff < 0) {       node=node.left;     }  else     if (diff > 0) {       node=node.right;     }  else {       if (node.comparable.equals(comparable)) {         if (node.isLeftChild()) {           node.parent.left=null;         }  else {           node.parent.right=null;         }         this.size-=this.size(node);         if (this.selfBalancing)         this.balanceTree(node.parent);         return true;       }  else {         return false;       }     }   }   return false; } "
"public AemSidekick expandSectionIfCollapsed(SidekickSection sidekickSections){   final WebElement section=getSectionByName(sidekickSections.getSectionName());   bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandSection(section),Timeouts.SMALL);   return this; } "
"public synchronized BookKeeperClientBuilder name(String name){   this.name=name;   return this; } "
"public static void debugInfo(String msg){   debugInfo(DEFAULT_TAG,msg); } "
"@Override public void any(Augmentations augs) throws XNIException { } "
"public void retry(Context context,OCUpload upload){   if (upload != null && context != null) {     Account account=AccountUtils.getOwnCloudAccountByName(context,upload.getAccountName());     retry(context,account,upload);   }  else {     throw new IllegalArgumentException(\"Null parameter!\");   } } "
"public ImageSelection(Image image){   this.image=image; } "
"public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_HOSTILE_BLOCK(String value0,String value1){   return new SM_SYSTEM_MESSAGE(1250217,value0,value1); } "
"private void powerPhaseIFFT(double[] pow,double[] ph){   toMagnitude(pow);   for (int i=0; i < pow.length; i++) {     double re=pow[i] * Math.cos(ph[i]);     ph[i]=pow[i] * Math.sin(ph[i]);     pow[i]=re;   }   fft(pow,ph,FFT_REVERSE); } "
"private void assertResult(String expected,String result){   if (diagCollector.getErrorCount() > 0) {     Truth.assertWithMessage(\"Errors detected while filtering comment\").fail(NEWLINE_JOINER.join(diagCollector.getErrors()));   }  else {     Truth.assertThat(result).isEqualTo(expected);   } } "
"public static byte[] toByteArray(Reader input) throws IOException {   return toByteArray(input,Charset.defaultCharset()); } "
"public XMLGrammarPoolImplExtension(int initialCapacity){   super(initialCapacity); } "
"private boolean updateAnchorFromPendingData(RecyclerView.State state,AnchorInfo anchorInfo){   if (state.isPreLayout() || mPendingScrollPosition == NO_POSITION) {     return false;   }   if (mPendingScrollPosition < 0 || mPendingScrollPosition >= state.getItemCount()) {     mPendingScrollPosition=NO_POSITION;     mPendingScrollPositionOffset=INVALID_OFFSET;     if (DEBUG) {       Log.e(TAG,\"ignoring invalid scroll position \" + mPendingScrollPosition);     }     return false;   }   anchorInfo.mPosition=mPendingScrollPosition;   if (mPendingSavedState != null && mPendingSavedState.hasValidAnchor()) {     anchorInfo.mLayoutFromEnd=mPendingSavedState.mAnchorLayoutFromEnd;     if (anchorInfo.mLayoutFromEnd) {       anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingSavedState.mAnchorOffset;     }  else {       anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingSavedState.mAnchorOffset;     }     return true;   }   if (mPendingScrollPositionOffset == INVALID_OFFSET) {     View child=findViewByPosition(mPendingScrollPosition);     if (child != null) {       final int childSize=mOrientationHelper.getDecoratedMeasurement(child);       if (childSize > mOrientationHelper.getTotalSpace()) {         anchorInfo.assignCoordinateFromPadding();         return true;       }       final int startGap=mOrientationHelper.getDecoratedStart(child) - mOrientationHelper.getStartAfterPadding();       if (startGap < 0) {         anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding();         anchorInfo.mLayoutFromEnd=false;         return true;       }       final int endGap=mOrientationHelper.getEndAfterPadding() - mOrientationHelper.getDecoratedEnd(child);       if (endGap < 0) {         anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding();         anchorInfo.mLayoutFromEnd=true;         return true;       }       anchorInfo.mCoordinate=anchorInfo.mLayoutFromEnd ? (mOrientationHelper.getDecoratedEnd(child) + mOrientationHelper.getTotalSpaceChange()) : mOrientationHelper.getDecoratedStart(child);     }  else {       if (getChildCount() > 0) {         int pos=getPosition(getChildAt(0));         anchorInfo.mLayoutFromEnd=mPendingScrollPosition < pos == mShouldReverseLayout;       }       anchorInfo.assignCoordinateFromPadding();     }     return true;   }   anchorInfo.mLayoutFromEnd=mShouldReverseLayout;   if (mShouldReverseLayout) {     anchorInfo.mCoordinate=mOrientationHelper.getEndAfterPadding() - mPendingScrollPositionOffset;   }  else {     anchorInfo.mCoordinate=mOrientationHelper.getStartAfterPadding() + mPendingScrollPositionOffset;   }   return true; } "
"public static ValueGetterSpacePredicate<ServerEntry> propertyNull(String propertyName){   return property(propertyName,isNull()); } "
"public void configureForSyncPromo(boolean isExpanded){   mDeviceIcon.setVisibility(View.VISIBLE);   mDeviceIcon.setImageResource(R.drawable.recent_laptop);   mDeviceLabel.setText(R.string.ntp_recent_tabs_sync_promo_title);   setTimeLabelVisibility(View.GONE);   configureExpandedCollapsed(isExpanded); } "
"public void testAddActivityNoShow() throws Exception {   deleteManifest();   myFixture.copyFileToProject(\"intentions/DummyActivity_manifest_after.xml\",\"AndroidManifest.xml\");   final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");   myFixture.configureFromExistingVirtualFile(file);   final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);   assertNull(action); } "
"void addFKNameToClearSelf(String foreignKeyName){   List<String> list=getListToClearSelfFK();   if (!list.contains(foreignKeyName)) {     list.add(foreignKeyName);   } } "
"protected XMLErrorReporter createErrorReporter(){   return new XMLErrorReporter(); } "
"public int optInt(String key){   return this.optInt(key,0); } "
"@Override public boolean hasNext(){   return hasNextLine(); } "
"private void updateSalesOrderHeader(String reportPath,List<SalesOrderItem> soiList,EntityManager em){   if (soiList != null && !soiList.isEmpty()) {     EntityTransaction transaction=em.getTransaction();     try {       transaction.begin();       for (      SalesOrderItem orderItem : soiList) {         orderItem.getSalesOrderHeader().setInvoiceLink(reportPath);         em.merge(orderItem);       }       transaction.commit();     }   finally {     }   } } "
"public boolean isInUpdate(){   return docInUpdate; } "
"public Response writeString(String s){   if (s == null) {     writeInt(0);     return this;   }   byte[] b=s.getBytes();   writeInt(b.length);   expand(b.length);   System.arraycopy(b,0,out,offset,b.length);   offset+=b.length;   return this; } "
"public List<GenericValue> findAllByPrimaryKeys(List<GenericPK> primaryKeys) throws GenericEntityException {   if (primaryKeys == null)   return null;   List<GenericValue> results=new LinkedList<GenericValue>();   for (  GenericPK primaryKey : primaryKeys) {     GenericValue result=this.findByPrimaryKey(primaryKey);     if (result != null)     results.add(result);   }   return results; } "
"public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY,long time){   if (mFlywheel && !isFinished()) {     float oldVelocityX=mScrollerX.mCurrVelocity;     float oldVelocityY=mScrollerY.mCurrVelocity;     if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {       velocityX+=oldVelocityX;       velocityY+=oldVelocityY;     }   }   mMode=FLING_MODE;   mScrollerX.fling(startX,velocityX,minX,maxX,overX,time);   mScrollerY.fling(startY,velocityY,minY,maxY,overY,time); } "
"public static DefaultColumnEntity of(String name,List<Column> columns){   DefaultColumnEntity columnEntity=new DefaultColumnEntity(name);   columnEntity.addAll(columns);   return columnEntity; } "
"public RTText convertTo(RTFormat destFormat,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){   if (destFormat == mRTFormat) {     return this;   }   throw new UnsupportedOperationException(\"Can't convert from \" + mRTFormat.getClass().getSimpleName() + \" to \"+ destFormat.getClass().getSimpleName()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_ME_TO_B(String skillcaster,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200478,skillcaster,skilltarget,skillname); } "
"public boolean isConcrete(){   return !isPhantom() && !isAbstract() && !isNative(); } "
"@Override public void onException(final JMSException exception){   LOGGER.error(\"JMSException caught by JMS connection exception listener. Attempting to reconnect.\",exception);   startReconnectThread(); } "
"public boolean doFirstLastHaveToBeSame(){   return doFirstLastHaveToBeSame; } "
"public DHCPMessage(int inPort){   initialize();   this.destination_IP=BROADCAST_ADDR;   this.gPort=inPort; } "
"public static void validateKey(String key) throws StateStoreException {   if (StringUtils.isBlank(key)) {     throw new StateStoreException(\"Key cannot be blank or null\");   }   if (key.contains(\"/\")) {     throw new StateStoreException(\"Key cannot contain '/'\");   } } "
"private static void interactiveMode(FreeTTS freetts){   try {     while (true) {       String text;       BufferedReader reader;       reader=new BufferedReader(new InputStreamReader(System.in));       System.out.print(\"Enter text: \");       System.out.flush();       text=reader.readLine();       if ((text == null) || (text.length() == 0)) {         freetts.shutdown();         System.exit(0);       }  else {         freetts.batchTextToSpeech(text);       }     }   }  catch (  IOException e) {   } } "
"private int measureLong(int measureSpec){   int result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {     result=specSize;   }  else {     final int count=mViewPager.getAdapter().getCount();     result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return result; } "
"public static void touch(File file) throws IOException {   if (!file.exists()) {     OutputStream out=openOutputStream(file);     IOUtils.closeQuietly(out);   }   boolean success=file.setLastModified(System.currentTimeMillis());   if (!success) {     throw new IOException(\"Unable to set the last modification time for \" + file);   } } "
"public void release(GL10 gl){   if (textureId[0] != -1) {     gl.glDeleteTextures(1,textureId,0);     textureId[0]=-1;   } } "
"private static BigInteger wrap(final int i){   if (i == DatatypeConstants.FIELD_UNDEFINED) {     return null;   }   return BigInteger.valueOf(i); } "
"final void processEntityDeclarations(List entityDecls){   int size=(entityDecls != null) ? entityDecls.size() : 0;   if (size > 0) {     if (fEntities == null) {       fEntities=new HashMap();     }     for (int i=0; i < size; ++i) {       EntityDeclaration decl=(EntityDeclaration)entityDecls.get(i);       fEntities.put(decl.getName(),decl);     }   } } "
"public static Map<String,String> extractDimColsDataTypeValues(String colDataTypes){   Map<String,String> mapOfColNameDataType=new HashMap<String,String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);   if (null == colDataTypes || colDataTypes.isEmpty()) {     return mapOfColNameDataType;   }   String[] colArray=colDataTypes.split(CarbonCommonConstants.AMPERSAND_SPC_CHARACTER);   String[] colValueArray=null;   for (  String colArrayVal : colArray) {     colValueArray=colArrayVal.split(CarbonCommonConstants.COMA_SPC_CHARACTER);     mapOfColNameDataType.put(colValueArray[0].toLowerCase(),colValueArray[1]);   }   return mapOfColNameDataType; } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_A_TO_ME(String skillcaster,int num0,String skillname){   return new SM_SYSTEM_MESSAGE(1200715,skillcaster,num0,skillname); } "
"private List<Field> parseNextLine() throws IOException, ParseException {   final List<Field> fields=new ArrayList<Field>();   line=br.readLine();   if (line == null) {     throw new EOFException();   }   final StringTokenizer tokenizer=new StringTokenizer(line);   while (tokenizer.hasMoreTokens()) {     fields.add(new Field(tokenizer.nextToken()));   }   return fields; } "
"private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {   s.defaultReadObject();   if (permissions == null) {     throw new InvalidObjectException(\"list cannot be null\");   }   if (!permissions.getClass().equals(ArrayList.class)) {     permissions=new ArrayList(permissions);   }   for (int i=permissions.size(); --i >= 0; ) {     if (!(permissions.get(i) instanceof AuthenticationPermission)) {       throw new InvalidObjectException(\"element must be an AuthenticationPermission\");     }   } } "
"public static SM_SYSTEM_MESSAGE STR_STIGMA_TOO_HIGH_STONE_RANK_FOR_SLOT(String value0){   return new SM_SYSTEM_MESSAGE(1300409,value0); } "
"static public InputStream resolveClusterXSLSchema(String _clusterMembers) throws ClusterConfigurationException {   Document clusterXMLDocumet;   String schemaNameToBeUsed=null;   InputStream membersStream=ResourceLoader.findClusterXML(_clusterMembers);   try {     clusterXMLDocumet=XmlUtils.getDocumentBuilder().parse(membersStream);     schemaNameToBeUsed=ClusterXML.getNodeValueIfExists(clusterXMLDocumet.getDocumentElement(),ClusterXML.CLUSTER_SCHEMA_NAME_TAG);   }  catch (  SAXException e) {     e.printStackTrace();   } catch (  IOException e) {     e.printStackTrace();   } catch (  ParserConfigurationException e) {     e.printStackTrace();   }   InputStream schemaInputStream;   if (JSpaceUtilities.isEmpty(schemaNameToBeUsed)) {     String missingSchemaMsg=\"Could not find the <cluster-schema-name> tag for cluster members xml file: \" + _clusterMembers;     throw new ClusterConfigurationException(missingSchemaMsg);   }   String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + \"/\" + Constants.Schemas.SCHEMAS_FOLDER+ \"/\"+ schemaNameToBeUsed+ ClusterXML.CLUSTER_SCHEMA_XSL_FILE_SUFFIX;   schemaInputStream=getResourceStream(schemaFilePath);   if (schemaInputStream != null) {     if (_logger.isLoggable(Level.FINE)) {       _logger.fine(\"Loaded the cluster xsl schema < \" + getResourceURL(schemaFilePath) + \" > for the cluster config setup.\");     }     return schemaInputStream;   }  else {     String missingSchemaMsg=\"Could not find the cluster xsl schema file: \" + schemaFilePath;     throw new ClusterConfigurationException(missingSchemaMsg);   } } "
"private void skip(){   do {     readBlock();   }  while ((blockSize > 0) && !err()); } "
"protected UsersGetSubscriptionsQueryWithExtended extended(Boolean value){   return unsafeParam(\"extended\",value); } "
"public TTFDetails(TTFUpdateInterface parentObj,FunctionNameInterface functionManager){   super(TTFDetails.class,functionManager);   this.parentObj=parentObj;   createUI(); } "
"public void clear(){   m_nodeTuples.invalidateAll();   m_edgeTuples.invalidateAll();   super.clear();   m_links.clear(); } "
"public SimpleMetric(MetricName name,String value){   this(name,MetricValue.fromStrValue(requireNonNull(value))); } "
"public void addUpdateListener(final BaseListener<Tag> listener,final Tag initialValue){   if (LOG.isTraceEnabled()) {     LOG.trace(\"addUpdateListener() called.\");   }   listeners.add(listener);   Tag clone=null;   updateTagLock.readLock().lock();   try {     boolean sendInitialUpdate=!TagComparator.compare(this,initialValue);     if (sendInitialUpdate) {       clone=this.clone();     }   }   finally {     updateTagLock.readLock().unlock();   }   if (clone != null) {     try {       listener.onUpdate(clone);     }  catch (    Exception e) {       LOG.error(\"addUpdateListener() : error notifying listener\",e);     }   } } "
"public boolean isCheckThirdParty(){   return isOptionEnabled(UrlFilterRuleOption.THIRD_PARTY) || isOptionDisabled(UrlFilterRuleOption.THIRD_PARTY); } "
"@Override public WebDriver window(String nameOrHandle){   return targetLocator.window(nameOrHandle); } "
"public static SM_SYSTEM_MESSAGE STR_MSG_UNION_LOOTING_CHANGED_RULE(String value0,String value1,String value2){   return new SM_SYSTEM_MESSAGE(1400626,value0,value1,value2); } "
"public void closeDriver(){   if (camera != null) {     FlashlightManager.disableFlashlight();     camera.release();     camera=null;   } } "
"@JsonIgnore public boolean isConfidentialBool(){   return confidential != null && confidential; } "
"public NewsfeedGetRecommendedQuery fields(List<EnumParam> value){   return unsafeParam(\"fields\",value); } "
"@Override protected int changes(){   return changes; } "
"private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException {   stream.defaultReadObject();   count=0; } "
"private void appendUploadedEntryToLog(String id) throws IOException {   FileWriter writer=new FileWriter(mLogfile,true);   StringBuilder sb=new StringBuilder();   sb.append(System.currentTimeMillis() / 1000);   sb.append(\",\");   sb.append(id);   sb.append('\\n');   try {     writer.write(sb.toString());   }   finally {     writer.close();   } } "
"public MessageOnlyLogFilter(LogNode next){   mNext=next; } "
"@Override public void show(Class<?> parentClass,Class<?> classSelected){   if (classSelected != null) {     String key=classSelected.toString();     PopulateDetailsInterface panel=getPanel(parentClass,key);     if (panel != null) {       CardLayout cl=(CardLayout)(detailsPanel.getLayout());       cl.show(detailsPanel,encodePanelKey(key,panel));       SelectedSymbol selectedSymbol=SelectedSymbol.getInstance();       panel.populate(selectedSymbol);     }   }   repaint(); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffPhysical_A_TO_B(String skillcaster,String skilltarget,String skillname){   return new SM_SYSTEM_MESSAGE(1200970,skillcaster,skilltarget,skillname); } "
"public CastExpr newCastExpr(Value op1,Type t){   return new JCastExpr(op1,t); } "
"private void initializeContentModelStacks(){   if (fOpStack == null) {     fOpStack=new short[8];     fGroupIndexStack=new int[8][];     fGroupIndexStackSizes=new int[8];   }  else   if (fDepth == fOpStack.length) {     short[] newOpStack=new short[fDepth * 2];     System.arraycopy(fOpStack,0,newOpStack,0,fDepth);     fOpStack=newOpStack;     int[][] newGroupIndexStack=new int[fDepth * 2][];     System.arraycopy(fGroupIndexStack,0,newGroupIndexStack,0,fDepth);     fGroupIndexStack=newGroupIndexStack;     int[] newGroupIndexStackLengths=new int[fDepth * 2];     System.arraycopy(fGroupIndexStackSizes,0,newGroupIndexStackLengths,0,fDepth);     fGroupIndexStackSizes=newGroupIndexStackLengths;   }   fOpStack[fDepth]=-1;   fGroupIndexStackSizes[fDepth]=0; } "
"public UnicastSocketTimeout(int timeout){   if (timeout < 0) {     throw new IllegalArgumentException(\"invalid timeout\");   }   this.timeout=timeout; } "
"protected VideoDeleteAlbumQuery albumId(int value){   return unsafeParam(\"album_id\",value); } "
"public GSTopicPublisherImpl(GSSessionImpl sess,GSTopicImpl topic,IMessageConverter messageConverter) throws JMSException {   super(sess,topic,messageConverter); } "
"public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException {   int currentSize=entryCount;   if (sortBufferSize == currentSize) {     LOGGER.debug(\"************ Writing to temp file ********** \");     intermediateFileMerger.startMergingIfPossible();     Object[][] recordHolderListLocal=recordHolderList;     try {       semaphore.acquire();       dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal));     }  catch (    InterruptedException e) {       LOGGER.error(\"exception occurred while trying to acquire a semaphore lock: \" + e.getMessage());       throw new CarbonSortKeyAndGroupByException(e.getMessage());     }     this.recordHolderList=new Object[this.sortBufferSize][];     this.entryCount=0;   }   recordHolderList[entryCount++]=row; } "
"public IntersectsExtended(){   super(null,null); } "
"public CatalogException(String message,Exception e){   super(message);   this.exceptionType=WRAPPER;   this.exception=e; } "
"public PathFileComparator(IOCase caseSensitivity){   this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity; } "
"private boolean isValidItemIndex(int index){   return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount()); } "
"public static Double scaledZ(final double confidence_level){   if (confidence_level <= 0.0 || confidence_level >= 1.0) {     throw new IllegalArgumentException(\"Confidence level must be in the interval (0, 1).\");   }   double significance_level=1.0 - confidence_level;   return normalInverse(1.0 - significance_level / DEFAULT_MAX_DECISIONS / 2.); } "
"public void resetConfiguration(){   setRainTime(-1);   setFadeOutTime(-1);   setSnowTime(-1);   setRainParticles(-1);   setSnowParticles(-1); } "
"public IntegratedParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){   this(symbolTable,grammarPool,null); } "
"public boolean isApplicable(){   return true; } "
"private void consumeNonExecutePrefix() throws IOException {   nextNonWhitespace(true);   pos--;   if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {     return;   }   for (int i=0; i < NON_EXECUTE_PREFIX.length; i++) {     if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {       return;     }   }   pos+=NON_EXECUTE_PREFIX.length; } "
"public void printCurrentStackTrace(){   try {     throw new java.io.IOException(\"FAKE\");   }  catch (  java.io.IOException e) {     e.printStackTrace(G.v().out);   } } "
"public static boolean isDigit(char c){   return Character.isDigit(c); } "
"public AesEncrypter(SecretKey key){   byte[] iv=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};   AlgorithmParameterSpec paramSpec=new IvParameterSpec(iv);   try {     ecipher=Cipher.getInstance(\"AES/CBC/PKCS5Padding\");     dcipher=Cipher.getInstance(\"AES/CBC/PKCS5Padding\");     ecipher.init(Cipher.ENCRYPT_MODE,key,paramSpec);     dcipher.init(Cipher.DECRYPT_MODE,key,paramSpec);   }  catch (  Exception e) {     throw new EncodingException(\"Failed to create AES encrypter\",e);   } } "
"public boolean isExtraCmd(){   return isExtraCmd; } "
"public DatabaseGetChairsQuery(VkApiClient client,UserActor actor,int facultyId){   super(client,\"database.getChairs\",GetChairsResponse.class);   accessToken(actor.getAccessToken());   facultyId(facultyId); } "
"public DHCPMessage(){   initialize();   this.destination_IP=BROADCAST_ADDR;   this.gPort=SERVER_PORT; } "
"private MotionEvent swapXY(MotionEvent ev){   float width=getWidth();   float height=getHeight();   float newX=(ev.getY() / height) * width;   float newY=(ev.getX() / width) * height;   ev.setLocation(newX,newY);   return ev; } "
"public static RequestQueue newRequestQueue(){   return newRequestQueue(3); } "
"private void findEigenVectors(final double[][] householderMatrix){   final double[][] z=householderMatrix.clone();   final int n=main.length;   realEigenvalues=new double[n];   imagEigenvalues=new double[n];   final double[] e=new double[n];   for (int i=0; i < n - 1; i++) {     realEigenvalues[i]=main[i];     e[i]=secondary[i];   }   realEigenvalues[n - 1]=main[n - 1];   e[n - 1]=0;   double maxAbsoluteValue=0;   for (int i=0; i < n; i++) {     if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {       maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);     }     if (FastMath.abs(e[i]) > maxAbsoluteValue) {       maxAbsoluteValue=FastMath.abs(e[i]);     }   }   if (maxAbsoluteValue != 0) {     for (int i=0; i < n; i++) {       if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {         realEigenvalues[i]=0;       }       if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {         e[i]=0;       }     }   }   for (int j=0; j < n; j++) {     int its=0;     int m;     do {       for (m=j; m < n - 1; m++) {         double delta=FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);         if (FastMath.abs(e[m]) + delta == delta) {           break;         }       }       if (m != j) {         if (its == MAX_ITER) {           throw new MathIllegalStateException(LocalizedCoreFormats.CONVERGENCE_FAILED,MAX_ITER);         }         its++;         double q=(realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);         double t=FastMath.sqrt(1 + q * q);         if (q < 0.0) {           q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);         }  else {           q=realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);         }         double u=0.0;         double s=1.0;         double c=1.0;         int i;         for (i=m - 1; i >= j; i--) {           double p=s * e[i];           double h=c * e[i];           if (FastMath.abs(p) >= FastMath.abs(q)) {             c=q / p;             t=FastMath.sqrt(c * c + 1.0);             e[i + 1]=p * t;             s=1.0 / t;             c*=s;           }  else {             s=p / q;             t=FastMath.sqrt(s * s + 1.0);             e[i + 1]=q * t;             c=1.0 / t;             s*=c;           }           if (e[i + 1] == 0.0) {             realEigenvalues[i + 1]-=u;             e[m]=0.0;             break;           }           q=realEigenvalues[i + 1] - u;           t=(realEigenvalues[i] - q) * s + 2.0 * c * h;           u=s * t;           realEigenvalues[i + 1]=q + u;           q=c * t - h;           for (int ia=0; ia < n; ia++) {             p=z[ia][i + 1];             z[ia][i + 1]=s * z[ia][i] + c * p;             z[ia][i]=c * z[ia][i] - s * p;           }         }         if (t == 0.0 && i >= j) {           continue;         }         realEigenvalues[j]-=u;         e[j]=q;         e[m]=0.0;       }     }  while (m != j);   }   for (int i=0; i < n; i++) {     int k=i;     double p=realEigenvalues[i];     for (int j=i + 1; j < n; j++) {       if (realEigenvalues[j] > p) {         k=j;         p=realEigenvalues[j];       }     }     if (k != i) {       realEigenvalues[k]=realEigenvalues[i];       realEigenvalues[i]=p;       for (int j=0; j < n; j++) {         p=z[j][i];         z[j][i]=z[j][k];         z[j][k]=p;       }     }   }   maxAbsoluteValue=0;   for (int i=0; i < n; i++) {     if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {       maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);     }   }   if (maxAbsoluteValue != 0.0) {     for (int i=0; i < n; i++) {       if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {         realEigenvalues[i]=0;       }     }   }   eigenvectors=new ArrayRealVector[n];   final double[] tmp=new double[n];   for (int i=0; i < n; i++) {     for (int j=0; j < n; j++) {       tmp[j]=z[j][i];     }     eigenvectors[i]=new ArrayRealVector(tmp);   } } "
"private List<Entry> processBadLeases(long now){   List<Entry> bad=null; synchronized (LeaseRenewalManager.this) {     for (Iterator<Entry> iter=bList.iterator(); iter.hasNext(); ) {       Entry e=iter.next();       if (e.endTime <= now) {         iter.remove();         logExpiration(e);         removeLeaseInRenew(e);         if (e.listener != null) {           if (bad == null)           bad=new ArrayList<Entry>(1);           bad.add(e);         }       }     }   }   return bad; } "
"public void endFadeAnimation(){   if (mFadeAnimation != null) {     mFadeAnimation.end();     mFadeAnimation=null;   } } "
"private Collection<Map<String,Object>> batchParse(String[] header,Collection<String[]> batch){   return batch.stream().map(null).collect(toList()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_ME_TO_SELF(String skillname){   return new SM_SYSTEM_MESSAGE(1200339,skillname); } "
"@Override public long skip(long ln) throws IOException {   try {     return in.skip(ln);   }  catch (  IOException e) {     handleIOException(e);     return 0;   } } "
"private long calcExpiration(long preferredDuration,long now){   long expiration=now + preferredDuration;   if (expiration < 0) {     return Long.MAX_VALUE;   }   return expiration; } "
"public void stackEntered(long time,boolean focused){   boolean finishImmediately=!focused;   mSpacing=computeSpacing(mStackTabs != null ? mStackTabs.length : 0);   resetAllScrollOffset();   startAnimation(time,OverviewAnimationType.ENTER_STACK,finishImmediately); } "
"@Override public void apply(NexusStreamParser np) throws Exception {   np.matchIgnoreCase(\"set contract-gaps=\");   boolean collapse=np.getBoolean();   np.matchIgnoreCase(\";\");   AlignmentViewer viewer=(AlignmentViewer)getViewer();   viewer.getAlignmentViewerPanel().getSelectedBlock().clear();   viewer.setContractGaps(collapse); } "
"public SM_ACCOUNT_LIST(Map<Integer,AionConnection> accounts){   super(0x04);   this.accounts=accounts; } "
"@Override public Schema schema(){   return p.schema(); } "
"protected void addLanguageVariables(BundleContext context){   Language defaultLanguage=APILocator.getLanguageAPI().getLanguage(\"en\",\"US\");   addLanguageVariables(context,defaultLanguage); } "
"public ServiceAdminImpl(AbstractService service,Exporter exporter) throws RemoteException {   m_service=service;   m_exporter=exporter;   m_thisRemoteRef=(ServiceAdmin)exporter.export(this); } "
"public void onOperationsBatchSynchronization(OperationsBatchData batchData){ } "
"private List<Iterator<Object[]>>[] partitionInputReaderIterators(){   int numberOfCores=CarbonProperties.getInstance().getNumberOfCores();   int parallelThreadNumber=Math.min(inputIterators.size(),numberOfCores);   List<Iterator<Object[]>>[] iterators=new List[parallelThreadNumber];   for (int i=0; i < parallelThreadNumber; i++) {     iterators[i]=new ArrayList<>();   }   for (int i=0; i < inputIterators.size(); i++) {     iterators[i % parallelThreadNumber].add(inputIterators.get(i));   }   return iterators; } "
"public VisualTable(Table parent,Visualization vis,String group){   this(parent,vis,group,null,VisualItem.SCHEMA); } "
"private void writeSourceSinkDomPair(SourceSinkDomPair pair,Document document,Element rootElement){   final Element pairElement;   final Element sourceSinkElement; switch (pair.getType()) { case SourceDomPair:     pairElement=document.createElement(\"sourcedompair\");   sourceSinkElement=document.createElement(\"source\"); break; case SinkDomPair: pairElement=document.createElement(\"sinkdompair\"); sourceSinkElement=document.createElement(\"sink\"); break; default : throw new RuntimeException(\"Invalid source/sink domain pair type\"); } rootElement.appendChild(pairElement); pairElement.appendChild(sourceSinkElement); writeSourceSinkSpec(pair.getSourceOrSink(),document,sourceSinkElement); writeDomainSpec(pair.getDomain(),document,pairElement); } "
"@Override public void endCDATA(Augmentations augs) throws XNIException {   if (fAnnotationDepth != -1) {     schemaDOM.endAnnotationCDATA();   } } "
"public Date localCurrentTime(){   return new Date(System.currentTimeMillis()); } "
"@Nullable private Message maybeUnpackAnyType(FieldDescriptor field,Object value){   if (field.getType() == FieldDescriptor.Type.MESSAGE && field.getMessageType().getFullName().equals(Any.getDescriptor().getFullName())) {     Any any=(Any)value;     Message defaultInstance=anyConverterRegistry.get(any.getTypeUrl());     if (defaultInstance != null) {       try {         return defaultInstance.toBuilder().mergeFrom(any.getValue()).build();       }  catch (      InvalidProtocolBufferException e) {         throw new RuntimeException(e);       }     }   }   return null; } "
"public void load(Config config,String args[]) throws StartupException {   this.config=config;   Thread t=new Thread(this);   t.setName(this.toString());   t.setDaemon(false);   t.run(); } "
"protected void handleRestricted(File directory,int depth,Collection<T> results) throws IOException { } "
"public EqIOException(final Throwable e){   super(e); } "
"public void write(File file) throws IOException {   PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),\"UTF-8\"),true);   if (fromDir != null) {     pw.println(\"FROM: \" + fromDir + \"*\"+ fromExt);   }   String str=null;   for (int i=0; i < bList.size(); i++) {     str=(String)(bList.elementAt(i));     pw.println(str);   } } "
"@Nullable protected Path findConfigRootHeuristic(Path configPath){   Path parent=configPath.getParent();   while (parent != null) {     if (Files.isDirectory(parent.resolve(\".git\"))) {       return parent;     }     parent=parent.getParent();   }   return null; } "
"public void conjunctWith(Term t){   terms.add(t); } "
"public static boolean isFileNewer(File file,long timeMillis){   if (file == null) {     throw new IllegalArgumentException(\"No specified file\");   }   if (!file.exists()) {     return false;   }   return file.lastModified() > timeMillis; } "
"public static boolean isConnected(Context context){   NetworkInfo info=NetworkUtil.getNetworkInfo(context);   return (info != null && info.isConnected()); } "
"@Override public void onUIRefreshBegin(PtrFrameLayout frame){   mDrawable.setAlpha(255);   mDrawable.start(); } "
"public NelderMeadSimplex(final int n,double sideLength,final double rho,final double khi,final double gamma,final double sigma){   super(n,sideLength);   this.rho=rho;   this.khi=khi;   this.gamma=gamma;   this.sigma=sigma; } "
"public static void writeString(OutputStream out,Charset charset,String value) throws IOException {   Writer writer=new OutputStreamWriter(out,charset);   String nl=System.getProperty(\"line.separator\");   int r=0;   while (r < value.length()) {     int i=value.indexOf(\"\\n\",r);     if (i == -1) {       break;     }     writer.write(value.substring(r,i));     writer.write(nl);     r=i + 1;   }   writer.write(value.substring(r));   writer.close(); } "
"public String reportError(XMLLocator location,String domain,String key,Object[] arguments,short severity,Exception exception) throws XNIException {   MessageFormatter messageFormatter=getMessageFormatter(domain);   String message;   if (messageFormatter != null) {     message=messageFormatter.formatMessage(fLocale,key,arguments);   }  else {     StringBuffer str=new StringBuffer();     str.append(domain);     str.append('#');     str.append(key);     int argCount=arguments != null ? arguments.length : 0;     if (argCount > 0) {       str.append('?');       for (int i=0; i < argCount; i++) {         str.append(arguments[i]);         if (i < argCount - 1) {           str.append('&');         }       }     }     message=str.toString();   }   XMLParseException parseException=(exception != null) ? new XMLParseException(location,message,exception) : new XMLParseException(location,message);   XMLErrorHandler errorHandler=fErrorHandler;   if (errorHandler == null) {     if (fDefaultErrorHandler == null) {       fDefaultErrorHandler=new DefaultErrorHandler();     }     errorHandler=fDefaultErrorHandler;   } switch (severity) { case SEVERITY_WARNING: {       errorHandler.warning(domain,key,parseException);       break;     } case SEVERITY_ERROR: {     errorHandler.error(domain,key,parseException);     break;   } case SEVERITY_FATAL_ERROR: {   errorHandler.fatalError(domain,key,parseException);   if (!fContinueAfterFatalError) {     throw parseException;   }   break; } } return message; } "
"public TaggedIOException(IOException original,Serializable tag){   super(original.getMessage(),original);   this.tag=tag; } "
"public static SM_SYSTEM_MESSAGE STR_BUY_SELL_ITEM_CAN_NOT_BE_SELLED_TO_NPC(String value0){   return new SM_SYSTEM_MESSAGE(1300344,value0); } "
"public static Double oizp(Number value){   if (value == null) {     return null;   }   return (value.doubleValue() >= 0d) ? 1d : 0d; } "
"public UrlSpaceFactoryBean(String url,Map<String,Object> params){   this(url);   setParameters(params); } "
"@Override public void endPrefixMapping(String prefix) throws SAXException {   return; } "
"public boolean merge_stringbuffer(){   return soot.PhaseOptions.getBoolean(options,\"merge-stringbuffer\"); } "
"public MessagesCreateChatQuery(VkApiClient client,UserActor actor,int... userIds){   super(client,\"messages.createChat\",Integer.class);   accessToken(actor.getAccessToken());   userIds(userIds); } "
"public synchronized long incRefLastCommitGen() throws IOException {   long nextGen=saveLoadState.getNextWriteGen();   if (nextGen == 0) {     throw new IllegalStateException(\"no commit exists\");   }   long result=nextGen - 1;   incRef(result);   return result; } "
"public Record verify(List<DataType> values) throws SchemaException {   return null; } "
"private void putCorrection(String ocredPokemonName,String correctedPokemonName){   corrector.putCorrection(ocredPokemonName,correctedPokemonName);   SharedPreferences.Editor edit=sharedPref.edit();   edit.putString(ocredPokemonName,correctedPokemonName);   edit.apply(); } "
"public static String mapFullWidthLetterToHalfWidth(String text){ } "
"private void sendBroadcastUploadsAdded(){   Intent start=new Intent(getUploadsAddedMessage());   sendStickyBroadcast(start); } "
"public Table<C,R,V> computeTransposedTable(){   final Table<C,R,V> transposed=new Table<>();   for (  R row : rowKeySet())   for (  C col : columnKeySet())   transposed.put(col,row,get(row,col));   return transposed; } "
"public SVNCompareRevisionsInput(IFile resource,ILogEntry[] logEntries){   super(new CompareConfiguration());   this.resource=resource;   this.logEntries=logEntries;   updateCurrentEdition();   initializeActions(); } "
"public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,? extends Object> params,boolean validateOut) throws ServiceAuthException, ServiceValidationException, GenericServiceException {   long serviceStartTime=System.currentTimeMillis();   Map<String,Object> result=new HashMap<String,Object>();   ServiceSemaphore lock=null;   Map<String,List<ServiceEcaRule>> eventMap=null;   Map<String,Object> ecaContext=null;   RunningService rs=null;   DispatchContext ctx=localContext.get(localName);   GenericEngine engine=null;   Transaction parentTransaction=null;   boolean isFailure=false;   boolean isError=false;   boolean beganTrans=false;   try {     if (\"wait\".equals(modelService.semaphore) || \"fail\".equals(modelService.semaphore)) {       lock=new ServiceSemaphore(delegator,modelService);       lock.acquire();     }     if (Debug.verboseOn() || modelService.debug) {       Debug.logVerbose(\"[ServiceDispatcher.runSync] : invoking service \" + modelService.name + \" [\"+ modelService.location+ \"/\"+ modelService.invoke+ \"] (\"+ modelService.engineName+ \")\",module);     }     Map<String,Object> context=new HashMap<String,Object>();     if (params != null) {       context.putAll(params);     }     Locale locale=this.checkLocale(context);     rs=this.logService(localName,modelService,GenericEngine.SYNC_MODE);     eventMap=ServiceEcaUtil.getServiceEventMap(modelService.name);     engine=this.getGenericEngine(modelService.engineName);     modelService.updateDefaultValues(context,ModelService.IN_PARAM);     if (modelService.useTransaction) {       if (TransactionUtil.isTransactionInPlace()) {         if (modelService.requireNewTransaction) {           parentTransaction=TransactionUtil.suspend();           if (TransactionUtil.isTransactionInPlace()) {             throw new GenericTransactionException(\"In service \" + modelService.name + \" transaction is still in place after suspend, status is \"+ TransactionUtil.getStatusString());           }           beganTrans=TransactionUtil.begin(modelService.transactionTimeout);         }       }  else {         beganTrans=TransactionUtil.begin(modelService.transactionTimeout);       }       if (beganTrans && TransactionUtil.debugResources()) {         DebugXaResource dxa=new DebugXaResource(modelService.name);         try {           dxa.enlist();         }  catch (        Exception e) {           Debug.logError(e,module);         }       }     }     try {       int lockRetriesRemaining=LOCK_RETRIES;       boolean needsLockRetry=false;       do {         needsLockRetry=false;         lockRetriesRemaining--;         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"global-rollback\",ctx,context,result,isError,isFailure);         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"global-commit\",ctx,context,result,isError,isFailure);         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"auth\",ctx,context,result,isError,isFailure);         isFailure=ServiceUtil.isFailure(result);         isError=ServiceUtil.isError(result);         context=checkAuth(localName,context,modelService);         GenericValue userLogin=(GenericValue)context.get(\"userLogin\");         if (modelService.auth && userLogin == null) {           throw new ServiceAuthException(\"User authorization is required for this service: \" + modelService.name + modelService.debugInfo());         }         if (userLogin != null && userLogin.getString(\"userLoginId\") != null) {           GenericDelegator.pushUserIdentifier(userLogin.getString(\"userLoginId\"));         }         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"in-validate\",ctx,context,result,isError,isFailure);         isFailure=ServiceUtil.isFailure(result);         isError=ServiceUtil.isError(result);         if (modelService.validate && !isError && !isFailure) {           try {             modelService.validate(context,ModelService.IN_PARAM,locale);           }  catch (          ServiceValidationException e) {             Debug.logError(e,\"Incoming context (in runSync : \" + modelService.name + \") does not match expected requirements\",module);             throw e;           }         }         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"invoke\",ctx,context,result,isError,isFailure);         isFailure=ServiceUtil.isFailure(result);         isError=ServiceUtil.isError(result);         if (!isError && !isFailure) {           Map<String,Object> invokeResult=null;           invokeResult=engine.runSync(localName,modelService,context);           engine.sendCallbacks(modelService,context,invokeResult,GenericEngine.SYNC_MODE);           if (invokeResult != null) {             result.putAll(invokeResult);           }  else {             Debug.logWarning(\"Service (in runSync : \" + modelService.name + \") returns null result\",module);           }         }         isFailure=ServiceUtil.isFailure(result);         isError=ServiceUtil.isError(result);         if (beganTrans) {           String errMsg=ServiceUtil.getErrorMessage(result);           if (errMsg != null && errMsg.toUpperCase().indexOf(\"DEADLOCK\") >= 0) {             String retryMsg=\"RETRYING SERVICE [\" + modelService.name + \"]: Deadlock error found in message [\"+ errMsg+ \"]; retry [\"+ (LOCK_RETRIES - lockRetriesRemaining)+ \"] of [\"+ LOCK_RETRIES+ \"]\";             TransactionUtil.rollback(beganTrans,retryMsg,null);             beganTrans=TransactionUtil.begin(modelService.transactionTimeout);             if (beganTrans && TransactionUtil.debugResources()) {               DebugXaResource dxa=new DebugXaResource(modelService.name);               try {                 dxa.enlist();               }  catch (              Exception e) {                 Debug.logError(e,module);               }             }             if (!beganTrans) {               Debug.logError(\"After rollback attempt for lock retry did not begin a new transaction!\",module);             }  else {               needsLockRetry=true;               result=new HashMap<String,Object>();               isFailure=false;               isError=false;               Debug.logWarning(retryMsg,module);             }             if (errMsg != null && (errMsg.indexOf(\"A lock could not be obtained within the time requested\") >= 0 || errMsg.indexOf(\"Lock wait timeout exceeded\") >= 0)) {             }           }         }       }  while (needsLockRetry && lockRetriesRemaining > 0);       ecaContext=new HashMap<String,Object>();       ecaContext.putAll(context);       ecaContext.putAll(result);       modelService.updateDefaultValues(context,ModelService.OUT_PARAM);       if (modelService.validate && validateOut) {         if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,\"out-validate\",ctx,ecaContext,result,isError,isFailure);         try {           modelService.validate(result,ModelService.OUT_PARAM,locale);         }  catch (        ServiceValidationException e) {           throw new GenericServiceException(\"Outgoing result (in runSync : \" + modelService.name + \") does not match expected requirements\",e);         }       }       if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,\"commit\",ctx,ecaContext,result,isError,isFailure);       isFailure=ServiceUtil.isFailure(result);       isError=ServiceUtil.isError(result);       if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,\"global-commit-post-run\",ctx,ecaContext,result,isError,isFailure);       if (isFailure) {         Debug.logWarning(\"Service Failure [\" + modelService.name + \"]: \"+ ServiceUtil.getErrorMessage(result),module);       }     }  catch (    Throwable t) {       if (Debug.timingOn()) {         UtilTimer.closeTimer(localName + \" / \" + modelService.name,\"Sync service failed...\",module);       }       String errMsg=\"Service [\" + modelService.name + \"] threw an unexpected exception/error\";       engine.sendCallbacks(modelService,context,t,GenericEngine.SYNC_MODE);       try {         TransactionUtil.rollback(beganTrans,errMsg,t);       }  catch (      GenericTransactionException te) {         Debug.logError(te,\"Cannot rollback transaction\",module);       }       rs.setEndStamp();       if (t instanceof ServiceAuthException) {         throw (ServiceAuthException)t;       }  else       if (t instanceof ServiceValidationException) {         throw (ServiceValidationException)t;       }  else       if (t instanceof GenericServiceException) {         throw (GenericServiceException)t;       }  else {         throw new GenericServiceException(\"Service [\" + modelService.name + \"] Failed\"+ modelService.debugInfo(),t);       }     }  finally {       if (isError) {         String errMsg=\"Error in Service [\" + modelService.name + \"]: \"+ ServiceUtil.getErrorMessage(result);         Debug.logError(errMsg,module);         try {           TransactionUtil.rollback(beganTrans,errMsg,null);         }  catch (        GenericTransactionException e) {           Debug.logError(e,\"Could not rollback transaction: \" + e.toString(),module);         }       }  else {         try {           TransactionUtil.commit(beganTrans);         }  catch (        GenericTransactionException e) {           GenericDelegator.popUserIdentifier();           String errMsg=\"Could not commit transaction for service [\" + modelService.name + \"] call\";           Debug.logError(e,errMsg,module);           if (e.getMessage() != null) {             errMsg=errMsg + \": \" + e.getMessage();           }           throw new GenericServiceException(errMsg);         }       }       modelService.evalNotifications(this.getLocalContext(localName),context,result);       GenericDelegator.popUserIdentifier();     }   }  catch (  GenericTransactionException te) {     Debug.logError(te,\"Problems with the transaction\",module);     throw new GenericServiceException(\"Problems with the transaction.\",te.getNested());   }  finally {     if (lock != null) {       try {         lock.release();       }  catch (      GenericServiceException e) {         Debug.logWarning(e,\"Exception thrown while unlocking semaphore: \",module);       }     }     if (parentTransaction != null) {       try {         TransactionUtil.resume(parentTransaction);       }  catch (      GenericTransactionException ite) {         Debug.logWarning(ite,\"Transaction error, not resumed\",module);         throw new GenericServiceException(\"Resume transaction exception, see logs\");       }     }   }   if (eventMap != null)   ServiceEcaUtil.evalRules(modelService.name,eventMap,\"return\",ctx,ecaContext,result,isError,isFailure);   rs.setEndStamp();   long timeToRun=System.currentTimeMillis() - serviceStartTime;   long showServiceDurationThreshold=UtilProperties.getPropertyAsLong(\"service\",\"showServiceDurationThreshold\",0);   long showSlowServiceThreshold=UtilProperties.getPropertyAsLong(\"service\",\"showSlowServiceThreshold\",1000);   if (Debug.timingOn() && timeToRun > showServiceDurationThreshold) {     Debug.logTiming(\"Sync service [\" + localName + \"/\"+ modelService.name+ \"] finished in [\"+ timeToRun+ \"] milliseconds\",module);   }  else   if (Debug.infoOn() && timeToRun > showSlowServiceThreshold) {     Debug.logTiming(\"Slow sync service execution detected: service [\" + localName + \"/\"+ modelService.name+ \"] finished in [\"+ timeToRun+ \"] milliseconds\",module);   }   if ((Debug.verboseOn() || modelService.debug) && timeToRun > 50 && !modelService.hideResultInLog) {     String resultStr=result.toString();     if (resultStr.length() > 10240) {       resultStr=resultStr.substring(0,10226) + \"...[truncated]\";     }     Debug.logVerbose(\"Sync service [\" + localName + \"/\"+ modelService.name+ \"] finished with response [\"+ resultStr+ \"]\",module);   }   if (modelService.metrics != null) {     modelService.metrics.recordServiceRate(1,timeToRun);   }   return result; } "
"public static String formatCreateDate(String createDate){   String result=\"\";   if (!TextUtils.isEmpty(createDate) && createDate.length() >= 10) {     result=createDate.substring(0,10);   }   return result; } "
"public Object childrenAccept(MithraQLVisitor visitor,Object data){   visitor.visit(this,data);   if (this.children != null) {     for (int i=0; i < this.children.length; ++i) {       this.children[i].jjtAccept(visitor,data);       ((SimpleNode)this.children[i]).childrenAccept(visitor,data);     }   }   return data; } "
"public static boolean putBoolean(Context context,String key,boolean value){   SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);   SharedPreferences.Editor editor=settings.edit();   editor.putBoolean(key,value);   return editor.commit(); } "
"public HTMLSchema(){   setURI(\"http://www.w3.org/1999/xhtml\");   setPrefix(\"html\");   elementType(\"<pcdata>\",M_EMPTY,M_PCDATA,0);   elementType(\"<root>\",M_ROOT,M_EMPTY,0);   elementType(\"a\",M_PCDATA | M_NOLINK,M_INLINE,0);   elementType(\"abbr\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"acronym\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"address\",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);   elementType(\"applet\",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);   elementType(\"area\",M_EMPTY,M_AREA,0);   elementType(\"b\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"base\",M_EMPTY,M_HEAD,0);   elementType(\"basefont\",M_EMPTY,M_INLINE | M_NOLINK,0);   elementType(\"bdo\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"bgsound\",M_EMPTY,M_HEAD,0);   elementType(\"big\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"blink\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"blockquote\",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);   elementType(\"body\",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);   elementType(\"br\",M_EMPTY,M_INLINE | M_NOLINK,0);   elementType(\"button\",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);   elementType(\"canvas\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"caption\",M_PCDATA | M_INLINE,M_TABULAR,0);   elementType(\"center\",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);   elementType(\"cite\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"code\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"col\",M_EMPTY,M_COL | M_TABULAR,0);   elementType(\"colgroup\",M_COL,M_TABULAR,0);   elementType(\"comment\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"dd\",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);   elementType(\"del\",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);   elementType(\"dfn\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"dir\",M_LI,M_BLOCK,0);   elementType(\"div\",M_LI | M_PCDATA | M_INLINE| M_BLOCK,M_LI | M_BLOCK,0);   elementType(\"dl\",M_DEF,M_BLOCK,0);   elementType(\"dt\",M_PCDATA | M_INLINE,M_DEF,0);   elementType(\"em\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"fieldset\",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);   elementType(\"font\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"form\",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);   elementType(\"frame\",M_EMPTY,M_FRAME,0);   elementType(\"frameset\",M_FRAME,M_FRAME | M_HTML,0);   elementType(\"h1\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"h2\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"h3\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"h4\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"h5\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"h6\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"head\",M_HEAD,M_HTML,0);   elementType(\"hr\",M_EMPTY,M_BLOCK,0);   elementType(\"html\",M_HTML,M_ROOT,0);   elementType(\"i\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"iframe\",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);   elementType(\"img\",M_EMPTY,M_INLINE | M_NOLINK,0);   elementType(\"input\",M_EMPTY,M_INLINE | M_NOLINK,0);   elementType(\"ins\",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);   elementType(\"isindex\",M_EMPTY,M_HEAD,0);   elementType(\"kbd\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"label\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"legend\",M_PCDATA | M_INLINE,M_LEGEND,0);   elementType(\"li\",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);   elementType(\"link\",M_EMPTY,M_HEAD | M_INLINE,0);   elementType(\"listing\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"map\",M_BLOCK | M_AREA,M_INLINE,0);   elementType(\"marquee\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"menu\",M_LI,M_BLOCK,0);   elementType(\"meta\",M_EMPTY,M_HEAD,0);   elementType(\"nobr\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"noframes\",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);   elementType(\"noscript\",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);   elementType(\"object\",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);   elementType(\"ol\",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);   elementType(\"optgroup\",M_OPTIONS,M_OPTIONS,0);   elementType(\"option\",M_PCDATA,M_OPTION | M_OPTIONS,0);   elementType(\"p\",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);   elementType(\"param\",M_EMPTY,M_PARAM,0);   elementType(\"pre\",M_PCDATA | M_INLINE,M_BLOCK,0);   elementType(\"q\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"rb\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"rbc\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"rp\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"rt\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"rtc\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"ruby\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"s\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"samp\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"script\",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);   elementType(\"select\",M_OPTIONS,M_INLINE,0);   elementType(\"small\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"span\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"strike\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"strong\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"style\",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);   elementType(\"sub\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"sup\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"table\",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);   elementType(\"tbody\",M_TR,M_TABULAR,0);   elementType(\"td\",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);   elementType(\"textarea\",M_PCDATA,M_INLINE,0);   elementType(\"tfoot\",M_TR | M_FORM | M_CELL,M_TABULAR,0);   elementType(\"th\",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);   elementType(\"thead\",M_TR | M_FORM | M_CELL,M_TABULAR,0);   elementType(\"title\",M_PCDATA,M_HEAD,0);   elementType(\"tr\",M_FORM | M_CELL,M_TR | M_TABULAR,0);   elementType(\"tt\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"u\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);   elementType(\"ul\",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);   elementType(\"var\",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);   elementType(\"wbr\",M_EMPTY,M_INLINE | M_NOLINK,0);   elementType(\"xmp\",M_PCDATA | M_INLINE,M_BLOCK,0);   parent(\"<pcdata>\",\"body\");   parent(\"html\",\"<root>\");   parent(\"a\",\"body\");   parent(\"abbr\",\"body\");   parent(\"acronym\",\"body\");   parent(\"address\",\"body\");   parent(\"applet\",\"body\");   parent(\"area\",\"map\");   parent(\"b\",\"body\");   parent(\"base\",\"head\");   parent(\"basefont\",\"body\");   parent(\"bdo\",\"body\");   parent(\"bgsound\",\"head\");   parent(\"big\",\"body\");   parent(\"blink\",\"body\");   parent(\"blockquote\",\"body\");   parent(\"body\",\"html\");   parent(\"br\",\"body\");   parent(\"button\",\"form\");   parent(\"canvas\",\"body\");   parent(\"caption\",\"table\");   parent(\"center\",\"body\");   parent(\"cite\",\"body\");   parent(\"code\",\"body\");   parent(\"col\",\"table\");   parent(\"colgroup\",\"table\");   parent(\"comment\",\"body\");   parent(\"dd\",\"dl\");   parent(\"del\",\"body\");   parent(\"dfn\",\"body\");   parent(\"dir\",\"body\");   parent(\"div\",\"body\");   parent(\"dl\",\"body\");   parent(\"dt\",\"dl\");   parent(\"em\",\"body\");   parent(\"fieldset\",\"form\");   parent(\"font\",\"body\");   parent(\"form\",\"body\");   parent(\"frame\",\"frameset\");   parent(\"frameset\",\"html\");   parent(\"h1\",\"body\");   parent(\"h2\",\"body\");   parent(\"h3\",\"body\");   parent(\"h4\",\"body\");   parent(\"h5\",\"body\");   parent(\"h6\",\"body\");   parent(\"head\",\"html\");   parent(\"hr\",\"body\");   parent(\"i\",\"body\");   parent(\"iframe\",\"body\");   parent(\"img\",\"body\");   parent(\"input\",\"form\");   parent(\"ins\",\"body\");   parent(\"isindex\",\"head\");   parent(\"kbd\",\"body\");   parent(\"label\",\"form\");   parent(\"legend\",\"fieldset\");   parent(\"li\",\"ul\");   parent(\"link\",\"head\");   parent(\"listing\",\"body\");   parent(\"map\",\"body\");   parent(\"marquee\",\"body\");   parent(\"menu\",\"body\");   parent(\"meta\",\"head\");   parent(\"nobr\",\"body\");   parent(\"noframes\",\"html\");   parent(\"noscript\",\"body\");   parent(\"object\",\"body\");   parent(\"ol\",\"body\");   parent(\"optgroup\",\"select\");   parent(\"option\",\"select\");   parent(\"p\",\"body\");   parent(\"param\",\"object\");   parent(\"pre\",\"body\");   parent(\"q\",\"body\");   parent(\"rb\",\"body\");   parent(\"rbc\",\"body\");   parent(\"rp\",\"body\");   parent(\"rt\",\"body\");   parent(\"rtc\",\"body\");   parent(\"ruby\",\"body\");   parent(\"s\",\"body\");   parent(\"samp\",\"body\");   parent(\"script\",\"html\");   parent(\"select\",\"form\");   parent(\"small\",\"body\");   parent(\"span\",\"body\");   parent(\"strike\",\"body\");   parent(\"strong\",\"body\");   parent(\"style\",\"head\");   parent(\"sub\",\"body\");   parent(\"sup\",\"body\");   parent(\"table\",\"body\");   parent(\"tbody\",\"table\");   parent(\"td\",\"tr\");   parent(\"textarea\",\"form\");   parent(\"tfoot\",\"table\");   parent(\"th\",\"tr\");   parent(\"thead\",\"table\");   parent(\"title\",\"head\");   parent(\"tr\",\"tbody\");   parent(\"tt\",\"body\");   parent(\"u\",\"body\");   parent(\"ul\",\"body\");   parent(\"var\",\"body\");   parent(\"wbr\",\"body\");   parent(\"xmp\",\"body\");   attribute(\"a\",\"hreflang\",\"NMTOKEN\",null);   attribute(\"a\",\"shape\",\"CDATA\",\"rect\");   attribute(\"a\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"applet\",\"align\",\"NMTOKEN\",null);   attribute(\"area\",\"nohref\",\"BOOLEAN\",null);   attribute(\"area\",\"shape\",\"CDATA\",\"rect\");   attribute(\"area\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"br\",\"clear\",\"CDATA\",\"none\");   attribute(\"button\",\"disabled\",\"BOOLEAN\",null);   attribute(\"button\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"button\",\"type\",\"CDATA\",\"submit\");   attribute(\"caption\",\"align\",\"NMTOKEN\",null);   attribute(\"col\",\"align\",\"NMTOKEN\",null);   attribute(\"col\",\"span\",\"CDATA\",\"1\");   attribute(\"col\",\"valign\",\"NMTOKEN\",null);   attribute(\"colgroup\",\"align\",\"NMTOKEN\",null);   attribute(\"colgroup\",\"span\",\"CDATA\",\"1\");   attribute(\"colgroup\",\"valign\",\"NMTOKEN\",null);   attribute(\"dir\",\"compact\",\"BOOLEAN\",null);   attribute(\"div\",\"align\",\"NMTOKEN\",null);   attribute(\"dl\",\"compact\",\"BOOLEAN\",null);   attribute(\"form\",\"enctype\",\"CDATA\",\"application/x-www-form-urlencoded\");   attribute(\"form\",\"method\",\"CDATA\",\"get\");   attribute(\"frame\",\"frameborder\",\"CDATA\",\"1\");   attribute(\"frame\",\"noresize\",\"BOOLEAN\",null);   attribute(\"frame\",\"scrolling\",\"CDATA\",\"auto\");   attribute(\"h1\",\"align\",\"NMTOKEN\",null);   attribute(\"h2\",\"align\",\"NMTOKEN\",null);   attribute(\"h3\",\"align\",\"NMTOKEN\",null);   attribute(\"h4\",\"align\",\"NMTOKEN\",null);   attribute(\"h5\",\"align\",\"NMTOKEN\",null);   attribute(\"h6\",\"align\",\"NMTOKEN\",null);   attribute(\"hr\",\"align\",\"NMTOKEN\",null);   attribute(\"hr\",\"noshade\",\"BOOLEAN\",null);   attribute(\"iframe\",\"align\",\"NMTOKEN\",null);   attribute(\"iframe\",\"frameborder\",\"CDATA\",\"1\");   attribute(\"iframe\",\"scrolling\",\"CDATA\",\"auto\");   attribute(\"img\",\"align\",\"NMTOKEN\",null);   attribute(\"img\",\"ismap\",\"BOOLEAN\",null);   attribute(\"input\",\"align\",\"NMTOKEN\",null);   attribute(\"input\",\"checked\",\"BOOLEAN\",null);   attribute(\"input\",\"disabled\",\"BOOLEAN\",null);   attribute(\"input\",\"ismap\",\"BOOLEAN\",null);   attribute(\"input\",\"maxlength\",\"NMTOKEN\",null);   attribute(\"input\",\"readonly\",\"BOOLEAN\",null);   attribute(\"input\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"input\",\"type\",\"CDATA\",\"text\");   attribute(\"label\",\"for\",\"IDREF\",null);   attribute(\"legend\",\"align\",\"NMTOKEN\",null);   attribute(\"li\",\"value\",\"NMTOKEN\",null);   attribute(\"link\",\"hreflang\",\"NMTOKEN\",null);   attribute(\"marquee\",\"width\",\"NMTOKEN\",null);   attribute(\"menu\",\"compact\",\"BOOLEAN\",null);   attribute(\"meta\",\"http-equiv\",\"NMTOKEN\",null);   attribute(\"meta\",\"name\",\"NMTOKEN\",null);   attribute(\"object\",\"align\",\"NMTOKEN\",null);   attribute(\"object\",\"declare\",\"BOOLEAN\",null);   attribute(\"object\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"ol\",\"compact\",\"BOOLEAN\",null);   attribute(\"ol\",\"start\",\"NMTOKEN\",null);   attribute(\"optgroup\",\"disabled\",\"BOOLEAN\",null);   attribute(\"option\",\"disabled\",\"BOOLEAN\",null);   attribute(\"option\",\"selected\",\"BOOLEAN\",null);   attribute(\"p\",\"align\",\"NMTOKEN\",null);   attribute(\"param\",\"valuetype\",\"CDATA\",\"data\");   attribute(\"pre\",\"width\",\"NMTOKEN\",null);   attribute(\"rt\",\"rbspan\",\"CDATA\",\"1\");   attribute(\"script\",\"defer\",\"BOOLEAN\",null);   attribute(\"select\",\"disabled\",\"BOOLEAN\",null);   attribute(\"select\",\"multiple\",\"BOOLEAN\",null);   attribute(\"select\",\"size\",\"NMTOKEN\",null);   attribute(\"select\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"table\",\"align\",\"NMTOKEN\",null);   attribute(\"table\",\"frame\",\"NMTOKEN\",null);   attribute(\"table\",\"rules\",\"NMTOKEN\",null);   attribute(\"tbody\",\"align\",\"NMTOKEN\",null);   attribute(\"tbody\",\"valign\",\"NMTOKEN\",null);   attribute(\"td\",\"align\",\"NMTOKEN\",null);   attribute(\"td\",\"colspan\",\"CDATA\",\"1\");   attribute(\"td\",\"headers\",\"IDREFS\",null);   attribute(\"td\",\"nowrap\",\"BOOLEAN\",null);   attribute(\"td\",\"rowspan\",\"CDATA\",\"1\");   attribute(\"td\",\"scope\",\"NMTOKEN\",null);   attribute(\"td\",\"valign\",\"NMTOKEN\",null);   attribute(\"textarea\",\"cols\",\"NMTOKEN\",null);   attribute(\"textarea\",\"disabled\",\"BOOLEAN\",null);   attribute(\"textarea\",\"readonly\",\"BOOLEAN\",null);   attribute(\"textarea\",\"rows\",\"NMTOKEN\",null);   attribute(\"textarea\",\"tabindex\",\"NMTOKEN\",null);   attribute(\"tfoot\",\"align\",\"NMTOKEN\",null);   attribute(\"tfoot\",\"valign\",\"NMTOKEN\",null);   attribute(\"th\",\"align\",\"NMTOKEN\",null);   attribute(\"th\",\"colspan\",\"CDATA\",\"1\");   attribute(\"th\",\"headers\",\"IDREFS\",null);   attribute(\"th\",\"nowrap\",\"BOOLEAN\",null);   attribute(\"th\",\"rowspan\",\"CDATA\",\"1\");   attribute(\"th\",\"scope\",\"NMTOKEN\",null);   attribute(\"th\",\"valign\",\"NMTOKEN\",null);   attribute(\"thead\",\"align\",\"NMTOKEN\",null);   attribute(\"thead\",\"valign\",\"NMTOKEN\",null);   attribute(\"tr\",\"align\",\"NMTOKEN\",null);   attribute(\"tr\",\"valign\",\"NMTOKEN\",null);   attribute(\"ul\",\"compact\",\"BOOLEAN\",null);   attribute(\"ul\",\"type\",\"NMTOKEN\",null);   attribute(\"xmp\",\"width\",\"NMTOKEN\",null);   attribute(\"a\",\"class\",\"NMTOKEN\",null);   attribute(\"abbr\",\"class\",\"NMTOKEN\",null);   attribute(\"acronym\",\"class\",\"NMTOKEN\",null);   attribute(\"address\",\"class\",\"NMTOKEN\",null);   attribute(\"applet\",\"class\",\"NMTOKEN\",null);   attribute(\"area\",\"class\",\"NMTOKEN\",null);   attribute(\"b\",\"class\",\"NMTOKEN\",null);   attribute(\"base\",\"class\",\"NMTOKEN\",null);   attribute(\"basefont\",\"class\",\"NMTOKEN\",null);   attribute(\"bdo\",\"class\",\"NMTOKEN\",null);   attribute(\"bgsound\",\"class\",\"NMTOKEN\",null);   attribute(\"big\",\"class\",\"NMTOKEN\",null);   attribute(\"blink\",\"class\",\"NMTOKEN\",null);   attribute(\"blockquote\",\"class\",\"NMTOKEN\",null);   attribute(\"body\",\"class\",\"NMTOKEN\",null);   attribute(\"br\",\"class\",\"NMTOKEN\",null);   attribute(\"button\",\"class\",\"NMTOKEN\",null);   attribute(\"canvas\",\"class\",\"NMTOKEN\",null);   attribute(\"caption\",\"class\",\"NMTOKEN\",null);   attribute(\"center\",\"class\",\"NMTOKEN\",null);   attribute(\"cite\",\"class\",\"NMTOKEN\",null);   attribute(\"code\",\"class\",\"NMTOKEN\",null);   attribute(\"col\",\"class\",\"NMTOKEN\",null);   attribute(\"colgroup\",\"class\",\"NMTOKEN\",null);   attribute(\"comment\",\"class\",\"NMTOKEN\",null);   attribute(\"dd\",\"class\",\"NMTOKEN\",null);   attribute(\"del\",\"class\",\"NMTOKEN\",null);   attribute(\"dfn\",\"class\",\"NMTOKEN\",null);   attribute(\"dir\",\"class\",\"NMTOKEN\",null);   attribute(\"div\",\"class\",\"NMTOKEN\",null);   attribute(\"dl\",\"class\",\"NMTOKEN\",null);   attribute(\"dt\",\"class\",\"NMTOKEN\",null);   attribute(\"em\",\"class\",\"NMTOKEN\",null);   attribute(\"fieldset\",\"class\",\"NMTOKEN\",null);   attribute(\"font\",\"class\",\"NMTOKEN\",null);   attribute(\"form\",\"class\",\"NMTOKEN\",null);   attribute(\"frame\",\"class\",\"NMTOKEN\",null);   attribute(\"frameset\",\"class\",\"NMTOKEN\",null);   attribute(\"h1\",\"class\",\"NMTOKEN\",null);   attribute(\"h2\",\"class\",\"NMTOKEN\",null);   attribute(\"h3\",\"class\",\"NMTOKEN\",null);   attribute(\"h4\",\"class\",\"NMTOKEN\",null);   attribute(\"h5\",\"class\",\"NMTOKEN\",null);   attribute(\"h6\",\"class\",\"NMTOKEN\",null);   attribute(\"head\",\"class\",\"NMTOKEN\",null);   attribute(\"hr\",\"class\",\"NMTOKEN\",null);   attribute(\"html\",\"class\",\"NMTOKEN\",null);   attribute(\"i\",\"class\",\"NMTOKEN\",null);   attribute(\"iframe\",\"class\",\"NMTOKEN\",null);   attribute(\"img\",\"class\",\"NMTOKEN\",null);   attribute(\"input\",\"class\",\"NMTOKEN\",null);   attribute(\"ins\",\"class\",\"NMTOKEN\",null);   attribute(\"isindex\",\"class\",\"NMTOKEN\",null);   attribute(\"kbd\",\"class\",\"NMTOKEN\",null);   attribute(\"label\",\"class\",\"NMTOKEN\",null);   attribute(\"legend\",\"class\",\"NMTOKEN\",null);   attribute(\"li\",\"class\",\"NMTOKEN\",null);   attribute(\"link\",\"class\",\"NMTOKEN\",null);   attribute(\"listing\",\"class\",\"NMTOKEN\",null);   attribute(\"map\",\"class\",\"NMTOKEN\",null);   attribute(\"marquee\",\"class\",\"NMTOKEN\",null);   attribute(\"menu\",\"class\",\"NMTOKEN\",null);   attribute(\"meta\",\"class\",\"NMTOKEN\",null);   attribute(\"nobr\",\"class\",\"NMTOKEN\",null);   attribute(\"noframes\",\"class\",\"NMTOKEN\",null);   attribute(\"noscript\",\"class\",\"NMTOKEN\",null);   attribute(\"object\",\"class\",\"NMTOKEN\",null);   attribute(\"ol\",\"class\",\"NMTOKEN\",null);   attribute(\"optgroup\",\"class\",\"NMTOKEN\",null);   attribute(\"option\",\"class\",\"NMTOKEN\",null);   attribute(\"p\",\"class\",\"NMTOKEN\",null);   attribute(\"param\",\"class\",\"NMTOKEN\",null);   attribute(\"pre\",\"class\",\"NMTOKEN\",null);   attribute(\"q\",\"class\",\"NMTOKEN\",null);   attribute(\"rb\",\"class\",\"NMTOKEN\",null);   attribute(\"rbc\",\"class\",\"NMTOKEN\",null);   attribute(\"rp\",\"class\",\"NMTOKEN\",null);   attribute(\"rt\",\"class\",\"NMTOKEN\",null);   attribute(\"rtc\",\"class\",\"NMTOKEN\",null);   attribute(\"ruby\",\"class\",\"NMTOKEN\",null);   attribute(\"s\",\"class\",\"NMTOKEN\",null);   attribute(\"samp\",\"class\",\"NMTOKEN\",null);   attribute(\"script\",\"class\",\"NMTOKEN\",null);   attribute(\"select\",\"class\",\"NMTOKEN\",null);   attribute(\"small\",\"class\",\"NMTOKEN\",null);   attribute(\"span\",\"class\",\"NMTOKEN\",null);   attribute(\"strike\",\"class\",\"NMTOKEN\",null);   attribute(\"strong\",\"class\",\"NMTOKEN\",null);   attribute(\"style\",\"class\",\"NMTOKEN\",null);   attribute(\"sub\",\"class\",\"NMTOKEN\",null);   attribute(\"sup\",\"class\",\"NMTOKEN\",null);   attribute(\"table\",\"class\",\"NMTOKEN\",null);   attribute(\"tbody\",\"class\",\"NMTOKEN\",null);   attribute(\"td\",\"class\",\"NMTOKEN\",null);   attribute(\"textarea\",\"class\",\"NMTOKEN\",null);   attribute(\"tfoot\",\"class\",\"NMTOKEN\",null);   attribute(\"th\",\"class\",\"NMTOKEN\",null);   attribute(\"thead\",\"class\",\"NMTOKEN\",null);   attribute(\"title\",\"class\",\"NMTOKEN\",null);   attribute(\"tr\",\"class\",\"NMTOKEN\",null);   attribute(\"tt\",\"class\",\"NMTOKEN\",null);   attribute(\"u\",\"class\",\"NMTOKEN\",null);   attribute(\"ul\",\"class\",\"NMTOKEN\",null);   attribute(\"var\",\"class\",\"NMTOKEN\",null);   attribute(\"wbr\",\"class\",\"NMTOKEN\",null);   attribute(\"xmp\",\"class\",\"NMTOKEN\",null);   attribute(\"a\",\"dir\",\"NMTOKEN\",null);   attribute(\"abbr\",\"dir\",\"NMTOKEN\",null);   attribute(\"acronym\",\"dir\",\"NMTOKEN\",null);   attribute(\"address\",\"dir\",\"NMTOKEN\",null);   attribute(\"applet\",\"dir\",\"NMTOKEN\",null);   attribute(\"area\",\"dir\",\"NMTOKEN\",null);   attribute(\"b\",\"dir\",\"NMTOKEN\",null);   attribute(\"base\",\"dir\",\"NMTOKEN\",null);   attribute(\"basefont\",\"dir\",\"NMTOKEN\",null);   attribute(\"bdo\",\"dir\",\"NMTOKEN\",null);   attribute(\"bgsound\",\"dir\",\"NMTOKEN\",null);   attribute(\"big\",\"dir\",\"NMTOKEN\",null);   attribute(\"blink\",\"dir\",\"NMTOKEN\",null);   attribute(\"blockquote\",\"dir\",\"NMTOKEN\",null);   attribute(\"body\",\"dir\",\"NMTOKEN\",null);   attribute(\"br\",\"dir\",\"NMTOKEN\",null);   attribute(\"button\",\"dir\",\"NMTOKEN\",null);   attribute(\"canvas\",\"dir\",\"NMTOKEN\",null);   attribute(\"caption\",\"dir\",\"NMTOKEN\",null);   attribute(\"center\",\"dir\",\"NMTOKEN\",null);   attribute(\"cite\",\"dir\",\"NMTOKEN\",null);   attribute(\"code\",\"dir\",\"NMTOKEN\",null);   attribute(\"col\",\"dir\",\"NMTOKEN\",null);   attribute(\"colgroup\",\"dir\",\"NMTOKEN\",null);   attribute(\"comment\",\"dir\",\"NMTOKEN\",null);   attribute(\"dd\",\"dir\",\"NMTOKEN\",null);   attribute(\"del\",\"dir\",\"NMTOKEN\",null);   attribute(\"dfn\",\"dir\",\"NMTOKEN\",null);   attribute(\"dir\",\"dir\",\"NMTOKEN\",null);   attribute(\"div\",\"dir\",\"NMTOKEN\",null);   attribute(\"dl\",\"dir\",\"NMTOKEN\",null);   attribute(\"dt\",\"dir\",\"NMTOKEN\",null);   attribute(\"em\",\"dir\",\"NMTOKEN\",null);   attribute(\"fieldset\",\"dir\",\"NMTOKEN\",null);   attribute(\"font\",\"dir\",\"NMTOKEN\",null);   attribute(\"form\",\"dir\",\"NMTOKEN\",null);   attribute(\"frame\",\"dir\",\"NMTOKEN\",null);   attribute(\"frameset\",\"dir\",\"NMTOKEN\",null);   attribute(\"h1\",\"dir\",\"NMTOKEN\",null);   attribute(\"h2\",\"dir\",\"NMTOKEN\",null);   attribute(\"h3\",\"dir\",\"NMTOKEN\",null);   attribute(\"h4\",\"dir\",\"NMTOKEN\",null);   attribute(\"h5\",\"dir\",\"NMTOKEN\",null);   attribute(\"h6\",\"dir\",\"NMTOKEN\",null);   attribute(\"head\",\"dir\",\"NMTOKEN\",null);   attribute(\"hr\",\"dir\",\"NMTOKEN\",null);   attribute(\"html\",\"dir\",\"NMTOKEN\",null);   attribute(\"i\",\"dir\",\"NMTOKEN\",null);   attribute(\"iframe\",\"dir\",\"NMTOKEN\",null);   attribute(\"img\",\"dir\",\"NMTOKEN\",null);   attribute(\"input\",\"dir\",\"NMTOKEN\",null);   attribute(\"ins\",\"dir\",\"NMTOKEN\",null);   attribute(\"isindex\",\"dir\",\"NMTOKEN\",null);   attribute(\"kbd\",\"dir\",\"NMTOKEN\",null);   attribute(\"label\",\"dir\",\"NMTOKEN\",null);   attribute(\"legend\",\"dir\",\"NMTOKEN\",null);   attribute(\"li\",\"dir\",\"NMTOKEN\",null);   attribute(\"link\",\"dir\",\"NMTOKEN\",null);   attribute(\"listing\",\"dir\",\"NMTOKEN\",null);   attribute(\"map\",\"dir\",\"NMTOKEN\",null);   attribute(\"marquee\",\"dir\",\"NMTOKEN\",null);   attribute(\"menu\",\"dir\",\"NMTOKEN\",null);   attribute(\"meta\",\"dir\",\"NMTOKEN\",null);   attribute(\"nobr\",\"dir\",\"NMTOKEN\",null);   attribute(\"noframes\",\"dir\",\"NMTOKEN\",null);   attribute(\"noscript\",\"dir\",\"NMTOKEN\",null);   attribute(\"object\",\"dir\",\"NMTOKEN\",null);   attribute(\"ol\",\"dir\",\"NMTOKEN\",null);   attribute(\"optgroup\",\"dir\",\"NMTOKEN\",null);   attribute(\"option\",\"dir\",\"NMTOKEN\",null);   attribute(\"p\",\"dir\",\"NMTOKEN\",null);   attribute(\"param\",\"dir\",\"NMTOKEN\",null);   attribute(\"pre\",\"dir\",\"NMTOKEN\",null);   attribute(\"q\",\"dir\",\"NMTOKEN\",null);   attribute(\"rb\",\"dir\",\"NMTOKEN\",null);   attribute(\"rbc\",\"dir\",\"NMTOKEN\",null);   attribute(\"rp\",\"dir\",\"NMTOKEN\",null);   attribute(\"rt\",\"dir\",\"NMTOKEN\",null);   attribute(\"rtc\",\"dir\",\"NMTOKEN\",null);   attribute(\"ruby\",\"dir\",\"NMTOKEN\",null);   attribute(\"s\",\"dir\",\"NMTOKEN\",null);   attribute(\"samp\",\"dir\",\"NMTOKEN\",null);   attribute(\"script\",\"dir\",\"NMTOKEN\",null);   attribute(\"select\",\"dir\",\"NMTOKEN\",null);   attribute(\"small\",\"dir\",\"NMTOKEN\",null);   attribute(\"span\",\"dir\",\"NMTOKEN\",null);   attribute(\"strike\",\"dir\",\"NMTOKEN\",null);   attribute(\"strong\",\"dir\",\"NMTOKEN\",null);   attribute(\"style\",\"dir\",\"NMTOKEN\",null);   attribute(\"sub\",\"dir\",\"NMTOKEN\",null);   attribute(\"sup\",\"dir\",\"NMTOKEN\",null);   attribute(\"table\",\"dir\",\"NMTOKEN\",null);   attribute(\"tbody\",\"dir\",\"NMTOKEN\",null);   attribute(\"td\",\"dir\",\"NMTOKEN\",null);   attribute(\"textarea\",\"dir\",\"NMTOKEN\",null);   attribute(\"tfoot\",\"dir\",\"NMTOKEN\",null);   attribute(\"th\",\"dir\",\"NMTOKEN\",null);   attribute(\"thead\",\"dir\",\"NMTOKEN\",null);   attribute(\"title\",\"dir\",\"NMTOKEN\",null);   attribute(\"tr\",\"dir\",\"NMTOKEN\",null);   attribute(\"tt\",\"dir\",\"NMTOKEN\",null);   attribute(\"u\",\"dir\",\"NMTOKEN\",null);   attribute(\"ul\",\"dir\",\"NMTOKEN\",null);   attribute(\"var\",\"dir\",\"NMTOKEN\",null);   attribute(\"wbr\",\"dir\",\"NMTOKEN\",null);   attribute(\"xmp\",\"dir\",\"NMTOKEN\",null);   attribute(\"a\",\"id\",\"ID\",null);   attribute(\"abbr\",\"id\",\"ID\",null);   attribute(\"acronym\",\"id\",\"ID\",null);   attribute(\"address\",\"id\",\"ID\",null);   attribute(\"applet\",\"id\",\"ID\",null);   attribute(\"area\",\"id\",\"ID\",null);   attribute(\"b\",\"id\",\"ID\",null);   attribute(\"base\",\"id\",\"ID\",null);   attribute(\"basefont\",\"id\",\"ID\",null);   attribute(\"bdo\",\"id\",\"ID\",null);   attribute(\"bgsound\",\"id\",\"ID\",null);   attribute(\"big\",\"id\",\"ID\",null);   attribute(\"blink\",\"id\",\"ID\",null);   attribute(\"blockquote\",\"id\",\"ID\",null);   attribute(\"body\",\"id\",\"ID\",null);   attribute(\"br\",\"id\",\"ID\",null);   attribute(\"button\",\"id\",\"ID\",null);   attribute(\"canvas\",\"id\",\"ID\",null);   attribute(\"caption\",\"id\",\"ID\",null);   attribute(\"center\",\"id\",\"ID\",null);   attribute(\"cite\",\"id\",\"ID\",null);   attribute(\"code\",\"id\",\"ID\",null);   attribute(\"col\",\"id\",\"ID\",null);   attribute(\"colgroup\",\"id\",\"ID\",null);   attribute(\"comment\",\"id\",\"ID\",null);   attribute(\"dd\",\"id\",\"ID\",null);   attribute(\"del\",\"id\",\"ID\",null);   attribute(\"dfn\",\"id\",\"ID\",null);   attribute(\"dir\",\"id\",\"ID\",null);   attribute(\"div\",\"id\",\"ID\",null);   attribute(\"dl\",\"id\",\"ID\",null);   attribute(\"dt\",\"id\",\"ID\",null);   attribute(\"em\",\"id\",\"ID\",null);   attribute(\"fieldset\",\"id\",\"ID\",null);   attribute(\"font\",\"id\",\"ID\",null);   attribute(\"form\",\"id\",\"ID\",null);   attribute(\"frame\",\"id\",\"ID\",null);   attribute(\"frameset\",\"id\",\"ID\",null);   attribute(\"h1\",\"id\",\"ID\",null);   attribute(\"h2\",\"id\",\"ID\",null);   attribute(\"h3\",\"id\",\"ID\",null);   attribute(\"h4\",\"id\",\"ID\",null);   attribute(\"h5\",\"id\",\"ID\",null);   attribute(\"h6\",\"id\",\"ID\",null);   attribute(\"head\",\"id\",\"ID\",null);   attribute(\"hr\",\"id\",\"ID\",null);   attribute(\"html\",\"id\",\"ID\",null);   attribute(\"i\",\"id\",\"ID\",null);   attribute(\"iframe\",\"id\",\"ID\",null);   attribute(\"img\",\"id\",\"ID\",null);   attribute(\"input\",\"id\",\"ID\",null);   attribute(\"ins\",\"id\",\"ID\",null);   attribute(\"isindex\",\"id\",\"ID\",null);   attribute(\"kbd\",\"id\",\"ID\",null);   attribute(\"label\",\"id\",\"ID\",null);   attribute(\"legend\",\"id\",\"ID\",null);   attribute(\"li\",\"id\",\"ID\",null);   attribute(\"link\",\"id\",\"ID\",null);   attribute(\"listing\",\"id\",\"ID\",null);   attribute(\"map\",\"id\",\"ID\",null);   attribute(\"marquee\",\"id\",\"ID\",null);   attribute(\"menu\",\"id\",\"ID\",null);   attribute(\"meta\",\"id\",\"ID\",null);   attribute(\"nobr\",\"id\",\"ID\",null);   attribute(\"noframes\",\"id\",\"ID\",null);   attribute(\"noscript\",\"id\",\"ID\",null);   attribute(\"object\",\"id\",\"ID\",null);   attribute(\"ol\",\"id\",\"ID\",null);   attribute(\"optgroup\",\"id\",\"ID\",null);   attribute(\"option\",\"id\",\"ID\",null);   attribute(\"p\",\"id\",\"ID\",null);   attribute(\"param\",\"id\",\"ID\",null);   attribute(\"pre\",\"id\",\"ID\",null);   attribute(\"q\",\"id\",\"ID\",null);   attribute(\"rb\",\"id\",\"ID\",null);   attribute(\"rbc\",\"id\",\"ID\",null);   attribute(\"rp\",\"id\",\"ID\",null);   attribute(\"rt\",\"id\",\"ID\",null);   attribute(\"rtc\",\"id\",\"ID\",null);   attribute(\"ruby\",\"id\",\"ID\",null);   attribute(\"s\",\"id\",\"ID\",null);   attribute(\"samp\",\"id\",\"ID\",null);   attribute(\"script\",\"id\",\"ID\",null);   attribute(\"select\",\"id\",\"ID\",null);   attribute(\"small\",\"id\",\"ID\",null);   attribute(\"span\",\"id\",\"ID\",null);   attribute(\"strike\",\"id\",\"ID\",null);   attribute(\"strong\",\"id\",\"ID\",null);   attribute(\"style\",\"id\",\"ID\",null);   attribute(\"sub\",\"id\",\"ID\",null);   attribute(\"sup\",\"id\",\"ID\",null);   attribute(\"table\",\"id\",\"ID\",null);   attribute(\"tbody\",\"id\",\"ID\",null);   attribute(\"td\",\"id\",\"ID\",null);   attribute(\"textarea\",\"id\",\"ID\",null);   attribute(\"tfoot\",\"id\",\"ID\",null);   attribute(\"th\",\"id\",\"ID\",null);   attribute(\"thead\",\"id\",\"ID\",null);   attribute(\"title\",\"id\",\"ID\",null);   attribute(\"tr\",\"id\",\"ID\",null);   attribute(\"tt\",\"id\",\"ID\",null);   attribute(\"u\",\"id\",\"ID\",null);   attribute(\"ul\",\"id\",\"ID\",null);   attribute(\"var\",\"id\",\"ID\",null);   attribute(\"wbr\",\"id\",\"ID\",null);   attribute(\"xmp\",\"id\",\"ID\",null);   attribute(\"a\",\"lang\",\"NMTOKEN\",null);   attribute(\"abbr\",\"lang\",\"NMTOKEN\",null);   attribute(\"acronym\",\"lang\",\"NMTOKEN\",null);   attribute(\"address\",\"lang\",\"NMTOKEN\",null);   attribute(\"applet\",\"lang\",\"NMTOKEN\",null);   attribute(\"area\",\"lang\",\"NMTOKEN\",null);   attribute(\"b\",\"lang\",\"NMTOKEN\",null);   attribute(\"base\",\"lang\",\"NMTOKEN\",null);   attribute(\"basefont\",\"lang\",\"NMTOKEN\",null);   attribute(\"bdo\",\"lang\",\"NMTOKEN\",null);   attribute(\"bgsound\",\"lang\",\"NMTOKEN\",null);   attribute(\"big\",\"lang\",\"NMTOKEN\",null);   attribute(\"blink\",\"lang\",\"NMTOKEN\",null);   attribute(\"blockquote\",\"lang\",\"NMTOKEN\",null);   attribute(\"body\",\"lang\",\"NMTOKEN\",null);   attribute(\"br\",\"lang\",\"NMTOKEN\",null);   attribute(\"button\",\"lang\",\"NMTOKEN\",null);   attribute(\"canvas\",\"lang\",\"NMTOKEN\",null);   attribute(\"caption\",\"lang\",\"NMTOKEN\",null);   attribute(\"center\",\"lang\",\"NMTOKEN\",null);   attribute(\"cite\",\"lang\",\"NMTOKEN\",null);   attribute(\"code\",\"lang\",\"NMTOKEN\",null);   attribute(\"col\",\"lang\",\"NMTOKEN\",null);   attribute(\"colgroup\",\"lang\",\"NMTOKEN\",null);   attribute(\"comment\",\"lang\",\"NMTOKEN\",null);   attribute(\"dd\",\"lang\",\"NMTOKEN\",null);   attribute(\"del\",\"lang\",\"NMTOKEN\",null);   attribute(\"dfn\",\"lang\",\"NMTOKEN\",null);   attribute(\"dir\",\"lang\",\"NMTOKEN\",null);   attribute(\"div\",\"lang\",\"NMTOKEN\",null);   attribute(\"dl\",\"lang\",\"NMTOKEN\",null);   attribute(\"dt\",\"lang\",\"NMTOKEN\",null);   attribute(\"em\",\"lang\",\"NMTOKEN\",null);   attribute(\"fieldset\",\"lang\",\"NMTOKEN\",null);   attribute(\"font\",\"lang\",\"NMTOKEN\",null);   attribute(\"form\",\"lang\",\"NMTOKEN\",null);   attribute(\"frame\",\"lang\",\"NMTOKEN\",null);   attribute(\"frameset\",\"lang\",\"NMTOKEN\",null);   attribute(\"h1\",\"lang\",\"NMTOKEN\",null);   attribute(\"h2\",\"lang\",\"NMTOKEN\",null);   attribute(\"h3\",\"lang\",\"NMTOKEN\",null);   attribute(\"h4\",\"lang\",\"NMTOKEN\",null);   attribute(\"h5\",\"lang\",\"NMTOKEN\",null);   attribute(\"h6\",\"lang\",\"NMTOKEN\",null);   attribute(\"head\",\"lang\",\"NMTOKEN\",null);   attribute(\"hr\",\"lang\",\"NMTOKEN\",null);   attribute(\"html\",\"lang\",\"NMTOKEN\",null);   attribute(\"i\",\"lang\",\"NMTOKEN\",null);   attribute(\"iframe\",\"lang\",\"NMTOKEN\",null);   attribute(\"img\",\"lang\",\"NMTOKEN\",null);   attribute(\"input\",\"lang\",\"NMTOKEN\",null);   attribute(\"ins\",\"lang\",\"NMTOKEN\",null);   attribute(\"isindex\",\"lang\",\"NMTOKEN\",null);   attribute(\"kbd\",\"lang\",\"NMTOKEN\",null);   attribute(\"label\",\"lang\",\"NMTOKEN\",null);   attribute(\"legend\",\"lang\",\"NMTOKEN\",null);   attribute(\"li\",\"lang\",\"NMTOKEN\",null);   attribute(\"link\",\"lang\",\"NMTOKEN\",null);   attribute(\"listing\",\"lang\",\"NMTOKEN\",null);   attribute(\"map\",\"lang\",\"NMTOKEN\",null);   attribute(\"marquee\",\"lang\",\"NMTOKEN\",null);   attribute(\"menu\",\"lang\",\"NMTOKEN\",null);   attribute(\"meta\",\"lang\",\"NMTOKEN\",null);   attribute(\"nobr\",\"lang\",\"NMTOKEN\",null);   attribute(\"noframes\",\"lang\",\"NMTOKEN\",null);   attribute(\"noscript\",\"lang\",\"NMTOKEN\",null);   attribute(\"object\",\"lang\",\"NMTOKEN\",null);   attribute(\"ol\",\"lang\",\"NMTOKEN\",null);   attribute(\"optgroup\",\"lang\",\"NMTOKEN\",null);   attribute(\"option\",\"lang\",\"NMTOKEN\",null);   attribute(\"p\",\"lang\",\"NMTOKEN\",null);   attribute(\"param\",\"lang\",\"NMTOKEN\",null);   attribute(\"pre\",\"lang\",\"NMTOKEN\",null);   attribute(\"q\",\"lang\",\"NMTOKEN\",null);   attribute(\"rb\",\"lang\",\"NMTOKEN\",null);   attribute(\"rbc\",\"lang\",\"NMTOKEN\",null);   attribute(\"rp\",\"lang\",\"NMTOKEN\",null);   attribute(\"rt\",\"lang\",\"NMTOKEN\",null);   attribute(\"rtc\",\"lang\",\"NMTOKEN\",null);   attribute(\"ruby\",\"lang\",\"NMTOKEN\",null);   attribute(\"s\",\"lang\",\"NMTOKEN\",null);   attribute(\"samp\",\"lang\",\"NMTOKEN\",null);   attribute(\"script\",\"lang\",\"NMTOKEN\",null);   attribute(\"select\",\"lang\",\"NMTOKEN\",null);   attribute(\"small\",\"lang\",\"NMTOKEN\",null);   attribute(\"span\",\"lang\",\"NMTOKEN\",null);   attribute(\"strike\",\"lang\",\"NMTOKEN\",null);   attribute(\"strong\",\"lang\",\"NMTOKEN\",null);   attribute(\"style\",\"lang\",\"NMTOKEN\",null);   attribute(\"sub\",\"lang\",\"NMTOKEN\",null);   attribute(\"sup\",\"lang\",\"NMTOKEN\",null);   attribute(\"table\",\"lang\",\"NMTOKEN\",null);   attribute(\"tbody\",\"lang\",\"NMTOKEN\",null);   attribute(\"td\",\"lang\",\"NMTOKEN\",null);   attribute(\"textarea\",\"lang\",\"NMTOKEN\",null);   attribute(\"tfoot\",\"lang\",\"NMTOKEN\",null);   attribute(\"th\",\"lang\",\"NMTOKEN\",null);   attribute(\"thead\",\"lang\",\"NMTOKEN\",null);   attribute(\"title\",\"lang\",\"NMTOKEN\",null);   attribute(\"tr\",\"lang\",\"NMTOKEN\",null);   attribute(\"tt\",\"lang\",\"NMTOKEN\",null);   attribute(\"u\",\"lang\",\"NMTOKEN\",null);   attribute(\"ul\",\"lang\",\"NMTOKEN\",null);   attribute(\"var\",\"lang\",\"NMTOKEN\",null);   attribute(\"wbr\",\"lang\",\"NMTOKEN\",null);   attribute(\"xmp\",\"lang\",\"NMTOKEN\",null);   entity(\"aacgr\",0x03AC);   entity(\"Aacgr\",0x0386);   entity(\"aacute\",0x00E1);   entity(\"Aacute\",0x00C1);   entity(\"abreve\",0x0103);   entity(\"Abreve\",0x0102);   entity(\"ac\",0x223E);   entity(\"acd\",0x223F);   entity(\"acirc\",0x00E2);   entity(\"Acirc\",0x00C2);   entity(\"acute\",0x00B4);   entity(\"acy\",0x0430);   entity(\"Acy\",0x0410);   entity(\"aelig\",0x00E6);   entity(\"AElig\",0x00C6);   entity(\"af\",0x2061);   entity(\"afr\",0x1D51E);   entity(\"Afr\",0x1D504);   entity(\"agr\",0x03B1);   entity(\"Agr\",0x0391);   entity(\"agrave\",0x00E0);   entity(\"Agrave\",0x00C0);   entity(\"alefsym\",0x2135);   entity(\"aleph\",0x2135);   entity(\"alpha\",0x03B1);   entity(\"Alpha\",0x0391);   entity(\"amacr\",0x0101);   entity(\"Amacr\",0x0100);   entity(\"amalg\",0x2A3F);   entity(\"amp\",0x0026);   entity(\"and\",0x2227);   entity(\"And\",0x2A53);   entity(\"andand\",0x2A55);   entity(\"andd\",0x2A5C);   entity(\"andslope\",0x2A58);   entity(\"andv\",0x2A5A);   entity(\"ang\",0x2220);   entity(\"ange\",0x29A4);   entity(\"angle\",0x2220);   entity(\"angmsd\",0x2221);   entity(\"angmsdaa\",0x29A8);   entity(\"angmsdab\",0x29A9);   entity(\"angmsdac\",0x29AA);   entity(\"angmsdad\",0x29AB);   entity(\"angmsdae\",0x29AC);   entity(\"angmsdaf\",0x29AD);   entity(\"angmsdag\",0x29AE);   entity(\"angmsdah\",0x29AF);   entity(\"angrt\",0x221F);   entity(\"angrtvb\",0x22BE);   entity(\"angrtvbd\",0x299D);   entity(\"angsph\",0x2222);   entity(\"angst\",0x212B);   entity(\"angzarr\",0x237C);   entity(\"aogon\",0x0105);   entity(\"Aogon\",0x0104);   entity(\"aopf\",0x1D552);   entity(\"Aopf\",0x1D538);   entity(\"ap\",0x2248);   entity(\"apacir\",0x2A6F);   entity(\"ape\",0x224A);   entity(\"apE\",0x2A70);   entity(\"apid\",0x224B);   entity(\"apos\",0x0027);   entity(\"ApplyFunction\",0x2061);   entity(\"approx\",0x2248);   entity(\"approxeq\",0x224A);   entity(\"aring\",0x00E5);   entity(\"Aring\",0x00C5);   entity(\"ascr\",0x1D4B6);   entity(\"Ascr\",0x1D49C);   entity(\"Assign\",0x2254);   entity(\"ast\",0x002A);   entity(\"asymp\",0x2248);   entity(\"asympeq\",0x224D);   entity(\"atilde\",0x00E3);   entity(\"Atilde\",0x00C3);   entity(\"auml\",0x00E4);   entity(\"Auml\",0x00C4);   entity(\"awconint\",0x2233);   entity(\"awint\",0x2A11);   entity(\"b.alpha\",0x1D6C2);   entity(\"b.beta\",0x1D6C3);   entity(\"b.chi\",0x1D6D8);   entity(\"b.delta\",0x1D6C5);   entity(\"b.Delta\",0x1D6AB);   entity(\"b.epsi\",0x1D6C6);   entity(\"b.epsiv\",0x1D6DC);   entity(\"b.eta\",0x1D6C8);   entity(\"b.gamma\",0x1D6C4);   entity(\"b.Gamma\",0x1D6AA);   entity(\"b.gammad\",0x1D7CB);   entity(\"b.Gammad\",0x1D7CA);   entity(\"b.iota\",0x1D6CA);   entity(\"b.kappa\",0x1D6CB);   entity(\"b.kappav\",0x1D6DE);   entity(\"b.lambda\",0x1D6CC);   entity(\"b.Lambda\",0x1D6B2);   entity(\"b.mu\",0x1D6CD);   entity(\"b.nu\",0x1D6CE);   entity(\"b.omega\",0x1D6DA);   entity(\"b.Omega\",0x1D6C0);   entity(\"b.phi\",0x1D6D7);   entity(\"b.Phi\",0x1D6BD);   entity(\"b.phiv\",0x1D6DF);   entity(\"b.pi\",0x1D6D1);   entity(\"b.Pi\",0x1D6B7);   entity(\"b.piv\",0x1D6E1);   entity(\"b.psi\",0x1D6D9);   entity(\"b.Psi\",0x1D6BF);   entity(\"b.rho\",0x1D6D2);   entity(\"b.rhov\",0x1D6E0);   entity(\"b.sigma\",0x1D6D4);   entity(\"b.Sigma\",0x1D6BA);   entity(\"b.sigmav\",0x1D6D3);   entity(\"b.tau\",0x1D6D5);   entity(\"b.Theta\",0x1D6AF);   entity(\"b.thetas\",0x1D6C9);   entity(\"b.thetav\",0x1D6DD);   entity(\"b.upsi\",0x1D6D6);   entity(\"b.Upsi\",0x1D6BC);   entity(\"b.xi\",0x1D6CF);   entity(\"b.Xi\",0x1D6B5);   entity(\"b.zeta\",0x1D6C7);   entity(\"backcong\",0x224C);   entity(\"backepsilon\",0x03F6);   entity(\"backprime\",0x2035);   entity(\"backsim\",0x223D);   entity(\"backsimeq\",0x22CD);   entity(\"Backslash\",0x2216);   entity(\"Barv\",0x2AE7);   entity(\"barvee\",0x22BD);   entity(\"barwed\",0x2305);   entity(\"Barwed\",0x2306);   entity(\"barwedge\",0x2305);   entity(\"bbrk\",0x23B5);   entity(\"bbrktbrk\",0x23B6);   entity(\"bcong\",0x224C);   entity(\"bcy\",0x0431);   entity(\"Bcy\",0x0411);   entity(\"bdquo\",0x201E);   entity(\"becaus\",0x2235);   entity(\"because\",0x2235);   entity(\"bemptyv\",0x29B0);   entity(\"bepsi\",0x03F6);   entity(\"bernou\",0x212C);   entity(\"Bernoullis\",0x212C);   entity(\"beta\",0x03B2);   entity(\"Beta\",0x0392);   entity(\"beth\",0x2136);   entity(\"between\",0x226C);   entity(\"bfr\",0x1D51F);   entity(\"Bfr\",0x1D505);   entity(\"bgr\",0x03B2);   entity(\"Bgr\",0x0392);   entity(\"bigcap\",0x22C2);   entity(\"bigcirc\",0x25EF);   entity(\"bigcup\",0x22C3);   entity(\"bigodot\",0x2A00);   entity(\"bigoplus\",0x2A01);   entity(\"bigotimes\",0x2A02);   entity(\"bigsqcup\",0x2A06);   entity(\"bigstar\",0x2605);   entity(\"bigtriangledown\",0x25BD);   entity(\"bigtriangleup\",0x25B3);   entity(\"biguplus\",0x2A04);   entity(\"bigvee\",0x22C1);   entity(\"bigwedge\",0x22C0);   entity(\"bkarow\",0x290D);   entity(\"blacklozenge\",0x29EB);   entity(\"blacksquare\",0x25AA);   entity(\"blacktriangle\",0x25B4);   entity(\"blacktriangledown\",0x25BE);   entity(\"blacktriangleleft\",0x25C2);   entity(\"blacktriangleright\",0x25B8);   entity(\"blank\",0x2423);   entity(\"blk12\",0x2592);   entity(\"blk14\",0x2591);   entity(\"blk34\",0x2593);   entity(\"block\",0x2588);   entity(\"bnot\",0x2310);   entity(\"bNot\",0x2AED);   entity(\"bopf\",0x1D553);   entity(\"Bopf\",0x1D539);   entity(\"bot\",0x22A5);   entity(\"bottom\",0x22A5);   entity(\"bowtie\",0x22C8);   entity(\"boxbox\",0x29C9);   entity(\"boxdl\",0x2510);   entity(\"boxdL\",0x2555);   entity(\"boxDl\",0x2556);   entity(\"boxDL\",0x2557);   entity(\"boxdr\",0x250C);   entity(\"boxdR\",0x2552);   entity(\"boxDr\",0x2553);   entity(\"boxDR\",0x2554);   entity(\"boxh\",0x2500);   entity(\"boxH\",0x2550);   entity(\"boxhd\",0x252C);   entity(\"boxhD\",0x2565);   entity(\"boxHd\",0x2564);   entity(\"boxHD\",0x2566);   entity(\"boxhu\",0x2534);   entity(\"boxhU\",0x2568);   entity(\"boxHu\",0x2567);   entity(\"boxHU\",0x2569);   entity(\"boxminus\",0x229F);   entity(\"boxplus\",0x229E);   entity(\"boxtimes\",0x22A0);   entity(\"boxul\",0x2518);   entity(\"boxuL\",0x255B);   entity(\"boxUl\",0x255C);   entity(\"boxUL\",0x255D);   entity(\"boxur\",0x2514);   entity(\"boxuR\",0x2558);   entity(\"boxUr\",0x2559);   entity(\"boxUR\",0x255A);   entity(\"boxv\",0x2502);   entity(\"boxV\",0x2551);   entity(\"boxvh\",0x253C);   entity(\"boxvH\",0x256A);   entity(\"boxVh\",0x256B);   entity(\"boxVH\",0x256C);   entity(\"boxvl\",0x2524);   entity(\"boxvL\",0x2561);   entity(\"boxVl\",0x2562);   entity(\"boxVL\",0x2563);   entity(\"boxvr\",0x251C);   entity(\"boxvR\",0x255E);   entity(\"boxVr\",0x255F);   entity(\"boxVR\",0x2560);   entity(\"bprime\",0x2035);   entity(\"breve\",0x02D8);   entity(\"brvbar\",0x00A6);   entity(\"bscr\",0x1D4B7);   entity(\"Bscr\",0x212C);   entity(\"bsemi\",0x204F);   entity(\"bsim\",0x223D);   entity(\"bsime\",0x22CD);   entity(\"bsol\",0x005C);   entity(\"bsolb\",0x29C5);   entity(\"bull\",0x2022);   entity(\"bullet\",0x2022);   entity(\"bump\",0x224E);   entity(\"bumpe\",0x224F);   entity(\"bumpE\",0x2AAE);   entity(\"bumpeq\",0x224F);   entity(\"Bumpeq\",0x224E);   entity(\"cacute\",0x0107);   entity(\"Cacute\",0x0106);   entity(\"cap\",0x2229);   entity(\"Cap\",0x22D2);   entity(\"capand\",0x2A44);   entity(\"capbrcup\",0x2A49);   entity(\"capcap\",0x2A4B);   entity(\"capcup\",0x2A47);   entity(\"capdot\",0x2A40);   entity(\"CapitalDifferentialD\",0x2145);   entity(\"caret\",0x2041);   entity(\"caron\",0x02C7);   entity(\"Cayleys\",0x212D);   entity(\"ccaps\",0x2A4D);   entity(\"ccaron\",0x010D);   entity(\"Ccaron\",0x010C);   entity(\"ccedil\",0x00E7);   entity(\"Ccedil\",0x00C7);   entity(\"ccirc\",0x0109);   entity(\"Ccirc\",0x0108);   entity(\"Cconint\",0x2230);   entity(\"ccups\",0x2A4C);   entity(\"ccupssm\",0x2A50);   entity(\"cdot\",0x010B);   entity(\"Cdot\",0x010A);   entity(\"cedil\",0x00B8);   entity(\"Cedilla\",0x00B8);   entity(\"cemptyv\",0x29B2);   entity(\"cent\",0x00A2);   entity(\"centerdot\",0x00B7);   entity(\"cfr\",0x1D520);   entity(\"Cfr\",0x212D);   entity(\"chcy\",0x0447);   entity(\"CHcy\",0x0427);   entity(\"check\",0x2713);   entity(\"checkmark\",0x2713);   entity(\"chi\",0x03C7);   entity(\"Chi\",0x03A7);   entity(\"cir\",0x25CB);   entity(\"circ\",0x02C6);   entity(\"circeq\",0x2257);   entity(\"circlearrowleft\",0x21BA);   entity(\"circlearrowright\",0x21BB);   entity(\"circledast\",0x229B);   entity(\"circledcirc\",0x229A);   entity(\"circleddash\",0x229D);   entity(\"CircleDot\",0x2299);   entity(\"circledR\",0x00AE);   entity(\"circledS\",0x24C8);   entity(\"CircleMinus\",0x2296);   entity(\"CirclePlus\",0x2295);   entity(\"CircleTimes\",0x2297);   entity(\"cire\",0x2257);   entity(\"cirE\",0x29C3);   entity(\"cirfnint\",0x2A10);   entity(\"cirmid\",0x2AEF);   entity(\"cirscir\",0x29C2);   entity(\"ClockwiseContourIntegral\",0x2232);   entity(\"CloseCurlyDoubleQuote\",0x201D);   entity(\"CloseCurlyQuote\",0x2019);   entity(\"clubs\",0x2663);   entity(\"clubsuit\",0x2663);   entity(\"colon\",0x003A);   entity(\"Colon\",0x2237);   entity(\"colone\",0x2254);   entity(\"Colone\",0x2A74);   entity(\"coloneq\",0x2254);   entity(\"comma\",0x002C);   entity(\"commat\",0x0040);   entity(\"comp\",0x2201);   entity(\"compfn\",0x2218);   entity(\"complement\",0x2201);   entity(\"complexes\",0x2102);   entity(\"cong\",0x2245);   entity(\"congdot\",0x2A6D);   entity(\"Congruent\",0x2261);   entity(\"conint\",0x222E);   entity(\"Conint\",0x222F);   entity(\"ContourIntegral\",0x222E);   entity(\"copf\",0x1D554);   entity(\"Copf\",0x2102);   entity(\"coprod\",0x2210);   entity(\"Coproduct\",0x2210);   entity(\"copy\",0x00A9);   entity(\"copysr\",0x2117);   entity(\"CounterClockwiseContourIntegral\",0x2233);   entity(\"crarr\",0x21B5);   entity(\"cross\",0x2717);   entity(\"Cross\",0x2A2F);   entity(\"cscr\",0x1D4B8);   entity(\"Cscr\",0x1D49E);   entity(\"csub\",0x2ACF);   entity(\"csube\",0x2AD1);   entity(\"csup\",0x2AD0);   entity(\"csupe\",0x2AD2);   entity(\"ctdot\",0x22EF);   entity(\"cudarrl\",0x2938);   entity(\"cudarrr\",0x2935);   entity(\"cuepr\",0x22DE);   entity(\"cuesc\",0x22DF);   entity(\"cularr\",0x21B6);   entity(\"cularrp\",0x293D);   entity(\"cup\",0x222A);   entity(\"Cup\",0x22D3);   entity(\"cupbrcap\",0x2A48);   entity(\"cupcap\",0x2A46);   entity(\"CupCap\",0x224D);   entity(\"cupcup\",0x2A4A);   entity(\"cupdot\",0x228D);   entity(\"cupor\",0x2A45);   entity(\"curarr\",0x21B7);   entity(\"curarrm\",0x293C);   entity(\"curlyeqprec\",0x22DE);   entity(\"curlyeqsucc\",0x22DF);   entity(\"curlyvee\",0x22CE);   entity(\"curlywedge\",0x22CF);   entity(\"curren\",0x00A4);   entity(\"curvearrowleft\",0x21B6);   entity(\"curvearrowright\",0x21B7);   entity(\"cuvee\",0x22CE);   entity(\"cuwed\",0x22CF);   entity(\"cwconint\",0x2232);   entity(\"cwint\",0x2231);   entity(\"cylcty\",0x232D);   entity(\"dagger\",0x2020);   entity(\"Dagger\",0x2021);   entity(\"daleth\",0x2138);   entity(\"darr\",0x2193);   entity(\"dArr\",0x21D3);   entity(\"Darr\",0x21A1);   entity(\"dash\",0x2010);   entity(\"dashv\",0x22A3);   entity(\"Dashv\",0x2AE4);   entity(\"dbkarow\",0x290F);   entity(\"dblac\",0x02DD);   entity(\"dcaron\",0x010F);   entity(\"Dcaron\",0x010E);   entity(\"dcy\",0x0434);   entity(\"Dcy\",0x0414);   entity(\"dd\",0x2146);   entity(\"DD\",0x2145);   entity(\"ddagger\",0x2021);   entity(\"ddarr\",0x21CA);   entity(\"DDotrahd\",0x2911);   entity(\"ddotseq\",0x2A77);   entity(\"deg\",0x00B0);   entity(\"Del\",0x2207);   entity(\"delta\",0x03B4);   entity(\"Delta\",0x0394);   entity(\"demptyv\",0x29B1);   entity(\"dfisht\",0x297F);   entity(\"dfr\",0x1D521);   entity(\"Dfr\",0x1D507);   entity(\"dgr\",0x03B4);   entity(\"Dgr\",0x0394);   entity(\"dHar\",0x2965);   entity(\"dharl\",0x21C3);   entity(\"dharr\",0x21C2);   entity(\"DiacriticalAcute\",0x00B4);   entity(\"DiacriticalDot\",0x02D9);   entity(\"DiacriticalDoubleAcute\",0x02DD);   entity(\"DiacriticalGrave\",0x0060);   entity(\"DiacriticalTilde\",0x02DC);   entity(\"diam\",0x22C4);   entity(\"diamond\",0x22C4);   entity(\"diamondsuit\",0x2666);   entity(\"diams\",0x2666);   entity(\"die\",0x00A8);   entity(\"DifferentialD\",0x2146);   entity(\"digamma\",0x03DD);   entity(\"disin\",0x22F2);   entity(\"div\",0x00F7);   entity(\"divide\",0x00F7);   entity(\"divideontimes\",0x22C7);   entity(\"divonx\",0x22C7);   entity(\"djcy\",0x0452);   entity(\"DJcy\",0x0402);   entity(\"dlcorn\",0x231E);   entity(\"dlcrop\",0x230D);   entity(\"dollar\",0x0024);   entity(\"dopf\",0x1D555);   entity(\"Dopf\",0x1D53B);   entity(\"dot\",0x02D9);   entity(\"Dot\",0x00A8);   entity(\"doteq\",0x2250);   entity(\"doteqdot\",0x2251);   entity(\"DotEqual\",0x2250);   entity(\"dotminus\",0x2238);   entity(\"dotplus\",0x2214);   entity(\"dotsquare\",0x22A1);   entity(\"doublebarwedge\",0x2306);   entity(\"DoubleContourIntegral\",0x222F);   entity(\"DoubleDot\",0x00A8);   entity(\"DoubleDownArrow\",0x21D3);   entity(\"DoubleLeftArrow\",0x21D0);   entity(\"DoubleLeftRightArrow\",0x21D4);   entity(\"DoubleLeftTee\",0x2AE4);   entity(\"DoubleLongLeftArrow\",0x27F8);   entity(\"DoubleLongLeftRightArrow\",0x27FA);   entity(\"DoubleLongRightArrow\",0x27F9);   entity(\"DoubleRightArrow\",0x21D2);   entity(\"DoubleRightTee\",0x22A8);   entity(\"DoubleUpArrow\",0x21D1);   entity(\"DoubleUpDownArrow\",0x21D5);   entity(\"DoubleVerticalBar\",0x2225);   entity(\"downarrow\",0x2193);   entity(\"Downarrow\",0x21D3);   entity(\"DownArrowBar\",0x2913);   entity(\"DownArrowUpArrow\",0x21F5);   entity(\"downdownarrows\",0x21CA);   entity(\"downharpoonleft\",0x21C3);   entity(\"downharpoonright\",0x21C2);   entity(\"DownLeftRightVector\",0x2950);   entity(\"DownLeftTeeVector\",0x295E);   entity(\"DownLeftVector\",0x21BD);   entity(\"DownLeftVectorBar\",0x2956);   entity(\"DownRightTeeVector\",0x295F);   entity(\"DownRightVector\",0x21C1);   entity(\"DownRightVectorBar\",0x2957);   entity(\"DownTee\",0x22A4);   entity(\"DownTeeArrow\",0x21A7);   entity(\"drbkarow\",0x2910);   entity(\"drcorn\",0x231F);   entity(\"drcrop\",0x230C);   entity(\"dscr\",0x1D4B9);   entity(\"Dscr\",0x1D49F);   entity(\"dscy\",0x0455);   entity(\"DScy\",0x0405);   entity(\"dsol\",0x29F6);   entity(\"dstrok\",0x0111);   entity(\"Dstrok\",0x0110);   entity(\"dtdot\",0x22F1);   entity(\"dtri\",0x25BF);   entity(\"dtrif\",0x25BE);   entity(\"duarr\",0x21F5);   entity(\"duhar\",0x296F);   entity(\"dwangle\",0x29A6);   entity(\"dzcy\",0x045F);   entity(\"DZcy\",0x040F);   entity(\"dzigrarr\",0x27FF);   entity(\"eacgr\",0x03AD);   entity(\"Eacgr\",0x0388);   entity(\"eacute\",0x00E9);   entity(\"Eacute\",0x00C9);   entity(\"easter\",0x2A6E);   entity(\"ecaron\",0x011B);   entity(\"Ecaron\",0x011A);   entity(\"ecir\",0x2256);   entity(\"ecirc\",0x00EA);   entity(\"Ecirc\",0x00CA);   entity(\"ecolon\",0x2255);   entity(\"ecy\",0x044D);   entity(\"Ecy\",0x042D);   entity(\"eDDot\",0x2A77);   entity(\"edot\",0x0117);   entity(\"eDot\",0x2251);   entity(\"Edot\",0x0116);   entity(\"ee\",0x2147);   entity(\"eeacgr\",0x03AE);   entity(\"EEacgr\",0x0389);   entity(\"eegr\",0x03B7);   entity(\"EEgr\",0x0397);   entity(\"efDot\",0x2252);   entity(\"efr\",0x1D522);   entity(\"Efr\",0x1D508);   entity(\"eg\",0x2A9A);   entity(\"egr\",0x03B5);   entity(\"Egr\",0x0395);   entity(\"egrave\",0x00E8);   entity(\"Egrave\",0x00C8);   entity(\"egs\",0x2A96);   entity(\"egsdot\",0x2A98);   entity(\"el\",0x2A99);   entity(\"Element\",0x2208);   entity(\"elinters\",0x23E7);   entity(\"ell\",0x2113);   entity(\"els\",0x2A95);   entity(\"elsdot\",0x2A97);   entity(\"emacr\",0x0113);   entity(\"Emacr\",0x0112);   entity(\"empty\",0x2205);   entity(\"emptyset\",0x2205);   entity(\"EmptySmallSquare\",0x25FB);   entity(\"emptyv\",0x2205);   entity(\"EmptyVerySmallSquare\",0x25AB);   entity(\"emsp\",0x2003);   entity(\"emsp13\",0x2004);   entity(\"emsp14\",0x2005);   entity(\"eng\",0x014B);   entity(\"ENG\",0x014A);   entity(\"ensp\",0x2002);   entity(\"eogon\",0x0119);   entity(\"Eogon\",0x0118);   entity(\"eopf\",0x1D556);   entity(\"Eopf\",0x1D53C);   entity(\"epar\",0x22D5);   entity(\"eparsl\",0x29E3);   entity(\"eplus\",0x2A71);   entity(\"epsi\",0x03F5);   entity(\"epsilon\",0x03B5);   entity(\"Epsilon\",0x0395);   entity(\"epsiv\",0x03B5);   entity(\"eqcirc\",0x2256);   entity(\"eqcolon\",0x2255);   entity(\"eqsim\",0x2242);   entity(\"eqslantgtr\",0x2A96);   entity(\"eqslantless\",0x2A95);   entity(\"Equal\",0x2A75);   entity(\"equals\",0x003D);   entity(\"EqualTilde\",0x2242);   entity(\"equest\",0x225F);   entity(\"Equilibrium\",0x21CC);   entity(\"equiv\",0x2261);   entity(\"equivDD\",0x2A78);   entity(\"eqvparsl\",0x29E5);   entity(\"erarr\",0x2971);   entity(\"erDot\",0x2253);   entity(\"escr\",0x212F);   entity(\"Escr\",0x2130);   entity(\"esdot\",0x2250);   entity(\"esim\",0x2242);   entity(\"Esim\",0x2A73);   entity(\"eta\",0x03B7);   entity(\"Eta\",0x0397);   entity(\"eth\",0x00F0);   entity(\"ETH\",0x00D0);   entity(\"euml\",0x00EB);   entity(\"Euml\",0x00CB);   entity(\"euro\",0x20AC);   entity(\"excl\",0x0021);   entity(\"exist\",0x2203);   entity(\"Exists\",0x2203);   entity(\"expectation\",0x2130);   entity(\"exponentiale\",0x2147);   entity(\"fallingdotseq\",0x2252);   entity(\"fcy\",0x0444);   entity(\"Fcy\",0x0424);   entity(\"female\",0x2640);   entity(\"ffilig\",0xFB03);   entity(\"fflig\",0xFB00);   entity(\"ffllig\",0xFB04);   entity(\"ffr\",0x1D523);   entity(\"Ffr\",0x1D509);   entity(\"filig\",0xFB01);   entity(\"FilledSmallSquare\",0x25FC);   entity(\"FilledVerySmallSquare\",0x25AA);   entity(\"flat\",0x266D);   entity(\"fllig\",0xFB02);   entity(\"fltns\",0x25B1);   entity(\"fnof\",0x0192);   entity(\"fopf\",0x1D557);   entity(\"Fopf\",0x1D53D);   entity(\"forall\",0x2200);   entity(\"fork\",0x22D4);   entity(\"forkv\",0x2AD9);   entity(\"Fouriertrf\",0x2131);   entity(\"fpartint\",0x2A0D);   entity(\"frac12\",0x00BD);   entity(\"frac13\",0x2153);   entity(\"frac14\",0x00BC);   entity(\"frac15\",0x2155);   entity(\"frac16\",0x2159);   entity(\"frac18\",0x215B);   entity(\"frac23\",0x2154);   entity(\"frac25\",0x2156);   entity(\"frac34\",0x00BE);   entity(\"frac35\",0x2157);   entity(\"frac38\",0x215C);   entity(\"frac45\",0x2158);   entity(\"frac56\",0x215A);   entity(\"frac58\",0x215D);   entity(\"frac78\",0x215E);   entity(\"frasl\",0x2044);   entity(\"frown\",0x2322);   entity(\"fscr\",0x1D4BB);   entity(\"Fscr\",0x2131);   entity(\"gacute\",0x01F5);   entity(\"gamma\",0x03B3);   entity(\"Gamma\",0x0393);   entity(\"gammad\",0x03DD);   entity(\"Gammad\",0x03DC);   entity(\"gap\",0x2A86);   entity(\"gbreve\",0x011F);   entity(\"Gbreve\",0x011E);   entity(\"Gcedil\",0x0122);   entity(\"gcirc\",0x011D);   entity(\"Gcirc\",0x011C);   entity(\"gcy\",0x0433);   entity(\"Gcy\",0x0413);   entity(\"gdot\",0x0121);   entity(\"Gdot\",0x0120);   entity(\"ge\",0x2265);   entity(\"gE\",0x2267);   entity(\"gel\",0x22DB);   entity(\"gEl\",0x2A8C);   entity(\"geq\",0x2265);   entity(\"geqq\",0x2267);   entity(\"geqslant\",0x2A7E);   entity(\"ges\",0x2A7E);   entity(\"gescc\",0x2AA9);   entity(\"gesdot\",0x2A80);   entity(\"gesdoto\",0x2A82);   entity(\"gesdotol\",0x2A84);   entity(\"gesles\",0x2A94);   entity(\"gfr\",0x1D524);   entity(\"Gfr\",0x1D50A);   entity(\"gg\",0x226B);   entity(\"Gg\",0x22D9);   entity(\"ggg\",0x22D9);   entity(\"ggr\",0x03B3);   entity(\"Ggr\",0x0393);   entity(\"gimel\",0x2137);   entity(\"gjcy\",0x0453);   entity(\"GJcy\",0x0403);   entity(\"gl\",0x2277);   entity(\"gla\",0x2AA5);   entity(\"glE\",0x2A92);   entity(\"glj\",0x2AA4);   entity(\"gnap\",0x2A8A);   entity(\"gnapprox\",0x2A8A);   entity(\"gne\",0x2A88);   entity(\"gnE\",0x2269);   entity(\"gneq\",0x2A88);   entity(\"gneqq\",0x2269);   entity(\"gnsim\",0x22E7);   entity(\"gopf\",0x1D558);   entity(\"Gopf\",0x1D53E);   entity(\"grave\",0x0060);   entity(\"GreaterEqual\",0x2265);   entity(\"GreaterEqualLess\",0x22DB);   entity(\"GreaterFullEqual\",0x2267);   entity(\"GreaterGreater\",0x2AA2);   entity(\"GreaterLess\",0x2277);   entity(\"GreaterSlantEqual\",0x2A7E);   entity(\"GreaterTilde\",0x2273);   entity(\"gscr\",0x210A);   entity(\"Gscr\",0x1D4A2);   entity(\"gsim\",0x2273);   entity(\"gsime\",0x2A8E);   entity(\"gsiml\",0x2A90);   entity(\"gt\",0x003E);   entity(\"Gt\",0x226B);   entity(\"gtcc\",0x2AA7);   entity(\"gtcir\",0x2A7A);   entity(\"gtdot\",0x22D7);   entity(\"gtlPar\",0x2995);   entity(\"gtquest\",0x2A7C);   entity(\"gtrapprox\",0x2A86);   entity(\"gtrarr\",0x2978);   entity(\"gtrdot\",0x22D7);   entity(\"gtreqless\",0x22DB);   entity(\"gtreqqless\",0x2A8C);   entity(\"gtrless\",0x2277);   entity(\"gtrsim\",0x2273);   entity(\"Hacek\",0x02C7);   entity(\"hairsp\",0x200A);   entity(\"half\",0x00BD);   entity(\"hamilt\",0x210B);   entity(\"hardcy\",0x044A);   entity(\"HARDcy\",0x042A);   entity(\"harr\",0x2194);   entity(\"hArr\",0x21D4);   entity(\"harrcir\",0x2948);   entity(\"harrw\",0x21AD);   entity(\"Hat\",0x005E);   entity(\"hbar\",0x210F);   entity(\"hcirc\",0x0125);   entity(\"Hcirc\",0x0124);   entity(\"hearts\",0x2665);   entity(\"heartsuit\",0x2665);   entity(\"hellip\",0x2026);   entity(\"hercon\",0x22B9);   entity(\"hfr\",0x1D525);   entity(\"Hfr\",0x210C);   entity(\"HilbertSpace\",0x210B);   entity(\"hksearow\",0x2925);   entity(\"hkswarow\",0x2926);   entity(\"hoarr\",0x21FF);   entity(\"homtht\",0x223B);   entity(\"hookleftarrow\",0x21A9);   entity(\"hookrightarrow\",0x21AA);   entity(\"hopf\",0x1D559);   entity(\"Hopf\",0x210D);   entity(\"horbar\",0x2015);   entity(\"HorizontalLine\",0x2500);   entity(\"hscr\",0x1D4BD);   entity(\"Hscr\",0x210B);   entity(\"hslash\",0x210F);   entity(\"hstrok\",0x0127);   entity(\"Hstrok\",0x0126);   entity(\"HumpDownHump\",0x224E);   entity(\"HumpEqual\",0x224F);   entity(\"hybull\",0x2043);   entity(\"hyphen\",0x2010);   entity(\"iacgr\",0x03AF);   entity(\"Iacgr\",0x038A);   entity(\"iacute\",0x00ED);   entity(\"Iacute\",0x00CD);   entity(\"ic\",0x2063);   entity(\"icirc\",0x00EE);   entity(\"Icirc\",0x00CE);   entity(\"icy\",0x0438);   entity(\"Icy\",0x0418);   entity(\"idiagr\",0x0390);   entity(\"idigr\",0x03CA);   entity(\"Idigr\",0x03AA);   entity(\"Idot\",0x0130);   entity(\"iecy\",0x0435);   entity(\"IEcy\",0x0415);   entity(\"iexcl\",0x00A1);   entity(\"iff\",0x21D4);   entity(\"ifr\",0x1D526);   entity(\"Ifr\",0x2111);   entity(\"igr\",0x03B9);   entity(\"Igr\",0x0399);   entity(\"igrave\",0x00EC);   entity(\"Igrave\",0x00CC);   entity(\"ii\",0x2148);   entity(\"iiiint\",0x2A0C);   entity(\"iiint\",0x222D);   entity(\"iinfin\",0x29DC);   entity(\"iiota\",0x2129);   entity(\"ijlig\",0x0133);   entity(\"IJlig\",0x0132);   entity(\"Im\",0x2111);   entity(\"imacr\",0x012B);   entity(\"Imacr\",0x012A);   entity(\"image\",0x2111);   entity(\"ImaginaryI\",0x2148);   entity(\"imagline\",0x2110);   entity(\"imagpart\",0x2111);   entity(\"imath\",0x0131);   entity(\"imof\",0x22B7);   entity(\"imped\",0x01B5);   entity(\"Implies\",0x21D2);   entity(\"in\",0x2208);   entity(\"incare\",0x2105);   entity(\"infin\",0x221E);   entity(\"infintie\",0x29DD);   entity(\"inodot\",0x0131);   entity(\"int\",0x222B);   entity(\"Int\",0x222C);   entity(\"intcal\",0x22BA);   entity(\"integers\",0x2124);   entity(\"Integral\",0x222B);   entity(\"intercal\",0x22BA);   entity(\"Intersection\",0x22C2);   entity(\"intlarhk\",0x2A17);   entity(\"intprod\",0x2A3C);   entity(\"InvisibleComma\",0x2063);   entity(\"InvisibleTimes\",0x2062);   entity(\"iocy\",0x0451);   entity(\"IOcy\",0x0401);   entity(\"iogon\",0x012F);   entity(\"Iogon\",0x012E);   entity(\"iopf\",0x1D55A);   entity(\"Iopf\",0x1D540);   entity(\"iota\",0x03B9);   entity(\"Iota\",0x0399);   entity(\"iprod\",0x2A3C);   entity(\"iquest\",0x00BF);   entity(\"iscr\",0x1D4BE);   entity(\"Iscr\",0x2110);   entity(\"isin\",0x2208);   entity(\"isindot\",0x22F5);   entity(\"isinE\",0x22F9);   entity(\"isins\",0x22F4);   entity(\"isinsv\",0x22F3);   entity(\"isinv\",0x2208);   entity(\"it\",0x2062);   entity(\"itilde\",0x0129);   entity(\"Itilde\",0x0128);   entity(\"iukcy\",0x0456);   entity(\"Iukcy\",0x0406);   entity(\"iuml\",0x00EF);   entity(\"Iuml\",0x00CF);   entity(\"jcirc\",0x0135);   entity(\"Jcirc\",0x0134);   entity(\"jcy\",0x0439);   entity(\"Jcy\",0x0419);   entity(\"jfr\",0x1D527);   entity(\"Jfr\",0x1D50D);   entity(\"jmath\",0x0237);   entity(\"jopf\",0x1D55B);   entity(\"Jopf\",0x1D541);   entity(\"jscr\",0x1D4BF);   entity(\"Jscr\",0x1D4A5);   entity(\"jsercy\",0x0458);   entity(\"Jsercy\",0x0408);   entity(\"jukcy\",0x0454);   entity(\"Jukcy\",0x0404);   entity(\"kappa\",0x03BA);   entity(\"Kappa\",0x039A);   entity(\"kappav\",0x03F0);   entity(\"kcedil\",0x0137);   entity(\"Kcedil\",0x0136);   entity(\"kcy\",0x043A);   entity(\"Kcy\",0x041A);   entity(\"kfr\",0x1D528);   entity(\"Kfr\",0x1D50E);   entity(\"kgr\",0x03BA);   entity(\"Kgr\",0x039A);   entity(\"kgreen\",0x0138);   entity(\"khcy\",0x0445);   entity(\"KHcy\",0x0425);   entity(\"khgr\",0x03C7);   entity(\"KHgr\",0x03A7);   entity(\"kjcy\",0x045C);   entity(\"KJcy\",0x040C);   entity(\"kopf\",0x1D55C);   entity(\"Kopf\",0x1D542);   entity(\"kscr\",0x1D4C0);   entity(\"Kscr\",0x1D4A6);   entity(\"lAarr\",0x21DA);   entity(\"lacute\",0x013A);   entity(\"Lacute\",0x0139);   entity(\"laemptyv\",0x29B4);   entity(\"lagran\",0x2112);   entity(\"lambda\",0x03BB);   entity(\"Lambda\",0x039B);   entity(\"lang\",0x2329);   entity(\"Lang\",0x27EA);   entity(\"langd\",0x2991);   entity(\"langle\",0x2329);   entity(\"lap\",0x2A85);   entity(\"Laplacetrf\",0x2112);   entity(\"laquo\",0x00AB);   entity(\"larr\",0x2190);   entity(\"lArr\",0x21D0);   entity(\"Larr\",0x219E);   entity(\"larrb\",0x21E4);   entity(\"larrbfs\",0x291F);   entity(\"larrfs\",0x291D);   entity(\"larrhk\",0x21A9);   entity(\"larrlp\",0x21AB);   entity(\"larrpl\",0x2939);   entity(\"larrsim\",0x2973);   entity(\"larrtl\",0x21A2);   entity(\"lat\",0x2AAB);   entity(\"latail\",0x2919);   entity(\"lAtail\",0x291B);   entity(\"late\",0x2AAD);   entity(\"lbarr\",0x290C);   entity(\"lBarr\",0x290E);   entity(\"lbbrk\",0x2997);   entity(\"lbrace\",0x007B);   entity(\"lbrack\",0x005B);   entity(\"lbrke\",0x298B);   entity(\"lbrksld\",0x298F);   entity(\"lbrkslu\",0x298D);   entity(\"lcaron\",0x013E);   entity(\"Lcaron\",0x013D);   entity(\"lcedil\",0x013C);   entity(\"Lcedil\",0x013B);   entity(\"lceil\",0x2308);   entity(\"lcub\",0x007B);   entity(\"lcy\",0x043B);   entity(\"Lcy\",0x041B);   entity(\"ldca\",0x2936);   entity(\"ldquo\",0x201C);   entity(\"ldquor\",0x201E);   entity(\"ldrdhar\",0x2967);   entity(\"ldrushar\",0x294B);   entity(\"ldsh\",0x21B2);   entity(\"le\",0x2264);   entity(\"lE\",0x2266);   entity(\"LeftAngleBracket\",0x2329);   entity(\"leftarrow\",0x2190);   entity(\"Leftarrow\",0x21D0);   entity(\"LeftArrowBar\",0x21E4);   entity(\"LeftArrowRightArrow\",0x21C6);   entity(\"leftarrowtail\",0x21A2);   entity(\"LeftCeiling\",0x2308);   entity(\"LeftDoubleBracket\",0x27E6);   entity(\"LeftDownTeeVector\",0x2961);   entity(\"LeftDownVector\",0x21C3);   entity(\"LeftDownVectorBar\",0x2959);   entity(\"LeftFloor\",0x230A);   entity(\"leftharpoondown\",0x21BD);   entity(\"leftharpoonup\",0x21BC);   entity(\"leftleftarrows\",0x21C7);   entity(\"leftrightarrow\",0x2194);   entity(\"Leftrightarrow\",0x21D4);   entity(\"leftrightarrows\",0x21C6);   entity(\"leftrightharpoons\",0x21CB);   entity(\"leftrightsquigarrow\",0x21AD);   entity(\"LeftRightVector\",0x294E);   entity(\"LeftTee\",0x22A3);   entity(\"LeftTeeArrow\",0x21A4);   entity(\"LeftTeeVector\",0x295A);   entity(\"leftthreetimes\",0x22CB);   entity(\"LeftTriangle\",0x22B2);   entity(\"LeftTriangleBar\",0x29CF);   entity(\"LeftTriangleEqual\",0x22B4);   entity(\"LeftUpDownVector\",0x2951);   entity(\"LeftUpTeeVector\",0x2960);   entity(\"LeftUpVector\",0x21BF);   entity(\"LeftUpVectorBar\",0x2958);   entity(\"LeftVector\",0x21BC);   entity(\"LeftVectorBar\",0x2952);   entity(\"leg\",0x22DA);   entity(\"lEg\",0x2A8B);   entity(\"leq\",0x2264);   entity(\"leqq\",0x2266);   entity(\"leqslant\",0x2A7D);   entity(\"les\",0x2A7D);   entity(\"lescc\",0x2AA8);   entity(\"lesdot\",0x2A7F);   entity(\"lesdoto\",0x2A81);   entity(\"lesdotor\",0x2A83);   entity(\"lesges\",0x2A93);   entity(\"lessapprox\",0x2A85);   entity(\"lessdot\",0x22D6);   entity(\"lesseqgtr\",0x22DA);   entity(\"lesseqqgtr\",0x2A8B);   entity(\"LessEqualGreater\",0x22DA);   entity(\"LessFullEqual\",0x2266);   entity(\"LessGreater\",0x2276);   entity(\"lessgtr\",0x2276);   entity(\"LessLess\",0x2AA1);   entity(\"lesssim\",0x2272);   entity(\"LessSlantEqual\",0x2A7D);   entity(\"LessTilde\",0x2272);   entity(\"lfisht\",0x297C);   entity(\"lfloor\",0x230A);   entity(\"lfr\",0x1D529);   entity(\"Lfr\",0x1D50F);   entity(\"lg\",0x2276);   entity(\"lgE\",0x2A91);   entity(\"lgr\",0x03BB);   entity(\"Lgr\",0x039B);   entity(\"lHar\",0x2962);   entity(\"lhard\",0x21BD);   entity(\"lharu\",0x21BC);   entity(\"lharul\",0x296A);   entity(\"lhblk\",0x2584);   entity(\"ljcy\",0x0459);   entity(\"LJcy\",0x0409);   entity(\"ll\",0x226A);   entity(\"Ll\",0x22D8);   entity(\"llarr\",0x21C7);   entity(\"llcorner\",0x231E);   entity(\"Lleftarrow\",0x21DA);   entity(\"llhard\",0x296B);   entity(\"lltri\",0x25FA);   entity(\"lmidot\",0x0140);   entity(\"Lmidot\",0x013F);   entity(\"lmoust\",0x23B0);   entity(\"lmoustache\",0x23B0);   entity(\"lnap\",0x2A89);   entity(\"lnapprox\",0x2A89);   entity(\"lne\",0x2A87);   entity(\"lnE\",0x2268);   entity(\"lneq\",0x2A87);   entity(\"lneqq\",0x2268);   entity(\"lnsim\",0x22E6);   entity(\"loang\",0x27EC);   entity(\"loarr\",0x21FD);   entity(\"lobrk\",0x27E6);   entity(\"longleftarrow\",0x27F5);   entity(\"Longleftarrow\",0x27F8);   entity(\"longleftrightarrow\",0x27F7);   entity(\"Longleftrightarrow\",0x27FA);   entity(\"longmapsto\",0x27FC);   entity(\"longrightarrow\",0x27F6);   entity(\"Longrightarrow\",0x27F9);   entity(\"looparrowleft\",0x21AB);   entity(\"looparrowright\",0x21AC);   entity(\"lopar\",0x2985);   entity(\"lopf\",0x1D55D);   entity(\"Lopf\",0x1D543);   entity(\"loplus\",0x2A2D);   entity(\"lotimes\",0x2A34);   entity(\"lowast\",0x2217);   entity(\"lowbar\",0x005F);   entity(\"LowerLeftArrow\",0x2199);   entity(\"LowerRightArrow\",0x2198);   entity(\"loz\",0x25CA);   entity(\"lozenge\",0x25CA);   entity(\"lozf\",0x29EB);   entity(\"lpar\",0x0028);   entity(\"lparlt\",0x2993);   entity(\"lrarr\",0x21C6);   entity(\"lrcorner\",0x231F);   entity(\"lrhar\",0x21CB);   entity(\"lrhard\",0x296D);   entity(\"lrm\",0x200E);   entity(\"lrtri\",0x22BF);   entity(\"lsaquo\",0x2039);   entity(\"lscr\",0x1D4C1);   entity(\"Lscr\",0x2112);   entity(\"lsh\",0x21B0);   entity(\"lsim\",0x2272);   entity(\"lsime\",0x2A8D);   entity(\"lsimg\",0x2A8F);   entity(\"lsqb\",0x005B);   entity(\"lsquo\",0x2018);   entity(\"lsquor\",0x201A);   entity(\"lstrok\",0x0142);   entity(\"Lstrok\",0x0141);   entity(\"lt\",0x003C);   entity(\"Lt\",0x226A);   entity(\"ltcc\",0x2AA6);   entity(\"ltcir\",0x2A79);   entity(\"ltdot\",0x22D6);   entity(\"lthree\",0x22CB);   entity(\"ltimes\",0x22C9);   entity(\"ltlarr\",0x2976);   entity(\"ltquest\",0x2A7B);   entity(\"ltri\",0x25C3);   entity(\"ltrie\",0x22B4);   entity(\"ltrif\",0x25C2);   entity(\"ltrPar\",0x2996);   entity(\"lurdshar\",0x294A);   entity(\"luruhar\",0x2966);   entity(\"macr\",0x00AF);   entity(\"male\",0x2642);   entity(\"malt\",0x2720);   entity(\"maltese\",0x2720);   entity(\"map\",0x21A6);   entity(\"Map\",0x2905);   entity(\"mapsto\",0x21A6);   entity(\"mapstodown\",0x21A7);   entity(\"mapstoleft\",0x21A4);   entity(\"mapstoup\",0x21A5);   entity(\"marker\",0x25AE);   entity(\"mcomma\",0x2A29);   entity(\"mcy\",0x043C);   entity(\"Mcy\",0x041C);   entity(\"mdash\",0x2014);   entity(\"mDDot\",0x223A);   entity(\"measuredangle\",0x2221);   entity(\"MediumSpace\",0x205F);   entity(\"Mellintrf\",0x2133);   entity(\"mfr\",0x1D52A);   entity(\"Mfr\",0x1D510);   entity(\"mgr\",0x03BC);   entity(\"Mgr\",0x039C);   entity(\"mho\",0x2127);   entity(\"micro\",0x00B5);   entity(\"mid\",0x2223);   entity(\"midast\",0x002A);   entity(\"midcir\",0x2AF0);   entity(\"middot\",0x00B7);   entity(\"minus\",0x2212);   entity(\"minusb\",0x229F);   entity(\"minusd\",0x2238);   entity(\"minusdu\",0x2A2A);   entity(\"MinusPlus\",0x2213);   entity(\"mlcp\",0x2ADB);   entity(\"mldr\",0x2026);   entity(\"mnplus\",0x2213);   entity(\"models\",0x22A7);   entity(\"mopf\",0x1D55E);   entity(\"Mopf\",0x1D544);   entity(\"mp\",0x2213);   entity(\"mscr\",0x1D4C2);   entity(\"Mscr\",0x2133);   entity(\"mstpos\",0x223E);   entity(\"mu\",0x03BC);   entity(\"Mu\",0x039C);   entity(\"multimap\",0x22B8);   entity(\"mumap\",0x22B8);   entity(\"nabla\",0x2207);   entity(\"nacute\",0x0144);   entity(\"Nacute\",0x0143);   entity(\"nap\",0x2249);   entity(\"napos\",0x0149);   entity(\"napprox\",0x2249);   entity(\"natur\",0x266E);   entity(\"natural\",0x266E);   entity(\"naturals\",0x2115);   entity(\"nbsp\",0x00A0);   entity(\"ncap\",0x2A43);   entity(\"ncaron\",0x0148);   entity(\"Ncaron\",0x0147);   entity(\"ncedil\",0x0146);   entity(\"Ncedil\",0x0145);   entity(\"ncong\",0x2247);   entity(\"ncup\",0x2A42);   entity(\"ncy\",0x043D);   entity(\"Ncy\",0x041D);   entity(\"ndash\",0x2013);   entity(\"ne\",0x2260);   entity(\"nearhk\",0x2924);   entity(\"nearr\",0x2197);   entity(\"neArr\",0x21D7);   entity(\"nearrow\",0x2197);   entity(\"NegativeMediumSpace\",0x200B);   entity(\"NegativeThickSpace\",0x200B);   entity(\"NegativeThinSpace\",0x200B);   entity(\"NegativeVeryThinSpace\",0x200B);   entity(\"nequiv\",0x2262);   entity(\"nesear\",0x2928);   entity(\"NestedGreaterGreater\",0x226B);   entity(\"NestedLessLess\",0x226A);   entity(\"NewLine\",0x000A);   entity(\"nexist\",0x2204);   entity(\"nexists\",0x2204);   entity(\"nfr\",0x1D52B);   entity(\"Nfr\",0x1D511);   entity(\"nge\",0x2271);   entity(\"ngeq\",0x2271);   entity(\"ngr\",0x03BD);   entity(\"Ngr\",0x039D);   entity(\"ngsim\",0x2275);   entity(\"ngt\",0x226F);   entity(\"ngtr\",0x226F);   entity(\"nharr\",0x21AE);   entity(\"nhArr\",0x21CE);   entity(\"nhpar\",0x2AF2);   entity(\"ni\",0x220B);   entity(\"nis\",0x22FC);   entity(\"nisd\",0x22FA);   entity(\"niv\",0x220B);   entity(\"njcy\",0x045A);   entity(\"NJcy\",0x040A);   entity(\"nlarr\",0x219A);   entity(\"nlArr\",0x21CD);   entity(\"nldr\",0x2025);   entity(\"nle\",0x2270);   entity(\"nleftarrow\",0x219A);   entity(\"nLeftarrow\",0x21CD);   entity(\"nleftrightarrow\",0x21AE);   entity(\"nLeftrightarrow\",0x21CE);   entity(\"nleq\",0x2270);   entity(\"nless\",0x226E);   entity(\"nlsim\",0x2274);   entity(\"nlt\",0x226E);   entity(\"nltri\",0x22EA);   entity(\"nltrie\",0x22EC);   entity(\"nmid\",0x2224);   entity(\"NoBreak\",0x2060);   entity(\"NonBreakingSpace\",0x00A0);   entity(\"nopf\",0x1D55F);   entity(\"Nopf\",0x2115);   entity(\"not\",0x00AC);   entity(\"Not\",0x2AEC);   entity(\"NotCongruent\",0x2262);   entity(\"NotCupCap\",0x226D);   entity(\"NotDoubleVerticalBar\",0x2226);   entity(\"NotElement\",0x2209);   entity(\"NotEqual\",0x2260);   entity(\"NotExists\",0x2204);   entity(\"NotGreater\",0x226F);   entity(\"NotGreaterEqual\",0x2271);   entity(\"NotGreaterLess\",0x2279);   entity(\"NotGreaterTilde\",0x2275);   entity(\"notin\",0x2209);   entity(\"notinva\",0x2209);   entity(\"notinvb\",0x22F7);   entity(\"notinvc\",0x22F6);   entity(\"NotLeftTriangle\",0x22EA);   entity(\"NotLeftTriangleEqual\",0x22EC);   entity(\"NotLess\",0x226E);   entity(\"NotLessEqual\",0x2270);   entity(\"NotLessGreater\",0x2278);   entity(\"NotLessTilde\",0x2274);   entity(\"notni\",0x220C);   entity(\"notniva\",0x220C);   entity(\"notnivb\",0x22FE);   entity(\"notnivc\",0x22FD);   entity(\"NotPrecedes\",0x2280);   entity(\"NotPrecedesSlantEqual\",0x22E0);   entity(\"NotReverseElement\",0x220C);   entity(\"NotRightTriangle\",0x22EB);   entity(\"NotRightTriangleEqual\",0x22ED);   entity(\"NotSquareSubsetEqual\",0x22E2);   entity(\"NotSquareSupersetEqual\",0x22E3);   entity(\"NotSubsetEqual\",0x2288);   entity(\"NotSucceeds\",0x2281);   entity(\"NotSucceedsSlantEqual\",0x22E1);   entity(\"NotSupersetEqual\",0x2289);   entity(\"NotTilde\",0x2241);   entity(\"NotTildeEqual\",0x2244);   entity(\"NotTildeFullEqual\",0x2247);   entity(\"NotTildeTilde\",0x2249);   entity(\"NotVerticalBar\",0x2224);   entity(\"npar\",0x2226);   entity(\"nparallel\",0x2226);   entity(\"npolint\",0x2A14);   entity(\"npr\",0x2280);   entity(\"nprcue\",0x22E0);   entity(\"nprec\",0x2280);   entity(\"nrarr\",0x219B);   entity(\"nrArr\",0x21CF);   entity(\"nrightarrow\",0x219B);   entity(\"nRightarrow\",0x21CF);   entity(\"nrtri\",0x22EB);   entity(\"nrtrie\",0x22ED);   entity(\"nsc\",0x2281);   entity(\"nsccue\",0x22E1);   entity(\"nscr\",0x1D4C3);   entity(\"Nscr\",0x1D4A9);   entity(\"nshortmid\",0x2224);   entity(\"nshortparallel\",0x2226);   entity(\"nsim\",0x2241);   entity(\"nsime\",0x2244);   entity(\"nsimeq\",0x2244);   entity(\"nsmid\",0x2224);   entity(\"nspar\",0x2226);   entity(\"nsqsube\",0x22E2);   entity(\"nsqsupe\",0x22E3);   entity(\"nsub\",0x2284);   entity(\"nsube\",0x2288);   entity(\"nsubseteq\",0x2288);   entity(\"nsucc\",0x2281);   entity(\"nsup\",0x2285);   entity(\"nsupe\",0x2289);   entity(\"nsupseteq\",0x2289);   entity(\"ntgl\",0x2279);   entity(\"ntilde\",0x00F1);   entity(\"Ntilde\",0x00D1);   entity(\"ntlg\",0x2278);   entity(\"ntriangleleft\",0x22EA);   entity(\"ntrianglelefteq\",0x22EC);   entity(\"ntriangleright\",0x22EB);   entity(\"ntrianglerighteq\",0x22ED);   entity(\"nu\",0x03BD);   entity(\"Nu\",0x039D);   entity(\"num\",0x0023);   entity(\"numero\",0x2116);   entity(\"numsp\",0x2007);   entity(\"nvdash\",0x22AC);   entity(\"nvDash\",0x22AD);   entity(\"nVdash\",0x22AE);   entity(\"nVDash\",0x22AF);   entity(\"nvHarr\",0x2904);   entity(\"nvinfin\",0x29DE);   entity(\"nvlArr\",0x2902);   entity(\"nvrArr\",0x2903);   entity(\"nwarhk\",0x2923);   entity(\"nwarr\",0x2196);   entity(\"nwArr\",0x21D6);   entity(\"nwarrow\",0x2196);   entity(\"nwnear\",0x2927);   entity(\"oacgr\",0x03CC);   entity(\"Oacgr\",0x038C);   entity(\"oacute\",0x00F3);   entity(\"Oacute\",0x00D3);   entity(\"oast\",0x229B);   entity(\"ocir\",0x229A);   entity(\"ocirc\",0x00F4);   entity(\"Ocirc\",0x00D4);   entity(\"ocy\",0x043E);   entity(\"Ocy\",0x041E);   entity(\"odash\",0x229D);   entity(\"odblac\",0x0151);   entity(\"Odblac\",0x0150);   entity(\"odiv\",0x2A38);   entity(\"odot\",0x2299);   entity(\"odsold\",0x29BC);   entity(\"oelig\",0x0153);   entity(\"OElig\",0x0152);   entity(\"ofcir\",0x29BF);   entity(\"ofr\",0x1D52C);   entity(\"Ofr\",0x1D512);   entity(\"ogon\",0x02DB);   entity(\"ogr\",0x03BF);   entity(\"Ogr\",0x039F);   entity(\"ograve\",0x00F2);   entity(\"Ograve\",0x00D2);   entity(\"ogt\",0x29C1);   entity(\"ohacgr\",0x03CE);   entity(\"OHacgr\",0x038F);   entity(\"ohbar\",0x29B5);   entity(\"ohgr\",0x03C9);   entity(\"OHgr\",0x03A9);   entity(\"ohm\",0x2126);   entity(\"oint\",0x222E);   entity(\"olarr\",0x21BA);   entity(\"olcir\",0x29BE);   entity(\"olcross\",0x29BB);   entity(\"oline\",0x203E);   entity(\"olt\",0x29C0);   entity(\"omacr\",0x014D);   entity(\"Omacr\",0x014C);   entity(\"omega\",0x03C9);   entity(\"Omega\",0x03A9);   entity(\"omicron\",0x03BF);   entity(\"Omicron\",0x039F);   entity(\"omid\",0x29B6);   entity(\"ominus\",0x2296);   entity(\"oopf\",0x1D560);   entity(\"Oopf\",0x1D546);   entity(\"opar\",0x29B7);   entity(\"OpenCurlyDoubleQuote\",0x201C);   entity(\"OpenCurlyQuote\",0x2018);   entity(\"operp\",0x29B9);   entity(\"oplus\",0x2295);   entity(\"or\",0x2228);   entity(\"Or\",0x2A54);   entity(\"orarr\",0x21BB);   entity(\"ord\",0x2A5D);   entity(\"order\",0x2134);   entity(\"orderof\",0x2134);   entity(\"ordf\",0x00AA);   entity(\"ordm\",0x00BA);   entity(\"origof\",0x22B6);   entity(\"oror\",0x2A56);   entity(\"orslope\",0x2A57);   entity(\"orv\",0x2A5B);   entity(\"oS\",0x24C8);   entity(\"oscr\",0x2134);   entity(\"Oscr\",0x1D4AA);   entity(\"oslash\",0x00F8);   entity(\"Oslash\",0x00D8);   entity(\"osol\",0x2298);   entity(\"otilde\",0x00F5);   entity(\"Otilde\",0x00D5);   entity(\"otimes\",0x2297);   entity(\"Otimes\",0x2A37);   entity(\"otimesas\",0x2A36);   entity(\"ouml\",0x00F6);   entity(\"Ouml\",0x00D6);   entity(\"ovbar\",0x233D);   entity(\"OverBar\",0x00AF);   entity(\"OverBrace\",0xFE37);   entity(\"OverBracket\",0x23B4);   entity(\"OverParenthesis\",0xFE35);   entity(\"par\",0x2225);   entity(\"para\",0x00B6);   entity(\"parallel\",0x2225);   entity(\"parsim\",0x2AF3);   entity(\"parsl\",0x2AFD);   entity(\"part\",0x2202);   entity(\"PartialD\",0x2202);   entity(\"pcy\",0x043F);   entity(\"Pcy\",0x041F);   entity(\"percnt\",0x0025);   entity(\"period\",0x002E);   entity(\"permil\",0x2030);   entity(\"perp\",0x22A5);   entity(\"pertenk\",0x2031);   entity(\"pfr\",0x1D52D);   entity(\"Pfr\",0x1D513);   entity(\"pgr\",0x03C0);   entity(\"Pgr\",0x03A0);   entity(\"phgr\",0x03C6);   entity(\"PHgr\",0x03A6);   entity(\"phi\",0x03D5);   entity(\"Phi\",0x03A6);   entity(\"phiv\",0x03C6);   entity(\"phmmat\",0x2133);   entity(\"phone\",0x260E);   entity(\"pi\",0x03C0);   entity(\"Pi\",0x03A0);   entity(\"pitchfork\",0x22D4);   entity(\"piv\",0x03D6);   entity(\"planck\",0x210F);   entity(\"planckh\",0x210E);   entity(\"plankv\",0x210F);   entity(\"plus\",0x002B);   entity(\"plusacir\",0x2A23);   entity(\"plusb\",0x229E);   entity(\"pluscir\",0x2A22);   entity(\"plusdo\",0x2214);   entity(\"plusdu\",0x2A25);   entity(\"pluse\",0x2A72);   entity(\"PlusMinus\",0x00B1);   entity(\"plusmn\",0x00B1);   entity(\"plussim\",0x2A26);   entity(\"plustwo\",0x2A27);   entity(\"pm\",0x00B1);   entity(\"Poincareplane\",0x210C);   entity(\"pointint\",0x2A15);   entity(\"popf\",0x1D561);   entity(\"Popf\",0x2119);   entity(\"pound\",0x00A3);   entity(\"pr\",0x227A);   entity(\"Pr\",0x2ABB);   entity(\"prap\",0x2AB7);   entity(\"prcue\",0x227C);   entity(\"pre\",0x2AAF);   entity(\"prE\",0x2AB3);   entity(\"prec\",0x227A);   entity(\"precapprox\",0x2AB7);   entity(\"preccurlyeq\",0x227C);   entity(\"Precedes\",0x227A);   entity(\"PrecedesEqual\",0x2AAF);   entity(\"PrecedesSlantEqual\",0x227C);   entity(\"PrecedesTilde\",0x227E);   entity(\"preceq\",0x2AAF);   entity(\"precnapprox\",0x2AB9);   entity(\"precneqq\",0x2AB5);   entity(\"precnsim\",0x22E8);   entity(\"precsim\",0x227E);   entity(\"prime\",0x2032);   entity(\"Prime\",0x2033);   entity(\"primes\",0x2119);   entity(\"prnap\",0x2AB9);   entity(\"prnE\",0x2AB5);   entity(\"prnsim\",0x22E8);   entity(\"prod\",0x220F);   entity(\"Product\",0x220F);   entity(\"profalar\",0x232E);   entity(\"profline\",0x2312);   entity(\"profsurf\",0x2313);   entity(\"prop\",0x221D);   entity(\"Proportion\",0x2237);   entity(\"Proportional\",0x221D);   entity(\"propto\",0x221D);   entity(\"prsim\",0x227E);   entity(\"prurel\",0x22B0);   entity(\"pscr\",0x1D4C5);   entity(\"Pscr\",0x1D4AB);   entity(\"psgr\",0x03C8);   entity(\"PSgr\",0x03A8);   entity(\"psi\",0x03C8);   entity(\"Psi\",0x03A8);   entity(\"puncsp\",0x2008);   entity(\"qfr\",0x1D52E);   entity(\"Qfr\",0x1D514);   entity(\"qint\",0x2A0C);   entity(\"qopf\",0x1D562);   entity(\"Qopf\",0x211A);   entity(\"qprime\",0x2057);   entity(\"qscr\",0x1D4C6);   entity(\"Qscr\",0x1D4AC);   entity(\"quaternions\",0x210D);   entity(\"quatint\",0x2A16);   entity(\"quest\",0x003F);   entity(\"questeq\",0x225F);   entity(\"quot\",0x0022);   entity(\"rAarr\",0x21DB);   entity(\"race\",0x29DA);   entity(\"racute\",0x0155);   entity(\"Racute\",0x0154);   entity(\"radic\",0x221A);   entity(\"raemptyv\",0x29B3);   entity(\"rang\",0x232A);   entity(\"Rang\",0x27EB);   entity(\"rangd\",0x2992);   entity(\"range\",0x29A5);   entity(\"rangle\",0x232A);   entity(\"raquo\",0x00BB);   entity(\"rarr\",0x2192);   entity(\"rArr\",0x21D2);   entity(\"Rarr\",0x21A0);   entity(\"rarrap\",0x2975);   entity(\"rarrb\",0x21E5);   entity(\"rarrbfs\",0x2920);   entity(\"rarrc\",0x2933);   entity(\"rarrfs\",0x291E);   entity(\"rarrhk\",0x21AA);   entity(\"rarrlp\",0x21AC);   entity(\"rarrpl\",0x2945);   entity(\"rarrsim\",0x2974);   entity(\"rarrtl\",0x21A3);   entity(\"Rarrtl\",0x2916);   entity(\"rarrw\",0x219D);   entity(\"ratail\",0x291A);   entity(\"rAtail\",0x291C);   entity(\"ratio\",0x2236);   entity(\"rationals\",0x211A);   entity(\"rbarr\",0x290D);   entity(\"rBarr\",0x290F);   entity(\"RBarr\",0x2910);   entity(\"rbbrk\",0x2998);   entity(\"rbrace\",0x007D);   entity(\"rbrack\",0x005D);   entity(\"rbrke\",0x298C);   entity(\"rbrksld\",0x298E);   entity(\"rbrkslu\",0x2990);   entity(\"rcaron\",0x0159);   entity(\"Rcaron\",0x0158);   entity(\"rcedil\",0x0157);   entity(\"Rcedil\",0x0156);   entity(\"rceil\",0x2309);   entity(\"rcub\",0x007D);   entity(\"rcy\",0x0440);   entity(\"Rcy\",0x0420);   entity(\"rdca\",0x2937);   entity(\"rdldhar\",0x2969);   entity(\"rdquo\",0x201D);   entity(\"rdquor\",0x201D);   entity(\"rdsh\",0x21B3);   entity(\"Re\",0x211C);   entity(\"real\",0x211C);   entity(\"realine\",0x211B);   entity(\"realpart\",0x211C);   entity(\"reals\",0x211D);   entity(\"rect\",0x25AD);   entity(\"reg\",0x00AE);   entity(\"ReverseElement\",0x220B);   entity(\"ReverseEquilibrium\",0x21CB);   entity(\"ReverseUpEquilibrium\",0x296F);   entity(\"rfisht\",0x297D);   entity(\"rfloor\",0x230B);   entity(\"rfr\",0x1D52F);   entity(\"Rfr\",0x211C);   entity(\"rgr\",0x03C1);   entity(\"Rgr\",0x03A1);   entity(\"rHar\",0x2964);   entity(\"rhard\",0x21C1);   entity(\"rharu\",0x21C0);   entity(\"rharul\",0x296C);   entity(\"rho\",0x03C1);   entity(\"Rho\",0x03A1);   entity(\"rhov\",0x03F1);   entity(\"RightAngleBracket\",0x232A);   entity(\"rightarrow\",0x2192);   entity(\"Rightarrow\",0x21D2);   entity(\"RightArrowBar\",0x21E5);   entity(\"RightArrowLeftArrow\",0x21C4);   entity(\"rightarrowtail\",0x21A3);   entity(\"RightCeiling\",0x2309);   entity(\"RightDoubleBracket\",0x27E7);   entity(\"RightDownTeeVector\",0x295D);   entity(\"RightDownVector\",0x21C2);   entity(\"RightDownVectorBar\",0x2955);   entity(\"RightFloor\",0x230B);   entity(\"rightharpoondown\",0x21C1);   entity(\"rightharpoonup\",0x21C0);   entity(\"rightleftarrows\",0x21C4);   entity(\"rightleftharpoons\",0x21CC);   entity(\"rightrightarrows\",0x21C9);   entity(\"rightsquigarrow\",0x219D);   entity(\"RightTee\",0x22A2);   entity(\"RightTeeArrow\",0x21A6);   entity(\"RightTeeVector\",0x295B);   entity(\"rightthreetimes\",0x22CC);   entity(\"RightTriangle\",0x22B3);   entity(\"RightTriangleBar\",0x29D0);   entity(\"RightTriangleEqual\",0x22B5);   entity(\"RightUpDownVector\",0x294F);   entity(\"RightUpTeeVector\",0x295C);   entity(\"RightUpVector\",0x21BE);   entity(\"RightUpVectorBar\",0x2954);   entity(\"RightVector\",0x21C0);   entity(\"RightVectorBar\",0x2953);   entity(\"ring\",0x02DA);   entity(\"risingdotseq\",0x2253);   entity(\"rlarr\",0x21C4);   entity(\"rlhar\",0x21CC);   entity(\"rlm\",0x200F);   entity(\"rmoust\",0x23B1);   entity(\"rmoustache\",0x23B1);   entity(\"rnmid\",0x2AEE);   entity(\"roang\",0x27ED);   entity(\"roarr\",0x21FE);   entity(\"robrk\",0x27E7);   entity(\"ropar\",0x2986);   entity(\"ropf\",0x1D563);   entity(\"Ropf\",0x211D);   entity(\"roplus\",0x2A2E);   entity(\"rotimes\",0x2A35);   entity(\"RoundImplies\",0x2970);   entity(\"rpar\",0x0029);   entity(\"rpargt\",0x2994);   entity(\"rppolint\",0x2A12);   entity(\"rrarr\",0x21C9);   entity(\"Rrightarrow\",0x21DB);   entity(\"rsaquo\",0x203A);   entity(\"rscr\",0x1D4C7);   entity(\"Rscr\",0x211B);   entity(\"rsh\",0x21B1);   entity(\"rsqb\",0x005D);   entity(\"rsquo\",0x2019);   entity(\"rsquor\",0x2019);   entity(\"rthree\",0x22CC);   entity(\"rtimes\",0x22CA);   entity(\"rtri\",0x25B9);   entity(\"rtrie\",0x22B5);   entity(\"rtrif\",0x25B8);   entity(\"rtriltri\",0x29CE);   entity(\"RuleDelayed\",0x29F4);   entity(\"ruluhar\",0x2968);   entity(\"rx\",0x211E);   entity(\"sacute\",0x015B);   entity(\"Sacute\",0x015A);   entity(\"sbquo\",0x201A);   entity(\"sc\",0x227B);   entity(\"Sc\",0x2ABC);   entity(\"scap\",0x2AB8);   entity(\"scaron\",0x0161);   entity(\"Scaron\",0x0160);   entity(\"sccue\",0x227D);   entity(\"sce\",0x2AB0);   entity(\"scE\",0x2AB4);   entity(\"scedil\",0x015F);   entity(\"Scedil\",0x015E);   entity(\"scirc\",0x015D);   entity(\"Scirc\",0x015C);   entity(\"scnap\",0x2ABA);   entity(\"scnE\",0x2AB6);   entity(\"scnsim\",0x22E9);   entity(\"scpolint\",0x2A13);   entity(\"scsim\",0x227F);   entity(\"scy\",0x0441);   entity(\"Scy\",0x0421);   entity(\"sdot\",0x22C5);   entity(\"sdotb\",0x22A1);   entity(\"sdote\",0x2A66);   entity(\"searhk\",0x2925);   entity(\"searr\",0x2198);   entity(\"seArr\",0x21D8);   entity(\"searrow\",0x2198);   entity(\"sect\",0x00A7);   entity(\"semi\",0x003B);   entity(\"seswar\",0x2929);   entity(\"setminus\",0x2216);   entity(\"setmn\",0x2216);   entity(\"sext\",0x2736);   entity(\"sfgr\",0x03C2);   entity(\"sfr\",0x1D530);   entity(\"Sfr\",0x1D516);   entity(\"sfrown\",0x2322);   entity(\"sgr\",0x03C3);   entity(\"Sgr\",0x03A3);   entity(\"sharp\",0x266F);   entity(\"shchcy\",0x0449);   entity(\"SHCHcy\",0x0429);   entity(\"shcy\",0x0448);   entity(\"SHcy\",0x0428);   entity(\"ShortDownArrow\",0x2193);   entity(\"ShortLeftArrow\",0x2190);   entity(\"shortmid\",0x2223);   entity(\"shortparallel\",0x2225);   entity(\"ShortRightArrow\",0x2192);   entity(\"ShortUpArrow\",0x2191);   entity(\"shy\",0x00AD);   entity(\"sigma\",0x03C3);   entity(\"Sigma\",0x03A3);   entity(\"sigmaf\",0x03C2);   entity(\"sigmav\",0x03C2);   entity(\"sim\",0x223C);   entity(\"simdot\",0x2A6A);   entity(\"sime\",0x2243);   entity(\"simeq\",0x2243);   entity(\"simg\",0x2A9E);   entity(\"simgE\",0x2AA0);   entity(\"siml\",0x2A9D);   entity(\"simlE\",0x2A9F);   entity(\"simne\",0x2246);   entity(\"simplus\",0x2A24);   entity(\"simrarr\",0x2972);   entity(\"slarr\",0x2190);   entity(\"SmallCircle\",0x2218);   entity(\"smallsetminus\",0x2216);   entity(\"smashp\",0x2A33);   entity(\"smeparsl\",0x29E4);   entity(\"smid\",0x2223);   entity(\"smile\",0x2323);   entity(\"smt\",0x2AAA);   entity(\"smte\",0x2AAC);   entity(\"softcy\",0x044C);   entity(\"SOFTcy\",0x042C);   entity(\"sol\",0x002F);   entity(\"solb\",0x29C4);   entity(\"solbar\",0x233F);   entity(\"sopf\",0x1D564);   entity(\"Sopf\",0x1D54A);   entity(\"spades\",0x2660);   entity(\"spadesuit\",0x2660);   entity(\"spar\",0x2225);   entity(\"sqcap\",0x2293);   entity(\"sqcup\",0x2294);   entity(\"Sqrt\",0x221A);   entity(\"sqsub\",0x228F);   entity(\"sqsube\",0x2291);   entity(\"sqsubset\",0x228F);   entity(\"sqsubseteq\",0x2291);   entity(\"sqsup\",0x2290);   entity(\"sqsupe\",0x2292);   entity(\"sqsupset\",0x2290);   entity(\"sqsupseteq\",0x2292);   entity(\"squ\",0x25A1);   entity(\"square\",0x25A1);   entity(\"SquareIntersection\",0x2293);   entity(\"SquareSubset\",0x228F);   entity(\"SquareSubsetEqual\",0x2291);   entity(\"SquareSuperset\",0x2290);   entity(\"SquareSupersetEqual\",0x2292);   entity(\"SquareUnion\",0x2294);   entity(\"squarf\",0x25AA);   entity(\"squf\",0x25AA);   entity(\"srarr\",0x2192);   entity(\"sscr\",0x1D4C8);   entity(\"Sscr\",0x1D4AE);   entity(\"ssetmn\",0x2216);   entity(\"ssmile\",0x2323);   entity(\"sstarf\",0x22C6);   entity(\"star\",0x2606);   entity(\"Star\",0x22C6);   entity(\"starf\",0x2605);   entity(\"straightepsilon\",0x03F5);   entity(\"straightphi\",0x03D5);   entity(\"strns\",0x00AF);   entity(\"sub\",0x2282);   entity(\"Sub\",0x22D0);   entity(\"subdot\",0x2ABD);   entity(\"sube\",0x2286);   entity(\"subE\",0x2AC5);   entity(\"subedot\",0x2AC3);   entity(\"submult\",0x2AC1);   entity(\"subne\",0x228A);   entity(\"subnE\",0x2ACB);   entity(\"subplus\",0x2ABF);   entity(\"subrarr\",0x2979);   entity(\"subset\",0x2282);   entity(\"Subset\",0x22D0);   entity(\"subseteq\",0x2286);   entity(\"subseteqq\",0x2AC5);   entity(\"SubsetEqual\",0x2286);   entity(\"subsetneq\",0x228A);   entity(\"subsetneqq\",0x2ACB);   entity(\"subsim\",0x2AC7);   entity(\"subsub\",0x2AD5);   entity(\"subsup\",0x2AD3);   entity(\"succ\",0x227B);   entity(\"succapprox\",0x2AB8);   entity(\"succcurlyeq\",0x227D);   entity(\"Succeeds\",0x227B);   entity(\"SucceedsEqual\",0x2AB0);   entity(\"SucceedsSlantEqual\",0x227D);   entity(\"SucceedsTilde\",0x227F);   entity(\"succeq\",0x2AB0);   entity(\"succnapprox\",0x2ABA);   entity(\"succneqq\",0x2AB6);   entity(\"succnsim\",0x22E9);   entity(\"succsim\",0x227F);   entity(\"SuchThat\",0x220B);   entity(\"sum\",0x2211);   entity(\"sung\",0x266A);   entity(\"sup\",0x2283);   entity(\"Sup\",0x22D1);   entity(\"sup1\",0x00B9);   entity(\"sup2\",0x00B2);   entity(\"sup3\",0x00B3);   entity(\"supdot\",0x2ABE);   entity(\"supdsub\",0x2AD8);   entity(\"supe\",0x2287);   entity(\"supE\",0x2AC6);   entity(\"supedot\",0x2AC4);   entity(\"Superset\",0x2283);   entity(\"SupersetEqual\",0x2287);   entity(\"suphsub\",0x2AD7);   entity(\"suplarr\",0x297B);   entity(\"supmult\",0x2AC2);   entity(\"supne\",0x228B);   entity(\"supnE\",0x2ACC);   entity(\"supplus\",0x2AC0);   entity(\"supset\",0x2283);   entity(\"Supset\",0x22D1);   entity(\"supseteq\",0x2287);   entity(\"supseteqq\",0x2AC6);   entity(\"supsetneq\",0x228B);   entity(\"supsetneqq\",0x2ACC);   entity(\"supsim\",0x2AC8);   entity(\"supsub\",0x2AD4);   entity(\"supsup\",0x2AD6);   entity(\"swarhk\",0x2926);   entity(\"swarr\",0x2199);   entity(\"swArr\",0x21D9);   entity(\"swarrow\",0x2199);   entity(\"swnwar\",0x292A);   entity(\"szlig\",0x00DF);   entity(\"Tab\",0x0009);   entity(\"target\",0x2316);   entity(\"tau\",0x03C4);   entity(\"Tau\",0x03A4);   entity(\"tbrk\",0x23B4);   entity(\"tcaron\",0x0165);   entity(\"Tcaron\",0x0164);   entity(\"tcedil\",0x0163);   entity(\"Tcedil\",0x0162);   entity(\"tcy\",0x0442);   entity(\"Tcy\",0x0422);   entity(\"telrec\",0x2315);   entity(\"tfr\",0x1D531);   entity(\"Tfr\",0x1D517);   entity(\"tgr\",0x03C4);   entity(\"Tgr\",0x03A4);   entity(\"there4\",0x2234);   entity(\"therefore\",0x2234);   entity(\"theta\",0x03B8);   entity(\"Theta\",0x0398);   entity(\"thetasym\",0x03D1);   entity(\"thetav\",0x03D1);   entity(\"thgr\",0x03B8);   entity(\"THgr\",0x0398);   entity(\"thickapprox\",0x2248);   entity(\"thicksim\",0x223C);   entity(\"thinsp\",0x2009);   entity(\"ThinSpace\",0x2009);   entity(\"thkap\",0x2248);   entity(\"thksim\",0x223C);   entity(\"thorn\",0x00FE);   entity(\"THORN\",0x00DE);   entity(\"tilde\",0x02DC);   entity(\"Tilde\",0x223C);   entity(\"TildeEqual\",0x2243);   entity(\"TildeFullEqual\",0x2245);   entity(\"TildeTilde\",0x2248);   entity(\"times\",0x00D7);   entity(\"timesb\",0x22A0);   entity(\"timesbar\",0x2A31);   entity(\"timesd\",0x2A30);   entity(\"tint\",0x222D);   entity(\"toea\",0x2928);   entity(\"top\",0x22A4);   entity(\"topbot\",0x2336);   entity(\"topcir\",0x2AF1);   entity(\"topf\",0x1D565);   entity(\"Topf\",0x1D54B);   entity(\"topfork\",0x2ADA);   entity(\"tosa\",0x2929);   entity(\"tprime\",0x2034);   entity(\"trade\",0x2122);   entity(\"triangle\",0x25B5);   entity(\"triangledown\",0x25BF);   entity(\"triangleleft\",0x25C3);   entity(\"trianglelefteq\",0x22B4);   entity(\"triangleq\",0x225C);   entity(\"triangleright\",0x25B9);   entity(\"trianglerighteq\",0x22B5);   entity(\"tridot\",0x25EC);   entity(\"trie\",0x225C);   entity(\"triminus\",0x2A3A);   entity(\"triplus\",0x2A39);   entity(\"trisb\",0x29CD);   entity(\"tritime\",0x2A3B);   entity(\"trpezium\",0x23E2);   entity(\"tscr\",0x1D4C9);   entity(\"Tscr\",0x1D4AF);   entity(\"tscy\",0x0446);   entity(\"TScy\",0x0426);   entity(\"tshcy\",0x045B);   entity(\"TSHcy\",0x040B);   entity(\"tstrok\",0x0167);   entity(\"Tstrok\",0x0166);   entity(\"twixt\",0x226C);   entity(\"twoheadleftarrow\",0x219E);   entity(\"twoheadrightarrow\",0x21A0);   entity(\"uacgr\",0x03CD);   entity(\"Uacgr\",0x038E);   entity(\"uacute\",0x00FA);   entity(\"Uacute\",0x00DA);   entity(\"uarr\",0x2191);   entity(\"uArr\",0x21D1);   entity(\"Uarr\",0x219F);   entity(\"Uarrocir\",0x2949);   entity(\"ubrcy\",0x045E);   entity(\"Ubrcy\",0x040E);   entity(\"ubreve\",0x016D);   entity(\"Ubreve\",0x016C);   entity(\"ucirc\",0x00FB);   entity(\"Ucirc\",0x00DB);   entity(\"ucy\",0x0443);   entity(\"Ucy\",0x0423);   entity(\"udarr\",0x21C5);   entity(\"udblac\",0x0171);   entity(\"Udblac\",0x0170);   entity(\"udhar\",0x296E);   entity(\"udiagr\",0x03B0);   entity(\"udigr\",0x03CB);   entity(\"Udigr\",0x03AB);   entity(\"ufisht\",0x297E);   entity(\"ufr\",0x1D532);   entity(\"Ufr\",0x1D518);   entity(\"ugr\",0x03C5);   entity(\"Ugr\",0x03A5);   entity(\"ugrave\",0x00F9);   entity(\"Ugrave\",0x00D9);   entity(\"uHar\",0x2963);   entity(\"uharl\",0x21BF);   entity(\"uharr\",0x21BE);   entity(\"uhblk\",0x2580);   entity(\"ulcorn\",0x231C);   entity(\"ulcorner\",0x231C);   entity(\"ulcrop\",0x230F);   entity(\"ultri\",0x25F8);   entity(\"umacr\",0x016B);   entity(\"Umacr\",0x016A);   entity(\"uml\",0x00A8);   entity(\"UnderBrace\",0xFE38);   entity(\"UnderBracket\",0x23B5);   entity(\"UnderParenthesis\",0xFE36);   entity(\"Union\",0x22C3);   entity(\"UnionPlus\",0x228E);   entity(\"uogon\",0x0173);   entity(\"Uogon\",0x0172);   entity(\"uopf\",0x1D566);   entity(\"Uopf\",0x1D54C);   entity(\"uparrow\",0x2191);   entity(\"Uparrow\",0x21D1);   entity(\"UpArrowBar\",0x2912);   entity(\"UpArrowDownArrow\",0x21C5);   entity(\"updownarrow\",0x2195);   entity(\"Updownarrow\",0x21D5);   entity(\"UpEquilibrium\",0x296E);   entity(\"upharpoonleft\",0x21BF);   entity(\"upharpoonright\",0x21BE);   entity(\"uplus\",0x228E);   entity(\"UpperLeftArrow\",0x2196);   entity(\"UpperRightArrow\",0x2197);   entity(\"upsi\",0x03C5);   entity(\"Upsi\",0x03D2);   entity(\"upsih\",0x03D2);   entity(\"upsilon\",0x03C5);   entity(\"Upsilon\",0x03A5);   entity(\"UpTee\",0x22A5);   entity(\"UpTeeArrow\",0x21A5);   entity(\"upuparrows\",0x21C8);   entity(\"urcorn\",0x231D);   entity(\"urcorner\",0x231D);   entity(\"urcrop\",0x230E);   entity(\"uring\",0x016F);   entity(\"Uring\",0x016E);   entity(\"urtri\",0x25F9);   entity(\"uscr\",0x1D4CA);   entity(\"Uscr\",0x1D4B0);   entity(\"utdot\",0x22F0);   entity(\"utilde\",0x0169);   entity(\"Utilde\",0x0168);   entity(\"utri\",0x25B5);   entity(\"utrif\",0x25B4);   entity(\"uuarr\",0x21C8);   entity(\"uuml\",0x00FC);   entity(\"Uuml\",0x00DC);   entity(\"uwangle\",0x29A7);   entity(\"vangrt\",0x299C);   entity(\"varepsilon\",0x03B5);   entity(\"varkappa\",0x03F0);   entity(\"varnothing\",0x2205);   entity(\"varphi\",0x03C6);   entity(\"varpi\",0x03D6);   entity(\"varpropto\",0x221D);   entity(\"varr\",0x2195);   entity(\"vArr\",0x21D5);   entity(\"varrho\",0x03F1);   entity(\"varsigma\",0x03C2);   entity(\"vartheta\",0x03D1);   entity(\"vartriangleleft\",0x22B2);   entity(\"vartriangleright\",0x22B3);   entity(\"vBar\",0x2AE8);   entity(\"Vbar\",0x2AEB);   entity(\"vBarv\",0x2AE9);   entity(\"vcy\",0x0432);   entity(\"Vcy\",0x0412);   entity(\"vdash\",0x22A2);   entity(\"vDash\",0x22A8);   entity(\"Vdash\",0x22A9);   entity(\"VDash\",0x22AB);   entity(\"Vdashl\",0x2AE6);   entity(\"vee\",0x2228);   entity(\"Vee\",0x22C1);   entity(\"veebar\",0x22BB);   entity(\"veeeq\",0x225A);   entity(\"vellip\",0x22EE);   entity(\"verbar\",0x007C);   entity(\"Verbar\",0x2016);   entity(\"vert\",0x007C);   entity(\"Vert\",0x2016);   entity(\"VerticalBar\",0x2223);   entity(\"VerticalLine\",0x007C);   entity(\"VerticalSeparator\",0x2758);   entity(\"VerticalTilde\",0x2240);   entity(\"VeryThinSpace\",0x200A);   entity(\"vfr\",0x1D533);   entity(\"Vfr\",0x1D519);   entity(\"vltri\",0x22B2);   entity(\"vopf\",0x1D567);   entity(\"Vopf\",0x1D54D);   entity(\"vprop\",0x221D);   entity(\"vrtri\",0x22B3);   entity(\"vscr\",0x1D4CB);   entity(\"Vscr\",0x1D4B1);   entity(\"Vvdash\",0x22AA);   entity(\"vzigzag\",0x299A);   entity(\"wcirc\",0x0175);   entity(\"Wcirc\",0x0174);   entity(\"wedbar\",0x2A5F);   entity(\"wedge\",0x2227);   entity(\"Wedge\",0x22C0);   entity(\"wedgeq\",0x2259);   entity(\"weierp\",0x2118);   entity(\"wfr\",0x1D534);   entity(\"Wfr\",0x1D51A);   entity(\"wopf\",0x1D568);   entity(\"Wopf\",0x1D54E);   entity(\"wp\",0x2118);   entity(\"wr\",0x2240);   entity(\"wreath\",0x2240);   entity(\"wscr\",0x1D4CC);   entity(\"Wscr\",0x1D4B2);   entity(\"xcap\",0x22C2);   entity(\"xcirc\",0x25EF);   entity(\"xcup\",0x22C3);   entity(\"xdtri\",0x25BD);   entity(\"xfr\",0x1D535);   entity(\"Xfr\",0x1D51B);   entity(\"xgr\",0x03BE);   entity(\"Xgr\",0x039E);   entity(\"xharr\",0x27F7);   entity(\"xhArr\",0x27FA);   entity(\"xi\",0x03BE);   entity(\"Xi\",0x039E);   entity(\"xlarr\",0x27F5);   entity(\"xlArr\",0x27F8);   entity(\"xmap\",0x27FC);   entity(\"xnis\",0x22FB);   entity(\"xodot\",0x2A00);   entity(\"xopf\",0x1D569);   entity(\"Xopf\",0x1D54F);   entity(\"xoplus\",0x2A01);   entity(\"xotime\",0x2A02);   entity(\"xrarr\",0x27F6);   entity(\"xrArr\",0x27F9);   entity(\"xscr\",0x1D4CD);   entity(\"Xscr\",0x1D4B3);   entity(\"xsqcup\",0x2A06);   entity(\"xuplus\",0x2A04);   entity(\"xutri\",0x25B3);   entity(\"xvee\",0x22C1);   entity(\"xwedge\",0x22C0);   entity(\"yacute\",0x00FD);   entity(\"Yacute\",0x00DD);   entity(\"yacy\",0x044F);   entity(\"YAcy\",0x042F);   entity(\"ycirc\",0x0177);   entity(\"Ycirc\",0x0176);   entity(\"ycy\",0x044B);   entity(\"Ycy\",0x042B);   entity(\"yen\",0x00A5);   entity(\"yfr\",0x1D536);   entity(\"Yfr\",0x1D51C);   entity(\"yicy\",0x0457);   entity(\"YIcy\",0x0407);   entity(\"yopf\",0x1D56A);   entity(\"Yopf\",0x1D550);   entity(\"yscr\",0x1D4CE);   entity(\"Yscr\",0x1D4B4);   entity(\"yucy\",0x044E);   entity(\"YUcy\",0x042E);   entity(\"yuml\",0x00FF);   entity(\"Yuml\",0x0178);   entity(\"zacute\",0x017A);   entity(\"Zacute\",0x0179);   entity(\"zcaron\",0x017E);   entity(\"Zcaron\",0x017D);   entity(\"zcy\",0x0437);   entity(\"Zcy\",0x0417);   entity(\"zdot\",0x017C);   entity(\"Zdot\",0x017B);   entity(\"zeetrf\",0x2128);   entity(\"ZeroWidthSpace\",0x200B);   entity(\"zeta\",0x03B6);   entity(\"Zeta\",0x0396);   entity(\"zfr\",0x1D537);   entity(\"Zfr\",0x2128);   entity(\"zgr\",0x03B6);   entity(\"Zgr\",0x0396);   entity(\"zhcy\",0x0436);   entity(\"ZHcy\",0x0416);   entity(\"zigrarr\",0x21DD);   entity(\"zopf\",0x1D56B);   entity(\"Zopf\",0x2124);   entity(\"zscr\",0x1D4CF);   entity(\"Zscr\",0x1D4B5);   entity(\"zwj\",0x200D);   entity(\"zwnj\",0x200C); } "
"@Override public boolean start() throws ContainerException {   ContainerConfig.Container cfg=ContainerConfig.getContainer(name,configFile);   String dispatcherName=ContainerConfig.getPropertyValue(cfg,\"dispatcher-name\",\"JavaMailDispatcher\");   String delegatorName=ContainerConfig.getPropertyValue(cfg,\"delegator-name\",\"default\");   this.deleteMail=\"true\".equals(ContainerConfig.getPropertyValue(cfg,\"delete-mail\",\"false\"));   this.delegator=DelegatorFactory.getDelegator(delegatorName);   this.dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);   this.timerDelay=ContainerConfig.getPropertyValue(cfg,\"poll-delay\",300000);   this.maxSize=ContainerConfig.getPropertyValue(cfg,\"maxSize\",1000000);   String runAsUser=ContainerConfig.getPropertyValue(cfg,\"run-as-user\",\"system\");   try {     this.userLogin=EntityQuery.use(delegator).from(\"UserLogin\").where(\"userLoginId\",runAsUser).queryOne();   }  catch (  GenericEntityException e) {     Debug.logError(e,\"Unable to load run-as-user UserLogin; cannot start container\",module);     return false;   }   ServiceMcaUtil.readConfig();   List<ContainerConfig.Container.Property> configs=cfg.getPropertiesWithValue(\"store-listener\");   for (  ContainerConfig.Container.Property prop : configs) {     Session session=this.makeSession(prop);     Store store=this.getStore(session);     if (store != null) {       stores.put(store,session);       store.addStoreListener(new LoggingStoreListener());     }   }   if (UtilValidate.isNotEmpty(stores)) {     pollTimer.scheduleAtFixedRate(new PollerTask(dispatcher,userLogin),timerDelay,timerDelay,TimeUnit.MILLISECONDS);   }  else {     Debug.logWarning(\"No JavaMail Store(s) configured; poller disabled.\",module);   }   return true; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public AssignXorExpr fullCopy(){   AssignXorExpr tree=(AssignXorExpr)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public void tabSelectingEffect(long time,int id){   int index=TabModelUtils.getTabIndexById(mTabModel,id);   startAnimation(time,OverviewAnimationType.TAB_FOCUSED,index,-1,false); } "
"private void sumUpAttributeValues(){   Collection<String> microbialTaxa=taxaName2AttributesRawData.keySet();   for (  String taxname : microbialTaxa) {     if (!taxaName2Attributes2Properties.containsKey(taxname)) {       continue;     }     Hashtable<String,String> taxonAttributes=taxaName2Attributes2Properties.get(taxname);     if (taxonAttributes.size() > 0) {       for (      String attribute : AttributeData.attributeList) {         String parsed=taxonAttributes.get(attribute); switch (attribute) { case \"Gram Stain\": case \"Endospores\": case \"Motility\":           if (parsed.equals(\"+\") || parsed.equals(\"Yes\")) {             this.updateAttributes2TaxaNames(attribute,0,taxname);           }  else           if (parsed.equals(\"-\") || parsed.equals(\"No\")) {             updateAttributes2TaxaNames(attribute,1,taxname);           }  else           if (parsed.equals(\"\")) {             this.updateAttributes2TaxaNames(attribute,2,taxname);           }         break; case \"Pathogenic\":       if (parsed.equals(\"\")) {         this.updateAttributes2TaxaNames(attribute,2,taxname);       }  else       if (parsed.equals(\"No\")) {         this.updateAttributes2TaxaNames(attribute,1,taxname);       }  else {         this.updateAttributes2TaxaNames(attribute,0,taxname);       }     break; default :   int propertyIndex=this.getPropertyIndex(attribute,parsed); this.updateAttributes2TaxaNames(attribute,propertyIndex,taxname); break; } } } } } "
"public BoardGetTopicsQuery topicIds(List<Integer> value){   return unsafeParam(\"topic_ids\",value); } "
"private void zzScanError(int errorCode){   String message;   try {     message=ZZ_ERROR_MSG[errorCode];   }  catch (  ArrayIndexOutOfBoundsException e) {     message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];   }   throw new Error(message); } "
"public void storeClassBytes(String className,byte[] definition){ synchronized (_stateLock) {     if (_classBytesByName.containsKey(className)) {       String msg=toString() + \": attempting to add class bytes for class name \" + className+ \" which already has mapped class bytes\";       if (_logger.isLoggable(Level.SEVERE)) {         _logger.severe(msg);         _logger.showGlobalTrace();       }       if (_disableDuplicateLoadProtection)       _logger.warning(toString() + \": duplicate remote class loading protection is disabled, exception ignored\");  else       throw new IllegalArgumentException(msg);     }     if (_logger.isLoggable(Level.FINEST))     _logger.finest(\"Storing class bytes of class: \" + className + \" in \"+ this);     _classBytesByName.put(className,definition);   } } "
"@Override public String toString(){   return \"Host []\"; } "
"public boolean isSimpleTypeOrSimpleObject(final Field field){   Class<?> type=field.getType();   boolean simpleType=(type.isAssignableFrom(Short.class) || type.isAssignableFrom(Short.TYPE) || type.isAssignableFrom(Integer.class)|| type.isAssignableFrom(Integer.TYPE)|| type.isAssignableFrom(Float.class)|| type.isAssignableFrom(Float.TYPE)|| type.isAssignableFrom(Double.class)|| type.isAssignableFrom(Double.TYPE)|| type.isAssignableFrom(Long.class)|| type.isAssignableFrom(Long.TYPE)|| type.isAssignableFrom(Byte.class)|| type.isAssignableFrom(Byte.TYPE)|| type.isAssignableFrom(Character.class)|| type.isAssignableFrom(Character.TYPE)|| type.isAssignableFrom(Boolean.class)|| type.isAssignableFrom(Boolean.TYPE)|| type.isAssignableFrom(String.class)) || type.isEnum();   return simpleType; } "
"@SuppressWarnings({\"unchecked\",\"cast\"}) public ByteType fullCopy(){   ByteType tree=(ByteType)copy();   if (children != null) {     for (int i=0; i < children.length; ++i) {       ASTNode child=(ASTNode)children[i];       if (child != null) {         child=child.fullCopy();         tree.setChild(child,i);       }     }   }   return tree; } "
"public void init$Children(){ } "
"public StatelessHibernateSpaceSynchronizationEndpointConfigurer managedEntries(String... entries){   this.managedEntries=new HashSet<String>();   this.managedEntries.addAll(Arrays.asList(entries));   return this; } "
"public <E extends ProtoElement>Iterable<E> reachable(Iterable<E> elems){   return scoper.filter(elems); } "
"private static void addAllComplexTypeChildren(CarbonDimension dimension,StringBuilder dimString,String parent){   dimString.append(dimension.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + dimension.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ parent+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColumnId()+ CarbonCommonConstants.HASH_SPC_CHARACTER);   for (int i=0; i < dimension.getNumberOfChild(); i++) {     CarbonDimension childDim=dimension.getListOfChildDimensions().get(i);     if (childDim.getNumberOfChild() > 0) {       addAllComplexTypeChildren(childDim,dimString,dimension.getColName());     }  else {       dimString.append(childDim.getColName() + CarbonCommonConstants.COLON_SPC_CHARACTER + childDim.getDataType()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ dimension.getColName()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getColumnId()+ CarbonCommonConstants.COLON_SPC_CHARACTER+ childDim.getOrdinal()+ CarbonCommonConstants.HASH_SPC_CHARACTER);     }   } } "
"private static void destroyDir(File dir,Collection errors) throws IOException {   if (!dir.isDirectory()) {     handleError(errors,dir);     return;   }   String[] names=dir.list();   for (int i=0; i < names.length; i++) {     File file=new File(dir,names[i]);     if (!file.delete())     destroyDir(file,errors);   }   if (!dir.delete())   handleError(errors,dir); } "
"public boolean isValidPoint(double x){   if (x < knots[0] || x > knots[n]) {     return false;   }  else {     return true;   } } "
"public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds,Map<String,Object> properties){   this(type,divisionType,resolution,bytes,microseconds);   this.properties=new HashMap<String,Object>(properties); } "
"protected void writePixels() throws IOException {   LZWEncoder encoder=new LZWEncoder(width,height,indexedPixels,colorDepth);   encoder.encode(out); } "
"public CronExpression(String cronExpression,ClockReader clockReader,TimeZone timeZone) throws ParseException {   this(cronExpression,clockReader);   this.timeZone=timeZone; } "
"@Override public void revertToDefaultValue(){   if (this.crsComboBox != null) {     crsComboBox.setSelectedIndex(-1);   } } "
"public void removeExternalTestDir(){   deleteDir(new File(EXT_TEST_DIR)); } "
"public static SM_SYSTEM_MESSAGE STR_DUEL_REQUEST_TO_PARTNER(String value0){   return new SM_SYSTEM_MESSAGE(1300094,value0); } "
"public PhotosGetByIdQueryWithExtended(VkApiClient client,String... photos){   super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));   photos(photos);   extended(true); } "
"@Override public Writer append(char value){   builder.append(value);   return this; } "
"public KMeansPlusPlusClusterer(final int k){   this(k,-1); } "
"public AdsImportTargetContactsQuery clientId(Integer value){   return unsafeParam(\"client_id\",value); } "
"public FastAvailableExpressions(Body b,SideEffectTester st){   if (Options.v().verbose())   G.v().out.println(\"[\" + b.getMethod().getName() + \"] Finding available expressions...\");   FastAvailableExpressionsAnalysis analysis=new FastAvailableExpressionsAnalysis(new ExceptionalUnitGraph(b),b.getMethod(),st); {     unitToPairsAfter=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);     unitToPairsBefore=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);     unitToEquivsAfter=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);     unitToEquivsBefore=new HashMap<Unit,Chain<EquivalentValue>>(b.getUnits().size() * 2 + 1,0.7f);     for (    Unit s : b.getUnits()) {       FlowSet<Value> set=analysis.getFlowBefore(s);       List<UnitValueBoxPair> pairsBefore=new ArrayList<UnitValueBoxPair>();       List<UnitValueBoxPair> pairsAfter=new ArrayList<UnitValueBoxPair>();       Chain<EquivalentValue> equivsBefore=new HashChain<EquivalentValue>();       Chain<EquivalentValue> equivsAfter=new HashChain<EquivalentValue>();       if (set instanceof ToppedSet && ((ToppedSet<Value>)set).isTop())       throw new RuntimeException(\"top! on \" + s);       for (      Value v : set) {         Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);         UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());         pairsBefore.add(p);         EquivalentValue ev=new EquivalentValue(v);         if (!equivsBefore.contains(ev))         equivsBefore.add(ev);       }       unitToPairsBefore.put(s,pairsBefore);       unitToEquivsBefore.put(s,equivsBefore);       for (      Value v : analysis.getFlowAfter(s)) {         Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);         UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());         pairsAfter.add(p);         EquivalentValue ev=new EquivalentValue(v);         if (!equivsAfter.contains(ev))         equivsAfter.add(ev);       }       unitToPairsAfter.put(s,pairsAfter);       unitToEquivsAfter.put(s,equivsAfter);     }   }   if (Options.v().verbose())   G.v().out.println(\"[\" + b.getMethod().getName() + \"]     Found available expressions...\"); } "
"private String shortDescription(){   StringBuilder buffer=new StringBuilder();   if (refName.length() > 0)   buffer.append(String.format(\">%s\\n\",Basic.fold(refName,ALIGNMENT_FOLD))); {     if (optionalFields.get(\"ZL\") != null)     buffer.append(String.format(\"\\tLength = %s\\n\\n\",optionalFields.get(\"ZL\").toString()));  else     buffer.append(\"\\n\");   } {     boolean hasFirst=false;     boolean hasSecond=false;     if (optionalFields.get(\"AS\") != null && optionalFields.get(\"AS\") instanceof Integer) {       buffer.append(String.format(\" Score = %d\",getBitScore()));       if (optionalFields.get(\"ZR\") != null && optionalFields.get(\"ZR\") instanceof Integer) {         buffer.append(String.format(\" bits (%d)\",getRawScore()));       }       hasFirst=true;     }     if (optionalFields.get(\"ZE\") != null && optionalFields.get(\"ZE\") instanceof Float) {       if (hasFirst)       buffer.append(\",\");       if (getExpected() == 0)       buffer.append(\" Expect = 0\");  else       buffer.append(String.format(\" Expect = %.1g\",getExpected()));       hasSecond=true;     }     if (hasFirst || hasSecond)     buffer.append(\"\\n\");   } {     if (optionalFields.get(\"AL\") != null)     buffer.append(optionalFields.get(\"AL\").toString()).append(\"\\n\");   }   return buffer.toString(); } "
"@Override public boolean equals(Object o){   return o instanceof AirMapPilotPermitCustomProperty && getId().equals(((AirMapPilotPermitCustomProperty)o).getId()); } "
"public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Confuse_A_TO_ME(String skillcaster,String skillname){   return new SM_SYSTEM_MESSAGE(1200584,skillcaster,skillname); } "
"private soot.Value handleDFLCond(soot.jimple.ConditionExpr cond){   soot.Local result=lg.generateLocal(soot.ByteType.v());   soot.jimple.Expr cmExpr=null;   if (isDouble(cond.getOp1()) || isDouble(cond.getOp2()) || isFloat(cond.getOp1())|| isFloat(cond.getOp2())) {     if ((cond instanceof soot.jimple.GeExpr) || (cond instanceof soot.jimple.GtExpr)) {       cmExpr=soot.jimple.Jimple.v().newCmpgExpr(cond.getOp1(),cond.getOp2());     }  else {       cmExpr=soot.jimple.Jimple.v().newCmplExpr(cond.getOp1(),cond.getOp2());     }   }  else   if (isLong(cond.getOp1()) || isLong(cond.getOp2())) {     cmExpr=soot.jimple.Jimple.v().newCmpExpr(cond.getOp1(),cond.getOp2());   }  else {     return cond;   }   soot.jimple.Stmt assign=soot.jimple.Jimple.v().newAssignStmt(result,cmExpr);   body.getUnits().add(assign);   if (cond instanceof soot.jimple.EqExpr) {     cond=soot.jimple.Jimple.v().newEqExpr(result,soot.jimple.IntConstant.v(0));   }  else   if (cond instanceof soot.jimple.GeExpr) {     cond=soot.jimple.Jimple.v().newGeExpr(result,soot.jimple.IntConstant.v(0));   }  else   if (cond instanceof soot.jimple.GtExpr) {     cond=soot.jimple.Jimple.v().newGtExpr(result,soot.jimple.IntConstant.v(0));   }  else   if (cond instanceof soot.jimple.LeExpr) {     cond=soot.jimple.Jimple.v().newLeExpr(result,soot.jimple.IntConstant.v(0));   }  else   if (cond instanceof soot.jimple.LtExpr) {     cond=soot.jimple.Jimple.v().newLtExpr(result,soot.jimple.IntConstant.v(0));   }  else   if (cond instanceof soot.jimple.NeExpr) {     cond=soot.jimple.Jimple.v().newNeExpr(result,soot.jimple.IntConstant.v(0));   }  else {     throw new RuntimeException(\"Unknown Comparison Expr\");   }   return cond; } "
"public void claimCodeName() throws LoginFailedException, RemoteServerException {   ClaimCodenameMessage claimCodenameMessage=ClaimCodenameMessage.newBuilder().setCodename(randomCodenameGenerator()).build();   ServerRequest[] requests=CommonRequest.fillRequest(new ServerRequest(RequestType.CLAIM_CODENAME,claimCodenameMessage),api);   api.getRequestHandler().sendServerRequests(requests);   String updatedCodename=null;   try {     api.getInventories().updateInventories(GetInventoryResponse.parseFrom(requests[2].getData()));     api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(requests[4].getData()));     ClaimCodenameResponse claimCodenameResponse=ClaimCodenameResponse.parseFrom(requests[0].getData());     if (claimCodenameResponse.getStatus() != ClaimCodenameResponse.Status.SUCCESS) {       if (claimCodenameResponse.getUpdatedPlayer().getRemainingCodenameClaims() > 0) {         claimCodeName();       }     }  else {       updatedCodename=claimCodenameResponse.getCodename();       updateProfile(claimCodenameResponse.getUpdatedPlayer());     }   }  catch (  InvalidProtocolBufferException e) {     throw new RemoteServerException(e);   }   if (updatedCodename != null) {     markTutorial(TutorialStateOuterClass.TutorialState.NAME_SELECTION);     final GetPlayerMessage getPlayerReqMsg=GetPlayerMessage.newBuilder().setPlayerLocale(playerLocale.getPlayerLocale()).build();     requests=CommonRequest.fillRequest(new ServerRequest(RequestType.GET_PLAYER,getPlayerReqMsg),api);     api.getRequestHandler().sendServerRequests(requests);     try {       updateProfile(GetPlayerResponse.parseFrom(requests[0].getData()));       api.getInventories().updateInventories(GetInventoryResponse.parseFrom(requests[2].getData()));       api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(requests[4].getData()));     }  catch (    InvalidProtocolBufferException e) {       throw new RemoteServerException(e);     }   } } "
"public void init(){ synchronized (this) {     if (items == null) {       items=new TreeMap<ItemSlot,ItemTemplate>();       for (      ItemTemplate item : v.items) {         ItemSlot[] itemSlots=ItemSlot.getSlotsFor(item.getItemSlot());         for (        ItemSlot itemSlot : itemSlots) {           if (items.get(itemSlot) == null) {             items.put(itemSlot,item);             mask|=itemSlot.getSlotIdMask();             break;           }         }       }     }     v=null;   } } "
"private void init(AttributeSet attrs){   if (attrs != null) {     Resources resources=getResources();     TypedArray typedArray=context.obtainStyledAttributes(attrs,com.luseen.spacenavigation.R.styleable.SpaceNavigationView);     spaceItemIconSize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_default_size));     spaceItemIconOnlySize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_only_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_only_size));     spaceItemTextSize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_text_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_text_default_size));     spaceItemIconOnlySize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_only_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_only_size));     spaceBackgroundColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_background_color,resources.getColor(com.luseen.spacenavigation.R.color.space_default_color));     centreButtonColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_centre_button_color,resources.getColor(com.luseen.spacenavigation.R.color.centre_button_color));     activeSpaceItemColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_active_item_color,resources.getColor(com.luseen.spacenavigation.R.color.space_white));     inActiveSpaceItemColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_inactive_item_color,resources.getColor(com.luseen.spacenavigation.R.color.default_inactive_item_color));     centreButtonIcon=typedArray.getResourceId(R.styleable.SpaceNavigationView_centre_button_icon,R.drawable.near_me);     centreButtonIconColor=typedArray.getColor(R.styleable.SpaceNavigationView_centre_button_icon_color,resources.getColor(R.color.space_white));     typedArray.recycle();   } } "
"public boolean isMinimumScaleUpdated(){   return minimumScaleUpdated; } "
"public static long multiplyExact(final long a,final long b){   if (((b > 0l) && (a > Long.MAX_VALUE / b || a < Long.MIN_VALUE / b)) || ((b < -1l) && (a > Long.MIN_VALUE / b || a < Long.MAX_VALUE / b)) || ((b == -1l) && (a == Long.MIN_VALUE))) {     throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_MULTIPLICATION,a,b);   }   return a * b; } "
"public static void main(String[] sArgs){   TAC2008UpdateSummarizationFileSet t=new TAC2008UpdateSummarizationFileSet(\"/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/\");   t.createSets();   System.err.println(\"Training set:\");   System.err.println(utils.printIterable(t.getTrainingSet(),\"\\n\"));   System.err.println(\"Training set:\");   System.err.println(utils.printIterable(t.getTestSet(),\"\\n\"));   System.err.println(\"Per category:\");   for (  String sCategory : (List<String>)t.getCategories()) {     System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),\"\\n\"));   }   String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);   String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();   System.out.println(t.loadFile(sFile)); } "
