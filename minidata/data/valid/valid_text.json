"public void update(Graphics g,JComponent c){   paint(g,c); } "
"public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_wchar\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     $self.insert_wchar(value);   }   finally {     _servant_postinvoke($so);   } } "
"static boolean isConfigurationAcceptable(JEBackendCfg cfg,List<LocalizableMessage> unacceptableReasons,ServerContext context){   if (context != null) {     MemoryQuota memQuota=context.getMemoryQuota();     if (cfg.getDBCacheSize() > 0 && !memQuota.isMemoryAvailable(cfg.getDBCacheSize())) {       unacceptableReasons.add(ERR_BACKEND_CONFIG_CACHE_SIZE_GREATER_THAN_JVM_HEAP.get(cfg.getDBCacheSize(),memQuota.getAvailableMemory()));       return false;     }  else     if (!memQuota.isMemoryAvailable(memQuota.memPercentToBytes(cfg.getDBCachePercent()))) {       unacceptableReasons.add(ERR_BACKEND_CONFIG_CACHE_PERCENT_GREATER_THAN_JVM_HEAP.get(cfg.getDBCachePercent(),memQuota.memBytesToPercent(memQuota.getAvailableMemory())));       return false;     }   }   return checkConfigurationDirectories(cfg,unacceptableReasons); } "
"public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight){   final BitmapFactory.Options options=new BitmapFactory.Options();   options.inJustDecodeBounds=true;   BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);   options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);   options.inJustDecodeBounds=false;   return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options); } "
"public NoSuchProviderException(){   super(); } "
"private void fetchRegions(){   final List<UIComponent> childeren=getChildren();   for (  final UIComponent uiComponent : childeren) {     if (uiComponent instanceof UINorth) {       this.north=(UIAbstractRegion)uiComponent;     }     if (uiComponent instanceof UISouth) {       this.south=(UIAbstractRegion)uiComponent;     }     if (uiComponent instanceof UICenter) {       this.center=(UIAbstractRegion)uiComponent;       this.colspan++;     }     if (uiComponent instanceof UIStart) {       this.start=(UIAbstractRegion)uiComponent;       this.colspan++;     }     if (uiComponent instanceof UIEnd) {       this.end=(UIAbstractRegion)uiComponent;       this.colspan++;     }   } } "
"void handleError(VolleyError error){   String errorMessage=null;   try {     errorMessage=new String(error.networkResponse.data,\"UTF-8\");     JSONObject jsonObject=new JSONObject(errorMessage);     JSONArray errorArray=new JSONArray(jsonObject.get(\"errors\").toString());     JSONObject firstError=new JSONObject(errorArray.get(0).toString());     Log.d(\"Error\",firstError.get(\"message\").toString());   }  catch (  Exception e) {     e.printStackTrace();   } } "
"public static AdditionalLogItem keyOnly(final Class<?> source,final String key){   Reject.ifNull(source,key);   return new AdditionalLogItem(source,key,null,false); } "
"public DefaultTableModel(int rowCount,int columnCount){   this(newVector(columnCount),rowCount); } "
"protected int findSeparator(){   int bufferPos=this.head;   int tablePos=0;   while (bufferPos < this.tail) {     while (tablePos >= 0 && buffer[bufferPos] != boundary[tablePos]) {       tablePos=boundaryTable[tablePos];     }     bufferPos++;     tablePos++;     if (tablePos == boundaryLength) {       return bufferPos - boundaryLength;     }   }   return -1; } "
"public DynamicGroup(CreationTemplate template,AttrSet attrSet,Guid baseGuid,String filter,int scope) throws UMSException {   super(template,attrSet);   try {     setUrl(baseGuid,Filter.valueOf(filter),SearchScope.valueOf(scope));   }  catch (  Exception e) {     debug.error(\"DynamicGroup : Exception : \" + e.getMessage());   } } "
"public static void main(String[] args){   int exitCode=main(args,System.out,System.err);   if (exitCode != ReturnCode.SUCCESS.get()) {     System.exit(filterExitCode(exitCode));   } } "
"public boolean canAssignService(String realmName,String idType){   boolean can=false;   try {     AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realmName);     Set allowedOperations=repo.getAllowedIdOperations(IdUtils.getType(idType));     can=allowedOperations.contains(IdOperation.SERVICE);   }  catch (  IdRepoException e) {     debug.warning(\"EntitiesModelImpl.canAssignService\",e);   } catch (  SSOException e) {     debug.warning(\"EntitiesModelImpl.canAssignService\",e);   }   return can; } "
"public static Response processAttributeQuery(AttributeQuery attrQuery,HttpServletRequest request,HttpServletResponse response,String attrAuthorityEntityID,String realm,String attrQueryProfileAlias) throws SAML2Exception {   AttributeAuthorityMapper attrAuthorityMapper=getAttributeAuthorityMapper(realm,attrAuthorityEntityID,attrQueryProfileAlias);   String attrQueryProfile=AttributeQueryUtil.getAttributeQueryProfile(attrQueryProfileAlias);   try {     attrAuthorityMapper.authenticateRequester(request,response,attrQuery,attrAuthorityEntityID,realm);   }  catch (  SAML2Exception se) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"AttributeQueryUtil.\" + \"processAttributeQuery: \",se);     }     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,se.getMessage(),null);   }   try {     attrAuthorityMapper.validateAttributeQuery(request,response,attrQuery,attrAuthorityEntityID,realm);   }  catch (  SAML2Exception se) {     SAML2Utils.debug.error(\"AttributeQueryUtil.processAttributeQuery:\",se);     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,se.getMessage(),null);   }   Issuer issuer=attrQuery.getIssuer();   String requesterEntityID=issuer.getValue();   AttributeAuthorityDescriptorElement aad=null;   try {     aad=metaManager.getAttributeAuthorityDescriptor(realm,attrAuthorityEntityID);   }  catch (  SAML2MetaException sme) {     SAML2Utils.debug.error(\"AttributeQueryUtil.processAttributeQuery:\",sme);     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,SAML2Utils.bundle.getString(\"metaDataError\"),null);   }   if (aad == null) {     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,null,SAML2Utils.bundle.getString(\"attrAuthorityNotFound\"),null);   }   Object identity=null;   try {     identity=attrAuthorityMapper.getIdentity(request,response,attrQuery,attrAuthorityEntityID,realm);   }  catch (  SAML2Exception se) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"AttributeQueryUtil.\" + \"processAttributeQuery: \",se);     }     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,se.getMessage(),null);   }   if (identity == null) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"AttributeQueryUtil.\" + \"processAttributeQuery: unable to find identity.\");     }     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,null,null);   }   List desiredAttrs=(List)request.getAttribute(\"AttributeQueryUtil-desiredAttrs\");   if (desiredAttrs == null) {     desiredAttrs=attrQuery.getAttributes();   }   try {     desiredAttrs=verifyDesiredAttributes(aad.getAttribute(),desiredAttrs);   }  catch (  SAML2Exception se) {     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.REQUESTER,SAML2Constants.INVALID_ATTR_NAME_OR_VALUE,null,null);   }   List attributes=attrAuthorityMapper.getAttributes(identity,attrQuery,attrAuthorityEntityID,realm);   if (request.getAttribute(\"AttributeQueryUtil-storeAllAttributes\") != null) {     request.setAttribute(\"AttributeQueryUtil-allAttributes\",attributes);   }   attributes=filterAttributes(attributes,desiredAttrs);   ProtocolFactory protocolFactory=ProtocolFactory.getInstance();   Response samlResp=protocolFactory.createResponse();   List assertionList=new ArrayList();   Assertion assertion=null;   try {     assertion=getAssertion(attrQuery,attrAuthorityEntityID,requesterEntityID,realm,attrQueryProfileAlias,attributes);   }  catch (  SAML2Exception se) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"AttributeQueryUtil.processAttributeQuery:\",se);     }     return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,se.getMessage(),null);   }   EncryptedID encryptedID=attrQuery.getSubject().getEncryptedID();   if (encryptedID != null) {     EncryptedAssertion encryptedAssertion=null;     try {       signAssertion(assertion,realm,attrAuthorityEntityID,false);       encryptedAssertion=encryptAssertion(assertion,encryptedID,attrAuthorityEntityID,requesterEntityID,realm,attrQueryProfileAlias);     }  catch (    SAML2Exception se) {       if (SAML2Utils.debug.messageEnabled()) {         SAML2Utils.debug.message(\"AttributeQueryUtil.processAttributeQuery:\",se);       }       return SAML2Utils.getErrorResponse(attrQuery,SAML2Constants.RESPONDER,null,se.getMessage(),null);     }     assertionList.add(encryptedAssertion);     samlResp.setEncryptedAssertion(assertionList);   }  else {     assertionList.add(assertion);     samlResp.setAssertion(assertionList);   }   samlResp.setID(SAML2Utils.generateID());   samlResp.setInResponseTo(attrQuery.getID());   samlResp.setVersion(SAML2Constants.VERSION_2_0);   samlResp.setIssueInstant(newDate());   Status status=protocolFactory.createStatus();   StatusCode statusCode=protocolFactory.createStatusCode();   statusCode.setValue(SAML2Constants.SUCCESS);   status.setStatusCode(statusCode);   samlResp.setStatus(status);   Issuer respIssuer=AssertionFactory.getInstance().createIssuer();   respIssuer.setValue(attrAuthorityEntityID);   samlResp.setIssuer(respIssuer);   signResponse(samlResp,attrAuthorityEntityID,realm,false);   return samlResp; } "
"public boolean equals(ExtendedType other){   try {     return other.nodetype == this.nodetype && other.localName.equals(this.localName) && other.namespace.equals(this.namespace);   }  catch (  NullPointerException e) {     return false;   } } "
"@Deprecated public ItemStack(final int type,final int amount){   this(type,amount,(short)0); } "
"private void assertNodesAreEquivalent(File expected,Node actual) throws ParserConfigurationException, IOException, SAXException, XmlPullParserException {   Node expectedNode=fileToResultNode(expected);   String expectedString=nodeToNormalizedString(expectedNode);   String actualString=nodeToNormalizedString(actual);   Assert.assertEquals(\"Expected XML to match file \" + expected,expectedString,actualString); } "
"public String toString(){   StringBuilder sb=new StringBuilder();   sb.append(\"Plugin name: \").append(getName());   sb.append(\"\\n\\tAttributes: \").append(getAttributes()).append(\"\\n\");   return (sb.toString()); } "
"public boolean contains(Point p){   Rectangle r=getBounds();   if (r != null) {     return r.contains(p.x,p.y);   }  else {     return false;   } } "
"@Override public boolean isAsyncStarted(){   return request.isAsyncStarted(); } "
"public static boolean jwtHasAuthorizedPartyClaim(JwtClaimsSet jwtClaims) throws AuthLoginException {   String authorizedPartyClaim=(String)jwtClaims.getClaim(AUTHORIZED_PARTY_CLAIM_KEY);   return (authorizedPartyClaim != null && !authorizedPartyClaim.isEmpty()); } "
"@Override public int process(Callback[] callbacks,int state) throws LoginException {   return authLoginModule.process(callbacks,state); } "
"protected Type(String name){   this.name=name; } "
"private void refreshServiceRoute(int type,String svcName,String svcVersion){   try { switch (type) { case SMSObjectListener.DELETE:       if (serviceRoutes.containsKey(svcName)) {         removeService(svcName);       }     break; case SMSObjectListener.ADD:   if (!serviceRoutes.containsKey(svcName)) {     serviceRoutes.put(svcName,addService(getServiceManager(),svcName,svcVersion));   } break; case SMSObjectListener.MODIFY: try { write.lock(); removeService(svcName); serviceRoutes.put(svcName,addService(getServiceManager(),svcName,svcVersion)); }   finally { write.unlock(); } break; default : throw new IllegalArgumentException(\"Unknown modification type: \" + type); } }  catch (SSOException|SMSException e) { debug.error(\"Could not update SMS REST services for change to \" + svcName,e); } } "
"public StatusCodeImpl(Element element) throws SAML2Exception {   parseElement(element); } "
"protected Object readResolve() throws ObjectStreamException {   return resolvedDeserializedProfile; } "
"public void printStackTrace(){   printStackTrace(System.err); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdatareplacedataend.class,args); } "
"synchronized void removeUnusedSets(){   attributesPool.size(); } "
"public ServerState duplicate(){   final ServerState newState=new ServerState();   newState.serverIdToCSN.putAll(serverIdToCSN);   return newState; } "
"public String toStringImpl(){   return latCodes; } "
"public Future<Long> completeCount(String type){   Future<Long> future=Future.future();   jobService.completeCount(type,future.completer());   return future; } "
"public static final <V>V fromJson(Reader reader,Class<V> type){   return GSON.fromJson(reader,type); } "
"public static String constructUserFilter(SSOToken token,String userRDNAttrName,String userName,boolean aliasEnabled) throws SSOException {   StringBuilder userFilter=new StringBuilder();   if (aliasEnabled) {     String principalsString=token.getProperty(\"Principals\");     if (principalsString != null) {       StringTokenizer st=new StringTokenizer(principalsString,\"|\");       while (st.hasMoreTokens()) {         String principalName=(String)st.nextToken();         DN ldapDN=DN.valueOf(principalName);         if (LDAPUtils.isDN(principalName)) {           String userID=LDAPUtils.rdnValueFromDn(ldapDN);           if (userID == null || userID.isEmpty()) {             continue;           }           if (!userID.equalsIgnoreCase(userName)) {             userFilter.append(\"(\").append(userRDNAttrName).append(\"=\").append(userID).append(\")\");           }         }       }     }   }   if (userFilter.length() == 0) {     userFilter.append(\"(\").append(userRDNAttrName).append(\"=\").append(userName).append(\")\");   }  else {     userFilter.insert(0,\"(|\");     userFilter.append(\"(\").append(userRDNAttrName).append(\"=\").append(userName).append(\"))\");   }   if (debug.messageEnabled()) {     debug.message(\"PolicyUtils.constructUserFilter(): filter: \" + userFilter.toString());   }   return userFilter.toString(); } "
"public static void createDestinationFolder(String path){   File fpath=new File(path);   fpath.mkdirs(); } "
"public void onEventMainThread(Message msg){   String join_insert_type;   String meetingId; switch (EventType.values()[msg.what]) { case MSG_ININT_SUCCESS:     if (mDebug) {       Log.i(TAG,\"MSG_ININT_SUCCESS\");     }   mSign=TeamMeetingApp.getmSelfData().getAuthorization(); mNetWork.getRoomLists(mSign,1 + \"\",20 + \"\"); chatMessageInint(); break; case MSG_ININT_FAILED: if (mDebug) { Log.e(TAG,\"MSG_ININT_FAILED\"); } break; case MSG_SIGNOUT_SUCCESS: if (mDebug) { Log.e(TAG,\"MSG_SIGNOUT_SUCCESS\"); } finish(); System.exit(0); break; case MSG_SIGNOUT_FAILED: if (mDebug) { Log.e(TAG,\"MSG_SIGNOUT_FAILED\"); } break; case MSG_GET_ROOM_LIST_SUCCESS: if (mDebug) { Log.e(TAG,\"MSG_GET_ROOM_LIST_SUCCESS\"); } interfacejump(msg); break; case MSG_GET_ROOM_LIST_FAILED: if (mDebug) { Log.e(TAG,\"MSG_GET_ROOM_LIST_FAILED\"); } break; case MSG_NET_WORK_TYPE: if (mDebug) { Log.e(TAG,\"MSG_NET_WORK_TYPE\"); } int type=msg.getData().getInt(\"net_type\"); netWorkTypeStart(type); break; case MSG_RESPONS_ESTR_NULl: if (mDebug) { Log.e(TAG,\"MSG_RESPONS_ESTR_NULl\"); } mNetErrorSweetAlertDialog.show(); break; case MSG_GET_MEETING_INFO_SUCCESS: if (mDebug) { Log.e(TAG,\"MSG_GET_MEETING_INFO_SUCCESS \"); } if (msg.getData().getString(JoinActType.JOIN_TYPE).equals(JoinActType.JOIN_URL_ACTVITY)) { getMeetingInfoSuccess(msg); } break; default : break; } } "
"public CipherParameters generateDerivedParameters(int keySize,int ivSize){   keySize=keySize / 8;   ivSize=ivSize / 8;   if ((keySize + ivSize) > digest.getDigestSize()) {     throw new IllegalArgumentException(\"Can't generate a derived key \" + (keySize + ivSize) + \" bytes long.\");   }   byte[] dKey=generateDerivedKey();   return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize); } "
"protected boolean isError(final int code){ switch (code) { case HTTP_BAD_REQUEST: case HTTP_UNAUTHORIZED: case HTTP_FORBIDDEN: case HTTP_NOT_FOUND: case HTTP_CONFLICT: case HTTP_GONE: case HTTP_UNPROCESSABLE_ENTITY: case HTTP_INTERNAL_ERROR:     return true; default :   return false; } } "
"@Override public void onBackPressed(){   Log.d(TAG,\"begin FmRadioActivity.onBackPressed\");   if (mIsInRecordingMode) {     changeRecordingMode(false);     if (null == mService) {       Log.d(TAG,\"mService is null\");       return;     }     boolean isPlaying=mService.isPowerUp();     refreshImageButton(isPlaying);     refreshPopupMenuItem(isPlaying);     refreshActionMenuItem(isPlaying);     refreshActionMenuPower(true);     if (mService != null && !mService.isAntennaAvailable() && !FmRadioUtils.isFmShortAntennaSupport()) {       Log.w(TAG,\"Need to show no antenna dialog for plug out earphone in onPause state\");       dismissNoAntennaDialog();       showNoAntennaDialog();     }     return;   }   if (!mIsPlaying && (null != mService) && !mService.isPowerUping()) {     refreshImageButton(false);     refreshActionMenuItem(false);     refreshPopupMenuItem(false);     refreshActionMenuPower(false);     exitService();     return;   }   super.onBackPressed();   Log.d(TAG,\"end FmRadioActivity.onBackPressed\"); } "
"public final V accumulateAndGet(V x,BinaryOperator<V> accumulatorFunction){   V prev, next;   do {     prev=get();     next=accumulatorFunction.apply(prev,x);   }  while (!compareAndSet(prev,next));   return next; } "
"protected boolean isLog4JAvailable(){   return isLogLibraryAvailable(\"Log4J\",LOGGING_IMPL_LOG4J_LOGGER); } "
"public static boolean isFromECP(HttpServletRequest request){   PAOSHeader paosHeader=null;   try {     paosHeader=new PAOSHeader(request);   }  catch (  PAOSException pex) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"SPSSOFederate.initiateECPRequest:\" + \"no PAOS header\");     }     return false;   }   Map svcOpts=paosHeader.getServicesAndOptions();   if ((svcOpts == null) || (!svcOpts.containsKey(SAML2Constants.PAOS_ECP_SERVICE))) {     if (SAML2Utils.debug.messageEnabled()) {       SAML2Utils.debug.message(\"SPSSOFederate.initiateECPRequest:\" + \"PAOS header doesn't contain ECP service\");     }     return false;   }   String acceptHeader=request.getHeader(\"Accept\");   if (acceptHeader == null) {     return false;   }   return (acceptHeader.indexOf(PAOSConstants.PAOS_MIME_TYPE) != -1); } "
"private boolean checkNonBlockingWrite(){   boolean nonBlocking=!ob.isBlocking();   if (nonBlocking && !ob.isReady()) {     throw new IllegalStateException(sm.getString(\"coyoteOutputStream.nbNotready\"));   }   return nonBlocking; } "
"public void comment(char ch[],int start,int length) throws SAXException {   if (m_insideDTD)   return;   charactersFlush();   int exName=m_expandedNameTable.getExpandedTypeID(DTM.COMMENT_NODE);   int dataIndex=m_valuesOrPrefixes.stringToIndex(new String(ch,start,length));   m_previous=addNode(DTM.COMMENT_NODE,exName,m_parents.peek(),m_previous,dataIndex,false); } "
"private Object lock(){   Document document=getDocument();   if (document instanceof AbstractDocument) {     ((AbstractDocument)document).readLock();     return document;   }   return null; } "
"public void retrieveStore(String sellerId,Handler<AsyncResult<Store>> resultHandler){   delegate.retrieveStore(sellerId,resultHandler); } "
"public void removeOperations(Operation operation,Object token){   if (isRunning) {     if (operationHandlerThreadHandler == null)     return;     operationHandlerThreadHandler.removeCallbacks(new AndroidOperation(this,operation),token);   }  else {     operationQueue.remove(new AndroidOperation(this,operation,AndroidOperation.Type.NORMAL,token,0));   } } "
"@Override public int hashCode(){   return dateTime.hashCode() ^ offset.hashCode() ^ Integer.rotateLeft(zone.hashCode(),3); } "
"protected void didAdjustTree(){ } "
"public boolean add(E e){   final ReentrantLock lock=this.lock;   lock.lock();   try {     Object[] elements=getArray();     int len=elements.length;     Object[] newElements=Arrays.copyOf(elements,len + 1);     newElements[len]=e;     setArray(newElements);     return true;   }   finally {     lock.unlock();   } } "
"public void paintCode(){   int maxErr, lenErr, tot, pad;   if ((options & PDF417_USE_RAW_CODEWORDS) != 0) {     if (lenCodewords > MAX_DATA_CODEWORDS || lenCodewords < 1 || lenCodewords != codewords[0]) {       throw new PdfException(PdfException.InvalidCodewordSize);     }   }  else {     if (code == null)     throw new PdfException(PdfException.TextCannotBeNull);     if (code.length > ABSOLUTE_MAX_TEXT_SIZE) {       throw new PdfException(PdfException.TextIsTooBig);     }     segmentList=new SegmentList();     breakString();     assemble();     segmentList=null;     codewords[0]=lenCodewords=cwPtr;   }   maxErr=maxPossibleErrorLevel(MAX_DATA_CODEWORDS + 2 - lenCodewords);   if ((options & PDF417_USE_ERROR_LEVEL) == 0) {     if (lenCodewords < 41)     errorLevel=2;  else     if (lenCodewords < 161)     errorLevel=3;  else     if (lenCodewords < 321)     errorLevel=4;  else     errorLevel=5;   }   if (errorLevel < 0)   errorLevel=0;  else   if (errorLevel > maxErr)   errorLevel=maxErr;   if (codeColumns < 1)   codeColumns=1;  else   if (codeColumns > 30)   codeColumns=30;   if (codeRows < 3)   codeRows=3;  else   if (codeRows > 90)   codeRows=90;   lenErr=2 << errorLevel;   boolean fixedColumn=(options & PDF417_FIXED_ROWS) == 0;   boolean skipRowColAdjust=false;   tot=lenCodewords + lenErr;   if ((options & PDF417_FIXED_RECTANGLE) != 0) {     tot=codeColumns * codeRows;     if (tot > MAX_DATA_CODEWORDS + 2) {       tot=getMaxSquare();     }     if (tot < lenCodewords + lenErr)     tot=lenCodewords + lenErr;  else     skipRowColAdjust=true;   }  else   if ((options & (PDF417_FIXED_COLUMNS | PDF417_FIXED_ROWS)) == 0) {     double c, b;     fixedColumn=true;     if (aspectRatio < 0.001)     aspectRatio=0.001f;  else     if (aspectRatio > 1000)     aspectRatio=1000;     b=73 * aspectRatio - 4;     c=(-b + Math.sqrt(b * b + 4 * 17 * aspectRatio* (lenCodewords + lenErr)* yHeight)) / (2 * 17 * aspectRatio);     codeColumns=(int)(c + 0.5);     if (codeColumns < 1)     codeColumns=1;  else     if (codeColumns > 30)     codeColumns=30;   }   if (!skipRowColAdjust) {     if (fixedColumn) {       codeRows=(tot - 1) / codeColumns + 1;       if (codeRows < 3)       codeRows=3;  else       if (codeRows > 90) {         codeRows=90;         codeColumns=(tot - 1) / 90 + 1;       }     }  else {       codeColumns=(tot - 1) / codeRows + 1;       if (codeColumns > 30) {         codeColumns=30;         codeRows=(tot - 1) / 30 + 1;       }     }     tot=codeRows * codeColumns;   }   if (tot > MAX_DATA_CODEWORDS + 2) {     tot=getMaxSquare();   }   errorLevel=maxPossibleErrorLevel(tot - lenCodewords);   lenErr=2 << errorLevel;   pad=tot - lenErr - lenCodewords;   if ((options & PDF417_USE_MACRO) != 0) {     System.arraycopy(codewords,macroIndex,codewords,macroIndex + pad,pad);     cwPtr=lenCodewords + pad;     while (pad-- != 0)     codewords[macroIndex++]=TEXT_MODE;   }  else {     cwPtr=lenCodewords;     while (pad-- != 0)     codewords[cwPtr++]=TEXT_MODE;   }   codewords[0]=lenCodewords=cwPtr;   calculateErrorCorrection(lenCodewords);   lenCodewords=tot;   outPaintCode(); } "
"void refresh(SMSEntry e){   if (e.attrSet != null) {     attrSet=SMSUtils.copyAttributes(e.attrSet);   }  else {     attrSet=null;   }   newEntry=e.newEntry;   modSet=null; } "
"public void sendHeaders(){   action(ActionCode.COMMIT,this);   setCommitted(true); } "
"protected void Expr() throws javax.xml.transform.TransformerException {   OrExpr(); } "
"public static void deregisterAlertHandler(AlertHandler<?> alertHandler){   directoryServer.alertHandlers.remove(alertHandler); } "
"protected final AttributeDescription loadAttribute(final byte[] encodedAttribute,final String attributeName,final Collection<String> attributeOptions){   final int id=decodeId(encodedAttribute);   return loadAttributeToMaps(id,attributeName,attributeOptions,getMappings()); } "
"public static TCKind from_int(int i){ switch (i) { case _tk_null:     return tk_null; case _tk_void:   return tk_void; case _tk_short: return tk_short; case _tk_long: return tk_long; case _tk_ushort: return tk_ushort; case _tk_ulong: return tk_ulong; case _tk_float: return tk_float; case _tk_double: return tk_double; case _tk_boolean: return tk_boolean; case _tk_char: return tk_char; case _tk_octet: return tk_octet; case _tk_any: return tk_any; case _tk_TypeCode: return tk_TypeCode; case _tk_Principal: return tk_Principal; case _tk_objref: return tk_objref; case _tk_struct: return tk_struct; case _tk_union: return tk_union; case _tk_enum: return tk_enum; case _tk_string: return tk_string; case _tk_sequence: return tk_sequence; case _tk_array: return tk_array; case _tk_alias: return tk_alias; case _tk_except: return tk_except; case _tk_longlong: return tk_longlong; case _tk_ulonglong: return tk_ulonglong; case _tk_longdouble: return tk_longdouble; case _tk_wchar: return tk_wchar; case _tk_wstring: return tk_wstring; case _tk_fixed: return tk_fixed; case _tk_value: return tk_value; case _tk_value_box: return tk_value_box; case _tk_native: return tk_native; case _tk_abstract_interface: return tk_abstract_interface; default : throw new org.omg.CORBA.BAD_PARAM(); } } "
"public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"private Set<TaskEntry> createRandomTasksList(){   Set<TaskEntry> list=new HashSet<>();   Random r=new Random();   int numberTasks=r.nextInt(10);   for (int i=0; i < numberTasks; i++) {     Entry csr=new LinkedHashMapEntry(\"cn=mytask\" + i + \",cn=tasks\");     String p=\"ds-task-\";     String[] attrNames={p + \"id\",p + \"class-name\",p + \"state\",p + \"scheduled-start-time\",p + \"actual-start-time\",p + \"completion-time\",p + \"dependency-id\",p + \"failed-dependency-action\",p + \"log-message\",p + \"notify-on-error\",p + \"notify-on-completion\",p + \"ds-recurring-task-schedule\"};     String[] values={\"ID\",\"TheClassName\",\"TheState\",\"Schedule Start Time\",\"Actual Start Time\",\"Completion Time\",\"Dependency ID\",\"Failed Dependency Action\",\"Log LocalizableMessage.                              Should be pretty long\" + \"Log LocalizableMessage.                              Should be pretty long\" + \"Log LocalizableMessage.                              Should be pretty long\"+ \"Log LocalizableMessage.                              Should be pretty long\"+ \"Log LocalizableMessage.                              Should be pretty long\",\"Notify On Error\",\"Notify On Completion\",\"Recurring Task Schedule\"};     for (int j=0; j < attrNames.length; j++) {       final LinkedAttribute attr=new LinkedAttribute(attrNames[j]);       attr.add(values[j] + r.nextInt());       csr.removeAttribute(attr.getAttributeDescription());       csr.addAttribute(attr);     }     try {       list.add(new TaskEntry(Converters.to(csr)));     }  catch (    Throwable t) {       logger.error(LocalizableMessage.raw(\"Error getting entry '\" + csr.getName() + \"': \"+ t,t));     }   }   return list; } "
"static boolean isEncoded(final ByteSequence value){   try {     decodeAuthPassword(value.toString());     return true;   }  catch (  final Exception e) {     return false;   } } "
"@AfterClass public static void cleanupClass(){   try {     Misc.deleteDirectorySimple(scenario.getRepositoryLocation());   }  catch (  Exception ignore) {     System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapsetnameditemthatexists.class,args); } "
"public static void requestPermission(AppCompatActivity activity,int requestId,String permission,boolean finishActivity){   if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {     PermissionUtils.RationaleDialog.newInstance(requestId,finishActivity).show(activity.getSupportFragmentManager(),\"dialog\");   }  else {     ActivityCompat.requestPermissions(activity,new String[]{permission},requestId);   } } "
"protected boolean restoreRequest(Request request,Session session) throws IOException {   SavedRequest saved=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);   session.removeNote(Constants.FORM_REQUEST_NOTE);   session.removeNote(Constants.FORM_PRINCIPAL_NOTE);   if (saved == null) {     return false;   }   byte[] buffer=new byte[4096];   InputStream is=request.createInputStream();   while (is.read(buffer) >= 0) {   }   request.clearCookies();   Iterator<Cookie> cookies=saved.getCookies();   while (cookies.hasNext()) {     request.addCookie(cookies.next());   }   String method=saved.getMethod();   MimeHeaders rmh=request.getCoyoteRequest().getMimeHeaders();   rmh.recycle();   boolean cachable=\"GET\".equalsIgnoreCase(method) || \"HEAD\".equalsIgnoreCase(method);   Iterator<String> names=saved.getHeaderNames();   while (names.hasNext()) {     String name=names.next();     if (!(\"If-Modified-Since\".equalsIgnoreCase(name) || (cachable && \"If-None-Match\".equalsIgnoreCase(name)))) {       Iterator<String> values=saved.getHeaderValues(name);       while (values.hasNext()) {         rmh.addValue(name).setString(values.next());       }     }   }   request.clearLocales();   Iterator<Locale> locales=saved.getLocales();   while (locales.hasNext()) {     request.addLocale(locales.next());   }   request.getCoyoteRequest().getParameters().recycle();   request.getCoyoteRequest().getParameters().setQueryStringEncoding(request.getConnector().getURIEncoding());   ByteChunk body=saved.getBody();   if (body != null) {     request.getCoyoteRequest().action(ActionCode.REQ_SET_BODY_REPLAY,body);     MessageBytes contentType=MessageBytes.newInstance();     String savedContentType=saved.getContentType();     if (savedContentType == null && \"POST\".equalsIgnoreCase(method)) {       savedContentType=\"application/x-www-form-urlencoded\";     }     contentType.setString(savedContentType);     request.getCoyoteRequest().setContentType(contentType);   }   request.getCoyoteRequest().method().setString(method);   return true; } "
"public String toXMLString() throws SAML2Exception {   return this.toXMLString(true,false); } "
"public static Home newInstance(){   return new Home(); } "
"public void removeTreeWillExpandListener(TreeWillExpandListener tel){   listenerList.remove(TreeWillExpandListener.class,tel); } "
"private byte[] randomSalt(){ synchronized (saltLock) {     int sb1=randomSaltIndex.nextInt(SALT_CHARS.length);     int sb2=randomSaltIndex.nextInt(SALT_CHARS.length);     return new byte[]{SALT_CHARS[sb1],SALT_CHARS[sb2]};   } } "
"void errorForDOM3(String msg,Object[] args) throws TransformerException {   String fmsg=XSLMessages.createXPATHMessage(msg,args);   ErrorListener ehandler=this.getErrorListener();   TransformerException te=new XPathStylesheetDOM3Exception(fmsg,m_sourceLocator);   if (null != ehandler) {     ehandler.fatalError(te);   }  else {     throw te;   } } "
"public boolean hasBOM(ByteOrderMark bom) throws IOException {   if (!boms.contains(bom)) {     throw new IllegalArgumentException(\"Stream not configure to detect \" + bom);   }   return byteOrderMark != null && getBOM().equals(bom); } "
"public DNLock tryReadLockEntry(final DN entry){   return acquireLockFromCache(entry).tryReadLockEntry(); } "
"public void testAddUnderlineSpan(){   mRichTextView.formatSpan(0,5,RichTextView.FormatType.UNDERLINE);   Object[] spans=mRichTextView.getSpans();   assertEquals(1,spans.length);   Object firstSpan=spans[0];   assertTrue(firstSpan instanceof UnderlineSpan); } "
"public static boolean isWritable(Object name){   return !(readOnlyContexts.containsKey(name)); } "
"public PdfCanvasParser(PdfTokenizer tokeniser){   this.tokeniser=tokeniser; } "
"public void addSessionListener(Session session,String url) throws SessionException {   sessionOperationStrategy.getOperation(session.getSessionID()).addSessionListener(session,url); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   NodeList emList;   Node employeeNode;   NodeList childList;   Node oldChild;   Node child;   String childName;   int length;   Node removedChild;   String removedName;   int nodeType;   java.util.List expected=new java.util.ArrayList();   expected.add(\"strong\");   expected.add(\"code\");   expected.add(\"sup\");   expected.add(\"var\");   expected.add(\"acronym\");   java.util.List actual=new java.util.ArrayList();   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"p\");   employeeNode=elementList.item(1);   childList=employeeNode.getChildNodes();   emList=((Element)employeeNode).getElementsByTagName(\"em\");   oldChild=emList.item(0);   removedChild=employeeNode.removeChild(oldChild);   removedName=removedChild.getNodeName();   assertEqualsAutoCase(\"element\",\"removedName\",\"em\",removedName);   for (int indexN10098=0; indexN10098 < childList.getLength(); indexN10098++) {     child=(Node)childList.item(indexN10098);     nodeType=(int)child.getNodeType();     childName=child.getNodeName();     if (equals(1,nodeType)) {       actual.add(childName);     }  else {       assertEquals(\"textNodeType\",3,nodeType);       assertEquals(\"textNodeName\",\"#text\",childName);     }   }   assertEqualsAutoCase(\"element\",\"childNames\",expected,actual); } "
"public void testSetBitPositiveInside4(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=50;   byte rBytes[]={1,-128,56,100,-2,-76,93,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.setBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public static boolean isJatoSessionRequestFromXUI(HttpServletRequest request){   return \"XUI\".equals(request.getParameter(\"requester\")); } "
"public SimpleDoc(Object printData,DocFlavor flavor,DocAttributeSet attributes){   if (flavor == null || printData == null) {     throw new IllegalArgumentException(\"null argument(s)\");   }   Class repClass=null;   try {     String className=flavor.getRepresentationClassName();     sun.reflect.misc.ReflectUtil.checkPackageAccess(className);     repClass=Class.forName(className,false,Thread.currentThread().getContextClassLoader());   }  catch (  Throwable e) {     throw new IllegalArgumentException(\"unknown representation class\");   }   if (!repClass.isInstance(printData)) {     throw new IllegalArgumentException(\"data is not of declared type\");   }   this.flavor=flavor;   if (attributes != null) {     this.attributes=AttributeSetUtilities.unmodifiableView(attributes);   }   this.printData=printData; } "
"public final int _exptype(int identity){   return m_exptype.elementAt(identity); } "
"public void addEdge(String parentId,String childId,String successorId){   edgeIds.add(successorId);   this.addToParentChildMap(parentId,childId); } "
"@Override public ShapeTile simplify(){   if (is_empty())   return ShapeTileSimplex.EMPTY;  else   if (is_IntBox())   return bounding_box();  else   if (is_IntOctagon())   return to_octagon();  else   return this; } "
"public FrameBodyTSOT(byte textEncoding,String text){   super(textEncoding,text); } "
"public String formatDateTime(final Date date,final String format){   final DateTime dateTime=new DateTime(date,chrono);   return format == null ? dateTime.toString() : dateTime.toString(format); } "
"public Cursor fetch(Long ruleActionParameterID){   if (ruleActionParameterID == null) {     throw new IllegalArgumentException(\"primary key null.\");   }   Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEACTIONPARAMETERID + \"=\" + ruleActionParameterID,null,null,null,null,null);   if (mCursor != null) {     mCursor.moveToFirst();   }   return mCursor; } "
"public ConfigParameters configurationFile(String file){   configurationFile=file;   return this; } "
"public void initializeNotificationHandlers() throws ConfigException, InitializationException {   RootCfg rootConfiguration=serverContext.getRootConfig();   rootConfiguration.addAccountStatusNotificationHandlerAddListener(this);   rootConfiguration.addAccountStatusNotificationHandlerDeleteListener(this);   for (  String handlerName : rootConfiguration.listAccountStatusNotificationHandlers()) {     AccountStatusNotificationHandlerCfg config=rootConfiguration.getAccountStatusNotificationHandler(handlerName);     config.addChangeListener(this);     if (config.isEnabled()) {       String className=config.getJavaClass();       loadAndInstallNotificationHandler(className,config);     }   } } "
"@AfterClass(alwaysRun=true) public void nullMemberVariablesAfterTest2(){   Class<?> cls=getClass();   while (DirectoryServerTestCase.class.isAssignableFrom(cls) && !DirectoryServerTestCase.class.equals(cls)) {     for (    Field field : cls.getDeclaredFields()) {       int modifiers=field.getModifiers();       Class<?> fieldClass=field.getType();       if (!fieldClass.isPrimitive() && !fieldClass.isEnum() && !Modifier.isFinal(modifiers)&& !Modifier.isStatic(modifiers)) {         field.setAccessible(true);         try {           field.set(this,null);         }  catch (        IllegalAccessException e) {         }       }     }     cls=cls.getSuperclass();   } } "
"protected void check(String name) throws Exception {   String[] params={name};   String[] signature={\"java.lang.String\"};   mBeanServer.invoke(oname,\"check\",params,signature); } "
"private float findEdgeSpan(View v,int axis,int fp,int p0,int p1){   int len=p1 - p0;   if (len <= 1) {     return v.getMinimumSpan(axis);   }  else {     int mid=p0 + len / 2;     boolean startEdge=mid > fp;     View f=startEdge ? v.createFragment(fp,mid) : v.createFragment(mid,fp);     boolean breakable=f.getBreakWeight(axis,0,f.getMaximumSpan(axis)) > View.BadBreakWeight;     if (breakable == startEdge) {       p1=mid;     }  else {       p0=mid;     }     return findEdgeSpan(f,axis,fp,p0,p1);   } } "
"public void display(SecurityOptions options) throws IllegalArgumentException {   if (options == null) {     throw new IllegalArgumentException(\"options parameter cannot be null.\");   }   UIFactory.setTextStyle(cbEnableSSL,UIFactory.TextStyle.SECONDARY_FIELD_VALID);   UIFactory.setTextStyle(lKeystorePath,UIFactory.TextStyle.SECONDARY_FIELD_VALID);   UIFactory.setTextStyle(lKeystorePwd,UIFactory.TextStyle.SECONDARY_FIELD_VALID);   securityOptions=options;   updateContents();   isCanceled=true;   setVisible(true); } "
"public ProcessBuilder redirectErrorStream(boolean redirectErrorStream){   this.redirectErrorStream=redirectErrorStream;   return this; } "
"protected Expression or(int opPos) throws TransformerException {   return compileOperation(new Or(),opPos); } "
"public ARCFOUREncryption(){ } "
"public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object params[]){   if (!isLoggable(level)) {     return;   }   LogRecord lr=new LogRecord(level,msg);   lr.setSourceClassName(sourceClass);   lr.setSourceMethodName(sourceMethod);   lr.setParameters(params);   doLog(lr); } "
"protected static void sendErrorPage(HttpServletRequest request,HttpServletResponse response,String providerAlias){   try {     String retURL=\"\";     String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);     if (metaManager != null) {       String hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);       String hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);       BaseConfigType hostedConfig=null;       if (hostedEntityId != null && IFSConstants.IDP.equalsIgnoreCase(hostedRole)) {         hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);       }  else       if (hostedEntityId != null && IFSConstants.SP.equalsIgnoreCase(hostedRole)) {         hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);       }       retURL=FSServiceUtils.getLogoutDonePageURL(request,hostedConfig,providerAlias);       if (retURL == null || retURL.length() < 1) {         FSServiceUtils.showErrorPage(response,FSServiceUtils.getErrorPageURL(request,hostedConfig,providerAlias),IFSConstants.LOGOUT_FAILED,IFSConstants.METADATA_ERROR);       }  else {         StringBuffer finalReturnURL=new StringBuffer();         finalReturnURL.append(retURL);         char delimiter;         if (retURL.indexOf(IFSConstants.QUESTION_MARK) < 0) {           delimiter=IFSConstants.QUESTION_MARK;         }  else {           delimiter=IFSConstants.AMPERSAND;         }         finalReturnURL.append(delimiter).append(IFSConstants.LOGOUT_STATUS).append(IFSConstants.EQUAL_TO).append(IFSConstants.LOGOUT_FAILURE);         response.sendRedirect(finalReturnURL.toString());       }       return;     }  else {       FSUtils.debug.error(\"Meta manager instance is null\");       response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(\"failedToReadDataStore\"));       return;     }   }  catch (  IOException ex) {     FSUtils.debug.error(\"FSSingleLogoutServlet: IOException caught:\",ex);     return;   } catch (  IDFFMetaException e) {     FSUtils.debug.error(\"FSSingleLogoutServlet:IDFFMetaException:\",e);     return;   } } "
"private void validateStatusReplicationOptions(LocalizableMessageBuilder buf){   if (quietArg.isPresent()) {     LocalizableMessage message=ERR_REPLICATION_STATUS_QUIET.get(STATUS_REPLICATION_SUBCMD_NAME,\"--\" + quietArg.getLongIdentifier());     addMessage(buf,message);   } } "
"public boolean isCancelable(){   TaskState state=getTaskState();   if (state != null) {     Task task=getTask();     return TaskState.isPending(state) || TaskState.isRecurring(state) || (TaskState.isRunning(state) && task != null && task.isInterruptable());   }   return false; } "
"Ser(byte type,Object object){   this.type=type;   this.object=object; } "
"@Override public void schemaChanged(String serviceName,String version){ } "
"public void testCase2(){   byte aBytes[]={1,2,3,4,5,6,7};   int aSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=BigInteger.ZERO;   try {     aNumber.divide(bNumber);     fail(\"ArithmeticException has not been caught\");   }  catch (  ArithmeticException e) {   } } "
"public void endPrefixMapping(String prefix) throws SAXException {   if (DEBUG)   System.out.println(\"TransformerHandlerImpl#endPrefixMapping: \" + prefix);   if (m_contentHandler != null) {     m_contentHandler.endPrefixMapping(prefix);   } } "
"private Node<K,V> findPredecessorOfLast(){   for (; ; ) {     for (Index<K,V> q=head; ; ) {       Index<K,V> d, r;       if ((r=q.right) != null) {         if (r.indexesDeletedNode()) {           q.unlink(r);           break;         }         if (r.node.next != null) {           q=r;           continue;         }       }       if ((d=q.down) != null)       q=d;  else       return q.node;     }   } } "
"public boolean canAcceptVariables(){   return false; } "
"@Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){   return _fooLocalService.dynamicQueryCount(dynamicQuery,projection); } "
"public void paintToggleButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public void rebind(org.omg.CosNaming.NameComponent[] n,org.omg.CORBA.Object obj) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {   org.omg.CORBA.portable.InputStream $in=null;   try {     org.omg.CORBA.portable.OutputStream $out=_request(\"rebind\",true);     org.omg.CosNaming.NameHelper.write($out,n);     org.omg.CORBA.ObjectHelper.write($out,obj);     $in=_invoke($out);     return;   }  catch (  org.omg.CORBA.portable.ApplicationException $ex) {     $in=$ex.getInputStream();     String _id=$ex.getId();     if (_id.equals(\"IDL:omg.org/CosNaming/NamingContext/NotFound:1.0\"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in);  else     if (_id.equals(\"IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0\"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in);  else     if (_id.equals(\"IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0\"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in);  else     throw new org.omg.CORBA.MARSHAL(_id);   } catch (  org.omg.CORBA.portable.RemarshalException $rm) {     rebind(n,obj);   }  finally {     _releaseReply($in);   } } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(\"GenericPrincipal[\");   sb.append(this.name);   sb.append(\"(\");   for (int i=0; i < roles.length; i++) {     sb.append(roles[i]).append(\",\");   }   sb.append(\")]\");   return sb.toString(); } "
"public boolean isUseDeltasEnabled(){   return useDeltas; } "
"@Deprecated public Operation(String op){   operation=op; } "
"public TypeConstraintException(String message,Throwable exception){   this(message,null,exception); } "
"public PlaSide negate(){   if (this == ON_THE_LEFT)   return ON_THE_RIGHT;  else   if (this == ON_THE_RIGHT)   return ON_THE_LEFT;  else   return this; } "
"public static void main(String[] args){   int exitCode=mainSearch(args,true,System.out,System.err);   if (exitCode != 0) {     System.exit(filterExitCode(exitCode));   } } "
"ManagedRole(String name) throws UMSException {   this(new AttrSet(new Attr(\"cn\",name))); } "
"public com.sun.identity.liberty.ws.disco.jaxb11.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb11.impl.ExtensionTypeImpl(); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefExternalURIElement createMustSupportRefExternalURIElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefExternalURIElementImpl(); } "
"public static String executeJavaCommand(String jarName,String className,String arguments) throws Exception {   StringBuffer output=new StringBuffer();   String javaHome=System.getProperty(JAVA_HOME);   if (javaHome == null)   throw new Exception(\"JAVA_HOME is not set.\" + \" Make sure Java is available on the m/c to \" + \"proceed further.\");   String javaExe=System.getProperty(JAVA_HOME) + FILE_SEP + \"bin\"+ FILE_SEP+ \"java\";   Debug.log(\"ExecuteCommand.executeJavaCommand(): JAVA_HOME = \" + javaExe + \" jarFile = \"+ jarName);   String[] commandArray={javaExe,CLASSPATH,jarName,className,arguments};   executeCommand(commandArray,null,output);   return (output != null) ? output.toString() : null; } "
"@Override public ValidationMessage[] validate(String prefix,String uri,PageData page){   System.out.println(\"---------- Prefix=\" + prefix + \" URI=\"+ uri+ \"----------\");   InputStream is=page.getInputStream();   while (true) {     try {       int ch=is.read();       if (ch < 0)       break;       System.out.print((char)ch);     }  catch (    IOException e) {       break;     }   }   System.out.println();   System.out.println(\"-----------------------------------------------\");   return (null); } "
"protected boolean removeDescendantSelectedPaths(TreePath path,boolean includePath){   TreePath[] toRemove=getDescendantSelectedPaths(path,includePath);   if (toRemove != null) {     getSelectionModel().removeSelectionPaths(toRemove);     return true;   }   return false; } "
"public final boolean contains(Object s){   for (int i=0; i < m_firstFree; i++) {     if (m_map[i] == s)     return true;   }   return false; } "
"public CHAPChallengeAttribute(byte[] octets){   super(octets);   str=new String(octets,2,octets.length - 2); } "
"public void addVertex(String label,List<DbDataContainer> attributes){   String insert=\"CREATE (: \" + label + \" {\";   insert=this.addValuesToStatement(insert,attributes);   insert+=\"})\";   this.transaction.run(insert); } "
"public void propertyChange(PropertyChangeEvent evt){   Object oldValue=evt.getOldValue();   Object newValue=evt.getNewValue();   if ((oldValue instanceof Document) || (newValue instanceof Document)) {     setDot(0);     if (oldValue != null) {       ((Document)oldValue).removeDocumentListener(this);     }     if (newValue != null) {       ((Document)newValue).addDocumentListener(this);     }   }  else   if (\"enabled\".equals(evt.getPropertyName())) {     Boolean enabled=(Boolean)evt.getNewValue();     if (component.isFocusOwner()) {       if (enabled == Boolean.TRUE) {         if (component.isEditable()) {           setVisible(true);         }         setSelectionVisible(true);       }  else {         setVisible(false);         setSelectionVisible(false);       }     }   }  else   if (\"caretWidth\".equals(evt.getPropertyName())) {     Integer newWidth=(Integer)evt.getNewValue();     if (newWidth != null) {       caretWidth=newWidth.intValue();     }  else {       caretWidth=-1;     }     repaint();   }  else   if (\"caretAspectRatio\".equals(evt.getPropertyName())) {     Number newRatio=(Number)evt.getNewValue();     if (newRatio != null) {       aspectRatio=newRatio.floatValue();     }  else {       aspectRatio=-1;     }     repaint();   } } "
"@Thunk Bitmap readFromDb(WidgetCacheKey key,Bitmap recycle,PreviewLoadTask loadTask){   Cursor cursor=null;   try {     cursor=mDb.getReadableDatabase().query(CacheDb.TABLE_NAME,new String[]{CacheDb.COLUMN_PREVIEW_BITMAP},CacheDb.COLUMN_COMPONENT + \" = ? AND \" + CacheDb.COLUMN_USER+ \" = ? AND \"+ CacheDb.COLUMN_SIZE+ \" = ?\",new String[]{key.componentName.flattenToString(),Long.toString(mUserManager.getSerialNumberForUser(key.user)),key.size},null,null,null);     if (loadTask.isCancelled()) {       return null;     }     if (cursor.moveToNext()) {       byte[] blob=cursor.getBlob(0);       BitmapFactory.Options opts=new BitmapFactory.Options();       opts.inBitmap=recycle;       try {         if (!loadTask.isCancelled()) {           return BitmapFactory.decodeByteArray(blob,0,blob.length,opts);         }       }  catch (      Exception e) {         return null;       }     }   }  catch (  SQLException e) {     Log.w(TAG,\"Error loading preview from DB\",e);   }  finally {     if (cursor != null) {       cursor.close();     }   }   return null; } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);   try {     if (reconstructPolicy()) {     }  else {       CachedPolicy cachedPolicy=getCachedPolicy();       PolicyModel model=(PolicyModel)getModel();       try {         model.replacePolicy(currentRealm,cachedPolicy.getPolicy());         setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"policy.modified.message\");         cachedPolicy.setPolicyModified(false);       }  catch (      AMConsoleException e) {         setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());       }     }     forwardTo();   }  catch (  AMConsoleException e) {     debug.warning(\"PolicyReferralEditViewBean.handleButton1Request\",e);     redirectToStartURL();   } } "
"public PdfSignatureBuildProperties(PdfDictionary dict){   super(dict); } "
"@Override public Future<Integer> write(ByteBuffer src){   return new FutureWrite(src); } "
"public PdfXObject addImage(ImageData image,Rectangle rect,boolean asInline){   return addImage(image,rect.getWidth(),0,0,rect.getHeight(),rect.getX(),rect.getY(),asInline); } "
"private boolean compareAndDecrementWorkerCount(int expect){   return ctl.compareAndSet(expect,expect - 1); } "
"@Override public int update(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException {   return cipher.update(inBuffer,outBuffer); } "
"public void deactivate(){   active=false; } "
"private boolean useLocalTrustStoreIfPossible(){   try {     if (InetAddress.getLocalHost().getHostName().equals(state.hostName) && secureArgsList.getAdminPortFromConfig() == portNumber) {       final String trustStoreFileAbsolute=secureArgsList.getTruststoreFileFromConfig();       if (trustStoreFileAbsolute != null) {         secureArgsList.getTrustStorePathArg().addValue(trustStoreFileAbsolute);         return true;       }     }   }  catch (  Exception ex) {   }   return false; } "
"public void write_abstract_interface(java.lang.Object obj){   throw new org.omg.CORBA.NO_IMPLEMENT(); } "
"public void testAlgorithmParameterGenerator12(){   if (!DSASupported) {     fail(validAlgName + \" algorithm is not supported\");     return;   }   SecureRandom random=new SecureRandom();   AlgorithmParameterSpec aps=null;   AlgorithmParameterGenerator[] apgs=createAPGen();   assertNotNull(\"AlgorithmParameterGenerator objects were not created\",apgs);   for (int i=0; i < apgs.length; i++) {     try {       apgs[i].init(aps);       fail(\"InvalidAlgorithmParameterException expected for null argument.\");     }  catch (    InvalidAlgorithmParameterException e) {     }     try {       apgs[i].init(aps,random);       fail(\"InvalidAlgorithmParameterException expected for null argument.\");     }  catch (    InvalidAlgorithmParameterException e) {     }   } } "
"public void loadAllPlugins() throws IOException {   File[] pluginsFiles=Photon.PLUGINS_DIR.listFiles(null);   if (!PLUGINS_CONFIG.exists()) {     PLUGINS_CONFIG.createNewFile();   }   TomlConfiguration config=new TomlConfiguration(PLUGINS_CONFIG);   Map<World,List<String>> worldPlugins=new HashMap<>(config.size());   List<String> serverPlugins=(List<String>)config.getOrDefault(\"server\",Collections.emptyList());   Server server=Photon.getServer();   Collection<World> serverWorlds=server.getWorlds();   for (  World world : serverWorlds) {     List<String> plugins=(List<String>)config.get(world.getName());     if (plugins != null) {       worldPlugins.put(world,plugins);     }   }   loadPlugins(pluginsFiles,worldPlugins,serverPlugins,serverWorlds); } "
"private void writeResults(List<Long> buckets) throws FileNotFoundException, UnsupportedEncodingException {   StringBuilder contentToWrite=new StringBuilder(bucketSize * 8);   for (  Long l : buckets) {     contentToWrite.append(l).append(DE);   }   Utils.writeFile(contentToWrite.toString(),bucketSize + \"bucketsFor\" + dataType.toString()+ \"withPruneFactor\"+ pruneFactor+ \"MaxSize\"+ bucketMax+ \".buckets\"); } "
"public static AssertionRequestControl newControl(final boolean isCritical,final Filter filter){   return new AssertionRequestControl(isCritical,filter); } "
"public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_short\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.insert_short(value);   }   finally {     _servant_postinvoke($so);   } } "
"public void postRegisterNameIdentifierSuccess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSNameRegistrationRequest regRequest,FSNameRegistrationResponse regResponse,String regProfile){   FSUtils.debug.message(\"In FSDefaultSPAdapter.postRegistrationNameIdentifierSuccess\"); } "
"public static <K,V>KeyedPooledObjectFactory<K,V> synchronizedKeyedPooledFactory(final KeyedPooledObjectFactory<K,V> keyedFactory){   return new SynchronizedKeyedPooledObjectFactory<>(keyedFactory); } "
"public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_ulong\",_opsClass);   DynEnumOperations $self=(DynEnumOperations)$so.servant;   try {     $self.insert_ulong(value);   }   finally {     _servant_postinvoke($so);   } } "
"public static Map checkPolicyAndHandleDirectives(String userDN,Message message,Collection results,Authorizer authorizer,SessionContext invoSession,String wscID,Object token){   DiscoUtils.debug.message(\"DiscoService.checkPolicyAndHandleDirectives\");   List offerings=new LinkedList();   List credentials=new LinkedList();   Map env=null;   Iterator k=results.iterator();   while (k.hasNext()) {     InsertEntryType entry=(InsertEntryType)k.next();     if (authorizer != null) {       if (env == null) {         env=new HashMap();         env.put(Authorizer.USER_ID,userDN);         env.put(Authorizer.AUTH_TYPE,message.getAuthenticationMechanism());         env.put(Authorizer.MESSAGE,message);       }       if (!authorizer.isAuthorized(message.getToken(),DiscoConstants.ACTION_LOOKUP,entry.getResourceOffering(),env)) {         DiscoUtils.debug.error(\"DiscoveryService.checkPolicyAndHan\" + \"dleDirectives: WSC is not authorized to do lookup\");         continue;       }     }     ResourceOffering current=null;     try {       current=new ResourceOffering(Utils.convertJAXBToElement(entry.getResourceOffering(),false));     }  catch (    Exception ex) {       DiscoUtils.debug.error(\"DiscoveryService.checkPolicyAndHandle\" + \"Directives:exception when constructing ResourceOffering:\",ex);       continue;     }     List directives=entry.getAny();     if ((directives == null) || directives.isEmpty()) {       DiscoUtils.debug.message(\"DiscoService: no directives.\");       offerings.add(current);     }  else {       DiscoUtils.debug.message(\"DiscoService: has directives.\");       handleDirectives(current,directives,userDN,message,invoSession,wscID,token,offerings,credentials);     }   }   Map returnMap=new HashMap();   returnMap.put(OFFERINGS,offerings);   returnMap.put(CREDENTIALS,credentials);   return returnMap; } "
"@Override public void bind(Name name,Object obj) throws NamingException {   bind(name,obj,false); } "
"public Tailer(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){   this(file,listener,delayMillis,end,false,bufSize); } "
"public void write(int b) throws IOException {   output.write(b);   bytesWritten++; } "
"public void onActivityResult(int requestCode,int resultCode,Intent data,FacebookDialog.Callback facebookDialogCallback){   Session session=Session.getActiveSession();   if (session != null) {     session.onActivityResult(activity,requestCode,resultCode,data);   }   if (LikeActionController.handleOnActivityResult(activity,requestCode,resultCode,data)) {     return;   }   handleFacebookDialogActivityResult(requestCode,resultCode,data,facebookDialogCallback); } "
"public void testConstrBI(){   String a=\"1231212478987482988429808779810457634781384756794987\";   BigInteger bA=new BigInteger(a);   BigDecimal aNumber=new BigDecimal(bA);   assertEquals(\"incorrect value\",bA,aNumber.unscaledValue());   assertEquals(\"incorrect scale\",0,aNumber.scale());   try {     new BigDecimal((BigInteger)null);     fail(\"No NullPointerException\");   }  catch (  NullPointerException e) {   } } "
"public void auditLoginFailure(LoginState loginState){   auditLoginFailure(loginState,findFailureReason(loginState)); } "
"public static Paint newBorderPaint(Context context){   final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());   final Paint borderPaint=new Paint();   borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));   borderPaint.setStrokeWidth(lineThicknessPx);   borderPaint.setStyle(Paint.Style.STROKE);   return borderPaint; } "
"public void testCase2(){   byte aBytes[]={1,2,3,4,5,6,7,1,2,3};   byte bBytes[]={10,20,30,40,50,60,70,10,20,30};   int aSign=-1;   int bSign=1;   byte rBytes[]={-11,-41,-101,54,-97,-52,-77,-41,44,-86,-106,-5,-29,85,116,51,-101,-121,-90};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.multiply(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public int length(){   return bytes.length; } "
"public int writeInto(final OutputStream out,final ContainerType contType) throws IOException {   final int size=getCurrentAsfSize(contType);   byte[] binaryData;   if (this.descriptorType == TYPE_BOOLEAN) {     binaryData=new byte[contType == ContainerType.EXTENDED_CONTENT ? 4 : 2];     binaryData[0]=(byte)(getBoolean() ? 1 : 0);   }  else {     binaryData=this.content;   }   if (contType != ContainerType.EXTENDED_CONTENT) {     Utils.writeUINT16(getLanguageIndex(),out);     Utils.writeUINT16(getStreamNumber(),out);   }   Utils.writeUINT16(getName().length() * 2 + 2,out);   if (contType == ContainerType.EXTENDED_CONTENT) {     out.write(Utils.getBytes(getName(),AsfHeader.ASF_CHARSET));     out.write(AsfHeader.ZERO_TERM);   }   final int type=getType();   Utils.writeUINT16(type,out);   int contentLen=binaryData.length;   if (TYPE_STRING == type) {     contentLen+=2;   }   if (contType == ContainerType.EXTENDED_CONTENT) {     Utils.writeUINT16(contentLen,out);   }  else {     Utils.writeUINT32(contentLen,out);   }   if (contType != ContainerType.EXTENDED_CONTENT) {     out.write(Utils.getBytes(getName(),AsfHeader.ASF_CHARSET));     out.write(AsfHeader.ZERO_TERM);   }   out.write(binaryData);   if (TYPE_STRING == type) {     out.write(AsfHeader.ZERO_TERM);   }   return size; } "
"public IllegalStateException(String s){   super(s); } "
"private void sched(TimerTask task,long time,long period){   if (time < 0)   throw new IllegalArgumentException(\"Illegal execution time.\");   if (Math.abs(period) > (Long.MAX_VALUE >> 1))   period>>=1; synchronized (queue) {     if (!thread.newTasksMayBeScheduled)     throw new IllegalStateException(\"Timer already cancelled.\"); synchronized (task.lock) {       if (task.state != TimerTask.VIRGIN)       throw new IllegalStateException(\"Task already scheduled or cancelled\");       task.nextExecutionTime=time;       task.period=period;       task.state=TimerTask.SCHEDULED;     }     queue.add(task);     if (queue.getMin() == task)     queue.notify();   } } "
"public static void access(Level level,String msgid,String[] data){   if ((logger != null) && logger.isAccessLoggable(level)) {     try {       logger.access(level,msgid,data,null);     }  catch (    LogException le) {       debug.error(\"LogUtil.access:\",le);     }   } } "
"private JButton createTitleButton(){   JButton button=new JButton();   button.setFocusPainted(false);   button.setFocusable(false);   button.setOpaque(true);   return button; } "
"public DirectoryException(ResultCode resultCode,LocalizableMessage errorMessage){   super(errorMessage);   this.resultCode=resultCode;   this.matchedDN=null;   this.referralURLs=null; } "
"public boolean isChannelIdEnabled(){   return channelIdEnabled; } "
"public int hashCode(){   int result=choiceLimits.length;   if (choiceFormats.length > 0) {     result^=choiceFormats[choiceFormats.length - 1].hashCode();   }   return result; } "
"public static boolean hasElementChild(Node node){   NodeList nl=node.getChildNodes();   Node child=null;   int length=nl.getLength();   for (int i=0; i < length; i++) {     child=nl.item(i);     if (child.getNodeType() == Node.ELEMENT_NODE) {       return true;     }   }   return false; } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String serverName=getStringOptionValue(IArgument.SERVER_NAME);   String[] params={serverName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_DELETE_SERVER\",params);     if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {       ServerConfiguration.deleteServerInstance(adminSSOToken,serverName);       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"delete-server-config-succeeded\"),(Object[])params));     }  else {       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"delete-server-config-dont-exists\"),(Object[])params));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_DELETE_SERVER\",params);   }  catch (  SSOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"DeleteServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_DELETE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={serverName,e.getMessage()};     debugError(\"DeleteServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_DELETE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public void testConstrStringWithExponentWithoutPoint3(){   String a=\"238768787678287e-214\";   int aScale=214;   BigInteger bA=new BigInteger(\"238768787678287\");   BigDecimal aNumber=new BigDecimal(a);   assertEquals(\"incorrect value\",bA,aNumber.unscaledValue());   assertEquals(\"incorrect scale\",aScale,aNumber.scale()); } "
"String formatRomanNumerals(int level,int num){   if (num < 10) {     return formatRomanDigit(level,num);   }  else {     return formatRomanNumerals(level + 1,num / 10) + formatRomanDigit(level,num % 10);   } } "
"private void applyPattern(String pattern,boolean localized){   char zeroDigit=PATTERN_ZERO_DIGIT;   char groupingSeparator=PATTERN_GROUPING_SEPARATOR;   char decimalSeparator=PATTERN_DECIMAL_SEPARATOR;   char percent=PATTERN_PERCENT;   char perMill=PATTERN_PER_MILLE;   char digit=PATTERN_DIGIT;   char separator=PATTERN_SEPARATOR;   String exponent=PATTERN_EXPONENT;   char minus=PATTERN_MINUS;   if (localized) {     zeroDigit=symbols.getZeroDigit();     groupingSeparator=symbols.getGroupingSeparator();     decimalSeparator=symbols.getDecimalSeparator();     percent=symbols.getPercent();     perMill=symbols.getPerMill();     digit=symbols.getDigit();     separator=symbols.getPatternSeparator();     exponent=symbols.getExponentSeparator();     minus=symbols.getMinusSign();   }   boolean gotNegative=false;   decimalSeparatorAlwaysShown=false;   isCurrencyFormat=false;   useExponentialNotation=false;   int phaseOneStart=0;   int phaseOneLength=0;   int start=0;   for (int j=1; j >= 0 && start < pattern.length(); --j) {     boolean inQuote=false;     StringBuffer prefix=new StringBuffer();     StringBuffer suffix=new StringBuffer();     int decimalPos=-1;     int multiplier=1;     int digitLeftCount=0, zeroDigitCount=0, digitRightCount=0;     byte groupingCount=-1;     int phase=0;     StringBuffer affix=prefix;     for (int pos=start; pos < pattern.length(); ++pos) {       char ch=pattern.charAt(pos); switch (phase) { case 0: case 2:         if (inQuote) {           if (ch == QUOTE) {             if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {               ++pos;               affix.append(\"''\");             }  else {               inQuote=false;             }             continue;           }         }  else {           if (ch == digit || ch == zeroDigit || ch == groupingSeparator || ch == decimalSeparator) {             phase=1;             if (j == 1) {               phaseOneStart=pos;             }             --pos;             continue;           }  else           if (ch == CURRENCY_SIGN) {             boolean doubled=(pos + 1) < pattern.length() && pattern.charAt(pos + 1) == CURRENCY_SIGN;             if (doubled) {               ++pos;             }             isCurrencyFormat=true;             affix.append(doubled ? \"'\\u00A4\\u00A4\" : \"'\\u00A4\");             continue;           }  else           if (ch == QUOTE) {             if (ch == QUOTE) {               if ((pos + 1) < pattern.length() && pattern.charAt(pos + 1) == QUOTE) {                 ++pos;                 affix.append(\"''\");               }  else {                 inQuote=true;               }               continue;             }           }  else           if (ch == separator) {             if (phase == 0 || j == 0) {               throw new IllegalArgumentException(\"Unquoted special character '\" + ch + \"' in pattern \\\"\"+ pattern+ '\"');             }             start=pos + 1;             pos=pattern.length();             continue;           }  else           if (ch == percent) {             if (multiplier != 1) {               throw new IllegalArgumentException(\"Too many percent/per mille characters in pattern \\\"\" + pattern + '\"');             }             multiplier=100;             affix.append(\"'%\");             continue;           }  else           if (ch == perMill) {             if (multiplier != 1) {               throw new IllegalArgumentException(\"Too many percent/per mille characters in pattern \\\"\" + pattern + '\"');             }             multiplier=1000;             affix.append(\"'\\u2030\");             continue;           }  else           if (ch == minus) {             affix.append(\"'-\");             continue;           }         }       affix.append(ch);     break; case 1:   if (j == 1) {     ++phaseOneLength;   }  else {     if (--phaseOneLength == 0) {       phase=2;       affix=suffix;     }     continue;   } if (ch == digit) {   if (zeroDigitCount > 0) {     ++digitRightCount;   }  else {     ++digitLeftCount;   }   if (groupingCount >= 0 && decimalPos < 0) {     ++groupingCount;   } }  else if (ch == zeroDigit) {   if (digitRightCount > 0) {     throw new IllegalArgumentException(\"Unexpected '0' in pattern \\\"\" + pattern + '\"');   }   ++zeroDigitCount;   if (groupingCount >= 0 && decimalPos < 0) {     ++groupingCount;   } }  else if (ch == groupingSeparator) {   groupingCount=0; }  else if (ch == decimalSeparator) {   if (decimalPos >= 0) {     throw new IllegalArgumentException(\"Multiple decimal separators in pattern \\\"\" + pattern + '\"');   }   decimalPos=digitLeftCount + zeroDigitCount + digitRightCount; }  else if (pattern.regionMatches(pos,exponent,0,exponent.length())) {   if (useExponentialNotation) {     throw new IllegalArgumentException(\"Multiple exponential \" + \"symbols in pattern \\\"\" + pattern + '\"');   }   useExponentialNotation=true;   minExponentDigits=0;   pos=pos + exponent.length();   while (pos < pattern.length() && pattern.charAt(pos) == zeroDigit) {     ++minExponentDigits;     ++phaseOneLength;     ++pos;   }   if ((digitLeftCount + zeroDigitCount) < 1 || minExponentDigits < 1) {     throw new IllegalArgumentException(\"Malformed exponential \" + \"pattern \\\"\" + pattern + '\"');   }   phase=2;   affix=suffix;   --pos;   continue; }  else {   phase=2;   affix=suffix;   --pos;   --phaseOneLength;   continue; } break; } } if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) { int n=decimalPos; if (n == 0) { ++n; } digitRightCount=digitLeftCount - n; digitLeftCount=n - 1; zeroDigitCount=1; } if ((decimalPos < 0 && digitRightCount > 0) || (decimalPos >= 0 && (decimalPos < digitLeftCount || decimalPos > (digitLeftCount + zeroDigitCount))) || groupingCount == 0 || inQuote) { throw new IllegalArgumentException(\"Malformed pattern \\\"\" + pattern + '\"'); } if (j == 1) { posPrefixPattern=prefix.toString(); posSuffixPattern=suffix.toString(); negPrefixPattern=posPrefixPattern; negSuffixPattern=posSuffixPattern; int digitTotalCount=digitLeftCount + zeroDigitCount + digitRightCount; int effectiveDecimalPos=decimalPos >= 0 ? decimalPos : digitTotalCount; setMinimumIntegerDigits(effectiveDecimalPos - digitLeftCount); setMaximumIntegerDigits(useExponentialNotation ? digitLeftCount + getMinimumIntegerDigits() : MAXIMUM_INTEGER_DIGITS); setMaximumFractionDigits(decimalPos >= 0 ? (digitTotalCount - decimalPos) : 0); setMinimumFractionDigits(decimalPos >= 0 ? (digitLeftCount + zeroDigitCount - decimalPos) : 0); setGroupingUsed(groupingCount > 0); this.groupingSize=(groupingCount > 0) ? groupingCount : 0; this.multiplier=multiplier; setDecimalSeparatorAlwaysShown(decimalPos == 0 || decimalPos == digitTotalCount); }  else { negPrefixPattern=prefix.toString(); negSuffixPattern=suffix.toString(); gotNegative=true; } } if (pattern.length() == 0) { posPrefixPattern=posSuffixPattern=\"\"; setMinimumIntegerDigits(0); setMaximumIntegerDigits(MAXIMUM_INTEGER_DIGITS); setMinimumFractionDigits(0); setMaximumFractionDigits(MAXIMUM_FRACTION_DIGITS); } if (!gotNegative || (negPrefixPattern.equals(posPrefixPattern) && negSuffixPattern.equals(posSuffixPattern))) { negSuffixPattern=posSuffixPattern; negPrefixPattern=\"'-\" + posPrefixPattern; } expandAffixes(); } "
"private ResourceResponse issuedTokenResource(String assertion){   return newResourceResponse(UUID.randomUUID().toString(),Hash.hash(assertion),json(object(field(AMSTSConstants.ISSUED_TOKEN,assertion)))); } "
"public void stopAnalysis(final MetricReference metricReference){   final TImeMetricInfo statInfo=metricStatisticsMap.get(metricReference);   if (statInfo.task != null) {     statInfo.task.cancel();     statInfo.task=null;   } } "
"@Override public int hashCode(){   int hash=7;   hash=79 * hash + (int)(Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));   hash=79 * hash + (int)(Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));   hash=79 * hash + (int)(Double.doubleToLongBits(this.z) ^ (Double.doubleToLongBits(this.z) >>> 32));   return hash; } "
"private static boolean canBeCandidate(Class<?>[] params,Object[] args){   for (int i=0; i < args.length; ++i) {     if (!params[i].isInstance(args[i]) && (params[i].isPrimitive() || args[i] != null)) {       Class<?> cls=params[i];       Object obj=args[i];       if (null == obj)       continue;       if (cls.equals(int.class)) {         if (!(obj instanceof Integer))         return false;       }  else       if (cls.equals(short.class)) {         if (!(obj instanceof Short))         return false;       }  else       if (cls.equals(byte.class)) {         if (!(obj instanceof Byte))         return false;       }  else       if (cls.equals(boolean.class)) {         if (!(obj instanceof Boolean))         return false;       }  else       if (cls.equals(char.class)) {         if (!(obj instanceof Character))         return false;       }  else       if (cls.equals(long.class)) {         if (!(obj instanceof Long))         return false;       }  else       if (cls.equals(double.class)) {         if (!(obj instanceof Double))         return false;       }  else       if (cls.equals(float.class)) {         if (!(obj instanceof Float))         return false;       }  else       if (cls.isArray()) {         if (!(obj instanceof java.util.List))         return false;       }  else       if (cls.isInterface() && isFunctionalInterface(cls)) {         if (!(obj instanceof Function))         return false;       }  else       if (!cls.isAnnotation() && !cls.isAnonymousClass() && !cls.isArray()&& !cls.isEnum()&& !cls.isLocalClass()&& !cls.isMemberClass()&& !cls.isPrimitive()&& !cls.isSynthetic()&& isFunctionalAbstractClass(cls)) {         if (!(obj instanceof Function))         return false;       }  else {         notFunctionalAbstractClass.put(cls,null);         notFunctionalInterfaces.put(cls,null);         return false;       }     }   }   return true; } "
"public void addACI(ACI aci) throws AccessRightsException, UMSException {   Attr attr=new Attr(ACI.ACI,aci.toString());   modify(attr,ModificationType.ADD);   save(); } "
"void nextRequest(){   request.recycle();   if (lastValid - pos > 0 && pos > 0) {     System.arraycopy(buf,pos,buf,0,lastValid - pos);   }   lastValid=lastValid - pos;   pos=0;   for (int i=0; i <= lastActiveFilter; i++) {     activeFilters[i].recycle();   }   lastActiveFilter=-1;   parsingHeader=true;   swallowInput=true;   headerParsePos=HeaderParsePosition.HEADER_START;   parsingRequestLine=true;   parsingRequestLinePhase=0;   parsingRequestLineEol=false;   parsingRequestLineStart=0;   parsingRequestLineQPos=-1;   headerData.recycle(); } "
"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){   Properties defaultProp=null;   if (withDefaults) {     SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());     defaultProp=ServerConfiguration.getDefaults(appToken);   }   PropertiesHolder oldProps;   PropertiesHolder newProps;   do {     oldProps=propertiesHolderRef.get();     final Properties combined=new Properties();     if (defaultProp != null) {       combined.putAll(defaultProp);     }     if (!reset) {       combined.putAll(oldProps.properties);     }     combined.putAll(properties);     newProps=new PropertiesHolder(Maps.fromProperties(combined));   }  while (!propertiesHolderRef.compareAndSet(oldProps,newProps)); } "
"public void reset(){   super.reset();   H1=0xcbbb9d5dc1059ed8l;   H2=0x629a292a367cd507l;   H3=0x9159015a3070dd17l;   H4=0x152fecd8f70e5939l;   H5=0x67332667ffc00b31l;   H6=0x8eb44a8768581511l;   H7=0xdb0c2e0d64f98fa7l;   H8=0x47b5481dbefa4fa4l; } "
"synchronized boolean readCertificates(){   if (metaEntries == null) {     return false;   }   Iterator<String> it=metaEntries.keySet().iterator();   while (it.hasNext()) {     String key=it.next();     if (key.endsWith(\".DSA\") || key.endsWith(\".RSA\") || key.endsWith(\".EC\")) {       verifyCertificate(key);       if (metaEntries == null) {         return false;       }       it.remove();     }   }   return true; } "
"public void visitTypeInsn(int opcode,String type){   if (mv != null) {     mv.visitTypeInsn(opcode,type);   } } "
"public void testSubtractMathContextDiffScalePosNeg(){   String a=\"1231212478987482988429808779810457634781384756794987\";   int aScale=15;   String b=\"747233429293018787918347987234564568\";   int bScale=-10;   String c=\"-7.4723342916989754E+45\";   int cScale=-29;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   MathContext mc=new MathContext(17,RoundingMode.DOWN);   BigDecimal result=aNumber.subtract(bNumber,mc);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",cScale,result.scale()); } "
"public void actionPerformed(ActionEvent e){   JEditorPane editor=getEditor(e);   if (editor != null) {     Color fg=this.fg;     if ((e != null) && (e.getSource() == editor)) {       String s=e.getActionCommand();       try {         fg=Color.decode(s);       }  catch (      NumberFormatException nfe) {       }     }     if (fg != null) {       MutableAttributeSet attr=new SimpleAttributeSet();       StyleConstants.setForeground(attr,fg);       setCharacterAttributes(editor,attr,false);     }  else {       UIManager.getLookAndFeel().provideErrorFeedback(editor);     }   } } "
"public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {   if (src == null) {     throw new NullPointerException(\"Source must not be null\");   }   if (destDir == null) {     throw new NullPointerException(\"Destination directory must not be null\");   }   if (!destDir.exists() && createDestDir) {     destDir.mkdirs();   }   if (!destDir.exists()) {     throw new FileNotFoundException(\"Destination directory '\" + destDir + \"' does not exist [createDestDir=\"+ createDestDir+ \"]\");   }   if (!destDir.isDirectory()) {     throw new IOException(\"Destination '\" + destDir + \"' is not a directory\");   }   moveDirectory(src,new File(destDir,src.getName())); } "
"public final void readChildren(ObjectInputStream ois) throws IOException, ClassNotFoundException {   int count=serializable;   while (count-- > 0) {     Object child=null;     BeanContextSupport.BCSChild bscc=null;     try {       child=ois.readObject();       bscc=(BeanContextSupport.BCSChild)ois.readObject();     }  catch (    IOException ioe) {       continue;     } catch (    ClassNotFoundException cnfe) {       continue;     } synchronized (child) {       BeanContextChild bcc=null;       try {         bcc=(BeanContextChild)child;       }  catch (      ClassCastException cce) {       }       if (bcc != null) {         try {           bcc.setBeanContext(getBeanContextPeer());           bcc.addPropertyChangeListener(\"beanContext\",childPCL);           bcc.addVetoableChangeListener(\"beanContext\",childVCL);         }  catch (        PropertyVetoException pve) {           continue;         }       }       childDeserializedHook(child,bscc);     }   } } "
"public LineEvent(Line line,Type type,long position){   super(line);   this.type=type;   this.position=position; } "
"@Override public boolean equals(Object obj){   return obj instanceof GregorianCalendar && super.equals(obj) && gregorianCutover == ((GregorianCalendar)obj).gregorianCutover; } "
"public PdfA2Checker(PdfAConformanceLevel conformanceLevel){   super(conformanceLevel); } "
"private <T>void registerSetModification(PropertyDefinition<T> pd,SortedSet<T> newValues,SortedSet<T> previousValues){   PropertyEditorModification<?> mod=getModification(pd);   SortedSet<T> originalValues;   if (mod != null) {     originalValues=new TreeSet<>(pd);     castAndAddValues(originalValues,mod.getOriginalValues(),pd);     removeModification(mod);   }  else {     originalValues=new TreeSet<>(previousValues);   }   addModification(PropertyEditorModification.createSetModification(pd,newValues,originalValues)); } "
"protected GitHubClient updateRateLimits(HttpURLConnection request){   String limit=request.getHeaderField(\"X-RateLimit-Limit\");   if (limit != null && limit.length() > 0)   try {     requestLimit=Integer.parseInt(limit);   }  catch (  NumberFormatException nfe) {     requestLimit=-1;   }  else   requestLimit=-1;   String remaining=request.getHeaderField(\"X-RateLimit-Remaining\");   if (remaining != null && remaining.length() > 0)   try {     remainingRequests=Integer.parseInt(remaining);   }  catch (  NumberFormatException nfe) {     remainingRequests=-1;   }  else   remainingRequests=-1;   return this; } "
"public boolean isPollingEnabled(){   if (!SystemProperties.isServerMode()) {     pollingEnabled=SystemProperties.getAsBoolean(ENABLE_POLLING_PROPERTY,false);   }   if (debug.messageEnabled()) {     debug.message(\"Session.isPollingEnabled is \" + pollingEnabled);   }   if (!pollerPoolInitialized) {     initPollerPool();   }   return pollingEnabled; } "
"protected void tearDown(){ } "
"public static String decodePassword(String password){   String decodedPassword=AccessController.doPrivileged(new DecodeAction(password));   return decodedPassword == null ? password : decodedPassword; } "
"private static VersionIdentifier parseVersionString(final InputStream xml) throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {   final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();   final DocumentBuilder builder=factory.newDocumentBuilder();   final Document doc=builder.parse(xml);   final XPathFactory xPathfactory=XPathFactory.newInstance();   final XPath xpath=xPathfactory.newXPath();   final XPathExpression expr=xpath.compile(\"/metadata/versioning/versions/version\");   return VersionRetriever.parseNodeList((NodeList)expr.evaluate(doc,XPathConstants.NODESET)); } "
"public void printTitleLine(){   startNewLineIfNeeded();   passFirstSeparatorColumn();   for (  final Column column : this.printableColumns) {     printCell(column.title,Alignment.RIGHT);   } } "
"public String toString(){   return representation; } "
"private void runDetectChildrenManually() throws SearchAbandonException {   BasicNode parentNode=getNode();   ConnectionWithControls conn=null;   try {     conn=controller.findConnectionForDisplayedEntry(parentNode);     SearchRequest request=newSearchRequest(controller.findBaseDNForChildEntries(parentNode),useCustomFilter() ? WHOLE_SUBTREE : BASE_OBJECT,controller.getChildSearchFilter(),NO_ATTRIBUTES).setSizeLimit(1);     try (ConnectionEntryReader searchResults=conn.search(request)){       throwAbandonIfNeeded(null);       isLeafNode=!searchResults.hasNext();     }    }  catch (  LdapException e) {     if (e.getResult().getResultCode().equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {     }  else {       throwAbandonIfNeeded(e);     }   }  finally {     if (conn != null) {       controller.releaseLDAPConnection(conn);     }   } } "
"public XMLString emptystr(){   return XString.EMPTYSTRING; } "
"public java.lang.String toXMLString() throws SAML2Exception {   return toXMLString(true,false); } "
"void removeOutlines(PdfPage page){   if (getDocument().getWriter() == null) {     return;   }   if (hasOutlines()) {     getOutlines(false);     if (pagesWithOutlines.size() > 0) {       if (pagesWithOutlines.get(page.getPdfObject()) != null) {         for (        PdfOutline outline : pagesWithOutlines.get(page.getPdfObject())) {           outline.removeOutline();         }       }     }   } } "
"@BeforeClass public void disableLogging(){   TestCaseUtils.setDefaultLogLevel(Level.SEVERE); } "
"@Override public void run(){   captureThread=currentThread();   captureStartTime=System.currentTimeMillis();   while (!stopProfiling) {     long startTime=System.currentTimeMillis();     Map<Thread,StackTraceElement[]> stacks=getAllStackTraces();     numIntervals++;     for (    Thread t : stacks.keySet()) {       if (t == currentThread()) {         continue;       }       StackTraceElement[] threadStack=stacks.get(t);       if (threadStack == null || threadStack.length == 0) {         continue;       }       ProfileStack profileStack=new ProfileStack(threadStack);       Long currentCount=stackTraces.get(profileStack);       if (currentCount == null) {         stackTraces.put(profileStack,1L);       }  else {         stackTraces.put(profileStack,1L + currentCount.intValue());       }     }     if (!stopProfiling) {       long sleepTime=sampleInterval - (System.currentTimeMillis() - startTime);       if (sleepTime > 0) {         try {           Thread.sleep(sleepTime);         }  catch (        Exception e) {           logger.traceException(e);         }       }     }   }   captureStopTime=System.currentTimeMillis();   captureThread=null; } "
"public SetPropertyActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){   this.sessionPropertyWhitelist=sessionPropertyWhitelist;   this.sessionResourceUtil=sessionResourceUtil; } "
"private BuildVersion(final int major,final int minor,final int point,final String rev){   this.major=major;   this.minor=minor;   this.point=point;   this.rev=rev; } "
"private void unlinkCancelledWaiters(){   Node t=firstWaiter;   Node trail=null;   while (t != null) {     Node next=t.nextWaiter;     if (t.waitStatus != Node.CONDITION) {       t.nextWaiter=null;       if (trail == null)       firstWaiter=next;  else       trail.nextWaiter=next;       if (next == null)       lastWaiter=trail;     }  else     trail=t;     t=next;   } } "
"public boolean containsValue(CompositeData value){   return dataMap.containsValue(value); } "
"public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){   if (p_color == null)   return;   Graphics2D g2=(Graphics2D)p_g;   Polygon draw_polygon=new Polygon();   for (int index=0; index < p_points.length; index++) {     Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);     draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));   }   g2.setColor(p_color);   set_translucency(g2,p_translucency_factor);   g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);   g2.fill(draw_polygon); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementElement createAuthenticationContextStatementElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementElementImpl(); } "
"public String toString(){   return (sun.security.util.ResourcesMgr.getString(\"LoginModuleControlFlag.\") + controlFlag); } "
"@SuppressWarnings(\"unchecked\") private void mergeLo(int base1,int len1,int base2,int len2){   if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;   Object[] a=this.a;   Object[] tmp=ensureCapacity(len1);   System.arraycopy(a,base1,tmp,0,len1);   int cursor1=0;   int cursor2=base2;   int dest=base1;   a[dest++]=a[cursor2++];   if (--len2 == 0) {     System.arraycopy(tmp,cursor1,a,dest,len1);     return;   }   if (len1 == 1) {     System.arraycopy(a,cursor2,a,dest,len2);     a[dest + len2]=tmp[cursor1];     return;   }   int minGallop=this.minGallop;   outer:   while (true) {     int count1=0;     int count2=0;     do {       if (DEBUG)       assert len1 > 1 && len2 > 0;       if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {         a[dest++]=a[cursor2++];         count2++;         count1=0;         if (--len2 == 0)         break outer;       }  else {         a[dest++]=tmp[cursor1++];         count1++;         count2=0;         if (--len1 == 1)         break outer;       }     }  while ((count1 | count2) < minGallop);     do {       if (DEBUG)       assert len1 > 1 && len2 > 0;       count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);       if (count1 != 0) {         System.arraycopy(tmp,cursor1,a,dest,count1);         dest+=count1;         cursor1+=count1;         len1-=count1;         if (len1 <= 1)         break outer;       }       a[dest++]=a[cursor2++];       if (--len2 == 0)       break outer;       count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);       if (count2 != 0) {         System.arraycopy(a,cursor2,a,dest,count2);         dest+=count2;         cursor2+=count2;         len2-=count2;         if (len2 == 0)         break outer;       }       a[dest++]=tmp[cursor1++];       if (--len1 == 1)       break outer;       minGallop--;     }  while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);     if (minGallop < 0)     minGallop=0;     minGallop+=2;   }   this.minGallop=minGallop < 1 ? 1 : minGallop;   if (len1 == 1) {     if (DEBUG)     assert len2 > 0;     System.arraycopy(a,cursor2,a,dest,len2);     a[dest + len2]=tmp[cursor1];   }  else   if (len1 == 0) {     throw new IllegalArgumentException(\"Comparison method violates its general contract!\");   }  else {     if (DEBUG)     assert len2 == 0;     if (DEBUG)     assert len1 > 1;     System.arraycopy(tmp,cursor1,a,dest,len1);   } } "
"public int nextNode(){   if (m_foundLast)   return DTM.NULL;   int next;   m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_context : DTM.NULL;   if (DTM.NULL != next) {     m_pos++;     return next;   }  else {     m_foundLast=true;     return DTM.NULL;   } } "
"private boolean isStandardTextRepresentationClass(){   return isRepresentationClassReader() || String.class.equals(representationClass) || isRepresentationClassCharBuffer()|| char[].class.equals(representationClass); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_characterdataappenddata.class,args); } "
"public Bounds(){   super(); } "
"public void sendMessage(byte[] data,boolean waitForAck) throws IOException {   IOException exception=null;   setAttempt(0);   try {     pushMessage(data,false,waitForAck);   }  catch (  IOException x) {     SenderState.getSenderState(getDestination()).setSuspect();     exception=x;     if (log.isTraceEnabled())     log.trace(sm.getString(\"bioSender.send.again\",getAddress().getHostAddress(),Integer.valueOf(getPort())),x);     while (getAttempt() < getMaxRetryAttempts()) {       try {         setAttempt(getAttempt() + 1);         pushMessage(data,true,waitForAck);         exception=null;       }  catch (      IOException xx) {         exception=xx;         closeSocket();       }     }   }  finally {     setRequestCount(getRequestCount() + 1);     keepalive();     if (exception != null)     throw exception;   } } "
"public Date(long date){   super(date); } "
"public String encode(){   String retval;   if (statusLine != null)   retval=statusLine.encode() + super.encode();  else   retval=super.encode();   return retval; } "
"public void flushBuffer() throws IOException {   if (count > 0) {     m_os.write(m_outputBytes,0,count);     count=0;   } } "
"public void updateCRLCache(X509Certificate certificate,X509CRL crl){   String issuer=CertUtils.getIssuerName(certificate);   if (crl == null) {     cachedcrls.remove(issuer);   }  else {     cachedcrls.put(issuer,crl);   } } "
"public synchronized void login(String username,String password,String language) throws XmlRpcFault {   Map<?,?> response=invoke(\"LogIn\",username,password,language,useragent);   token=response.get(\"token\").toString(); } "
"synchronized void removeStyle(Style style){   AttributeSet[] attrs=getAttributes();   for (int counter=attrs.length - 1; counter >= 0; counter--) {     if (attrs[counter] == style) {       removeAttributeSetAt(counter);       if (counter < extendedIndex) {         extendedIndex--;       }       break;     }   } } "
"public Observable<Void> initializePersistenceObservable(){   io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();   initializePersistence(resultHandler.toHandler());   return resultHandler; } "
"protected void prepareMyProtocolMessageBytes(ProtocolMessage pm){   LOGGER.debug(\"Preparing the following protocol message to send: {}\",pm.getClass());   ProtocolMessageHandler handler=pm.getProtocolMessageHandler(tlsContext);   byte[] pmBytes=handler.prepareMessage();   if (LOGGER.isDebugEnabled()) {     LOGGER.debug(pm.toString());   }   if (pm.isGoingToBeSent()) {     messageBytesCollector.appendProtocolMessageBytes(pmBytes);   } } "
"public static Vector send(URL url,RequestSet set) throws SendRequestException {   return send(url,null,set,null); } "
"public String generateLogField(String data,Object[] params) throws Exception {   String log=(String)params[0];   SecureLogHelper helper=SecureFileHandler.getSecureLogHelper(log);   byte[] MAC=helper.generateLogEntryMAC(data);   String sMAC=helper.toHexString(MAC);   return (sMAC); } "
"public Builder withColor(Color... colors) throws IllegalArgumentException {   Validate.notNull(colors,\"Cannot have null colors\");   if (colors.length == 0) {     return this;   }   ImmutableList.Builder<Color> list=this.colors;   for (  Color color : colors) {     Validate.notNull(color,\"Color cannot be null\");     list.add(color);   }   return this; } "
"public void add(Permission perm){   if (!(perm instanceof ISPermission)) {     String objs[]={perm.toString()};     throw (new IllegalArgumentException(ResBundleUtils.getString(\"invalid_permission\",objs)));   }   if (isReadOnly()) {     throw new SecurityException(ResBundleUtils.getString(\"readonly_permission_collection\"));   }   debug.message(\"ISPermissionCollection::add(perm) called\");   if (debug.messageEnabled()) {     debug.message(\"ISPermissionCollection::perm:\" + perm.toString());   }   perms.put(perm.getName(),perm); } "
"private void startRefreshNode(BasicNode node,SearchResultEntry localEntry,boolean recursive){   if (node == rootNode) {     if (recursive) {       Enumeration<?> e=rootNode.children();       while (e.hasMoreElements()) {         BasicNode child=(BasicNode)e.nextElement();         startRefreshNode(child,null,true);       }     }   }  else {     refreshQueue.queue(new NodeRefresher(node,this,localEntry,recursive));     if (recursive && node instanceof SuffixNode) {       Enumeration<?> e=node.children();       while (e.hasMoreElements()) {         BasicNode child=(BasicNode)e.nextElement();         if (child instanceof SuffixNode) {           startRefreshNode(child,null,true);         }       }     }   } } "
"public void paint(Graphics g,Shape a){   Rectangle alloc=a.getBounds();   c.paintIcon(getContainer(),g,alloc.x,alloc.y); } "
"public void postinvoke(byte[] oid,org.omg.PortableServer.POA adapter,String operation,java.lang.Object the_cookie,org.omg.PortableServer.Servant the_servant){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"postinvoke\",_opsClass);   ServantLocatorOperations $self=(ServantLocatorOperations)$so.servant;   try {     $self.postinvoke(oid,adapter,operation,the_cookie,the_servant);   }   finally {     _servant_postinvoke($so);   } } "
"@KnownFailure(\"Fixed on DonutBurger, Wrong Exception thrown\") public void test_unwrap_04(){   String host=\"new host\";   int port=8080;   ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};   ByteBuffer[] bbAN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};   ByteBuffer[] bbN=null;   ByteBuffer bb=ByteBuffer.allocate(10);   ByteBuffer bN=null;   SSLEngine sse=getEngine(host,port);   sse.setUseClientMode(true);   try {     sse.unwrap(bN,bbA,0,3);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bb,bbAN,0,3);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bb,bbN,0,0);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bN,bbN,0,0);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   } } "
"public void deleteTag(AudioFile f) throws CannotReadException, CannotWriteException {   String ext=Utils.getExtension(f.getFile());   Object afw=writers.get(ext);   if (afw == null) {     throw new CannotWriteException(ErrorMessage.NO_DELETER_FOR_THIS_FORMAT.getMsg(ext));   }   ((AudioFileWriter)afw).delete(f); } "
"ChunkedIntArray(int slotsize){   if (this.slotsize < slotsize)   throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CHUNKEDINTARRAY_NOT_SUPPORTED,new Object[]{Integer.toString(slotsize)}));  else   if (this.slotsize > slotsize)   System.out.println(\"*****WARNING: ChunkedIntArray(\" + slotsize + \") wasting \"+ (this.slotsize - slotsize)+ \" words per slot\");   chunks.addElement(fastArray); } "
"private List<Runnable> drainQueue(){   BlockingQueue<Runnable> q=workQueue;   ArrayList<Runnable> taskList=new ArrayList<Runnable>();   q.drainTo(taskList);   if (!q.isEmpty()) {     for (    Runnable r : q.toArray(new Runnable[0])) {       if (q.remove(r))       taskList.add(r);     }   }   return taskList; } "
"public synchronized void removeNotifications(String type) throws InstanceNotFoundException {   Vector<Integer> v=getNotificationIDs(type);   if (v.isEmpty())   throw new InstanceNotFoundException(\"Timer notifications to remove not in the list of notifications\");   for (  Integer i : v)   removeNotification(i); } "
"public NetNosList remove_from_net(int net_no){   int current_len=net_nos_arr.length;   ArrayList<Integer> risul=new ArrayList<Integer>(current_len);   for (int index=0; index < current_len; index++) {     int a_net_no=net_nos_arr[index];     if (a_net_no == net_no)     continue;     risul.add(a_net_no);   }   if (risul.size() == current_len)   return null;   return new NetNosList(risul); } "
"private int countOfMode(boolean data){   int count=0;   for (Node p=head; p != null; ) {     if (!p.isMatched()) {       if (p.isData != data)       return 0;       if (++count == Integer.MAX_VALUE)       break;     }     Node n=p.next;     if (n != p)     p=n;  else {       count=0;       p=head;     }   }   return count; } "
"public static void storeResourceBundle(SSOToken token,String rbName,String locale,Map attributes) throws SMSException, SSOException {   if (rbName == null) {     return;   }   ServiceConfigManager scm=new ServiceConfigManager(token,LOCALE_SERVICE,VERSION);   ServiceConfig globalConfig=scm.getGlobalConfig(null);   ServiceConfig rbConfig=globalConfig.getSubConfig(rbName);   if (rbConfig == null) {     globalConfig.addSubConfig(rbName,RB_CONFIG_ID,0,new HashMap());     rbConfig=globalConfig.getSubConfig(rbName);   }   if (locale == null) {     rbConfig.setAttributes(attributes);   }  else {     ServiceConfig localeConfig=rbConfig.getSubConfig(locale);     if (localeConfig == null) {       rbConfig.addSubConfig(locale,LOCALE_CONFIG_ID,0,attributes);       localeConfig=rbConfig.getSubConfig(locale);     }  else {       localeConfig.setAttributes(attributes);     }   } } "
"public int versionMajorNumber(){   return Integer.valueOf(properties.getProperty(\"version.major\")); } "
"public boolean isAuditLogEnabled(){   return logStatus; } "
"@Override public void invalidate(final PooledConnection pc) throws SQLException {   final PooledConnectionAndInfo pci=pcMap.get(pc);   if (pci == null) {     throw new IllegalStateException(NO_KEY_MESSAGE);   }   try {     _pool.invalidateObject(pci);     _pool.close();   }  catch (  final Exception ex) {     throw new SQLException(\"Error invalidating connection\",ex);   } } "
"public void clear(){   dict.clear(); } "
"@Override public Principal authenticate(String username,String credentials){   DirContext context=null;   Principal principal=null;   try {     context=open();     try {       principal=authenticate(context,username,credentials);     }  catch (    NullPointerException|CommunicationException|ServiceUnavailableException e) {       containerLog.info(sm.getString(\"jndiRealm.exception.retry\"),e);       if (context != null)       close(context);       context=open();       principal=authenticate(context,username,credentials);     }     release(context);     return principal;   }  catch (  NamingException e) {     containerLog.error(sm.getString(\"jndiRealm.exception\"),e);     if (context != null)     close(context);     if (containerLog.isDebugEnabled())     containerLog.debug(\"Returning null principal.\");     return null;   } } "
"public static String tabsToSpaces(String in,int tabSize){   StringBuilder buf=new StringBuilder();   int width=0;   for (int i=0; i < in.length(); i++) { switch (in.charAt(i)) { case '\\t':       int count=tabSize - (width % tabSize);     width+=count;   while (--count >= 0)   buf.append(' '); break; case '\\n': width=0; buf.append(in.charAt(i)); break; default : width++; buf.append(in.charAt(i)); break; } } return buf.toString(); } "
"public int read() throws IOException {   return in.read(); } "
"public static String decodeFromBase64(final String string){   return new String(Base64.decodeBase64(string)); } "
"@Override public void update(){   if (isDeathSeqRunning)   return;  else   if (midStateChange) {     switchStates();     return;   }   if (!isIdle) {     isRightCollided=sideCollide(1);     isLeftCollided=sideCollide(3);     if (sMario.isSprinting()) {       maxVel=sprintVel;       maxFrame=3;     }  else {       maxVel=runVel;       maxFrame=5;     }   }   if (sMario.isRight() && !isRightCollided) {     if (endSeqFinish && this.isInsideCastle()) {       spriteFrame.setImage(null);       spriteFrame=null;       aura.getSpriteFrame().setImage(null);       aura=null;       if (main.Main.auraLoop.isPlaying())       main.Main.auraLoop.stop();       sMario.getGameLoop().stop(false);       return;     }     isIdle=false;     if (xVel > frictionThreshold && super.getSpriteFrame().getScaleX() == -1) {       frictionApp=true;       super.getSpriteFrame().setImage(super.getPlayerStates().get(5));       frameLimiter=-6;     }  else     frictionApp=false;     if (super.getSpriteFrame().getScaleX() != 1)     super.getSpriteFrame().setScaleX(1);     if (xPos < stageMoveTh || stageCoordinate <= -STAGEWIDTH) {       xPos+=xVel;     }  else     if (stageCoordinate > -STAGEWIDTH) {       stageCoordinate-=xVel;       sMario.getStageContainer().setTranslateX(stageCoordinate);       if (sMario.getJumpTrail().getOpacity() > 0) {         sMario.getJumpEffect().setTranslateX(sMario.getJumpEffect().getTranslateX() - xVel);         sMario.getJumpTrail().setTranslateX(sMario.getJumpTrail().getTranslateX() - xVel);         for (int i=0; i < SpriteHandler.getPlayerPowerList().size(); i++) {           PlayerPower p=SpriteHandler.getPlayerPowerList().get(i);           if (p.getSpriteFrame() != null)           p.getSpriteFrame().setTranslateX(p.getSpriteFrame().getTranslateX() - xVel);         }       }     }     applyFriction();   }  else   if (sMario.isLeft() && !isLeftCollided && xPos > 0) {     isIdle=false;     if (xVel > frictionThreshold && super.getSpriteFrame().getScaleX() == 1) {       frictionApp=true;       super.getSpriteFrame().setImage(super.getPlayerStates().get(5));       frameLimiter=-6;     }  else     frictionApp=false;     if (super.getSpriteFrame().getScaleX() != -1)     super.getSpriteFrame().setScaleX(-1);     xPos-=xVel;     applyFriction();   }  else   if (xPos < 0)   xPos+=outBoundThrowback;  else   if (!isIdle && !isJumpCycleRunning)   if (isRightCollided)   xPos-=sideCollidePush;  else   if (isLeftCollided)   xPos+=sideCollidePush;   if (sMario.isShootingFireball() && SpriteHandler.getPlayerPowerList().size() < 2 && MARIO_STATE > 1) {     main.Main.fireballRelease.play(0.4);     SpriteHandler.getPlayerPowerList().add(sMario.genFireball(xPos,yPos,(int)spriteFrame.getScaleX()));     isFireballShot=true;     isIdle=false;   }  else   isFireballShot=false;   if (!isIdle || sMario.isJumping()) {     if ((sMario.isLeft() && sMario.isRight()))     xVel=0;  else     if ((!sMario.isLeft() && !sMario.isRight() && !sMario.isUp()&& !sMario.isDown())) {       if (isFireballShot) {         super.getSpriteFrame().setImage(super.getPlayerStates().get(3));         frameLimiter=-12;       }  else       if (!isJumpCycleRunning && frameLimiter > -1)       super.getSpriteFrame().setImage(super.getPlayerStates().get(0));       if (xVel > yDec) {         if (xVel > frictionThreshold)         super.getSpriteFrame().setImage(super.getPlayerStates().get(5));         xVel-=playerStopDecel;         if (super.getSpriteFrame().getScaleX() == 1 && !isRightCollided)         xPos+=xVel;  else         if (!isLeftCollided)         xPos-=xVel;         isIdle=false;       }  else       if (yVel == jumpVel)       isIdle=true;       if (frameLimiter < 0) {         isIdle=false;         frameLimiter++;       }     }  else     if (frameLimiter++ == maxFrame && !frictionApp && !sMario.isUp() && !sMario.isDown()) {       if (isJumpCycleRunning)       super.getSpriteFrame().setImage(super.getPlayerStates().get(4));  else       if (switchFoot == 0) {         super.getSpriteFrame().setImage(super.getPlayerStates().get(3));         switchFoot++;       }  else       if (switchFoot == 1) {         super.getSpriteFrame().setImage(super.getPlayerStates().get(2));         switchFoot++;       }  else       if (switchFoot == 2) {         super.getSpriteFrame().setImage(super.getPlayerStates().get(1));         switchFoot=0;       }       frameLimiter=0;     }     if (frameLimiter > maxFrame)     frameLimiter=0;     if (!bottomCollide(isJumpCycleRunning,false)) {       yPos+=gravity;       isIdle=false;       if (!endSeqFinish && (playFlagPoleSeq || (collidingZone == 3 && flagPoleHit()))) {         if (!playFlagPoleSeq) {           SpriteHandler.getAllEnemyCast().clear();           SpriteHandler.getEnemyCast().clear();           SpriteHandler.getAllStageElements().clear();           SpriteHandler.getStageElements().clear();           playFlagPoleSeq=true;         }         playFlagPoleSeq();         return;       }     }  else     if (sMario.isJumping()) {       super.getSpriteFrame().setImage(super.getPlayerStates().get(4));       isJumpCycleRunning=true;       isIdle=false;       opacity=1;       Main.pJump.play();       sMario.getJumpEffect().setTranslateX(xPos - jumpEffectXTH);       sMario.getJumpEffect().setTranslateY(yPos + jumpEffectYTH);       sMario.getJumpTrail().setTranslateX(xPos - jumpEffectXTH);       sMario.getJumpTrail().setTranslateY(yPos + jumpTrailYTH);       sMario.getJumpTrail().setFitHeight(jumpTrailDefHeight);     }  else     while (bottomCollide(false,true)) {       yPos-=groundCollVel;       if (xVel != friction)       xVel=friction;       for (int i=0; i < spriteBoundsArray.length; i++)       spriteBoundsArray[i].setTranslateY(yPos);       spriteFrame.setTranslateY(yPos);       if (isIdle)       isIdle=false;     }     if (isJumpCycleRunning && !breakJump) {       yVel-=yDec;       yPos-=(yVel + gravity);     }     playJumpTrailEffect();   }   if (sMario.isUp()) {     yPos-=8.9f * REL_HEIGHT;     isIdle=false;   }  else   if (sMario.isDown()) {     yPos+=REL_HEIGHT;     isIdle=false;   }   if (enableAura)   aura.update(xPos,yPos);   if (isIdle) {     playJumpTrailEffect();     return;   }   if (yPos > HEIGHT) {     playPitFallSeq();     return;   }   if (isJumpCycleRunning)   topCollide();   updatePosition(); } "
"public void reset(){   node_list.clear(); } "
"private PropertyChangeListener createVSBPropertyChangeListener(){   return getHandler(); } "
"public void addRow(Vector rowData){   insertRow(getRowCount(),rowData); } "
"@Override public String toString(){   return type + \",\" + (colorR & 0xFF)+ \",\"+ (colorG & 0xFF)+ \",\"+ (colorB & 0xFF)+ \",\"+ (colorA & 0xFF)+ \",\"+ thickness+ \",\"+ x1+ \",\"+ y1+ \",\"+ x2+ \",\"+ y2; } "
"public TableModelEvent(TableModel source,int firstRow,int lastRow,int column,int type){   super(source);   this.firstRow=firstRow;   this.lastRow=lastRow;   this.column=column;   this.type=type; } "
"public static String hashpw(String password,String salt){   BCrypt B;   String real_salt;   byte passwordb[], saltb[], hashed[];   char minor=(char)0;   int rounds, off;   StringBuilder sb=new StringBuilder();   if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {     throw new IllegalArgumentException(\"Invalid salt version\");   }   if (salt.charAt(2) == '$') {     off=3;   }  else {     minor=salt.charAt(2);     if (minor != 'a' || salt.charAt(3) != '$') {       throw new IllegalArgumentException(\"Invalid salt revision\");     }     off=4;   }   if (salt.charAt(off + 2) > '$') {     throw new IllegalArgumentException(\"Missing salt rounds\");   }   rounds=Integer.parseInt(salt.substring(off,off + 2));   real_salt=salt.substring(off + 3,off + 25);   try {     passwordb=(password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\");   }  catch (  UnsupportedEncodingException uee) {     throw new AssertionError(\"UTF-8 is not supported\");   }   saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);   B=new BCrypt();   hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());   sb.append(\"$2\");   if (minor >= 'a') {     sb.append(minor);   }   sb.append(\"$\");   if (rounds < 10) {     sb.append(\"0\");   }   if (rounds > 30) {     throw new IllegalArgumentException(\"rounds exceeds maximum (30)\");   }   sb.append(Integer.toString(rounds));   sb.append(\"$\");   sb.append(encode_base64(saltb,saltb.length));   sb.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));   return sb.toString(); } "
"public void handleException(Exception e,int option){   if (!getOptionIsSupported(option)) {     String message=e.getMessage();     if (message != null && (message.equals(osDoesNotSupportOperationString) || message.equals(osDoesNotSupportOptionString) || message.equals(osDoesNotSupportOptionArgumentString))) {     }  else {       fail(\"Threw \\\"\" + e + \"\\\" instead of correct exception for unsupported socket option: \"+ getSocketOptionString(option));     }   }  else {     fail(\"Exception during test : \" + e.getMessage());   } } "
"public void forwardTo(RequestContext requestContext){   exDebug.message(\"In forwardTo()\");   if (requestContext != null) {     request=requestContext.getRequest();     response=requestContext.getResponse();   }   response.setHeader(\"Pragma\",\"no-cache\");   response.setHeader(\"Expires\",\"0\");   if (ad == null) {     super.forwardTo(requestContext);     return;   }   try {     ac=AuthUtils.getAuthContext(request,response,AuthUtils.getSessionIDFromRequest(request),false,false);   }  catch (  Exception e) {     if (e instanceof L10NMessage) {       java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac));       ResultVal=((L10NMessage)e).getL10NMessage(locale);     }  else {       ResultVal=e.getMessage();     }   }   if ((ac == null) || AuthUtils.sessionTimedOut(ac)) {     try {       if (exDebug.messageEnabled()) {         exDebug.message(\"Goto Login URL : \" + LOGINURL);       }       response.sendRedirect(LOGINURL);     }  catch (    Exception e) {     }   }  else {     super.forwardTo(requestContext);   } } "
"public ISPermission(Subject subject,CodeSource codesource){   super(\"ISPermission\");   if (debug.messageEnabled()) {     debug.message(\"ISPermission(subject,codesource) constructor \" + \"called \");   }   this.subject=subject;   this.codesource=codesource; } "
"public AttributeSet copyAttributes(){   AttributeSet[] as=getAttributes();   MutableAttributeSet a=new SimpleAttributeSet();   int n=0;   for (int i=as.length - 1; i >= 0; i--) {     a.addAttributes(as[i]);   }   return a; } "
"@DataProvider(name=\"urlobjects2\") public Object[][] createURLObjects2(){   return new Object[][]{{new LDAPUrl(false,null,null,null,null,null),LDAPUrl.valueOf(\"ldap:///\")},{new LDAPUrl(true,null,null,null,null,null),LDAPUrl.valueOf(\"ldaps:///\")},{new LDAPUrl(true,\"void.central.sun.com\",null,null,null,null),LDAPUrl.valueOf(\"ldaps://void.central.sun.com\")},{new LDAPUrl(true,null,1245,null,null,null),LDAPUrl.valueOf(\"ldaps://:1245\")},{new LDAPUrl(true,\"void.central\",123,null,null,null),LDAPUrl.valueOf(\"ldaps://void.central:123\")},{new LDAPUrl(true,null,null,null,null,null,\"cn\",\"sn\"),LDAPUrl.valueOf(\"ldaps:///?cn,sn??\")},{new LDAPUrl(true,null,null,null,null,Filter.equality(\"uid\",\"abc\"),\"cn\"),LDAPUrl.valueOf(\"ldaps:///?cn??(uid=abc)\")},{new LDAPUrl(true,null,null,null,SearchScope.WHOLE_SUBTREE,Filter.equality(\"uid\",\"abc\"),\"cn\"),LDAPUrl.valueOf(\"ldaps:///?cn?sub?(uid=abc)\")},{new LDAPUrl(true,null,null,DN.valueOf(\"uid=abc,o=target\"),SearchScope.WHOLE_SUBTREE,Filter.equality(\"uid\",\"abc\"),\"cn\"),LDAPUrl.valueOf(\"ldaps:///uid=abc,o=target?cn?sub?(uid=abc)\")},{new LDAPUrl(true,\"localhost\",1345,DN.valueOf(\"uid=abc,o=target\"),SearchScope.WHOLE_SUBTREE,Filter.equality(\"uid\",\"abc\"),\"cn\"),LDAPUrl.valueOf(\"ldaps://localhost:1345/uid=abc,o=target?cn?sub?(uid=abc)\")}}; } "
"public static boolean convertToBoolean(String value) throws XMPException {   if (value == null || value.length() == 0) {     throw new XMPException(\"Empty convert-string\",XMPError.BADVALUE);   }   value=value.toLowerCase();   try {     return Integer.parseInt(value) != 0;   }  catch (  NumberFormatException e) {     return \"true\".equals(value) || \"t\".equals(value) || \"on\".equals(value)|| \"yes\".equals(value);   } } "
"public LocalBackendModifyOperation(ModifyOperation modify){   super(modify);   LocalBackendWorkflowElement.attachLocalOperation(modify,this); } "
"public NameAlreadyExistsException(String rbName,String errorCode,Object[] args,Throwable t,String name,int type){   super(rbName,errorCode,args,t);   this.name=name;   this.type=type;   fillInStackTrace(); } "
"public static void writeDWord(OutputStream os,int v) throws IOException {   writeWord(os,v & 0xffff);   writeWord(os,v >>> 16 & 0xffff); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationPinType createActivationPinType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationPinTypeImpl(); } "
"public boolean isIPAddress(){   return addressType != HOSTNAME; } "
"private JobDataMap createJobDataMap(String jobName,ScheduleConfig scheduleConfig){   String invokeService=scheduleConfig.getInvokeService();   Object invokeContext=scheduleConfig.getInvokeContext();   String invokeLogLevel=scheduleConfig.getInvokeLogLevel();   JobDataMap map=new JobDataMap();   map.put(ScheduledService.CONFIG_NAME,\"scheduler\" + (jobName != null ? \"-\" + jobName : \"\"));   map.put(ScheduledService.CONFIGURED_INVOKE_SERVICE,invokeService);   map.put(ScheduledService.CONFIGURED_INVOKE_CONTEXT,invokeContext);   map.put(ScheduledService.CONFIGURED_INVOKE_LOG_LEVEL,invokeLogLevel);   map.put(CONFIG,scheduleConfig.getConfig().toString());   return map; } "
"private static ResultCode registerSuccessResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){   final ResultCode t=new ResultCode(intValue,name,false,resultCodeEnum);   ELEMENTS.put(intValue,t);   return t; } "
"public Cell add(Table element){   childElements.add(element);   return this; } "
"private static String addQuotes(String s){   int n=s.length();   int i;   char c;   StringBuffer result=new StringBuffer(n + 2);   result.append('\\\"');   for (i=0; i < n; ++i) {     c=s.charAt(i);     if (c == '\\\"') {       result.append('\\\\');     }     result.append(c);   }   result.append('\\\"');   return result.toString(); } "
"private X509Certificate[] cleanupCertChainAndFindTrustAnchors(X509Certificate[] chain,Set<TrustAnchor> trustAnchors){   X509Certificate[] original=chain;   int currIndex;   for (currIndex=0; currIndex < chain.length; currIndex++) {     boolean foundNext=false;     for (int nextIndex=currIndex + 1; nextIndex < chain.length; nextIndex++) {       if (chain[currIndex].getIssuerDN().equals(chain[nextIndex].getSubjectDN())) {         foundNext=true;         if (nextIndex != currIndex + 1) {           if (chain == original) {             chain=original.clone();           }           X509Certificate tempCertificate=chain[nextIndex];           chain[nextIndex]=chain[currIndex + 1];           chain[currIndex + 1]=tempCertificate;         }         break;       }     }     if (!foundNext) {       break;     }   }   int anchorIndex;   for (anchorIndex=0; anchorIndex <= currIndex; anchorIndex++) {     TrustAnchor trustAnchor=findTrustAnchorBySubjectAndPublicKey(chain[anchorIndex]);     if (trustAnchor != null) {       trustAnchors.add(trustAnchor);       break;     }   }   int chainLength=anchorIndex;   X509Certificate[] newChain=((chainLength == chain.length) ? chain : Arrays.copyOf(chain,chainLength));   if (trustAnchors.isEmpty()) {     TrustAnchor trustAnchor=findTrustAnchorByIssuerAndSignature(newChain[anchorIndex - 1]);     if (trustAnchor != null) {       trustAnchors.add(trustAnchor);     }   }   return newChain; } "
"protected void completeEditing(boolean messageStop,boolean messageCancel,boolean messageTree){   if (stopEditingInCompleteEditing && editingComponent != null) {     Component oldComponent=editingComponent;     TreePath oldPath=editingPath;     TreeCellEditor oldEditor=cellEditor;     Object newValue=oldEditor.getCellEditorValue();     Rectangle editingBounds=getPathBounds(tree,editingPath);     boolean requestFocus=(tree != null && (tree.hasFocus() || SwingUtilities.findFocusOwner(editingComponent) != null));     editingComponent=null;     editingPath=null;     if (messageStop)     oldEditor.stopCellEditing();  else     if (messageCancel)     oldEditor.cancelCellEditing();     tree.remove(oldComponent);     if (editorHasDifferentSize) {       treeState.invalidatePathBounds(oldPath);       updateSize();     }  else     if (editingBounds != null) {       editingBounds.x=0;       editingBounds.width=tree.getSize().width;       tree.repaint(editingBounds);     }     if (requestFocus)     tree.requestFocus();     if (messageTree)     treeModel.valueForPathChanged(oldPath,newValue);   } } "
"public Name add(int posn,String comp) throws InvalidNameException {   impl.add(posn,comp);   return this; } "
"private TypeInfo createTypeInfo(Field field,Method method){   boolean isMap=apiaryConfig.getAdditionalProperties(method.getResponseTypeUrl(),field.getName()) != null;   boolean isArray=!isMap && (field.getCardinality() == Field.Cardinality.CARDINALITY_REPEATED);   TypeInfo mapKey=null;   TypeInfo mapValue=null;   boolean isMessage=false;   MessageTypeInfo messageTypeInfo=null;   if (isMap) {     Type type=apiaryConfig.getType(field.getTypeUrl());     mapKey=createTypeInfo(apiaryConfig.getField(type,KEY_FIELD_NAME),method);     mapValue=createTypeInfo(apiaryConfig.getField(type,VALUE_FIELD_NAME),method);   }  else   if (field.getKind() == Field.Kind.TYPE_MESSAGE) {     isMessage=true;     messageTypeInfo=createMessageTypeInfo(field,method,apiaryConfig,false);   }   return TypeInfo.newBuilder().kind(field.getKind()).isMap(isMap).mapKey(mapKey).mapValue(mapValue).isArray(isArray).isMessage(isMessage).message(messageTypeInfo).build(); } "
"public static ValueRange of(long min,long max){   if (min > max) {     throw new IllegalArgumentException(\"Minimum value must be less than maximum value\");   }   return new ValueRange(min,min,max,max); } "
"public static byte[] compress(byte[] data,int width,int height){   CCITTG4Encoder g4=new CCITTG4Encoder(width);   g4.fax4Encode(data,0,g4.rowbytes * height);   return g4.close(); } "
"private void appendAttributes(StringBuilder buffer,Collection<List<Attribute>> attributesLists){   boolean firstAttr=true;   for (  List<Attribute> attributes : attributesLists) {     for (    Attribute a : attributes) {       if (firstAttr) {         firstAttr=false;       }  else {         buffer.append(\",\");       }       buffer.append(a.getAttributeDescription());       buffer.append(\"={\");       Utils.joinAsString(buffer,\",\",a);       buffer.append(\"}\");     }   } } "
"boolean isAccountValid(AMIdentity amIdentity){   boolean userEnabled=true;   try {     String userActive=amIdentity.isActive() ? USER_ACTIVE : USER_INACTIVE;     Map<String,Set<String>> attrs=amIdentity.getAttributes(asSet(LOGIN_STATUS_ATTR,NSACCOUNTLOCK_ATTR));     String loginStatus=CollectionHelper.getMapAttr(attrs,LOGIN_STATUS_ATTR);     if (loginStatus == null || loginStatus.isEmpty()) {       loginStatus=USER_ACTIVE;     }     String nsAccountVal=CollectionHelper.getMapAttr(attrs,NSACCOUNTLOCK_ATTR);     if (nsAccountVal == null || nsAccountVal.isEmpty()) {       nsAccountVal=FALSE_VALUE;     }     if (DEBUG.messageEnabled()) {       DEBUG.message(\"inetuserstatus : \" + userActive);       DEBUG.message(\"loginStatus : \" + loginStatus);       DEBUG.message(\"nsAccountLockVal : \" + nsAccountVal);     }     userEnabled=userActive.equalsIgnoreCase(USER_ACTIVE) && loginStatus.equalsIgnoreCase(USER_ACTIVE) && nsAccountVal.equalsIgnoreCase(FALSE_VALUE);   }  catch (  Exception e) {     if (DEBUG.messageEnabled()) {       DEBUG.message(\"isAccountValid:Error :\" + e.toString());     }   }   if (DEBUG.messageEnabled()) {     DEBUG.message(\"User enabled...\" + userEnabled);   }   return userEnabled; } "
"@Override public void put(String name,int value){   emulatedFields.put(name,value); } "
"protected void init() throws IOException {   if (appDataIS != null) {     return;   }   initTransportLayer();   appDataIS=new SSLSocketInputStream(this);   appDataOS=new SSLSocketOutputStream(this); } "
"void processPolicyNotification(PolicyNotification pn){   try {     resourceResultCache.processPolicyNotification(pn);   }  catch (  Exception e) {     debug.error(\"PolicyNotificationHandler.processPolicyNotification():\" + \"Error while handling policy notification\",e);   } } "
"@SuppressWarnings(\"unchecked\") private LDAPReplicationDomain createReplicationDomain(int dsId) throws Exception {   SortedSet<String> replServers=new TreeSet<>();   replServers.add(\"localhost:\" + rs1Port);   DomainFakeCfg domainConf=new DomainFakeCfg(EXAMPLE_DN_,dsId,replServers);   LDAPReplicationDomain replicationDomain=MultimasterReplication.createNewDomain(domainConf);   replicationDomain.start();   SynchronizationProvider<SynchronizationProviderCfg> provider=DirectoryServer.getSynchronizationProviders().get(0);   if (provider instanceof ConfigurationChangeListener) {     ConfigurationChangeListener<ReplicationSynchronizationProviderCfg> mmr=(ConfigurationChangeListener<ReplicationSynchronizationProviderCfg>)provider;     mmr.applyConfigurationChange(mock(ReplicationSynchronizationProviderCfg.class));   }   return replicationDomain; } "
"public com.sun.identity.saml2.jaxb.xmlsig.SignaturePropertyType createSignaturePropertyType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignaturePropertyTypeImpl(); } "
"public ContentEncodingParser(String contentEncoding){   super(contentEncoding); } "
"public Phaser(int parties){   this(null,parties); } "
"public void runTest() throws Throwable {   Document doc;   Element element;   Element ownerElement;   String ownerElementName;   Attr attr;   Attr newAttr;   doc=(Document)load(\"staffNS\",false);   element=doc.createElement(\"root\");   attr=doc.createAttributeNS(\"http://www.w3.org/DOM/L1\",\"L1:att\");   newAttr=element.setAttributeNodeNS(attr);   ownerElement=attr.getOwnerElement();   ownerElementName=ownerElement.getNodeName();   assertEqualsIgnoreCase(\"attrgetownerelement02\",\"root\",ownerElementName); } "
"public static String jsonAttributeName(String name){   return \"\\\"\" + name + \"\\\":\"; } "
"public static List<SearchResultEntry> findChildren(ClassNode node){   List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();   MappedClass parent=fromNode(node);   for (  MappedClass mc : VisualizerWindow.instance.getMappings().values()) {     if (mc.equals(parent)) {       continue;     }     if (ParentUtils.isChild(parent,mc)) {       results.add(new SearchResultEntry(mc.getNode()));     }   }   return results; } "
"public SizeSequence(int[] sizes){   this();   setSizes(sizes); } "
"public void makeImmutable(){   super.makeImmutable(); } "
"@Deprecated public static String encodePostBody(Bundle parameters,String boundary){   if (parameters == null)   return \"\";   StringBuilder sb=new StringBuilder();   for (  String key : parameters.keySet()) {     Object parameter=parameters.get(key);     if (!(parameter instanceof String)) {       continue;     }     sb.append(\"Content-Disposition: form-data; name=\\\"\" + key + \"\\\"\\r\\n\\r\\n\"+ (String)parameter);     sb.append(\"\\r\\n\" + \"--\" + boundary + \"\\r\\n\");   }   return sb.toString(); } "
"public Set<BrdItem> pick_items(PlaPointFloat p_location){   return pick_items(p_location,itera_settings.item_selection_filter); } "
"public FrameBodyTRSO(){ } "
"public CsrfException(){   super(400,\"bad_request\",null); } "
"@Override public void write(char[] chr,int st,int end){ } "
"public void convert(CharChunk mb,boolean query) throws IOException {   int start=mb.getOffset();   char buff[]=mb.getBuffer();   int cend=mb.getEnd();   int idx=CharChunk.indexOf(buff,start,cend,'%');   int idx2=-1;   if (query) {     idx2=CharChunk.indexOf(buff,start,(idx >= 0 ? idx : cend),'+');   }   if (idx < 0 && idx2 < 0) {     return;   }   if ((idx2 >= 0 && idx2 < idx) || idx < 0) {     idx=idx2;   }   final boolean noSlash=!(ALLOW_ENCODED_SLASH || query);   for (int j=idx; j < cend; j++, idx++) {     if (buff[j] == '+' && query) {       buff[idx]=(' ');     }  else     if (buff[j] != '%') {       buff[idx]=buff[j];     }  else {       if (j + 2 >= cend) {         throw EXCEPTION_EOF;       }       char b1=buff[j + 1];       char b2=buff[j + 2];       if (!isHexDigit(b1) || !isHexDigit(b2)) {         throw EXCEPTION_NOT_HEX_DIGIT;       }       j+=2;       int res=x2c(b1,b2);       if (noSlash && (res == '/')) {         throw EXCEPTION_SLASH;       }       buff[idx]=(char)res;     }   }   mb.setEnd(idx); } "
"public void nodeClicked(RequestInvocationEvent event,int nodeID){   try {     AMViewBeanBase vb=getTabNodeAssociatedViewBean(null,nodeID);     passPgSessionMapEx(vb);     vb.resetView();     vb.forwardTo(getRequestContext());   }  catch (  AMConsoleException e) {     AMModelBase.debug.error(\"AMPrimaryMastHeadViewBean.nodeClicked\",e);     forwardTo();   } } "
"public TransformerConfigurationException(String msg,Throwable e){   super(msg,e); } "
"public static void dropTable(SQLiteDatabase db,boolean ifExists){   String sql=\"DROP TABLE \" + (ifExists ? \"IF EXISTS \" : \"\") + \"\\\"PICTURE_INFO\\\"\";   db.execSQL(sql); } "
"protected View createChild(String name){   if (name.equals(TXT_PARENT_INDEX)) {     return new StaticTextField(this,TXT_PARENT_INDEX,\"\");   }   if (name.equals(TXT_INDEX)) {     return new StaticTextField(this,TXT_INDEX,\"\");   }   if (name.equals(TXT_CHOICE)) {     return new StaticTextField(this,TXT_CHOICE,\"\");   }   throw new IllegalArgumentException(\"Invalid child name [\" + name + \"]\"); } "
"public BAD_QOS(String detailMessage){   this(detailMessage,0,CompletionStatus.COMPLETED_NO); } "
"public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){   paintBorder(context,g,x,y,w,h,orientation); } "
"public String toString(int units,String unitsName){   if (unitsName == null) {     unitsName=\"\";   }   float[] vals=getPrintableArea(units);   String str=\"(\" + vals[0] + \",\"+ vals[1]+ \")->(\"+ vals[2]+ \",\"+ vals[3]+ \")\";   return str + unitsName; } "
"public PdfCanvas roundRectangle(double x,double y,double width,double height,double radius){   if (width < 0) {     x+=width;     width=-width;   }   if (height < 0) {     y+=height;     height=-height;   }   if (radius < 0)   radius=-radius;   final double curv=0.4477f;   moveTo(x + radius,y);   lineTo(x + width - radius,y);   curveTo(x + width - radius * curv,y,x + width,y + radius * curv,x + width,y + radius);   lineTo(x + width,y + height - radius);   curveTo(x + width,y + height - radius * curv,x + width - radius * curv,y + height,x + width - radius,y + height);   lineTo(x + radius,y + height);   curveTo(x + radius * curv,y + height,x,y + height - radius * curv,x,y + height - radius);   lineTo(x,y + radius);   curveTo(x,y + radius * curv,x + radius * curv,y,x + radius,y);   return this; } "
"public SessionTimeoutAttribute(int timeout){   super(OctetUtils.toOctets(AttributeType.SESSION_TIMEOUT,timeout));   this.timeout=timeout; } "
"public BooleanString(String identifier,AbstractTagFrameBody frameBody){   super(identifier,frameBody); } "
"void createSubOrganization(String subOrgName) throws SMSException {   if (!getSubOrganizationNames(subOrgName,false).isEmpty() || subOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_NAME)) {     return;   }   try {     if (ServiceManager.isConfigMigratedTo70()) {       Map attrs=new HashMap();       Set attrValues=new HashSet();       attrValues.add(SMSEntry.OC_REALM_SERVICE);       attrs.put(SMSEntry.ATTR_OBJECTCLASS,attrValues);       Map subOrgs=new HashMap();       subOrgs.put(subOrgName,attrs);       parentOrg.createSubOrganizations(subOrgs);     }  else {       Set subOrgs=new HashSet();       subOrgs.add(subOrgName);       parentOrg.createSubOrganizations(subOrgs);     }   }  catch (  AMException ame) {     if (!ame.getErrorCode().equals(\"474\")) {       if (debug.messageEnabled()) {         debug.message(\"OrgConfigViaAMSDK::createSubOrganization\" + \": failed with AMException\",ame);       }       throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));     }   } catch (  SSOException ssoe) {     throw (new SMSException(bundle.getString(\"sms-INVALID_SSO_TOKEN\"),ssoe,\"sms-INVALID_SSO_TOKEN\"));   } } "
"public NamePath withHead(String newHead){   List<String> newPathPieces=new ArrayList<>();   newPathPieces.addAll(pathPieces);   newPathPieces.set(pathPieces.size() - 1,newHead);   return new NamePath(newPathPieces); } "
"public CollectiveAttributeSubentriesVirtualAttributeProvider(){   super(); } "
"@Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type){   return addCursor(x,y,direction,type,true); } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   try {     CoreAttributesModel model=(CoreAttributesModel)getModel();     Map original=model.getAttributeValues();     AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);     model.setAttributeValues(ps.getAttributeValues(original,true,model));     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"message.updated\");     forwardTo();   }  catch (  AMConsoleException a) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",a.getMessage());     forwardTo();   } } "
"public NSDate(byte[] bytes,final int startIndex,final int endIndex){   date=new Date(EPOCH + (long)(1000 * BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex))); } "
"public void runTest() throws Throwable {   String namespaceURI=\"http://www.usa.com\";   String qualifiedName=\"dmstc:domestic\";   Document doc;   Node arg;   NodeList elementList;   Node testAddress;   NamedNodeMap attributes;   Node retnode;   String value;   doc=(Document)load(\"staffNS\",true);   arg=doc.createAttributeNS(namespaceURI,qualifiedName);   arg.setNodeValue(\"newValue\");   elementList=doc.getElementsByTagName(\"address\");   testAddress=elementList.item(0);   attributes=testAddress.getAttributes();   retnode=attributes.setNamedItemNS(arg);   value=retnode.getNodeValue();   assertEquals(\"throw_Equals\",\"Yes\",value); } "
"void removeAt(final int removeIndex){   final Object[] items=this.items;   if (removeIndex == takeIndex) {     items[takeIndex]=null;     if (++takeIndex == items.length)     takeIndex=0;     count--;     if (itrs != null)     itrs.elementDequeued();   }  else {     final int putIndex=this.putIndex;     for (int i=removeIndex; ; ) {       int next=i + 1;       if (next == items.length)       next=0;       if (next != putIndex) {         items[i]=items[next];         i=next;       }  else {         items[i]=null;         this.putIndex=i;         break;       }     }     count--;     if (itrs != null)     itrs.removedAt(removeIndex);   }   notFull.signal(); } "
"public void endContent(){ } "
"public SimpleCountingIdlingResource(String resourceName){   mResourceName=checkNotNull(resourceName); } "
"public String transformX509ToSAML2(SAML2SubjectConfirmation subjectConfirmation,String stsClientCertHeaderName,X509Certificate clientCertificate,X509Certificate hokProofCert) throws IOException {   X509TokenState tokenState=new X509TokenState();   RestSTSTokenTranslationInvocationState invocationState=RestSTSTokenTranslationInvocationState.builder().inputTokenState(tokenState.toJson()).outputTokenState(buildSAML2TokenCreationState(subjectConfirmation,hokProofCert).toJson()).build();   return invokeTokenTranslation(invocationState.toJson().toString(),stsClientCertHeaderName,clientCertificate); } "
"public long changeGenerationId(long generationId){ synchronized (generationIDLock) {     long oldGenerationId=this.generationId;     if (this.generationId != generationId) {       clearDbs();       this.generationId=generationId;       this.generationIdSavedStatus=false;     }     return oldGenerationId;   } } "
"public void loadArg(final int arg){   loadInsn(argumentTypes[arg],getArgIndex(arg)); } "
"public void rewind(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);   DynArrayOperations $self=(DynArrayOperations)$so.servant;   try {     $self.rewind();   }   finally {     _servant_postinvoke($so);   } } "
"public final boolean isWifiEnabled(){   boolean wifiState=false;   WifiManager wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);   if (wifiManager != null) {     wifiState=wifiManager.isWifiEnabled();   }   return wifiState; } "
"public final int decrementAndGet(){   return unsafe.getAndAddInt(this,valueOffset,-1) - 1; } "
"@AfterClass public static void afterClass(){   f.clearTestTables(); } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public Separator(){   this(null); } "
"public void endPrefixMapping(String prefix) throws SAXException {   if (contentHandler != null) {     contentHandler.endPrefixMapping(prefix);   } } "
"public byte[] decode(byte[] bytes) throws DecoderException {   return decodeQuotedPrintable(bytes); } "
"protected File installGofabric8IfNotAvailable() throws MojoExecutionException {   File gofabric8=ProcessUtil.findExecutable(log,GOFABRIC8);   if (gofabric8 == null) {     validateFabric8Dir();     String fileName=GOFABRIC8;     if (Platform.windows.equals(getPlatform())) {       fileName+=\".exe\";     }     gofabric8=new File(fabric8BinDir,fileName);     if (!gofabric8.exists() || !gofabric8.isFile() || !gofabric8.canExecute()) {       downloadGoFabric8(gofabric8);     }     if (!ProcessUtil.folderIsOnPath(log,fabric8BinDir)) {       updateStartupScriptInstructions();     }   }  else {     log.info(\"Found %s\",gofabric8);     runGofabric8(gofabric8,\"version\");   }   return gofabric8; } "
"private boolean nodeEquals(Tree<E> thisNode,Tree<E> thatNode){   int nodeCount=thisNode.children.size();   if (!(nodeCount == thatNode.children.size())) {     return false;   }   if (!(thisNode.item == null ? thatNode.item == null : thisNode.item.equals(thatNode.item))) {     return false;   }   boolean equals=true;   int i=0;   while (equals && i < nodeCount) {     equals=nodeEquals(thisNode.children.get(i),thatNode.children.get(i));     i++;   }   return equals; } "
"public void end(){   inProgress=false; } "
"public static String toString(final Iterable<?> iterable){   if (iterable instanceof Collection) {     return iterable.toString();   }  else {     final StringBuilder builder=new StringBuilder();     boolean firstValue=true;     builder.append('[');     for (    final Object value : iterable) {       if (!firstValue) {         builder.append(\", \");       }       builder.append(value);       firstValue=false;     }     builder.append(']');     return builder.toString();   } } "
"public static Function<JsonValue,JsonValue,JsonValueException> resolvedLocation(){   return new ResolveLocationJsonValueFunction(); } "
"public com.sun.identity.saml2.jaxb.xmlsig.X509DataType createX509DataType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl(); } "
"private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {   java.io.OutputStream tempOutputStream=outputStream;   outputStream=null;   out.defaultWriteObject();   outputStream=tempOutputStream; } "
"public static final byte[] longToBytes(long value,int size){   if (size < 1) {     throw new IllegalArgumentException(\"The array must be at least of size 1\");   }   byte[] result=new byte[size];   int shift=0;   for (int i=size - 1; i >= 0; i--) {     result[i]=(byte)(value >>> shift);     shift+=8;   }   return result; } "
"public synchronized void unregister(RegisteredListener listener){   if (handlerslots.get(listener.getPriority()).remove(listener)) {     handlers=null;   } } "
"private void removeMatchingRuleUse(String definition,SchemaBuilder newSchemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {   Schema currentSchema=newSchemaBuilder.toSchema();   String mruOid=SchemaUtils.parseMatchingRuleUseOID(definition);   if (!currentSchema.hasMatchingRuleUse(mruOid)) {     LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_MR_USE.get(mruOid);     throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);   }   newSchemaBuilder.removeMatchingRuleUse(mruOid);   addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getMatchingRuleUse(mruOid))); } "
"public long startTimeInMilliseconds(){   return startTimeInMilliseconds; } "
"@Override public int hashCode(){   return _canonicalName.hashCode(); } "
"private void skip(){   index++; } "
"private void disconnectFromReplServer() throws Exception {   String synchroServerStringDN=\"cn=\" + testName + \", cn=domains,\"+ SYNCHRO_PLUGIN_DN;   assertNotNull(synchroServerEntry);   DN synchroServerDN=DN.valueOf(synchroServerStringDN);   deleteEntry(synchroServerDN);   synchroServerEntry=null;   configEntriesToCleanup.remove(synchroServerDN); } "
"public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {   if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThanOrEqual(this);   return this.num() >= obj2.num(); } "
"public void test_SSLEngineResultStatus_values(){   boolean flag=false;   String[] str={\"BUFFER_OVERFLOW\",\"BUFFER_UNDERFLOW\",\"CLOSED\",\"OK\"};   SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();   if (enS.length == str.length) {     for (int i=0; i < enS.length; i++) {       flag=false;       for (int j=0; j < str.length; j++) {         if (enS[i].toString().equals(str[j])) {           flag=true;           break;         }       }       assertTrue(\"Incorrect Status\",flag);     }   }  else {     fail(\"Incorrect number of enum constant was returned\");   } } "
"public Enumeration depthFirstEnumeration(){   return postorderEnumeration(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(entitygetpublicidnull.class,args); } "
"public void testIsWritable(){   try {     assertTrue(rsmd.isWritable(1));     assertTrue(rsmd.isWritable(2));     assertTrue(rsmd.isWritable(3));   }  catch (  SQLException e1) {     fail(\"ResultSetMetaDataTest.isWritable\" + e1.getMessage());     e1.printStackTrace();   }   try {     rsmd.isWritable(0);     fail(\"SQLException is not thrown\");   }  catch (  SQLException e) {   } } "
"public void stopJump(){   jump=false; } "
"public StringBuilder encodeBody(StringBuilder buffer){   return buffer.append(this.privacy); } "
"public void fatalError(SAXParseException e) throws SAXException {   throw e; } "
"public void writeStatement(Statement oldStm){   Statement newStm=cloneStatement(oldStm);   if (oldStm.getTarget() != this && executeStatements) {     try {       newStm.execute();     }  catch (    Exception e) {       getExceptionListener().exceptionThrown(new Exception(\"Encoder: discarding statement \" + newStm,e));     }   } } "
"public void testGetFeatureDescriptors02(){   BeanNameELResolver resolver=createBeanNameELResolver();   Object result=resolver.getFeatureDescriptors(null,new Object());   Assert.assertNull(result); } "
"public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {   this.in=null;   this.buffer=encoded;   this.offset=offset;   next();   if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {     throw new ASN1Exception(\"Wrong content length\");   } } "
"public boolean checkDependencies(AddOperation op){   final CSN csn=OperationContext.getCSN(op);   final PendingChange change=getPendingChange(csn);   if (change == null) {     return false;   }   boolean hasDependencies=false;   final DN targetDN=op.getEntryDN();   for (  PendingChange pendingChange : activeAndDependentChanges) {     if (pendingChange.getCSN().isNewerThanOrEqualTo(csn)) {       break;     }     final LDAPUpdateMsg pendingMsg=pendingChange.getLDAPUpdateMsg();     if (pendingMsg instanceof DeleteMsg) {       if (pendingMsg.getDN().equals(targetDN)) {         hasDependencies=true;         addDependency(change);       }     }  else     if (pendingMsg instanceof AddMsg) {       if (pendingMsg.getDN().isSuperiorOrEqualTo(targetDN)) {         hasDependencies=true;         addDependency(change);       }     }  else     if (pendingMsg instanceof ModifyDNMsg) {       if (pendingMsg.getDN().equals(targetDN)) {         hasDependencies=true;         addDependency(change);       }  else {         final ModifyDNMsg pendingModDn=(ModifyDNMsg)pendingMsg;         if (pendingModDn.newDNIsParent(targetDN)) {           hasDependencies=true;           addDependency(change);         }       }     }   }   return hasDependencies; } "
"public static ContainerListener add(ContainerListener a,ContainerListener b){   return (ContainerListener)addInternal(a,b); } "
"public boolean isNameIDEncryptionEnabled(String providerID){   EntityConfigElement entityConfig=null;   try {     entityConfig=idffMetaManager.getEntityConfig(ROOT_REALM,providerID);   }  catch (  IDFFMetaException imex) {     ProviderUtil.debug.error(\"IDFFProviderManager.isNameIDEncryptionEnabled:\",imex);   }   if (entityConfig == null) {     return false;   }   BaseConfigType baseConfig=IDFFMetaUtils.getSPDescriptorConfig(entityConfig);   if (baseConfig == null) {     baseConfig=IDFFMetaUtils.getIDPDescriptorConfig(entityConfig);     if (baseConfig == null) {       return false;     }   }   Map attrMap=IDFFMetaUtils.getAttributes(baseConfig);   if ((attrMap == null) || (attrMap.isEmpty())) {     return false;   }   List values=(List)attrMap.get(IFSConstants.ENABLE_NAMEID_ENCRYPTION);   if ((values == null) || values.isEmpty()) {     return false;   }   return ((String)values.get(0)).equalsIgnoreCase(\"true\"); } "
"public boolean runningWithGoal(String... goals) throws MojoExecutionException {   for (  String goal : goals) {     if (goalFinder.runningWithGoal(project,session,goal)) {       return true;     }   }   return false; } "
"protected String encodeBody(){   return encodeBody(new StringBuilder()).toString(); } "
"protected void releaseConnection(){   try {     managedConn.releaseConnection();   }  catch (  IOException ignored) {     this.log.debug(\"IOException releasing connection\",ignored);   }   managedConn=null; } "
"private void addObjectIfNotFound(Object obj,Vector v){   int n=v.size();   boolean addIt=true;   for (int i=0; i < n; i++) {     if (v.elementAt(i) == obj) {       addIt=false;       break;     }   }   if (addIt) {     v.addElement(obj);   } } "
"public void write_value(java.io.Serializable value,String repository_id){   throw new org.omg.CORBA.NO_IMPLEMENT(); } "
"public CoreTokenException(int errorCode,Object[] params){   this.errorCode=errorCode;   this.params=params;   this.message=getLocalizedMessage(Locale.getDefault()); } "
"public static byte[] decodeFromFile(String filename) throws java.io.IOException {   byte[] decodedData=null;   B64InputStream bis=null;   try {     java.io.File file=new java.io.File(filename);     byte[] buffer=null;     int length=0;     int numBytes=0;     if (file.length() > Integer.MAX_VALUE) {       throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");     }     buffer=new byte[(int)file.length()];     bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);     while ((numBytes=bis.read(buffer,length,4096)) >= 0) {       length+=numBytes;     }     decodedData=new byte[length];     System.arraycopy(buffer,0,decodedData,0,length);   }  catch (  java.io.IOException e) {     throw e;   }  finally {     try {       bis.close();     }  catch (    Exception e) {     }   }   return decodedData; } "
"private void initView(){   mContent=(TextView)findViewById(R.id.content);   mLayout=(LinearLayout)findViewById(R.id.open);   mHint=(TextView)findViewById(R.id.hint);   mImage=(ImageView)findViewById(R.id.imageview);   mLayout.setOnClickListener(this);   mContent.setMaxLines(mMin_lines); } "
"public PasswordExpiredControl(){   this(false); } "
"public String toString(){   return (\"UserPrincipal:  \" + name); } "
"@AfterClass public void cleanup() throws Exception {   String userRootDN=\"ds-cfg-backend-id=userRoot,cn=Backends,cn=config\";   ModifyRequest modifyRequest=Requests.newModifyRequest(userRootDN).addModification(DELETE,\"ds-cfg-base-dn\",\"o=airius.com\");   ModifyOperation modifyOperation=getRootConnection().processModify(modifyRequest);   assertEquals(modifyOperation.getResultCode(),ResultCode.SUCCESS); } "
"public SIPHeader parse() throws ParseException {   if (debug)   dbg_enter(\"ErrorInfoParser.parse\");   ErrorInfoList list=new ErrorInfoList();   try {     headerName(TokenTypes.ERROR_INFO);     while (lexer.lookAhead(0) != '\\n') {       do {         ErrorInfo errorInfo=new ErrorInfo();         errorInfo.setHeaderName(SIPHeaderNames.ERROR_INFO);         this.lexer.SPorHT();         this.lexer.match('<');         URLParser urlParser=new URLParser((Lexer)this.lexer);         GenericURI uri=urlParser.uriReference(true);         errorInfo.setErrorInfo(uri);         this.lexer.match('>');         this.lexer.SPorHT();         super.parse(errorInfo);         list.add(errorInfo);         if (lexer.lookAhead(0) == ',') {           this.lexer.match(',');         }  else         break;       }  while (true);     }     return list;   }   finally {     if (debug)     dbg_leave(\"ErrorInfoParser.parse\");   } } "
"public DigestInputStream(InputStream stream,MessageDigest digest){   super(stream);   setMessageDigest(digest); } "
"@Override public void close(){   connection.close(); } "
"public static IOFileFilter falseFileFilter(){   return FalseFileFilter.FALSE; } "
"byte[] wrap(final byte[] clearBytes,final int offset,final int len) throws SaslException {   return saslServer.wrap(clearBytes,offset,len); } "
"public void testNegateNegative(){   String a=\"-92948782094488478231212478987482988429808779810457634781384756794987\";   int aScale=41;   String c=\"92948782094488478231212478987482988429808779810457634781384756794987\";   int cScale=41;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);   assertEquals(\"incorrect value\",cNumber,aNumber.negate()); } "
"public boolean hasStreams(){   return streams.size() > 0; } "
"@Action(name=\"stop\",operationDescription=@Operation(errors={@ApiError(code=400,description=RECORD_RESOURCE + ERROR_400_DESCRIPTION)},description=RECORD_RESOURCE + \"operation.stop.description\"),response=@Schema(schemaResource=\"RecordStatus.schema.json\")) public Promise<ActionResponse,ResourceException> actionStop(Context serverContext,ActionRequest actionRequest){   try {     Record record=debugRecorder.stopRecording();     if (record == null) {       return new BadRequestException(\"No record or it's already stopped.\").asPromise();     }  else {       JsonObject result=JsonValueBuilder.jsonValue();       result.put(STATUS_LABEL,false);       result.put(RECORD_LABEL,record.exportJson().asMap());       return newResultPromise(newActionResponse(result.build()));     }   }  catch (  RecordException e) {     debug.message(\"Record can't be stopped.\",e);     return new BadRequestException(\"Record can't be stopped.\",e).asPromise();   } } "
"public boolean findAuthRole(String role){   if (role == null)   return false;   for (int i=0; i < authRoles.length; i++) {     if (role.equals(authRoles[i]))     return true;   }   return false; } "
"private static LDAPFilter createLessOrEqualFilter(AttributeValueAssertion ava) throws IOException {   return LDAPFilter.createLessOrEqualFilter(ava.getName(),ByteStringUtility.convertValue(ava.getValue())); } "
"@Override public boolean equals(Object obj){   if (this == obj) {     return true;   }   if (obj instanceof DecimalStyle) {     DecimalStyle other=(DecimalStyle)obj;     return (zeroDigit == other.zeroDigit && positiveSign == other.positiveSign && negativeSign == other.negativeSign && decimalSeparator == other.decimalSeparator);   }   return false; } "
"public Tree(){   this(DEFAULT_TYPE,DEFAULT_SPECIES,DEFAULT_DIRECTION); } "
"Name parameter(int n){   assert (n < arity);   Name param=names[n];   assert (param.isParam());   return param; } "
"public UnauthorizedClientException(){   this(\"The client is not authorized to request an authorization code using this method.\"); } "
"@SuppressWarnings(\"unchecked\") @Override public PdfName copyTo(PdfDocument document,boolean allowDuplicating){   return (PdfName)super.copyTo(document,allowDuplicating); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdataindexsizeerrsubstringnegativeoffset.class,args); } "
"@Override public int hashCode(){   int hash=7;   hash=29 * hash + (this.host != null ? this.host.hashCode() : 0);   hash=29 * hash + this.port;   return hash; } "
"public Value __findObjectInCurrentScopeWithName(String name,SemanticScope scope){   LeftValue v=scope.getLeftValue(name);   if (v != null)   return new Ins.TLoad(v,scope,LineCol.SYNTHETIC);   Ins.This aThis=scope.getThis();   if (aThis != null) {     SFieldDef field=findFieldFromTypeDef(name,aThis.type(),aThis.type(),FIND_MODE_ANY,true);     if (field == null)     return NullValue.get();     return new Ins.GetField(field,aThis,LineCol.SYNTHETIC);   }  else {     SFieldDef field=findFieldFromTypeDef(name,scope.type(),scope.type(),FIND_MODE_STATIC,true);     if (field == null)     return NullValue.get();     return new Ins.GetStatic(field,LineCol.SYNTHETIC);   } } "
"@Override public synchronized List<E> subList(int start,int end){   return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this); } "
"public TransportNotSupportedException(){   super(); } "
"private final boolean compareAndSetTail(Node expect,Node update){   return unsafe.compareAndSwapObject(this,tailOffset,expect,update); } "
"private StringBuffer format(BigDecimal number,StringBuffer result,FieldDelegate delegate){   if (multiplier != 1) {     number=number.multiply(getBigDecimalMultiplier());   }   boolean isNegative=number.signum() == -1;   if (isNegative) {     number=number.negate();   } synchronized (digitList) {     int maxIntDigits=getMaximumIntegerDigits();     int minIntDigits=getMinimumIntegerDigits();     int maxFraDigits=getMaximumFractionDigits();     int minFraDigits=getMinimumFractionDigits();     int maximumDigits=maxIntDigits + maxFraDigits;     digitList.set(isNegative,number,useExponentialNotation ? ((maximumDigits < 0) ? Integer.MAX_VALUE : maximumDigits) : maxFraDigits,!useExponentialNotation);     return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);   } } "
"public void test_Of_EEE(){   EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c);   assertEquals(\"Size of enumSet should be 3:\",3,enumSet.size());   assertTrue(\"enumSet should contain EnumWithSubclass.a:\",enumSet.contains(EnumWithInnerClass.a));   assertTrue(\"Should return true\",enumSet.contains(EnumWithInnerClass.c));   try {     EnumSet.of((EnumWithInnerClass)null,null,null);     fail(\"Should throw NullPointerException\");   }  catch (  NullPointerException npe) {   }   enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.b);   assertEquals(\"enumSet should contain 2 elements:\",2,enumSet.size());   EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c);   assertEquals(3,hugeEnumSet.size());   assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));   assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.c));   try {     EnumSet.of((HugeEnumWithInnerClass)null,null,null);     fail(\"Should throw NullPointerException\");   }  catch (  NullPointerException npe) {   }   hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.b);   assertEquals(2,hugeEnumSet.size()); } "
"private String checkForTopLevelRealm(String realm){   if (StringUtils.isBlank(realm)) {     return null;   }   if (realm.equalsIgnoreCase(TOP_LEVEL_REALM)) {     return FORWARD_SLASH;   }  else {     return realm;   } } "
"public static void deregisterInitializationCompletedListener(InitializationCompletedListener listener){   directoryServer.initializationCompletedListeners.remove(listener); } "
"public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){   return getPersistence().fetchByField2_First(field2,orderByComparator); } "
"public static NewSuffixOptions createEmpty(List<String> baseDNs){   NewSuffixOptions ops=new NewSuffixOptions(baseDNs);   ops.type=Type.LEAVE_DATABASE_EMPTY;   return ops; } "
"public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {   return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator); } "
"public void addNotify(ComponentPeer peer){   if (peer == componentPeer)   return;   componentPeer=peer;   for (Component c=component; c != null && peer instanceof LightweightPeer; c=c.getParent()) {     peer=c.getPeer();   }   if (peer instanceof DropTargetPeer) {     nativePeer=peer;     ((DropTargetPeer)peer).addDropTarget(this);   }  else {     nativePeer=null;   } } "
"public static UIOutput createOutputText(final String el,final boolean b){   return null; } "
"public void applyDismissing(ViewPropertyAnimator animator,float currValue,float endValue,float velocity,float maxDistance){   AnimatorProperties properties=getDismissingProperties(currValue,endValue,velocity,maxDistance);   animator.setDuration(properties.duration);   animator.setInterpolator(properties.interpolator); } "
"@Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){   return fooPersistence.update(foo); } "
"public void testCallingProceedingTerminatedScenario(){   try {     Request invite=createTiInviteRequest(null,null,null);     ClientTransaction tran=null;     try {       eventCollector.collectRequestEvent(riSipProvider);       tran=tiSipProvider.getNewClientTransaction(invite);       tran.sendRequest();     }  catch (    SipException ex) {       throw new TiUnexpectedError(\"A SipExceptionOccurred while trying to send request!\",ex);     } catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     waitForMessage();     RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();     if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError(\"The invite request was not received by the RI!\");     assertEquals(TransactionState.CALLING,tran.getState());     try {       eventCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);     waitForMessage();     inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();     assertNotNull(\"The invite request was not retransmitted!\",inviteReceivedEvent);     assertNotNull(\"The invite request was not retransmitted!\",inviteReceivedEvent.getRequest());     assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());     assertEquals(TransactionState.CALLING,tran.getState());     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TiUnexpectedError(\"Failed to register a SipListener with TI\",ex);     }     try {       Response resp=riMessageFactory.createResponse(Response.TRYING,inviteReceivedEvent.getRequest());       addStatus(inviteReceivedEvent.getRequest(),resp);       riSipProvider.sendResponse(resp);     }  catch (    Throwable ex) {       throw new TckInternalError(\"The TCK could not send a trying response back to the TI\",ex);     }     waitForMessage();     ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();     assertNotNull(\"The Tested Implementation did not pass a 1xx response to the TU!\",responseEvent);     assertNotNull(\"The Tested Implementation did not pass a 1xx response to the TU!\",responseEvent.getResponse());     assertTrue(\"A response different from TYING was passed to the TU!\",responseEvent.getResponse().getStatusCode() == Response.TRYING);     assertSame(\"The TRYING response was not associated with the right transaction\",tran,responseEvent.getClientTransaction());     assertEquals(\"The ClientTransaction did not pass in the PROCEEDING state after \" + \"receiving 1xx provisional response\",tran.getState(),TransactionState.PROCEEDING);     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TiUnexpectedError(\"Failed to register a SipListener with TI\",ex);     }     SipEventCollector ackCollector=new SipEventCollector();     try {       ackCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     Response ok=null;     try {       ok=riMessageFactory.createResponse(Response.OK,inviteReceivedEvent.getRequest());       ContactHeader contact=riHeaderFactory.createContactHeader(((ToHeader)ok.getHeader(\"To\")).getAddress());       ok.addHeader(contact);       addStatus(inviteReceivedEvent.getRequest(),ok);       riSipProvider.sendResponse((Response)ok.clone());     }  catch (    Throwable ex) {       throw new TckInternalError(\"The TCK could not send an OK response back to the TI\",ex);     }     waitForMessage();     responseEvent=eventCollector.extractCollectedResponseEvent();     assertNotNull(\"The Tested Implementation did not pass a 200 OK response to the TU!\",responseEvent);     assertNotNull(\"The Tested Implementation did not pass a 200 OK response to the TU!\",responseEvent.getResponse());     assertSame(\"The OK response was not associated with the right transaction\",tran,responseEvent.getClientTransaction());     assertSame(\"A response different from OK was passed to the TU\",tran,responseEvent.getClientTransaction());     assertEquals(\"The ClientTransaction did not pass in the TERMINATED state after \" + \"receiving 200 final response\",tran.getState(),TransactionState.TERMINATED);     RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();     if (ackReceivedEvent != null)     logger.error(\"Shouldn't have received that=\" + ackReceivedEvent.getRequest());     assertNull(\"The TI sent an ACK to an OK (this is TU's job)!\",ackReceivedEvent);     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TiUnexpectedError(\"Failed to register a SipListener with TI\",ex);     }     try {       ackCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     try {       riSipProvider.sendResponse((Response)ok.clone());     }  catch (    Throwable ex) {       throw new TckInternalError(\"The TCK could not send an OK response back to the TI\",ex);     }     waitForMessage();     responseEvent=eventCollector.extractCollectedResponseEvent();     assertEquals(\"The ClientTransaction mysteriously left the TERMINATED state!\",tran.getState(),TransactionState.TERMINATED);     ackReceivedEvent=ackCollector.extractCollectedRequestEvent();     assertNull(\"The TI sent an ACK request to the second OK response \" + \"(OK acks are TU's responsibility)!\",ackReceivedEvent);   }  catch (  Throwable exc) {     exc.printStackTrace();     fail(exc.getClass().getName() + \": \" + exc.getMessage());   }   assertTrue(new Exception().getStackTrace()[0].toString(),true); } "
"private void writeObject(ObjectOutputStream s) throws IOException {   s.defaultWriteObject();   if (getUIClassID().equals(uiClassID)) {     byte count=JComponent.getWriteObjCounter(this);     JComponent.setWriteObjCounter(this,--count);     if (count == 0 && ui != null) {       ui.installUI(this);     }   } } "
"public WeakReference(T referent){   super(referent); } "
"protected LayoutManager createLayoutManager(){   if (tabPane.getTabLayoutPolicy() == JTabbedPane.SCROLL_TAB_LAYOUT) {     return new TabbedPaneScrollLayout();   }  else {     return new TabbedPaneLayout();   } } "
"public static void resetSharedPreferences(Context context,String stateName){   SharedPreferences state=context.getSharedPreferences(stateName,Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE);   state.edit().clear().commit(); } "
"public void ssoTokenChanged(SSOTokenEvent evt){   try {     SSOTokenID tokenId=evt.getToken().getTokenID();     String tokenIdStr=tokenId.toString();     if (tokenIdStr == null) {       debug.error(\"PolicySSOTokenListener: \" + \"token id string is null\");       return;     } synchronized (PolicyEvaluator.policyResultsCache) {       if (!(resultsCache.isEmpty())) {         Set svcInCache=resultsCache.keySet();         Iterator svcInCacheIter=svcInCache.iterator();         while (svcInCacheIter.hasNext()) {           String svcName=(String)svcInCacheIter.next();           Map svcValue=(Map)resultsCache.get(svcName);           if ((svcValue != null) && (!(svcValue.isEmpty()))) {             Set rscInCache=svcValue.keySet();             Iterator rscInCacheIter=rscInCache.iterator();             while (rscInCacheIter.hasNext()) {               String rscName=(String)rscInCacheIter.next();               Map rscValues=(Map)svcValue.get(rscName);               if ((rscValues != null) && (!(rscValues.isEmpty()))) {                 if ((rscValues.remove(tokenIdStr)) != null) {                   if (debug.messageEnabled()) {                     debug.message(\"cleaned up the \" + \"policy results for an \" + \"expired token \"+ tokenIdStr);                   }                 }               }             }           }         }       }     }     PolicyEvaluator.userNSRoleCache.remove(tokenIdStr);     if (debug.messageEnabled()) {       debug.message(\"PolicySSOTokenListener.ssoTokenChanged():\" + \"cleaned up user nsRole cache for an expired token \" + tokenIdStr);     }     SubjectEvaluationCache.subjectEvaluationCache.remove(tokenIdStr);     if (debug.messageEnabled()) {       debug.message(\"PolicySSOTokenListener.ssoTokenChanged():\" + \"cleaned up subject evaluation cache for an expired token\" + \" \"+ tokenIdStr);     }     LDAPRoles.userLDAPRoleCache.remove(tokenIdStr);     if (debug.messageEnabled()) {       debug.message(\"PolicySSOTokenListener.ssoTokenChanged()cleaned \" + \"up user role cache of LDAPRoles \" + \"for an expired token \"+ tokenIdStr);     }     if (evt.getType() == SSOTokenEvent.SSO_TOKEN_PROPERTY_CHANGED) {       if (debug.messageEnabled()) {         debug.message(\"PolicySSOTokenListener.ssoTokenChanged():\" + \" receieved sso token property change notification, \" + \" clearing cached subject result cache \"+ \" for tokenIdStr XXXXXX\");       }       PolicyCache.getInstance().clearSubjectResultCache(tokenIdStr);     }     PolicyEvaluator.ssoListenerRegistry.remove(tokenIdStr);   }  catch (  Exception e) {     debug.error(\"PolicySSOTokenListener.ssoTokenChanged():policy sso \" + \"token listener\",e);   } } "
"@Override public Boolean run(){   final ClientConnection clientConn=bindOp.getClientConnection();   if (saslServer == null) {     try {       initSASLServer();     }  catch (    final SaslException ex) {       logger.traceException(ex);       final GSSException gex=(GSSException)ex.getCause();       final LocalizableMessage msg;       if (gex != null) {         msg=ERR_SASL_CONTEXT_CREATE_ERROR.get(SASL_MECHANISM_GSSAPI,GSSAPISASLMechanismHandler.getGSSExceptionMessage(gex));       }  else {         msg=ERR_SASL_CONTEXT_CREATE_ERROR.get(SASL_MECHANISM_GSSAPI,getExceptionMessage(ex));       }       clientConn.setSASLAuthStateInfo(null);       bindOp.setAuthFailureReason(msg);       bindOp.setResultCode(ResultCode.INVALID_CREDENTIALS);       return false;     }   }   final ByteString clientCredentials=bindOp.getSASLCredentials();   clientConn.setSASLAuthStateInfo(null);   try {     final ByteString responseAuthStr=evaluateResponse(clientCredentials);     if (isBindComplete()) {       bindOp.setResultCode(ResultCode.SUCCESS);       bindOp.setSASLAuthUserEntry(authEntry);       final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,authzEntry,mechanism,clientCredentials,DirectoryServer.isRootDN(authEntry.getName()));       bindOp.setAuthenticationInfo(authInfo);       if (isConfidentialIntegrity()) {         final SASLByteChannel saslByteChannel=SASLByteChannel.getSASLByteChannel(clientConn,mechanism,this);         final LDAPClientConnection ldapConn=(LDAPClientConnection)clientConn;         ldapConn.setSASLPendingProvider(saslByteChannel);       }  else {         dispose();         clientConn.setSASLAuthStateInfo(null);       }     }  else {       bindOp.setServerSASLCredentials(responseAuthStr);       clientConn.setSASLAuthStateInfo(this);       bindOp.setResultCode(ResultCode.SASL_BIND_IN_PROGRESS);     }   }  catch (  final SaslException e) {     logger.traceException(e);     final LocalizableMessage msg=ERR_SASL_PROTOCOL_ERROR.get(mechanism,getExceptionMessage(e));     handleError(msg);     return false;   }   return true; } "
"public void end(){   this.postState=new Hashtable<Object,Object>(11);   this.object.storeState(this.postState);   this.removeRedundantState(); } "
"private boolean isNewer(String first,String second) throws NumberFormatException {   if ((first == null) || (second == null))   return false;   if (first.equals(second))   return true;   StringTokenizer fTok=new StringTokenizer(first,\".\",true);   StringTokenizer sTok=new StringTokenizer(second,\".\",true);   int fVersion=0;   int sVersion=0;   while (fTok.hasMoreTokens() || sTok.hasMoreTokens()) {     if (fTok.hasMoreTokens())     fVersion=Integer.parseInt(fTok.nextToken());  else     fVersion=0;     if (sTok.hasMoreTokens())     sVersion=Integer.parseInt(sTok.nextToken());  else     sVersion=0;     if (fVersion < sVersion)     return false;  else     if (fVersion > sVersion)     return true;     if (fTok.hasMoreTokens())     fTok.nextToken();     if (sTok.hasMoreTokens())     sTok.nextToken();   }   return true; } "
"private int[] makeReorderedBuffer(int colFirst,int lastValue,int[] lastExpansion,boolean forward){   int[] result;   int firstValue=ordering.getUnicodeOrder(colFirst);   if (firstValue >= RuleBasedCollator.CONTRACTCHARINDEX) {     firstValue=forward ? nextContractChar(colFirst) : prevContractChar(colFirst);   }   int[] firstExpansion=null;   if (firstValue >= RuleBasedCollator.EXPANDCHARINDEX) {     firstExpansion=ordering.getExpandValueList(firstValue);   }   if (!forward) {     int temp1=firstValue;     firstValue=lastValue;     lastValue=temp1;     int[] temp2=firstExpansion;     firstExpansion=lastExpansion;     lastExpansion=temp2;   }   if (firstExpansion == null && lastExpansion == null) {     result=new int[2];     result[0]=firstValue;     result[1]=lastValue;   }  else {     int firstLength=firstExpansion == null ? 1 : firstExpansion.length;     int lastLength=lastExpansion == null ? 1 : lastExpansion.length;     result=new int[firstLength + lastLength];     if (firstExpansion == null) {       result[0]=firstValue;     }  else {       System.arraycopy(firstExpansion,0,result,0,firstLength);     }     if (lastExpansion == null) {       result[firstLength]=lastValue;     }  else {       System.arraycopy(lastExpansion,0,result,firstLength,lastLength);     }   }   return result; } "
"@Deprecated public boolean equals(String s){   if (s == null || mimeType == null)   return false;   return isMimeTypeEqual(s); } "
"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){   dropAllTables(db);   onCreate(db); } "
"public UpgradeException(String message,Throwable cause){   super(message,cause); } "
"long triggerTime(long delay){   return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay)); } "
"public JoinParser(String callID){   super(callID); } "
"@RequestMapping(value=\"/users/{login:\" + Constants.LOGIN_REGEX + \"}\",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<Void> deleteUser(@PathVariable String login){   log.debug(\"REST request to delete User: {}\",login);   userService.deleteUser(login);   return ResponseEntity.ok().headers(HeaderUtil.createAlert(\"userManagement.deleted\",login)).build(); } "
"public TitledBorder(Border border){   this(border,\"\",LEADING,DEFAULT_POSITION,null,null); } "
"public void remove(int index){   Component c=getComponent(index);   super.remove(index);   if (c != null && !(c instanceof JComponent)) {     getComponentToLayer().remove(c);   }   validateOptimizedDrawing(); } "
"@Override public void addFilterMap(FilterMap filterMap){   validateFilterMap(filterMap);   filterMaps.add(filterMap);   fireContainerEvent(\"addFilterMap\",filterMap); } "
"private final void stop(){   logMessage(thread.getName() + \" received stop() request.\");   stopped=true;   thread.interrupt(); } "
"private void alterMaxAge(OAuth2Request req){   final Request request=req.getRequest();   Form query=request.getResourceRef().getQueryAsForm();   Parameter param=query.getFirst(MAX_AGE);   if (param == null) {     param=new Parameter(MAX_AGE,CONFIRMED_MAX_AGE);     query.add(param);   }  else {     param.setValue(CONFIRMED_MAX_AGE);   }   request.getResourceRef().setQuery(query.getQueryString()); } "
"public static void writeSingleByte(OutputStream out,int b) throws IOException {   byte[] buffer=new byte[1];   buffer[0]=(byte)(b & 0xff);   out.write(buffer); } "
"public Object clone(){   if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {     MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),\"clone()\",\"Entry\");   }   return (new ModelMBeanOperationInfo(this)); } "
"protected void increment(){   indentation++; } "
"public org.w3c.dom.Element signWithWSSSAMLTokenProfile(org.w3c.dom.Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,java.util.List ids,String wsfVersion) throws XMLSignatureException {   return sp.signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,wsfVersion); } "
"static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){   while (left <= right && Float.isNaN(a[right])) {     --right;   }   for (int k=right; --k >= left; ) {     float ak=a[k];     if (ak != ak) {       a[k]=a[right];       a[right]=ak;       --right;     }   }   doSort(a,left,right,work,workBase,workLen);   int hi=right;   while (left < hi) {     int middle=(left + hi) >>> 1;     float middleValue=a[middle];     if (middleValue < 0.0f) {       left=middle + 1;     }  else {       hi=middle;     }   }   while (left <= right && Float.floatToRawIntBits(a[left]) < 0) {     ++left;   }   for (int k=left, p=left - 1; ++k <= right; ) {     float ak=a[k];     if (ak != 0.0f) {       break;     }     if (Float.floatToRawIntBits(ak) < 0) {       a[k]=0.0f;       a[++p]=-0.0f;     }   } } "
"public void clear(){   data.remove(ATTR_ACTION_DATA);   data.put(ATTR_PENDING,false); } "
"public static IOFileFilter nameFileFilter(String name,IOCase caseSensitivity){   return new NameFileFilter(name,caseSensitivity); } "
"public HeaderFilter(final MessageType messageType){   this.messageType=messageType; } "
"public void testMaxNegZero(){   byte aBytes[]={45,91,3,-15,35,26,3,91};   int aSign=-1;   byte rBytes[]={0};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=BigInteger.ZERO;   BigInteger result=aNumber.max(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertTrue(\"incorrect sign\",result.signum() == 0); } "
"public String toString(){   StringBuffer sb=new StringBuffer(20 + infoPackage.length() + infoModule.length()+ infoRelease.length()+ infoTimestamp.length()+ infoClassloader.length());   sb.append(\"VersionInfo(\").append(infoPackage).append(':').append(infoModule);   if (!UNAVAILABLE.equals(infoRelease))   sb.append(':').append(infoRelease);   if (!UNAVAILABLE.equals(infoTimestamp))   sb.append(':').append(infoTimestamp);   sb.append(')');   if (!UNAVAILABLE.equals(infoClassloader))   sb.append('@').append(infoClassloader);   return sb.toString(); } "
"public static InputSource sourceToInputSource(Source source){   if (source instanceof SAXSource) {     return ((SAXSource)source).getInputSource();   }  else   if (source instanceof StreamSource) {     StreamSource ss=(StreamSource)source;     InputSource isource=new InputSource(ss.getSystemId());     isource.setByteStream(ss.getInputStream());     isource.setCharacterStream(ss.getReader());     isource.setPublicId(ss.getPublicId());     return isource;   }  else {     return null;   } } "
"public void updateRule(String ruleGroup,String ruleJson,boolean delete) throws Exception {   Map<Short,Rule> ruleMap=this.ruleMap;   if (ruleGroupsActive) {     if (ruleGroup != null) {       ruleMap=ruleGroupMap.get(ruleGroup);       if (ruleMap == null) {         ruleMap=new LinkedHashMap<>(hashSize);         ruleGroupMap.put(ruleGroup,ruleMap);       }     }  else {       throw new PerformantException(\"Supplied rule group is null\");     }   }   if (ruleMap == null) {     throw new PerformantException(\"Rule map not found for rule:\" + ruleJson + \"\\trule-group:\"+ ruleGroup);   }   updateRuleMap(ruleMap,ruleJson,delete); } "
"@Override public int hashCode(){   return totalSeconds; } "
"private Uid executePatchOperations(ConnectorFacade facade,OperationOptions operationOptions,Multimap<String,Attribute> operations,Uid uid) throws IOException, ResourceException {   Set<String> keys=operations.keySet();   for (  String key : keys) {     Set<Attribute> attrs=ImmutableSet.copyOf(operations.get(key));     if (attrs.size() > 0) { switch (key) { case PatchOperation.OPERATION_ADD:         uid=facade.addAttributeValues(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions);       break; case PatchOperation.OPERATION_REMOVE:     try {       uid=facade.removeAttributeValues(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions);     }  catch (    ConnectorException e) {       logger.debug(\"Error removing attribute values for object {}\",uid,e);     }   break; case PatchOperation.OPERATION_REPLACE: default : uid=facade.update(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions); } } } return uid; } "
"private boolean handleMotionEvent(WXGestureType WXGestureType,MotionEvent motionEvent){   if (component.containsGesture(WXGestureType)) {     List<Map<String,Object>> list=createFireEventParam(motionEvent);     for (    Map<String,Object> map : list) {       WXSDKManager.getInstance().fireEvent(component.mInstanceId,component.mDomObj.ref,WXGestureType.toString(),map);     }     return true;   }  else {     return false;   } } "
"public PasswordPolicyConfigManager(ServerContext serverContext){   this.serverContext=serverContext; } "
"public void showDoneButton(boolean animate){   if (animate) {     mButtonStyle=STYLE_NEXT;     toggle();   }  else {     mButtonStyle=STYLE_DONE;     setImageDrawable(mDoneDrawable);   } } "
"private void applyFriction(){   if (xVel < maxVel) {     if (xVel < friction)     xVel=friction;     if ((sMario.isLeft() && !isLeftCollided) || (sMario.isRight() && !isRightCollided)) {       xVel+=groundRunAccel;       if (sMario.isSprinting())       xVel+=groundSprintAccel;     }   }  else   if (xVel > maxVelExceedThreshold) {     xVel-=friction;   } } "
"@SuppressWarnings(\"deprecation\") private static void addSupportForGlobalEventAttributes(SQLiteDatabase db){   RegisteredEventAttributeDbAdapter eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(db);   DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);   Cursor cursor=dataTypeDbAdapter.fetchAll(OmniDate.DB_NAME,OmniDate.class.getName());   cursor.moveToFirst();   long dataTypeIdDate=CursorHelper.getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);   long dateAttributeID=eventAttributeDbAdapter.insertGeneralAttribute(Event.ATTRIBUTE_TIME,dataTypeIdDate);   cursor=dataTypeDbAdapter.fetchAll(OmniArea.DB_NAME,OmniArea.class.getName());   cursor.moveToFirst();   long dataTypeIdArea=CursorHelper.getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);   long areaAttributeID=eventAttributeDbAdapter.insertGeneralAttribute(Event.ATTRIBUTE_LOCATION,dataTypeIdArea);   cursor.close();   RuleFilterDbAdapter ruleFilterDbAdapter=new RuleFilterDbAdapter(db);   RuleActionParameterDbAdapter ruleActionParamDbAdapter=new RuleActionParameterDbAdapter(db);   generalizeAttribute(SMSReceivedEvent.ATTRIB_MESSAGE_TIME,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);   generalizeAttribute(PhoneCallEvent.ATTRIBUTE_TIMESTAMP,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);   generalizeAttribute(LocationChangedEvent.ATTRIBUTE_CURRENT_LOCATION,Event.ATTRIBUTE_LOCATION,areaAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);   generalizeAttribute(TimeTickEvent.ATTRIBUTE_CURRENT_TIME,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter); } "
"public boolean containsAttribute(Object name,Object value){   return value.equals(getAttribute(name)); } "
"public static boolean removeAccountFederation(NameIDInfo info,String userID) throws WSFederationException {   String classMethod=\"AccountUtils.removeAccountFederation: \";   WSFederationUtils.debug.message(classMethod);   if (info == null) {     throw new WSFederationException(WSFederationUtils.bundle.getString(\"nullNameIDInfo\"));   }   if (userID == null) {     throw new WSFederationException(WSFederationUtils.bundle.getString(\"nullUserID\"));   }   try {     Set existingFed=WSFederationUtils.dsProvider.getAttribute(userID,getNameIDInfoAttribute());     Set existingInfoKey=WSFederationUtils.dsProvider.getAttribute(userID,getNameIDInfoKeyAttribute());     if (existingFed == null || existingFed.isEmpty()) {       if (WSFederationUtils.debug.messageEnabled()) {         WSFederationUtils.debug.message(classMethod + \"user does not have account federation infos.\");       }       return false;     }     String infoValue=info.toValueString();     String infoKeyValue=info.getNameIDInfoKey().toValueString();     if (WSFederationUtils.debug.messageEnabled()) {       WSFederationUtils.debug.message(classMethod + \"info to be removed:\" + infoValue+ \"user=\"+ userID+ \"infoKeyValue = \"+ infoKeyValue);     }     if (existingFed.contains(infoValue)) {       existingFed.remove(infoValue);       if (existingInfoKey != null && existingInfoKey.contains(infoKeyValue)) {         existingInfoKey.remove(infoKeyValue);       }       Map map=new HashMap();       map.put(getNameIDInfoAttribute(),existingFed);       map.put(getNameIDInfoKeyAttribute(),existingInfoKey);       WSFederationUtils.dsProvider.setAttributes(userID,map);       return true;     }     if (WSFederationUtils.debug.messageEnabled()) {       WSFederationUtils.debug.message(classMethod + \"account federation info not found.\");     }     return false;   }  catch (  DataStoreProviderException dse) {     WSFederationUtils.debug.error(classMethod + \"DataStoreProviderException\",dse);     throw new WSFederationException(dse);   } catch (  SAML2Exception se) {     WSFederationUtils.debug.error(classMethod + \"SAML2Exception\",se);     throw new WSFederationException(se);   } } "
"protected SecureRandom(SecureRandomSpi secureRandomSpi,Provider provider){   this(secureRandomSpi,provider,null); } "
"public static void main(final String[] args){   DOMTestCase.doMain(setAttributeNodeNS05.class,args); } "
"public static void executeRandomModifiableVariableModification(WorkflowTrace workflow,ConnectionEnd connectionEnd,String pattern){   Field f=null;   ModifiableVariableHolder holder=null;   while (f == null) {     holder=getRandomModifiableVariableHolder(workflow,connectionEnd);     Field randomField=holder.getRandomModifiableVariableField();     if (pattern == null || randomField.getName().toLowerCase().contains(pattern)) {       f=randomField;     }   }   LOGGER.debug(\"Executing random variable modification on field {} in {}\",f,holder);   executeModifiableVariableModification(holder,f); } "
"public SubjectConfirmation(org.w3c.dom.Element subjectConfirmationElement) throws SAMLException {   Element elt=(Element)subjectConfirmationElement;   String eltName=elt.getLocalName();   if (eltName == null) {     if (SAMLUtilsCommon.debug.messageEnabled()) {       SAMLUtilsCommon.debug.message(\"SubjectConfirmation: local name \" + \"missing\");     }     throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"nullInput\"));   }   if (!(eltName.equals(\"SubjectConfirmation\"))) {     if (SAMLUtilsCommon.debug.messageEnabled()) {       SAMLUtilsCommon.debug.message(\"SubjectConfirmation: \" + \"invalid root element\");     }     throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"invalidElement\"));   }   NodeList nl=elt.getChildNodes();   int length=nl.getLength();   for (int n=0; n < length; n++) {     Node child=(Node)nl.item(n);     if (child.getNodeType() != Node.ELEMENT_NODE) {       continue;     }     String childName=child.getLocalName();     if (childName.equals(\"ConfirmationMethod\")) {       _confirmationMethodList.add(XMLUtils.getElementValue((Element)child));     }  else     if (childName.equals(\"SubjectConfirmationData\")) {       if (_subjectConfirmationData != null) {         if (SAMLUtilsCommon.debug.messageEnabled()) {           SAMLUtilsCommon.debug.message(\"SubjectConfirmation: \" + \"SubjectConfirmationData already parsed\");         }         throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"moreElement\"));       }       _subjectConfirmationData=(Element)child;     }  else     if (childName.equals(\"KeyInfo\")) {       if (_keyInfo != null) {         if (SAMLUtilsCommon.debug.messageEnabled()) {           SAMLUtilsCommon.debug.message(\"SubjectConfirmation: \" + \"KeyInfo already parsed\");         }         throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"moreElement\"));       }       _keyInfo=(Element)child;     }  else {       if (SAMLUtilsCommon.debug.messageEnabled())       SAMLUtilsCommon.debug.message(\"SubjectConfirmation: \" + \"unsupported element KeyInfo in SubjectConfirmation\");       throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"unsupportedElement\"));     }   }   if (_confirmationMethodList.isEmpty()) {     if (SAMLUtilsCommon.debug.messageEnabled())     SAMLUtilsCommon.debug.message(\"SubjectConfirmation: Mandatory \" + \"element confirmation method missing\");     throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"missingElement\"));   } } "
"@Override public void onTokenDeleted(Context context){ } "
"public ServicesEditViewBean(){   super(\"ServicesEdit\",DEFAULT_DISPLAY_URL,null);   String lserviceName=(String)getPageSessionAttribute(SERVICE_NAME);   if (lserviceName != null) {     initialize(lserviceName);   } } "
"public IIOMetadataNode(String nodeName){   this.nodeName=nodeName; } "
"private MutableBigInteger binaryGCD(MutableBigInteger v){   MutableBigInteger u=this;   MutableBigInteger r=new MutableBigInteger();   int s1=u.getLowestSetBit();   int s2=v.getLowestSetBit();   int k=(s1 < s2) ? s1 : s2;   if (k != 0) {     u.rightShift(k);     v.rightShift(k);   }   boolean uOdd=(k == s1);   MutableBigInteger t=uOdd ? v : u;   int tsign=uOdd ? -1 : 1;   int lb;   while ((lb=t.getLowestSetBit()) >= 0) {     t.rightShift(lb);     if (tsign > 0)     u=t;  else     v=t;     if (u.intLen < 2 && v.intLen < 2) {       int x=u.value[u.offset];       int y=v.value[v.offset];       x=binaryGcd(x,y);       r.value[0]=x;       r.intLen=1;       r.offset=0;       if (k > 0)       r.leftShift(k);       return r;     }     if ((tsign=u.difference(v)) == 0)     break;     t=(tsign >= 0) ? u : v;   }   if (k > 0)   u.leftShift(k);   return u; } "
"public X509Name(String dirName,X509NameEntryConverter converter){   this(DefaultReverse,DefaultLookUp,dirName,converter); } "
"public FunctionBased(PdfColorSpace colorSpace,PdfFunction function){   this(colorSpace.getPdfObject(),function); } "
"public static final ParsedQuery createTestParsedQueryBulkData(){   Query query=new Query();   query.setWhere(\"field1 = 'this is my data'\");   query.setDatabase(Fixtures.DB);   query.setTable(\"mytable\");   WhereClause whereClause=new WhereClause(query.getWhere());   return new ParsedQuery(query,whereClause,createTestIndexWithBulkDataHit()); } "
"public HttpParams copy(){   return this; } "
"public String toHexString(){   final StringBuilder buf=new StringBuilder(24);   for (  final byte b : toByteArray()) {     buf.append(String.format(\"%02x\",b & 0xff));   }   return buf.toString(); } "
"public void initialize(Map configParams) throws PolicyException {   String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);   if (configuredLdapServer == null) {     debug.error(\"DSAMERole.initialize(): failed to get LDAP \" + \"server name. If you enter more than one server name \" + \"in the policy config service's Primary LDAP Server \"+ \"field, please make sure the ldap server name is preceded \"+ \"with the local server name.\");     throw (new PolicyException(ResBundleUtils.rbName,\"invalid_ldap_server_host\",null,null));   }   ldapServer=configuredLdapServer.toLowerCase();   organizationDN=(String)configParams.get(PolicyConfig.IS_ROLES_BASE_DN);   String scope=(String)configParams.get(PolicyConfig.IS_ROLES_SEARCH_SCOPE);   if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {     roleSearchScope=AMConstants.SCOPE_BASE;   }  else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {     roleSearchScope=AMConstants.SCOPE_ONE;   }  else {     roleSearchScope=AMConstants.SCOPE_SUB;   }   try {     timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));     maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));   }  catch (  NumberFormatException nfe) {     debug.error(\"Can not parse search parameters in DSAMERole\",nfe);     timeLimit=5;     maxResults=100;   }   initialized=true; } "
"public final String toString(){   return (name + \", early reflection delay \" + earlyReflectionDelay+ \" ns, early reflection intensity \"+ earlyReflectionIntensity+ \" dB, late deflection delay \"+ lateReflectionDelay+ \" ns, late reflection intensity \"+ lateReflectionIntensity+ \" dB, decay time \"+ decayTime); } "
"@SuppressWarnings({\"unchecked\",\"boxing\"}) public void testSerializationCompatibility() throws Exception {   EnumMap enumColorMap=new EnumMap<Color,Double>(Color.class);   enumColorMap.put(Color.Red,1);   enumColorMap.put(Color.Blue,3);   SerializationTest.verifyGolden(this,enumColorMap); } "
"protected boolean isServiced(String name) throws Exception {   String[] params={name};   String[] signature={\"java.lang.String\"};   Boolean result=(Boolean)mBeanServer.invoke(oname,\"isServiced\",params,signature);   return result.booleanValue(); } "
"protected void zoneWasLoaded(View zone){   loadedZones.addElement(zone);   unloadOldZones(); } "
"public void addInternalSessionListener(){   try {     if (SessionNotificationHandler.handler == null) {       SessionNotificationHandler.handler=new SessionNotificationHandler(SessionCache.getInstance());       PLLClient.addNotificationHandler(SESSION_SERVICE,SessionNotificationHandler.handler);     }     String url=WebtopNaming.getNotificationURL().toString();     SessionOperations operations=sessionOperationStrategy.getOperation(sessionID);     operations.addSessionListener(this,url);   }  catch (  Exception e) {   } } "
"public boolean keepProcessingLine(){   return keepProcessingLine; } "
"@Override public void run(){   try {     while (alive) {       try {         packet.setLength(buffer.length);         socket.receive(packet);         String s=stringFromPacket(packet);         try {           Thread.sleep(100);         }  catch (        InterruptedException ex) {         }         stringToPacket(s.toUpperCase(),packet);         packet.setAddress(InetAddress.getLocalHost());         packet.setPort(2345);         socket.send(packet);       }  catch (      java.io.InterruptedIOException e) {       }     }   }  catch (  java.io.IOException ex) {     ex.printStackTrace();   }  finally {     socket.close();   } } "
"private void attemptLogin(){   if (mAuthTask != null) {     return;   }   mEmailView.setError(null);   mPasswordView.setError(null);   String email=mEmailView.getText().toString();   String password=mPasswordView.getText().toString();   boolean cancel=false;   View focusView=null;   if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {     mPasswordView.setError(getString(R.string.error_invalid_password));     focusView=mPasswordView;     cancel=true;   }   if (cancel) {     focusView.requestFocus();   }  else {     showProgress(true);     mAuthTask=new UserLoginTask(email,password);     mAuthTask.execute((Void)null);     Intent wellBabyIntent=new Intent(this,wellbabyreport.class);     startActivity(wellBabyIntent);   } } "
"public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {   return super.newInstance(javaContentInterface); } "
"public String productReleaseDate(){   return properties.getProperty(\"product.release.date\"); } "
"public static void breakMath(MethodNode mn){   for (  AbstractInsnNode ain : mn.instructions.toArray()) {     if (ain.getType() == AbstractInsnNode.INT_INSN && ain.getOpcode() != Opcodes.NEWARRAY) {       if (isNear(ain)) {         continue;       }       IntInsnNode iin=(IntInsnNode)ain;       int i=randRange(-100,100); switch (randRange(0,3)) { case 0:         iin.operand+=i;       mn.instructions.insert(iin,new InsnNode(Opcodes.ISUB));     mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP));   mn.instructions.insertBefore(iin,OpUtils.toInt(i)); break; case 1: iin.operand-=i; mn.instructions.insert(iin,new InsnNode(Opcodes.IADD)); mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP)); mn.instructions.insertBefore(iin,OpUtils.toInt(i)); break; case 2: iin.operand+=i; mn.instructions.insert(iin,new InsnNode(Opcodes.IADD)); mn.instructions.insert(iin,new InsnNode(Opcodes.INEG)); mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP)); mn.instructions.insertBefore(iin,OpUtils.toInt(i)); break; case 3: iin.operand-=i; mn.instructions.insert(iin,new InsnNode(Opcodes.ISUB)); mn.instructions.insert(iin,new InsnNode(Opcodes.INEG)); mn.instructions.insert(iin,new InsnNode(Opcodes.SWAP)); mn.instructions.insertBefore(iin,OpUtils.toInt(i)); break; } } } } "
"public void error(SAXParseException e) throws SAXException { } "
"public String toXMLString() throws SAML2Exception {   return this.toXMLString(true,false); } "
"public final int length(){   return array.length; } "
"public String toXMLString() throws FSMsgException {   return toXMLString(true,true); } "
"public AccountUsableResponseControl(int secondsBeforeExpiration){   this(false,secondsBeforeExpiration); } "
"private void backupFavorites(BackupDataOutput data) throws IOException {   ContentResolver cr=mContext.getContentResolver();   Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);   try {     cursor.moveToPosition(-1);     while (cursor.moveToNext()) {       final long id=cursor.getLong(ID_INDEX);       final long updateTime=cursor.getLong(ID_MODIFIED);       BackupProtos.Key key=getKey(BackupProtos.Key.FAVORITE,id);       mKeys.add(key);       final String backupKey=keyToBackupKey(key);       if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime || restoredBackupVersion < 4) {         writeRowToBackup(key,packFavorite(cursor),data);       }  else {         if (DEBUG)         Log.d(TAG,\"favorite already backup up: \" + id);       }     }   }   finally {     cursor.close();   } } "
"public boolean equals(Object obj){   if (this == obj)   return true;   if (!(obj instanceof ID3v22Frame)) {     return false;   }   ID3v22Frame that=(ID3v22Frame)obj;   return EqualsUtil.areEqual(this.statusFlags,that.statusFlags) && EqualsUtil.areEqual(this.encodingFlags,that.encodingFlags) && super.equals(that); } "
"private static String orgNameToDN(String orgName){   if ((orgName == null) || (orgName.length() == 0)) {     return (rootSuffix);   }   if (LDAPUtils.isDN(orgName)) {     return (orgName);   }   StringBuilder buf=new StringBuilder();   ArrayList arr=new ArrayList();   StringTokenizer strtok=new StringTokenizer(orgName,\"/\");   while (strtok.hasMoreElements()) {     arr.add(strtok.nextToken());   }   int size=arr.size();   for (int i=0; i < size; i++) {     String theOrg=(String)arr.get(i);     buf.append(AMNamingAttrManager.getNamingAttr(AMObject.ORGANIZATION));     buf.append('=').append(theOrg).append(',');   }   if (rootSuffix.length() > 0) {     buf.append(rootSuffix);   }  else {     buf.deleteCharAt(buf.length() - 1);   }   return (buf.toString()); } "
"public synchronized String encodeMessage(String function,Object[] params){   int index=1;   StringBuilder sb=new StringBuilder(1000);   sb.append(ENVELOPE).append(HEADSTART).append(HEADEND).append(ENV_BODY);   sb.append(\"<ans1:\").append(function).append(\" xmlns:ans1=\\\"http://isp.com/wsdl\\\">\");   for (int i=0; (params != null) && (i < params.length); i++) {     if (params[i] instanceof java.lang.String) {       sb.append(encodeString(\"String_\" + index++,(String)params[i]));     }  else     if (params[i] instanceof java.util.Set) {       sb.append(encodeSet(\"Set_\" + index++,(Set)params[i]));     }  else     if (params[i] instanceof java.util.Map) {       sb.append(encodeMap(\"Map_\" + index++,(Map)params[i]));     }  else     if (params[i] instanceof java.util.List) {       sb.append(encodeList(\"List_\" + index++,(List)params[i]));     }  else     if (params[i] instanceof Integer) {       sb.append(encodeInt(\"int_\" + index++,(Integer)params[i]));     }  else     if (params[i] instanceof Boolean) {       sb.append(encodeBoolean(\"boolean_\" + index++,(Boolean)params[i]));     }  else     if (params[i] == null) {       index++;     }  else {       debug.error(\"SOAPClient: Unknown class: \" + params.getClass().getName());     }   }   sb.append(\"</ans1:\").append(function).append(\">\").append(SUFFIX);   return (sb.toString()); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeprocessinginstructionnodename.class,args); } "
"public static List<String> readAllLines(Path path,Charset cs) throws IOException {   try (BufferedReader reader=newBufferedReader(path,cs)){     List<String> result=new ArrayList<>();     for (; ; ) {       String line=reader.readLine();       if (line == null)       break;       result.add(line);     }     return result;   }  } "
"public AuthenticationEnforcer exceptActions(String... actions){   exceptActions.addAll(Arrays.asList(actions));   return this; } "
"public Assertion(String assertionID,java.lang.String issuer,Date issueInstant,Set statements) throws SAMLException {   super(assertionID,issuer,issueInstant,statements); } "
"public final void testGetAlgParameters04() throws IOException {   boolean performed=false;   for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);       ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));       EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);       assertSame(ap,epki.getAlgParameters());       performed=true;     }  catch (    NoSuchAlgorithmException allowedFailure) {     }   }   assertTrue(\"Test not performed\",performed); } "
"public void testCallingCompletedTerminatedScenario(){   try {     Request invite=createTiInviteRequest(null,null,null);     ClientTransaction tran=null;     try {       eventCollector.collectRequestEvent(riSipProvider);       tran=tiSipProvider.getNewClientTransaction(invite);       tran.sendRequest();     }  catch (    SipException ex) {       throw new TiUnexpectedError(\"A SipExceptionOccurred while trying to send request!\",ex);     } catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     waitForMessage();     RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();     if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError(\"The invite request was not received by the RI!\");     assertEquals(TransactionState.CALLING,tran.getState());     try {       eventCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);     waitForMessage();     inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();     assertNotNull(\"The invite request was not retransmitted!\",inviteReceivedEvent);     assertNotNull(\"The invite request was not retransmitted!\",inviteReceivedEvent.getRequest());     assertEquals(Request.INVITE,inviteReceivedEvent.getRequest().getMethod());     assertEquals(TransactionState.CALLING,tran.getState());     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TiUnexpectedError(\"Failed to register a SipListener with TI\",ex);     }     SipEventCollector ackCollector=new SipEventCollector();     try {       ackCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     Response busyHere=null;     try {       busyHere=riMessageFactory.createResponse(Response.BUSY_HERE,inviteReceivedEvent.getRequest());       addStatus(inviteReceivedEvent.getRequest(),busyHere);       ((ToHeader)busyHere.getHeader(\"to\")).setTag(\"ack-to-test\");       riSipProvider.sendResponse((Response)busyHere.clone());     }  catch (    Throwable ex) {       throw new TckInternalError(\"The TCK could not send a BUSY HERE response back to the TI\",ex);     }     waitForMessage();     ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();     assertNotNull(\"The Tested Implementation did not pass a 300-699 response to the TU!\",responseEvent);     assertNotNull(\"The Tested Implementation did not pass a 300-699 response to the TU!\",responseEvent.getResponse());     assertSame(\"The BUSY_HERE response was not associated with the right transaction\",tran,responseEvent.getClientTransaction());     assertSame(\"A response different from BUSY_HERE was passed to the TU\",tran,responseEvent.getClientTransaction());     assertEquals(\"The ClientTransaction did not pass in the COMPLETED state after \" + \"receiving 300-699 final response\",tran.getState(),TransactionState.COMPLETED);     RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();     assertNotNull(\"The TI did not send an ACK request\",ackReceivedEvent);     assertNotNull(\"The TI did not send an ACK request\",ackReceivedEvent.getRequest());     assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());     waitForMessage();     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TiUnexpectedError(\"Failed to register a SipListener with TI\",ex);     }     try {       ackCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to regiest a SipListener with an RI SipProvider\",ex);     }     try {       riSipProvider.sendResponse((Response)busyHere.clone());     }  catch (    Throwable ex) {       throw new TckInternalError(\"The TCK could not send a BUSY HERE response back to the TI\",ex);     }     waitForMessage();     responseEvent=eventCollector.extractCollectedResponseEvent();     assertNull(\"The Tested Implementation passed a retransmitted 300-699 response \" + \"to the TU instead of just silently acknowledging it!\",responseEvent);     assertEquals(\"The ClientTransaction did not stay long enough in the COMPLETED \" + \"state.\",tran.getState(),TransactionState.COMPLETED);     ackReceivedEvent=ackCollector.extractCollectedRequestEvent();     assertNotNull(\"The TI did not send an ACK request to the second response\",ackReceivedEvent);     assertNotNull(\"The TI did not send an ACK request to the second response\",ackReceivedEvent.getRequest());     assertEquals(Request.ACK,ackReceivedEvent.getRequest().getMethod());     assertEquals(\"The To header field in the ACK MUST equal the To header field \" + \" in the response being acknowledged\",\"ack-to-test\",((ToHeader)ackReceivedEvent.getRequest().getHeader(\"to\")).getTag());   }  catch (  Throwable exc) {     exc.printStackTrace();     fail(exc.getClass().getName() + \": \" + exc.getMessage());   }   assertTrue(new Exception().getStackTrace()[0].toString(),true); } "
"public boolean open_design(InputStream p_input_stream){   java.awt.Point viewport_position=null;   ObjectInputStream object_stream=null;   try {     object_stream=new ObjectInputStream(p_input_stream);     board_panel.itera_board.read_design(object_stream);   }  catch (  Exception exc) {     stat.userPrintln(classname + \"open_design: \",exc);     return false;   }   try {     viewport_position=(Point)object_stream.readObject();     Point frame_location=(Point)object_stream.readObject();     work_frame.setLocation(frame_location);     Rectangle frame_bounds=(Rectangle)object_stream.readObject();     work_frame.setBounds(frame_bounds);   }  catch (  Exception e) {     return false;   }   allocate_permanent_subwindows();   for (  GuiSubWindowSavable cur_subwindow : permanent_subwindows) {     cur_subwindow.read(object_stream);   }   try {     p_input_stream.close();   }  catch (  java.io.IOException e) {     return false;   }   Dimension panel_size=board_panel.itera_board.gdi_context.get_panel_size();   board_panel.setSize(panel_size);   board_panel.setPreferredSize(panel_size);   set_viewport_position(viewport_position);   board_panel.create_popup_menus();   board_panel.init_colors();   board_panel.itera_board.create_ratsnest();   hilight_selected_button();   work_frame.setVisible(true);   return true; } "
"protected void writeHeader(RandomAccessFile file,int size) throws IOException {   String str;   int offset=0;   byte[] buffer=new byte[5];   str=Integer.toString(getSize());   for (int i=0; i < (5 - str.length()); i++) {     buffer[i]=(byte)'0';   }   offset+=(5 - str.length());   for (int i=0; i < str.length(); i++) {     buffer[i + offset]=(byte)str.charAt(i);   }   file.write(buffer); } "
"public void printStackTrace(java.io.PrintWriter s){   if (s == null)   s=new java.io.PrintWriter(System.err);   try {     super.printStackTrace(s);   }  catch (  Exception e) {   }   boolean isJdk14OrHigher=false;   try {     Throwable.class.getMethod(\"getCause\",(Class<?>)null);     isJdk14OrHigher=true;   }  catch (  NoSuchMethodException nsme) {   }   if (!isJdk14OrHigher) {     Throwable exception=m_exception;     for (int i=0; (i < 10) && (null != exception); i++) {       s.println(\"---------\");       try {         exception.printStackTrace(s);       }  catch (      Exception e) {         s.println(\"Could not print stack trace...\");       }       if (exception instanceof TransformerException) {         TransformerException se=(TransformerException)exception;         Throwable prev=exception;         exception=se.getException();         if (prev == exception) {           exception=null;           break;         }       }  else {         exception=null;       }     }   } } "
"public Boolean isZipEnabled(){   return zipEnable; } "
"public void insert(String key,char val){   int len=key.length() + 1;   if (freenode + len > eq.length) {     redimNodeArrays(eq.length + BLOCK_SIZE);   }   char[] strkey=new char[len--];   key.getChars(0,len,strkey,0);   strkey[len]=0;   root=insert(root,strkey,0,val); } "
"public int lineno(){   return LINENO; } "
"public static DataType createObject(String className,String value){   try {     Class<?> theClass=Class.forName(className);     Class<?>[] constructorParameters=new Class[1];     constructorParameters[0]=Class.forName(\"java.lang.String\");     Constructor<?> classConstructor=theClass.getConstructor(constructorParameters);     return (DataType)classConstructor.newInstance(value);   }  catch (  Exception ex) {     Log.e(\"createObject\",\"Can't create class \" + className + \" with value: \"+ value);   }   return null; } "
"public static AffinityControl newControl(final ByteString affinityValue,final boolean isCritical){   Reject.ifNull(affinityValue);   return new AffinityControl(affinityValue,isCritical); } "
"public void unconfigureArrowButton(){   if (arrowButton != null) {     arrowButton.removeMouseListener(popup.getMouseListener());     arrowButton.removeMouseMotionListener(popup.getMouseMotionListener());   } } "
"public void testLongValuePositive1(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,120,-34,-12,45,98};   long result=3268209772258930018L;   long aNumber=new BigInteger(aBytes).longValue();   assertTrue(aNumber == result); } "
"public String debugDump(int indentation){   stringRepresentation=\"\";   String indent=new Indentation(indentation).getIndentation();   ;   String className=this.getClass().getName();   sprint(indent + className);   sprint(indent + \"{\");   sprint(indent + sdpFields.debugDump(indentation));   sprint(indent + \"}\");   return stringRepresentation; } "
"@Override public boolean entryExists(SSOToken token,String dn){   if (debug.messageEnabled()) {     debug.message(\"SMSLdapObject: checking if entry exists: \" + dn);   }   dn=DN.valueOf(dn).toString().toLowerCase();   if (SMSNotificationManager.isCacheEnabled()) {     if (entriesPresent.contains(dn)) {       if (debug.messageEnabled()) {         debug.message(\"SMSLdapObject: entry present in cache: \" + dn);       }       return true;     }  else     if (entriesNotPresent.contains(dn)) {       if (debug.messageEnabled()) {         debug.message(\"SMSLdapObject: entry present in not-present-cache: \" + dn);       }       return false;     }   }   try {     boolean entryExists=entryExists(dn);     if (SMSNotificationManager.isCacheEnabled()) {       initializeNotification();       Set<String> cacheToUpdate=entryExists ? entriesPresent : entriesNotPresent;       cacheToUpdate.add(dn);       if (cacheToUpdate.size() > entriesPresentCacheSize) { synchronized (cacheToUpdate) {           if (!cacheToUpdate.isEmpty()) {             cacheToUpdate.remove(cacheToUpdate.iterator().next());           }         }       }     }     return entryExists;   }  catch (  SMSException smse) {     return false;   } } "
"public void testSetScale(){   BigDecimal x1=new BigDecimal(1.23400);   BigDecimal x2=x1.setScale(75);   assertEquals(0,x1.compareTo(x2));   assertEquals(0,x2.compareTo(x1));   x1.precision();   assertEquals(0,x1.compareTo(x2));   assertEquals(0,x2.compareTo(x1));   x2.precision();   assertEquals(0,x1.compareTo(x2));   assertEquals(0,x2.compareTo(x1)); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String serverName=getStringOptionValue(IArgument.SERVER_NAME);   String datafile=getStringOptionValue(IArgument.DATA_FILE);   List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);   if ((datafile == null) && (attrValues == null)) {     throw new CLIException(getResourceString(\"missing-attributevalues\"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());   }   Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);   encryptPasswordAttributes(attributeValues);   String[] params={serverName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_UPDATE_SERVER_CONFIG\",params);     if (serverName.equals(DEFAULT_SVR_CONFIG)) {       try {         ServerConfiguration.setServerInstance(adminSSOToken,ServerConfiguration.DEFAULT_SERVER_CONFIG,attributeValues);       }  catch (      UnknownPropertyNameException ex) {         outputWriter.printlnMessage(ex.getL10NMessage(getCommandManager().getLocale()));         outputWriter.printlnMessage(\"\");       }       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"update-server-config-succeeded\"),(Object[])params));     }  else {       if (ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {         try {           ServerConfiguration.setServerInstance(adminSSOToken,serverName,attributeValues);         }  catch (        UnknownPropertyNameException ex) {           outputWriter.printlnMessage(getResourceString(\"update-server-config-unknown\"));           outputWriter.printlnMessage(\"\");         }         outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"update-server-config-succeeded\"),(Object[])params));       }  else {         outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"update-server-config-does-not-exists\"),(Object[])params));       }     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_UPDATE_SERVER_CONFIG\",params);   }  catch (  ConfigurationException e) {     String[] args={serverName,e.getMessage()};     debugError(\"UpdateServerConfig.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_UPDATE_SERVER_CONFIG\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  IOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"UpdateServerConfig.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_UPDATE_SERVER_CONFIG\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"UpdateServerConfig.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_UPDATE_SERVER_CONFIG\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={serverName,e.getMessage()};     debugError(\"UpdateServerConfig.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_UPDATE_SERVER_CONFIG\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"void compWriteObjectNotify(){   byte count=JComponent.getWriteObjCounter(this);   JComponent.setWriteObjCounter(this,(byte)(count + 1));   if (count != 0) {     return;   }   uninstallUIAndProperties();   if (getToolTipText() != null || this instanceof javax.swing.table.JTableHeader) {     ToolTipManager.sharedInstance().unregisterComponent(JComponent.this);   } } "
"private void formatAndLogArguments(LoggingLevel level,Color color,String msg,Object[] args){   if (!USE_COLORS) {     formatAndLogArguments(level,msg,args);     return;   }   if (PhotonLogger.level.id < level.id) {     return;   }   LocalDateTime dateTime=LocalDateTime.now();   FormattingTuple ft=MessageFormatter.arrayFormat(msg,args);   String formatted=formatLogLine(level,dateTime,ft.getMessage());   Throwable t=ft.getThrowable();   if (t == null) {     LoggingService.logLine(dateTime,formatted,color);   }  else {     LoggingService.logThrowable(dateTime,t,formatted,color);   } } "
"public boolean isRequired(){   return required; } "
"public static byte[] encode(byte[] data,int off,int length){   int len=(length + 2) / 3 * 4;   ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);   try {     encoder.encode(data,off,length,bOut);   }  catch (  Exception e) {     throw new EncoderException(\"exception encoding base64 string: \" + e.getMessage(),e);   }   return bOut.toByteArray(); } "
"public void makeImmutable(){ } "
"public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {   if (nameValueBlock.size() % 2 != 0) {     throw new IllegalArgumentException(\"Unexpected name value block: \" + nameValueBlock);   }   String status=null;   String version=null;   RawHeaders result=new RawHeaders();   for (int i=0; i < nameValueBlock.size(); i+=2) {     String name=nameValueBlock.get(i);     String values=nameValueBlock.get(i + 1);     for (int start=0; start < values.length(); ) {       int end=values.indexOf('\\0',start);       if (end == -1) {         end=values.length();       }       String value=values.substring(start,end);       if (\":status\".equals(name)) {         status=value;       }  else       if (\":version\".equals(name)) {         version=value;       }  else {         result.namesAndValues.add(name);         result.namesAndValues.add(value);       }       start=end + 1;     }   }   if (status == null)   throw new ProtocolException(\"Expected ':status' header not present\");   if (version == null)   throw new ProtocolException(\"Expected ':version' header not present\");   result.setStatusLine(version + \" \" + status);   return result; } "
"public DelegateFileFilter(FileFilter filter){   if (filter == null) {     throw new IllegalArgumentException(\"The FileFilter must not be null\");   }   this.fileFilter=filter;   this.filenameFilter=null; } "
"public static IOFileFilter sizeFileFilter(long threshold){   return new SizeFileFilter(threshold); } "
"public boolean equals(Object that){   if (that.getClass() != this.getClass())   return false;   SIPDate other=(SIPDate)that;   return this.wkday == other.wkday && this.day == other.day && this.month == other.month && this.year == other.year && this.hour == other.hour && this.minute == other.minute && this.second == other.second; } "
"public BasicSplitPaneDivider(BasicSplitPaneUI ui){   oneTouchSize=DefaultLookup.getInt(ui.getSplitPane(),ui,\"SplitPane.oneTouchButtonSize\",ONE_TOUCH_SIZE);   oneTouchOffset=DefaultLookup.getInt(ui.getSplitPane(),ui,\"SplitPane.oneTouchButtonOffset\",ONE_TOUCH_OFFSET);   centerOneTouchButtons=DefaultLookup.getBoolean(ui.getSplitPane(),ui,\"SplitPane.centerOneTouchButtons\",true);   setLayout(new DividerLayout());   setBasicSplitPaneUI(ui);   orientation=splitPane.getOrientation();   setCursor((orientation == JSplitPane.HORIZONTAL_SPLIT) ? Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR) : Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));   setBackground(UIManager.getColor(\"SplitPane.background\")); } "
"void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception {   addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true); } "
"public void testApp(){   assertTrue(true); } "
"private SSOToken checkAuthentication(HttpServletRequest request) throws SSOException {   SSOTokenManager manager=SSOTokenManager.getInstance();   SSOToken ssoToken=manager.createSSOToken(request);   manager.validateToken(ssoToken);   return ssoToken; } "
"public boolean acquireMemory(long size){   return allowOvercommit || reservedMemory.tryAcquire((int)(size / ONE_MEGABYTE)); } "
"private Route nextPostponed(){   return postponedRoutes.remove(0); } "
"public void putAll(Map<? extends K,? extends V> m){   int n=m.size();   if (n == 0)   return;   if (n > size)   resize(capacity(n));   for (  Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue()); } "
"public Period plusYears(long yearsToAdd){   if (yearsToAdd == 0) {     return this;   }   return create(Math.toIntExact(Math.addExact(years,yearsToAdd)),months,days); } "
"public void recurseSubFrames(ProfileStack stack,int depth,long count,HashMap<String,HashMap<ProfileStack,Long>> stacksByMethod){   if (depth < 0) {     return;   }   String cName=stack.getClassName(depth);   String mName=stack.getMethodName(depth);   ProfileStackFrame f=new ProfileStackFrame(cName,mName);   int lineNumber=stack.getLineNumber(depth);   ProfileStackFrame subFrame=subordinateFrames.get(f);   if (subFrame == null) {     subFrame=f;     subordinateFrames.put(subFrame,subFrame);   }   subFrame.updateLineNumberCount(lineNumber,count);   String classAndMethod=cName + \".\" + mName;   HashMap<ProfileStack,Long> stackMap=stacksByMethod.get(classAndMethod);   if (stackMap == null) {     stackMap=new HashMap<>();     stacksByMethod.put(classAndMethod,stackMap);   }   stackMap.put(stack,count);   subFrame.recurseSubFrames(stack,depth - 1,count,stacksByMethod); } "
"public PlaPointFloat rotate_rad(double p_rad_angle,PlaPointFloat p_pole){   if (p_rad_angle == 0)   return this;   double dx=v_x - p_pole.v_x;   double dy=v_y - p_pole.v_y;   double sin_angle=Math.sin(p_rad_angle);   double cos_angle=Math.cos(p_rad_angle);   double new_dx=dx * cos_angle - dy * sin_angle;   double new_dy=dx * sin_angle + dy * cos_angle;   return new PlaPointFloat(p_pole.v_x + new_dx,p_pole.v_y + new_dy); } "
"private static boolean startsWithStringArray(String sArray[],String value){   if (value == null) {     return false;   }   for (int i=0; i < sArray.length; i++) {     if (value.startsWith(sArray[i])) {       return true;     }   }   return false; } "
"private AciBody(String verision,String name,int startPos,List<PermBindRulePair> permBindRulePairs){   this.version=verision;   this.name=name;   this.startPos=startPos;   this.permBindRulePairs=permBindRulePairs; } "
"public void updateDefinition(ICOSDefinition cosDef) throws UMSException {   PersistentObject pObject=(PersistentObject)cosDef;   if (pObject.getGuid() == null) {     String msg=i18n.getString(IUMSConstants.REPLACE_DEFINITION_NOT_PERSISTENT);     throw new UMSException(msg);   }   pObject.save(); } "
"public AsfExtendedHeader(final long pos,final BigInteger length){   super(GUID.GUID_HEADER_EXTENSION,pos,length); } "
"public String toString(){   return toString(true,false); } "
"@Deprecated public void disableResizedPosting(){   resizedPostingDisableCount++; } "
"protected String[] hashToStringArray(Hashtable<String,?> h) throws NullPointerException {   Vector<String> v=new Vector<>();   Enumeration<String> e=h.keys();   while (e.hasMoreElements()) {     String k=e.nextElement();     v.add(k + \"=\" + h.get(k).toString());   }   String[] strArr=new String[v.size()];   v.copyInto(strArr);   return strArr; } "
"public UnsavedChangesDialog.Result checkUnsavedChanges(){   if (schemaElementPanel != null) {     return schemaElementPanel.checkUnsavedChanges();   }   return UnsavedChangesDialog.Result.DO_NOT_SAVE; } "
"public void printError(String str){   buff.append(str).append(\"\\n\"); } "
"public boolean beginTabCommonDisplay(ChildDisplayEvent event){   return (tabModel.getNodeCount() > 1); } "
"public AttributeStruct(String str){   StringTokenizer st=new StringTokenizer(str,\"@\");   if (st.countTokens() == 3) {     while (st.hasMoreTokens()) {       serviceName=st.nextToken().trim();       revisionNumber=Integer.parseInt(st.nextToken());       attributeName=st.nextToken().trim();     }   } } "
"final void doubleAccumulate(double x,DoubleBinaryOperator fn,boolean wasUncontended){   int h;   if ((h=getProbe()) == 0) {     ThreadLocalRandom.current();     h=getProbe();     wasUncontended=true;   }   boolean collide=false;   for (; ; ) {     Cell[] as;     Cell a;     int n;     long v;     if ((as=cells) != null && (n=as.length) > 0) {       if ((a=as[(n - 1) & h]) == null) {         if (cellsBusy == 0) {           Cell r=new Cell(Double.doubleToRawLongBits(x));           if (cellsBusy == 0 && casCellsBusy()) {             boolean created=false;             try {               Cell[] rs;               int m, j;               if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                 rs[j]=r;                 created=true;               }             }   finally {               cellsBusy=0;             }             if (created)             break;             continue;           }         }         collide=false;       }  else       if (!wasUncontended)       wasUncontended=true;  else       if (a.cas(v=a.value,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))       break;  else       if (n >= NCPU || cells != as)       collide=false;  else       if (!collide)       collide=true;  else       if (cellsBusy == 0 && casCellsBusy()) {         try {           if (cells == as) {             Cell[] rs=new Cell[n << 1];             for (int i=0; i < n; ++i)             rs[i]=as[i];             cells=rs;           }         }   finally {           cellsBusy=0;         }         collide=false;         continue;       }       h=advanceProbe(h);     }  else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {       boolean init=false;       try {         if (cells == as) {           Cell[] rs=new Cell[2];           rs[h & 1]=new Cell(Double.doubleToRawLongBits(x));           cells=rs;           init=true;         }       }   finally {         cellsBusy=0;       }       if (init)       break;     }  else     if (casBase(v=base,((fn == null) ? Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x) : Double.doubleToRawLongBits(fn.applyAsDouble(Double.longBitsToDouble(v),x)))))     break;   } } "
"XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3){   this.m_namespace=namespace;   this.m_name=name;   this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;   this.m_required=required;   this.m_supportsAVT=supportsAVT;   this.m_errorType=errorType;   m_enums=new StringToIntTable(3);   m_enums.put(k1,v1);   m_enums.put(k2,v2);   m_enums.put(k3,v3); } "
"final void loadText(Segment segment,int p0,int p1){   try {     Document doc=getDocument();     doc.getText(p0,p1 - p0,segment);   }  catch (  BadLocationException bl) {     throw new StateInvariantError(\"Can't get line text\");   } } "
"@SuppressWarnings(\"unused\") public static float findMaxValue(float... values){   if (values == null || values.length == 0)   return 0;   float max=Float.MIN_VALUE;   for (  float value : values) {     if (max < value)     max=value;   }   return max; } "
"public void onProviderEnabled(String provider){ } "
"private static void swap(Object[] arr,int i,int j){   Object tmp=arr[i];   arr[i]=arr[j];   arr[j]=tmp; } "
"protected void addDependenciesInCustomRequestScope(R requestContext){   addRequestContextInCustomRequestScope(requestContext); } "
"public static Target decode(EnumTargetOperator operator,String expr,DN aciDN) throws AciException {   return new Target(operator,expr,aciDN); } "
"public ImageReaderWriterSpi(String vendorName,String version,String[] names,String[] suffixes,String[] MIMETypes,String pluginClassName,boolean supportsStandardStreamMetadataFormat,String nativeStreamMetadataFormatName,String nativeStreamMetadataFormatClassName,String[] extraStreamMetadataFormatNames,String[] extraStreamMetadataFormatClassNames,boolean supportsStandardImageMetadataFormat,String nativeImageMetadataFormatName,String nativeImageMetadataFormatClassName,String[] extraImageMetadataFormatNames,String[] extraImageMetadataFormatClassNames){   super(vendorName,version);   if (names == null) {     throw new IllegalArgumentException(\"names == null!\");   }   if (names.length == 0) {     throw new IllegalArgumentException(\"names.length == 0!\");   }   if (pluginClassName == null) {     throw new IllegalArgumentException(\"pluginClassName == null!\");   }   this.names=(String[])names.clone();   if (suffixes != null && suffixes.length > 0) {     this.suffixes=(String[])suffixes.clone();   }   if (MIMETypes != null && MIMETypes.length > 0) {     this.MIMETypes=(String[])MIMETypes.clone();   }   this.pluginClassName=pluginClassName;   this.supportsStandardStreamMetadataFormat=supportsStandardStreamMetadataFormat;   this.nativeStreamMetadataFormatName=nativeStreamMetadataFormatName;   this.nativeStreamMetadataFormatClassName=nativeStreamMetadataFormatClassName;   if (extraStreamMetadataFormatNames != null && extraStreamMetadataFormatNames.length > 0) {     this.extraStreamMetadataFormatNames=(String[])extraStreamMetadataFormatNames.clone();   }   if (extraStreamMetadataFormatClassNames != null && extraStreamMetadataFormatClassNames.length > 0) {     this.extraStreamMetadataFormatClassNames=(String[])extraStreamMetadataFormatClassNames.clone();   }   this.supportsStandardImageMetadataFormat=supportsStandardImageMetadataFormat;   this.nativeImageMetadataFormatName=nativeImageMetadataFormatName;   this.nativeImageMetadataFormatClassName=nativeImageMetadataFormatClassName;   if (extraImageMetadataFormatNames != null && extraImageMetadataFormatNames.length > 0) {     this.extraImageMetadataFormatNames=(String[])extraImageMetadataFormatNames.clone();   }   if (extraImageMetadataFormatClassNames != null && extraImageMetadataFormatClassNames.length > 0) {     this.extraImageMetadataFormatClassNames=(String[])extraImageMetadataFormatClassNames.clone();   } } "
"protected ClassLoader initClassLoader() throws IOException {   classPath=getClassPath();   ClassLoader jspcLoader=getClass().getClassLoader();   if (jspcLoader instanceof AntClassLoader) {     classPath+=File.pathSeparator + ((AntClassLoader)jspcLoader).getClasspath();   }   ArrayList<URL> urls=new ArrayList<>();   StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);   while (tokenizer.hasMoreTokens()) {     String path=tokenizer.nextToken();     try {       File libFile=new File(path);       urls.add(libFile.toURI().toURL());     }  catch (    IOException ioe) {       throw new RuntimeException(ioe.toString());     }   }   File webappBase=new File(uriRoot);   if (webappBase.exists()) {     File classes=new File(webappBase,\"/WEB-INF/classes\");     try {       if (classes.exists()) {         classPath=classPath + File.pathSeparator + classes.getCanonicalPath();         urls.add(classes.getCanonicalFile().toURI().toURL());       }     }  catch (    IOException ioe) {       throw new RuntimeException(ioe.toString());     }     File lib=new File(webappBase,\"/WEB-INF/lib\");     if (lib.exists() && lib.isDirectory()) {       String[] libs=lib.list();       if (libs != null) {         for (int i=0; i < libs.length; i++) {           if (libs[i].length() < 5)           continue;           String ext=libs[i].substring(libs[i].length() - 4);           if (!\".jar\".equalsIgnoreCase(ext)) {             if (\".tld\".equalsIgnoreCase(ext)) {               log.warn(\"TLD files should not be placed in \" + \"/WEB-INF/lib\");             }             continue;           }           try {             File libFile=new File(lib,libs[i]);             classPath=classPath + File.pathSeparator + libFile.getAbsolutePath();             urls.add(libFile.getAbsoluteFile().toURI().toURL());           }  catch (          IOException ioe) {             throw new RuntimeException(ioe.toString());           }         }       }     }   }   URL urlsA[]=new URL[urls.size()];   urls.toArray(urlsA);   loader=new URLClassLoader(urlsA,this.getClass().getClassLoader());   return loader; } "
"public LDIFImportConfig(InputStream ldifInputStream){   this(Collections.<String>emptyList());   this.ldifInputStream=ldifInputStream; } "
"protected Media(int value){   super(value); } "
"public void runTest() throws Throwable {   Document doc;   String value=\"#$%&'()@\";   Element element;   doc=(Document)load(\"staffNS\",true);   element=doc.createElementNS(\"http://www.w3.org/DOM/Test/L2\",\"dom:elem\"); {     boolean success=false;     try {       element.setPrefix(value);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.INVALID_CHARACTER_ERR);     }     assertTrue(\"throw_INVALID_CHARACTER_ERR\",success);   } } "
"@Override public boolean onCreateOptionsMenu(Menu menu){   menu.add(Menu.NONE,MENU_SETTINGS,Menu.NONE,getString(R.string.settings_label)).setIcon(android.R.drawable.ic_menu_preferences).setAlphabeticShortcut('s');   menu.add(Menu.NONE,MENU_CLEAR_LOGS,Menu.NONE,getString(R.string.clear_logs)).setAlphabeticShortcut('c').setIcon(android.R.drawable.ic_menu_close_clear_cancel);   return super.onCreateOptionsMenu(menu); } "
"public ListIterator listIterator(){   return sdpFields.listIterator(); } "
"public ConsoleException(String msg){   super(msg);   errList=new ArrayList(1);   errList.add(msg); } "
"public static URI toNormalizedURI(File file){   return file.toURI().normalize(); } "
"@Override protected void computeTime(){   if (!isLenient()) {     if (originalFields == null) {       originalFields=new int[FIELD_COUNT];     }     for (int field=0; field < FIELD_COUNT; field++) {       int value=internalGet(field);       if (isExternallySet(field)) {         if (value < getMinimum(field) || value > getMaximum(field)) {           throw new IllegalArgumentException(getFieldName(field));         }       }       originalFields[field]=value;     }   }   int fieldMask=selectFields();   int year=isSet(YEAR) ? internalGet(YEAR) : EPOCH_YEAR;   int era=internalGetEra();   if (era == BCE) {     year=1 - year;   }  else   if (era != CE) {     throw new IllegalArgumentException(\"Invalid era\");   }   if (year <= 0 && !isSet(ERA)) {     fieldMask|=ERA_MASK;     setFieldsComputed(ERA_MASK);   }   long timeOfDay=0;   if (isFieldSet(fieldMask,HOUR_OF_DAY)) {     timeOfDay+=(long)internalGet(HOUR_OF_DAY);   }  else {     timeOfDay+=internalGet(HOUR);     if (isFieldSet(fieldMask,AM_PM)) {       timeOfDay+=12 * internalGet(AM_PM);     }   }   timeOfDay*=60;   timeOfDay+=internalGet(MINUTE);   timeOfDay*=60;   timeOfDay+=internalGet(SECOND);   timeOfDay*=1000;   timeOfDay+=internalGet(MILLISECOND);   long fixedDate=timeOfDay / ONE_DAY;   timeOfDay%=ONE_DAY;   while (timeOfDay < 0) {     timeOfDay+=ONE_DAY;     --fixedDate;   }   calculateFixedDate: {     long gfd, jfd;     if (year > gregorianCutoverYear && year > gregorianCutoverYearJulian) {       gfd=fixedDate + getFixedDate(gcal,year,fieldMask);       if (gfd >= gregorianCutoverDate) {         fixedDate=gfd;         break calculateFixedDate;       }       jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);     }  else     if (year < gregorianCutoverYear && year < gregorianCutoverYearJulian) {       jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);       if (jfd < gregorianCutoverDate) {         fixedDate=jfd;         break calculateFixedDate;       }       gfd=jfd;     }  else {       jfd=fixedDate + getFixedDate(getJulianCalendarSystem(),year,fieldMask);       gfd=fixedDate + getFixedDate(gcal,year,fieldMask);     }     if (isFieldSet(fieldMask,DAY_OF_YEAR) || isFieldSet(fieldMask,WEEK_OF_YEAR)) {       if (gregorianCutoverYear == gregorianCutoverYearJulian) {         fixedDate=jfd;         break calculateFixedDate;       }  else       if (year == gregorianCutoverYear) {         fixedDate=gfd;         break calculateFixedDate;       }     }     if (gfd >= gregorianCutoverDate) {       if (jfd >= gregorianCutoverDate) {         fixedDate=gfd;       }  else {         if (calsys == gcal || calsys == null) {           fixedDate=gfd;         }  else {           fixedDate=jfd;         }       }     }  else {       if (jfd < gregorianCutoverDate) {         fixedDate=jfd;       }  else {         if (!isLenient()) {           throw new IllegalArgumentException(\"the specified date doesn't exist\");         }         fixedDate=jfd;       }     }   }   long millis=(fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;   TimeZone zone=getZone();   if (zoneOffsets == null) {     zoneOffsets=new int[2];   }   int tzMask=fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK);   if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {     if (zone instanceof ZoneInfo) {       ((ZoneInfo)zone).getOffsetsByWall(millis,zoneOffsets);     }  else {       int gmtOffset=isFieldSet(fieldMask,ZONE_OFFSET) ? internalGet(ZONE_OFFSET) : zone.getRawOffset();       zone.getOffsets(millis - gmtOffset,zoneOffsets);     }   }   if (tzMask != 0) {     if (isFieldSet(tzMask,ZONE_OFFSET)) {       zoneOffsets[0]=internalGet(ZONE_OFFSET);     }     if (isFieldSet(tzMask,DST_OFFSET)) {       zoneOffsets[1]=internalGet(DST_OFFSET);     }   }   millis-=zoneOffsets[0] + zoneOffsets[1];   time=millis;   int mask=computeFields(fieldMask | getSetStateFields(),tzMask);   if (!isLenient()) {     for (int field=0; field < FIELD_COUNT; field++) {       if (!isExternallySet(field)) {         continue;       }       if (originalFields[field] != internalGet(field)) {         String s=originalFields[field] + \" -> \" + internalGet(field);         System.arraycopy(originalFields,0,fields,0,fields.length);         throw new IllegalArgumentException(getFieldName(field) + \": \" + s);       }     }   }   setFieldsNormalized(mask); } "
"public static ComponentUI createUI(JComponent list){   return new SynthListUI(); } "
"public ResponseProvider removeResponseProvider(String respProvider){   return respProviders.removeResponseProvider(respProvider); } "
"@Override public void mark(int readAheadLimit) throws IOException {   fInputStream.mark(readAheadLimit); } "
"public static boolean verifyNameIdMappingResponseSignature(Element elt,SOAPMessage msg,String realm){   FSUtils.debug.message(\"FSNameMappingHandler.verifyNameIdMappingResponseSignature:Called\");   try {     FSNameIdentifierMappingResponse nimRes=new FSNameIdentifierMappingResponse(elt);     if (metaManager == null) {       FSUtils.debug.error(\"FSNameMappingHandler.verifyNameIdMappingResponseSignature:\" + \" Unable to get meta manager\");       return false;     }     String entityId=nimRes.getProviderID();     X509Certificate cert=KeyUtil.getVerificationCert(metaManager.getIDPDescriptor(realm,entityId),entityId,true);     if (cert == null) {       FSUtils.debug.error(\"FSNameMappingHandler.\" + \"verifyNameIdMappingResponseSignature: couldn't obtain \" + \"the cert for signature verification.\");       return false;     }     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSNameMappingHandler.verifyNameIdMappingResponseSignature:\" + \" Provider's cert is found.\");       FSUtils.debug.message(\"FSNameMappingHandler.verifyNameIdMappingResponseSignature:\" + \"xmlString to be verified: \" + XMLUtils.print(elt));     }     Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);     XMLSignatureManager manager=XMLSignatureManager.getInstance();     return manager.verifyXMLSignature(doc,cert);   }  catch (  Exception e) {     FSUtils.debug.error(\"FSNameMappingHandler.verifyNameIdMappingResponseSignature: \" + \"Exception occured while verifying signature:\",e);     return false;   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributenodens01.class,args); } "
"public void resetLockoutAttempts(String userDN,AMIdentity amIdentity,AccountLockoutInfo acInfo,boolean resetDuration){   debug.message(\"entering ISAccountLockout.resetLockoutAttempts\");   if (debug.messageEnabled()) {     debug.message(\"ISAccountLockout.resetLockoutAttempts:: \" + \"resetDuration =\" + resetDuration);   }   int fail_count=0;   long lastFailTime=0;   long locked_out_at=0;   long actualLockoutDuration=failureLockoutDuration;   long currentLockoutDuration=acInfo.getActualLockoutDuration();   if (acInfo != null) {     fail_count=acInfo.getFailCount();     lastFailTime=acInfo.getLastFailTime();     locked_out_at=acInfo.getLockoutAt();     long now=currentTimeMillis();     if (!resetDuration) {       actualLockoutDuration=currentLockoutDuration;       if (debug.messageEnabled()) {         debug.message(\"ISAccountLockout.resetLockoutAttempts::\" + \"Locked out At =\" + locked_out_at);       }       if (locked_out_at > 0) {         if (debug.messageEnabled()) {           debug.message(\"ISAccountLockout.resetLockoutAttempts::\" + \" Using the multiplier\");         }         actualLockoutDuration=failureLockoutMultiplier * (currentLockoutDuration);       }     }   }   if (storeInvalidAttemptsInDS) {     try {       if ((fail_count != 0) || (lastFailTime != 0) || (locked_out_at != 0)|| (actualLockoutDuration != currentLockoutDuration)) {         Map attrMap=new HashMap();         Set invalidAttempts=new HashSet();         String invalidXML=createInvalidAttemptsXML(0,0,0,actualLockoutDuration);         invalidAttempts.add(invalidXML);         attrMap.put(invalidAttemptsDataAttrName,invalidAttempts);         setLockoutObjectClass(amIdentity);         amIdentity.setAttributes(attrMap);         debug.message(\"Saving XML = \" + invalidXML);         amIdentity.store();       }       debug.message(\"ISAccountLockout::resetLockoutAttempts done\");     }  catch (    Exception exp) {       debug.message(\"error reseting Lockout Attempts\");     }   }   acInfo.setFailCount(0);   acInfo.setLastFailTime(0);   acInfo.setLockoutAt(0);   acInfo.setLockout(false);   acInfo.setActualLockoutDuration(actualLockoutDuration); } "
"@Override public void addChannelListener(ChannelListener channelListener){   if (!this.channelListeners.contains(channelListener)) {     this.channelListeners.add(channelListener);   }  else {     throw new IllegalArgumentException(sm.getString(\"groupChannel.listener.alreadyExist\",channelListener,channelListener.getClass().getName()));   } } "
"public void write(Tag tag,RandomAccessFile raf,RandomAccessFile rafTemp) throws CannotWriteException, IOException {   logger.config(\"Writing tag\");   MetadataBlockInfo blockInfo=new MetadataBlockInfo();   FlacStreamReader flacStream=new FlacStreamReader(raf);   try {     flacStream.findStream();   }  catch (  CannotReadException cre) {     throw new CannotWriteException(cre.getMessage());   }   boolean isLastBlock=false;   while (!isLastBlock) {     try {       MetadataBlockHeader mbh=MetadataBlockHeader.readHeader(raf);       if (mbh.getBlockType() != null) { switch (mbh.getBlockType()) { case STREAMINFO: {             blockInfo.streamInfoBlock=new MetadataBlock(mbh,new MetadataBlockDataStreamInfo(mbh,raf));             break;           } case VORBIS_COMMENT: case PADDING: case PICTURE: {           raf.seek(raf.getFilePointer() + mbh.getDataLength());           MetadataBlockData mbd=new MetadataBlockDataPadding(mbh.getDataLength());           blockInfo.metadataBlockPadding.add(new MetadataBlock(mbh,mbd));           break;         } case APPLICATION: {         MetadataBlockData mbd=new MetadataBlockDataApplication(mbh,raf);         blockInfo.metadataBlockApplication.add(new MetadataBlock(mbh,mbd));         break;       } case SEEKTABLE: {       MetadataBlockData mbd=new MetadataBlockDataSeekTable(mbh,raf);       blockInfo.metadataBlockSeekTable.add(new MetadataBlock(mbh,mbd));       break;     } case CUESHEET: {     MetadataBlockData mbd=new MetadataBlockDataCueSheet(mbh,raf);     blockInfo.metadataBlockCueSheet.add(new MetadataBlock(mbh,mbd));     break;   } default : {   raf.seek(raf.getFilePointer() + mbh.getDataLength());   break; } } } isLastBlock=mbh.isLastBlock(); }  catch (CannotReadException cre) { throw new CannotWriteException(cre.getMessage()); } } int availableRoom=computeAvailableRoom(blockInfo); int newTagSize=tc.convert(tag).limit(); int neededRoom=newTagSize + computeNeededRoom(blockInfo); raf.seek(flacStream.getStartOfFlacInFile()); logger.config(\"Writing tag available bytes:\" + availableRoom + \":needed bytes:\"+ neededRoom); if ((availableRoom == neededRoom) || (availableRoom > neededRoom + MetadataBlockHeader.HEADER_LENGTH)) { raf.seek(flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH); raf.write(blockInfo.streamInfoBlock.getHeader().getBytesWithoutIsLastBlockFlag()); raf.write(blockInfo.streamInfoBlock.getData().getBytes()); for (MetadataBlock aMetadataBlockApplication : blockInfo.metadataBlockApplication) { raf.write(aMetadataBlockApplication.getHeader().getBytesWithoutIsLastBlockFlag()); raf.write(aMetadataBlockApplication.getData().getBytes()); } for (MetadataBlock aMetadataBlockSeekTable : blockInfo.metadataBlockSeekTable) { raf.write(aMetadataBlockSeekTable.getHeader().getBytesWithoutIsLastBlockFlag()); raf.write(aMetadataBlockSeekTable.getData().getBytes()); } for (MetadataBlock aMetadataBlockCueSheet : blockInfo.metadataBlockCueSheet) { raf.write(aMetadataBlockCueSheet.getHeader().getBytesWithoutIsLastBlockFlag()); raf.write(aMetadataBlockCueSheet.getData().getBytes()); } raf.getChannel().write(tc.convert(tag,availableRoom - neededRoom)); }  else { if (flacStream.getStartOfFlacInFile() > 0) { raf.seek(0); rafTemp.getChannel().transferFrom(raf.getChannel(),0,flacStream.getStartOfFlacInFile()); rafTemp.seek(flacStream.getStartOfFlacInFile()); } rafTemp.writeBytes(FlacStreamReader.FLAC_STREAM_IDENTIFIER); rafTemp.writeByte(0); int uptoStreamHeaderSize=flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH + MetadataBlockHeader.BLOCK_TYPE_LENGTH; rafTemp.seek(uptoStreamHeaderSize); raf.seek(uptoStreamHeaderSize); rafTemp.getChannel().transferFrom(raf.getChannel(),uptoStreamHeaderSize,MetadataBlockHeader.BLOCK_LENGTH + MetadataBlockDataStreamInfo.STREAM_INFO_DATA_LENGTH); int dataStartSize=flacStream.getStartOfFlacInFile() + FlacStreamReader.FLAC_STREAM_IDENTIFIER_LENGTH + MetadataBlockHeader.HEADER_LENGTH+ MetadataBlockDataStreamInfo.STREAM_INFO_DATA_LENGTH; rafTemp.seek(dataStartSize); for (MetadataBlock aMetadataBlockApplication : blockInfo.metadataBlockApplication) { rafTemp.write(aMetadataBlockApplication.getHeader().getBytesWithoutIsLastBlockFlag()); rafTemp.write(aMetadataBlockApplication.getData().getBytes()); } for (MetadataBlock aMetadataBlockSeekTable : blockInfo.metadataBlockSeekTable) { rafTemp.write(aMetadataBlockSeekTable.getHeader().getBytesWithoutIsLastBlockFlag()); rafTemp.write(aMetadataBlockSeekTable.getData().getBytes()); } for (MetadataBlock aMetadataBlockCueSheet : blockInfo.metadataBlockCueSheet) { rafTemp.write(aMetadataBlockCueSheet.getHeader().getBytesWithoutIsLastBlockFlag()); rafTemp.write(aMetadataBlockCueSheet.getData().getBytes()); } rafTemp.write(tc.convert(tag,FlacTagCreator.DEFAULT_PADDING).array()); raf.seek(dataStartSize + availableRoom); long amountToBeWritten=raf.getChannel().size() - raf.getChannel().position(); long written=0; long chunksize=TagOptionSingleton.getInstance().getWriteChunkSize(); long count=amountToBeWritten / chunksize; long mod=amountToBeWritten % chunksize; for (int i=0; i < count; i++) { written+=rafTemp.getChannel().transferFrom(raf.getChannel(),rafTemp.getChannel().position(),chunksize); rafTemp.getChannel().position(rafTemp.getChannel().position() + chunksize); } written+=rafTemp.getChannel().transferFrom(raf.getChannel(),rafTemp.getChannel().position(),mod); if (written != amountToBeWritten) { throw new CannotWriteException(\"Was meant to write \" + amountToBeWritten + \" bytes but only written \"+ written+ \" bytes\"); } } } "
"public void newDataAvailable(TableModelEvent event){   fireTableChanged(event); } "
"public String encode(){   return encode(new StringBuilder()).toString(); } "
"private void createScrollPane(){   AttributeSet attributes=getElement().getAttributes();   String scrolling=(String)attributes.getAttribute(HTML.Attribute.SCROLLING);   if (scrolling == null) {     scrolling=\"auto\";   }   if (!scrolling.equals(\"no\")) {     if (scrolling.equals(\"yes\")) {       scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);     }  else {       scroller=new JScrollPane();     }   }  else {     scroller=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_NEVER,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);   }   JViewport vp=scroller.getViewport();   vp.add(htmlPane);   vp.setBackingStoreEnabled(true);   scroller.setMinimumSize(new Dimension(5,5));   scroller.setMaximumSize(new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE)); } "
"@Override public String toString(){   return getClass().getName() + \"[attribute=\" + myAttribute+ \", field=\"+ myField+ \", beginIndex=\"+ beginIndex+ \", endIndex=\"+ endIndex+ \"]\"; } "
"protected UndoableEdit editToBeRedone(){   int count=edits.size();   int i=indexOfNextAdd;   while (i < count) {     UndoableEdit edit=edits.elementAt(i++);     if (edit.isSignificant()) {       return edit;     }   }   return null; } "
"private void init(Subject adminSubject,Subject subject,String realm,String applicationName,String normalisedResourceName,String requestedResourceName,Set<String> actions,Map<String,Set<String>> envParameters,boolean recursive) throws EntitlementException {   this.adminSubject=adminSubject;   this.subject=subject;   this.realm=realm;   this.applicationName=applicationName;   this.normalisedResourceName=normalisedResourceName;   this.requestedResourceName=requestedResourceName;   this.envParameters=envParameters;   this.actionNames=new HashSet<String>();   if (CollectionUtils.isNotEmpty(actions)) {     this.actionNames.addAll(actions);   }   Application appl=getApplication();   entitlementCombiner=appl.getEntitlementCombiner();   entitlementCombiner.init(realm,applicationName,normalisedResourceName,requestedResourceName,this.actionNames,recursive);   this.recursive=recursive;   if (PolicyConstants.DEBUG.messageEnabled()) {     Debug debug=PolicyConstants.DEBUG;     debug.message(\"[PolicyEval] PrivilegeEvaluator:init()\");     debug.message(\"[PolicyEval] subject: \" + getPrincipalId(subject));     debug.message(\"[PolicyEval] realm: \" + realm);     debug.message(\"[PolicyEval] applicationName: \" + applicationName);     debug.message(\"[PolicyEval] normalisedResourceName: \" + this.normalisedResourceName);     debug.message(\"[PolicyEval] requestedResourceName: \" + this.requestedResourceName);     debug.message(\"[PolicyEval] actions: \" + actionNames);     if ((envParameters != null) && !envParameters.isEmpty()) {       debug.message(\"[PolicyEval] envParameters: \" + envParameters.toString());     }   } } "
"private void allocate_sections(int p_section_count){   section_list.ensureCapacity(p_section_count);   while (section_list.size() < p_section_count) {     section_list.add(new MazeSearchElement());   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String childData;   String childValue;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"name\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   child.setNodeValue(\"Marilyn Martin\");   childData=child.getData();   assertEquals(\"data\",\"Marilyn Martin\",childData);   childValue=child.getNodeValue();   assertEquals(\"value\",\"Marilyn Martin\",childValue); } "
"public static JavacErrorDetail createJavacError(String fname,Node.Nodes page,StringBuilder errMsgBuf,int lineNum) throws JasperException {   return createJavacError(fname,page,errMsgBuf,lineNum,null); } "
"public int size(){   return size; } "
"private void mergeForceCollapse(){   while (stackSize > 1) {     int n=stackSize - 2;     if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;     mergeAt(n);   } } "
"public void updateSPAuthenticationContexts(String realm,String entityName,IDFFAuthContexts cxt) throws AMConsoleException {   List list=cxt.toSPAuthContextInfo();   String[] params={realm,entityName,\"IDFF\",\"SP-updateSPAuthenticationContexts\"};   logEvent(\"ATTEMPT_MODIFY_ENTITY_DESCRIPTOR\",params);   try {     IDFFMetaManager idffMetaMgr=getIDFFMetaManager();     EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityName);     if (entityConfig == null) {       throw new AMConsoleException(\"invalid.entity.name\");     }     SPDescriptorConfigElement spDecConfigElement=idffMetaMgr.getSPDescriptorConfig(realm,entityName);     if (spDecConfigElement == null) {       throw new AMConsoleException(\"invalid.config.element\");     }  else {       updateAttrInConfig(spDecConfigElement,ATTR_SP_AUTHN_CONTEXT_MAPPING,list);     }     idffMetaMgr.setEntityConfig(realm,entityConfig);     logEvent(\"SUCCEED_MODIFY_ENTITY_DESCRIPTOR\",params);   }  catch (  IDFFMetaException e) {     String strError=getErrorString(e);     String[] paramsEx={realm,entityName,\"IDFF\",\"SP-updateSPAuthenticationContexts\",strError};     logEvent(\"FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR\",paramsEx);     throw new AMConsoleException(strError);   }   return; } "
"public GetIdleTimeActionHandler(SessionResourceUtil sessionResourceUtil){   this.sessionResourceUtil=sessionResourceUtil; } "
"public void testIsNullable(){   try {     assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(1));     assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(2));     assertEquals(ResultSetMetaData.columnNullable,rsmd.isNullable(3));   }  catch (  SQLException e1) {     fail(\"ResultSetMetaDataTest.isNullable()\" + e1.getMessage());     e1.printStackTrace();   } } "
"public URI(){ } "
"final void runWorker(Worker w){   Thread wt=Thread.currentThread();   Runnable task=w.firstTask;   w.firstTask=null;   w.unlock();   boolean completedAbruptly=true;   try {     while (task != null || (task=getTask()) != null) {       w.lock();       if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();       try {         beforeExecute(wt,task);         Throwable thrown=null;         try {           task.run();         }  catch (        RuntimeException x) {           thrown=x;           throw x;         } catch (        Error x) {           thrown=x;           throw x;         } catch (        Throwable x) {           thrown=x;           throw new Error(x);         }  finally {           afterExecute(task,thrown);         }       }   finally {         task=null;         w.completedTasks++;         w.unlock();       }     }     completedAbruptly=false;   }   finally {     processWorkerExit(w,completedAbruptly);   } } "
"boolean search(int from){   this.hitEnd=false;   this.requireEnd=false;   from=from < 0 ? 0 : from;   this.first=from;   this.oldLast=oldLast < 0 ? from : oldLast;   for (int i=0; i < groups.length; i++)   groups[i]=-1;   acceptMode=NOANCHOR;   boolean result=parentPattern.root.match(this,from,text);   if (!result)   this.first=-1;   this.oldLast=this.last;   return result; } "
"public void addSelectionRow(int row){   int[] rows={row};   addSelectionRows(rows); } "
"public JKXmlException(Throwable cause){   super(cause); } "
"@Override ShapeTileOctagon[] cutout_from(ShapeTileBox p_d){   ShapeTileOctagon c=this.intersection(p_d);   if (is_empty() || c.dimension().less(dimension())) {     ShapeTileOctagon[] result=new ShapeTileOctagon[1];     result[0]=p_d.bounding_octagon();     return result;   }   ShapeTileBox[] boxes=new ShapeTileBox[4];   boxes[0]=new ShapeTileBox(p_d.box_ll.v_x,c.oct_llx - c.oct_lx,c.oct_lx,c.oct_lx - c.oct_ulx);   boxes[1]=new ShapeTileBox(c.oct_rx,c.oct_rx - c.oct_lrx,p_d.box_ur.v_x,c.oct_urx - c.oct_rx);   boxes[2]=new ShapeTileBox(c.oct_llx - c.oct_ly,p_d.box_ll.v_y,c.oct_lrx + c.oct_ly,c.oct_ly);   boxes[3]=new ShapeTileBox(c.oct_ulx + c.oct_uy,c.oct_uy,c.oct_urx - c.oct_uy,p_d.box_ur.v_y);   ShapeTileOctagon[] octagons=new ShapeTileOctagon[4];   ShapeTileOctagon curr_oct=new ShapeTileOctagon(p_d.box_ll.v_x,boxes[0].box_ur.v_y,boxes[3].box_ll.v_x,p_d.box_ur.v_y,-PlaLimits.CRIT_INT,c.oct_ulx,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT);   octagons[0]=curr_oct.normalize();   curr_oct=new ShapeTileOctagon(p_d.box_ll.v_x,p_d.box_ll.v_y,boxes[2].box_ll.v_x,boxes[0].box_ll.v_y,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT,-PlaLimits.CRIT_INT,c.oct_llx);   octagons[1]=curr_oct.normalize();   curr_oct=new ShapeTileOctagon(boxes[2].box_ur.v_x,p_d.box_ll.v_y,p_d.box_ur.v_x,boxes[1].box_ll.v_y,c.oct_lrx,PlaLimits.CRIT_INT,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT);   octagons[2]=curr_oct.normalize();   curr_oct=new ShapeTileOctagon(boxes[3].box_ur.v_x,boxes[1].box_ur.v_y,p_d.box_ur.v_x,p_d.box_ur.v_y,-PlaLimits.CRIT_INT,PlaLimits.CRIT_INT,c.oct_urx,PlaLimits.CRIT_INT);   octagons[3]=curr_oct.normalize();   ShapeTileBox b=boxes[0];   ShapeTileOctagon o=octagons[0];   if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {     boxes[0]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,b.box_ur.v_x,o.oct_uy);     curr_oct=new ShapeTileOctagon(b.box_ur.v_x,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[0]=curr_oct.normalize();   }   b=boxes[3];   o=octagons[0];   if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {     boxes[3]=new ShapeTileBox(o.oct_lx,b.box_ll.v_y,b.box_ur.v_x,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,o.oct_rx,b.box_ll.v_y,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[0]=curr_oct.normalize();   }   b=boxes[3];   o=octagons[3];   if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {     boxes[3]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,o.oct_rx,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[3]=curr_oct.normalize();   }   b=boxes[1];   o=octagons[3];   if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {     boxes[1]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,b.box_ur.v_x,o.oct_uy);     curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,b.box_ll.v_x,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[3]=curr_oct.normalize();   }   b=boxes[1];   o=octagons[2];   if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {     boxes[1]=new ShapeTileBox(b.box_ll.v_x,o.oct_ly,b.box_ur.v_x,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(o.oct_lx,o.oct_ly,b.box_ll.v_x,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[2]=curr_oct.normalize();   }   b=boxes[2];   o=octagons[2];   if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {     boxes[2]=new ShapeTileBox(b.box_ll.v_x,b.box_ll.v_y,o.oct_rx,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(o.oct_lx,b.box_ur.v_y,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[2]=curr_oct.normalize();   }   b=boxes[2];   o=octagons[1];   if (b.box_ur.v_y - b.box_ll.v_y > o.oct_rx - o.oct_lx) {     boxes[2]=new ShapeTileBox(o.oct_lx,b.box_ll.v_y,b.box_ur.v_x,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(o.oct_lx,b.box_ur.v_y,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[1]=curr_oct.normalize();   }   b=boxes[0];   o=octagons[1];   if (b.box_ur.v_x - b.box_ll.v_x > o.oct_uy - o.oct_ly) {     boxes[0]=new ShapeTileBox(b.box_ll.v_x,o.oct_ly,b.box_ur.v_x,b.box_ur.v_y);     curr_oct=new ShapeTileOctagon(b.box_ur.v_x,o.oct_ly,o.oct_rx,o.oct_uy,o.oct_ulx,o.oct_lrx,o.oct_llx,o.oct_urx);     octagons[1]=curr_oct.normalize();   }   ShapeTileOctagon[] result=new ShapeTileOctagon[8];   for (int i=0; i < 4; ++i) {     result[i]=boxes[i].bounding_octagon();   }   for (int i=0; i < 4; ++i) {     result[4 + i]=octagons[i];   }   return result; } "
"private void resetToSAXHandler(){   this.m_lexHandler=null;   this.m_saxHandler=null;   this.m_state=null;   this.m_shouldGenerateNSAttribute=false; } "
"public static InputStream toInputStream(CharSequence input,Charset encoding){   return toInputStream(input.toString(),encoding); } "
"private DN build(){   DN dn=DN.rootDN();   for (  RDN rdn : rdns) {     dn=dn.child(rdn);   }   return dn; } "
"public void testAddForegroundColorSpan(){   mRichTextView.colorSpan(0,5,RichTextView.ColorFormatType.FOREGROUND,Color.BLUE);   Object[] spans=mRichTextView.getSpans();   assertEquals(1,spans.length);   Object firstSpan=spans[0];   assertTrue(firstSpan instanceof ForegroundColorSpan);   assertTrue(((ForegroundColorSpan)firstSpan).getForegroundColor() == Color.BLUE); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributenomodificationallowederr.class,args); } "
"MethodType asSpreaderType(Class<?> arrayType,int arrayLength){   assert (parameterCount() >= arrayLength);   int spreadPos=ptypes.length - arrayLength;   if (arrayLength == 0)   return this;   if (arrayType == Object[].class) {     if (isGeneric())     return this;     if (spreadPos == 0) {       MethodType res=genericMethodType(arrayLength);       if (rtype != Object.class) {         res=res.changeReturnType(rtype);       }       return res;     }   }   Class<?> elemType=arrayType.getComponentType();   assert (elemType != null);   for (int i=spreadPos; i < ptypes.length; i++) {     if (ptypes[i] != elemType) {       Class<?>[] fixedPtypes=ptypes.clone();       Arrays.fill(fixedPtypes,i,ptypes.length,elemType);       return methodType(rtype,fixedPtypes);     }   }   return this; } "
"public OrderService retrieveOrdersForAccount(String accountId,Handler<AsyncResult<List<Order>>> resultHandler){   delegate.retrieveOrdersForAccount(accountId,resultHandler);   return this; } "
"public final int peepTailSub1(){   return m_map[m_firstFree - 2]; } "
"public boolean isSaveChunk(){   return saveChunk; } "
"@Override public void reset() throws IOException {   fOffset=0;   fSurrogate=-1; } "
"public static XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {   XPathContext xpathSupport=new XPathContext(false);   PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);   XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);   int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);   return xpath.execute(xpathSupport,ctxtNode,prefixResolver); } "
"@Override public Executor[] findExecutors(){ synchronized (executors) {     Executor[] arr=new Executor[executors.size()];     executors.toArray(arr);     return arr;   } } "
"@Override public boolean isLeaf(){   return isLeaf; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String childData;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"address\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   child.deleteData(30,5);   childData=child.getData();   assertEquals(\"characterdataDeleteDataEndAssert\",\"1230 North Ave. Dallas, Texas \",childData); } "
"public void closeDriver(){   if (camera != null) {     FlashlightManager.disableFlashlight();     camera.release();     camera=null;   } } "
"public MigrateFromInstallState(Map keyValuePairs,ArrayList keysToUse) throws InstallException {   Debug.log(\"MigrateFromInstallState : initalizing the state\");   String instanceName=getInstFinderStore().getInstanceName(keyValuePairs,keysToUse);   getInstallDataStore();   Debug.log(\"MigrateFromInstallState() - loaded Install state: \" + getInstallDataStore());   if (!MigrateFromInstallDataStore.isExistingStore()) {     Debug.log(\"MigrateFromInstallState(): Error - \" + \"No existing data store was found. \" + \"Creating state with Instance Finder data.\");   }  else {     Debug.log(\"MigrateFromInstallState(): Existing data store found. \" + \"Creating state.\");     initializeFromStore(instanceName,keyValuePairs);   } } "
"public final void testClone03(){   CollectionCertStoreParameters cp1=new CollectionCertStoreParameters();   CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();   CollectionCertStoreParameters cp3=(CollectionCertStoreParameters)cp2.clone();   assertTrue(cp1.getCollection() == cp2.getCollection() && cp3.getCollection() == cp2.getCollection()); } "
"public final byte[] generateSecret() throws IllegalStateException {   return spiImpl.engineGenerateSecret(); } "
"public AuthnRequest createAuthnRequest(Element value) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_REQUEST,value);   if (obj == null) {     return new AuthnRequestImpl(value);   }  else {     return (AuthnRequest)obj;   } } "
"@SuppressWarnings(\"unchecked\") @Override public PdfNumber makeIndirect(PdfDocument document,PdfIndirectReference reference){   return (PdfNumber)super.makeIndirect(document,reference); } "
"protected void createInputAttributes(Element element,MutableAttributeSet set){   if (element.getAttributes().getAttributeCount() > 0 || element.getEndOffset() - element.getStartOffset() > 1 || element.getEndOffset() < element.getDocument().getLength()) {     set.removeAttributes(set);     set.addAttributes(element.getAttributes());     set.removeAttribute(StyleConstants.ComponentAttribute);     set.removeAttribute(StyleConstants.IconAttribute);     set.removeAttribute(AbstractDocument.ElementNameAttribute);     set.removeAttribute(StyleConstants.ComposedTextAttribute);   } } "
"public ServiceInformation(int[] __service_options,org.omg.CORBA.ServiceDetail[] __service_details){   service_options=__service_options;   service_details=__service_details; } "
"public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_ulong\",_opsClass);   DynAnyOperations $self=(DynAnyOperations)$so.servant;   try {     $self.insert_ulong(value);   }   finally {     _servant_postinvoke($so);   } } "
"protected String parsePolicyRule(String policyRule){   return policyRule.replace(FULL_SINGLE_LEVEL_WILDCARD,ABBREVIATED_SINGLE_LEVEL_WILDCARD); } "
"public static String join(String separator,Iterable<?> elements){   StringBuilder sb=new StringBuilder();   for (Iterator<?> i=elements.iterator(); i.hasNext(); ) {     sb.append(i.next());     if (i.hasNext() && separator != null) {       sb.append(separator);     }   }   return sb.toString(); } "
"public JobAttributes(){   setCopiesToDefault();   setDefaultSelection(DefaultSelectionType.ALL);   setDestination(DestinationType.PRINTER);   setDialog(DialogType.NATIVE);   setMaxPage(Integer.MAX_VALUE);   setMinPage(1);   setMultipleDocumentHandlingToDefault();   setSidesToDefault(); } "
"private void jumpToTheNearestEndingNode() throws SyntaxException {   while (current != null && (!(current instanceof EndingNode))) {     nextNode(true);   } } "
"private void restoreRecorderState(){   mIsInRecordingMode=mService.getRecordingMode();   mRecordState=mService.getRecorderState();   RelativeLayout recInfoBar=(RelativeLayout)findViewById(R.id.rl_recinfo);   if ((FmRecorder.STATE_RECORDING == mRecordState) || (FmRecorder.STATE_PLAYBACK == mRecordState)) {     SharedPreferences sharedPreferences=getSharedPreferences(REFS_NAME,0);     mRecordStartTime=sharedPreferences.getLong(START_RECORD_TIME,0);     mPlayStartTime=sharedPreferences.getLong(START_PLAY_TIME,0);     recInfoBar.setVisibility(View.VISIBLE);     Log.d(TAG,\"&&&sendemptyMessage:mRecoderStart:\" + mRecordStartTime);     mHandler.sendEmptyMessage(FmRadioListener.MSGID_REFRESH);   }  else {     recInfoBar.setVisibility(View.GONE);   }   switchRecordLayout(mIsInRecordingMode);   changeRecordingMode(mIsInRecordingMode);   if (mIsInRecordingMode) {     refreshRecordingStatus(FmRecorder.STATE_INVALID);   } } "
"public boolean contains(JComponent a,int b,int c){   boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);   for (int i=1; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);   }   return returnValue; } "
"public static int diffChanges(ServerState ss1,ServerState ss2) throws IllegalArgumentException {   if (ss1 == null || ss2 == null) {     throw new IllegalArgumentException(\"Null server state(s)\");   }   int diff=0;   for (  Integer serverId : ss1.serverIdToCSN.keySet()) {     CSN csn1=ss1.serverIdToCSN.get(serverId);     if (csn1 != null) {       CSN csn2=ss2.serverIdToCSN.get(serverId);       if (csn2 != null) {         diff+=CSN.diffSeqNum(csn1,csn2);       }  else {         diff+=csn1.getSeqnum();       }     }   }   return diff; } "
"public void testUnsupportedCallbackException02(){   myCallback c=new myCallback();   assertNotNull(\"Callback object is null\",c);   UnsupportedCallbackException ucE=new UnsupportedCallbackException(c);   assertNull(\"getMessage() must return null.\",ucE.getMessage());   assertEquals(\"Incorrect callback object was returned\",c,ucE.getCallback()); } "
"public String rubyTypeNameForProtoElement(ProtoElement element){   String fullName=element.getFullName();   int lastDot=fullName.lastIndexOf('.');   if (lastDot < 0) {     return fullName;   }   List<String> rubyNames=new ArrayList<>();   for (  String name : fullName.substring(0,lastDot).split(\"\\\\.\")) {     if (Character.isUpperCase(name.charAt(0))) {       rubyNames.add(name);     }  else {       rubyNames.add(lowerUnderscoreToUpperCamel(name));     }   }   rubyNames.add(element.getSimpleName());   return Joiner.on(\"::\").join(rubyNames); } "
"public PlaDelTriCorner opposite_corner(PlaDelTriEdge p_edge_line){   int edge_line_no=-1;   for (int index=0; index < 3; ++index) {     if (edge_lines[index] == p_edge_line) {       edge_line_no=index;       break;     }   }   if (edge_line_no < 0) {     System.out.println(\"Triangle.opposite_corner: p_edge_line not found\");     return null;   }   PlaDelTriEdge next_edge=edge_lines[(edge_line_no + 1) % 3];   if (next_edge.left_triangle == this)   return next_edge.end_corner;  else   return next_edge.start_corner; } "
"public InReplyToHeader createInReplyToHeader(String callId) throws ParseException {   if (callId == null)   throw new NullPointerException(\"null callId arg\");   InReplyTo inReplyTo=new InReplyTo();   inReplyTo.setCallId(callId);   return inReplyTo; } "
"public boolean save(){   if (design_file == null)   return false;   try {     File to_file=design_file.get_output_file();     stat.userPrintln(classname + \"save to_file \" + to_file);     java.io.OutputStream output_stream=new FileOutputStream(to_file);     java.io.ObjectOutputStream object_stream=new java.io.ObjectOutputStream(output_stream);     board_panel.itera_board.save_design_file(object_stream);     save_win_state(object_stream);     object_stream.flush();     output_stream.close();     stat.userPrintln(classname + \"save to_file DONE\");     return true;   }  catch (  Exception exc) {     stat.userPrintln(classname + \"save to_file \",exc);     return false;   } } "
"private ConditionResult processLessOrEqual(SearchFilter completeFilter,Entry entry) throws DirectoryException {   if (getAttributeType() == null) {     LocalizableMessage message=ERR_SEARCH_FILTER_LESS_OR_EQUAL_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());     throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);   }   if (assertionValue == null) {     LocalizableMessage message=ERR_SEARCH_FILTER_LESS_OR_EQUAL_NO_ASSERTION_VALUE.get(entry.getName(),toString(),getAttributeType().getNameOrOID());     throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);   }   Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);   if (isEmpty(attrs)) {     if (logger.isTraceEnabled()) {       logger.trace(\"Returning FALSE for less-or-equal component %s in \" + \"filter %s because entry %s didn't have attribute \" + \"type %s\",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());     }     return ConditionResult.FALSE;   }   ConditionResult result=ConditionResult.FALSE;   for (  Attribute a : attrs) { switch (a.lessThanOrEqualTo(assertionValue)) { case TRUE:       if (logger.isTraceEnabled()) {         logger.trace(\"Returning TRUE for less-or-equal component %s \" + \"in filter %s for entry %s\",this,completeFilter,entry.getName());       }     return ConditionResult.TRUE; case FALSE:   break; case UNDEFINED: if (logger.isTraceEnabled()) {   logger.trace(\"Undefined result encountered for \" + \"less-or-equal component %s in filter %s \" + \"for entry %s\",this,completeFilter,entry.getName()); } result=ConditionResult.UNDEFINED; break; default : } } if (logger.isTraceEnabled()) { logger.trace(\"Returning %s for less-or-equal component %s in \" + \"filter %s for entry %s\",result,this,completeFilter,entry.getName()); } return result; } "
"private UID(int unique,long time,short count){   this.unique=unique;   this.time=time;   this.count=count; } "
"public void initialize(Map configParams) throws PolicyException {   if (configParams == null) {     throw (new PolicyException(ResBundleUtils.rbName,\"ldaproles_initialization_failed\",null,null));   }   String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);   if (configuredLdapServer == null) {     debug.error(\"LDAPRoles.initialize(): failed to get LDAP \" + \"server name. If you enter more than one server name \" + \"in the policy config service's Primary LDAP Server \"+ \"field, please make sure the ldap server name is preceded \"+ \"with the local server name.\");     throw (new PolicyException(ResBundleUtils.rbName,\"invalid_ldap_server_host\",null,null));   }   ldapServer=configuredLdapServer.toLowerCase();   localDS=PolicyUtils.isLocalDS(ldapServer);   aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED)).booleanValue();   authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);   authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);   if (authpw != null) {     authpw=PolicyUtils.decrypt(authpw);   }   baseDN=(String)configParams.get(PolicyConfig.LDAP_BASE_DN);   roleSearchFilter=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_FILTER);   String scope=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_SCOPE);   if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {     roleSearchScope=SearchScope.BASE_OBJECT;   }  else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {     roleSearchScope=SearchScope.SINGLE_LEVEL;   }  else {     roleSearchScope=SearchScope.WHOLE_SUBTREE;   }   roleRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_ROLES_SEARCH_ATTRIBUTE);   userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);   scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);   userSearchScope=LDAPUtils.getSearchScope(scope,SearchScope.WHOLE_SUBTREE);   userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);   try {     timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));     maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));     minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));     maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));   }  catch (  NumberFormatException nfe) {     throw (new PolicyException(nfe));   }   String ssl=(String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED);   if (ssl.equalsIgnoreCase(\"true\")) {     sslEnabled=true;   }  else {     sslEnabled=false;   }   Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);   if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {     Iterator items=orgNameSet.iterator();     orgName=(String)items.next();   }   if (debug.messageEnabled()) {     debug.message(\"LDAPRoles.initialize(): getting params\" + \"\\nldapServer: \" + ldapServer + \"\\nauthid: \"+ authid+ \"\\nbaseDN: \"+ baseDN+ \"\\nroleSearchFilter: \"+ roleSearchFilter+ \"\\nroleRDNAttrName: \"+ roleRDNAttrName+ \"\\nuserSearchFilter: \"+ userSearchFilter+ \"\\nuserRDNAttrName: \"+ userRDNAttrName+ \"\\ntimeLimit: \"+ timeLimit+ \"\\nmaxResults: \"+ maxResults+ \"\\nminPoolSize: \"+ minPoolSize+ \"\\nmaxPoolSize: \"+ maxPoolSize+ \"\\nSSLEnabled: \"+ sslEnabled+ \"\\nOrgName: \"+ orgName);   }   Options options=Options.defaultOptions().set(REQUEST_TIMEOUT,new Duration((long)timeLimit,TimeUnit.MILLISECONDS));   LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize,options);   connPool=LDAPConnectionPools.getConnectionPool(ldapServer);   initialized=true; } "
"private static byte[] longToByteArray(long l){   byte[] retVal=new byte[8];   for (int i=0; i < 8; i++) {     retVal[i]=(byte)l;     l>>=8;   }   return retVal; } "
"public void close(){   finished=true;   IOUtils.closeQuietly(bufferedReader);   cachedLine=null; } "
"public boolean equals(Object obj){   if (obj instanceof ActivationDesc) {     ActivationDesc desc=(ActivationDesc)obj;     return ((groupID == null ? desc.groupID == null : groupID.equals(desc.groupID)) && (className == null ? desc.className == null : className.equals(desc.className)) && (location == null ? desc.location == null : location.equals(desc.location))&& (data == null ? desc.data == null : data.equals(desc.data))&& (restart == desc.restart));   }  else {     return false;   } } "
"long cleanup(long now){   int inUseConnectionCount=0;   int idleConnectionCount=0;   RealConnection longestIdleConnection=null;   long longestIdleDurationNs=Long.MIN_VALUE; synchronized (this) {     for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {       RealConnection connection=i.next();       if (pruneAndGetAllocationCount(connection,now) > 0) {         inUseConnectionCount++;         continue;       }       idleConnectionCount++;       long idleDurationNs=now - connection.idleAtNanos;       if (idleDurationNs > longestIdleDurationNs) {         longestIdleDurationNs=idleDurationNs;         longestIdleConnection=connection;       }     }     if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {       connections.remove(longestIdleConnection);     }  else     if (idleConnectionCount > 0) {       return keepAliveDurationNs - longestIdleDurationNs;     }  else     if (inUseConnectionCount > 0) {       return keepAliveDurationNs;     }  else {       return -1;     }   }   Util.closeQuietly(longestIdleConnection.getSocket());   return 0; } "
"@Override public void log(CharArrayWriter message){   rotate();   if (checkExists) { synchronized (this) {       if (currentLogFile != null && !currentLogFile.exists()) {         try {           close(false);         }  catch (        Throwable e) {           ExceptionUtils.handleThrowable(e);           log.info(sm.getString(\"accessLogValve.closeFail\"),e);         }         dateStamp=fileDateFormatter.format(new Date(System.currentTimeMillis()));         open();       }     }   }   try { synchronized (this) {       if (writer != null) {         message.writeTo(writer);         writer.println(\"\");         if (!buffered) {           writer.flush();         }       }     }   }  catch (  IOException ioe) {     log.warn(sm.getString(\"accessLogValve.writeFail\",message.toString()),ioe);   } } "
"public static <V>List<V> invertList(List<V> sourceList){   if (isEmpty(sourceList)) {     return sourceList;   }   List<V> invertList=new ArrayList<V>(sourceList.size());   for (int i=sourceList.size() - 1; i >= 0; i--) {     invertList.add(sourceList.get(i));   }   return invertList; } "
"public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {   error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);   return null; } "
"public <M extends Configuration>void registerAddListener(OptionalRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener) throws ConfigException {   validateRelationDefinition(d);   DN baseDN=DNBuilder.create(path,d).parent();   ConfigAddListener adaptor=new ConfigAddListenerAdaptor<>(serverContext,path,d,listener);   registerAddListener(baseDN,adaptor); } "
"public AuthenticatorResult authenticate(String username,String password,Context context) throws ResourceException {   Reject.ifNull(username,\"Provided username was null\");   Reject.ifNull(context,\"Router context was null\");   if (resource.getContent().get(RESOURCE_FIELD_USERNAME).asString().equals(username) && resource.getContent().get(RESOURCE_FIELD_PASSWORD).asString().equals(password)) {     return AuthenticatorResult.authenticationSuccess(resource);   }  else {     return AuthenticatorResult.FAILED;   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node employeeNode;   NodeList childList;   Node createdNode;   Node lchild;   String childName;   Node appendedChild;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"p\");   employeeNode=elementList.item(1);   childList=employeeNode.getChildNodes();   createdNode=doc.createElement(\"br\");   appendedChild=employeeNode.appendChild(createdNode);   lchild=employeeNode.getLastChild();   childName=lchild.getNodeName();   assertEqualsAutoCase(\"element\",\"nodeName\",\"br\",childName); } "
"boolean hasConnectionError(){   return connectionError; } "
"public final void test_insertProviderAtLjava_security_ProviderLI(){   try {     Security.insertProviderAt(null,1);     fail(\"No expected NullPointerException\");   }  catch (  NullPointerException e) {   }   Provider p=new MyProvider();   int initNum=Security.getProviders().length;   Provider initialSecondProviderName=Security.getProviders()[1];   try {     assertEquals(initNum + 1,Security.insertProviderAt(p,-1));     assertSame(p,Security.getProviders()[initNum]);     assertEquals(-1,Security.insertProviderAt(p,1));     Security.removeProvider(p.getName());     assertEquals(initNum + 1,Security.insertProviderAt(p,initNum + 100));     assertSame(p,Security.getProviders()[initNum]);     Security.removeProvider(p.getName());     assertEquals(1,Security.insertProviderAt(p,1));     assertSame(p,Security.getProviders()[0]);     assertSame(initialSecondProviderName,Security.getProviders()[2]);   }   finally {     Security.removeProvider(p.getName());   } } "
"@Override public void toString(StringBuilder buffer){   buffer.append(\"LDAP client connection from \");   buffer.append(clientAddress);   buffer.append(\":\");   buffer.append(clientPort);   buffer.append(\" to \");   buffer.append(serverAddress);   buffer.append(\":\");   buffer.append(serverPort); } "
"private MappedClass readClass(String[] parts){   String original=parts[0].replace(\".\",\"/\");   String obfuscated=parts[2].replace(\".\",\"/\").substring(0,parts[2].length() - 1);   ClassNode node=nodes == null ? fakeNode(obfuscated) : nodes.get(obfuscated);   MappedClass mc=new MappedClass(node,obfuscated);   if (mc != null) {     mc.setNewName(original);   }   return mc; } "
"void put(final ByteVector out){   int n=0;   int size=2;   AnnotationWriter aw=this;   AnnotationWriter last=null;   while (aw != null) {     ++n;     size+=aw.bv.length;     aw.visitEnd();     aw.prev=last;     last=aw;     aw=aw.next;   }   out.putInt(size);   out.putShort(n);   aw=last;   while (aw != null) {     out.putByteArray(aw.bv.data,0,aw.bv.length);     aw=aw.prev;   } } "
"public void recordAbstractMethodsForOverrideCheck(SClassDef c,List<SMethodDef> abstractMethods) throws SyntaxException {   List<SMethodDef> visitedMethods=new ArrayList<>();   Set<SInterfaceDef> visitedTypes=new HashSet<>();   recordAbstractMethodsForOverrideCheck_class(c.parent(),abstractMethods,visitedMethods,visitedTypes);   for (  SInterfaceDef i : c.superInterfaces()) {     recordAbstractMethodsForOverrideCheck_interface(i,abstractMethods,visitedMethods,visitedTypes);   } } "
"public FSLogoutStatus handleSingleLogout(HttpServletRequest request,HttpServletResponse response,Object ssoToken,String sourceCheck){   this.request=request;   setLogoutURL();   FSUtils.debug.message(\"Entered FSPreLogoutHandler::handleSingleLogout\");   try {     this.response=response;     this.ssoToken=ssoToken;     this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);     String acceptString=request.getHeader(\"Accept\");     if ((acceptString != null) && (acceptString.indexOf(\"text/vnd.wap.wml\") != -1)) {       isWMLAgent=true;     }     FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);     FSSession session=sMgr.getSession(ssoToken);     String sessionIndex=null;     List partners=null;     if (session != null) {       sessionIndex=session.getSessionIndex();       partners=session.getSessionPartners();     }     if (FSUtils.debug.messageEnabled()) {       if (partners != null && partners.size() != 0) {         Iterator iter=partners.iterator();         while (iter.hasNext()) {           FSSessionPartner partner=(FSSessionPartner)iter.next();           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"PARTNER:\" + partner.getPartner());           }         }       }     }     if (FSLogoutUtil.liveConnectionsExist(userID,metaAlias)) {       HashMap providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken);       if (providerMap != null) {         FSSessionPartner currentSessionProvider=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);         sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);         if (currentSessionProvider != null) {           FSUtils.debug.message(\"creating IDP handler\");           FSSingleLogoutHandler handlerObj=new FSSingleLogoutHandler();           handlerObj.setHostedDescriptor(hostedDescriptor);           handlerObj.setHostedDescriptorConfig(hostedConfig);           handlerObj.setRealm(realm);           handlerObj.setHostedEntityId(hostedEntityId);           handlerObj.setHostedProviderRole(hostedRole);           handlerObj.setMetaAlias(metaAlias);           handlerObj.setRelayState(relayState);           return handlerObj.handleSingleLogout(response,request,currentSessionProvider,userID,sessionIndex,isWMLAgent,ssoToken);         }       }       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"No more providers, nothing to broadcast \" + \"\\ndestroy user session call destroyPrincipalSession\");       }       FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);       FSLogoutUtil.destroyLocalSession(ssoToken,request,response);       returnToPostLogout(IFSConstants.SAML_SUCCESS);       return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);     }  else {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"No live connections, destroy user\" + \" session call destroyPrincipalSession. source=\" + sourceCheck);       }       FSLogoutResponse logoutResponse=null;       FederationSPAdapter spAdapter=null;       if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP) && sourceCheck.equals(\"remote\")) {         spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);         if (spAdapter != null) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"FSPreLogoutHandler, \" + \"call preSingleLogoutProcess, SP/HTTP\");           }           try {             logoutResponse=FSLogoutResponse.parseURLEncodedRequest(request);             relayState=logoutResponse.getRelayState();             spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,null,logoutResponse,IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);           }  catch (          Exception e) {             FSUtils.debug.error(\"preSingleLogoutProcess.SP/HTTP\",e);           }         }       }       FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,sessionIndex,request,response);       if (SessionManager.getProvider().isValid(ssoToken)) {         FSLogoutUtil.destroyLocalSession(ssoToken,request,response);       }       if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP) && sourceCheck.equals(\"remote\")) {         if (spAdapter != null) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"FSPreLogoutHandler, \" + \"call postSingleLogoutProcess, SP/HTTP\");           }           try {             spAdapter.postSingleLogoutSuccess(hostedEntityId,request,response,userID,null,logoutResponse,IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);           }  catch (          Exception e) {             FSUtils.debug.error(\"postSingleLogoutSuccess.SP/HTTP:\",e);           }         }       }       returnToPostLogout(IFSConstants.SAML_SUCCESS);       return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);     }   }  catch (  SessionException e) {     FSUtils.debug.error(\"SessionException in liveConnectionsExist\" + \" So destroy self and exit\");     FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,null,request,response);     returnToPostLogout(IFSConstants.SAML_SUCCESS);     return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);   } } "
"public void schedule(TaskRunnable task,Date time) throws IllegalArgumentException, IllegalStateException {   if (shutdownThePool) {     throw new IllegalStateException(\"The timers have been shuted down!\");   }  else {     if ((task != null) && (time != null)) {       HeadTaskRunnable head=null;       do {         head=task.getHeadTask();         if (head != null) {           if (head.acquireValidLock()) {             try {               if (head == task.getHeadTask()) {                 if (head.scheduledExecutionTime() == time.getTime()) {                   return;                 }  else {                   if (!head.isTimedOut()) {                     throw new IllegalStateException(\"The task has been scheduled!\");                   }                 }               }             }   finally {               head.releaseLockAndNotify();             }           }         }       }  while (head != task.getHeadTask()); synchronized (taskList) {         if ((head=(HeadTaskRunnable)taskList.get(time)) == null) {           task.setNext(null);           taskList.put(time,new HeadTaskRunnable(this,task,time));         }       }       if (head == null) { synchronized (this) {           if ((nextRun == null) || (time.getTime() < nextRun.getTime())) {             nextRun=time;             long delay=time.getTime() - currentTimeMillis();             scheduler.setWait(((delay < 0) ? 0 : delay));           }         }       }  else {         if (head.acquireValidLock()) {           try {             task.setHeadTask(head);             TaskRunnable tailTask=head.tail();             task.setPrevious(tailTask);             tailTask.setNext(task);             task.setNext(null);             head.setTail(task);           }   finally {             head.releaseLockAndNotify();           }         }  else {           schedule(task,time);         }       }     }  else {       throw new IllegalArgumentException();     }   } } "
"public void test_SelectHaving() throws SQLException {   String selectQuery=\"SELECT snum, max(amt) AS max FROM \" + DatabaseCreator.ORDERS_TABLE + \" GROUP BY snum HAVING max(amt) > 3000\";   ResultSet result=statement.executeQuery(selectQuery);   HashSet<Double> values=new HashSet<Double>();   values.add(Double.valueOf(9891.88));   values.add(Double.valueOf(5160.45));   while (result.next()) {     Double max=result.getDouble(\"max\");     assertTrue(\"result set doesn't contain value\",values.contains(max));     assertTrue(\"wrong value in the result set\",values.remove(max));   }   result.close();   assertTrue(\"Result set has wrong size\",values.isEmpty()); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node employeeNode;   NodeList childList;   Node oldChild;   Node removedChild;   String childName;   String oldName;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"p\");   employeeNode=elementList.item(1);   childList=employeeNode.getChildNodes();   oldChild=childList.item(0);   oldName=oldChild.getNodeName();   removedChild=employeeNode.removeChild(oldChild);   assertNotNull(\"notnull\",removedChild);   childName=removedChild.getNodeName();   assertEquals(\"nodeName\",oldName,childName); } "
"public FrameBodyWPAY(String urlLink){   super(urlLink); } "
"public String toString(){   int iMax=array.length - 1;   if (iMax == -1)   return \"[]\";   StringBuilder b=new StringBuilder();   b.append('[');   for (int i=0; ; i++) {     b.append(getRaw(byteOffset(i)));     if (i == iMax)     return b.append(']').toString();     b.append(',').append(' ');   } } "
"public DynamicGroup(DN groupEntryDN,LinkedHashSet<LDAPURL> memberURLs){   super();   ifNull(groupEntryDN,memberURLs);   this.groupEntryDN=groupEntryDN;   this.memberURLs=memberURLs; } "
"@Override public synchronized void removeSTSInstance(String stsInstanceId,String realm) throws STSPublishException {   ServiceConfig baseService;   try {     baseService=new ServiceConfigManager(serviceName,getAdminToken()).getOrganizationConfig(realm,null);     if (baseService != null) {       baseService.removeSubConfig(stsInstanceId);       if (logger.isDebugEnabled()) {         logger.debug(restOrSoap() + \"sts instance \" + stsInstanceId+ \" in realm \"+ realm+ \" removed from persistent store.\");       }     }  else {       throw new STSPublishException(ResourceException.NOT_FOUND,\"Could not create ServiceConfigManager for realm \" + realm + \" in order to remove \"+ restOrSoap()+ \" sts instance with id \"+ stsInstanceId);     }   }  catch (  SMSException|SSOException e) {     throw new STSPublishException(ResourceException.INTERNAL_ERROR,\"Exception caught removing \" + restOrSoap() + \" sts instance with id \"+ stsInstanceId+ \" from realm \"+ realm+ \". Exception: \"+ e,e);   } } "
"@SuppressWarnings({\"rawtypes\",\"unchecked\"}) public static void reverse(List<?> list){   int size=list.size();   if (size < REVERSE_THRESHOLD || list instanceof RandomAccess) {     for (int i=0, mid=size >> 1, j=size - 1; i < mid; i++, j--)     swap(list,i,j);   }  else {     ListIterator fwd=list.listIterator();     ListIterator rev=list.listIterator(size);     for (int i=0, mid=list.size() >> 1; i < mid; i++) {       Object tmp=fwd.next();       fwd.set(rev.previous());       rev.set(tmp);     }   } } "
"public void deleteField(FieldKey fieldKey) throws KeyNotFoundException {   if (fieldKey.equals(FieldKey.COVER_ART)) {     images.clear();   }  else {     tag.deleteField(fieldKey);   } } "
"public void runTest() throws Throwable {   Document doc;   Document aNewDoc;   Text text;   Node aNode;   Document ownerDocument;   DocumentType docType;   String system;   String value;   doc=(Document)load(\"staffNS\",true);   aNewDoc=(Document)load(\"staffNS\",true);   text=aNewDoc.createTextNode(\"this is text data\");   aNode=doc.importNode(text,false);   ownerDocument=aNode.getOwnerDocument();   assertNotNull(\"ownerDocumentNotNull\",ownerDocument);   docType=ownerDocument.getDoctype();   system=docType.getSystemId();   assertURIEquals(\"systemId\",null,null,null,\"staffNS.dtd\",null,null,null,null,system);   value=aNode.getNodeValue();   assertEquals(\"nodeValue\",\"this is text data\",value); } "
"public final String exceptionExpand(String message,Exception exc){   StringBuffer aBuffer=new StringBuffer(1000);   if (message != null) {     aBuffer.append(\"User Message=\");     aBuffer.append(message);     aBuffer.append(\"\\n\");   }   if (exc == null) {     aBuffer.append(\"Exception=(null)\\n\");   }  else {     aBuffer.append(\"Exception Class=\" + exc.getClass());     aBuffer.append(\"\\n\");     aBuffer.append(\"--> toString=\");     aBuffer.append(exc.toString());     aBuffer.append(\"\\n\");     aBuffer.append(\"--> Stack=\");     fillStackTrace(aBuffer,exc.getStackTrace());     aBuffer.append(\"\\n\");   }   return aBuffer.toString(); } "
"public boolean mustCheckUnsavedChanges(){   boolean mustCheckUnsavedChanges;   if (vlvIndexPanel.isVisible()) {     mustCheckUnsavedChanges=vlvIndexPanel.mustCheckUnsavedChanges();   }  else   if (standardIndexPanel.isVisible()) {     mustCheckUnsavedChanges=standardIndexPanel.mustCheckUnsavedChanges();   }  else {     mustCheckUnsavedChanges=false;   }   return mustCheckUnsavedChanges; } "
"byte[] process() throws java.io.IOException {   try {     createTableDirectory();     readLoca();     flatGlyphs();     createNewGlyphTables();     locaToBytes();     assembleFont();     return outFont;   }   finally {     try {       rf.close();     }  catch (    Exception ignore) {     }   } } "
"protected void notifyScrollingListenersAboutStart(){   for (  OnWheelScrollListener listener : scrollingListeners) {     listener.onScrollingStarted(this);   } } "
"public String fillParamWithEventAttrib(String paramData,Event event){   if (!database.isOpen()) {     throw new IllegalStateException(TAG + \" is already closed.\");   }   StringBuilder retVal=new StringBuilder();   int cursor=0;   while (cursor < paramData.length()) {     int openBracketIdx=paramData.indexOf('<',cursor);     int closeBracketIdx=paramData.indexOf('>',cursor);     if (openBracketIdx == -1 || closeBracketIdx == -1 || openBracketIdx + 1 >= closeBracketIdx) {       retVal.append(paramData.substring(cursor));       break;     }     String attr=paramData.substring(openBracketIdx + 1,closeBracketIdx);     String param=paramData.substring(openBracketIdx,closeBracketIdx + 1);     String paramAttr;     try {       paramAttr=event.getAttribute(attr);     }  catch (    IllegalArgumentException e) {       paramAttr=param;     }     retVal.append(paramData.substring(cursor,openBracketIdx));     retVal.append(paramAttr);     cursor=closeBracketIdx + 1;   }   Log.d(\"fillParamWithEventAttrib\",paramData + \" -> \" + retVal.toString());   return retVal.toString(); } "
"private void parseLockNullProperties(HttpServletRequest req,XMLWriter generatedXML,String path,int type,Vector<String> propertiesVector){   if (isSpecialPath(path))   return;   LockInfo lock=resourceLocks.get(path);   if (lock == null)   return;   String absoluteUri=req.getRequestURI();   String relativePath=getRelativePath(req);   String toAppend=path.substring(relativePath.length());   if (!toAppend.startsWith(\"/\"))   toAppend=\"/\" + toAppend;   String rewrittenUrl=rewriteUrl(RequestUtil.normalize(absoluteUri + toAppend));   generatePropFindResponse(generatedXML,rewrittenUrl,path,type,propertiesVector,true,true,lock.creationDate.getTime(),lock.creationDate.getTime(),0,\"\",\"\"); } "
"public javax.sip.address.Address createAddress(String displayName,javax.sip.address.URI uri){   if (uri == null)   throw new NullPointerException(\"null  URI\");   AddressImpl addressImpl=new AddressImpl();   if (displayName != null)   addressImpl.setDisplayName(displayName);   addressImpl.setURI(uri);   return addressImpl; } "
"public boolean stopCellEditing(){   fireEditingStopped();   return true; } "
"public void testGenerateCertPath2() throws Exception {   try {     CertificateFactory.getInstance(\"X.509\").generateCertPath((List<Certificate>)null);     fail(\"NullPointerException was not thrown\");   }  catch (  NullPointerException e) {   } } "
"@Inject public ResourceSetTokenDataStore(JavaBeanAdapterFactory adapterFactory,TaskExecutor taskExecutor,TaskFactory taskFactory){   super((JavaBeanAdapter<ResourceSetDescription>)adapterFactory.create(ResourceSetDescription.class),taskExecutor,taskFactory); } "
"protected void registerChildren(){   super.registerChildren();   registerChild(PGTITLE,CCPageTitle.class);   registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);   registerChild(TF_DEVICE_NAME,CCTextField.class);   registerChild(TF_CLASSIFICATION,CCTextField.class);   registerChild(SINGLECHOICE_CLASSIFICATION,CCDropDownMenu.class);   registerChild(BTN_CLASSIFICATION,CCButton.class);   registerChild(PROPERTY_ATTRIBUTE,AMPropertySheet.class);   ptModel.registerChildren(this);   propertySheetModel.registerChildren(this); } "
"public boolean contains(int s){   runTo(-1);   return super.contains(s); } "
"public com.sun.identity.liberty.ws.idpp.jaxb.QueryResponseElement createQueryResponseElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryResponseElementImpl(); } "
"@Override public final GenericBindRequest nextBindRequest(){   return nextBindRequest; } "
"public static String forceFrameID23To22(String identifier){   return ID3Frames.forcev23Tov22.get(identifier); } "
"private BigDecimal convertIntToBigDecimal(int quoteParam){   BigDecimal quoteParamBigDecimal=new BigDecimal(quoteParam).divide(new BigDecimal(100),new MathContext(8,RoundingMode.HALF_DOWN));   return quoteParamBigDecimal; } "
"static String calculateResponse(String algorithm,String hashUserNameRealmPasswd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){   if (stackLogger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {     stackLogger.logDebug(\"trying to authenticate using : \" + algorithm + \", \"+ hashUserNameRealmPasswd+ \", \"+ nonce_value+ \", \"+ nc_value+ \", \"+ cnonce_value+ \", \"+ method+ \", \"+ digest_uri_value+ \", \"+ entity_body+ \", \"+ qop_value);   }   if (hashUserNameRealmPasswd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException(\"Null parameter to MessageDigestAlgorithm.calculateResponse()\");   if (cnonce_value == null || cnonce_value.length() == 0)   throw new NullPointerException(\"cnonce_value may not be absent for MD5-Sess algorithm.\");   String A2=null;   if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase(\"auth\")) {     A2=method + \":\" + digest_uri_value;   }  else {     if (entity_body == null)     entity_body=\"\";     A2=method + \":\" + digest_uri_value+ \":\"+ H(entity_body);   }   String request_digest=null;   if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase(\"auth\") || qop_value.equalsIgnoreCase(\"auth-int\"))) {     request_digest=KD(hashUserNameRealmPasswd,nonce_value + \":\" + nc_value+ \":\"+ cnonce_value+ \":\"+ qop_value+ \":\"+ H(A2));   }  else {     request_digest=KD(hashUserNameRealmPasswd,nonce_value + \":\" + H(A2));   }   return request_digest; } "
"public StatusDetail createStatusDetail(org.w3c.dom.Element value) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_DETAIL,value);   if (obj == null) {     return new StatusDetailImpl(value);   }  else {     return (StatusDetail)obj;   } } "
"public E poll(long timeout,TimeUnit unit) throws InterruptedException {   long nanos=unit.toNanos(timeout);   final ReentrantLock lock=this.lock;   lock.lockInterruptibly();   try {     for (; ; ) {       E first=q.peek();       if (first == null) {         if (nanos <= 0)         return null;  else         nanos=available.awaitNanos(nanos);       }  else {         long delay=first.getDelay(NANOSECONDS);         if (delay <= 0)         return q.poll();         if (nanos <= 0)         return null;         first=null;         if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);  else {           Thread thisThread=Thread.currentThread();           leader=thisThread;           try {             long timeLeft=available.awaitNanos(delay);             nanos-=delay - timeLeft;           }   finally {             if (leader == thisThread)             leader=null;           }         }       }     }   }   finally {     if (leader == null && q.peek() != null)     available.signal();     lock.unlock();   } } "
"public void addDSInfos(List<DSInfo> dsInfos){ synchronized (remoteDirectoryServers) {     for (    LightweightServerHandler ls : remoteDirectoryServers.values()) {       dsInfos.add(ls.toDSInfo());     }   } } "
"protected JScrollPane createScroller(){   JScrollPane sp=new JScrollPane(list,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);   sp.setHorizontalScrollBar(null);   return sp; } "
"private void removeClearedReferences(final Iterator<PooledSoftReference<T>> iterator){   PooledSoftReference<T> ref;   while (iterator.hasNext()) {     ref=iterator.next();     if (ref.getReference() == null || ref.getReference().isEnqueued()) {       iterator.remove();     }   } } "
"public boolean handleRegistrationAfterFederation(String LRURL,HttpServletResponse response){   regisSource=IFSConstants.REGIS_FEDERATION;   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"Entered FSNameRegistrationHandler:: \" + \"handleNameRegistration\");   }   this.returnURL=LRURL;   this.response=response;   if (managerInst == null) {     FSUtils.debug.error(\"FSNameRegistrationHandler \" + FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_ACCOUNT_INSTANCE));     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSNameRegistrationHandler::handleNameRegistration\" + \"failed to get Account Manager instance\");     }     return false;   }   boolean bRemoteStatus=doRemoteRegistration();   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"Completed registration after federation with status \" + bRemoteStatus);   }   return bRemoteStatus; } "
"public com.sun.identity.liberty.ws.common.jaxb.secext.SecurityHeaderType createSecurityHeaderType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.SecurityHeaderTypeImpl(); } "
"private void migrateInternal(int operationType,InstFinderInteractionsRunner iFinderRunner,InstallState installState,InstallLogger migrateLog) throws InstallException {   InteractionsRunner iRunner=new InteractionsRunner(getRunInfo(),null);   iRunner.setStateAccess(installState.getStateAccess());   executeInteractionsAndTasks(iRunner,migrateLog);   updateStateInformation(iFinderRunner,iRunner,migrateLog); } "
"public void run(){   try {     verify();   }  catch (  Exception e) {     Debug.error(name + \":Error running verifier thread\",e);   }   verificationOn=false; } "
"public void test_setIntLjava_lang_ObjectI() throws Exception {   TestField x=new TestField();   Field f=null;   int val=0;   try {     f=x.getClass().getDeclaredField(\"intField\");     f.setInt(x,Integer.MIN_VALUE);     val=f.getInt(x);   }  catch (  Exception e) {     fail(\"Exception during setInteger test: \" + e.toString());   }   assertEquals(\"Returned incorrect int field value\",Integer.MIN_VALUE,val);   boolean thrown=false;   try {     f=x.getClass().getDeclaredField(\"booleanField\");     f.setInt(x,Integer.MIN_VALUE);     fail(\"Accessed field of invalid type\");   }  catch (  IllegalArgumentException ex) {     thrown=true;   }   assertTrue(\"IllegalArgumentException expected but not thrown\",thrown);   thrown=false;   try {     f=x.getClass().getDeclaredField(\"intPFField\");     assertFalse(f.isAccessible());     f.setInt(x,Integer.MIN_VALUE);     fail(\"Accessed inaccessible field\");   }  catch (  IllegalAccessException ex) {     thrown=true;   }   assertTrue(\"IllegalAccessException expected but not thrown\",thrown);   thrown=false;   try {     f=x.getClass().getDeclaredField(\"intField\");     f.setInt(null,Integer.MIN_VALUE);     fail(\"NullPointerException expected but not thrown\");   }  catch (  NullPointerException ex) {     thrown=true;   } catch (  Exception ex) {     fail(\"NullPointerException expected but not thrown\");   }   assertTrue(\"NullPointerException expected but not thrown\",thrown);   f=x.getClass().getDeclaredField(\"intSField\");   f.setInt(null,Integer.MIN_VALUE);   val=f.getInt(x);   assertEquals(\"Returned incorrect int field value\",Integer.MIN_VALUE,val); } "
"public boolean equals(Object object){   return (super.equals(object) && object instanceof JobName); } "
"public ModifyRequestProtocolOp(ByteString dn){   this.dn=dn;   this.modifications=new ArrayList<>(); } "
"public void visitInnerClassType(String name){ } "
"@Override public String toString(){   return super.toString() + \"[caseSensitivity=\" + caseSensitivity+ \"]\"; } "
"public String toSessionTokenId(SessionID sessionID){   return encoding.encryptKey(sessionID); } "
"public void printStackTrace(PrintWriter s){   super.printStackTrace(s); } "
"public void run(){   if (Debug.messageEnabled()) {     Debug.message(tableName + \":DBHandler:TimeBufferingTask.run() called\");   }   nonBlockingFlush(); } "
"public boolean removeAll(Collection<?> c){   if (c == null)   throw new NullPointerException();   final ReentrantLock lock=this.lock;   lock.lock();   try {     Object[] elements=getArray();     int len=elements.length;     if (len != 0) {       int newlen=0;       Object[] temp=new Object[len];       for (int i=0; i < len; ++i) {         Object element=elements[i];         if (!c.contains(element))         temp[newlen++]=element;       }       if (newlen != len) {         setArray(Arrays.copyOf(temp,newlen));         return true;       }     }     return false;   }   finally {     lock.unlock();   } } "
"public void put(String hostname,InetAddress[] addresses){   cache.put(hostname,new AddressCacheEntry(addresses)); } "
"@SuppressWarnings(\"deprecation\") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError { switch (request.getMethod()) { case Method.DEPRECATED_GET_OR_POST: {       byte[] postBody=request.getPostBody();       if (postBody != null) {         HttpPost postRequest=new HttpPost(request.getUrl());         postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());         HttpEntity entity;         entity=new ByteArrayEntity(postBody);         postRequest.setEntity(entity);         return postRequest;       }  else {         return new HttpGet(request.getUrl());       }     } case Method.GET:   return new HttpGet(request.getUrl()); case Method.DELETE: return new HttpDelete(request.getUrl()); case Method.POST: { HttpPost postRequest=new HttpPost(request.getUrl()); postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType()); setEntityIfNonEmptyBody(postRequest,request); return postRequest; } case Method.PUT: { HttpPut putRequest=new HttpPut(request.getUrl()); putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType()); setEntityIfNonEmptyBody(putRequest,request); return putRequest; } case Method.HEAD: return new HttpHead(request.getUrl()); case Method.OPTIONS: return new HttpOptions(request.getUrl()); case Method.TRACE: return new HttpTrace(request.getUrl()); case Method.PATCH: { HttpPatch patchRequest=new HttpPatch(request.getUrl()); patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType()); setEntityIfNonEmptyBody(patchRequest,request); return patchRequest; } default : throw new IllegalStateException(\"Unknown request method.\"); } } "
"public MimeType(String rawdata) throws MimeTypeParseException {   parse(rawdata); } "
"public static TestSuite suite() throws Exception {   Class testClass=ClassLoader.getSystemClassLoader().loadClass(\"org.w3c.domts.level3.core.alltests\");   Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});   DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());   Object test=testConstructor.newInstance(new Object[]{factory});   return new JUnitTestSuiteAdapter((DOMTestSuite)test); } "
"public void initialize(String hostedProviderID,Set initParams){   FSUtils.debug.message(\"In FSDefaultSPAdapter.initialize.\");   if ((initParams != null) && !initParams.isEmpty()) {     Iterator iter=initParams.iterator();     while (iter.hasNext()) {       String envValue=(String)iter.next();       if ((envValue.toUpperCase()).startsWith(FederationSPAdapter.ENV_REALM)) {         try {           realm=envValue.substring((FederationSPAdapter.ENV_REALM).length(),envValue.length());         }  catch (        Exception e) {           if (FSUtils.debug.warningEnabled()) {             FSUtils.debug.warning(\"FSDefaultSPAdapter.init:Could not get realm:\",e);           }         }         break;       }     }   }   if ((realm == null) || (realm.length() == 0)) {     realm=ROOT_REALM;   } } "
"public byte[] composeString(byte[] oldString,byte newString){   int length=oldString.length;   byte[] str=new byte[length + 1];   System.arraycopy(oldString,0,str,0,length);   str[length]=newString;   return str; } "
"@Override public void init(ServletConfig config) throws ServletException {   super.init(config);   cgiPathPrefix=getServletConfig().getInitParameter(\"cgiPathPrefix\");   boolean passShellEnvironment=Boolean.parseBoolean(getServletConfig().getInitParameter(\"passShellEnvironment\"));   if (passShellEnvironment) {     shellEnv.putAll(System.getenv());   }   if (getServletConfig().getInitParameter(\"executable\") != null) {     cgiExecutable=getServletConfig().getInitParameter(\"executable\");   }   if (getServletConfig().getInitParameter(\"executable-arg-1\") != null) {     List<String> args=new ArrayList<>();     for (int i=1; ; i++) {       String arg=getServletConfig().getInitParameter(\"executable-arg-\" + i);       if (arg == null) {         break;       }       args.add(arg);     }     cgiExecutableArgs=args;   }   if (getServletConfig().getInitParameter(\"parameterEncoding\") != null) {     parameterEncoding=getServletConfig().getInitParameter(\"parameterEncoding\");   }   if (getServletConfig().getInitParameter(\"stderrTimeout\") != null) {     stderrTimeout=Long.parseLong(getServletConfig().getInitParameter(\"stderrTimeout\"));   }   if (getServletConfig().getInitParameter(\"envHttpHeaders\") != null) {     envHttpHeadersPattern=Pattern.compile(getServletConfig().getInitParameter(\"envHttpHeaders\"));   } } "
"public void handleBtnSearchRequest(RequestInvocationEvent event){   bSearchForRealm=true;   forwardTo(); } "
"@Override public Iterator<E> iterator(){   return new PriorityIterator(); } "
"public JTree(TreeNode root){   this(root,false); } "
"public Crops(final Material type,final CropState state){   super(type);   setState(state); } "
"public boolean export_to_dsn_file(OutputStream p_output_stream,String p_design_name,boolean p_compat_mode){   if (board_is_read_only || p_output_stream == null)   return false;   DsnWriteSesFile writer=new DsnWriteSesFile(this,p_output_stream);   return writer.write(p_design_name,p_compat_mode); } "
"protected void addSubComponents(){   add(iconButton);   add(maxButton);   add(closeButton); } "
"protected AbstractManagedObjectDefinition(String name,AbstractManagedObjectDefinition<? super C,? super S> parent){   this.name=name;   this.parent=parent;   if (parent != null) {     registerInParent();     for (    PropertyDefinition<?> pd : parent.getAllPropertyDefinitions()) {       allPropertyDefinitions.put(pd.getName(),pd);     }     for (    RelationDefinition<?,?> rd : parent.getAllRelationDefinitions()) {       allRelationDefinitions.put(rd.getName(),rd);     }     for (    AggregationPropertyDefinition<?,?> apd : parent.getAllAggregationPropertyDefinitions()) {       allAggregationPropertyDefinitions.put(apd.getName(),apd);     }   } } "
"public String createStandardManager(String parent) throws Exception {   StandardManager manager=new StandardManager();   ObjectName pname=new ObjectName(parent);   Container container=getParentContainerFromParent(pname);   if (container instanceof Context) {     ((Context)container).setManager(manager);   }  else {     throw new Exception(sm.getString(\"mBeanFactory.managerContext\"));   }   ObjectName oname=manager.getObjectName();   if (oname != null) {     return (oname.toString());   }  else {     return null;   } } "
"public static boolean isUnderline(AttributeSet a){   Boolean underline=(Boolean)a.getAttribute(Underline);   if (underline != null) {     return underline.booleanValue();   }   return false; } "
"protected ForwardingJavaFileManager(M fileManager){   fileManager.getClass();   this.fileManager=fileManager; } "
"static ZoneRules readExternal(DataInput in) throws IOException, ClassNotFoundException {   int stdSize=in.readInt();   long[] stdTrans=(stdSize == 0) ? EMPTY_LONG_ARRAY : new long[stdSize];   for (int i=0; i < stdSize; i++) {     stdTrans[i]=Ser.readEpochSec(in);   }   ZoneOffset[] stdOffsets=new ZoneOffset[stdSize + 1];   for (int i=0; i < stdOffsets.length; i++) {     stdOffsets[i]=Ser.readOffset(in);   }   int savSize=in.readInt();   long[] savTrans=(savSize == 0) ? EMPTY_LONG_ARRAY : new long[savSize];   for (int i=0; i < savSize; i++) {     savTrans[i]=Ser.readEpochSec(in);   }   ZoneOffset[] savOffsets=new ZoneOffset[savSize + 1];   for (int i=0; i < savOffsets.length; i++) {     savOffsets[i]=Ser.readOffset(in);   }   int ruleSize=in.readByte();   ZoneOffsetTransitionRule[] rules=(ruleSize == 0) ? EMPTY_LASTRULES : new ZoneOffsetTransitionRule[ruleSize];   for (int i=0; i < ruleSize; i++) {     rules[i]=ZoneOffsetTransitionRule.readExternal(in);   }   return new ZoneRules(stdTrans,stdOffsets,savTrans,savOffsets,rules); } "
"private void assertDelEntry(SearchResultEntry entry,String uid,String entryUUID,long changeNumber,CSN csn) throws Exception {   assertAttributeValue(entry,\"changetype\",\"delete\");   assertAttributeValue(entry,\"targetuniqueid\",entryUUID);   assertAttributeValue(entry,\"targetentryuuid\",entryUUID);   assertEntryCommonAttributes(entry,uid,entryUUID,changeNumber,csn); } "
"public SQLTimeoutException(Throwable cause){   super(cause); } "
"public TIFFDirectory(RandomAccessFileOrArray stream,long ifd_offset,int directory) throws java.io.IOException {   long global_save_offset=stream.getPosition();   stream.seek(0L);   int endian=stream.readUnsignedShort();   if (!isValidEndianTag(endian)) {     throw new IOException(IOException.BadEndiannessTag0x4949Or0x4d4d);   }   isBigEndian=endian == 0x4d4d;   stream.seek(ifd_offset);   int dirNum=0;   while (dirNum < directory) {     int numEntries=readUnsignedShort(stream);     stream.seek(ifd_offset + 12 * numEntries);     ifd_offset=readUnsignedInt(stream);     stream.seek(ifd_offset);     dirNum++;   }   initialize(stream);   stream.seek(global_save_offset); } "
"public IIOByteBuffer(byte[] data,int offset,int length){   this.data=data;   this.offset=offset;   this.length=length; } "
"public void logException(Throwable ex){   logger.error(\"Error\",ex); } "
"public void appendByteChunk(ByteChunk bc){   if (bc == null) {     log.error(sm.getString(\"ajpmessage.null\"),new NullPointerException());     appendInt(0);     appendByte(0);     return;   }   appendBytes(bc.getBytes(),bc.getStart(),bc.getLength()); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedPartsElement createSignedPartsElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedPartsElementImpl(); } "
"public FrameBodyTPOS(){   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);   setObjectValue(DataTypes.OBJ_TEXT,new PartOfSet.PartOfSetValue()); } "
"public synchronized boolean isServiced(String name){   return (serviced.contains(name)); } "
"public MockResponse clearHeaders(){   headers.clear();   return this; } "
"public String toFilter(String operator){   return ldapAttribute + operator + attributeName; } "
"private void cancelClicked(){   isCanceled=true;   dispose(); } "
"@Override public String toJson(){   GsonBuilder gson=new GsonBuilder();   gson.registerTypeAdapter(Position.class,new PositionSerializer());   return gson.create().toJson(this); } "
"public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException {   try {     AlgorithmParameterGenerator.getInstance(null,mProv.getName());     fail(\"NullPointerException or NoSuchAlgorithmException should be thrown\");   }  catch (  NullPointerException e) {   } catch (  NoSuchAlgorithmException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       AlgorithmParameterGenerator.getInstance(invalidValues[i],mProv.getName());       fail(\"NoSuchAlgorithmException must be thrown (algorithm: \".concat(invalidValues[i]).concat(\")\"));     }  catch (    NoSuchAlgorithmException e) {     }   }   String prov=null;   for (int i=0; i < validValues.length; i++) {     try {       AlgorithmParameterGenerator.getInstance(validValues[i],prov);       fail(\"IllegalArgumentException must be thrown when provider is null (algorithm: \".concat(invalidValues[i]).concat(\")\"));     }  catch (    IllegalArgumentException e) {     }   }   for (int i=0; i < validValues.length; i++) {     for (int j=1; j < invalidValues.length; j++) {       try {         AlgorithmParameterGenerator.getInstance(validValues[i],invalidValues[j]);         fail(\"NoSuchProviderException must be thrown (algorithm: \".concat(invalidValues[i]).concat(\" provider: \").concat(invalidValues[j]).concat(\")\"));       }  catch (      NoSuchProviderException e) {       }     }   }   AlgorithmParameterGenerator apG;   for (int i=0; i < validValues.length; i++) {     apG=AlgorithmParameterGenerator.getInstance(validValues[i],mProv.getName());     assertEquals(\"Incorrect algorithm\",apG.getAlgorithm(),validValues[i]);     assertEquals(\"Incorrect provider\",apG.getProvider().getName(),mProv.getName());     checkResult(apG);   } } "
"public void writeAbandonRequest(final int messageID,final AbandonRequest request) throws IOException {   logger.trace(\"ENCODE LDAP ABANDON REQUEST(messageID=%d, request=%s)\",messageID,request);   writeMessageHeader(messageID); {     writer.writeInteger(LDAP.OP_TYPE_ABANDON_REQUEST,request.getRequestID());   }   writeMessageFooter(request.getControls()); } "
"public String toString(){   StringBuffer sb=new StringBuffer();   sb.append(\"[\\n\");   if (unmodTrustAnchors != null) {     sb.append(\"  Trust Anchors: \" + unmodTrustAnchors.toString() + \"\\n\");   }   if (unmodInitialPolicies != null) {     if (unmodInitialPolicies.isEmpty()) {       sb.append(\"  Initial Policy OIDs: any\\n\");     }  else {       sb.append(\"  Initial Policy OIDs: [\" + unmodInitialPolicies.toString() + \"]\\n\");     }   }   sb.append(\"  Validity Date: \" + String.valueOf(date) + \"\\n\");   sb.append(\"  Signature Provider: \" + String.valueOf(sigProvider) + \"\\n\");   sb.append(\"  Default Revocation Enabled: \" + revocationEnabled + \"\\n\");   sb.append(\"  Explicit Policy Required: \" + explicitPolicyRequired + \"\\n\");   sb.append(\"  Policy Mapping Inhibited: \" + policyMappingInhibited + \"\\n\");   sb.append(\"  Any Policy Inhibited: \" + anyPolicyInhibited + \"\\n\");   sb.append(\"  Policy Qualifiers Rejected: \" + policyQualifiersRejected + \"\\n\");   sb.append(\"  Target Cert Constraints: \" + String.valueOf(certSelector) + \"\\n\");   if (certPathCheckers != null)   sb.append(\"  Certification Path Checkers: [\" + certPathCheckers.toString() + \"]\\n\");   if (certStores != null)   sb.append(\"  CertStores: [\" + certStores.toString() + \"]\\n\");   sb.append(\"]\");   return sb.toString(); } "
"public void processingInstruction(String target,String data) throws SAXException {   if (documentHandler != null)   documentHandler.processingInstruction(target,data); } "
"public ModifyResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){   this.resultCode=resultCode;   this.errorMessage=errorMessage;   this.matchedDN=matchedDN;   this.referralURLs=referralURLs; } "
"private PointF transformCoordTouchToBitmap(float x,float y,boolean clipToBitmap){   matrix.getValues(m);   float origW=getDrawable().getIntrinsicWidth();   float origH=getDrawable().getIntrinsicHeight();   float transX=m[Matrix.MTRANS_X];   float transY=m[Matrix.MTRANS_Y];   float finalX=((x - transX) * origW) / getImageWidth();   float finalY=((y - transY) * origH) / getImageHeight();   if (clipToBitmap) {     finalX=Math.min(Math.max(finalX,0),origW);     finalY=Math.min(Math.max(finalY,0),origH);   }   return new PointF(finalX,finalY); } "
"public boolean equals(Object obj){   try {     return equals((FontRenderContext)obj);   }  catch (  ClassCastException e) {     return false;   } } "
"protected AbstractFrameBodyTextInfo(byte textEncoding,String text){   super();   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);   setObjectValue(DataTypes.OBJ_TEXT,text); } "
"public SQLFeatureNotSupportedException(String reason,Throwable cause){   super(reason,cause); } "
"public Array readArray() throws SQLException {   return (Array)getNextAttribute(); } "
"public final void testWriteint02() throws IOException {   for (int k=0; k < algorithmName.length; k++) {     try {       MessageDigest md=MessageDigest.getInstance(algorithmName[k]);       ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);       DigestOutputStream dos=new DigestOutputStream(bos,md);       dos.on(false);       for (int i=0; i < MY_MESSAGE_LEN; i++) {         dos.write(myMessage[i]);       }       assertTrue(\"write\",Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));       assertTrue(\"update\",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k] + \"_NU\")));       return;     }  catch (    NoSuchAlgorithmException e) {     }   }   fail(getName() + \": no MessageDigest algorithms available - test not performed\"); } "
"public void testSubtractDiffScalePosNeg(){   String a=\"1231212478987482988429808779810457634781384756794987\";   int aScale=15;   String b=\"747233429293018787918347987234564568\";   int bScale=-10;   String c=\"-7472334291698975400195996883915836900189542365.218615243205013\";   int cScale=15;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result=aNumber.subtract(bNumber);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",cScale,result.scale()); } "
"public static boolean acquireSharedLock(String lockFile,StringBuilder failureReason){ synchronized (mapLock) {     if (exclusiveLocks.containsKey(lockFile)) {       failureReason.append(ERR_FILELOCKER_LOCK_SHARED_REJECTED_BY_EXCLUSIVE.get(lockFile));       return false;     }     FileLock sharedLock=sharedLocks.get(lockFile);     if (sharedLock != null) {       int numReferences=sharedLockReferences.get(lockFile);       numReferences++;       sharedLockReferences.put(lockFile,numReferences);       return true;     }     File f=getFileForPath(lockFile);     try {       if (!f.exists()) {         f.createNewFile();       }     }  catch (    Exception e) {       logger.traceException(e);       failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_CREATE.get(lockFile,getExceptionMessage(e)));       return false;     }     FileChannel channel=null;     RandomAccessFile raf=null;     try {       raf=new RandomAccessFile(lockFile,\"r\");       channel=raf.getChannel();     }  catch (    Exception e) {       logger.traceException(e);       failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_OPEN.get(lockFile,getExceptionMessage(e)));       close(raf);       return false;     }     FileLock fileLock;     try {       fileLock=channel.tryLock(0L,Long.MAX_VALUE,true);     }  catch (    Exception e) {       logger.traceException(e);       failureReason.append(ERR_FILELOCKER_LOCK_SHARED_FAILED_LOCK.get(lockFile,getExceptionMessage(e)));       close(channel,raf);       return false;     }     if (fileLock == null) {       failureReason.append(ERR_FILELOCKER_LOCK_SHARED_NOT_GRANTED.get(lockFile));       close(channel,raf);       return false;     }  else {       sharedLocks.put(lockFile,fileLock);       sharedLockReferences.put(lockFile,1);       return true;     }   } } "
"public void removeChangeListener(ChangeListener l){   styles.removeChangeListener(l); } "
"public final void testHashCode01(){   int hc=0;   EllipticCurve f=new EllipticCurve(new ECFieldFp(BigInteger.valueOf(23L)),BigInteger.ONE,BigInteger.valueOf(19L),new byte[24]);   hc=f.hashCode();   assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode()); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeinsertbeforedocfragment.class,args); } "
"private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){   List<Challenge> result=new ArrayList<Challenge>();   for (int h=0; h < responseHeaders.length(); h++) {     if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {       continue;     }     String value=responseHeaders.getValue(h);     int pos=0;     while (pos < value.length()) {       int tokenStart=pos;       pos=HeaderParser.skipUntil(value,pos,\" \");       String scheme=value.substring(tokenStart,pos).trim();       pos=HeaderParser.skipWhitespace(value,pos);       if (!value.regionMatches(true,pos,\"realm=\\\"\",0,\"realm=\\\"\".length())) {         break;       }       pos+=\"realm=\\\"\".length();       int realmStart=pos;       pos=HeaderParser.skipUntil(value,pos,\"\\\"\");       String realm=value.substring(realmStart,pos);       pos++;       pos=HeaderParser.skipUntil(value,pos,\",\");       pos++;       pos=HeaderParser.skipWhitespace(value,pos);       result.add(new Challenge(scheme,realm));     }   }   return result; } "
"@Override BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){   if (src == null || src.getType() != BufferedImage.TYPE_INT_ARGB) {     throw new IllegalArgumentException(\"Effect only works with \" + \"source images of type BufferedImage.TYPE_INT_ARGB.\");   }   if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {     throw new IllegalArgumentException(\"Effect only works with \" + \"destination images of type BufferedImage.TYPE_INT_ARGB.\");   }   double trangleAngle=Math.toRadians(angle - 90);   int offsetX=(int)(Math.sin(trangleAngle) * distance);   int offsetY=(int)(Math.cos(trangleAngle) * distance);   int tmpOffX=offsetX + size;   int tmpOffY=offsetX + size;   int tmpW=w + offsetX + size+ size;   int tmpH=h + offsetX + size;   int[] lineBuf=getArrayCache().getTmpIntArray(w);   byte[] tmpBuf1=getArrayCache().getTmpByteArray1(tmpW * tmpH);   Arrays.fill(tmpBuf1,(byte)0x00);   byte[] tmpBuf2=getArrayCache().getTmpByteArray2(tmpW * tmpH);   Raster srcRaster=src.getRaster();   for (int y=0; y < h; y++) {     int dy=(y + tmpOffY);     int offset=dy * tmpW;     srcRaster.getDataElements(0,y,w,1,lineBuf);     for (int x=0; x < w; x++) {       int dx=x + tmpOffX;       tmpBuf1[offset + dx]=(byte)((lineBuf[x] & 0xFF000000) >>> 24);     }   }   float[] kernel=EffectUtils.createGaussianKernel(size);   EffectUtils.blur(tmpBuf1,tmpBuf2,tmpW,tmpH,kernel,size);   EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size);   float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);   for (int i=0; i < tmpBuf1.length; i++) {     int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);     tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;   }   if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);   WritableRaster shadowRaster=dst.getRaster();   int red=color.getRed(), green=color.getGreen(), blue=color.getBlue();   for (int y=0; y < h; y++) {     int srcY=y + tmpOffY;     int shadowOffset=(srcY - offsetY) * tmpW;     for (int x=0; x < w; x++) {       int srcX=x + tmpOffX;       lineBuf[x]=tmpBuf1[shadowOffset + (srcX - offsetX)] << 24 | red << 16 | green << 8 | blue;     }     shadowRaster.setDataElements(0,y,w,1,lineBuf);   }   return dst; } "
"public boolean isActive(){   return active; } "
"public AMSearchResults searchSubOrganizations(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {   return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATION),getSearchFilter(AMObject.ORGANIZATION),wildcard,avPairs,searchControl); } "
"public RESTEndpointBuilder realm(String s){   realm=s;   return this; } "
"public static String decryptWithAsymmetricKey(String data,String encAlgorithm,Key encKey) throws Exception {   try {     byte[] tmp=Base64.decode(data);     Map map=unwrapKeyWithEncodedData(tmp);     byte[] encData=(byte[])map.get(ENCRYPTED_DATA);     byte[] keyData=(byte[])map.get(ENCRYPTED_KEY);     Cipher cipher=Cipher.getInstance(encKey.getAlgorithm());     cipher.init(Cipher.UNWRAP_MODE,encKey);     Key secretKey=cipher.unwrap(keyData,encAlgorithm,Cipher.SECRET_KEY);     cipher=Cipher.getInstance(encAlgorithm);     cipher.init(Cipher.DECRYPT_MODE,secretKey);     byte[] decryptedData=cipher.doFinal(encData);     return Base64.encode(decryptedData);   }  catch (  NoSuchAlgorithmException nse) {     throw new Exception(nse.getMessage());   } catch (  InvalidKeyException ike) {     throw new Exception(ike.getMessage());   } } "
"public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){   super(Method.GET,url,errorListener);   setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));   mListener=listener;   mDecodeConfig=decodeConfig;   mMaxWidth=maxWidth;   mMaxHeight=maxHeight;   mScaleType=scaleType; } "
"public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {   try {     PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));     String newRDN=getNamingAttribute(objectType) + \"=\" + newName;     po.rename(newRDN,deleteOldName);     return po.getDN();   }  catch (  AccessRightsException e) {     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.renameEntry(): User does \" + \"not have sufficient access rights \",e);     }     throw new AMException(token,\"460\");   } catch (  EntryNotFoundException e) {     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.renameEntry(): Entry \" + \"not found: \",e);     }     String msgid=getEntryNotFoundMsgID(objectType);     String entryName=getEntryName(e);     Object args[]={entryName};     throw new AMException(AMSDKBundle.getString(msgid,args),msgid,args);   } catch (  UMSException ume) {     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.renameEntry(): Unable to \" + \"rename entry: \",ume);     }     throw new AMException(token,\"360\",ume);   } } "
"public void testCase10(){   byte aBytes[]={10,20,30,40,50,60,70,10,20,30};   byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};   int aSign=1;   int bSign=1;   byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.subtract(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(-1,result.signum()); } "
"protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {   reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true); } "
"public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {   return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator); } "
"private void addBlockAtOffset(int offset){   final int line=getLineForOffset(offset);   if (mBlockEndLines == null) {     mBlockEndLines=ArrayUtils.newUnpaddedIntArray(1);     mBlockEndLines[mNumberOfBlocks]=line;     mNumberOfBlocks++;     return;   }   final int previousBlockEndLine=mBlockEndLines[mNumberOfBlocks - 1];   if (line > previousBlockEndLine) {     mBlockEndLines=GrowingArrayUtils.append(mBlockEndLines,mNumberOfBlocks,line);     mNumberOfBlocks++;   } } "
"public void paint(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).paint(a,b);   } } "
"public StringSizeTerminated(String identifier,AbstractTagFrameBody frameBody){   super(identifier,frameBody); } "
"public JspTagException(String message,Throwable rootCause){   super(message,rootCause); } "
"public AuthorizationToken issueTokens(OAuth2Request request,ClientRegistration clientRegistration,ResourceOwner resourceOwner,Set<String> authorizationScope,OAuth2ProviderSettings providerSettings) throws InvalidClientException, UnsupportedResponseTypeException, ServerException, InvalidScopeException, NotFoundException {   final Set<String> requestedResponseTypes=splitResponseType(request.<String>getParameter(RESPONSE_TYPE));   if (Utils.isEmpty(requestedResponseTypes)) {     logger.debug(\"Response type is not supported\");     throw new UnsupportedResponseTypeException(\"Response type is not supported\");   }   final Set<String> validatedScope=providerSettings.validateAccessTokenScope(clientRegistration,authorizationScope,request);   final Map<String,ResponseTypeHandler> allowedResponseTypes=providerSettings.getAllowedResponseTypes();   final String tokenType=clientRegistration.getAccessTokenType();   final String clientId=clientRegistration.getClientId();   final String redirectUri=request.getParameter(REDIRECT_URI);   final String nonce=request.getParameter(OAuth2Constants.Custom.NONCE);   final String codeChallenge=request.getParameter(OAuth2Constants.Custom.CODE_CHALLENGE);   final String codeChallengeMethod=request.getParameter(OAuth2Constants.Custom.CODE_CHALLENGE_METHOD);   final Map<String,Token> tokens=new HashMap<String,Token>();   boolean returnAsFragment=false;   final List<String> sortedResponseTypes=Utils.asSortedList(requestedResponseTypes,new KeyStringComparator(OAuth2Constants.JWTTokenParams.ID_TOKEN));   for (  final String responseType : sortedResponseTypes) {     if (Utils.isEmpty(responseType)) {       throw new UnsupportedResponseTypeException(\"Response type is not supported\");     }     final ResponseTypeHandler responseTypeHandler=allowedResponseTypes.get(responseType);     final Map.Entry<String,Token> token=responseTypeHandler.handle(tokenType,validatedScope,resourceOwner,clientId,redirectUri,nonce,request,codeChallenge,codeChallengeMethod);     if (token != null) {       if (tokens.containsKey(token.getKey())) {         logger.debug(\"Returning multiple response types with the same url value\");         throw new UnsupportedResponseTypeException(\"Returning multiple response types with the same url \" + \"value\");       }       tokens.put(token.getKey(),token.getValue());       if (!returnAsFragment) {         final OAuth2Constants.UrlLocation returnLocation=responseTypeHandler.getReturnLocation();         returnAsFragment=OAuth2Constants.UrlLocation.FRAGMENT.equals(returnLocation);       }     }   }   final Map<String,String> tokenMap=flattenTokens(tokens);   final Map<String,String> additionalData=providerSettings.additionalDataToReturnFromAuthorizeEndpoint(Collections.unmodifiableMap(tokens),request);   if (!Utils.isEmpty(additionalData)) {     final String returnLoc=additionalData.remove(\"returnLocation\");     if (!Utils.isEmpty(returnLoc)) {       final OAuth2Constants.UrlLocation returnLocation=OAuth2Constants.UrlLocation.valueOf(returnLoc.toUpperCase());       if (!returnAsFragment && OAuth2Constants.UrlLocation.FRAGMENT.equals(returnLocation)) {         returnAsFragment=true;       }     }     tokenMap.putAll(additionalData);   }   tokenMap.put(SCOPE,Utils.joinScope(validatedScope));   if (request.getParameter(STATE) != null) {     tokenMap.put(STATE,request.<String>getParameter(STATE));   }   if (!tokenMap.containsKey(\"id_token\")) {     tokenMap.put(ISS,urisFactory.get(request).getIssuer());     tokenMap.put(CLIENT_ID,clientRegistration.getClientId());   }   return new AuthorizationToken(tokenMap,returnAsFragment); } "
"public com.sun.identity.liberty.ws.common.jaxb.assertion.AudienceRestrictionConditionType createAudienceRestrictionConditionType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AudienceRestrictionConditionTypeImpl(); } "
"public RecycleViewDivider(Context context,int resId){   mDivider=ContextCompat.getDrawable(context,resId); } "
"private void waitForConnectionToRs(String testCase,FakeReplicationServer rs) throws Exception {   int nsec=-1;   do {     nsec++;     if (nsec == 10) {       fail(testCase + \": timeout waiting for domain connection to fake RS after \" + nsec+ \" seconds.\");     }     Thread.sleep(1000);   }  while (!rs.isHandshakeOk()); } "
"public void refresh(){   this.initialize(); } "
"public ConcurrentHashMap(int initialCapacity){   this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL); } "
"public static PdfStream parse(PdfCanvasParser ps,PdfDictionary colorSpaceDic) throws IOException {   PdfDictionary inlineImageDict=parseDictionary(ps);   byte[] samples=parseSamples(inlineImageDict,colorSpaceDic,ps);   PdfStream inlineImageAsStreamObject=new PdfStream(samples);   inlineImageAsStreamObject.putAll(inlineImageDict);   return inlineImageAsStreamObject; } "
"public void beginDisplay(DisplayEvent event) throws ModelControlException {   super.beginDisplay(event);   setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",\"invalid.url.message\"); } "
"public void activate() throws AMException, SSOException {   setStringAttribute(statusAN,\"active\");   store(); } "
"public boolean canTraverseOutsideSubtree(){   if (null != m_left && m_left.canTraverseOutsideSubtree())   return true;   if (null != m_right && m_right.canTraverseOutsideSubtree())   return true;   return false; } "
"public void summarizeOggPageHeaders(File oggFile) throws CannotReadException, IOException {   RandomAccessFile raf=new RandomAccessFile(oggFile,\"r\");   while (raf.getFilePointer() < raf.length()) {     System.out.println(\"pageHeader starts at absolute file position:\" + raf.getFilePointer());     OggPageHeader pageHeader=OggPageHeader.read(raf);     System.out.println(\"pageHeader finishes at absolute file position:\" + raf.getFilePointer());     System.out.println(pageHeader + \"\\n\");     raf.seek(raf.getFilePointer() + pageHeader.getPageLength());   }   System.out.println(\"Raf File Pointer at:\" + raf.getFilePointer() + \"File Size is:\"+ raf.length());   raf.close(); } "
"public Period minusMonths(long monthsToSubtract){   return (monthsToSubtract == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtract)); } "
"public static boolean isRestricted(SSOToken token) throws SSOException {   return token.getProperty(TOKEN_RESTRICTION_PROP) != null; } "
"public void fixupVariables(java.util.Vector vars,int globalsSize){   super.fixupVariables(vars,globalsSize);   if (null != m_args) {     for (int i=0; i < m_args.length; i++) {       m_args[i].fixupVariables(vars,globalsSize);     }   } } "
"@NotNull @SuppressWarnings(\"SuspiciousToArrayCall\") public <T>T[] toArray(final T[] vec){   return elements.toArray(vec); } "
"public boolean remove(Attribute attribute){   return attribute != null && attrMap.remove(attribute.getCategory()) != null; } "
"public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   try {     logger.info(\"shootme:  got a bye sending OK.\");     Response response=protocolObjects.messageFactory.createResponse(200,request);     if (serverTransactionId != null) {       serverTransactionId.sendResponse(response);       logger.info(\"Dialog State is \" + serverTransactionId.getDialog().getState());     }  else {       logger.info(\"null server tx.\");     }   }  catch (  Exception ex) {     String s=\"Unexpected exception\";     logger.error(s,ex);     ReInviteInfoAckOverlapTest.fail(s);   } } "
"public GZIPOutputStream(OutputStream out,boolean syncFlush) throws IOException {   this(out,512,syncFlush); } "
"protected void computeFields(){   int mask=0;   if (isPartiallyNormalized()) {     mask=getSetStateFields();     int fieldMask=~mask & ALL_FIELDS;     if (fieldMask != 0 || cachedFixedDate == Long.MIN_VALUE) {       mask|=computeFields(fieldMask,mask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK));       assert mask == ALL_FIELDS;     }   }  else {     mask=ALL_FIELDS;     computeFields(mask,0);   }   setFieldsComputed(mask); } "
"public static ResultCode addEntryOperation(String... lines) throws Exception {   Entry entry=makeEntry(lines);   AddOperation addOperation=getRootConnection().processAdd(entry);   return addOperation.getResultCode(); } "
"public static CMSSignedData replaceSigners(CMSSignedData signedData,SignerInformationStore signerInformationStore){   CMSSignedData cms=new CMSSignedData(signedData);   cms.signerInfoStore=signerInformationStore;   ASN1EncodableVector digestAlgs=new ASN1EncodableVector();   ASN1EncodableVector vec=new ASN1EncodableVector();   Iterator it=signerInformationStore.getSigners().iterator();   while (it.hasNext()) {     SignerInformation signer=(SignerInformation)it.next();     digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));     vec.add(signer.toASN1Structure());   }   ASN1Set digests=new DERSet(digestAlgs);   ASN1Set signers=new DERSet(vec);   ASN1Sequence sD=(ASN1Sequence)signedData.signedData.toASN1Primitive();   vec=new ASN1EncodableVector();   vec.add(sD.getObjectAt(0));   vec.add(digests);   for (int i=2; i != sD.size() - 1; i++) {     vec.add(sD.getObjectAt(i));   }   vec.add(signers);   cms.signedData=SignedData.getInstance(new BERSequence(vec));   cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);   return cms; } "
"public WorkQueue initializeWorkQueue() throws ConfigException, InitializationException {   WorkQueueCfg workQueueConfig=serverContext.getRootConfig().getWorkQueue();   workQueueConfig.addChangeListener(this);   WorkQueueCfgDefn definition=WorkQueueCfgDefn.getInstance();   ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();   Class<? extends WorkQueue> workQueueClass=propertyDefinition.loadClass(workQueueConfig.getJavaClass(),WorkQueue.class);   try {     WorkQueue workQueue=workQueueClass.newInstance();     workQueue.initializeWorkQueue(workQueueConfig);     return workQueue;   }  catch (  Exception e) {     LocalizableMessage message=ERR_CONFIG_WORK_QUEUE_INITIALIZATION_FAILED.get(workQueueConfig.getJavaClass(),workQueueConfig.dn(),stackTraceToSingleLineString(e));     throw new InitializationException(message,e);   } } "
"public boolean beginHasNoButtonDisplay(ChildDisplayEvent event){   return (buttonOptions == null) || (buttonOptions.length == 0); } "
"public boolean exists(){   SecurityManager security=System.getSecurityManager();   if (security != null) {     security.checkRead(path);   }   if (isInvalid()) {     return false;   }   return ((fs.getBooleanAttributes(this) & FileSystem.BA_EXISTS) != 0); } "
"public DiscoveryFragmentGeneratorApi(ToolOptions options){   this.options=options;   this.dataPath=getDataPath(); } "
"public com.sun.identity.liberty.ws.idpp.jaxb.AnalyzedNameElement createAnalyzedNameElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AnalyzedNameElementImpl(); } "
"static ClassLoader findClassLoader() throws ConfigurationError {   SecuritySupport ss=SecuritySupport.getInstance();   ClassLoader context=ss.getContextClassLoader();   ClassLoader system=ss.getSystemClassLoader();   ClassLoader chain=system;   while (true) {     if (context == chain) {       ClassLoader current=ObjectFactory.class.getClassLoader();       chain=system;       while (true) {         if (current == chain) {           return system;         }         if (chain == null) {           break;         }         chain=ss.getParentClassLoader(chain);       }       return current;     }     if (chain == null) {       break;     }     chain=ss.getParentClassLoader(chain);   }   ;   return context; } "
"public static PdfAction createGoTo(PdfDestination destination){   return new PdfAction().put(PdfName.S,PdfName.GoTo).put(PdfName.D,destination.getPdfObject()); } "
"public synchronized void invalidateLayout(Container target){   checkContainer(target);   xChildren=null;   yChildren=null;   xTotal=null;   yTotal=null; } "
"private ByteBuffer writeHeaderToBuffer(int padding,int size) throws IOException {   compression=false;   ByteBuffer headerBuffer=ByteBuffer.allocate(TAG_HEADER_LENGTH);   headerBuffer.put(TAG_ID);   headerBuffer.put(getMajorVersion());   headerBuffer.put(getRevision());   byte flags=(byte)0;   if (unsynchronization) {     flags|=(byte)MASK_V22_UNSYNCHRONIZATION;   }   if (compression) {     flags|=(byte)MASK_V22_COMPRESSION;   }   headerBuffer.put(flags);   headerBuffer.put(ID3SyncSafeInteger.valueToBuffer(padding + size));   headerBuffer.flip();   return headerBuffer; } "
"void encodeHeader(byte msgType,ByteArrayBuilder builder,short protocolVersion){   builder.appendByte(msgType);   builder.appendByte(protocolVersion);   builder.appendLongUTF8(generationId);   builder.appendByte(groupId); } "
"public void initialize() throws Exception {   rootEntry.refresh(rootEntry.getFile());   File[] files=listFiles(rootEntry.getFile());   FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;   for (int i=0; i < files.length; i++) {     children[i]=createFileEntry(rootEntry,files[i]);   }   rootEntry.setChildren(children); } "
"private JPanel createPanel(){   GridBagConstraints gbc=new GridBagConstraints();   JPanel contentPanel=new JPanel(new GridBagLayout());   contentPanel.setBackground(UIFactory.DEFAULT_BACKGROUND);   gbc.fill=GridBagConstraints.BOTH;   gbc.gridwidth=GridBagConstraints.REMAINDER;   gbc.weightx=1.0;   JPanel topPanel=new JPanel(new GridBagLayout());   topPanel.setBorder(UIFactory.DIALOG_PANEL_BORDER);   topPanel.setBackground(UIFactory.CURRENT_STEP_PANEL_BACKGROUND);   Insets insets=UIFactory.getCurrentStepPanelInsets();   gbc.weighty=0.0;   insets.bottom=0;   gbc.insets=insets;   topPanel.add(createTitlePanel(),gbc);   gbc.insets.top=UIFactory.TOP_INSET_INSTRUCTIONS_SUBPANEL;   topPanel.add(createInstructionsPane(),gbc);   gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;   gbc.insets.bottom=UIFactory.TOP_INSET_INPUT_SUBPANEL;   topPanel.add(createInputPanel(),gbc);   gbc.weighty=1.0;   gbc.insets=UIFactory.getEmptyInsets();   topPanel.add(Box.createVerticalGlue(),gbc);   contentPanel.add(topPanel,gbc);   gbc.weighty=0.0;   gbc.insets=UIFactory.getButtonsPanelInsets();   contentPanel.add(createButtonsPanel(),gbc);   return contentPanel; } "
"@Overridden boolean notUncommon(CraftMetaItem meta){   return true; } "
"private boolean authenticate(OAuth2Request request,String clientId,char[] clientSecret,String realm) throws InvalidClientException {   try {     AuthContext lc=new AuthContext(realm);     HttpServletRequest httpRequest=ServletUtils.getRequest(Request.getCurrent());     httpRequest.setAttribute(ISAuthConstants.NO_SESSION_REQUEST_ATTR,\"true\");     lc.login(AuthContext.IndexType.MODULE_INSTANCE,\"Application\",null,httpRequest,ServletUtils.getResponse(Response.getCurrent()));     while (lc.hasMoreRequirements()) {       Callback[] callbacks=lc.getRequirements();       List<Callback> missing=new ArrayList<Callback>();       for (      final Callback callback : callbacks) {         if (callback instanceof NameCallback) {           NameCallback nc=(NameCallback)callback;           nc.setName(clientId);         }  else         if (callback instanceof PasswordCallback) {           PasswordCallback pc=(PasswordCallback)callback;           pc.setPassword(clientSecret);         }  else {           missing.add(callback);         }       }       if (missing.size() > 0) {         throw failureFactory.getException(request,\"Missing requirements\");       }       lc.submitRequirements(callbacks);     }     if (lc.getStatus() == AuthContext.Status.SUCCESS) {       request.<Request>getRequest().getAttributes().put(AM_CTX_ID,lc.getAuthContextLocal().getLoginState().getActivatedSessionTrackingId());       return true;     }  else {       throw failureFactory.getException(request,\"Client authentication failed\");     }   }  catch (  AuthLoginException le) {     logger.error(\"ClientVerifierImpl::authContext AuthException\",le);     throw failureFactory.getException(request,\"Client authentication failed\");   } } "
"private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {   long lockEnd=lock.position() + lock.size();   for (  FileLock existingLock : locks) {     if (existingLock.position() > lockEnd) {       break;     }     if (existingLock.overlaps(lock.position(),lock.size())) {       throw new OverlappingFileLockException();     }   }   locks.add(lock); } "
"public void startElement(String name,AttributeList attributes) throws SAXException { } "
"public File makeDirty() throws IOException {   File f=File.createTempFile(\"dirty\",\".tmp\",repositoryLocation.getParentFile());   FileWriter fw=new FileWriter(f);   fw.write(\"\" + System.currentTimeMillis());   fw.flush();   fw.close();   return f; } "
"public ShoveDrillResult check_forced_pad(ShapeTile p_pad_shape,BrdFromSide p_from_side,int p_layer,NetNosList p_net_no_arr,int p_cl_type,boolean p_copper_sharing_allowed,Collection<BrdItem> p_ignore_items,int p_max_recursion_depth,int p_max_via_recursion_depth,boolean p_check_only_front,TimeLimit p_time_limit){   if (!p_pad_shape.is_contained_in(r_board.get_bounding_box())) {     r_board.shove_fail_obstacle_set(r_board.get_outline());     return ShoveDrillResult.NOT_DRILLABLE;   }   AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();   AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_pad_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);   Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_pad_shape,p_layer,NetNosList.EMPTY,p_cl_type);   if (p_ignore_items != null) {     obstacles.removeAll(p_ignore_items);   }   boolean obstacles_shovable=shape_entries.store_items(obstacles,true,p_copper_sharing_allowed);   if (!obstacles_shovable) {     r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());     return ShoveDrillResult.NOT_DRILLABLE;   }   for (  BrdAbitVia curr_shove_via : shape_entries.shove_via_list) {     if (p_max_via_recursion_depth <= 0) {       r_board.shove_fail_obstacle_set(curr_shove_via);       return ShoveDrillResult.NOT_DRILLABLE;     }     PlaPointInt[] new_via_center=r_board.move_drill_algo.try_shove_via_points(p_pad_shape,p_layer,curr_shove_via,p_cl_type,false);     if (new_via_center.length <= 0) {       r_board.shove_fail_obstacle_set(curr_shove_via);       return ShoveDrillResult.NOT_DRILLABLE;     }     PlaVectorInt delta=new_via_center[0].difference_by(curr_shove_via.center_get());     Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();     if (!r_board.move_drill_algo.check(curr_shove_via,delta,p_max_recursion_depth,p_max_via_recursion_depth - 1,ignore_items,p_time_limit)) {       return ShoveDrillResult.NOT_DRILLABLE;     }   }   ShoveDrillResult result=ShoveDrillResult.DRILLABLE;   if (p_copper_sharing_allowed) {     for (    BrdItem curr_obstacle : obstacles) {       if (!(curr_obstacle instanceof BrdAbitPin))       continue;       result=ShoveDrillResult.DRILLABLE_WITH_ATTACH_SMD;       break;     }   }   int trace_piece_count=shape_entries.substitute_trace_count();   if (trace_piece_count == 0)   return result;   if (p_max_recursion_depth <= 0) {     r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());     return ShoveDrillResult.NOT_DRILLABLE;   }   if (shape_entries.stack_depth() > 1) {     r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());     return ShoveDrillResult.NOT_DRILLABLE;   }   for (; ; ) {     BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();     if (curr_substitute_trace == null)     break;     for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {       PlaLineInt curr_line=curr_substitute_trace.polyline().plaline(index + 1);       PlaDirection curr_dir=curr_line.direction();       boolean is_in_front;       if (p_check_only_front) {         is_in_front=in_front_of_pad(curr_line,p_pad_shape,p_from_side.side_no,curr_substitute_trace.get_half_width(),true);       }  else {         is_in_front=true;       }       if (!is_in_front)       continue;       BrdShapeAndFromSide curr=new BrdShapeAndFromSide(curr_substitute_trace,index,true);       if (!r_board.shove_trace_algo.shove_trace_check(curr.shape,curr.from_side,curr_dir,p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.clearance_idx(),p_max_recursion_depth - 1,p_max_via_recursion_depth,0,p_time_limit)) {         return ShoveDrillResult.NOT_DRILLABLE;       }     }   }   return result; } "
"public final void testRSAMultiPrimePrivateCrtKeySpec02(){   try {     new RSAMultiPrimePrivateCrtKeySpec(null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);     fail(\"Expected NPE not thrown\");   }  catch (  NullPointerException e) {   } } "
"public com.sun.identity.liberty.ws.disco.jaxb.AuthorizeRequesterElement createAuthorizeRequesterElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb.impl.AuthorizeRequesterElementImpl(); } "
"public static BossBar createBossBar(String title,BarColor color,BarStyle style,BarFlag... flags){   return server.createBossBar(title,color,style,flags); } "
"public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {   return new XNumber((int)(left.num() / right.num())); } "
"private PluginResult.PreOperation isIntegrityMaintained(List<Attribute> attrs,DN entryDN,DN entryBaseDN){   for (  Attribute attr : attrs) {     PluginResult.PreOperation result=isIntegrityMaintained(attr,entryDN,entryBaseDN);     if (result != PluginResult.PreOperation.continueOperationProcessing()) {       return result;     }   }   return PluginResult.PreOperation.continueOperationProcessing(); } "
"@Override public void println() throws IOException {   newLine(); } "
"@Override public Foo remove(long fooId) throws NoSuchFooException {   return remove((Serializable)fooId); } "
"private Base64(){ } "
"protected void stop(){   if (engine.getLogger().isDebugEnabled())   engine.getLogger().debug(sm.getString(\"engineConfig.stop\")); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapremovenameditemns02.class,args); } "
"@Override public void removeByUuid(String uuid){   for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {     remove(foo);   } } "
"protected void addRoleInfo(RoleInfo roleInfo) throws IllegalArgumentException, InvalidRelationTypeException {   if (roleInfo == null) {     String excMsg=\"Invalid parameter.\";     throw new IllegalArgumentException(excMsg);   }   RELATION_LOGGER.entering(RelationTypeSupport.class.getName(),\"addRoleInfo\",roleInfo);   if (isInRelationService) {     String excMsg=\"Relation type cannot be updated as it is declared in the Relation Service.\";     throw new RuntimeException(excMsg);   }   String roleName=roleInfo.getName();   if (roleName2InfoMap.containsKey(roleName)) {     StringBuilder excMsgStrB=new StringBuilder();     String excMsg=\"Two role infos provided for role \";     excMsgStrB.append(excMsg);     excMsgStrB.append(roleName);     throw new InvalidRelationTypeException(excMsgStrB.toString());   }   roleName2InfoMap.put(roleName,new RoleInfo(roleInfo));   RELATION_LOGGER.exiting(RelationTypeSupport.class.getName(),\"addRoleInfo\");   return; } "
"public boolean hasBinaryAttributes(){   return false; } "
"@Override public void init(int mode,Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {   Utils.checkNotNull(key);   Utils.checkNotNull(params);   cipher.init(mode,key,params); } "
"public UserAgentHeader createUserAgentHeader(List product) throws ParseException {   if (product == null)   throw new NullPointerException(\"null user agent\");   UserAgent userAgent=new UserAgent();   userAgent.setProduct(product);   return userAgent; } "
"public void testNegNegFirstShorter(){   byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};   int aSign=-1;   int bSign=-1;   byte rBytes[]={-1,1,75,-89,-45,-2,-3,-18,-36,-17,-10,-3,-6,-7,-21};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.or(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public NewEncryptedID createNewEncryptedID(String value) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEW_ENCRYPTEDID,value);   if (obj == null) {     return new NewEncryptedIDImpl(value);   }  else {     return (NewEncryptedID)obj;   } } "
"public INVALID_TRANSACTION(String s,int minor,CompletionStatus completed){   super(s,minor,completed); } "
"public final int readUnsignedShort() throws IOException {   return ((int)readShort()) & 0xffff; } "
"public com.sun.identity.saml2.jaxb.assertion.AudienceElement createAudienceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.AudienceElementImpl(); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageType createKeyStorageType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageTypeImpl(); } "
"public ModificationResult(final int chunkCountDiff,final long bytesDiffer,final Set<GUID> occurred){   this.chunkDifference=chunkCountDiff;   this.byteDifference=bytesDiffer;   this.occuredGUIDs.addAll(occurred); } "
"public Cache(){   this(28,9); } "
"public final void put(String key,int value){   if ((m_firstFree + 1) >= m_mapSize) {     m_mapSize+=m_blocksize;     String newMap[]=new String[m_mapSize];     System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);     m_map=newMap;     int newValues[]=new int[m_mapSize];     System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);     m_values=newValues;   }   m_map[m_firstFree]=key;   m_values[m_firstFree]=value;   m_firstFree++; } "
"public AMInvalidURLViewBean(){   super(PAGE_NAME);   setDefaultDisplayURL(DEFAULT_DISPLAY_URL); } "
"private void resetSerializerBase(){   this.m_attributes.clear();   this.m_CdataElems=null;   this.m_cdataTagOpen=false;   this.m_docIsEmpty=true;   this.m_doctypePublic=null;   this.m_doctypeSystem=null;   this.m_doIndent=false;   this.m_elemContext=new ElemContext();   this.m_indentAmount=0;   this.m_inEntityRef=false;   this.m_inExternalDTD=false;   this.m_mediatype=null;   this.m_needToCallStartDocument=true;   this.m_needToOutputDocTypeDecl=false;   if (m_OutputProps != null)   this.m_OutputProps.clear();   if (m_OutputPropsDefault != null)   this.m_OutputPropsDefault.clear();   if (this.m_prefixMap != null)   this.m_prefixMap.reset();   this.m_shouldNotWriteXMLHeader=false;   this.m_sourceLocator=null;   this.m_standalone=null;   this.m_standaloneWasSpecified=false;   this.m_StringOfCDATASections=null;   this.m_tracer=null;   this.m_transformer=null;   this.m_version=null; } "
"public static Border createBlackLineBorder(){   if (blackLine == null) {     blackLine=new LineBorder(Color.black,1);   }   return blackLine; } "
"public DefaultTreeModel(TreeNode root){   this(root,false); } "
"public SubjectDecision(boolean satisfied,Map<String,Set<String>> advices){   this.satisfied=satisfied;   this.advices=advices; } "
"public static FontProgram createRegisteredFont(String fontName,int style) throws java.io.IOException {   return fontRegisterProvider.getFont(fontName,style); } "
"public boolean modifyData(Object credential,String resourceID,List dstModifications,Map interactedData,Document request) throws IDPPException {   if (credential == null || resourceID == null || dstModifications == null || dstModifications.isEmpty()) {     IDPPUtils.debug.error(\"PersonalProfile:modifyData:null input\");     throw new IDPPException(IDPPUtils.bundle.getString(\"nullInputParamters\"));   }   boolean sessionValid=false;   try {     sessionValid=SessionManager.getProvider().isValid(credential);   }  catch (  SessionException se) {     IDPPUtils.debug.error(\"PersonalProfile:modifyData:Invalid WSC\" + \"credentials\",se);   }   if (!sessionValid) {     throw new IDPPException(IDPPUtils.bundle.getString(\"invalidWSCCredentials\"));   }   String userDN=getUserDN(resourceID);   if (userDN == null) {     if (IDPPUtils.debug.messageEnabled()) {       IDPPUtils.debug.message(\"PersonalProfile: modifyData:userDN\" + \"is null for a given resourceID.\");     }     throw new IDPPException(IDPPUtils.bundle.getString(\"noResourceID\"));   }   if (IDPPUtils.debug.messageEnabled()) {     IDPPUtils.debug.message(\"PersonalProfile:modifyData:userDN =\" + userDN);   }   Map modifyMap=new HashMap();   Map binaryAttributeMap=new HashMap();   Iterator iter=dstModifications.iterator();   while (iter.hasNext()) {     DSTModification modification=(DSTModification)iter.next();     String select=modification.getSelect();     boolean override=modification.isOverrideAllowed();     List dataObject=modification.getNewDataValue();     String containerContext=getContainerFromSelect(select);     IDPPContainer container=getIDPPContainer(containerContext,userDN);     if (container == null) {       if (IDPPUtils.debug.messageEnabled()) {         IDPPUtils.debug.message(\"PersonalProfile:modifyData:\" + \"The given select expression is not in supported containers\");       }       return false;     }     try {       if (!override && IDPPUtils.checkForUserAttributes(userDN,container.getContainerAttributesForSelect(select))) {         if (IDPPUtils.debug.messageEnabled()) {           IDPPUtils.debug.message(\"PersonalProfile:modifyData:\" + \"override set to false and data Already exists.\");         }         return false;       }       Map map=container.getDataMapForSelect(select,dataObject);       if (container.hasBinaryAttributes()) {         binaryAttributeMap=map;         continue;       }       if (map != null) {         modifyMap.putAll(map);       }       if (interactedData != null && !interactedData.isEmpty()) {         modifyMap=updateUserDataMap(modifyMap,interactedData);       }     }  catch (    IDPPException ie) {       IDPPUtils.debug.error(\"PersonalProfile:modifyData: error while\" + \"converting the data into a data map.\",ie);       return false;     }   }   if (binaryAttributeMap != null && !binaryAttributeMap.isEmpty()) {     try {       IDPPUtils.setUserAttributes(userDN,binaryAttributeMap);     }  catch (    Exception ie) {       IDPPUtils.debug.error(\"PersonalProfile:modifyMap:Error while\" + \"modifying the user data.\",ie);       return false;     }   }   if (modifyMap == null || modifyMap.isEmpty()) {     IDPPUtils.debug.message(\"PersonalProfile:modifyData:map is null\");     if (!binaryAttributeMap.isEmpty()) {       return true;     }  else {       return false;     }   }   if (IDPPUtils.debug.messageEnabled()) {     IDPPUtils.debug.message(\"PersonalProfile:modifyData:data \" + \"to be modified\" + modifyMap);   }   try {     IDPPUtils.setUserAttributes(userDN,modifyMap);     return true;   }  catch (  Exception ie) {     IDPPUtils.debug.error(\"PersonalProfile:modifyMap:Error while\" + \"modifying the user data.\",ie);     return false;   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node testAddr;   Attr addrAttr;   String resultAttr;   String resultNamespaceURI;   String resultLocalName;   String resultPrefix;   doc=(Document)load(\"staffNS\",true);   elementList=doc.getElementsByTagName(\"emp:address\");   testAddr=elementList.item(0);   assertNotNull(\"empAddrNotNull\",testAddr);   ((Element)testAddr).setAttributeNS(\"http://www.nist.gov\",\"newprefix:zone\",\"newValue\");   addrAttr=((Element)testAddr).getAttributeNodeNS(\"http://www.nist.gov\",\"zone\");   resultAttr=((Element)testAddr).getAttributeNS(\"http://www.nist.gov\",\"zone\");   assertEquals(\"attrValue\",\"newValue\",resultAttr);   resultNamespaceURI=addrAttr.getNamespaceURI();   assertEquals(\"nsuri\",\"http://www.nist.gov\",resultNamespaceURI);   resultLocalName=addrAttr.getLocalName();   assertEquals(\"lname\",\"zone\",resultLocalName);   resultPrefix=addrAttr.getPrefix();   assertEquals(\"prefix\",\"newprefix\",resultPrefix); } "
"protected int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){   int nodeIndex=m_size++;   if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {     addNewDTMID(nodeIndex);   }   m_firstch.addElement(canHaveFirstChild ? NOTPROCESSED : DTM.NULL);   m_nextsib.addElement(NOTPROCESSED);   m_parent.addElement(parentIndex);   m_exptype.addElement(expandedTypeID);   m_dataOrQName.addElement(dataOrPrefix);   if (m_prevsib != null) {     m_prevsib.addElement(previousSibling);   }   if (DTM.NULL != previousSibling) {     m_nextsib.setElementAt(nodeIndex,previousSibling);   }   if (m_locator != null && m_useSourceLocationProperty) {     setSourceLocation();   } switch (type) { case DTM.NAMESPACE_NODE:     declareNamespaceInContext(parentIndex,nodeIndex);   break; case DTM.ATTRIBUTE_NODE: break; default : if (DTM.NULL == previousSibling && DTM.NULL != parentIndex) { m_firstch.setElementAt(nodeIndex,parentIndex); } break; } return nodeIndex; } "
"protected long outputOffset(){   return _bytesWritten + _outputTail; } "
"public void registerService(String serviceName,boolean createTemplate,boolean activate) throws AMException, SSOException {   if (debug.messageEnabled()) {     debug.message(\"AMOrganizationalUnitImpl.registerService(\" + serviceName + \", \"+ createTemplate+ \", \"+ activate+ \")\");   }   dsServices.registerService(super.token,super.entryDN,serviceName);   Set serviceStatus=getAttribute(SERVICE_STATUS_ATTRIBUTE);   if (!serviceStatus.equals(Collections.EMPTY_SET)) {     Iterator iter=serviceStatus.iterator();     while (iter.hasNext()) {       String status=(String)iter.next();       if (status.equalsIgnoreCase(serviceName)) {         Object args[]={serviceName};         throw new AMException(AMSDKBundle.getString(\"464\",args,super.locale),\"464\",args);       }     }   }  else {     serviceStatus=new HashSet();   }   serviceStatus.add(serviceName);   setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);   try {     store();   }  catch (  AMException le) {     try {       Set objectClass=getAttribute(\"objectclass\");       if (debug.messageEnabled()) {         debug.message(\"object class=\" + objectClass);       }       if (!objectClass.contains(\"iplanet-am-managed-org-unit\")) {         objectClass.add(\"iplanet-am-managed-org-unit\");         setAttribute(\"objectclass\",objectClass);         setAttribute(SERVICE_STATUS_ATTRIBUTE,serviceStatus);         store();       }  else {         throw le;       }     }  catch (    Exception e) {       if (debug.messageEnabled()) {         debug.message(\"error adding objectclass\",e);       }       throw le;     }   }   if (createTemplate) {     try {       if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.POLICY)) {         createTemplate(AMTemplate.POLICY_TEMPLATE,serviceName,null);       }       if (AMServiceUtils.serviceHasSubSchema(super.token,serviceName,SchemaType.DYNAMIC)) {         createTemplate(AMTemplate.DYNAMIC_TEMPLATE,serviceName,null);       }     }  catch (    SMSException smsex) {       throw new AMException(AMSDKBundle.getString(\"451\",super.locale),\"451\");     }   } } "
"public static TitledBorder createTitledBorder(String title){   return new TitledBorder(title); } "
"private void newline(){   print(System.lineSeparator()); } "
"private void scanPIData(String target,XMLString data) throws IOException, JasperException {   if (target.length() == 3) {     char c0=Character.toLowerCase(target.charAt(0));     char c1=Character.toLowerCase(target.charAt(1));     char c2=Character.toLowerCase(target.charAt(2));     if (c0 == 'x' && c1 == 'm' && c2 == 'l') {       err.jspError(\"jsp.error.xml.reservedPITarget\");     }   }   if (!skipSpaces()) {     if (skipString(\"?>\")) {       data.clear();       return;     }  else {       err.jspError(\"jsp.error.xml.spaceRequiredInPI\");     }   }   fStringBuffer.clear();   if (scanData(\"?>\",fStringBuffer)) {     do {       int c=peekChar();       if (c != -1) {         if (XMLChar.isHighSurrogate(c)) {           scanSurrogates(fStringBuffer);         }  else         if (XMLChar.isInvalid(c)) {           err.jspError(\"jsp.error.xml.invalidCharInPI\",Integer.toHexString(c));           scanChar();         }       }     }  while (scanData(\"?>\",fStringBuffer));   }   data.setValues(fStringBuffer); } "
"public NoSuchMechanismException(String message,Throwable cause){   super(message);   this.cause=cause; } "
"public void unlockWrite(long stamp){   WNode h;   if (state != stamp || (stamp & WBIT) == 0L)   throw new IllegalMonitorStateException();   state=(stamp+=WBIT) == 0L ? ORIGIN : stamp;   if ((h=whead) != null && h.status != 0)   release(h); } "
"private SOAPHeader addCorrelationHeader(SOAPMessage msg,Message req) throws SOAPBindingException {   try {     SOAPHeader header=msg.getSOAPPart().getEnvelope().getHeader();     if (header == null) {       header=msg.getSOAPPart().getEnvelope().addHeader();     }     CorrelationHeader cHeader=new CorrelationHeader();     correlationId=cHeader.getId();     if (req != null) {       cHeader.setRefToMessageID(req.getCorrelationHeader().getMessageID());     }     cHeader.addToParent(header);     return header;   }  catch (  Exception ex) {     Utils.debug.error(\"MessageProcessor.addCorrealtionHeader: \" + \"Could not add correlation header\",ex);     throw new SOAPBindingException(Utils.bundle.getString(\"cannotAddCorrelationHeader\"));   } } "
"public int enumerate(ThreadGroup[] groups,boolean recurse){   return enumerateGeneric(groups,recurse,0,false); } "
"public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {   this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,provider); } "
"public SearchResults search(SearchTemplate template,SearchControl searchControl) throws UMSException {   return search(template.getSearchFilter(),template.getAttributeSet().getAttributeNames(),searchControl); } "
"private int processError(L10NMessageImpl e,String headerMessageCode,String debugMessage,Object... messageParameters) throws AuthLoginException {   if (null == e) {     return processError(headerMessageCode,debugMessage,messageParameters);   }   String headerMessage;   if (null == headerMessageCode) {     headerMessage=e.getL10NMessage(getLoginLocale());   }  else {     headerMessage=bundle.getString(headerMessageCode);   }   if (debugMessage != null) {     DEBUG.error(debugMessage,messageParameters,e);   }   substituteHeader(STATE_ERROR,headerMessage);   return STATE_ERROR; } "
"public BAD_PARAM(int minor,CompletionStatus completed){   this(\"\",minor,completed); } "
"private void clampPositionToTopStackEnd(StackScrollState.ViewState childViewState,int childHeight){   childViewState.yTranslation=Math.max(childViewState.yTranslation,mCollapsedSize - childHeight); } "
"public ConcurrentSkipListSet(Comparator<? super E> comparator){   m=new ConcurrentSkipListMap<E,Object>(comparator); } "
"public boolean isReturnedByDefault(){   return returnByDefault; } "
"public InvalidKeySpecException(String msg){   super(msg); } "
"public Info createInfo(String value){   InformationField infoImpl=new InformationField();   try {     infoImpl.setValue(value);   }  catch (  SdpException s) {     s.printStackTrace();   }   return infoImpl; } "
"public static void removeAllCaseIgnore(Set master,Set deletingSet){   if ((deletingSet != null) && !deletingSet.isEmpty()) {     Set lcSet=lowerCase(deletingSet);     for (Iterator iter=master.iterator(); iter.hasNext(); ) {       String e=(String)iter.next();       if (lcSet.contains(e.toLowerCase())) {         iter.remove();       }     }   } } "
"public String name(){   return name; } "
"@Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return _fooLocalService.addFoo(foo); } "
"public static Test suite(File catalogXml) throws Exception {   XsltXPathConformanceTestSuite suite=new XsltXPathConformanceTestSuite();   Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(catalogXml);   Element testSuiteElement=document.getDocumentElement();   TestSuite result=new TestSuite();   for (  Element testCatalog : elementsOf(testSuiteElement.getElementsByTagName(\"test-catalog\"))) {     Element majorPathElement=(Element)testCatalog.getElementsByTagName(\"major-path\").item(0);     String majorPath=majorPathElement.getTextContent();     File base=new File(catalogXml.getParentFile(),majorPath);     for (    Element testCaseElement : elementsOf(testCatalog.getElementsByTagName(\"test-case\"))) {       result.addTest(suite.create(base,testCaseElement));     }   }   return result; } "
"public void flushBase64() throws java.io.IOException {   if (position > 0) {     if (encode) {       out.write(encode3to4(b4,buffer,position,options));       position=0;     }  else {       throw new java.io.IOException(\"Base64 input not properly padded.\");     }   } } "
"@Override public void addAttributeChangeNotificationListener(NotificationListener listener,String name,Object handback) throws IllegalArgumentException {   if (listener == null)   throw new IllegalArgumentException(\"Listener is null\");   if (attributeBroadcaster == null)   attributeBroadcaster=new BaseNotificationBroadcaster();   if (log.isDebugEnabled())   log.debug(\"addAttributeNotificationListener \" + listener);   BaseAttributeFilter filter=new BaseAttributeFilter(name);   attributeBroadcaster.addNotificationListener(listener,filter,handback); } "
"public static void sort(long[] array){   DualPivotQuicksort.sort(array); } "
"public void test_GetOrder(){   assertEquals(\"wrong order was reteurned\",BigInteger.valueOf(1),ecps.getOrder()); } "
"public FREE_MEM(String s){   this(s,0,CompletionStatus.COMPLETED_NO); } "
"protected ObjectStreamException(String classname){   super(classname); } "
"public static TestSuite suite() throws Exception {   Class testClass=ClassLoader.getSystemClassLoader().loadClass(\"org.w3c.domts.level3.validation.alltests\");   Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});   DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());   Object test=testConstructor.newInstance(new Object[]{factory});   return new JUnitTestSuiteAdapter((DOMTestSuite)test); } "
"public void deregisterMonitoredDirectory(File directory,DiskSpaceMonitorHandler handler){ synchronized (monitoredDirs) {     List<MonitoredDirectory> directories=monitoredDirs.get(directory);     if (directories != null) {       Iterator<MonitoredDirectory> itr=directories.iterator();       while (itr.hasNext()) {         MonitoredDirectory curDirectory=itr.next();         if (curDirectory.handler.equals(handler)) {           DirectoryServer.deregisterMonitorProvider(curDirectory);           itr.remove();         }       }       if (directories.isEmpty()) {         monitoredDirs.remove(directory);       }     }   } } "
"public ExpectedObject(long objectID,int arg){   this.objectID=objectID;   this.objectIDs=null;   this.expectedArgument=arg; } "
"public static boolean isSupplemental(int c){   return (c >= 0x10000 && c <= 0x10FFFF); } "
"public com.sun.identity.wsfederation.jaxb.xmlsig.DigestMethodElement createDigestMethodElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestMethodElementImpl(); } "
"public boolean isSendWasCalled(){   return this.sendWasCalled; } "
"@SuppressWarnings(\"unused\") public static <T>void swapArrayPosition(T[] source,int first,int second){   T temp=source[first];   source[first]=source[second];   source[second]=temp; } "
"static Collection<Investment> mergeInvestments(final Collection<Investment> left,final Collection<Investment> right){   return Collections.unmodifiableCollection(Stream.concat(left.stream(),right.stream()).distinct().collect(Collectors.toList())); } "
"public void createStructure(){   MP3File.getStructureFormatter().openHeadingElement(TYPE_TAG,getIdentifier());   super.createStructureHeader();   MP3File.getStructureFormatter().openHeadingElement(TYPE_HEADER,\"\");   MP3File.getStructureFormatter().addElement(TYPE_UNSYNCHRONISATION,this.isUnsynchronization());   MP3File.getStructureFormatter().addElement(TYPE_CRCDATA,this.crcData);   MP3File.getStructureFormatter().addElement(TYPE_EXPERIMENTAL,this.experimental);   MP3File.getStructureFormatter().addElement(TYPE_EXTENDED,this.extended);   MP3File.getStructureFormatter().addElement(TYPE_PADDINGSIZE,this.paddingSize);   MP3File.getStructureFormatter().addElement(TYPE_FOOTER,this.footer);   MP3File.getStructureFormatter().addElement(TYPE_IMAGEENCODINGRESTRICTION,this.paddingSize);   MP3File.getStructureFormatter().addElement(TYPE_IMAGESIZERESTRICTION,this.imageSizeRestriction);   MP3File.getStructureFormatter().addElement(TYPE_TAGRESTRICTION,this.tagRestriction);   MP3File.getStructureFormatter().addElement(TYPE_TAGSIZERESTRICTION,this.tagSizeRestriction);   MP3File.getStructureFormatter().addElement(TYPE_TEXTFIELDSIZERESTRICTION,this.textFieldSizeRestriction);   MP3File.getStructureFormatter().addElement(TYPE_TEXTENCODINGRESTRICTION,this.textEncodingRestriction);   MP3File.getStructureFormatter().addElement(TYPE_UPDATETAG,this.updateTag);   MP3File.getStructureFormatter().closeHeadingElement(TYPE_HEADER);   super.createStructureBody();   MP3File.getStructureFormatter().closeHeadingElement(TYPE_TAG); } "
"public boolean validate(Set<String> values){   boolean valid=true;   if (!CollectionUtils.isEmpty(values)) {     for (    String value : values) {       if (!valid) {         break;       }       if (value.length() > 0) {         Matcher m=pattern.matcher(value);         valid=m.matches();       }     }   }   if (valid) {     valid=checkForValidIntegerKeyInValue(values);   }   return valid; } "
"public AMSearchResults searchFilteredRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {   return searchFilteredRoles(wildcard,null,searchControl); } "
"public ContentEncodingHeader createContentEncodingHeader(String encoding) throws ParseException {   if (encoding == null)   throw new NullPointerException(\"null encoding\");   ContentEncoding c=new ContentEncoding();   c.setEncoding(encoding);   return c; } "
"public final boolean isEnabled(SmileGenerator.Feature f){   return (_smileGeneratorFeatures & f.getMask()) != 0; } "
"public SubConfigModelImpl(HttpServletRequest req,String serviceName,String parentId,Map map) throws AMConsoleException {   super(req,map);   this.serviceName=serviceName;   this.parentId=parentId;   subConfigMeta=new SubConfigMeta(serviceName,this);   subConfigMeta.setParentId(parentId);   displayName=subConfigMeta.getParentDisplayName(); } "
"@Override public boolean isExpired(){   return !isNeverExpires() && super.isExpired(); } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   try {     Request request=requestEvent.getRequest();     SipProvider sipProvider=(SipProvider)requestEvent.getSource();     ServerTransaction st=sipProvider.getNewServerTransaction(request);     if (transactionIDs.containsKey(st.getBranchId())) {       System.out.println(\"OOOPS -- seen this guy before!! This must be a late guy \" + st.getBranchId() + \" st = \"+ transactionIDs.get(st.getBranchId()));       return;     }  else {       transactionIDs.put(st.getBranchId(),st);     }     TTask ttask=new TTask(requestEvent,st);     int ttime;     if ((numInvite % 4) == 0)     ttime=5000;  else     if ((numInvite % 4) == 1)     ttime=1000;  else     ttime=300;     numInvite++;     new Timer().schedule(ttask,ttime);   }  catch (  Exception ex) {     ex.printStackTrace();   } } "
"@Override public Member findMemberByName(String name){   Member[] currentMembers=getMembers();   for (int i=0; i < currentMembers.length; i++) {     if (name.equals(currentMembers[i].toString()))     return currentMembers[i];   }   return null; } "
"private boolean expand_to_room_doors(MazeListElement p_element){   int layer_no=p_element.next_room.get_layer();   boolean layer_active=art_ctrl.layer_active[layer_no];   if (!layer_active) {     if (r_board.layer_structure.is_signal(layer_no)) {       return true;     }   }   double half_width=art_ctrl.compensated_trace_half_width[layer_no];   boolean curr_door_is_small=false;   if (p_element.door instanceof ExpandDoor) {     double half_width_add=half_width + ArtEngine.TRACE_WIDTH_TOLERANCE;     ExpandDoor curr_door=(ExpandDoor)p_element.door;     if (art_ctrl.with_neckdown) {       double neck_down_half_width=check_neck_down_at_dest_pin(p_element.next_room);       if (neck_down_half_width > 0) {         half_width_add=Math.min(half_width_add,neck_down_half_width);         half_width=half_width_add;       }     }     curr_door_is_small=door_is_small(curr_door,2 * half_width_add);   }   art_engine.complete_neigbour_rooms(p_element.next_room);   PlaPointFloat shape_entry_middle=p_element.shape_entry.point_a.middle_point(p_element.shape_entry.point_b);   if (art_ctrl.with_neckdown && p_element.door instanceof ExpandDoorItem) {     BrdItem start_item=((ExpandDoorItem)p_element.door).item;     if (start_item instanceof board.items.BrdAbitPin) {       double neckdown_half_width=((board.items.BrdAbitPin)start_item).get_trace_neckdown_halfwidth(layer_no);       if (neckdown_half_width > 0) {         half_width=Math.min(half_width,neckdown_half_width);       }     }   }   boolean next_room_is_thick=true;   if (p_element.next_room instanceof ExpandRoomObstacle) {     next_room_is_thick=room_shape_is_thick((ExpandRoomObstacle)p_element.next_room);   }  else {     ShapeTile next_room_shape=p_element.next_room.get_shape();     if (next_room_shape.min_width() < 2 * half_width) {       next_room_is_thick=false;     }  else     if (!p_element.already_checked && p_element.door.get_dimension().is_line() && !curr_door_is_small) {       PlaPointFloat[] nearest_points=next_room_shape.nearest_border_points_approx(shape_entry_middle,2);       if (nearest_points.length < 2) {         System.out.println(\"MazeSearchAlgo.expand_to_room_doors: nearest_points.length == 2 expected\");         next_room_is_thick=false;       }  else {         double curr_dist=nearest_points[1].distance(shape_entry_middle);         next_room_is_thick=(curr_dist > half_width + 1);       }     }   }   if (!layer_active && p_element.door instanceof ExpandDrill) {     PlaPointInt drill_location=((ExpandDrill)p_element.door).location;     ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.CONDUCTION);     Set<BrdItem> picked_items=r_board.pick_items(drill_location,layer_no,filter);     for (    BrdItem curr_item : picked_items) {       if (!curr_item.contains_net(art_ctrl.net_no))       return true;     }   }   boolean something_expanded=false;   if (expand_to_target_doors(p_element,next_room_is_thick,curr_door_is_small,shape_entry_middle)) {     something_expanded=true;   }   if (!layer_active) {     return true;   }   int ripup_costs=0;   if (p_element.next_room instanceof ExpandRoomFreespace) {     if (!p_element.already_checked) {       if (curr_door_is_small) {         boolean enter_through_small_door=false;         if (next_room_is_thick) {           enter_through_small_door=check_leaving_ripped_item(p_element);         }         if (!enter_through_small_door) {           return something_expanded;         }       }     }   }  else   if (p_element.next_room instanceof ExpandRoomObstacle) {     ExpandRoomObstacle obstacle_room=(ExpandRoomObstacle)p_element.next_room;     if (!p_element.already_checked) {       boolean room_rippable=false;       if (art_ctrl.ripup_allowed) {         ripup_costs=check_ripup(p_element,obstacle_room.get_item(),curr_door_is_small);         room_rippable=(ripup_costs >= 0);       }       if (ripup_costs != ALREADY_RIPPED_COSTS && next_room_is_thick) {         BrdItem obstacle_item=obstacle_room.get_item();         if (!curr_door_is_small && art_ctrl.max_shove_trace_recursion_depth > 0 && obstacle_item instanceof board.items.BrdTracep) {           if (!shove_trace_room(p_element,obstacle_room)) {             if (ripup_costs > 0) {               MazeListElement new_element=new MazeListElement(p_element.door,p_element.section_no_of_door,p_element.backtrack_door,p_element.section_no_of_backtrack_door,p_element.expansion_value + ripup_costs,p_element.sorting_value + ripup_costs,p_element.next_room,p_element.shape_entry,true,p_element.adjustment,true);               maze_expansion_list.add(new_element);             }             return something_expanded;           }         }       }       if (!room_rippable) {         return true;       }     }   }   for (  ExpandDoor to_door : p_element.next_room.get_doors()) {     if (to_door == p_element.door) {       continue;     }     if (expand_to_door(to_door,p_element,ripup_costs,next_room_is_thick,MazeAdjustment.NONE)) {       something_expanded=true;     }   }   if (art_ctrl.vias_allowed && !(p_element.door instanceof ExpandDrill)) {     if ((something_expanded || next_room_is_thick) && p_element.next_room instanceof ExpandRoomFreespaceComplete) {       Collection<ExpandDrillPage> overlapping_drill_pages=art_engine.drill_page_array.overlapping_pages(p_element.next_room.get_shape()); {         for (        ExpandDrillPage to_drill_page : overlapping_drill_pages) {           expand_to_drill_page(to_drill_page,p_element);           something_expanded=true;         }       }     }  else     if (p_element.next_room instanceof ExpandRoomObstacle) {       BrdItem curr_obstacle_item=((ExpandRoomObstacle)p_element.next_room).get_item();       if (curr_obstacle_item instanceof board.items.BrdAbitVia) {         board.items.BrdAbitVia curr_via=(board.items.BrdAbitVia)curr_obstacle_item;         ExpandDrill via_drill_info=curr_via.get_autoroute_drill_info(art_engine.art_search_tree);         expand_to_drill(via_drill_info,p_element,ripup_costs);       }     }   }   return something_expanded; } "
"public void testUpdate8(){   String updateQuery=\"UPDATE \" + DatabaseCreator.TEST_TABLE1 + \" SET field2=NULL\";   try {     int num=statement.executeUpdate(updateQuery);     assertEquals(\"Not all records in the database were updated\",numberOfRecords,num);     String selectQuery=\"SELECT field2 FROM \" + DatabaseCreator.TEST_TABLE1;     ResultSet result=statement.executeQuery(selectQuery);     while (result.next()) {       assertNull(\"value of field2 should be NULL\",result.getObject(\"field2\"));     }     result.close();   }  catch (  SQLException e) {     fail(\"Unexpected exception\" + e.getMessage());   } } "
"public org.omg.DynamicAny.DynAny current_component() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"current_component\",_opsClass);   DynAnyOperations $self=(DynAnyOperations)$so.servant;   try {     return $self.current_component();   }   finally {     _servant_postinvoke($so);   } } "
"public Comment createComment(String data){   error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);   return null; } "
"@Override public boolean shouldFilter(){   String requestUri=RequestContext.getCurrentContext().getRequest().getRequestURI();   for (  Route route : routeLocator.getRoutes()) {     String serviceUrl=route.getFullPath();     String serviceName=route.getId();     if (requestUri.startsWith(serviceUrl.substring(0,serviceUrl.length() - 2))) {       return !isAuthorizedRequest(serviceUrl,serviceName,requestUri);     }   }   return true; } "
"@AndroidOnly(\"Uses specific class: \" + \"org.apache.harmony.security.asn1.ASN1OctetString.\") public void testSetMinCRLNumberLjava_math_BigInteger(){   X509CRLSelector selector=new X509CRLSelector();   BigInteger minCRL=new BigInteger(\"10000\");   CRL crl=new TestCRL(minCRL);   selector.setMinCRLNumber(null);   assertTrue(\"Any CRL should match in the case of null minCRLNumber.\",selector.match(crl));   selector.setMinCRLNumber(minCRL);   assertTrue(\"The CRL should match the selection criteria.\",selector.match(crl));   selector.setMinCRLNumber(new BigInteger(\"10001\"));   assertFalse(\"The CRL should not match the selection criteria.\",selector.match(crl)); } "
"@Override public int read() throws IOException {   try {     beforeRead(1);     int c=in.read();     afterRead(c != -1 ? 1 : -1);     return c;   }  catch (  IOException e) {     handleIOException(e);     return -1;   } } "
"public AuthenticatorDeviceServiceFactory(Debug debug,ServiceConfigManager serviceConfigManager,DeviceServiceFactory<T> factory){   this.debug=debug;   this.factory=factory;   this.serviceConfigManager=serviceConfigManager;   if (serviceConfigManager != null) {     serviceConfigManager.addListener(new AuthenticatorDeviceServiceFactoryServiceListener());   } } "
"public static UnbindRequest unmodifiableUnbindRequest(final UnbindRequest request){   if (request instanceof UnmodifiableUnbindRequestImpl) {     return request;   }   return new UnmodifiableUnbindRequestImpl(request); } "
"public boolean verify(PublicKey pubKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {   Signature sig;   try {     if (provider == null) {       sig=Signature.getInstance(getSignatureName(sigAlgId));     }  else {       sig=Signature.getInstance(getSignatureName(sigAlgId),provider);     }   }  catch (  NoSuchAlgorithmException e) {     if (oids.get(sigAlgId.getObjectId()) != null) {       String signatureAlgorithm=(String)oids.get(sigAlgId.getObjectId());       if (provider == null) {         sig=Signature.getInstance(signatureAlgorithm);       }  else {         sig=Signature.getInstance(signatureAlgorithm,provider);       }     }  else {       throw e;     }   }   setSignatureParameters(sig,sigAlgId.getParameters());   sig.initVerify(pubKey);   try {     sig.update(reqInfo.getEncoded(ASN1Encoding.DER));   }  catch (  Exception e) {     throw new SignatureException(\"exception encoding TBS cert request - \" + e);   }   return sig.verify(sigBits.getBytes()); } "
"protected void verify(PrivateKey privateKey,Certificate cert) throws ResourceException {   PublicKey publicKey=cert.getPublicKey();   byte[] data={65,66,67,68,69,70,71,72,73,74};   boolean verified;   try {     Signature signer=Signature.getInstance(privateKey.getAlgorithm());     signer.initSign(privateKey);     signer.update(data);     byte[] signed=signer.sign();     Signature verifier=Signature.getInstance(publicKey.getAlgorithm());     verifier.initVerify(publicKey);     verifier.update(data);     verified=verifier.verify(signed);   }  catch (  Exception e) {     throw new InternalServerErrorException(\"Error verifying private key and signed certificate\",e);   }   if (!verified) {     throw new BadRequestException(\"Private key does not match signed certificate\");   } } "
"public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public void testWebsocketCodecFragmentationInAllSectionsWithOverflow() throws Exception {   ByteArrayInputStream bais1=new ByteArrayInputStream(raw1);   ByteArrayInputStream bais2=new ByteArrayInputStream(raw2);   ByteArrayInputStream bais3=new ByteArrayInputStream(raw3);   ByteArrayInputStream bais4=new ByteArrayInputStream(raw4);   ByteArrayInputStream bais5=new ByteArrayInputStream(raw2);   ByteArrayInputStream bais6=new ByteArrayInputStream(raw3);   ByteArrayInputStream bais7=new ByteArrayInputStream(raw4);   WebSocketCodec codec=new WebSocketCodec(true,false);   assertNull(codec.decode(bais1));   assertNull(codec.decode(bais2));   assertNull(codec.decode(bais3));   String s=new String(codec.decode(bais4));   System.out.println(s);   assertNotNull(s);   assertTrue(s.startsWith(\"REGISTER\"));   assertNull(codec.decode(bais5));   assertNull(codec.decode(bais6));   s=new String(codec.decode(bais7));   System.out.println(s);   assertNotNull(s);   assertTrue(s.startsWith(\"REGISTER\")); } "
"void discardLast(){   --lastUsed; } "
"public SyncFailedException(String desc){   super(desc); } "
"public void remove(int index){   removeTabAt(index); } "
"public boolean aliasInUse(final String alias) throws KeyStoreException {   ensureValid(alias,CERT_ALIAS_MSG);   KeyStore keyStore=getKeyStore();   return keyStore != null && keyStore.containsAlias(alias); } "
"private void checkScreenShot(byte[] pixel){ synchronized (syncResScreenShotListener) {     if (resScreenShotListener != null) {       int[] argbPixel=new int[resCoreParameters.videoWidth * resCoreParameters.videoHeight];       ColorHelper.NV21TOARGB(pixel,argbPixel,resCoreParameters.videoWidth,resCoreParameters.videoHeight);       Bitmap result=Bitmap.createBitmap(argbPixel,resCoreParameters.videoWidth,resCoreParameters.videoHeight,Bitmap.Config.ARGB_8888);       CallbackDelivery.i().post(new RESScreenShotListener.RESScreenShotListenerRunable(resScreenShotListener,result));       resScreenShotListener=null;     }   } } "
"@SuppressWarnings(\"deprecation\") private static void addCallEndEvent(SQLiteDatabase db){   RegisteredEventDbAdapter eventDbAdapter=new RegisteredEventDbAdapter(db);   RegisteredEventAttributeDbAdapter eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(db);   DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);   Cursor dataTypeDbCursor=dataTypeDbAdapter.fetchAll(OmniDate.DB_NAME,OmniDate.class.getName());   dataTypeDbCursor.moveToFirst();   long dataTypeIdDate=CursorHelper.getLongFromCursor(dataTypeDbCursor,DataTypeDbAdapter.KEY_DATATYPEID);   long eventIdPhoneCallEnded=eventDbAdapter.insert(CallEndedEvent.EVENT_NAME,DbHelper.AppName.PHONE,\"\");   eventAttributeDbAdapter.insert(CallEndedEvent.ATTRIBUTE_TIMESTAMP,eventIdPhoneCallEnded,dataTypeIdDate);   dataTypeDbCursor.close(); } "
"public void loadLocal(final int local){   loadInsn(getLocalType(local),local); } "
"public RESTResponse call() throws IOException {   HttpURLConnection urlConnect=null;   RESTResponse response=new RESTResponse();   List<String> returnList=new ArrayList<>();   try {     URL serviceURL=new URL(path + paramsToString());     urlConnect=(HttpURLConnection)serviceURL.openConnection();     if (httpMethod == HTTPMethod.GET) {       urlConnect.setRequestMethod(\"GET\");     }  else {       urlConnect.setRequestMethod(\"POST\");       urlConnect.setDoOutput(true);     }     urlConnect.setUseCaches(false);     if (!headers.isEmpty()) {       for (      Map.Entry<String,String> entry : headers.entrySet()) {         urlConnect.setRequestProperty(entry.getKey(),entry.getValue());       }     }     if (httpMethod == HTTPMethod.POST) {       try (DataOutputStream output=new DataOutputStream(urlConnect.getOutputStream())){         output.writeBytes(postData);         output.flush();       }      }     response.setResponseCode(urlConnect.getResponseCode());     try (BufferedReader reader=new BufferedReader(new InputStreamReader(urlConnect.getInputStream()))){       String line;       while ((line=reader.readLine()) != null) {         returnList.add(line);       }     }    }  catch (  FileNotFoundException|UnknownHostException|ConnectException ex) {     throw ex;   } catch (  IOException ex) {     if (urlConnect != null) {       InputStream is=urlConnect.getErrorStream();       try (BufferedReader br=new BufferedReader(new InputStreamReader(is))){         String line;         while ((line=br.readLine()) != null) {           returnList.add(line);         }       }      }   }   response.setContent(returnList);   return response; } "
"public static final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){   String fmsg=null;   boolean throwex=false;   String msg=null;   if (msgKey != null)   msg=fResourceBundle.getString(msgKey);   if (msg == null) {     msg=fResourceBundle.getString(BAD_CODE);     throwex=true;   }   if (args != null) {     try {       int n=args.length;       for (int i=0; i < n; i++) {         if (null == args[i])         args[i]=\"\";       }       fmsg=java.text.MessageFormat.format(msg,args);     }  catch (    Exception e) {       fmsg=fResourceBundle.getString(FORMAT_FAILED);       fmsg+=\" \" + msg;     }   }  else   fmsg=msg;   if (throwex) {     throw new RuntimeException(fmsg);   }   return fmsg; } "
"public boolean isMember(SSOToken token) throws SSOException, PolicyException {   boolean member=false;   if (mstm == null) {     String realmName=stm.getPolicyManager().getOrganizationDN();     mstm=PolicyCache.getInstance().getPolicyManager(realmName).getSubjectTypeManager();   }   Subject subject=mstm.getCachedSubjectByName(subjectName);   if (subject != null) {     member=subject.isMember(token);   }  else {     if (debug.warningEnabled()) {       debug.warning(\"Realm subject: \" + subjectName + \" not found\");     }   }   return member; } "
"public JKTableRecord removeRecord(final int row){   return this.records.remove(row); } "
"private static void ImportPrefs(Preferences prefsNode,Element map){   NodeList entries=map.getChildNodes();   for (int i=0, numEntries=entries.getLength(); i < numEntries; i++) {     Element entry=(Element)entries.item(i);     prefsNode.put(entry.getAttribute(\"key\"),entry.getAttribute(\"value\"));   } } "
"public void write(ByteArrayOutputStream tagBuffer){   logger.config(\"Writing frame to buffer:\" + getIdentifier());   ByteBuffer headerBuffer=ByteBuffer.allocate(FRAME_HEADER_SIZE);   ByteArrayOutputStream bodyOutputStream=new ByteArrayOutputStream();   ((AbstractID3v2FrameBody)frameBody).write(bodyOutputStream);   if (getIdentifier().length() == 3) {     identifier=identifier + ' ';   }   headerBuffer.put(Utils.getDefaultBytes(getIdentifier(),\"ISO-8859-1\"),0,FRAME_ID_SIZE);   int size=frameBody.getSize();   logger.fine(\"Frame Size Is:\" + size);   headerBuffer.putInt(frameBody.getSize());   headerBuffer.put(statusFlags.getWriteFlags());   ((EncodingFlags)encodingFlags).unsetNonStandardFlags();   ((EncodingFlags)encodingFlags).unsetCompression();   headerBuffer.put(encodingFlags.getFlags());   try {     tagBuffer.write(headerBuffer.array());     if (((EncodingFlags)encodingFlags).isEncryption()) {       tagBuffer.write(encryptionMethod);     }     if (((EncodingFlags)encodingFlags).isGrouping()) {       tagBuffer.write(groupIdentifier);     }     tagBuffer.write(bodyOutputStream.toByteArray());   }  catch (  IOException ioe) {     throw new RuntimeException(ioe);   } } "
"public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {   StringBuffer sb=new StringBuffer(2000);   StringBuffer namespaceBuffer=new StringBuffer(100);   String nsDeclaration=\"\";   if (declareNS) {     namespaceBuffer.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);     namespaceBuffer.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);   }   if (includeNSPrefix) {     nsDeclaration=XACMLConstants.CONTEXT_NS_PREFIX + \":\";   }   sb.append(\"\\n<\").append(nsDeclaration).append(XACMLConstants.REQUEST).append(namespaceBuffer).append(\">\\n\");   int length=0;   if (subjects != null && !subjects.isEmpty()) {     length=subjects.size();     for (int i=0; i < length; i++) {       Subject sub=(Subject)subjects.get(i);       sb.append(sub.toXMLString(includeNSPrefix,false));     }   }   if (resources != null && !resources.isEmpty()) {     length=resources.size();     for (int i=0; i < length; i++) {       Resource resource=(Resource)resources.get(i);       sb.append(resource.toXMLString(includeNSPrefix,false));     }   }   if (action != null) {     sb.append(action.toXMLString(includeNSPrefix,false));   }   if (env != null) {     sb.append(env.toXMLString(includeNSPrefix,false));   }   sb.append(\"</\").append(nsDeclaration).append(XACMLConstants.REQUEST).append(\">\\n\");   return sb.toString(); } "
"public static ComponentUI createUI(JComponent b){   return new SynthRadioButtonMenuItemUI(); } "
"public void removeButtonActionListener(ButtonActionListener l){   buttonListeners.remove(l); } "
"public static AciTargets decode(String input,DN dn) throws AciException {   Target target=null;   TargetAttr targetAttr=null;   TargetFilter targetFilter=null;   TargAttrFilters targAttrFilters=null;   TargetControl targetControl=null;   ExtOp extOp=null;   SearchScope targetScope=SearchScope.WHOLE_SUBTREE;   Pattern targetPattern=Pattern.compile(targetRegex);   Matcher targetMatcher=targetPattern.matcher(input);   while (targetMatcher.find()) {     if (targetMatcher.groupCount() != targetElementCount) {       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_SYNTAX.get(input);       throw new AciException(message);     }     String keyword=targetMatcher.group(targetKeywordPos);     EnumTargetKeyword targetKeyword=EnumTargetKeyword.createKeyword(keyword);     if (targetKeyword == null) {       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_KEYWORD.get(keyword);       throw new AciException(message);     }     String operator=targetMatcher.group(targetOperatorPos);     EnumTargetOperator targetOperator=EnumTargetOperator.createOperator(operator);     if (targetOperator == null) {       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGETS_OPERATOR.get(operator);       throw new AciException(message);     }     String expression=targetMatcher.group(targetExpressionPos); switch (targetKeyword) { case KEYWORD_TARGET: {         if (target == null) {           target=Target.decode(targetOperator,expression,dn);         }  else {           LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"target\",input);           throw new AciException(message);         }         break;       } case KEYWORD_TARGETCONTROL: {       if (targetControl == null) {         targetControl=TargetControl.decode(targetOperator,expression);       }  else {         LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"targetcontrol\",input);         throw new AciException(message);       }       break;     } case KEYWORD_EXTOP: {     if (extOp == null) {       extOp=ExtOp.decode(targetOperator,expression);     }  else {       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"extop\",input);       throw new AciException(message);     }     break;   } case KEYWORD_TARGETATTR: {   if (targetAttr == null) {     targetAttr=TargetAttr.decode(targetOperator,expression);   }  else {     LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"targetattr\",input);     throw new AciException(message);   }   break; } case KEYWORD_TARGETSCOPE: { if (targetOperator == EnumTargetOperator.NOT_EQUALITY) {   LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_NOT_OPERATOR.get(operator,targetKeyword.name());   throw new AciException(message); } targetScope=createScope(expression); break; } case KEYWORD_TARGETFILTER: { if (targetFilter == null) { targetFilter=TargetFilter.decode(targetOperator,expression); }  else { LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"targetfilter\",input); throw new AciException(message); } break; } case KEYWORD_TARGATTRFILTERS: { if (targAttrFilters == null) { if (targetOperator == EnumTargetOperator.NOT_EQUALITY) { LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_NOT_OPERATOR.get(operator,targetKeyword.name()); throw new AciException(message); } targAttrFilters=TargAttrFilters.decode(targetOperator,expression); }  else { LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGET_DUPLICATE_KEYWORDS.get(\"targattrfilters\",input); throw new AciException(message); } break; } } } return new AciTargets(target,targetAttr,targetFilter,targetScope,targAttrFilters,targetControl,extOp); } "
"public boolean mustCheckUnsavedChanges(){   return index != null && saveChanges.isVisible() && saveChanges.isEnabled(); } "
"private void addTable(Hashtable<String,Object> table){   if ((table != null) && !table.isEmpty()) {     getTable().putAll(table);   } } "
"public AuthenticatedViewBean(){   super(PAGE_NAME);   setDefaultDisplayURL(DEFAULT_DISPLAY_URL); } "
"@Override public void addChild(Container child){   if (Globals.IS_SECURITY_ENABLED) {     PrivilegedAction<Void> dp=new PrivilegedAddChild(child);     AccessController.doPrivileged(dp);   }  else {     addChildInternal(child);   } } "
"private MultiValuedPropertyEditor(ManagedObject<?> mo,PropertyDefinition<?> pd){   Reject.ifFalse(pd.hasOption(PropertyOption.MULTI_VALUED));   this.mo=mo;   this.pd=pd; } "
"private void buildOneVarOp(MethodVisitor methodVisitor,CodeInfo info,Ins.OneVarOp oneVarOp){   buildValueAccess(methodVisitor,info,oneVarOp.value(),true);   methodVisitor.visitInsn(oneVarOp.op());   if (oneVarOp.op() == Ins.OneVarOp.Dneg || oneVarOp.op() == Ins.OneVarOp.Lneg) {     info.pop(1);     info.push(CodeInfo.Size._2);   }  else {     info.pop(1);     info.push(CodeInfo.Size._1);   } } "
"private static String jsdocifyProtoMarkdownLinks(String comment){   StringBuffer sb=new StringBuffer();   Matcher m=CommentPatterns.PROTO_LINK_PATTERN.matcher(comment);   if (!m.find()) {     return comment;   }   do {     m.appendReplacement(sb,String.format(\"{@link %s}\",m.group(1)));   }  while (m.find());   m.appendTail(sb);   return sb.toString(); } "
"public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){   paintBorder(context,g,x,y,w,h,null); } "
"public String cachePolicy(String policyName,String description,boolean isReferral,boolean isActive) throws AMConsoleException {   try {     Policy policy=new Policy(policyName,description,isReferral,isActive);     PolicyCache cache=PolicyCache.getInstance();     return cache.cachePolicy(getUserSSOToken(),new CachedPolicy(policy));   }  catch (  InvalidNameException e) {     throw new AMConsoleException(getErrorString(e));   } } "
"public static void displaySingleComponent(ConsoleApplication app,ManagedObject<?> mo,Collection<PropertyDefinition<?>> c){   String ufn=mo.getManagedObjectPath().getName();   if (ufn == null) {     ufn=mo.getManagedObjectDefinition().getUserFriendlyName().toString();   }   app.println(INFO_DSCFG_HELP_HEADING_COMPONENT.get(ufn));   final AbstractManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();   app.println();   app.println(d.getSynopsis());   if (d.getDescription() != null) {     app.println();     app.println(d.getDescription());   }   app.println();   app.println();   displayPropertyOptionKey(app);   app.println();   app.println();   final TableBuilder builder=new TableBuilder();   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get());   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());   builder.addSortKey(0);   for (  final PropertyDefinition<?> pd : c) {     builder.startRow();     builder.appendCell(pd.getName());     builder.appendCell(getPropertyOptionSummary(pd));     final PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false);     builder.appendCell(v.getUsage(pd));   }   builder.print(new TextTablePrinter(app.getErrorStream())); } "
"public Object remove(Object key){   checkKey(key);   return map.remove(key); } "
"private StringUtil(){ } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeappendchildnomodificationallowederr.class,args); } "
"public StaticTextTag(){   text=\"\"; } "
"private void doTestSendAck(boolean sameBranch){   System.out.println(\"doTestSendAck \" + sameBranch);   try {     try {       eventCollector.collectResponseEvent(tiSipProvider);     }  catch (    TooManyListenersException e) {       throw new TckInternalError(\"Failed to register a SipListener with the RI.\",e);     }     Response ok=null;     try {       ok=riMessageFactory.createResponse(Response.OK,riInvite);       ok.addHeader(createRiInviteRequest(null,null,null).getHeader(ContactHeader.NAME));       ToHeader okToHeader=(ToHeader)ok.getHeader(ToHeader.NAME);       okToHeader.setTag(riToTag);       ServerTransaction riST=riSipProvider.getNewServerTransaction(riInvite);       riST.getDialog();       riST.sendResponse(ok);     }  catch (    Exception e) {       throw new TckInternalError(\"Failed to create and send an OK response\",e);     }     waitForMessage();     ResponseEvent okRespEvt=eventCollector.extractCollectedResponseEvent();     if (okRespEvt == null || okRespEvt.getResponse() == null)     throw new TiUnexpectedError(\"The TI did not dispatch an OK response.\");     String okBranch=((ViaHeader)okRespEvt.getResponse().getHeader(ViaHeader.NAME)).getBranch();     assertEquals(DialogState.CONFIRMED,dialog.getState());     try {       eventCollector.collectRequestEvent(riSipProvider);     }  catch (    TooManyListenersException ex) {       throw new TckInternalError(\"Failed to register a SipListener with the RI\",ex);     }     Request ack=null;     try {       CSeqHeader cseq=(CSeqHeader)okRespEvt.getResponse().getHeader(CSeqHeader.NAME);       ack=dialog.createAck(cseq.getSeqNumber());       if (sameBranch) {         ViaHeader via=(ViaHeader)ack.getHeader(\"Via\");         via.setBranch(((ViaHeader)riInvite.getHeader(\"Via\")).getBranch());       }     }  catch (    SipException ex) {       throw new TiUnexpectedError(\"Failed to create an ACK request.\",ex);     }     try {       dialog.sendAck(ack);     }  catch (    Throwable ex) {       ex.printStackTrace();       fail(\"SipException; Failed to send an ACK request using Dialog.sendAck()\");     }     waitForMessage();     RequestEvent ackEvt=eventCollector.extractCollectedRequestEvent();     assertNotNull(\"No requestEvent sent by Dialog.sendAck() was received by the RI\",ackEvt);     assertNotNull(\"The request sent by Dialog.sendAck() was not received by the RI\",ackEvt.getRequest());     if (!sameBranch) {       String ackBranchId=((ViaHeader)ackEvt.getRequest().getHeader(ViaHeader.NAME)).getBranch();       super.assertNotSame(\"ACK branch ID must differ from INVITE OK branch ID\",ackBranchId,okBranch);     }   }  catch (  Throwable exc) {     exc.printStackTrace();     fail(exc.getClass().getName() + \": \" + exc.getMessage());   }   assertTrue(new Exception().getStackTrace()[0].toString(),true); } "
"@Override public void sendMessage(Member[] destination,ChannelMessage msg,InterceptorPayload payload) throws ChannelException {   if (destination == null)   destination=membershipService.getMembers();   if ((msg.getOptions() & Channel.SEND_OPTIONS_MULTICAST) == Channel.SEND_OPTIONS_MULTICAST) {     membershipService.broadcast(msg);   }  else {     clusterSender.sendMessage(msg,destination);   }   if (Logs.MESSAGES.isTraceEnabled()) {     Logs.MESSAGES.trace(\"ChannelCoordinator - Sent msg:\" + new UniqueId(msg.getUniqueId()) + \" at \"+ new java.sql.Timestamp(System.currentTimeMillis())+ \" to \"+ Arrays.toNameString(destination));   } } "
"public void testFloatValueMinusZero(){   String a=\"-123809648392384754573567356745735.63567890295784902768787678287E-400\";   BigDecimal aNumber=new BigDecimal(a);   int minusZero=-2147483648;   float result=aNumber.floatValue();   assertTrue(\"incorrect value\",Float.floatToIntBits(result) == minusZero); } "
"public JKTagMapping findTagMapping(final String tagName){   for (  final JKTagMapping mapping : this.tagMapping) {     if (mapping.getSourceQName().equals(tagName)) {       return mapping;     }   }   return null; } "
"@Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){   return _fooLocalService.dynamicQueryCount(dynamicQuery); } "
"@Inject public TokenResponseTypeHandler(TokenStore tokenStore){   this.tokenStore=tokenStore; } "
"public static void registerIdentityMapper(DN configEntryDN,IdentityMapper<?> identityMapper){   directoryServer.identityMappers.put(configEntryDN,identityMapper); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeappendchilddocfragment.class,args); } "
"public final void signalAll(){   if (!isHeldExclusively())   throw new IllegalMonitorStateException();   Node first=firstWaiter;   if (first != null)   doSignalAll(first); } "
"private final int increment(int aStrength,int lastValue){ switch (aStrength) { case Collator.PRIMARY:     lastValue+=PRIMARYORDERINCREMENT;   lastValue&=RBCollationTables.PRIMARYORDERMASK; isOverIgnore=true; break; case Collator.SECONDARY: lastValue+=SECONDARYORDERINCREMENT; lastValue&=RBCollationTables.SECONDARYDIFFERENCEONLY; if (!isOverIgnore) maxSecOrder++; break; case Collator.TERTIARY: lastValue+=TERTIARYORDERINCREMENT; if (!isOverIgnore) maxTerOrder++; break; } return lastValue; } "
"private void initAll(AttributedCharacterIterator text){   fStart=text.getBeginIndex();   fChars=new char[text.getEndIndex() - fStart];   int n=0;   for (char c=text.first(); c != CharacterIterator.DONE; c=text.next()) {     fChars[n++]=c;   }   text.first();   fBidi=new Bidi(text);   if (fBidi.isLeftToRight()) {     fBidi=null;   }   text.first();   Map<? extends Attribute,?> paragraphAttrs=text.getAttributes();   NumericShaper shaper=AttributeValues.getNumericShaping(paragraphAttrs);   if (shaper != null) {     shaper.shape(fChars,0,fChars.length);   }   fParagraph=new StyledParagraph(text,fChars); {     fJustifyRatio=AttributeValues.getJustification(paragraphAttrs);     boolean haveFont=TextLine.advanceToFirstFont(text);     if (haveFont) {       Font defaultFont=TextLine.getFontAtCurrentPos(text);       int charsStart=text.getIndex() - text.getBeginIndex();       LineMetrics lm=defaultFont.getLineMetrics(fChars,charsStart,charsStart + 1,fFrc);       fBaseline=(byte)lm.getBaselineIndex();       fBaselineOffsets=lm.getBaselineOffsets();     }  else {       GraphicAttribute graphic=(GraphicAttribute)paragraphAttrs.get(TextAttribute.CHAR_REPLACEMENT);       fBaseline=TextLayout.getBaselineFromGraphic(graphic);       Hashtable<Attribute,?> fmap=new Hashtable<>(5,(float)0.9);       Font dummyFont=new Font(fmap);       LineMetrics lm=dummyFont.getLineMetrics(\" \",0,1,fFrc);       fBaselineOffsets=lm.getBaselineOffsets();     }     fBaselineOffsets=TextLine.getNormalizedOffsets(fBaselineOffsets,fBaseline);   }   invalidateComponents(); } "
"public void toggle(){   mSlidingMenu.toggle(); } "
"public static LocPathIterator createUnionIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {   UnionPathIterator upi=new UnionPathIterator(compiler,opPos);   int nPaths=upi.m_exprs.length;   boolean isAllChildIterators=true;   for (int i=0; i < nPaths; i++) {     LocPathIterator lpi=upi.m_exprs[i];     if (lpi.getAxis() != Axis.CHILD) {       isAllChildIterators=false;       break;     }  else {       if (HasPositionalPredChecker.check(lpi)) {         isAllChildIterators=false;         break;       }     }   }   if (isAllChildIterators) {     UnionChildIterator uci=new UnionChildIterator();     for (int i=0; i < nPaths; i++) {       PredicatedNodeTest lpi=upi.m_exprs[i];       uci.addNodeTest(lpi);     }     return uci;   }  else   return upi; } "
"private void midPoint(PointF point,MotionEvent event){   float x=event.getX(0) + event.getX(1);   float y=event.getY(0) + event.getY(1);   point.set(x / 2,y / 2); } "
"private void doSetValueCreateReplaceTest(boolean canCreate,String beanName){   BeanNameELResolver resolver=createBeanNameELResolver(canCreate);   ELContext context=new StandardELContext(ELManager.getExpressionFactory());   Object bean=resolver.getValue(context,null,BEAN01_NAME);   Assert.assertTrue(context.isPropertyResolved());   Assert.assertEquals(BEAN01,bean);   context.setPropertyResolved(false);   resolver.setValue(context,null,beanName,BEAN99);   if (canCreate || BEAN01_NAME.equals(beanName)) {     Assert.assertTrue(context.isPropertyResolved());     context.setPropertyResolved(false);     bean=resolver.getValue(context,null,beanName);     Assert.assertTrue(context.isPropertyResolved());     Assert.assertEquals(BEAN99,bean);   }  else {     Assert.assertFalse(context.isPropertyResolved());     context.setPropertyResolved(false);     bean=resolver.getValue(context,null,BEAN01_NAME);     Assert.assertTrue(context.isPropertyResolved());     Assert.assertEquals(BEAN01,bean);   } } "
"public double[] board_to_dsn(PlaPointFloat p_point){   double[] result=new double[2];   result[0]=board_to_dsn(p_point.v_x) + base_x;   result[1]=board_to_dsn(p_point.v_y) + base_y;   return result; } "
"BigInteger multiply(long v){   if (v == 0 || signum == 0)   return ZERO;   if (v == BigDecimal.INFLATED)   return multiply(BigInteger.valueOf(v));   int rsign=(v > 0 ? signum : -signum);   if (v < 0)   v=-v;   long dh=v >>> 32;   long dl=v & LONG_MASK;   int xlen=mag.length;   int[] value=mag;   int[] rmag=(dh == 0L) ? (new int[xlen + 1]) : (new int[xlen + 2]);   long carry=0;   int rstart=rmag.length - 1;   for (int i=xlen - 1; i >= 0; i--) {     long product=(value[i] & LONG_MASK) * dl + carry;     rmag[rstart--]=(int)product;     carry=product >>> 32;   }   rmag[rstart]=(int)carry;   if (dh != 0L) {     carry=0;     rstart=rmag.length - 2;     for (int i=xlen - 1; i >= 0; i--) {       long product=(value[i] & LONG_MASK) * dh + (rmag[rstart] & LONG_MASK) + carry;       rmag[rstart--]=(int)product;       carry=product >>> 32;     }     rmag[0]=(int)carry;   }   if (carry == 0L)   rmag=java.util.Arrays.copyOfRange(rmag,1,rmag.length);   return new BigInteger(rmag,rsign); } "
"public void put(Object key,Action action){   if (key == null) {     return;   }   if (action == null) {     remove(key);   }  else {     if (arrayTable == null) {       arrayTable=new ArrayTable();     }     arrayTable.put(key,action);   } } "
"protected boolean handleDirectory(File directory,int depth,Collection<T> results) throws IOException {   return true; } "
"public void testGetInstance1(){   if (this.cert == null) {     return;   }   try {     ByteArrayInputStream bais=new ByteArrayInputStream(cert.getEncoded());     X509Certificate.getInstance(bais);   }  catch (  java.security.cert.CertificateEncodingException e) {     fail(\"Unexpected CertificateEncodingException was thrown.\");   } catch (  CertificateEncodingException e) {     fail(\"Unexpected CertificateEncodingException was thrown.\");   } catch (  CertificateException e) {   }   try {     X509Certificate.getInstance((InputStream)null);     fail(\"No expected CertificateException\");   }  catch (  CertificateException e) {   } } "
"public static Feature fromGeometry(Geometry geometry,JsonObject properties,String id){   return new Feature(geometry,properties,id); } "
"static void usePostReadRequestControl(Connection connection) throws LdapException {   if (isSupported(PostReadRequestControl.OID)) {     final String dn=\"uid=bjensen,ou=People,dc=example,dc=com\";     final ModifyRequest request=Requests.newModifyRequest(dn).addControl(PostReadRequestControl.newControl(true,\"description\")).addModification(ModificationType.REPLACE,\"description\",\"Using the PostReadRequestControl\");     final Result result=connection.modify(request);     try {       final PostReadResponseControl control=result.getControl(PostReadResponseControl.DECODER,new DecodeOptions());       final Entry entry=control.getEntry();       final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);       writer.writeEntry(entry);       writer.close();     }  catch (    final DecodeException e) {       System.err.println(e.getMessage());       System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());     } catch (    final IOException e) {       System.err.println(e.getMessage());       System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());     }   }  else {     System.err.println(\"PostReadRequestControl not supported\");   } } "
"static void checkMethodIdentifier(int version,final String name,final String msg){   if (name == null || name.length() == 0) {     throw new IllegalArgumentException(\"Invalid \" + msg + \" (must not be null or empty)\");   }   if ((version & 0xFFFF) >= Opcodes.V1_5) {     for (int i=0; i < name.length(); ++i) {       if (\".;[/<>\".indexOf(name.charAt(i)) != -1) {         throw new IllegalArgumentException(\"Invalid \" + msg + \" (must be a valid unqualified name): \"+ name);       }     }     return;   }   if (!Character.isJavaIdentifierStart(name.charAt(0))) {     throw new IllegalArgumentException(\"Invalid \" + msg + \" (must be a '<init>', '<clinit>' or a valid Java identifier): \"+ name);   }   for (int i=1; i < name.length(); ++i) {     if (!Character.isJavaIdentifierPart(name.charAt(i))) {       throw new IllegalArgumentException(\"Invalid \" + msg + \" (must be '<init>' or '<clinit>' or a valid Java identifier): \"+ name);     }   } } "
"public synchronized void removeFlavorListener(FlavorListener listener){   if (listener == null || flavorListeners == null) {     return;   }   flavorListeners.remove(listener); } "
"@BeforeClass public static void beforeClass() throws Exception {   RestAssured.baseURI=BASE_URI;   RestAssured.port=PORT;   f=Fixtures.getInstance();   RestExpressManager.getManager().ensureRestExpressRunning(); } "
"private boolean matchesNameForm(NameForm nameForm,AcceptRejectWarn structuralPolicy,Entry entry){   RDN rdn=entry.getName().rdn();   if (rdn != null) {     for (    AttributeType t : nameForm.getRequiredAttributes()) {       if (!rdn.hasAttributeType(t) && structuralPolicy == AcceptRejectWarn.REJECT) {         return false;       }     }     for (    AVA ava : rdn) {       AttributeType t=ava.getAttributeType();       if (!nameForm.isRequiredOrOptional(t) && structuralPolicy == AcceptRejectWarn.REJECT) {         return false;       }     }   }   return true; } "
"public AuthnSvcException(String s){   super(s);   fillInStackTrace(); } "
"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {   Object a=s.readFields().get(\"array\",null);   if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException(\"Not array type\");   if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);   unsafe.putObjectVolatile(this,arrayFieldOffset,a); } "
"XSLTElementProcessor popProcessor(){   return (XSLTElementProcessor)m_processors.pop(); } "
"private static DN makeDNFromServerProperties(Map<ServerProperty,Object> serverProperties) throws ADSContextException {   String serverID=getServerID(serverProperties);   if (serverID != null) {     return makeDNFromServerUniqueId(serverID);   }   String hostname=getHostname(serverProperties);   try {     String ipath=getInstallPath(serverProperties);     return makeDNFromHostnameAndPath(hostname,ipath);   }  catch (  ADSContextException ace) {     ServerDescriptor s=ServerDescriptor.createStandalone(serverProperties);     return makeDNFromServerUniqueId(s.getHostPort(true).toString());   } } "
"public void runTest() throws Throwable {   Document doc;   Element element;   NodeList elementList;   doc=(Document)load(\"staffNS\",false);   element=doc.getDocumentElement();   elementList=element.getElementsByTagNameNS(\"http://www.altavista.com\",\"*\");   assertSize(\"elementgetelementsbytagnamens05\",1,elementList); } "
"public StringCharacterIterator(String text,int pos){   this(text,0,text.length(),pos); } "
"protected void writeHeader() throws IOException {   writeStartTag(\"<head>\");   writeStartTag(\"<style>\");   writeStartTag(\"<!--\");   writeStyles();   writeEndTag(\"-->\");   writeEndTag(\"</style>\");   writeEndTag(\"</head>\"); } "
"@Override public void cacheResult(List<Foo> foos){   for (  Foo foo : foos) {     if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {       cacheResult(foo);     }  else {       foo.resetOriginalValues();     }   } } "
"@Override public ExpandRoomComplete other_room_complete(ExpandRoomComplete p_room){   ExpandRoom result=other_room(p_room);   if (result == null)   return null;   if (result instanceof ExpandRoomComplete)   return (ExpandRoomComplete)result;   return null; } "
"public RAckHeader createRAckHeader(long rSeqNumber,long cSeqNumber,String method) throws InvalidArgumentException, ParseException {   if (method == null)   throw new NullPointerException(\"Bad method\");   if (cSeqNumber < 0 || rSeqNumber < 0)   throw new InvalidArgumentException(\"bad cseq/rseq arg\");   RAck rack=new RAck();   rack.setMethod(method);   rack.setCSequenceNumber(cSeqNumber);   rack.setRSequenceNumber(rSeqNumber);   return rack; } "
"public boolean hasNameOrOID(final String value){   return hasName(value) || getOID().equals(value); } "
"public Sapling(final Material type,TreeSpecies species){   this(type,species,false); } "
"public boolean isCommitted(){   return response != null && this.response.isCommitted(); } "
"public void test_read_writeShort() throws IOException {   RandomAccessFile raf=new java.io.RandomAccessFile(fileName,\"rw\");   raf.writeShort(Short.MIN_VALUE);   raf.writeShort('T');   raf.writeShort(Short.MAX_VALUE);   raf.writeShort(Short.MIN_VALUE - 1);   raf.writeShort(Short.MAX_VALUE + 1);   raf.seek(0);   assertEquals(\"Test 1: Incorrect value written or read;\",Short.MIN_VALUE,raf.readShort());   assertEquals(\"Test 2: Incorrect value written or read;\",'T',raf.readShort());   assertEquals(\"Test 3: Incorrect value written or read;\",Short.MAX_VALUE,raf.readShort());   assertEquals(\"Test 4: Incorrect value written or read;\",0x7fff,raf.readShort());   assertEquals(\"Test 5: Incorrect value written or read;\",(short)0x8000,raf.readShort());   try {     raf.readShort();     fail(\"Test 6: EOFException expected.\");   }  catch (  EOFException e) {   }   raf.close();   try {     raf.writeShort('E');     fail(\"Test 7: IOException expected.\");   }  catch (  IOException e) {   }   try {     raf.readShort();     fail(\"Test 8: IOException expected.\");   }  catch (  IOException e) {   } } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   logger.info(\"shootme: got an ACK! \");   logger.info(\"Dialog = \" + requestEvent.getDialog());   if (requestEvent.getDialog() != null) {     logger.info(\"Dialog State = \" + requestEvent.getDialog().getState());   }   this.ackSeen=true; } "
"private void searchForCustomFilter(DN dn,ConnectionWithControls conn) throws IOException {   SearchRequest request=newSearchRequest(dn,WHOLE_SUBTREE,controller.getFilter()).setSizeLimit(1);   try (ConnectionEntryReader entryReader=conn.search(request)){     if (!entryReader.hasNext()) {       throw LdapException.newLdapException(ResultCode.NO_SUCH_OBJECT,\"Entry \" + dn + \" does not verify filter \"+ controller.getFilter());     }     while (entryReader.hasNext()) {       entryReader.readEntry();     }   }  catch (  LdapException e) {     if (!e.getResult().getResultCode().equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {       throw e;     }   } } "
"public Guid(String dn,long id){   _dn=DN.valueOf(dn);   _uniqueId=id; } "
"protected void resources(PrintWriter writer,String type,StringManager smClient){   if (debug >= 1) {     if (type != null) {       log(\"resources:  Listing resources of type \" + type);     }  else {       log(\"resources:  Listing resources of all types\");     }   }   if (global == null) {     writer.println(smClient.getString(\"managerServlet.noGlobal\"));     return;   }   if (type != null) {     writer.println(smClient.getString(\"managerServlet.resourcesType\",type));   }  else {     writer.println(smClient.getString(\"managerServlet.resourcesAll\"));   }   Class<?> clazz=null;   try {     if (type != null) {       clazz=Class.forName(type);     }   }  catch (  Throwable t) {     ExceptionUtils.handleThrowable(t);     log(\"ManagerServlet.resources[\" + type + \"]\",t);     writer.println(smClient.getString(\"managerServlet.exception\",t.toString()));     return;   }   printResources(writer,\"\",global,type,clazz,smClient); } "
"public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public NO_PERMISSION(int minor,CompletionStatus completed){   this(\"\",minor,completed); } "
"@Override public boolean equals(final Object obj){   if (!(obj instanceof FastDateFormat)) {     return false;   }   final FastDateFormat other=(FastDateFormat)obj;   return printer.equals(other.printer); } "
"@Override public void attributeAdded(HttpSessionBindingEvent event){   log(\"attributeAdded('\" + event.getSession().getId() + \"', '\"+ event.getName()+ \"', '\"+ event.getValue()+ \"')\"); } "
"public int difference(String s1,String s2) throws EncoderException {   return SoundexUtils.difference(this,s1,s2); } "
"public static String fixValue(String value){   if (value != null && !value.equals(\"\")) {     final String[] words=value.toLowerCase().split(\"_\");     value=\"\";     for (    final String word : words) {       if (word.length() > 1) {         value+=word.substring(0,1).toUpperCase() + word.substring(1) + \" \";       }  else {         value=word;       }     }   }   if (value.contains(\"\\\\n\")) {     value=value.replace(\"\\\\n\",System.getProperty(\"line.separator\"));   }   return value; } "
"public static void initializeForClientUse(){   EmbeddedUtils.initializeForClientUse(); } "
"public Observable<Void> removeJobObservable(long id){   io.vertx.rx.java.ObservableFuture<Void> handler=io.vertx.rx.java.RxHelper.observableFuture();   removeJob(id,handler.toHandler());   return handler; } "
"public void printDashedLine(){   startNewLineIfNeeded();   for (int i=0; i < lineLength; i++) {     stream.print('-');   }   stream.println(); } "
"public void initObjectGraph(Object module){   mObjectGraph=module != null ? ObjectGraph.create(module) : null; } "
"public static void copy(byte[] input,Writer output,String encoding) throws IOException {   ByteArrayInputStream in=new ByteArrayInputStream(input);   copy(in,output,encoding); } "
"@Override public synchronized void load() throws ServletException {   instance=loadServlet();   if (!instanceInitialized) {     initServlet(instance);   }   if (isJspServlet) {     StringBuilder oname=new StringBuilder(getDomain());     oname.append(\":type=JspMonitor\");     oname.append(getWebModuleKeyProperties());     oname.append(\",name=\");     oname.append(getName());     oname.append(getJ2EEKeyProperties());     try {       jspMonitorON=new ObjectName(oname.toString());       Registry.getRegistry(null,null).registerComponent(instance,jspMonitorON,null);     }  catch (    Exception ex) {       log.info(\"Error registering JSP monitoring with jmx \" + instance);     }   } } "
"public InterruptibleReentrantLock(final boolean fairness){   super(fairness); } "
"public void insertEntries(int start,int length,int value){   int sizes[]=getSizes();   int end=start + length;   int n=a.length + length;   a=new int[n];   for (int i=0; i < start; i++) {     a[i]=sizes[i];   }   for (int i=start; i < end; i++) {     a[i]=value;   }   for (int i=end; i < n; i++) {     a[i]=sizes[i - length];   }   setSizes(a); } "
"public LifecycleException(Throwable throwable){   super(throwable); } "
"public void testFlipBitNegativeInside4(){   String as=\"-4294967295\";   String res=\"-4294967296\";   int number=0;   BigInteger aNumber=new BigInteger(as);   BigInteger result=aNumber.flipBit(number);   assertEquals(res,result.toString()); } "
"private boolean acceptSequence(char... sequence){   for (int i=0; i < sequence.length; i++) {     if (data[index + i] != sequence[i])     return false;   }   return true; } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeinsertbeforenewchilddiffdocument.class,args); } "
"@Override public void begin(String namespace,String theName,Attributes attributes) throws Exception {   Object top=digester.peek();   if (digester.log.isDebugEnabled()) {     if (top != null) {       digester.log.debug(\"[SetPropertiesRule]{\" + digester.match + \"} Set \"+ top.getClass().getName()+ \" properties\");     }  else {       digester.log.debug(\"[SetPropertiesRule]{\" + digester.match + \"} Set NULL properties\");     }   }   for (int i=0; i < attributes.getLength(); i++) {     String name=attributes.getLocalName(i);     if (\"\".equals(name)) {       name=attributes.getQName(i);     }     String value=attributes.getValue(i);     if (digester.log.isDebugEnabled()) {       digester.log.debug(\"[SetPropertiesRule]{\" + digester.match + \"} Setting property '\"+ name+ \"' to '\"+ value+ \"'\");     }     if (!digester.isFakeAttribute(top,name) && !IntrospectionUtils.setProperty(top,name,value) && digester.getRulesValidation()) {       digester.log.warn(\"[SetPropertiesRule]{\" + digester.match + \"} Setting property '\"+ name+ \"' to '\"+ value+ \"' did not find a matching property.\");     }   } } "
"public boolean deleteAll(){   return database.delete(DATABASE_TABLE,null,null) > 0; } "
"public void removeNotify(){ synchronized (getTreeLock()) {     ListPeer peer=(ListPeer)this.peer;     if (peer != null) {       selected=peer.getSelectedIndexes();     }     super.removeNotify();   } } "
"public Observable<Void> removeStoreObservable(String sellerId){   io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();   removeStore(sellerId,resultHandler.toHandler());   return resultHandler; } "
"public void paintImmediately(Rectangle r){   paintImmediately(r.x,r.y,r.width,r.height); } "
"public void writeBindRequest(final int messageID,final int version,final GenericBindRequest request) throws IOException {   logger.trace(\"ENCODE LDAP BIND REQUEST(messageID=%d, auth=0x%x, request=%s)\",messageID,request.getAuthenticationType(),request);   writeMessageHeader(messageID); {     writer.writeStartSequence(LDAP.OP_TYPE_BIND_REQUEST); {       writer.writeInteger(version);       writer.writeOctetString(request.getName());       writer.writeOctetString(request.getAuthenticationType(),request.getAuthenticationValue());     }     writer.writeEndSequence();   }   writeMessageFooter(request.getControls()); } "
"protected static Map removeEmptyValues(Map attrMap){   Map finalMap=new HashMap();   Iterator iter=attrMap.keySet().iterator();   while (iter.hasNext()) {     String tStr=(String)iter.next();     Set s=(Set)attrMap.get(tStr);     if (!s.isEmpty()) {       finalMap.put(tStr,attrMap.get(tStr));     }   }   return finalMap; } "
"public void test_setCharLjava_lang_ObjectIC(){   char[] x={0};   boolean thrown=false;   try {     Array.setChar(x,0,(char)1);   }  catch (  Exception e) {     fail(\"Exception during get test : \" + e.getMessage());   }   assertEquals(\"Get returned incorrect value\",1,Array.getChar(x,0));   try {     Array.setChar(new Object(),0,(char)9);   }  catch (  IllegalArgumentException e) {     thrown=true;   }   if (!thrown) {     fail(\"Passing non-array failed to throw exception\");   }   thrown=false;   try {     Array.setChar(x,4,(char)9);   }  catch (  ArrayIndexOutOfBoundsException e) {     thrown=true;   }   if (!thrown) {     fail(\"Invalid index failed to throw exception\");   }   thrown=false;   try {     Array.setChar(null,0,(char)0);   }  catch (  NullPointerException e) {     thrown=true;   }   if (!thrown) {     fail(\"Null argument failed to throw NPE\");   } } "
"@Override public void closePool(final String username) throws SQLException { synchronized (this) {     if (username == null || !username.equals(_username)) {       return;     }   }   try {     _pool.close();   }  catch (  final Exception ex) {     throw new SQLException(\"Error closing connection pool\",ex);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrspecifiedvaluechanged.class,args); } "
"protected boolean hasAlert(){   return (alert[0] != 0); } "
"public Object clone(){   SimpleAttributeSet attr;   try {     attr=(SimpleAttributeSet)super.clone();     attr.table=(LinkedHashMap)table.clone();   }  catch (  CloneNotSupportedException cnse) {     attr=null;   }   return attr; } "
"private String[] parseRowColSpec(HTML.Attribute key){   AttributeSet attributes=getElement().getAttributes();   String spec=\"*\";   if (attributes != null) {     if (attributes.getAttribute(key) != null) {       spec=(String)attributes.getAttribute(key);     }   }   StringTokenizer tokenizer=new StringTokenizer(spec,\",\");   int nTokens=tokenizer.countTokens();   int n=getViewCount();   String[] items=new String[Math.max(nTokens,n)];   int i=0;   for (; i < nTokens; i++) {     items[i]=tokenizer.nextToken().trim();     if (items[i].equals(\"100%\")) {       items[i]=\"*\";     }   }   for (; i < items.length; i++) {     items[i]=\"*\";   }   return items; } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.UsernameTokenElement createUsernameTokenElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.UsernameTokenElementImpl(); } "
"private Bitmap createBase(int color){   Bitmap finalImg=Bitmap.createBitmap(mSize,mSize,Bitmap.Config.ARGB_8888);   mCanvas.setBitmap(finalImg);   mCanvas.save();   float[] hsv=new float[3];   Color.colorToHSV(color,hsv);   if (hsv[1] == 0) {     hsv[2]=Math.min(hsv[2],MAX_WHITE_BRIGHTNESS);   }  else {     hsv[2]=Math.min(hsv[2],MAX_COLOR_BRIGHTNESS);     hsv[1]=Math.max(MIN_COLOR_SATURATION,hsv[1]);   }   int colorMid=Color.HSVToColor(hsv);   hsv[2]+=0.1f;   int colorTop=Color.HSVToColor(hsv);   hsv[2]-=0.2f;   int colorBot=Color.HSVToColor(hsv);   float edge=mSize * 0.01f;   mCanvas.translate(-edge,-edge);   mPaint.setColor(colorTop);   mCanvas.drawPath(mRoundRect,mPaint);   mPaint.setColor(colorBot);   mPaint.setXfermode(new PorterDuffXfermode(Mode.XOR));   mCanvas.translate(edge,edge);   mCanvas.drawPath(mRoundRect,mPaint);   mPaint.setColor(colorMid);   mPaint.setXfermode(new PorterDuffXfermode(Mode.DST_OVER));   mCanvas.drawPath(mRoundRect,mPaint);   mCanvas.restore();   mCanvas.setBitmap(null);   mPaint.setXfermode(null);   return finalImg; } "
"public IOException(Throwable cause){   super(cause == null ? null : cause.toString(),cause); } "
"public Value parseValueFromTwoVarOp(TwoVariableOperation tvo,SemanticScope scope) throws SyntaxException {   String op=tvo.operator();   Value left=parseValueFromExpression(tvo.expressions().get(0),null,scope);   Value right=parseValueFromExpression(tvo.expressions().get(1),null,scope);   return parseValueFromTwoVarOp(left,op,right,scope,tvo.line_col()); } "
"public Door(final TreeSpecies species,BlockFace face,boolean isOpen){   this(getWoodDoorOfSpecies(species),face,isOpen); } "
"private void writeObject(java.io.ObjectOutputStream out) throws NotSerializableException {   throw new NotSerializableException(\"Not serializable.\"); } "
"public String encodeBody(){   return encodeBody(new StringBuilder()).toString(); } "
"public void append(final CommandBuilder builder){   for (  final Argument arg : builder.args) {     if (builder.isObfuscated(arg)) {       addObfuscatedArgument(arg);     }  else {       addArgument(arg);     }   } } "
"public JMenuItem(){   this(null,(Icon)null); } "
"public static void CONSTANT_OBJECT_PRODUCED(long iid) throws IOException {   ThreadTracer tracer=getActiveThreadTracer();   if (tracer == null)   return;   tracer.header(iid); } "
"public XMPException(String message,int errorCode){   super(message);   this.errorCode=errorCode; } "
"private void inintView(){   mView=(ImageView)findViewById(R.id.splash_image);   mLoadingProgress=(ProgressBar)findViewById(R.id.pb_loading); } "
"public MyChangeRecordEntry(DN dn){   super(dn); } "
"private void checkGenerationId(){   if (localGenerationId <= 0) {     oldGenerationId=replicationServerDomain.changeGenerationId(generationId);     return;   }   if (generationId > 0 && generationId != localGenerationId) {     logger.warn(WARN_BAD_GENERATION_ID_FROM_RS,serverId,session.getReadableRemoteAddress(),generationId,getBaseDN(),getReplicationServerId(),localGenerationId);   } } "
"private void populateMap(Map<String,StateInfo> map,StateInfo stateInfo){   String serverId=stateInfo.id;   map.put(serverId,stateInfo);   if (!stateInfo.isUp) {     down.add(serverId);   }   serverSelectionList[getNextSelected()]=stateInfo; } "
"public SystemAppTokenProvider(String appUserName,String appPassword){   this.appUserName=appUserName;   this.appPassword=appPassword; } "
"public ArrayList<ShapeTile> offset_shapes(int p_half_width){   return offset_shapes(p_half_width,0,plaline_len(-1)); } "
"public synchronized boolean acquireValidLock(){   while (!expired) {     if (owner == null) {       owner=Thread.currentThread();       acquireCount=1;       return true;     }  else {       if (owner != Thread.currentThread()) {         try {           waitCount++;           this.wait();           waitCount--;         }  catch (        InterruptedException ex) {         }       }  else {         acquireCount++;         return true;       }     }   }   return false; } "
"public void poll(final UdpSocketStatisticsHandler handler){   this.statisticsHandler=handler;   try {     fileLoader.load();     final ByteBuffer buffer=fileLoader.getBuffer();     lineParser.reset();     lineParser.handleToken(buffer,buffer.position(),buffer.limit());   }   finally {     this.statisticsHandler=null;   }   monitoredSockets.purgeEntriesOlderThan(updateCount);   updateCount++; } "
"public boolean isIndeterminate(){   return isIndeterminate; } "
"@Override protected int afterParseMessageAction(int ret){   if (tlsContext.getProtocolVersion() == ProtocolVersion.DTLS12) {     protocolMessage.setCompleteResultingMessage(dtlsAllMessageBytes);     ret+=8;   }   byte[] pm=protocolMessage.getCompleteResultingMessage().getValue();   if (protocolMessage.getIncludeInDigest()) {     tlsContext.getDigest().update(pm);   }   return ret; } "
"protected void isEntityReferneceWellFormed(EntityReference node){   if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {     String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{\"EntityReference\",node.getNodeName()});     if (fErrorHandler != null) {       fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));     }   }   Node parent=node.getParentNode();   DocumentType docType=node.getOwnerDocument().getDoctype();   if (docType != null) {     NamedNodeMap entities=docType.getEntities();     for (int i=0; i < entities.getLength(); i++) {       Entity ent=(Entity)entities.item(i);       String nodeName=node.getNodeName() == null ? \"\" : node.getNodeName();       String nodeNamespaceURI=node.getNamespaceURI() == null ? \"\" : node.getNamespaceURI();       String entName=ent.getNodeName() == null ? \"\" : ent.getNodeName();       String entNamespaceURI=ent.getNamespaceURI() == null ? \"\" : ent.getNamespaceURI();       if (parent.getNodeType() == Node.ELEMENT_NODE) {         if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {           if (ent.getNotationName() != null) {             String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_UNPARSED_ENT,new Object[]{node.getNodeName()});             if (fErrorHandler != null) {               fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_UNPARSED_ENT,null,null,null));             }           }         }       }       if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {         if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {           if (ent.getPublicId() != null || ent.getSystemId() != null || ent.getNotationName() != null) {             String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,new Object[]{node.getNodeName()});             if (fErrorHandler != null) {               fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,null,null,null));             }           }         }       }     }   } } "
"public String encode(){   if (this.isEmpty())   return \"\";   StringBuilder encoding=new StringBuilder();   ListIterator iterator=this.listIterator();   if (iterator.hasNext()) {     while (true) {       Object obj=iterator.next();       if (obj instanceof GenericObject) {         GenericObject gobj=(GenericObject)obj;         encoding.append(gobj.encode());       }  else {         encoding.append(obj.toString());       }       if (iterator.hasNext())       encoding.append(Separators.SEMICOLON);  else       break;     }   }   return encoding.toString(); } "
"public static ApplicationException createFileSystemException(LocalizableMessage msg,Exception e){   return new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,msg,e); } "
"public int nearest_target_layer(){   if (nearest_target_item == null)   return layer_active_no;   int first_layer=nearest_target_item.first_layer();   int last_layer=nearest_target_item.last_layer();   if (layer_active_no < first_layer) {     return first_layer;   }  else   if (layer_active_no > last_layer) {     return last_layer;   }  else {     return layer_active_no;   } } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.RelativeToElement createRelativeToElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RelativeToElementImpl(); } "
"public MimeHeaders(){   headers=new Vector(); } "
"@Override public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_LIST_APPLICATION_TYPES\",null);   Set<String> names=ApplicationTypeManager.getApplicationTypeNames(getAdminSubject());   IOutput writer=getOutputWriter();   if ((names == null) || names.isEmpty()) {     writer.printlnMessage(getResourceString(\"list-applications-type-no-entries\"));   }  else {     for (    String n : names) {       writer.printlnMessage(n);     }   }   writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEEDED_LIST_APPLICATION_TYPES\",null); } "
"@Override public void execute() throws BuildException {   int count=0;   Iterator<FileSet> iter=filesets.iterator();   while (iter.hasNext()) {     FileSet fs=iter.next();     DirectoryScanner ds=fs.getDirectoryScanner(getProject());     File basedir=ds.getBasedir();     String[] files=ds.getIncludedFiles();     for (int i=0; i < files.length; i++) {       File from=new File(basedir,files[i]);       File to=new File(todir,files[i] + \".html\");       if (!to.exists() || (from.lastModified() > to.lastModified())) {         log(\"Converting file '\" + from.getAbsolutePath() + \"' to '\"+ to.getAbsolutePath(),Project.MSG_VERBOSE);         try {           convert(from,to);         }  catch (        IOException e) {           throw new BuildException(\"Could not convert '\" + from.getAbsolutePath() + \"' to '\"+ to.getAbsolutePath()+ \"'\",e);         }         count++;       }     }     if (count > 0) {       log(\"Converted \" + count + \" file\"+ (count > 1 ? \"s\" : \"\")+ \" to \"+ todir.getAbsolutePath());     }   } } "
"public static ImportParameters importParams(){   return new ImportParameters(); } "
"public TreeSelectionEvent(Object source,TreePath path,boolean isNew,TreePath oldLeadSelectionPath,TreePath newLeadSelectionPath){   super(source);   paths=new TreePath[1];   paths[0]=path;   areNew=new boolean[1];   areNew[0]=isNew;   this.oldLeadSelectionPath=oldLeadSelectionPath;   this.newLeadSelectionPath=newLeadSelectionPath; } "
"private NSObject parseObject() throws ParseException { switch (data[index]) { case ARRAY_BEGIN_TOKEN: {       return parseArray();     } case DICTIONARY_BEGIN_TOKEN: {     return parseDictionary();   } case DATA_BEGIN_TOKEN: {   return parseData(); } case QUOTEDSTRING_BEGIN_TOKEN: { String quotedString=parseQuotedString(); if (quotedString.length() == 20 && quotedString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {   try {     return new NSDate(quotedString);   }  catch (  Exception ex) {     return new NSString(quotedString);   } }  else {   return new NSString(quotedString); } } default : { if (data[index] > 0x2F && data[index] < 0x3A) { return parseDateString(); }  else { String parsedString=parseString(); return new NSString(parsedString); } } } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodehaschildnodesfalse.class,args); } "
"public BAD_PARAM(String s){   this(s,0,CompletionStatus.COMPLETED_NO); } "
"private ShortCutUtil(){   throw new Error(\"Do not need instantiate!\"); } "
"@Override public JsonGenerator useDefaultPrettyPrinter(){   return this; } "
"@SuppressWarnings(\"unused\") @DataProvider(name=\"testIncludePrecommitProvider\") private Object[][] testIncludePrecommitProvider(){   return new Object[][]{{1,new String[]{\"inetOrgPerson\",\"displayName\"}}}; } "
"private SASLMechanismHandler loadHandler(String className,SASLMechanismHandlerCfg configuration,boolean initialize) throws InitializationException {   try {     SASLMechanismHandlerCfgDefn definition=SASLMechanismHandlerCfgDefn.getInstance();     ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();     Class<? extends SASLMechanismHandler> handlerClass=propertyDefinition.loadClass(className,SASLMechanismHandler.class);     SASLMechanismHandler handler=handlerClass.newInstance();     if (initialize) {       handler.initializeSASLMechanismHandler(configuration);     }  else {       List<LocalizableMessage> unacceptableReasons=new ArrayList<>();       if (!handler.isConfigurationAcceptable(configuration,unacceptableReasons)) {         String reasons=Utils.joinAsString(\".  \",unacceptableReasons);         throw new InitializationException(ERR_CONFIG_SASL_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));       }     }     return handler;   }  catch (  Exception e) {     LocalizableMessage message=ERR_CONFIG_SASL_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));     throw new InitializationException(message,e);   } } "
"public boolean canBeStaticallyBound(){   return Modifier.isFinal(flags | clazz.getModifiers()); } "
"protected void paintComponent(Graphics g){   if (ui != null) {     super.paintComponent(g);   }  else   if (isOpaque()) {     g.setColor(getBackground());     g.fillRect(0,0,getWidth(),getHeight());   } } "
"public void editIDRepo(String realmName,String idRepoName,Map values) throws AMConsoleException {   String[] params={realmName,idRepoName};   logEvent(\"ATTEMPT_MODIFY_ID_REPO\",params);   values.remove(\"idRepoLoadSchema\");   try {     ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,getUserSSOToken());     ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realmName,null);     ServiceConfig ss=cfg.getSubConfig(idRepoName);     ss.setAttributes(values);     logEvent(\"SUCCEED_MODIFY_ID_REPO\",params);   }  catch (  SMSException e) {     String strError=getErrorString(e);     String[] paramsEx={realmName,idRepoName,strError};     logEvent(\"SMS_EXCEPTION_MODIFY_ID_REPO\",paramsEx);     throw new AMConsoleException(strError);   } catch (  SSOException e) {     String strError=getErrorString(e);     String[] paramsEx={realmName,idRepoName,strError};     logEvent(\"SSO_EXCEPTION_MODIFY_ID_REPO\",paramsEx);     throw new AMConsoleException(strError);   } } "
"public PdfReader(String filename,ReaderProperties properties) throws IOException {   this(new RandomAccessSourceFactory().setForceRead(false).createBestSource(filename),properties);   this.sourcePath=filename; } "
"protected ReplicationBroker openReplicationSession(final DN baseDN,int serverId,int windowSize,int port,int timeout,long generationId) throws Exception {   final DomainFakeCfg config=newFakeCfg(baseDN,serverId,port);   config.setWindowSize(windowSize);   final ReplicationBroker broker=new ReplicationBroker(new DummyReplicationDomain(generationId),new ServerState(),config,getReplSessionSecurity());   connect(broker,timeout);   return broker; } "
"@Override public void close() throws IOException { synchronized (lock) {     in.close();   } } "
"public boolean shouldSelectCell(EventObject anEvent){   return true; } "
"@Override public void addSecurityRole(String role){ synchronized (securityRolesLock) {     String results[]=new String[securityRoles.length + 1];     for (int i=0; i < securityRoles.length; i++)     results[i]=securityRoles[i];     results[securityRoles.length]=role;     securityRoles=results;   }   fireContainerEvent(\"addSecurityRole\",role); } "
"@BindingAdapter(\"bind:userList\") public static void loadUserList(RecyclerView recyclerView,List<User> users){   Log.i(TAG,\"loadUserList: \" + users);   RecyclerView.LayoutManager layoutManager=recyclerView.getLayoutManager();   if (layoutManager == null) {     recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext()));   }   RecyclerView.Adapter adapter=recyclerView.getAdapter();   if (adapter == null) {     adapter=new UserAdapter(recyclerView.getContext());     recyclerView.setAdapter(adapter);   }   UserAdapter userAdapter=(UserAdapter)adapter;   userAdapter.setUserList(users); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   String serverName=getStringOptionValue(IArgument.SERVER_NAME);   String outfile=getStringOptionValue(IArgument.OUTPUT_FILE);   IOutput outputWriter=getOutputWriter();   try {     String[] params={serverName};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_GET_SERVER_CONFIG_XML\",params);     String xml=ServerConfiguration.getServerConfigXML(adminSSOToken,serverName);     if ((xml != null) && (xml.length() > 0)) {       if ((outfile != null) && (outfile.length() > 0)) {         CLIUtil.writeToFile(outfile,xml);       }  else {         outputWriter.printlnMessage(xml);       }       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"get-serverconfig-xml-succeeded\"),(Object[])params));     }  else {       outputWriter.printlnMessage(getResourceString(\"get-server-config-xml-no-result-no-results\"));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_GET_SERVER_CONFIG_XML\",params);   }  catch (  IOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"GetServerConfigXML.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_SERVER_CONFIG_XML\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"GetServerConfigXML.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_SERVER_CONFIG_XML\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={serverName,e.getMessage()};     debugError(\"GetServerConfigXML.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_SERVER_CONFIG_XML\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributenodenomodificationallowederr.class,args); } "
"public static void modifyDSAMEUserPassword(String password) throws IOException {   String baseDir=SystemProperties.get(SystemProperties.CONFIG_PATH);   String bootstrapFile=baseDir + \"/\" + AMSetupServlet.BOOTSTRAP_EXTRA;   List urls=readFile(bootstrapFile);   StringBuilder buff=new StringBuilder();   for (Iterator i=urls.iterator(); i.hasNext(); ) {     String url=(String)i.next();     buff.append(modifyDSAMEUserPassword(url,password)).append(\"\\n\");   }   writeToFile(bootstrapFile,buff.toString()); } "
"public void testFlipBitNegativeInside3(){   String as=\"-18446744073709551615\";   String res=\"-18446744073709551611\";   int number=2;   BigInteger aNumber=new BigInteger(as);   BigInteger result=aNumber.flipBit(number);   assertEquals(res,result.toString()); } "
"public static void mergeIfAbsent(Map<String,String> map,Map<String,String> toMerge){   for (  Map.Entry<String,String> entry : toMerge.entrySet()) {     putIfAbsent(map,entry.getKey(),entry.getValue());     ;   } } "
"private FSLogoutStatus doSoapProfile(String providerId){   FSUtils.debug.message(\"Entered IDP's doSoapProfile\");   try {     FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);     FSSession session=sMgr.getSession(ssoToken);     FSAccountFedInfo currentAccount=null;     if (session != null) {       currentAccount=session.getAccountFedInfo();     }     if (currentAccount == null && !session.getOneTime()) {       currentAccount=FSLogoutUtil.getCurrentWorkingAccount(userID,providerId,metaAlias);     }     if (currentAccount == null) {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSSingleLogoutHandler. User's \" + \"account may have been terminated.\");       }       return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);     }     FSLogoutNotification reqLogout=createSingleLogoutRequest(currentAccount,sessionIndex);     reqLogout.setMinorVersion(getMinorVersion(remoteDescriptor));     if (reqLogout != null) {       FSSOAPService instSOAP=FSSOAPService.getInstance();       if (instSOAP != null) {         FSUtils.debug.message(\"Signing suceeded. To call bindLogoutRequest\");         reqLogout.setID(IFSConstants.LOGOUTID);         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"logout request before sign: \" + reqLogout.toXMLString(true,true));         }         SOAPMessage msgLogout=instSOAP.bind(reqLogout.toXMLString(true,true));         if (msgLogout != null) {           SOAPMessage retSOAPMessage=null;           try {             if (FSServiceUtils.isSigningOn()) {               int minorVersion=reqLogout.getMinorVersion(); switch (minorVersion) { case IFSConstants.FF_11_PROTOCOL_MINOR_VERSION:                 msgLogout=signLogoutRequest(msgLogout,IFSConstants.ID,reqLogout.getID());               break; case IFSConstants.FF_12_PROTOCOL_MINOR_VERSION:             msgLogout=signLogoutRequest(msgLogout,IFSConstants.REQUEST_ID,reqLogout.getRequestID());           break; default :         FSUtils.debug.message(\"invalid minor version.\");       break;   } } retSOAPMessage=instSOAP.sendMessage(msgLogout,remoteDescriptor.getSoapEndpoint()); }  catch (Exception e) { FSUtils.debug.error(\"FSSOAPException in doSOAPProfile\" + \" Cannot send request\",e); return new FSLogoutStatus(IFSConstants.SAML_RESPONDER); } if (retSOAPMessage != null) { Element elt=instSOAP.parseSOAPMessage(retSOAPMessage); if (FSServiceUtils.isSigningOn()) {   if (!verifyResponseSignature(retSOAPMessage)) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"Response \" + \"signature verification failed\");     }     FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,false,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);     return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);   } } this.requestLogout=reqLogout; respObj=new FSLogoutResponse(elt); if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {   FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);   if (spAdapter != null) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSSLOHandler.\" + \"preSingleLogoutProcess, SP/SOAP\");     }     try {       spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,reqLogout,respObj,IFSConstants.LOGOUT_SP_SOAP_PROFILE);     }  catch (    Exception e) {       FSUtils.debug.error(\"spAdapter.\" + \"preSingleLogoutProcess, SP/SOAP:\",e);     }   } } Status status=respObj.getStatus(); StatusCode statusCode=status.getStatusCode(); StatusCode secondLevelStatus=statusCode.getStatusCode(); String statusString=statusCode.getValue(); if (statusString.equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"FSSingleLogoutHandler: \" + \" doSoapProfile returning success\");   }   return new FSLogoutStatus(IFSConstants.SAML_SUCCESS); }  else {   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"FSSingleLogoutHandler: \" + \"SOAP Profile failure \" + statusString);   }   return new FSLogoutStatus(statusString); } } } } if (FSUtils.debug.messageEnabled()) { FSUtils.debug.message(\"Unable to bindLogoutRequest.\" + \"Current Provider cannot be processed\"); } }  else { if (FSUtils.debug.messageEnabled()) { FSUtils.debug.message(\"Unable to create logout request\" + \" Current Provider cannot be processed\"); } } }  catch (Exception e) { FSUtils.debug.error(\"In IOException of doSOAPProfile : \",e); } return new FSLogoutStatus(IFSConstants.SAML_RESPONDER); } "
"public DataStoreProviderException(String rbName,String errorCode,Object[] args){   super(rbName,errorCode,args); } "
"public void testClearBitPositiveOutside1(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=150;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public boolean includeAttribute(AttributeType attributeType){   if (!excludeAttributes.isEmpty() && excludeAttributes.contains(attributeType)) {     return false;   }   if ((excludeAllOpAttrs && attributeType.isOperational()) || (excludeAllUserAttrs && !attributeType.isOperational())) {     return false;   }   if ((includeAllUserAttrs && !attributeType.isOperational()) || (includeAllOpAttrs && attributeType.isOperational())) {     return true;   }   if (!includeAttributes.isEmpty()) {     return includeAttributes.contains(attributeType);   }  else   if ((includeAllUserAttrs && attributeType.isOperational()) || (includeAllOpAttrs && !attributeType.isOperational())) {     return false;   }   return true; } "
"public boolean equals(String s){   if (s == null) {     return false;   }   if (length != s.length()) {     return false;   }   for (int i=0; i < length; i++) {     if (ch[offset + i] != s.charAt(i)) {       return false;     }   }   return true; } "
"private void copyCallbacks(Callback[] cb1,Callback[] cb2){   int len1=cb1.length;   int len2=cb2.length;   if (len1 == len2) {     for (int m=0; m < len1; m++) {       if (cb1[m] != cb2[m]) {         cb1[m]=cb2[m];       }     }   }  else {     int indx1=0;     int indx2=0;     while (indx1 < len1 && cb1[indx1] instanceof PagePropertiesCallback) {       indx1++;     }     while (indx2 < len2 && cb2[indx2] instanceof PagePropertiesCallback) {       indx2++;     }     int n=len1 - indx1;     if (n > len2 - indx2) {       n=len2 - indx2;     }     for (int m=0; m < n; m++) {       if (cb1[indx1] != cb2[indx2]) {         cb1[indx1]=cb2[indx2];       }       indx1++;       indx2++;     }   } } "
"public NoSuchMechanismException(Throwable cause){   super(cause == null ? null : cause.toString());   this.cause=cause; } "
"@Deprecated @SuppressWarnings(\"deprecation\") public final void suspend(){   if (stopOrSuspend(true))   Thread.currentThread().suspend(); } "
"public Object clone(){   try {     @SuppressWarnings(\"unchecked\") CopyOnWriteArrayList<E> clone=(CopyOnWriteArrayList<E>)super.clone();     clone.resetLock();     return clone;   }  catch (  CloneNotSupportedException e) {     throw new InternalError();   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementgetelementsbytagnamespecialvalue.class,args); } "
"private void visitImplicitFirstFrame(){   int frameIndex=startFrame(0,descriptor.length() + 1,0);   if ((access & Opcodes.ACC_STATIC) == 0) {     if ((access & ACC_CONSTRUCTOR) == 0) {       frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);     }  else {       frame[frameIndex++]=6;     }   }   int i=1;   loop:   while (true) {     int j=i; switch (descriptor.charAt(i++)) { case 'Z': case 'C': case 'B': case 'S': case 'I':       frame[frameIndex++]=1;     break; case 'F':   frame[frameIndex++]=2; break; case 'J': frame[frameIndex++]=4; break; case 'D': frame[frameIndex++]=3; break; case '[': while (descriptor.charAt(i) == '[') { ++i; } if (descriptor.charAt(i) == 'L') { ++i; while (descriptor.charAt(i) != ';') { ++i; } } frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i)); break; case 'L': while (descriptor.charAt(i) != ';') { ++i; } frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++)); break; default : break loop; } } frame[1]=frameIndex - 3; endFrame(); } "
"protected Exception(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){   super(message,cause,enableSuppression,writableStackTrace); } "
"public void addArgument(Argument argument) throws ArgumentException {   final String argumentLongID=argument.getLongIdentifier();   if (getArgumentForLongIdentifier(argumentLongID) != null) {     throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_ARGUMENT_NAME.get(name,argumentLongID));   }   if (parser.hasGlobalArgument(argumentLongID)) {     throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_GLOBAL_CONFLICT.get(argumentLongID,name));   }   Character shortID=argument.getShortIdentifier();   if (shortID != null) {     if (shortIDMap.containsKey(shortID)) {       throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_SHORT_ID.get(argumentLongID,name,String.valueOf(shortID),shortIDMap.get(shortID).getLongIdentifier()));     }     Argument arg=parser.getGlobalArgumentForShortID(shortID);     if (arg != null) {       throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_SHORT_ID_GLOBAL_CONFLICT.get(argumentLongID,name,String.valueOf(shortID),arg.getLongIdentifier()));     }   }   String longID=argument.getLongIdentifier();   if (!parser.longArgumentsCaseSensitive()) {     longID=toLowerCase(longID);     if (longIDMap.containsKey(longID)) {       throw new ArgumentException(ERR_ARG_SUBCOMMAND_DUPLICATE_LONG_ID.get(argumentLongID,name));     }   }   Argument arg=parser.getGlobalArgumentForLongID(longID);   if (arg != null) {     throw new ArgumentException(ERR_ARG_SUBCOMMAND_ARGUMENT_LONG_ID_GLOBAL_CONFLICT.get(argumentLongID,name));   }   arguments.add(argument);   if (shortID != null) {     shortIDMap.put(shortID,argument);   }   if (longID != null) {     longIDMap.put(longID,argument);   } } "
"private void saveWorkFolderShortcuts(long workFolderId,int startingRank){   for (  ItemInfo info : mWorkFolderApps) {     info.rank=startingRank++;     LauncherModel.addItemToDatabase(mContext,info,workFolderId,0,0,0);   } } "
"private V doGet(Object okey){   Comparable<? super K> key=comparable(okey);   for (; ; ) {     Node<K,V> n=findNode(key);     if (n == null)     return null;     Object v=n.value;     if (v != null)     return (V)v;   } } "
"private void readHeadTable() throws java.io.IOException {   int table_location[];   table_location=tables.get(\"head\");   if (table_location == null) {     if (fileName != null) {       throw new IOException(\"table.1.does.not.exist.in.2\").setMessageParams(\"head\",fileName);     }  else {       throw new IOException(\"table.1.does.not.exist\").setMessageParams(\"head\");     }   }   raf.seek(table_location[0] + 16);   head=new HeaderTable();   head.flags=raf.readUnsignedShort();   head.unitsPerEm=raf.readUnsignedShort();   raf.skipBytes(16);   head.xMin=raf.readShort();   head.yMin=raf.readShort();   head.xMax=raf.readShort();   head.yMax=raf.readShort();   head.macStyle=raf.readUnsignedShort(); } "
"@Deprecated public int _INVALID_getDamage(){   return NumberConversions.ceil(getDamage()); } "
"public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   doPost(request,response); } "
"public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {   return sp.signXML(doc,certAlias); } "
"public int hashCode(){   int rest=((copies + fromPage + maxPage+ minPage+ prFirst+ prLast+ toPage) * 31) << 21;   if (pageRanges != null) {     int sum=0;     for (int i=0; i < pageRanges.length; i++) {       sum+=pageRanges[i][0] + pageRanges[i][1];     }     rest^=(sum * 31) << 11;   }   if (fileName != null) {     rest^=fileName.hashCode();   }   if (printer != null) {     rest^=printer.hashCode();   }   return (defaultSelection.hashCode() << 6 ^ destination.hashCode() << 5 ^ dialog.hashCode() << 3 ^ multipleDocumentHandling.hashCode() << 2 ^ sides.hashCode() ^ rest); } "
"public SAMLException(String rbName,String errorCode,Object[] args){   super(rbName,errorCode,args); } "
"public int size(){   return al.size(); } "
"private void assertObjectIsAMap(JsonValue value){   if (Map.class.isAssignableFrom(value.getObject().getClass())) {     return;   }   throw new IllegalArgumentException(\"Only Map instances are permitted in the OAuth token.\"); } "
"@SuppressWarnings(\"unchecked\") public static void addExtraEncoding(String name,IExtraEncoding enc){ synchronized (extraEncodings) {     extraEncodings.put(name.toLowerCase(),enc);   } } "
"@SuppressLint(\"NewApi\") private void disableControls(){   this.getSettings().setBuiltInZoomControls(true);   this.getSettings().setDisplayZoomControls(false); } "
"static Promise<Boolean> blockingPromiseBoolean(final Duration duration){   return new BlockingPromise<>(duration); } "
"public static void reversedMergesort(double[] a){   reversedMergesort(a,0,a.length); } "
"public static List<ImageData> createGifFrames(byte[] bytes){   byte[] imageType=readImageType(bytes);   if (imageTypeIs(imageType,gif)) {     GifImageData image=new GifImageData(bytes);     GifImageHelper.processImage(image);     return image.getFrames();   }   throw new IllegalArgumentException(\"GIF image expected.\"); } "
"LambdaFormBuffer replaceParameterByCopy(int pos,int valuePos){   assert (pos != valuePos);   replaceName(pos,names[valuePos]);   noteDuplicate(pos,valuePos);   return this; } "
"public boolean canSetSourceRenderSize(){   return canSetSourceRenderSize; } "
"public void process(String name,Vector elems,Hashtable atts,String pcdata){   if (elems.elementAt(0) instanceof Level) {     level=((Level)elems.elementAt(0)).str;   }  else {     level=\"800\";   }   msg=((RecMsg)elems.elementAt(1)).str;   logInfoMap=null;   parameters=null;   if (elems.size() == 3) {     if (elems.elementAt(2) instanceof LogInfoMap) {       logInfoMap=((LogInfoMap)elems.elementAt(2)).logInfoMap;     }  else {       parameters=((Parameters)elems.elementAt(2)).parameters;     }   }  else   if (elems.size() == 4) {     logInfoMap=((LogInfoMap)elems.elementAt(2)).logInfoMap;     parameters=((Parameters)elems.elementAt(3)).parameters;   } } "
"public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {   return null; } "
"private static void updateTextFieldComponent(JTextField field,LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle textStyle){   field.setColumns(size);   if (text != null) {     field.setText(text.toString());   }   if (tooltip != null) {     field.setToolTipText(tooltip.toString());   }   if (textStyle != null) {     setTextStyle(field,textStyle);   } } "
"private VerificationStatus.HashMatchResult verifyHash(int dgNumber,Map<Integer,VerificationStatus.HashMatchResult> hashResults){   short fid=LDSFileUtil.lookupFIDByTag(LDSFileUtil.lookupTagByDataGroupNumber(dgNumber));   SODFile sod=null;   byte[] storedHash=null;   try {     sod=lds.getSODFile();     Map<Integer,byte[]> storedHashes=sod.getDataGroupHashes();     storedHash=storedHashes.get(dgNumber);   }  catch (  Exception e) {     verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.STORED_HASH_NOT_FOUND_FAILURE,hashResults);     return null;   }   String digestAlgorithm=sod.getDigestAlgorithm();   try {     digest=getDigest(digestAlgorithm);   }  catch (  NoSuchAlgorithmException nsae) {     verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNSUPPORTED_DIGEST_ALGORITHM_FAILURE,null);     return null;   }   byte[] dgBytes=null;   try {     InputStream dgIn=null;     int length=lds.getLength(fid);     if (length > 0) {       dgBytes=new byte[length];       dgIn=lds.getInputStream(fid);       DataInputStream dgDataIn=new DataInputStream(dgIn);       dgDataIn.readFully(dgBytes);     }     if (dgIn == null && (verificationStatus.getEAC() != VerificationStatus.Verdict.SUCCEEDED) && (fid == PassportService.EF_DG3 || fid == PassportService.EF_DG4)) {       LOGGER.warning(\"Skipping DG\" + dgNumber + \" during HT verification because EAC failed.\");       VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);       hashResults.put(dgNumber,hashResult);       return hashResult;     }     if (dgIn == null) {       LOGGER.warning(\"Skipping DG\" + dgNumber + \" during HT verification because file could not be read.\");       VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);       hashResults.put(dgNumber,hashResult);       return hashResult;     }   }  catch (  Exception e) {     VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);     hashResults.put(dgNumber,hashResult);     verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,hashResults);     return hashResult;   }   try {     byte[] computedHash=digest.digest(dgBytes);     VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,computedHash);     hashResults.put(dgNumber,hashResult);     if (!Arrays.equals(storedHash,computedHash)) {       verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.HASH_MISMATCH_FAILURE,hashResults);     }     return hashResult;   }  catch (  Exception ioe) {     VerificationStatus.HashMatchResult hashResult=new HashMatchResult(storedHash,null);     hashResults.put(dgNumber,hashResult);     verificationStatus.setHT(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,hashResults);     return hashResult;   } } "
"@Override public int doStartTag() throws JspException {   throw new UnsupportedOperationException(\"Illegal to invoke doStartTag() on TagAdapter wrapper\"); } "
"public void println(String s){   javaLine++;   writer.println(s); } "
"public void runTest() throws Throwable {   Document doc;   Node oldChild;   Node newChild;   NodeList elementList;   Node elementNode;   Node replacedNode;   doc=(Document)load(\"staff\",true);   newChild=doc.createElement(\"newChild\");   oldChild=doc.createElement(\"oldChild\");   elementList=doc.getElementsByTagName(\"employee\");   elementNode=elementList.item(1); {     boolean success=false;     try {       replacedNode=elementNode.replaceChild(newChild,oldChild);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NOT_FOUND_ERR);     }     assertTrue(\"throw_NOT_FOUND_ERR\",success);   } } "
"public void logout() throws LoginException {   authDebug.message(\"AuthContext::logout()\");   loginContext.logout();   authDebug.message(\"Called LoginContext::logout()\");   loginStatus=AUTH_COMPLETED; } "
"public void ssoTokenChanged(SSOTokenEvent evt){   try {     int type=evt.getType(); switch (type) { case SSOTokenEvent.SSO_TOKEN_IDLE_TIMEOUT: case SSOTokenEvent.SSO_TOKEN_MAX_TIMEOUT: case SSOTokenEvent.SSO_TOKEN_DESTROY:       SSOToken token=evt.getToken();     clearAllPolicies(token.getTokenID());   break; } }  catch (SSOException ssoe) { AMModelBase.debug.warning(\"PolicyCache.ssoTokenChanged\",ssoe); } } "
"public JKContext createDesktopContext(){   return new JKDesktopContext(); } "
"private void visitImplicitFirstFrame(){   int frameIndex=startFrame(0,descriptor.length() + 1,0);   if ((access & Opcodes.ACC_STATIC) == 0) {     if ((access & ACC_CONSTRUCTOR) == 0) {       frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);     }  else {       frame[frameIndex++]=6;     }   }   int i=1;   loop:   while (true) {     int j=i; switch (descriptor.charAt(i++)) { case 'Z': case 'C': case 'B': case 'S': case 'I':       frame[frameIndex++]=1;     break; case 'F':   frame[frameIndex++]=2; break; case 'J': frame[frameIndex++]=4; break; case 'D': frame[frameIndex++]=3; break; case '[': while (descriptor.charAt(i) == '[') { ++i; } if (descriptor.charAt(i) == 'L') { ++i; while (descriptor.charAt(i) != ';') { ++i; } } frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i)); break; case 'L': while (descriptor.charAt(i) != ';') { ++i; } frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++)); break; default : break loop; } } frame[1]=frameIndex - 3; endFrame(); } "
"public boolean isPropertyValuePattern(String property){   if (property == null)   throw new NullPointerException(\"key property can't be null\");   for (int i=0; i < _ca_array.length; i++) {     Property prop=_ca_array[i];     String key=prop.getKeyString(_canonicalName);     if (key.equals(property))     return (prop instanceof PatternProperty);   }   throw new IllegalArgumentException(\"key property not found\"); } "
"@Override public FSResponse processSAMLRequest(FSSAMLRequest samlRequest){   FSUtils.debug.message(\"FSSSOBrowserArtifactProfileHandler.processSAMLRequest: Called\");   try {     return createSAMLResponse(samlRequest);   }  catch (  Exception e) {     FSUtils.debug.error(\"FSSSOBrowserArtifactProfileHandler.\" + \"processSAMLRequest: Fatal error, \" + \"cannot create status or response: \",e);     return null;   } } "
"public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){   return getService().dynamicQueryCount(dynamicQuery); } "
"private void unregisterWithKeyboardManager(){   Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);   if (registered != null && registered.size() > 0) {     Enumeration<KeyStroke> keys=registered.keys();     while (keys.hasMoreElements()) {       KeyStroke ks=keys.nextElement();       unregisterWithKeyboardManager(ks);     }   }   putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null); } "
"private void initReader() throws IOException {   long syncPos=trackerFile.length() - 256L;   if (syncPos < 0)   syncPos=0L;   reader.sync(syncPos);   while (reader.hasNext()) {     reader.next(metaCache);   } } "
"public void clear(){   response=null; } "
"@Override public void lifecycleEvent(LifecycleEvent event){   try {     context=(Context)event.getLifecycle();   }  catch (  ClassCastException e) {     log.error(sm.getString(\"contextConfig.cce\",event.getLifecycle()),e);     return;   }   if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {     configureStart();   }  else   if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) {     beforeStart();   }  else   if (event.getType().equals(Lifecycle.AFTER_START_EVENT)) {     if (originalDocBase != null) {       context.setDocBase(originalDocBase);     }   }  else   if (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) {     configureStop();   }  else   if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) {     init();   }  else   if (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) {     destroy();   } } "
"public void testCase9(){   byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};   int aSign=1;   byte rBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=BigInteger.ONE;   BigInteger result=aNumber.multiply(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public void stop(){   try {     myServerSocket.close();     myThread.join();   }  catch (  IOException ioe) {   } catch (  InterruptedException e) {   } } "
"public Node item(int index){   ElemTemplateElement node=m_firstChild;   for (int i=0; i < index && node != null; i++) {     node=node.m_nextSibling;   }   return node; } "
"public StatusImpl(Element element) throws XACMLException {   processElement(element);   makeImmutable(); } "
"@Override public synchronized void clear(){   File[] files=mRootDirectory.listFiles();   if (files != null) {     for (    File file : files) {       file.delete();     }   }   mEntries.clear();   mTotalSize=0;   VolleyLog.d(\"Cache cleared.\"); } "
"public boolean isDebugMode(){   return this.debug; } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatingAuthorityType createAuthenticatingAuthorityType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatingAuthorityTypeImpl(); } "
"public AppLauncher env(Map<String,String> env){   if (env == null) {     throw new NullPointerException(\"env\");   }   this.env.putAll(env);   return this; } "
"private void initializeAuthority(String p_uriSpec) throws MalformedURIException {   int index=0;   int start=0;   int end=p_uriSpec.length();   char testChar='\\0';   String userinfo=null;   if (p_uriSpec.indexOf('@',start) != -1) {     while (index < end) {       testChar=p_uriSpec.charAt(index);       if (testChar == '@') {         break;       }       index++;     }     userinfo=p_uriSpec.substring(start,index);     index++;   }   String host=null;   start=index;   while (index < end) {     testChar=p_uriSpec.charAt(index);     if (testChar == ':') {       break;     }     index++;   }   host=p_uriSpec.substring(start,index);   int port=-1;   if (host.length() > 0) {     if (testChar == ':') {       index++;       start=index;       while (index < end) {         index++;       }       String portStr=p_uriSpec.substring(start,index);       if (portStr.length() > 0) {         for (int i=0; i < portStr.length(); i++) {           if (!isDigit(portStr.charAt(i))) {             throw new MalformedURIException(portStr + \" is invalid. Port should only contain digits!\");           }         }         try {           port=Integer.parseInt(portStr);         }  catch (        NumberFormatException nfe) {         }       }     }   }   setHost(host);   setPort(port);   setUserinfo(userinfo); } "
"@Override public JapaneseDate date(int prolepticYear,int month,int dayOfMonth){   return new JapaneseDate(LocalDate.of(prolepticYear,month,dayOfMonth)); } "
"public Object remove(Object name){   return map.remove(name); } "
"public FileChangelogDB(final ReplicationServer replicationServer,String dbDirectoryPath,CryptoSuite cryptoSuite) throws ConfigException {   this.replicationServer=replicationServer;   this.dbDirectory=makeDir(dbDirectoryPath);   this.cryptoSuite=cryptoSuite; } "
"public ServiceConfig createGlobalConfig(Map attrs) throws SMSException, SSOException {   validateSSM();   ServiceSchemaImpl ss=ssm.getSchema(SchemaType.GLOBAL);   if (ss == null) {     String[] args={serviceName};     throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,\"sms-service-does-not-have-global-schema\",args));   }   String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.GLOBAL_CONFIG_NODE,null);   try {     CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,SMSEntry.baseDN);   }  catch (  ServiceAlreadyExistsException slee) {   }   return (getGlobalConfig(null)); } "
"public void recompose(StylesheetRoot root){   root.recomposeVariables(this); } "
"public static Digester newDigester(boolean xmlValidation,boolean xmlNamespaceAware,RuleSet rule,boolean blockExternal){   Digester digester=new Digester();   digester.setNamespaceAware(xmlNamespaceAware);   digester.setValidating(xmlValidation);   digester.setUseContextClassLoader(true);   EntityResolver2 resolver=new LocalResolver(SERVLET_API_PUBLIC_IDS,SERVLET_API_SYSTEM_IDS,blockExternal);   digester.setEntityResolver(resolver);   if (rule != null) {     digester.addRuleSet(rule);   }   return digester; } "
"static double checkDouble(double d) throws JSONException {   if (Double.isInfinite(d) || Double.isNaN(d)) {     throw new JSONException(\"Forbidden numeric value: \" + d);   }   return d; } "
"final boolean isMatched(){   Object x=item;   return (x == this) || ((x == null) == isData); } "
"public static String charsToEntities(String str,boolean xml11){   StringBuilder buf=new StringBuilder(str.length());   for (int i=0; i < str.length(); i++) {     char ch=str.charAt(i);     if (((0x00 <= ch && ch <= 0x1F) || (0x7F <= ch && ch <= 0x9F)) && ch != '\\r' && ch != '\\n' && ch != '\\t') {       if (xml11 && ch != 0x00) {         buf.append(\"&#\").append((int)ch).append(';');       }  else {         buf.append(\"<?illegal-xml-character \").append((int)ch).append(\"?>\");       }       continue;     } switch (ch) { case '<':       buf.append(\"&lt;\");     break; case '>':   buf.append(\"&gt;\"); break; case '&': buf.append(\"&amp;\"); break; default : buf.append(ch); break; } } return buf.toString(); } "
"public RegexFileFilter(String pattern,int flags){   if (pattern == null) {     throw new IllegalArgumentException(\"Pattern is missing\");   }   this.pattern=Pattern.compile(pattern,flags); } "
"public DescriptorPointer(final MetadataDescriptor descriptor){   setDescriptor(descriptor); } "
"public void clearCoRoutine(boolean callDoTerminate){   if (null != m_incrementalSAXSource) {     if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);     m_incrementalSAXSource=null;   } } "
"public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"void addRESTRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL){   addRESTRemotePolicyListener(appToken,serviceName,notificationURL,false); } "
"public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){   openFileChooser(uploadMsg,acceptType); } "
"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {   s.defaultReadObject();   int size=s.readInt();   allocateElements(size);   head=0;   tail=size;   for (int i=0; i < size; i++)   elements[i]=s.readObject(); } "
"public XACMLAuthzDecisionStatement createXACMLAuthzDecisionStatement(){   Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_STATEMENT);   if (obj == null) {     return new XACMLAuthzDecisionStatementImpl();   }  else {     return (XACMLAuthzDecisionStatement)obj;   } } "
"@Override public Promise<ActionResponse,ResourceException> filterAction(Context context,ActionRequest request,RequestHandler next){   final CrestAuditor auditor=newAuditor(context,request);   auditor.auditAccessAttempt();   return auditResponse(next.handleAction(context,request),auditor,request); } "
"public void serviceRevoked(BeanContextServiceRevokedEvent bcssre){ synchronized (BeanContext.globalHierarchyLock) {     if (services.containsKey(bcssre.getServiceClass()))     return;     fireServiceRevoked(bcssre);     Iterator i; synchronized (children) {       i=children.keySet().iterator();     }     while (i.hasNext()) {       Object c=i.next();       if (c instanceof BeanContextServices) {         ((BeanContextServicesListener)c).serviceRevoked(bcssre);       }     }   } } "
"private Object readResolve(){   if (getDescriptor().getFieldNames().length == 0) {     return new OpenMBeanOperationInfoSupport(name,description,arrayCopyCast(getSignature()),returnOpenType,getImpact());   }  else   return this; } "
"public Node insertBefore(Node newChild,Node refChild) throws DOMException {   if (null == refChild) {     appendChild(newChild);     return newChild;   }   if (newChild == refChild) {     return newChild;   }   Node node=m_firstChild;   Node prev=null;   boolean foundit=false;   while (null != node) {     if (newChild == node) {       if (null != prev)       ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)node.getNextSibling();  else       m_firstChild=(ElemTemplateElement)node.getNextSibling();       node=node.getNextSibling();       continue;     }     if (refChild == node) {       if (null != prev) {         ((ElemTemplateElement)prev).m_nextSibling=(ElemTemplateElement)newChild;       }  else {         m_firstChild=(ElemTemplateElement)newChild;       }       ((ElemTemplateElement)newChild).m_nextSibling=(ElemTemplateElement)refChild;       ((ElemTemplateElement)newChild).setParentElem(this);       prev=newChild;       node=node.getNextSibling();       foundit=true;       continue;     }     prev=node;     node=node.getNextSibling();   }   if (!foundit)   throw new DOMException(DOMException.NOT_FOUND_ERR,\"refChild was not found in insertBefore method!\");  else   return newChild; } "
"public static WindowListener add(WindowListener a,WindowListener b){   return (WindowListener)addInternal(a,b); } "
"public SQLFeatureNotSupportedException(Throwable cause){   super(cause); } "
"public void testEmptyBuffer() throws IOException {   FileInputStream fis=new FileInputStream(emptyFile);   FileChannel fc=fis.getChannel();   MappedByteBuffer mmb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());   assertNotNull(\"MappedByteBuffer created from empty file should not be null\",mmb);   int len=mmb.capacity();   assertEquals(\"MappedByteBuffer created from empty file should have 0 capacity\",0,len);   assertFalse(\"MappedByteBuffer from empty file shouldn't be backed by an array \",mmb.hasArray());   try {     byte b=mmb.get();     fail(\"Calling MappedByteBuffer.get() on empty buffer should throw a BufferUnderflowException\");   }  catch (  BufferUnderflowException e) {   }   try {     mmb=fc.map(FileChannel.MapMode.READ_WRITE,0,fc.size());     fail(\"Expected NonWritableChannelException to be thrown\");   }  catch (  NonWritableChannelException e) {   }   try {     mmb=fc.map(FileChannel.MapMode.PRIVATE,0,fc.size());     fail(\"Expected NonWritableChannelException to be thrown\");   }  catch (  NonWritableChannelException e) {   }   fc.close(); } "
"public String createAMTemplate(SSOToken token,String entryDN,int objectType,String serviceName,Map attributes,int priority) throws AMException {   try {     String tokenID=token.getTokenID().toString();     Object[] objs={tokenID,entryDN,new Integer(objectType),serviceName,attributes,new Integer(priority)};     return ((String)client.send(client.encodeMessage(\"createAMTemplate\",objs),sessionCookies.getLBCookie(tokenID),null));   }  catch (  AMRemoteException amrex) {     if (getDebug().messageEnabled()) {       getDebug().message(\"RemoteServicesImpl.createAMTemplate : entryDN=\" + entryDN + \";  AMRemoteException caught exception=\",amrex);     }     throw convertException(amrex);   } catch (  RemoteException rex) {     getDebug().error(\"RemoteServicesImpl.createAMTemplate: caught exception=\",rex);     throw new AMException(AMSDKBundle.getString(\"1000\"),\"1000\");   } catch (  Exception ex) {     if (getDebug().messageEnabled()) {       getDebug().message(\"RemoteServicesImpl.createAMTemplate : entryDN=\" + entryDN + \";  caught exception=\",ex);     }     throw new AMException(AMSDKBundle.getString(\"1000\"),\"1000\");   } } "
"@Override public void beginHandshake() throws SSLException {   if (engine_was_closed) {     throw new SSLException(\"Engine has already been closed.\");   }   if (!peer_mode_was_set) {     throw new IllegalStateException(\"Client/Server mode was not set\");   }   if (!handshake_started) {     handshake_started=true;     if (getUseClientMode()) {       handshakeProtocol=new ClientHandshakeImpl(this);     }  else {       handshakeProtocol=new ServerHandshakeImpl(this);     }     appData=new SSLEngineAppData();     alertProtocol=new AlertProtocol();     recProtIS=new SSLBufferedInput();     recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,recProtIS,appData);   }   handshakeProtocol.start(); } "
"public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {   if (isSigned && signedXMLString != null) {     return signedXMLString;   }   StringBuffer xml=new StringBuffer();   if ((newID != null) && (newEncryptedID != null)) {     throw new SAML2Exception(\"wrongInput\");   }   if (((newID != null) || (newEncryptedID != null)) && (terminate == true)) {     throw new SAML2Exception(\"wrongInput\");   }   String NS=\"\";   String NSP=\"\";   if (declareNS) {     NS=SAML2Constants.PROTOCOL_DECLARE_STR;   }   if (includeNSPrefix) {     NSP=SAML2Constants.PROTOCOL_PREFIX;   }   xml.append(\"<\").append(NSP).append(elementName);   xml.append(NS).append(\" \");   xml.append(getAttributesString());   xml.append(\">\");   xml.append(getElements(includeNSPrefix,declareNS));   if (nameid != null) {     xml.append(nameid.toXMLString(includeNSPrefix,declareNS));   }   if (encryptedID != null) {     xml.append(encryptedID.toXMLString());   }   if (newID != null) {     xml.append(newID.toXMLString(includeNSPrefix,declareNS));   }   if (newEncryptedID != null) {     xml.append(newEncryptedID.toXMLString());   }   if (terminate == true) {     xml.append(\"<\").append(NSP).append(\"Terminate/>\");   }   xml.append(\"</\").append(NSP).append(elementName).append(\">\");   return xml.toString(); } "
"public boolean isStored(){   return isISStored; } "
"public JKNotAllowedOperationException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){   super(message,cause,enableSuppression,writableStackTrace); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeappendchildnodeancestor.class,args); } "
"public boolean equals(Object p){   if (!(p instanceof URLPermission)) {     return false;   }   URLPermission that=(URLPermission)p;   if (!this.scheme.equals(that.scheme)) {     return false;   }   if (!this.getActions().equals(that.getActions())) {     return false;   }   if (!this.authority.equals(that.authority)) {     return false;   }   if (this.path != null) {     return this.path.equals(that.path);   }  else {     return that.path == null;   } } "
"private void doCollection(TagPluginContext ctxt){   ctxt.generateImport(\"java.util.*\");   generateIterators(ctxt);   String itemsV=ctxt.getTemporaryVariableName();   ctxt.generateJavaSource(\"Object \" + itemsV + \"= \");   ctxt.generateAttribute(\"items\");   ctxt.generateJavaSource(\";\");   String indexV=null, beginV=null, endV=null, stepV=null;   if (hasBegin) {     beginV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"int \" + beginV + \" = \");     ctxt.generateAttribute(\"begin\");     ctxt.generateJavaSource(\";\");   }   if (hasEnd) {     indexV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"int \" + indexV + \" = 0;\");     endV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"int \" + endV + \" = \");     ctxt.generateAttribute(\"end\");     ctxt.generateJavaSource(\";\");   }   if (hasStep) {     stepV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"int \" + stepV + \" = \");     ctxt.generateAttribute(\"step\");     ctxt.generateJavaSource(\";\");   }   String iterV=ctxt.getTemporaryVariableName();   ctxt.generateJavaSource(\"Iterator \" + iterV + \" = null;\");   ctxt.generateJavaSource(\"if (\" + itemsV + \" instanceof Object[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((Object[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof boolean[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((boolean[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof byte[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((byte[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof char[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((char[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof short[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((short[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof int[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((int[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof long[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((long[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof float[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((float[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof double[])\");   ctxt.generateJavaSource(iterV + \"=toIterator((double[])\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Collection)\");   ctxt.generateJavaSource(iterV + \"=((Collection)\" + itemsV+ \").iterator();\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Iterator)\");   ctxt.generateJavaSource(iterV + \"=(Iterator)\" + itemsV+ \";\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Enumeration)\");   ctxt.generateJavaSource(iterV + \"=toIterator((Enumeration)\" + itemsV+ \");\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Map)\");   ctxt.generateJavaSource(iterV + \"=((Map)\" + itemsV+ \").entrySet().iterator();\");   ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof String)\");   ctxt.generateJavaSource(iterV + \"=toIterator(new StringTokenizer((String)\" + itemsV+ \", \\\",\\\"));\");   ctxt.generateJavaSource(\"if (\" + iterV + \" != null) {\");   if (hasBegin) {     String tV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"for (int \" + tV + \"=\"+ beginV+ \";\"+ tV+ \">0 && \"+ iterV+ \".hasNext(); \"+ tV+ \"--)\");     ctxt.generateJavaSource(iterV + \".next();\");   }   ctxt.generateJavaSource(\"while (\" + iterV + \".hasNext()){\");   if (hasVar) {     ctxt.generateJavaSource(\"_jspx_page_context.setAttribute(\");     ctxt.generateAttribute(\"var\");     ctxt.generateJavaSource(\", \" + iterV + \".next());\");   }   ctxt.generateBody();   if (hasStep) {     String tV=ctxt.getTemporaryVariableName();     ctxt.generateJavaSource(\"for (int \" + tV + \"=\"+ stepV+ \"-1;\"+ tV+ \">0 && \"+ iterV+ \".hasNext(); \"+ tV+ \"--)\");     ctxt.generateJavaSource(iterV + \".next();\");   }   if (hasEnd) {     if (hasStep) {       ctxt.generateJavaSource(indexV + \"+=\" + stepV+ \";\");     }  else {       ctxt.generateJavaSource(indexV + \"++;\");     }     if (hasBegin) {       ctxt.generateJavaSource(\"if(\" + beginV + \"+\"+ indexV+ \">\"+ endV+ \")\");     }  else {       ctxt.generateJavaSource(\"if(\" + indexV + \">\"+ endV+ \")\");     }     ctxt.generateJavaSource(\"break;\");   }   ctxt.generateJavaSource(\"}\");   ctxt.generateJavaSource(\"}\"); } "
"public JMenuItem add(String s){   return add(new JMenuItem(s)); } "
"@Override public int hashCode(){   int hashCode=0;   hashCode+=scheme.hashCode();   if (host != null) {     hashCode+=toLowerCase(host).hashCode();   }   hashCode+=port;   try {     hashCode+=getBaseDN().hashCode();   }  catch (  Exception e) {     logger.traceException(e);     if (rawBaseDN != null) {       hashCode+=rawBaseDN.hashCode();     }   }   hashCode+=getScope().intValue();   for (  String attr : attributes) {     hashCode+=toLowerCase(attr).hashCode();   }   try {     hashCode+=getFilter().hashCode();   }  catch (  Exception e) {     logger.traceException(e);     if (rawFilter != null) {       hashCode+=rawFilter.hashCode();     }   }   for (  String ext : extensions) {     hashCode+=ext.hashCode();   }   return hashCode; } "
"private void selectRadioButton(ActionEvent event,boolean next){   Object eventSrc=event.getSource();   if (!isValidRadioButtonObj(eventSrc))   return;   ButtonGroupInfo btnGroupInfo=new ButtonGroupInfo((JRadioButton)eventSrc);   btnGroupInfo.selectNewButton(next); } "
"protected ClusterStateService(ForeignSessionHandler foreignSessionHandler,String localServerId,int timeout,long period,Map<String,String> serverMembers,Map<String,String> siteMembers) throws Exception {   if ((localServerId == null) || (localServerId.isEmpty())) {     String message=\"ClusterStateService: Local Server Id argument is null, unable to instantiate Cluster State Service!\";     sessionDebug.error(message);     throw new IllegalArgumentException(message);   } synchronized (this) {     this.foreignSessionHandler=foreignSessionHandler;     this.localServerId=localServerId;     this.timeout=timeout;     this.period=period;     serverSelectionList=new StateInfo[serverMembers.size() + siteMembers.size()];     for (    Map.Entry<String,String> entry : serverMembers.entrySet()) {       populateMap(servers,getServerInfo(entry.getKey(),entry.getValue()));     }     for (    Map.Entry<String,String> entry : siteMembers.entrySet()) {       populateMap(sites,getServerInfo(entry.getKey(),entry.getValue()));     }     Arrays.sort(serverSelectionList);     SystemTimer.getTimer().schedule(this,new Date((currentTimeMillis() / 1000) * 1000));   } } "
"public final void testGetOtherPrimeInfo01(){   RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);   assertTrue(checkOtherPrimeInfo(ks.getOtherPrimeInfo())); } "
"Node(E item){   UNSAFE.putObject(this,itemOffset,item); } "
"protected void BuildSubrUsed(int Font,int FD,int SubrOffset,int[] SubrsOffsets,Map<Integer,int[]> hSubr,List<Integer> lSubr){   int LBias=CalcBias(SubrOffset,Font);   for (int i=0; i < glyphsInList.size(); i++) {     int glyph=(int)glyphsInList.get(i);     int Start=fonts[Font].charstringsOffsets[glyph];     int End=fonts[Font].charstringsOffsets[glyph + 1];     if (FD >= 0) {       EmptyStack();       NumOfHints=0;       int GlyphFD=fonts[Font].FDSelect[glyph];       if (GlyphFD == FD)       ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);     }  else     ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);   }   for (int i=0; i < lSubr.size(); i++) {     int Subr=(int)lSubr.get(i);     if (Subr < SubrsOffsets.length - 1 && Subr >= 0) {       int Start=SubrsOffsets[Subr];       int End=SubrsOffsets[Subr + 1];       ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);     }   } } "
"@Override public void onTokenRefresh(){   Intent intent=new Intent(this,RegistrationIntentService.class);   intent.setAction(RegistrationIntentService.ACTION_REGISTER);   startService(intent); } "
"private boolean canProcessEntry(RDN rdn){   return !rdn.isMultiValued() && rdn.getFirstAVA().getAttributeType().equals(attrAlias); } "
"public void characters(final char chars[],final int start,final int length) throws org.xml.sax.SAXException {   if (length == 0 || (m_inEntityRef && !m_expandDTDEntities))   return;   m_docIsEmpty=false;   if (m_elemContext.m_startTagOpen) {     closeStartTag();     m_elemContext.m_startTagOpen=false;   }  else   if (m_needToCallStartDocument) {     startDocumentInternal();   }   if (m_cdataStartCalled || m_elemContext.m_isCdataSection) {     cdata(chars,start,length);     return;   }   if (m_cdataTagOpen)   closeCDATA();   if (m_disableOutputEscapingStates.peekOrFalse() || (!m_escaping)) {     charactersRaw(chars,start,length);     if (m_tracer != null)     super.fireCharEvent(chars,start,length);     return;   }   if (m_elemContext.m_startTagOpen) {     closeStartTag();     m_elemContext.m_startTagOpen=false;   }   try {     int i;     int startClean;     final int end=start + length;     int lastDirtyCharProcessed=start - 1;     final Writer writer=m_writer;     boolean isAllWhitespace=true;     i=start;     while (i < end && isAllWhitespace) {       char ch1=chars[i];       if (m_charInfo.shouldMapTextChar(ch1)) {         writeOutCleanChars(chars,i,lastDirtyCharProcessed);         String outputStringForChar=m_charInfo.getOutputStringForChar(ch1);         writer.write(outputStringForChar);         isAllWhitespace=false;         lastDirtyCharProcessed=i;         i++;       }  else { switch (ch1) { case CharInfo.S_SPACE:           i++;         break; case CharInfo.S_LINEFEED:       lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer);     i++;   break; case CharInfo.S_CARRIAGERETURN: writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#13;\"); lastDirtyCharProcessed=i; i++; break; case CharInfo.S_HORIZONAL_TAB: i++; break; default : isAllWhitespace=false; break; } } } if (i < end || !isAllWhitespace) m_ispreserve=true; for (; i < end; i++) { char ch=chars[i]; if (m_charInfo.shouldMapTextChar(ch)) { writeOutCleanChars(chars,i,lastDirtyCharProcessed); String outputStringForChar=m_charInfo.getOutputStringForChar(ch); writer.write(outputStringForChar); lastDirtyCharProcessed=i; }  else { if (ch <= 0x1F) { switch (ch) { case CharInfo.S_HORIZONAL_TAB: break; case CharInfo.S_LINEFEED: lastDirtyCharProcessed=processLineFeed(chars,i,lastDirtyCharProcessed,writer); break; case CharInfo.S_CARRIAGERETURN: writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#13;\"); lastDirtyCharProcessed=i; break; default : writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#\"); writer.write(Integer.toString(ch)); writer.write(';'); lastDirtyCharProcessed=i; break; } }  else if (ch < 0x7F) { }  else if (ch <= 0x9F) { writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#\"); writer.write(Integer.toString(ch)); writer.write(';'); lastDirtyCharProcessed=i; }  else if (ch == CharInfo.S_LINE_SEPARATOR) { writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#8232;\"); lastDirtyCharProcessed=i; }  else if (m_encodingInfo.isInEncoding(ch)) { }  else { writeOutCleanChars(chars,i,lastDirtyCharProcessed); writer.write(\"&#\"); writer.write(Integer.toString(ch)); writer.write(';'); lastDirtyCharProcessed=i; } } } startClean=lastDirtyCharProcessed + 1; if (i > startClean) { int lengthClean=i - startClean; m_writer.write(chars,startClean,lengthClean); } m_isprevtext=true; }  catch (IOException e) { throw new SAXException(e); } if (m_tracer != null) super.fireCharEvent(chars,start,length); } "
"final boolean isUnmatchedRequest(){   return !isData && item == null; } "
"public void sendEvent(InternalSession session,SessionEventType eventType){   sessionDebug.message(\"Running sendEvent, type = \" + eventType.getCode());   if (NotificationsConfig.INSTANCE.isAgentsEnabled()) {     publishSessionNotification(session.getSessionID(),eventType);     for (    SessionID sessionId : session.getRestrictedTokens()) {       publishSessionNotification(sessionId,eventType);     }   }   try {     SessionNotificationSenderTask sns=new SessionNotificationSenderTask(session,eventType);     if (sns.sendToLocal()) {       threadPool.run(sns);     }   }  catch (  ThreadPoolException e) {     sessionDebug.error(\"Sending Notification Error: \",e);   } } "
"public boolean isVisible(){   return !ServiceManager.isRealmEnabled() && privateInstance.visible; } "
"public StatusCode createStatusCode() throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_CODE);   if (obj == null) {     return new StatusCodeImpl();   }  else {     return (StatusCode)obj;   } } "
"public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(){   Locale x=new Locale(\"xx\",\"CV\",\"ZZ\");   assertTrue(\"Failed to create Locale\",x.getLanguage().equals(\"xx\") && (x.getCountry().equals(\"CV\") && x.getVariant().equals(\"ZZ\")));   try {     new Locale(null,\"CV\",\"ZZ\");     fail(\"expected NullPointerException with 1st parameter == null\");   }  catch (  NullPointerException e) {   }   try {     new Locale(\"xx\",null,\"ZZ\");     fail(\"expected NullPointerException with 2nd parameter == null\");   }  catch (  NullPointerException e) {   }   try {     new Locale(\"xx\",\"CV\",null);     fail(\"expected NullPointerException with 3rd parameter == null\");   }  catch (  NullPointerException e) {   } } "
"public void show(@IdRes final int itemId){   map.add(itemId);   navigation.invalidateBadge(itemId); } "
"public final void printUnprintable(String value){   if (value == null)   return;   byte[] byteVal=value.getBytes();   int letti=byteVal.length;   StringBuffer risul=new StringBuffer(letti * 2);   for (int index=0; index < letti; index++) {     byte ch=byteVal[index];     if (ch < ' ' || ch > 'z')     risul.append(\"(\" + ch + \")\");     risul.append((char)ch);   }   print(risul.toString()); } "
"public TldScanner(ServletContext context,boolean namespaceAware,boolean validation,boolean blockExternal){   this.context=context;   this.tldParser=new TldParser(namespaceAware,validation,blockExternal); } "
"boolean returnSearchReferences(ReadableTransaction txn,SearchOperation searchOp) throws DirectoryException {   if (containsReferrals == ConditionResult.UNDEFINED) {     containsReferrals=containsReferrals(txn);   }   if (containsReferrals == ConditionResult.FALSE) {     return true;   }   ByteString baseDN=toKey(searchOp.getBaseDN());   ByteStringBuilder beforeFirstChild=beforeFirstChildOf(baseDN);   ByteStringBuilder afterLastChild=afterLastChildOf(baseDN);   try (Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){     boolean success=cursor.positionToKeyOrNext(beforeFirstChild);     while (success && cursor.getKey().compareTo(afterLastChild) < 0) {       if (searchOp.getScope() == SINGLE_LEVEL && DnKeyFormat.findDNKeyParent(cursor.getKey()) != baseDN.length()) {         success=cursor.next();         continue;       }       final Map.Entry<DN,List<String>> dnAndUris=decode(cursor.getValue());       final DN dn=dnAndUris.getKey();       final Collection<String> labeledURIs=dnAndUris.getValue();       SearchResultReference reference=toSearchResultReference(dn,labeledURIs,searchOp.getScope());       if (!searchOp.returnReference(dn,reference)) {         return false;       }       success=cursor.next();     }   }  catch (  StorageRuntimeException e) {     logger.traceException(e);   }   return true; } "
"public void runTest() throws Throwable {   Document doc;   Document docImported;   Element element;   Attr attr;   Node importedAttr;   String nodeName;   int nodeType;   String nodeValue;   NodeList addresses;   Node attrsParent;   doc=(Document)load(\"staffNS\",true);   docImported=(Document)load(\"staff\",true);   addresses=doc.getElementsByTagNameNS(\"http://www.nist.gov\",\"address\");   element=(Element)addresses.item(1);   attr=element.getAttributeNodeNS(\"http://www.nist.gov\",\"zone\");   importedAttr=docImported.importNode(attr,false);   nodeName=importedAttr.getNodeName();   nodeType=(int)importedAttr.getNodeType();   nodeValue=importedAttr.getNodeValue();   attrsParent=importedAttr.getParentNode();   assertNull(\"documentimportnode02_parentNull\",attrsParent);   assertEquals(\"documentimportnode02_nodeName\",\"emp:zone\",nodeName);   assertEquals(\"documentimportnode02_nodeType\",2,nodeType);   assertEquals(\"documentimportnode02_nodeValue\",\"CANADA\",nodeValue); } "
"private void DrawViewsAtList(){   for (int i=0; i < listViews.size(); ++i) {     DetailView dvView=listViews.get(i);     View vChild=getChildAt(i);     int iL=dvView.getPoint().x * mUnitWidth;     int iT=dvView.getPoint().y * mUnitHeight;     int iR=iL + dvView.getWidthNum() * mUnitWidth;     int iB=iT + dvView.getHeightNum() * mUnitHeight;     vChild.setLeft(iL + mViewPadding);     vChild.setTop(iT + mViewPadding);     vChild.setRight(iR - mViewPadding);     vChild.setBottom(iB - mViewPadding);   } } "
"public static Cookie newCookie(String name,String value,int maxAge){   return newCookie(name,value,maxAge,null,null); } "
"public MemoryRuleSet(String prefix){   super();   this.namespaceURI=null;   this.prefix=prefix; } "
"public boolean isSecureProcessing(){   return m_isSecureProcessing; } "
"public ResponseInfo(){ } "
"public void sendTCPMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {   if (message == null || receiverAddress == null) {     logger.logError(\"receiverAddress = \" + receiverAddress);     throw new IllegalArgumentException(\"Null argument\");   }   lastActivityTimeStamp=System.currentTimeMillis();   if (peerPortAdvertisedInHeaders <= 0) {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"receiver port = \" + receiverPort + \" for this channel \"+ this+ \" key \"+ key);     }     if (receiverPort <= 0) {       this.peerPortAdvertisedInHeaders=5060;     }  else {       this.peerPortAdvertisedInHeaders=receiverPort;     }     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"2.Storing peerPortAdvertisedInHeaders = \" + peerPortAdvertisedInHeaders + \" for this channel \"+ this+ \" key \"+ key);     }   }   NIOHandler nioHandler=((NioTcpMessageProcessor)messageProcessor).nioHandler;   SocketChannel sock=nioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,\"TCP\",message,retry,this);   if (sock != socketChannel && sock != null) {     if (socketChannel != null) {       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"[2] Old socket different than new socket on channel \" + key + socketChannel+ \" \"+ sock);         logger.logStackTrace();         logger.logWarning(\"Old socket local ip address \" + socketChannel.socket().getLocalSocketAddress());         logger.logWarning(\"Old socket remote ip address \" + socketChannel.socket().getRemoteSocketAddress());         logger.logWarning(\"New socket local ip address \" + sock.socket().getLocalSocketAddress());         logger.logWarning(\"New socket remote ip address \" + sock.socket().getRemoteSocketAddress());       }       close(false,false);       socketChannel=sock;       putMessageChannel(socketChannel,this);       onNewSocket(message);     }     if (socketChannel != null) {       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"There was no exception for the retry mechanism so we keep going \" + key);       }     }     socketChannel=sock;   } } "
"public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){   return getService().dynamicQuery(dynamicQuery); } "
"@BeforeClass public static void initClass(){   scenario=Scenarios.s3_linear_with_snapshots_light_tags();   if (Misc.isDebugMode()) {     System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());   } } "
"public void removeCOSTemplate(String name) throws UMSException {   Guid tGuid=new Guid(COSTemplate.DEFAULT_NAMING_ATTR + \"=\" + name+ \",\"+ this.getGuid());   this.removeChild(tGuid); } "
"public int hashCode(){   return rp == null ? m : m + rp.hashCode(); } "
"private static boolean hasAttrMask(int mask,int rightsAttr){   return (mask & rightsAttr) != 0; } "
"private boolean combine_at_start(){   PlaPoint end_corner=corner_first();   BrdTracepCombineFound other=search_end(end_corner,false);   if (other.other_trace == null)   return false;   r_board.undo_items.save_for_undo(this);   Polyline other_poly=other.other_trace.polyline;   if (other.reverse_order)   other_poly=other_poly.reverse();   boolean skip_line=other_poly.plaline_last_prev().is_equal_or_opposite(polyline.plaline_first_next());   int my_copy_count=other_poly.plaline_len(-1);   if (skip_line)   my_copy_count--;   PlaLineIntAlist new_lines=new PlaLineIntAlist(polyline.plaline_len() + other_poly.plaline_len());   other_poly.alist_append_to(new_lines,0,my_copy_count);   polyline.alist_append_to(new_lines,1);   Polyline joined_polyline=new Polyline(new_lines);   if (joined_polyline.plaline_len() != new_lines.size()) {     r_board.search_tree_manager.remove(this);     polyline=joined_polyline;     clear_derived_data();     r_board.search_tree_manager.insert(this);   }  else {     int to_no=other_poly.plaline_len();     if (skip_line)     --to_no;     r_board.search_tree_manager.merge_entries_in_front(other.other_trace,this,joined_polyline,other_poly.plaline_len(-3),to_no);     other.other_trace.clear_search_tree_entries();     polyline=joined_polyline;   }   if (!polyline.is_valid()) {     r_board.remove_item(this);   }   r_board.remove_item(other.other_trace);   r_board.changed_area_join(end_corner.to_float(),get_layer());   return true; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String childData;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"acronym\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   child.deleteData(0,16);   childData=child.getData();   assertEquals(\"data\",\"Dallas, Texas 98551\",childData); } "
"@Override public String toString(){   return new String(buf,0,count); } "
"private ConstraintResult verifyActions(Set<String> actions,ResourceType resourceType){   Set<String> acceptableActions=resourceType.getActions().keySet();   for (  String action : actions) {     if (!acceptableActions.contains(action)) {       return ConstraintResults.newFailure(\"actionValues\",action);     }   }   return ConstraintResults.newSuccess(); } "
"private static BindResponseProtocolOp readBindResponse(ASN1Reader reader) throws LDAPException {   try {     reader.readStartSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   int resultCode;   try {     resultCode=(int)reader.readInteger();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   DN matchedDN;   try {     String dnString=reader.readOctetStringAsString();     if (dnString.length() == 0) {       matchedDN=null;     }  else {       matchedDN=DN.valueOf(dnString);     }   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   LocalizableMessage errorMessage;   try {     errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());     if (errorMessage.length() == 0) {       errorMessage=null;     }   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   ArrayList<String> referralURLs=null;   ByteString serverSASLCredentials=null;   try {     if (reader.hasNextElement() && reader.peekType() == TYPE_REFERRAL_SEQUENCE) {       try {         reader.readStartSequence();         referralURLs=new ArrayList<>();         do {           referralURLs.add(reader.readOctetStringAsString());         }  while (reader.hasNextElement());         reader.readEndSequence();       }  catch (      Exception e) {         logger.traceException(e);         LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);         throw new LDAPException(PROTOCOL_ERROR,message,e);       }     }     if (reader.hasNextElement() && reader.peekType() == TYPE_SERVER_SASL_CREDENTIALS) {       try {         serverSASLCredentials=reader.readOctetString();       }  catch (      Exception e) {         logger.traceException(e);         LocalizableMessage message=ERR_LDAP_BIND_RESULT_DECODE_SERVER_SASL_CREDENTIALS.get(e);         throw new LDAPException(PROTOCOL_ERROR,message,e);       }     }   }  catch (  IOException e) {     logger.traceException(e);   }   try {     reader.readEndSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   return new BindResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs,serverSASLCredentials); } "
"protected int countAncestors(ElemTemplateElement elem){   int count=0;   while (null != elem) {     count++;     elem=elem.getParentElem();   }   return count; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrgetvalue2.class,args); } "
"public static HelpSubCommandHandler create(SubCommandArgumentParser parser) throws ArgumentException {   return new HelpSubCommandHandler(parser); } "
"public void mouse_moved(Point p_point){   if (board_is_read_only)   return;   if (interactive_state != null && gdi_context != null) {     current_mouse_position=gdi_context.coordinate_transform.screen_to_board(p_point);     StateInteractive return_state=interactive_state.mouse_moved();     if (return_state != interactive_state) {       set_interactive_state(return_state);       repaint();     }   } } "
"public static double swapDouble(double value){   return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value))); } "
"public boolean isSipURI(){   return false; } "
"private KeyListener createKeyListener(){   if (keyListener == null) {     keyListener=new KeyHandler();   }   return keyListener; } "
"public void visitEnd(){   if (cv != null) {     cv.visitEnd();   } } "
"public ServerManagedObjectAddListenerAdaptor(ConfigurationAddListener<T> listener){   this.listener=listener; } "
"protected void handleStartTag(TagElement tag){ } "
"public boolean clearApplicationLoginInfo(ModelApplication modelApp){   if (isClosed) {     throw new IllegalStateException(TAG + \" is closed.\");   }   return registeredAppDbAdapter.update(modelApp.getDatabaseId(),null,null,null,null,\"\",\"\"); } "
"public void runTest() throws Throwable {   Document doc;   Element rootNode;   Node newChild;   NodeList elementList;   Node oldChild;   Node replacedChild;   doc=(Document)load(\"staff\",true);   rootNode=doc.getDocumentElement();   newChild=doc.createAttribute(\"newAttribute\");   elementList=doc.getElementsByTagName(\"employee\");   oldChild=elementList.item(1); {     boolean success=false;     try {       replacedChild=rootNode.replaceChild(newChild,oldChild);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);     }     assertTrue(\"throw_HIERARCHY_REQUEST_ERR\",success);   } } "
"public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException { } "
"public INITIALIZE(String s){   this(s,0,CompletionStatus.COMPLETED_NO); } "
"public static Long valueOf(String string,int radix) throws NumberFormatException {   return valueOf(parseLong(string,radix)); } "
"public Node elementAt(int i){   if (null == m_map)   return null;   return m_map[i]; } "
"public AMSearchResults searchUsers(AMSearchControl searchControl,String avfilter) throws AMException, SSOException {   return searchObjects(getSearchFilter(AMObject.USER),searchControl,avfilter); } "
"private TransformedIterable(final Iterable<M> iterable,final Function<? super M,? extends N,E> function){   this.iterable=iterable;   this.function=function; } "
"public void flush() throws IOException {   ensureOpen();   if (!inf.finished()) {     try {       while (!inf.finished() && !inf.needsInput()) {         int n;         n=inf.inflate(buf,0,buf.length);         if (n < 1) {           break;         }         out.write(buf,0,n);       }       super.flush();     }  catch (    DataFormatException ex) {       String msg=ex.getMessage();       if (msg == null) {         msg=\"Invalid ZLIB data format\";       }       throw new ZipException(msg);     }   } } "
"public boolean equals(Object obj){   return obj != null && obj instanceof DocFlavor && getStringValue().equals(((DocFlavor)obj).getStringValue()); } "
"@Override protected void initInternal() throws LifecycleException {   super.initInternal();   onameStringCache=register(new StringCache(),\"type=StringCache\");   MBeanFactory factory=new MBeanFactory();   factory.setContainer(this);   onameMBeanFactory=register(factory,\"type=MBeanFactory\");   globalNamingResources.init();   if (getCatalina() != null) {     ClassLoader cl=getCatalina().getParentClassLoader();     while (cl != null && cl != ClassLoader.getSystemClassLoader()) {       if (cl instanceof URLClassLoader) {         URL[] urls=((URLClassLoader)cl).getURLs();         for (        URL url : urls) {           if (url.getProtocol().equals(\"file\")) {             try {               File f=new File(url.toURI());               if (f.isFile() && f.getName().endsWith(\".jar\")) {                 ExtensionValidator.addSystemResource(f);               }             }  catch (            URISyntaxException e) {             } catch (            IOException e) {             }           }         }       }       cl=cl.getParent();     }   }   for (int i=0; i < services.length; i++) {     services[i].init();   } } "
"public GetSessionPropertiesActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){   super(sessionPropertyWhitelist,sessionResourceUtil); } "
"public ThreadPoolConfig(int core,int max,int queueSize,int keepAliveSeconds){   if (core < 1) {     this.coreThreads=DEFAULT_CORE_THREADS;     logger.warning(\"System configured to used invalid Radius Thread Pool Core size of \" + core + \". Using the value of \"+ DEFAULT_CORE_THREADS+ \" instead.\");   }  else {     this.coreThreads=core;   }   if (max < this.coreThreads) {     this.maxThreads=coreThreads;     logger.warning(\"System configured to use Radius Server 'Thread Pool Max Size' that is less than 'Thread \" + \"Pool Core Size. Using size equal to Core Size - i.e. a static pool of size \" + coreThreads);   }  else {     this.maxThreads=max;   }   if (queueSize < 1 || queueSize > 1000) {     this.queueSize=DEFAULT_QUEUE_SIZE;     logger.warning(\"System configured to use an invalid Radius Server 'Thread Pool Queue Size' value of '\" + queueSize + \"'. Using the default value of '\"+ DEFAULT_QUEUE_SIZE+ \"' instead.\");   }  else {     this.queueSize=queueSize;   }   if (keepAliveSeconds < 1 || keepAliveSeconds > 3600) {     this.keepAliveSeconds=DEFAULT_KEEP_ALIVE_SECONDS;     logger.warning(\"System configured to use an invalid Radius Server 'Thread Pool Keep-Alive Seconds' value of\" + \" '\" + keepAliveSeconds + \"'. Using the default value of '\"+ DEFAULT_KEEP_ALIVE_SECONDS+ \"' instead.\");   }  else {     this.keepAliveSeconds=keepAliveSeconds;   } } "
"private static Optional<Investment> invest(final ZonkyApi api,final int loanId,final int amount,final int balance){   final Loan l=api.getLoan(loanId);   if (amount < InvestmentStrategy.MINIMAL_INVESTMENT_ALLOWED) {     Investor.LOGGER.info(\"Not investing into loan '{}', since investment ({} CZK) less than bare minimum.\",l,amount);     return Optional.empty();   }  else   if (amount > balance) {     Investor.LOGGER.info(\"Not investing into loan '{}', {} CZK to invest is more than {} CZK balance.\",l,amount,balance);     return Optional.empty();   }  else   if (amount > l.getRemainingInvestment()) {     Investor.LOGGER.info(\"Not investing into loan '{}', {} CZK to invest is more than {} CZK loan remaining.\",l,amount,l.getRemainingInvestment());     return Optional.empty();   }   final Investment investment=new Investment(l,amount);   if (api instanceof InvestingZonkyApi) {     ((InvestingZonkyApi)api).invest(investment);     Investor.LOGGER.info(\"Invested {} CZK into loan {}.\",investment.getAmount(),investment.getLoanId());   }  else {     Investor.LOGGER.info(\"Dry run. Otherwise would have invested {} CZK into loan {}.\",investment.getAmount(),investment.getLoanId());   }   return Optional.of(investment); } "
"public QRCallbackBuilder withUriPort(String port){   this.port=port;   return this; } "
"public Reference(String className){   this.className=className;   addrs=new Vector<>(); } "
"boolean isNormalized(){   for (  AttributeValue attrValue : values) {     if (attrValue.isNormalized()) {       return true;     }   }   return false; } "
"public AffineTransform(AffineTransform Tx){   this.m00=Tx.m00;   this.m10=Tx.m10;   this.m01=Tx.m01;   this.m11=Tx.m11;   this.m02=Tx.m02;   this.m12=Tx.m12;   this.state=Tx.state;   this.type=Tx.type; } "
"private void copyChunk(final GUID guid,final InputStream source,final OutputStream destination) throws IOException {   final long chunkSize=Utils.readUINT64(source);   destination.write(guid.getBytes());   Utils.writeUINT64(chunkSize,destination);   Utils.copy(source,destination,chunkSize - 24); } "
"private static String parseTagValue(String parseString,String openTag,String closeTag){   int beg, end;   beg=parseString.indexOf(openTag);   end=parseString.indexOf(closeTag);   if (beg < 0 || end < 0) {     return null;   }   if (beg > end) {     return null;   }   if (beg + openTag.length() == end) {     return \"\";   }   return parseString.substring(beg + openTag.length(),end); } "
"@Override public ConnectionChangeRecordWriter writeChangeRecord(final ModifyRequest change) throws LdapException {   Reject.ifNull(change);   connection.modify(change);   return this; } "
"public void endDocument() throws SAXException { } "
"private void recreateTable(int currentVersion){   try {     connetion.initTransaction();     if (currentVersion == 0) {       createNewTables();     }     connetion.commitTransaction();   }  catch (  SQLException e) {     BotLogger.error(LOGTAG,e);   } } "
"public void testGetVersion(){   if (this.cert == null) {     return;   }   assertEquals(\"The version is not correct.\",tbt_cert.getVersion(),2); } "
"public static String postRequest(URL url,String postData,String encoding,String contentType,int readTimeout,int socketTimeout){   return postRequest(url,postData,encoding,contentType,false,readTimeout,socketTimeout); } "
"private void checkStartWarningLabel(){   boolean visible=!getStartCheckBox().isSelected();   if (visible) {     final UserData userData=getApplication().getUserData();     visible=userData.getReplicationOptions().getType() != DataReplicationOptions.Type.STANDALONE;   }   getWarningLabel().setVisible(visible); } "
"public SSOToken createSSOToken(String tokenId,String clientIP) throws UnsupportedOperationException, SSOException {   for (  SSOProviderPlugin ssoProvider : getSsoProviderPlugins()) {     if (ssoProvider.isApplicable(tokenId)) {       return ssoProvider.createSSOToken(tokenId,clientIP);     }   }   if (dProProvider != null)   return (dProProvider.createSSOToken(tokenId,clientIP));  else   return (grappaProvider.createSSOToken(tokenId,clientIP)); } "
"private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {   if (nanosTimeout <= 0L)   return false;   final long deadline=System.nanoTime() + nanosTimeout;   final Node node=addWaiter(Node.SHARED);   boolean failed=true;   try {     for (; ; ) {       final Node p=node.predecessor();       if (p == head) {         int r=tryAcquireShared(arg);         if (r >= 0) {           setHeadAndPropagate(node,r);           p.next=null;           failed=false;           return true;         }       }       nanosTimeout=deadline - System.nanoTime();       if (nanosTimeout <= 0L)       return false;       if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);       if (Thread.interrupted())       throw new InterruptedException();     }   }   finally {     if (failed)     cancelAcquire(node);   } } "
"public boolean hasName(final String name){   for (  final String n : names) {     if (n.equalsIgnoreCase(name)) {       return true;     }   }   return false; } "
"public void testScaleDefault(){   String a=\"1231212478987482988429808779810457634781384756794987\";   int cScale=0;   BigDecimal aNumber=new BigDecimal(new BigInteger(a));   assertTrue(\"incorrect scale\",aNumber.scale() == cScale); } "
"AbstractCollationMatchingRuleImpl(Locale locale){   this.locale=locale;   this.collator=createCollator(locale);   this.indexName=getPrefixIndexName() + \".\" + INDEX_ID_SHARED;   this.indexer=new DefaultIndexer(indexName); } "
"protected void RelativePathPattern() throws javax.xml.transform.TransformerException {   boolean trailingSlashConsumed=StepPattern(false);   while (tokenIs('/')) {     nextToken();     trailingSlashConsumed=StepPattern(!trailingSlashConsumed);   } } "
"public MessageFactory createMessageFactory() throws PeerUnavailableException {   if (messageFactory == null) {     messageFactory=(MessageFactory)createSipFactory(\"javax.sip.message.MessageFactoryImpl\");   }   return messageFactory; } "
"public void updateCtm(Matrix newCtm){   ctm=newCtm.multiply(ctm); } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {   return toXMLString(includeNS,declareNS,false); } "
"@Override public boolean isStretchHeight(){   return true; } "
"public byte[] fromUTF8(String contents) throws UnsupportedEncodingException {   Reject.ifNull(contents);   return contents.getBytes(ENCODING); } "
"public String toXMLString() throws FSMsgException {   String xml=this.toXMLString(true,false);   return xml; } "
"public void runTest() throws Throwable {   Document doc;   Node newNode;   String newValue;   NamedNodeMap nodeMap;   DocumentType docType;   doc=(Document)load(\"staff\",true);   docType=doc.getDoctype();   assertNotNull(\"docTypeNotNull\",docType);   nodeMap=docType.getEntities();   assertNotNull(\"entitiesNotNull\",nodeMap);   newNode=nodeMap.getNamedItem(\"ent1\");   assertNotNull(\"entityNotNull\",newNode);   newValue=newNode.getNodeValue();   assertNull(\"initiallyNull\",newValue);   newNode.setNodeValue(\"This should have no effect\");   newValue=newNode.getNodeValue();   assertNull(\"nullAfterAttemptedChange\",newValue); } "
"public NewEncryptedID encrypt(Key recipientPublicKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID) throws SAML2Exception {   Element el=EncManager.getEncInstance().encrypt(toXMLString(true,true),recipientPublicKey,dataEncAlgorithm,dataEncStrength,recipientEntityID,\"NewEncryptedID\");   return ProtocolFactory.getInstance().createNewEncryptedID(el); } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {   return toXMLString(includeNS,declareNS,false); } "
"public static MediaSizeName findMedia(float x,float y,int units){   MediaSize match=MediaSize.ISO.A4;   if (x <= 0.0f || y <= 0.0f || units < 1) {     throw new IllegalArgumentException(\"args must be +ve values\");   }   double ls=x * x + y * y;   double tmp_ls;   float[] dim;   float diffx=x;   float diffy=y;   for (int i=0; i < sizeVector.size(); i++) {     MediaSize mediaSize=(MediaSize)sizeVector.elementAt(i);     dim=mediaSize.getSize(units);     if (x == dim[0] && y == dim[1]) {       match=mediaSize;       break;     }  else {       diffx=x - dim[0];       diffy=y - dim[1];       tmp_ls=diffx * diffx + diffy * diffy;       if (tmp_ls < ls) {         ls=tmp_ls;         match=mediaSize;       }     }   }   return match.getMediaSizeName(); } "
"@Get public Response handle(@Contextual Context context,@Contextual Request request){   if (!ApiDescriptorFilter.State.INSTANCE.isEnabled()) {     return new Response(Status.NOT_IMPLEMENTED);   }   Response response=new Response(Status.OK);   File input;   try {     if (\"asciidoc\".equals(request.getForm().getFirst(\"format\"))) {       response.getHeaders().add(TEXT_CONTENT_TYPE);       input=getAsciiDoc(context);     }  else {       response.getHeaders().add(HTML_CONTENT_TYPE);       input=getDocs(context);     }   }  catch (  IOException|RuntimeException e) {     debug.warning(\"ApiDocsService#handle :: Could not generate API docs\",e);     return new Response(Status.INTERNAL_SERVER_ERROR).setCause(e);   }   try {     response.setEntity(new FileBranchingStream(input));   }  catch (  IOException e) {     debug.error(\"ApiDocsService#handle :: Could not read API docs\",e);     return new Response(Status.INTERNAL_SERVER_ERROR).setCause(e);   }   return response; } "
"protected void sendErrorUsingBestMatchContentType(Object exchange,String errorMessage,Integer statusCode) throws Throwable {   if (statusCode == null) {     statusCode=HttpStatus.SC_INTERNAL_SERVER_ERROR;   }   ContentTypeDefaults type=getResponseContentTypeToUse(exchange);   if (type == ContentTypeDefaults.JSON) {     errorMessage=getInternalErrorJsonContent(errorMessage);     getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.JSON.getMainVariationWithUtf8Charset()));   }  else   if (type == ContentTypeDefaults.XML) {     errorMessage=getInternalErrorXmlContent(errorMessage);     getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.XML.getMainVariationWithUtf8Charset()));   }  else   if (type == ContentTypeDefaults.HTML) {     errorMessage=getInternalErrorHtmlContent(errorMessage);     getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.HTML.getMainVariationWithUtf8Charset()));   }  else   if (type == ContentTypeDefaults.TEXT) {     errorMessage=getInternalErrorTextContent(errorMessage);     getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_TYPE,Arrays.asList(ContentTypeDefaults.TEXT.getMainVariationWithUtf8Charset()));   }  else {     throw new RuntimeException(\"Not implemented : \" + type);   }   byte[] errorMessageBytes=errorMessage.getBytes(getDefaultExceptionHandlingCharset());   getServer().setResponseStatusCode(exchange,statusCode);   getServer().setResponseHeader(exchange,HttpHeaders.CONTENT_LENGTH,Arrays.asList(\"\" + errorMessageBytes.length));   getServer().flushBytes(exchange,errorMessageBytes,true); } "
"public static EnumEvalResult evaluate(AciEvalContext evalCtx,Aci aci){   return aci.evaluate(evalCtx); } "
"private static long[] divRemNegativeLong(long n,long d){   assert n < 0 : \"Non-negative numerator \" + n;   assert d != 1 : \"Unity denominator\";   long q=(n >>> 1) / (d >>> 1);   long r=n - q * d;   while (r < 0) {     r+=d;     q--;   }   while (r >= d) {     r-=d;     q++;   }   return new long[]{r,q}; } "
"protected UserException(){   super(); } "
"private void valueToFilterString(StringBuilder buffer,ByteString value){   if (value == null) {     return;   }   buffer.ensureCapacity(buffer.length() + value.length());   byte b;   for (int i=0; i < value.length(); i++) {     b=value.byteAt(i);     if (((b & 0x7F) != b) || (b <= 0x1F) || (b == 0x28)|| (b == 0x29)|| (b == 0x2A)|| (b == 0x5C)|| (b == 0x7F)) {       buffer.append(\"\\\\\");       buffer.append(byteToHex(b));     }  else {       buffer.append((char)b);     }   } } "
"@Override public void disconnect(){   boolean connect=isConnected();   closeSocket();   if (connect) {     if (log.isDebugEnabled())     log.debug(sm.getString(\"bioSender.disconnect\",getAddress().getHostAddress(),Integer.valueOf(getPort()),Long.valueOf(0)));   } } "
"public void skipZeroSeparator() throws DataFormatException {   if (bytes.peek() != (byte)0) {     throw new DataFormatException(\"Expected a zero separator at position \" + bytes.position() + \" but found byte \"+ bytes.peek());   }   bytes.skip(1); } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) static final int cpr(Comparator c,Object x,Object y){   return (c != null) ? c.compare(x,y) : ((Comparable)x).compareTo(y); } "
"private static void updateParseCache(String key,Long value){   if (value == null) {     return;   }   if (parseCache.size() > CACHE_SIZE) {     parseCache.clear();   }   parseCache.put(key,value); } "
"public FrameBodyUnsupported(String identifier){   this.identifier=identifier; } "
"public static boolean remove(String file){   File f=new File(file);   if (!f.exists()) {     return true;   }   return f.delete(); } "
"protected static boolean isUnderRootSuffix(String objDN){   if (objDN == null || objDN.length() == 0) {     return true;   }   DN rootDN=DN.valueOf(rootSuffix);   DN objectDN=DN.valueOf(objDN);   return rootDN.equals(objectDN) || rootDN.equals(objectDN.parent()); } "
"void clear(){   baseDNs.clear();   privateNamingContexts.clear();   publicNamingContexts.clear();   allPublicNamingContexts.clear(); } "
"@Override public void collide(){   if (hitStats == 0) {     hitStats=1;     Main.powerup_appear.play();   } } "
"private static int fastfloor(double x){   final int xi=(int)x;   return x < xi ? xi - 1 : xi; } "
"public IdentityProviderServiceException(String message,Throwable cause){   super(message,cause); } "
"public static boolean compareRef(Object a,Object b){   if (a == b)   return true;   return false; } "
"@SuppressWarnings(\"unchecked\") private void processArgs(String[] args) throws CoreException {   List<String> classes=new ArrayList<>();   List<String> modifiedArgs=new ArrayList<>();   for (int i=0; i < args.length; i++) {     String arg=args[i].toLowerCase();     if (\"-test\".equals(arg)) {       String v=args[++i];       classes.add(v.substring(0,v.indexOf(':')));       modifiedArgs.add(\"-test\");       modifiedArgs.add(v);     }  else     if (\"-classnames\".equals(arg) || \"-classname\".equals(arg)) {       i++;       while (i < args.length && args[i].charAt(0) != '-') {         classes.add(args[i++]);       }       modifiedArgs.add(\"-classNames\");       modifiedArgs.addAll(classes);     }  else     if (\"-testnamefile\".equals(arg)) {       try {         classes.addAll((List<String>)FileUtils.readLines(new File(args[++i])));       }  catch (      IOException e) {         throw new CoreException(new Status(IStatus.ERROR,RoboVMPlugin.PLUGIN_ID,\"\",e));       }       modifiedArgs.add(\"-classNames\");       modifiedArgs.addAll(classes);     }  else {       modifiedArgs.add(args[i]);     }   }   this.runnerProgramArgs=modifiedArgs.toArray(new String[modifiedArgs.size()]);   this.testClasses=classes.toArray(new String[classes.size()]); } "
"public void addObjectCreate(String pattern,String className,String attributeName){   addRule(pattern,new ObjectCreateRule(className,attributeName)); } "
"protected void doUnload() throws IOException {   if (log.isDebugEnabled())   log.debug(sm.getString(\"standardManager.unloading.debug\"));   if (sessions.isEmpty()) {     log.debug(sm.getString(\"standardManager.unloading.nosessions\"));     return;   }   File file=file();   if (file == null) {     return;   }   if (log.isDebugEnabled()) {     log.debug(sm.getString(\"standardManager.unloading\",pathname));   }   ArrayList<StandardSession> list=new ArrayList<>();   try (FileOutputStream fos=new FileOutputStream(file.getAbsolutePath());BufferedOutputStream bos=new BufferedOutputStream(fos);ObjectOutputStream oos=new ObjectOutputStream(bos)){ synchronized (sessions) {       if (log.isDebugEnabled()) {         log.debug(\"Unloading \" + sessions.size() + \" sessions\");       }       oos.writeObject(Integer.valueOf(sessions.size()));       Iterator<Session> elements=sessions.values().iterator();       while (elements.hasNext()) {         StandardSession session=(StandardSession)elements.next();         list.add(session);         session.passivate();         session.writeObjectData(oos);       }     }   }    if (log.isDebugEnabled()) {     log.debug(\"Expiring \" + list.size() + \" persisted sessions\");   }   Iterator<StandardSession> expires=list.iterator();   while (expires.hasNext()) {     StandardSession session=expires.next();     try {       session.expire(false);     }  catch (    Throwable t) {       ExceptionUtils.handleThrowable(t);     }  finally {       session.recycle();     }   }   if (log.isDebugEnabled()) {     log.debug(\"Unloading complete\");   } } "
"public void beginDisplay(DisplayEvent event) throws ModelControlException {   super.beginDisplay(event);   setDisplayFieldValue(FORM_ACTION,urlViewBean); } "
"public BackupInfo(BackupDirectory backupDirectory,String backupID,Date backupDate,boolean isIncremental,boolean isCompressed,boolean isEncrypted,byte[] unsignedHash,byte[] signedHash,HashSet<String> dependencies,HashMap<String,String> backupProperties){   this.backupDirectory=backupDirectory;   this.backupID=backupID;   this.backupDate=backupDate;   this.isIncremental=isIncremental;   this.isCompressed=isCompressed;   this.isEncrypted=isEncrypted;   this.unsignedHash=unsignedHash;   this.signedHash=signedHash;   if (dependencies == null) {     this.dependencies=new HashSet<>();   }  else {     this.dependencies=dependencies;   }   if (backupProperties == null) {     this.backupProperties=new HashMap<>();   }  else {     this.backupProperties=backupProperties;   } } "
"@Inject public UserInfo(OAuth2RequestFactory requestFactory,UserInfoService userInfoService,ExceptionHandler exceptionHandler){   this.requestFactory=requestFactory;   this.userInfoService=userInfoService;   this.exceptionHandler=exceptionHandler; } "
"public Object createToken(String name,String Password){   return new Object(); } "
"public static void deregisterKeyManagerProvider(DN providerDN){   directoryServer.keyManagerProviders.remove(providerDN); } "
"public String add(Subject adminSubject,String realm,Privilege p) throws EntitlementException {   ResourceSaveIndexes indexes=p.getEntitlement().getResourceSaveIndexes(adminSubject,realm);   Set<String> subjectIndexes=SubjectAttributesManager.getSubjectSearchIndexes(p);   String dn=null;   try {     createDefaultSubConfig(adminToken,realm,null);     dn=getPrivilegeDistinguishedName(p.getName(),realm,null);     if (SMSEntry.checkIfEntryExists(dn,adminToken)) {       throw new EntitlementException(EntitlementException.POLICY_ALREADY_EXISTS);     }     SMSEntry s=new SMSEntry(adminToken,dn);     Map<String,Set<String>> map=new HashMap<String,Set<String>>();     Set<String> searchable=new HashSet<String>();     map.put(SMSEntry.ATTR_XML_KEYVAL,searchable);     searchable.add(Privilege.RESOURCE_TYPE_UUID_ATTRIBUTE + \"=\" + p.getResourceTypeUuid());     if (indexes != null) {       for (      String i : indexes.getHostIndexes()) {         searchable.add(HOST_INDEX_KEY + \"=\" + i);       }       for (      String i : indexes.getPathIndexes()) {         searchable.add(PATH_INDEX_KEY + \"=\" + i);       }       for (      String i : indexes.getParentPathIndexes()) {         searchable.add(PATH_PARENT_INDEX_KEY + \"=\" + i);       }       for (      String i : subjectIndexes) {         searchable.add(SUBJECT_INDEX_KEY + \"=\" + i);       }     }     Set<String> setServiceID=new HashSet<String>(2);     map.put(SMSEntry.ATTR_SERVICE_ID,setServiceID);     setServiceID.add(\"indexes\");     Set<String> set=new HashSet<String>(2);     map.put(SMSEntry.ATTR_KEYVAL,set);     set.add(SERIALIZABLE_INDEX_KEY + \"=\" + p.toJSONObject().toString());     Set<String> setObjectClass=new HashSet<String>(4);     map.put(SMSEntry.ATTR_OBJECTCLASS,setObjectClass);     setObjectClass.add(SMSEntry.OC_TOP);     setObjectClass.add(SMSEntry.OC_SERVICE_COMP);     Set<String> info=new HashSet<String>(8);     String privilegeName=p.getName();     if (privilegeName != null) {       info.add(Privilege.NAME_ATTRIBUTE + \"=\" + privilegeName);     }     String privilegeDesc=p.getDescription();     if (privilegeDesc != null) {       info.add(Privilege.DESCRIPTION_ATTRIBUTE + \"=\" + privilegeDesc);     }     String createdBy=p.getCreatedBy();     if (createdBy != null) {       info.add(Privilege.CREATED_BY_ATTRIBUTE + \"=\" + createdBy);     }     String lastModifiedBy=p.getLastModifiedBy();     if (lastModifiedBy != null) {       info.add(Privilege.LAST_MODIFIED_BY_ATTRIBUTE + \"=\" + lastModifiedBy);     }     long creationDate=p.getCreationDate();     if (creationDate > 0) {       String data=Long.toString(creationDate) + \"=\" + Privilege.CREATION_DATE_ATTRIBUTE;       info.add(data);       info.add(\"|\" + data);     }     long lastModifiedDate=p.getLastModifiedDate();     if (lastModifiedDate > 0) {       String data=Long.toString(lastModifiedDate) + \"=\" + Privilege.LAST_MODIFIED_DATE_ATTRIBUTE;       info.add(data);       info.add(\"|\" + data);     }     Entitlement ent=p.getEntitlement();     info.add(Privilege.APPLICATION_ATTRIBUTE + \"=\" + ent.getApplicationName());     for (    String a : p.getApplicationIndexes()) {       info.add(Privilege.APPLICATION_ATTRIBUTE + \"=\" + a);     }     map.put(\"ou\",info);     s.setAttributes(map);     s.save();     Map<String,String> params=new HashMap<String,String>();     params.put(NotificationServlet.ATTR_NAME,privilegeName);     params.put(NotificationServlet.ATTR_REALM_NAME,realm);     Notifier.submit(NotificationServlet.PRIVILEGE_ADDED,params);     updateIndexCount(realm,1,false);   }  catch (  JSONException e) {     throw new EntitlementException(210,e);   } catch (  SSOException e) {     throw new EntitlementException(210,e);   } catch (  SMSException e) {     throw new EntitlementException(210,e);   }   return dn; } "
"public final void encodeAttribute(final ByteStringBuilder builder,final Attribute attribute) throws DirectoryException {   int id=getAttributeId(attribute.getAttributeDescription());   final byte[] idBytes=encodeId(id);   builder.appendBERLength(idBytes.length);   builder.appendBytes(idBytes);   builder.appendBERLength(attribute.size());   for (  final ByteString v : attribute) {     builder.appendBERLength(v.length());     builder.appendBytes(v);   } } "
"protected void log(Level level,String methodName,String message){   Object[] args={methodName,message};   logger.log(level,MessageFormat.format(logEntryTemplate,args)); } "
"@Override public boolean genStringAsCharArray(){   return this.genStringAsCharArray; } "
"private static boolean contentsEquals(InputStream in1,InputStream in2) throws IOException {   if (!(in1 instanceof BufferedInputStream)) {     in1=new BufferedInputStream(in1);   }   if (!(in2 instanceof BufferedInputStream)) {     in2=new BufferedInputStream(in2);   }   int ch=in1.read();   while (ch != -1) {     int ch2=in2.read();     if (ch != ch2) {       return false;     }     ch=in1.read();   }   int ch2=in2.read();   return ch2 == -1; } "
"public boolean isRemote(){   return remoteArg.isPresent(); } "
"public Request createRequest(String xml) throws XACMLException {   Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,xml);   if (obj == null) {     return new RequestImpl(xml);   }  else {     return (Request)obj;   } } "
"void unbindAuditFilter(Filter filter){   auditFilter.setDelegate(PassthroughFilter.PASSTHROUGH_FILTER); } "
"public List<Challenge> challenges(){   String responseField;   if (code == HTTP_UNAUTHORIZED) {     responseField=\"WWW-Authenticate\";   }  else   if (code == HTTP_PROXY_AUTH) {     responseField=\"Proxy-Authenticate\";   }  else {     return Collections.emptyList();   }   return OkHeaders.parseChallenges(headers(),responseField); } "
"public void test_chooseServerAlias(){   init(SERVER);   assertNull(manager.chooseServerAlias(null,null,new Socket()));   assertNull(manager.chooseServerAlias(\"\",null,new Socket()));   String res=manager.chooseServerAlias(TYPE_RSA,null,null);   assertNotNull(res);   assertEquals(\"serverkey_00\",res.toLowerCase());   res=manager.chooseServerAlias(TYPE_RSA,null,new Socket());   assertNotNull(res);   assertEquals(\"serverkey_00\",res.toLowerCase()); } "
"public boolean isEmpty(){   return elements == 0; } "
"public boolean ready() throws IOException { synchronized (lock) {     ensureOpen();     return true;   } } "
"public boolean isDirectory(){   return name.endsWith(\"/\"); } "
"public void addExcludedSubtree(GeneralSubtree subtree){   GeneralName base=subtree.getBase(); switch (base.getTagNo()) { case 1:     excludedSubtreesEmail=unionEmail(excludedSubtreesEmail,extractNameAsString(base));   break; case 2: excludedSubtreesDNS=unionDNS(excludedSubtreesDNS,extractNameAsString(base)); break; case 4: excludedSubtreesDN=unionDN(excludedSubtreesDN,(ASN1Sequence)base.getName().toASN1Primitive()); break; case 6: excludedSubtreesURI=unionURI(excludedSubtreesURI,extractNameAsString(base)); break; case 7: excludedSubtreesIP=unionIP(excludedSubtreesIP,ASN1OctetString.getInstance(base.getName()).getOctets()); break; } } "
"public boolean isEncrypted(){   return isEncrypted; } "
"public Vector midpoint(Vector other){   x=(x + other.x) / 2;   y=(y + other.y) / 2;   z=(z + other.z) / 2;   return this; } "
"public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"public View create(Element elem){   Document doc=elem.getDocument();   Object i18nFlag=doc.getProperty(\"i18n\");   if (Boolean.TRUE.equals(i18nFlag)) {     String kind=elem.getName();     if (kind != null) {       if (kind.equals(AbstractDocument.ContentElementName)) {         return new GlyphView(elem);       }  else       if (kind.equals(AbstractDocument.ParagraphElementName)) {         return new I18nFieldView(elem);       }     }   }   return new FieldView(elem); } "
"public MalformedURIException(String p_msg){   super(p_msg); } "
"public void insert_ulonglong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_ulonglong\",_opsClass);   DynEnumOperations $self=(DynEnumOperations)$so.servant;   try {     $self.insert_ulonglong(value);   }   finally {     _servant_postinvoke($so);   } } "
"public Set searchAllRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {   int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};   return searchObjects(objectTypes,wildcard,avPairs,level); } "
"static synchronized void initialize(@NonNull StoroBuilder builder){   try {     File dir=new File(builder.cacheDir,\"storo\");     if (!dir.exists() && !dir.mkdir()) {       throw new IOException(\"Cache folder could not be created.\");     }     mCache=SimpleDiskCache.open(dir,1,builder.maxSize);     mGson=builder.gson;     mInitialized=true;   }  catch (  Exception e) {     throw new RuntimeException(\"Storo instance could not be initialized!\",e);   } } "
"public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint){   return isBoring(layoutContext,text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,null); } "
"public void testIsSigned(){   try {     assertFalse(rsmd.isSigned(1));   }  catch (  SQLException e1) {     fail(\"ResultSetMetaDataTest.isSigned\" + e1.getMessage());     e1.printStackTrace();   }   try {     rsmd.isSigned(0);     fail(\"SQLException is not thrown\");   }  catch (  SQLException e) {   } } "
"public MemberName(Class<?> type){   init(type.getDeclaringClass(),type.getSimpleName(),type,flagsMods(IS_TYPE,type.getModifiers(),REF_NONE));   initResolved(true); } "
"public static InputStream toInputStream(String input,String encoding) throws IOException {   byte[] bytes=input.getBytes(Charsets.toCharset(encoding));   return new ByteArrayInputStream(bytes); } "
"public static boolean mailServerConfigured(){   return directoryServer.mailServerPropertySets != null && !directoryServer.mailServerPropertySets.isEmpty(); } "
"@Override public Promise<ResourceResponse,ResourceException> createInstance(Context context,CreateRequest request){   return RestUtils.generateUnsupportedOperation(); } "
"public DataBufferFloat(int size,int numBanks){   super(STABLE,TYPE_FLOAT,size,numBanks);   bankdata=new float[numBanks][];   for (int i=0; i < numBanks; i++) {     bankdata[i]=new float[size];   }   data=bankdata[0]; } "
"static public XObject create(Object val){   XObject result;   if (val instanceof XObject) {     result=(XObject)val;   }  else   if (val instanceof String) {     result=new XString((String)val);   }  else   if (val instanceof Boolean) {     result=new XBoolean((Boolean)val);   }  else   if (val instanceof Double) {     result=new XNumber(((Double)val));   }  else {     result=new XObject(val);   }   return result; } "
"void chooseFirstProvider(){   if (sigSpi != null) {     return;   } synchronized (lock) {     if (sigSpi != null) {       return;     }     if (debug != null) {       int w=--warnCount;       if (w >= 0) {         debug.println(\"Signature.init() not first method \" + \"called, disabling delayed provider selection\");         if (w == 0) {           debug.println(\"Further warnings of this type will \" + \"be suppressed\");         }         new Exception(\"Call trace\").printStackTrace();       }     }     Exception lastException=null;     while ((firstService != null) || serviceIterator.hasNext()) {       Service s;       if (firstService != null) {         s=firstService;         firstService=null;       }  else {         s=serviceIterator.next();       }       if (isSpi(s) == false) {         continue;       }       try {         sigSpi=newInstance(s);         provider=s.getProvider();         firstService=null;         serviceIterator=null;         return;       }  catch (      NoSuchAlgorithmException e) {         lastException=e;       }     }     ProviderException e=new ProviderException(\"Could not construct SignatureSpi instance\");     if (lastException != null) {       e.initCause(lastException);     }     throw e;   } } "
"EndParagraphAction(String nm,boolean select){   super(nm);   this.select=select; } "
"public static void fill(long[] array,long value){   for (int i=0; i < array.length; i++) {     array[i]=value;   } } "
"public boolean isClosed(){   return outputBuffer.isClosed(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeappendchildchildexists.class,args); } "
"private PreparedStatement credentials(Connection dbConnection,String username) throws SQLException {   PreparedStatement credentials=dbConnection.prepareStatement(preparedCredentials);   credentials.setString(1,username);   return (credentials); } "
"@Override public Class<?> loadClass(String name) throws ClassNotFoundException {   return (loadClass(name,false)); } "
"public static IOFileFilter makeDirectoryOnly(IOFileFilter filter){   if (filter == null) {     return DirectoryFileFilter.DIRECTORY;   }   return new AndFileFilter(DirectoryFileFilter.DIRECTORY,filter); } "
"@Override public List<IndexCreatedEvent> readAll(){   BoundStatement bs=new BoundStatement(readAllStmt);   return (marshalAll(getSession().execute(bs))); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.TokenType createTokenType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TokenTypeImpl(); } "
"protected void installComboBoxListeners(){   if ((propertyChangeListener=createPropertyChangeListener()) != null) {     comboBox.addPropertyChangeListener(propertyChangeListener);   }   if ((itemListener=createItemListener()) != null) {     comboBox.addItemListener(itemListener);   }   installComboBoxModelListeners(comboBox.getModel()); } "
"public PolicyViewBean(){   super(\"Policy\");   setDefaultDisplayURL(DEFAULT_DISPLAY_URL); } "
"public void next(){   index++; } "
"private InternalSession resolveToken(SessionID token) throws SessionException {   InternalSession sess=sessionAccessManager.getInternalSession(token);   if (sess == null) {     sess=resolveRestrictedToken(token,true);   }   if (sess == null) {     throw new InvalidSessionIdException(token);   }   return sess; } "
"public void handleDeprecatedStorageSchemes(ByteString password){   if (passwordPolicy.getDeprecatedPasswordStorageSchemes().isEmpty()) {     if (logger.isTraceEnabled()) {       logger.trace(\"Doing nothing for user %s because no deprecated storage schemes have been defined.\",userDNString);     }     return;   }   AttributeType type=passwordPolicy.getPasswordAttribute();   List<Attribute> attrList=userEntry.getAllAttributes(type);   if (attrList.isEmpty()) {     logger.trace(\"Doing nothing for entry %s because no password values were found.\",userDNString);     return;   }   HashSet<String> existingDefaultSchemes=new HashSet<>();   LinkedHashSet<ByteString> removedValues=new LinkedHashSet<>();   LinkedHashSet<ByteString> updatedValues=new LinkedHashSet<>();   for (  Attribute a : attrList) {     for (    ByteString v : a) {       try {         String[] pwComponents=getPwComponents(v);         String schemeName=pwComponents[0];         PasswordStorageScheme<?> scheme=getPasswordStorageScheme(schemeName);         if (scheme == null) {           if (logger.isTraceEnabled()) {             logger.trace(\"Skipping password value for user %s because the associated storage scheme %s \" + \"is not configured for use.\",userDNString,schemeName);           }           continue;         }         if (passwordMatches(password,pwComponents,scheme)) {           if (passwordPolicy.isDefaultPasswordStorageScheme(schemeName)) {             existingDefaultSchemes.add(schemeName);             updatedValues.add(v);           }  else           if (passwordPolicy.isDeprecatedPasswordStorageScheme(schemeName)) {             if (logger.isTraceEnabled()) {               logger.trace(\"Marking password with scheme %s for removal from user entry %s.\",schemeName,userDNString);             }             removedValues.add(v);           }  else {             updatedValues.add(v);           }         }       }  catch (      Exception e) {         logger.traceException(e,\"Skipping password value for user %s because an error occurred while attempting \" + \"to decode it based on the user password syntax\",userDNString);       }     }   }   if (removedValues.isEmpty()) {     logger.trace(\"User entry %s does not have any password values encoded using deprecated schemes.\",userDNString);     return;   }   LinkedHashSet<ByteString> addedValues=new LinkedHashSet<>();   for (  PasswordStorageScheme<?> s : passwordPolicy.getDefaultPasswordStorageSchemes()) {     if (!existingDefaultSchemes.contains(toLowerCase(s.getStorageSchemeName()))) {       try {         ByteString encodedPassword=encodePassword(password,s);         addedValues.add(encodedPassword);         updatedValues.add(encodedPassword);       }  catch (      Exception e) {         logger.traceException(e);         if (logger.isTraceEnabled()) {           logger.traceException(e,\"Unable to encode password for user %s using default scheme %s\",userDNString,s.getStorageSchemeName());         }       }     }   }   if (updatedValues.isEmpty()) {     logger.trace(\"Not updating user entry %s because removing deprecated schemes would leave the user without a password.\",userDNString);     return;   }   Attribute a=newAttribute(type,removedValues);   modifications.add(new Modification(ModificationType.DELETE,a,true));   if (!addedValues.isEmpty()) {     Attribute a2=newAttribute(type,addedValues);     modifications.add(new Modification(ModificationType.ADD,a2,true));   }   if (logger.isTraceEnabled()) {     logger.trace(\"Updating user entry %s to replace password values encoded with deprecated schemes \" + \"with values encoded with the default schemes.\",userDNString);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(importNode09.class,args); } "
"public static String removeProperty(String key){   return get().properties.remove(key); } "
"public static String truncate(String str,int len){   if (str == null) {     return null;   }   if (len < 0) {     return null;   }   if (str.length() > len) {     return str.substring(0,len);   }  else {     return str;   } } "
"public String typeName(Type type,Field field,String name){   if (field.getCardinality() == Field.Cardinality.CARDINALITY_REPEATED) {     if (isMapField(type,field.getName())) {       return mapTypeName(field);     }  else {       return arrayTypeName(field);     }   }  else {     if (field.getKind() == Field.Kind.TYPE_MESSAGE) {       return objectTypeName(field);     }  else {       return nativeTypeName(type,field,name);     }   } } "
"public CommandException(){ } "
"@Override public boolean equals(Object obj){   if (!super.equals(obj)) {     return false;   }   if (!getClass().equals(obj.getClass())) {     return false;   }   AttributeLookupCondition object=(AttributeLookupCondition)obj;   if (key == null) {     if (object.key != null) {       return false;     }   }  else {     if (!key.equals(object.key)) {       return false;     }   }   if (value == null) {     if (object.value != null) {       return false;     }   }  else {     if (!value.equals(object.value)) {       return false;     }   }   if (pConditionName == null) {     if (object.pConditionName != null) {       return false;     }   }  else {     if (!pConditionName.equals(object.pConditionName)) {       return false;     }   }   return true; } "
"private static void doSSO(HttpServletRequest request,HttpServletResponse response,String target,String service) throws IOException, SAMLException {   if (request == null || response == null || target == null) {     SAMLUtils.debug.error(\"SAMLClient:Input parameter is null.\");     throw new SAMLException(SAMLUtils.bundle.getString(\"nullInput\"));   }   if ((!service.equals(SAMLConstants.SAML_AWARE_NAMING)) && (!service.equals(SAMLConstants.SAML_POST_NAMING)) && (!service.equals(SAMLConstants.SAML_SOAP_NAMING))) {     SAMLUtils.debug.error(\"SAMLClient:illegal naming service name.\");     throw new SAMLException(SAMLUtils.bundle.getString(\"illegalNamingService\"));   }   Object ssoToken=null;   SessionProvider sessionProvider;   try {     sessionProvider=SessionManager.getProvider();     ssoToken=sessionProvider.getSession(request);     if (ssoToken == null) {       SAMLUtils.debug.error(\"SAMLClient:SSOToken is null.\");       throw new SAMLException(SAMLUtils.bundle.getString(\"nullSSOToken\"));     }     if (!sessionProvider.isValid(ssoToken)) {       SAMLUtils.debug.error(\"SAMLClient:Session is invalid.\");       throw new SAMLException(SAMLUtils.bundle.getString(\"invalidSSOToken\"));     }   }  catch (  SessionException se) {     SAMLUtils.debug.error(\"SAMLClient\",se);     throw new SAMLException(\"SAMLClient:doSSO:\" + se.getMessage());   }   URL weburl=null;   try {     URL serverurl=new URL(SAMLServiceManager.getServerURL());     weburl=SystemConfigurationUtil.getServiceURL(service,serverurl.getProtocol(),serverurl.getHost(),serverurl.getPort(),serverurl.getPath());   }  catch (  SystemConfigurationException ue) {     SAMLUtils.debug.error(\"SAMLClient\",ue);     throw new SAMLException(SAMLUtils.bundle.getString(\"URLNotFoundException\"));   }   StringBuffer redirectedurl=new StringBuffer(200);   String tname=(String)SAMLServiceManager.getAttribute(SAMLConstants.TARGET_SPECIFIER);   redirectedurl.append(weburl).append(\"?\").append(tname).append(\"=\").append(target);   response.sendRedirect(redirectedurl.toString()); } "
"private void checkOpenAndCreate(boolean create) throws SocketException {   if (isClosed()) {     throw new SocketException(\"Socket is closed\");   }   if (!create) {     if (!isConnected()) {       throw new SocketException(\"Socket is not connected\");     }     return;   }   if (isCreated) {     return;   } synchronized (this) {     if (isCreated) {       return;     }     try {       impl.create(true);     }  catch (    SocketException e) {       throw e;     } catch (    IOException e) {       throw new SocketException(e.toString());     }     isCreated=true;   } } "
"public boolean isHandshakeOk(){   return handshakeOk; } "
"public int hashCode(){   return name.hashCode(); } "
"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {   processRequest(request,response); } "
"private BigDecimal convertIntToBigDecimal(int quoteParam){   BigDecimal quoteParamBigDecimal=new BigDecimal(quoteParam).divide(new BigDecimal(100),new MathContext(8,RoundingMode.HALF_DOWN));   return quoteParamBigDecimal; } "
"public static void clean(String suffix){ } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public static Date stringToDate(String strDate) throws ParseException {   int[] diffTime=null;   boolean plusTime=true;   int idxT=strDate.indexOf('T');   if (idxT == -1) {     throw new ParseException(\"Invalid Date Format\",0);   }   int idxDiffUTC=strDate.indexOf('-',idxT);   if (idxDiffUTC == -1) {     idxDiffUTC=strDate.indexOf('+',idxT);     plusTime=false;   }   if (idxDiffUTC != -1) {     diffTime=getDiffTime(strDate,idxDiffUTC);     strDate=strDate.substring(0,idxDiffUTC);   }   int idxMilliSec=strDate.indexOf('.');   if (idxMilliSec != -1) {     strDate=strDate.substring(0,idxMilliSec);   }  else {     char lastChar=strDate.charAt(strDate.length() - 1);     if ((lastChar == 'z') || (lastChar == 'Z')) {       strDate=strDate.substring(0,strDate.length() - 1);     }   }   return createDate(strDate,diffTime,plusTime); } "
"public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {   if (debug.messageEnabled()) {     debug.message(\"FirstTimeLogin.onLoginSuccess called: Req:\" + request.getRequestURL());   }   String strAttributeName=SystemProperties.get(FIRSTTIME_LOGIN_ATTR_NAME);   try {     if (strAttributeName != null && !strAttributeName.trim().equals(\"\")) {       AMIdentity amIdentityUser=IdUtils.getIdentity(ssoToken);       Map attrMap=amIdentityUser.getAttributes();       String strAttributeValue=Misc.getMapAttr(attrMap,strAttributeName,null);       if (debug.messageEnabled()) {         debug.message(\"FirstTimeLogin.onLoginSuccess: \" + strAttributeName + \"=\"+ strAttributeValue);       }       if (strAttributeValue != null && strAttributeValue.equalsIgnoreCase(\"true\")) {         if (request != null) {           request.setAttribute(AMPostAuthProcessInterface.POST_PROCESS_LOGIN_SUCCESS_URL,\"http://localhost:8081/idm/user/main.jsp?goto=http://mail.yahoo.com\");         }       }     }     if (debug.messageEnabled()) {       debug.message(\"FirstTimeLogin.onLoginSuccess: FirstTimeLogin \" + \"concluded successfully\");     }   }  catch (  IdRepoException ire) {     debug.error(\"FirstTimeLogin.onLoginSuccess: IOException while \" + \"fetching user attributes: \" + ire);   } catch (  SSOException sse) {     debug.error(\"FirstTimeLogin.onLoginSuccess: SSOException \" + sse);   } } "
"public final void testHashCode01(){   ECFieldF2m f=new ECFieldF2m(2000);   int hc=f.hashCode();   assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode()); } "
"public ResourceResponse update(final Context context,Request request,String resourceId,String rev,JsonValue oldValue,JsonValue newValue,Set<JsonPointer> relationshipFields,Set<JsonPointer> alreadyPersistedRelationshipFields) throws ResourceException {   Context managedContext=new ManagedObjectContext(context);   JsonValue decryptedNew=decrypt(newValue);   JsonValue decryptedOld=decrypt(oldValue);   if (!encryptionValueChanged(oldValue) && isEqual(decryptedOld,decryptedNew)) {     return newResourceResponse(resourceId,rev,oldValue);   }   execScriptHook(context,ScriptHook.onUpdate,decryptedNew,prepareScriptBindings(context,request,resourceId,decryptedOld,decryptedNew));   updateRelationshipFields(context,resourceId,relationshipFields,decryptedOld,decryptedNew);   relationshipFields.removeAll(alreadyPersistedRelationshipFields);   validateRelationshipFields(managedContext,decryptedOld,decryptedNew,relationshipFields);   populateVirtualProperties(context,request,decryptedNew);   JsonValue strippedRelationshipFields=stripRelationshipFields(decryptedNew);   onStore(context,decryptedNew);   UpdateRequest updateRequest=Requests.newUpdateRequest(repoId(resourceId),decryptedNew);   updateRequest.setRevision(rev);   ResourceResponse response=connectionFactory.getConnection().update(context,updateRequest);   JsonValue responseContent=response.getContent();   responseContent.asMap().putAll(strippedRelationshipFields.asMap());   responseContent.asMap().putAll(persistRelationships(false,managedContext,resourceId,oldValue,responseContent,relationshipFields).asMap());   executePostUpdate(context,request,resourceId,decryptedOld,responseContent);   performSyncAction(context,request,resourceId,SynchronizationService.SyncServiceAction.notifyUpdate,decryptedOld,responseContent);   ResourceResponse readResponse=connectionFactory.getConnection().read(context,Requests.newReadRequest(repoId(resourceId)));   readResponse.getContent().asMap().putAll(strippedRelationshipFields.asMap());   return readResponse; } "
"private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){   assert len > 0 && hint >= 0 && hint < len;   int ofs=1;   int lastOfs=0;   if (c.compare(key,a[base + hint]) < 0) {     int maxOfs=hint + 1;     while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {       lastOfs=ofs;       ofs=(ofs << 1) + 1;       if (ofs <= 0)       ofs=maxOfs;     }     if (ofs > maxOfs)     ofs=maxOfs;     int tmp=lastOfs;     lastOfs=hint - ofs;     ofs=hint - tmp;   }  else {     int maxOfs=len - hint;     while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {       lastOfs=ofs;       ofs=(ofs << 1) + 1;       if (ofs <= 0)       ofs=maxOfs;     }     if (ofs > maxOfs)     ofs=maxOfs;     lastOfs+=hint;     ofs+=hint;   }   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;   lastOfs++;   while (lastOfs < ofs) {     int m=lastOfs + ((ofs - lastOfs) >>> 1);     if (c.compare(key,a[base + m]) < 0)     ofs=m;  else     lastOfs=m + 1;   }   assert lastOfs == ofs;   return ofs; } "
"@Override public void reset() throws IOException { synchronized (lock) {     super.reset();     lineNumber=markedLineNumber;     lastWasCR=markedLastWasCR;   } } "
"public final Promise<ResourceResponse,ResourceException> log(ConfigAuditState configAuditState,Request request,Context context,ConnectionFactory connectionFactory){   try {     final AuditEvent auditEvent=ConfigAuditEventBuilder.configEvent().operationFromCrestRequest(request).userId(getUserId(context)).runAs(getUserId(context)).transactionIdFromContext(context).revision(configAuditState.getRevision()).timestamp(System.currentTimeMillis()).objectId(configAuditState.getId()).eventName(CONFIG_AUDIT_EVENT_NAME).before(configAuditState.getBefore()).after(configAuditState.getAfter()).changedFields(getChangedFields(configAuditState.getBefore(),configAuditState.getAfter(),request.getRequestType())).toEvent();     return connectionFactory.getConnection().create(context,Requests.newCreateRequest(AUDIT_CONFIG_REST_PATH,auditEvent.getValue())).asPromise();   }  catch (  ResourceException e) {     LOGGER.error(\"had trouble logging audit event for config changes.\",e);     return e.asPromise();   } catch (  Exception e) {     LOGGER.error(\"had trouble logging audit event for config changes.\",e);     return new InternalServerErrorException(e.getMessage(),e).asPromise();   } } "
"private void deleteBaseDNs(ConnectionWrapper connWrapper,Set<BaseDNDescriptor> baseDNs) throws Exception {   RootCfgClient root=connWrapper.getRootConfiguration();   PluggableBackendCfgClient backend=(PluggableBackendCfgClient)root.getBackend(baseDNs.iterator().next().getBackend().getBackendID());   SortedSet<DN> oldBaseDNs=backend.getBaseDN();   SortedSet<DN> newBaseDNs=new TreeSet<>(oldBaseDNs);   ArrayList<DN> dnsToRemove=new ArrayList<>();   for (  BaseDNDescriptor baseDN : baseDNs) {     dnsToRemove.add(baseDN.getDn());   }   newBaseDNs.removeAll(dnsToRemove);   backend.setBaseDN(newBaseDNs);   backend.commit(); } "
"public SymbolTable(int tableSize){   fTableSize=tableSize;   fBuckets=new Entry[fTableSize]; } "
"protected void validateSuccessfulReadResponse(JsonValue relationshipField,ResourceResponse resourceResponse) throws BadRequestException {   String reversePropertyName=getRelationshipProvider().getSchemaField().getReversePropertyName();   JsonValue reverseProperty=resourceResponse.getContent().get(reversePropertyName);   if (reverseProperty.isNotNull() && !reverseProperty.isCollection()) {     String ref=relationshipField.get(REFERENCE_ID).asString();     logger.debug(format(\"Reference ''{0}''->''{1}'' is in conflict with existing reverse reference ''{1}/{2}''->''{3}''\",relationshipField.getPointer(),ref,reversePropertyName,reverseProperty.get(RelationshipUtil.REFERENCE_ID).asString()));     throw new BadRequestException(format(\"Reference ''{0}''->''{1}'' is in conflict with existing reverse reference ''{1}/{2}''\",relationshipField.getPointer(),ref,reversePropertyName));   } } "
"private void tryGrow(Object[] array,int oldCap){   lock.unlock();   Object[] newArray=null;   if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {     try {       int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));       if (newCap - MAX_ARRAY_SIZE > 0) {         int minCap=oldCap + 1;         if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();         newCap=MAX_ARRAY_SIZE;       }       if (newCap > oldCap && queue == array)       newArray=new Object[newCap];     }   finally {       allocationSpinLock=0;     }   }   if (newArray == null)   Thread.yield();   lock.lock();   if (newArray != null && queue == array) {     queue=newArray;     System.arraycopy(array,0,newArray,0,oldCap);   } } "
"private void select(SwipeOpenViewHolder selected,int actionState){   if (selected == this.selected && actionState == this.actionState) {     return;   }   final int prevActionState=this.actionState;   endRecoverAnimation(selected,true);   this.actionState=actionState;   int actionStateMask=(1 << (DIRECTION_FLAG_COUNT + DIRECTION_FLAG_COUNT * actionState)) - 1;   boolean preventLayout=false;   if (closeOnAction && selected != null && prevSelected != null && selected != prevSelected) {     closeOpenHolder(prevSelected);     prevSelected=null;     preventLayout=true;   }   if (closeOnAction && openedPositions.size() > 0) {     for (int i=0; i < openedPositions.size(); i++) {       RecyclerView.ViewHolder holder=recyclerView.findViewHolderForAdapterPosition(openedPositions.keyAt(i));       if (holder instanceof SwipeOpenViewHolder && (selected == null || holder.getAdapterPosition() != selected.getViewHolder().getAdapterPosition())) {         closeOpenHolder((SwipeOpenViewHolder)holder);       }       openedPositions.removeAt(i);     }   }   if (this.selected != null) {     prevSelected=this.selected;     if (prevSelected.getViewHolder().itemView.getParent() != null) {       final int swipeDir=checkPreviousSwipeDirection(prevSelected.getViewHolder());       releaseVelocityTracker();       final float targetTranslateX, targetTranslateY;       getSelectedDxDy(tmpPosition);       final float currentTranslateX=tmpPosition[0];       final float currentTranslateY=tmpPosition[1];       if (ViewCompat.getTranslationX(prevSelected.getSwipeView()) != 0 || ViewCompat.getTranslationY(prevSelected.getSwipeView()) != 0) {         final float absTranslateX=Math.abs(currentTranslateX);         final float absTranslateY=Math.abs(currentTranslateY);         final SavedOpenState state; switch (swipeDir) { case LEFT: case START:           targetTranslateY=0;         if (absTranslateX > prevSelected.getEndHiddenViewSize() / 2) {           targetTranslateX=prevSelected.getEndHiddenViewSize() * Math.signum(dX);           state=SavedOpenState.END_OPEN;         }  else {           targetTranslateX=0;           state=null;         }       break; case RIGHT: case END:     targetTranslateY=0;   if (absTranslateX > prevSelected.getStartHiddenViewSize() / 2) {     targetTranslateX=prevSelected.getStartHiddenViewSize() * Math.signum(dX);     state=SavedOpenState.START_OPEN;   }  else {     targetTranslateX=0;     state=null;   } break; case UP: targetTranslateX=0; if (absTranslateY > prevSelected.getEndHiddenViewSize() / 2) { targetTranslateY=prevSelected.getEndHiddenViewSize() * Math.signum(dY); state=SavedOpenState.END_OPEN; }  else { targetTranslateY=0; state=null; } break; case DOWN: targetTranslateX=0; if (absTranslateY > prevSelected.getStartHiddenViewSize() / 2) { targetTranslateY=prevSelected.getStartHiddenViewSize() * Math.signum(dY); state=SavedOpenState.START_OPEN; }  else { targetTranslateY=0; state=null; } break; default : state=null; targetTranslateX=0; targetTranslateY=0; } if (state == null) { openedPositions.remove(prevSelected.getViewHolder().getAdapterPosition()); }  else { openedPositions.put(prevSelected.getViewHolder().getAdapterPosition(),state); } final RecoverAnimation rv=new RecoverAnimation(prevSelected,prevActionState,currentTranslateX,currentTranslateY,targetTranslateX,targetTranslateY); final long duration=callback.getAnimationDuration(recyclerView,ANIMATION_TYPE_SWIPE,targetTranslateX - currentTranslateX,targetTranslateY - currentTranslateY); rv.setDuration(duration); recoverAnimations.add(rv); rv.start(); preventLayout=true; }  else { openedPositions.remove(prevSelected.getViewHolder().getAdapterPosition()); } }  else { callback.clearView(recyclerView,prevSelected); } this.selected=null; } if (selected != null) { selectedFlags=(callback.getAbsMovementFlags(recyclerView,selected.getViewHolder()) & actionStateMask) >> (this.actionState * DIRECTION_FLAG_COUNT); selectedStartX=selected.getViewHolder().itemView.getLeft() + ViewCompat.getTranslationX(selected.getSwipeView()); selectedStartY=selected.getViewHolder().itemView.getTop() + ViewCompat.getTranslationY(selected.getSwipeView()); this.selected=selected; } final ViewParent rvParent=recyclerView.getParent(); if (rvParent != null) { rvParent.requestDisallowInterceptTouchEvent(this.selected != null); } if (!preventLayout) { recyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout(); } callback.onSelectedChanged(this.selected,this.actionState); recyclerView.invalidate(); } "
"public NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {   return selectNodeIterator(contextNode,str,contextNode); } "
"public UnknownDependencyException(final Throwable throwable,final String message){   super(message,throwable); } "
"public void runTest() throws Throwable {   Document doc;   NodeList testList;   Node piNode;   int nodeType;   doc=(Document)load(\"staff\",false);   testList=doc.getChildNodes();   piNode=testList.item(0);   nodeType=(int)piNode.getNodeType();   assertEquals(\"nodeProcessingInstructionNodeTypeAssert1\",7,nodeType); } "
"public NoSuchObjectException(String s){   super(s); } "
"private synchronized void commit(CSN csn,LDAPUpdateMsg msg){   final PendingChange curChange=pendingChanges.get(csn);   if (curChange == null) {     throw new NoSuchElementException();   }   curChange.setCommitted(true);   curChange.setMsg(msg); } "
"public boolean isCoalesce(){   return coalesce; } "
"public TransformerException(String message,SourceLocator locator,Throwable e){   super(message);   this.containedException=e;   this.locator=locator; } "
"public Leading(int type,float value){   this.type=type;   this.value=value; } "
"public ValueBaseHolder(){ } "
"public static void registerRestoreTaskListener(RestoreTaskListener listener){   directoryServer.restoreTaskListeners.addIfAbsent(listener); } "
"@SuppressWarnings(\"unchecked\") private static <T extends Throwable>void sneakyThrow2(Throwable t) throws T {   throw (T)t; } "
"public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"@Override public void addRuleInstances(Digester digester){   digester.addObjectCreate(prefix + \"Ejb\",\"org.apache.tomcat.util.descriptor.web.ContextEjb\");   digester.addRule(prefix + \"Ejb\",new SetAllPropertiesRule());   digester.addRule(prefix + \"Ejb\",new SetNextNamingRule(\"addEjb\",\"org.apache.tomcat.util.descriptor.web.ContextEjb\"));   digester.addObjectCreate(prefix + \"Environment\",\"org.apache.tomcat.util.descriptor.web.ContextEnvironment\");   digester.addSetProperties(prefix + \"Environment\");   digester.addRule(prefix + \"Environment\",new SetNextNamingRule(\"addEnvironment\",\"org.apache.tomcat.util.descriptor.web.ContextEnvironment\"));   digester.addObjectCreate(prefix + \"LocalEjb\",\"org.apache.tomcat.util.descriptor.web.ContextLocalEjb\");   digester.addRule(prefix + \"LocalEjb\",new SetAllPropertiesRule());   digester.addRule(prefix + \"LocalEjb\",new SetNextNamingRule(\"addLocalEjb\",\"org.apache.tomcat.util.descriptor.web.ContextLocalEjb\"));   digester.addObjectCreate(prefix + \"Resource\",\"org.apache.tomcat.util.descriptor.web.ContextResource\");   digester.addRule(prefix + \"Resource\",new SetAllPropertiesRule());   digester.addRule(prefix + \"Resource\",new SetNextNamingRule(\"addResource\",\"org.apache.tomcat.util.descriptor.web.ContextResource\"));   digester.addObjectCreate(prefix + \"ResourceEnvRef\",\"org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef\");   digester.addRule(prefix + \"ResourceEnvRef\",new SetAllPropertiesRule());   digester.addRule(prefix + \"ResourceEnvRef\",new SetNextNamingRule(\"addResourceEnvRef\",\"org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef\"));   digester.addObjectCreate(prefix + \"ServiceRef\",\"org.apache.tomcat.util.descriptor.web.ContextService\");   digester.addRule(prefix + \"ServiceRef\",new SetAllPropertiesRule());   digester.addRule(prefix + \"ServiceRef\",new SetNextNamingRule(\"addService\",\"org.apache.tomcat.util.descriptor.web.ContextService\"));   digester.addObjectCreate(prefix + \"Transaction\",\"org.apache.tomcat.util.descriptor.web.ContextTransaction\");   digester.addRule(prefix + \"Transaction\",new SetAllPropertiesRule());   digester.addRule(prefix + \"Transaction\",new SetNextNamingRule(\"setTransaction\",\"org.apache.tomcat.util.descriptor.web.ContextTransaction\")); } "
"private ComparableTimSort(Object[] a){   this.a=a;   int len=a.length;   @SuppressWarnings({\"unchecked\",\"UnnecessaryLocalVariable\"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];   tmp=newArray;   int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);   runBase=new int[stackLen];   runLen=new int[stackLen]; } "
"public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {   return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff); } "
"public static byte[] decryptKey(byte[] password,byte[] encryptedKey){   try {     Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);     c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);     return c.doFinal(encryptedKey);   }  catch (  Exception e) {     throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + \" is not available\",e);   } } "
"public double board_to_dsn(double p_val){   return p_val / scale_factor; } "
"public void runTest() throws Throwable {   Document doc;   Node refChild;   Node newChild;   NodeList elementList;   Node elementNode;   Node insertedNode;   doc=(Document)load(\"hc_staff\",true);   newChild=doc.createElement(\"br\");   refChild=doc.createElement(\"b\");   elementList=doc.getElementsByTagName(\"p\");   elementNode=elementList.item(1); {     boolean success=false;     try {       insertedNode=elementNode.insertBefore(newChild,refChild);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NOT_FOUND_ERR);     }     assertTrue(\"throw_NOT_FOUND_ERR\",success);   } } "
"@Deprecated public byte[] name(){   throw new org.omg.CORBA.NO_IMPLEMENT(); } "
"public void testCase17(){   byte aBytes[]={0};   byte bBytes[]={1,2,3,4,5,6,7};   byte rBytes[]={1,2,3,4,5,6,7};   int aSign=1;   int bSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.add(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public void removeComment(){   comment=null; } "
"public void testConstrStringExceptionExponentGreaterIntegerMax(){   String a=\"-238768.787678287e214748364767876\";   try {     new BigDecimal(a);     fail(\"NumberFormatException has not been caught\");   }  catch (  NumberFormatException e) {   } } "
"public static void updateProviderKeyInfo(String realm,String entityID,String certAlias,boolean isIDP) throws WSFederationMetaException {   WSFederationMetaManager metaManager=new WSFederationMetaManager();   FederationConfigElement config=metaManager.getEntityConfig(realm,entityID);   if (!config.isHosted()) {     String[] args={entityID,realm};     throw new WSFederationMetaException(\"entityNotHosted\",args);   }   FederationElement desp=metaManager.getEntityDescriptor(realm,entityID);   if (isIDP) {     IDPSSOConfigElement idpConfig=metaManager.getIDPSSOConfig(realm,entityID);     if ((idpConfig == null) || (desp == null)) {       String[] args={entityID,realm};       throw new WSFederationMetaException(\"entityNotIDP\",args);     }     if ((certAlias == null) || (certAlias.length() == 0)) {       removeKeyDescriptor(desp);       setExtendedAttributeValue(idpConfig,SAML2Constants.SIGNING_CERT_ALIAS,null);     }  else {       TokenSigningKeyInfoElement kde=getKeyDescriptor(certAlias);       updateKeyDescriptor(desp,kde);       Set value=new HashSet();       value.add(certAlias);       setExtendedAttributeValue(idpConfig,SAML2Constants.SIGNING_CERT_ALIAS,value);     }   }  else {     SPSSOConfigElement spConfig=metaManager.getSPSSOConfig(realm,entityID);     if ((spConfig == null) || (desp == null)) {       String[] args={entityID,realm};       throw new WSFederationMetaException(\"entityNotSP\",args);     }     if ((certAlias == null) || (certAlias.length() == 0)) {       removeKeyDescriptor(desp);       setExtendedAttributeValue(spConfig,SAML2Constants.SIGNING_CERT_ALIAS,null);     }  else {       TokenSigningKeyInfoElement kde=getKeyDescriptor(certAlias);       updateKeyDescriptor(desp,kde);       Set value=new HashSet();       value.add(certAlias);       setExtendedAttributeValue(spConfig,SAML2Constants.SIGNING_CERT_ALIAS,value);     }   }   metaManager.setFederation(realm,desp);   metaManager.setEntityConfig(realm,config); } "
"public DateFormatter(DateFormat format){   super(format);   setFormat(format); } "
"public void test_ConstructorLjava_lang_StringZ(){   try {     JarFile jarFile=new JarFile(\"Wrong.file\",false);     fail(\"Should throw IOException\");   }  catch (  IOException e) {   }   try {     Support_Resources.copyFile(resources,null,jarName);     String fileName=(new File(resources,jarName)).getCanonicalPath();     JarFile jarFile=new JarFile(fileName,true);   }  catch (  IOException e) {     fail(\"Should not throw IOException\");   } } "
"@Override public void save(User u){   if (this.u == null) {     this.u=getUser(0);   }   this.u.setId(u.getId());   this.u.setFirstName(u.getFirstName());   this.u.setLastName(u.getLastName()); } "
"public SoftBevelBorder(int bevelType,Color highlight,Color shadow){   super(bevelType,highlight,shadow); } "
"public void enableVertexAttribute(String name){   int location=fetchAttributeLocation(name);   if (location == -1)   return;   GLES20.glEnableVertexAttribArray(location); } "
"public static void main(final String[] args){   DOMTestCase.doMain(attrgetownerelement01.class,args); } "
"@DataProvider(name=\"hostnameTestData\") public Object[][] createHostnameTestData() throws Exception {   X509Certificate cert1=getTestCertificate(\"cert1.pem\");   X509Certificate cert2=getTestCertificate(\"cert2.pem\");   X509Certificate cert3=getTestCertificate(\"cert3.pem\");   X509Certificate cert4=getTestCertificate(\"cert4.pem\");   X509Certificate cert5=getTestCertificate(\"cert5.pem\");   X509Certificate cert6=getTestCertificate(\"cert6.pem\");   X509Certificate cert7=getTestCertificate(\"cert7.pem\");   X509Certificate cert8=getTestCertificate(\"cert8.pem\");   X509Certificate cert9=getTestCertificate(\"cert9.pem\");   X509Certificate cert10=getTestCertificate(\"cert10.pem\");   X509Certificate cert11=getTestCertificate(\"cert11.pem\");   X509Certificate cert12=getTestCertificate(\"cert12.pem\");   X509Certificate cert13=getTestCertificate(\"cert13.pem\");   return new Object[][]{{cert1,\"ldap.example.com\",true},{cert1,\"ldap2.example.com\",false},{cert1,\"192.168.0.1\",false},{cert1,\"2001:db8::1:0:0:1\",false},{cert1,\"*.example.com\",false},{cert2,\"ldap.example.com\",true},{cert2,\"ldap2.example.com\",false},{cert2,\"192.168.0.1\",false},{cert2,\"2001:db8::1:0:0:1\",false},{cert2,\"info\",false},{cert3,\"ldap.example.org\",true},{cert3,\"ldap.example.com\",false},{cert3,\"ldap2.example.org\",false},{cert3,\"192.168.0.1\",false},{cert3,\"2001:db8::1:0:0:1\",false},{cert4,\"ldap.example.org\",true},{cert4,\"ldap.example.com\",true},{cert4,\"ldap2.example.org\",false},{cert4,\"192.168.0.1\",false},{cert4,\"2001:db8::1:0:0:1\",false},{cert5,\"ldap.example.com\",false},{cert5,\"server\",false},{cert5,\"ldap1.example.com\",true},{cert5,\"ldap2.example.com\",true},{cert6,\"ldap.example.com\",true},{cert6,\"ldap10.example.com\",true},{cert6,\"ldap.dev.example.com\",false},{cert6,\"server\",false},{cert7,\"ldap1.example.com\",true},{cert7,\"ldap2.example.com\",true},{cert7,\"ldap.dev.example.com\",false},{cert7,\"192.168.0.1\",false},{cert7,\"2001:db8::1:0:0:1\",false},{cert7,\"ldap.example.org\",false},{cert8,\"ldap.example.com\",true},{cert8,\"192.168.0.1\",true},{cert8,\"ldap2.example.com\",false},{cert8,\"192.168.0.2\",false},{cert8,\"2001:db8::1:0:0:1\",false},{cert8,\"server\",false},{cert9,\"2001:db8::1:0:0:1\",true},{cert9,\"ldap.example.com\",false},{cert9,\"server\",false},{cert10,\"ldap.example.com\",false},{cert10,\"server\",false},{cert11,\"ldap.example.com\",false},{cert12,\"ldap.example.com\",true},{cert12,\"server\",true},{cert13,\"ldap.example.com\",true},{cert13,\"server\",false}}; } "
"private int measureHeight(int measureSpec){   float result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if (specMode == MeasureSpec.EXACTLY) {     result=specSize;   }  else {     result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return (int)Math.ceil(result); } "
"@Override public Result decode(BinaryBitmap image) throws NotFoundException {   setHints(null);   return decodeInternal(image); } "
"public byte[] decode(byte[] array) throws DecoderException {   return decodeHex(new String(array).toCharArray()); } "
"public Builder(String uri,boolean alignBaseline){   this.uri=uri;   if (uri == null) {     throw new NullPointerException(\"Attempt to create a DraweeSpan with null uri string!\");   }   if (alignBaseline) {     this.verticalAlignment=ALIGN_BASELINE;   } } "
"public void remove(Component comp){   if (comp == rootPane) {     super.remove(comp);   }  else {     getContentPane().remove(comp);   } } "
"private void read(char symbol) throws ParseException {   expect(symbol);   index++; } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   modifyProperties();   forwardTo(); } "
"public static void registerRootDN(DN rootDN){   directoryServer.rootDNs.add(rootDN); } "
"public boolean isLoggingEnabled(int logLevel){   return logger.isEnabledFor(intToLevel(logLevel)); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"acronym\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild(); {     boolean success=false;     try {       child.replaceData(-5,3,\"ABC\");     }  catch (    DOMException ex) {       success=(ex.code == DOMException.INDEX_SIZE_ERR);     }     assertTrue(\"throws_INDEX_SIZE_ERR\",success);   } } "
"public void startElement(String uri,String localName,String qName) throws SAXException {   if (m_state != null) {     m_state.resetState(getTransformer());   }   if (m_tracer != null)   super.fireStartElem(qName); } "
"public TaskRunnable next(){   return nextTask; } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentgetelementsbytagnametotallength.class,args); } "
"public int hashCode(){   int hash=0;   for (int i=0; i < rdns.size(); i++) {     Rdn rdn=rdns.get(i);     hash+=rdn.hashCode();   }   return hash; } "
"public SuffixFileFilter(List<String> suffixes){   this(suffixes,IOCase.SENSITIVE); } "
"public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {   if ((pos < 0) || ((pos + len) > doc.getLength())) {     throw new BadLocationException(\"DefaultEditorKit.write\",pos);   }   Segment data=new Segment();   int nleft=len;   int offs=pos;   Object endOfLineProperty=doc.getProperty(EndOfLineStringProperty);   if (endOfLineProperty == null) {     try {       endOfLineProperty=System.getProperty(\"line.separator\");     }  catch (    SecurityException se) {     }   }   String endOfLine;   if (endOfLineProperty instanceof String) {     endOfLine=(String)endOfLineProperty;   }  else {     endOfLine=null;   }   if (endOfLineProperty != null && !endOfLine.equals(\"\\n\")) {     while (nleft > 0) {       int n=Math.min(nleft,4096);       doc.getText(offs,n,data);       int last=data.offset;       char[] array=data.array;       int maxCounter=last + data.count;       for (int counter=last; counter < maxCounter; counter++) {         if (array[counter] == '\\n') {           if (counter > last) {             out.write(array,last,counter - last);           }           out.write(endOfLine);           last=counter + 1;         }       }       if (maxCounter > last) {         out.write(array,last,maxCounter - last);       }       offs+=n;       nleft-=n;     }   }  else {     while (nleft > 0) {       int n=Math.min(nleft,4096);       doc.getText(offs,n,data);       out.write(data.array,data.offset,data.count);       offs+=n;       nleft-=n;     }   }   out.flush(); } "
"public boolean canStripWhiteSpace(){   return (null != m_whiteSpaceInfoList); } "
"private static AppConfigurationEntry processValue(Node node){   if (debug.messageEnabled()) {     debug.message(\"ConfigUtils.processValue, value=\" + node.toString());   }   String value=node.getFirstChild().getNodeValue();   if (value == null || value.length() == 0) {     debug.error(\"ConfigUtils.processValue, invalid value=\" + value);     return null;   }   StringTokenizer st=new StringTokenizer(value);   int len=st.countTokens();   if (len < 2) {     debug.error(\"ConfigUtils.processValue, wrong config : \" + value);     return null;   }   String moduleName=st.nextToken();   String flag=st.nextToken();   Map options=new HashMap();   AppConfigurationEntry.LoginModuleControlFlag cFlag=null;   if (flag.equals(\"REQUIRED\")) {     cFlag=AppConfigurationEntry.LoginModuleControlFlag.REQUIRED;   }  else   if (flag.equals(\"OPTIONAL\")) {     cFlag=AppConfigurationEntry.LoginModuleControlFlag.OPTIONAL;   }  else   if (flag.equals(\"REQUISITE\")) {     cFlag=AppConfigurationEntry.LoginModuleControlFlag.REQUISITE;   }  else   if (flag.equals(\"SUFFICIENT\")) {     cFlag=AppConfigurationEntry.LoginModuleControlFlag.SUFFICIENT;   }  else {     debug.error(\"ConfigUtils.processValue, invalid flag : \" + value);     return null;   }   while (st.hasMoreElements()) {     String opt=st.nextToken();     int k=opt.indexOf(\"=\");     if (k != -1) {       HashSet set=new HashSet();       set.add(opt.substring(k + 1));       options.put(opt.substring(0,k),set);     }   }   return new AppConfigurationEntry(moduleName,cFlag,options); } "
"public long longValue(){   return longValue; } "
"public void test_equalsLjava_lang_Object(){   try {     DateFormat format=DateFormat.getInstance();     DateFormat clone=(DateFormat)format.clone();     assertTrue(\"Clone and parent are not equaled\",format.equals(clone));     assertTrue(\"Clone is equal to other object\",!clone.equals(DateFormat.getTimeInstance()));     format.setCalendar(Calendar.getInstance());     assertTrue(\"Clone and parent are not equaled\",format.equals(clone));   }  catch (  Exception e) {     fail(\"Unexpected exception \" + e.toString());   } } "
"public void addRecurringTask(RecurringTask recurringTask,boolean scheduleIteration) throws DirectoryException {   schedulerLock.lock();   try {     String id=recurringTask.getRecurringTaskID();     if (recurringTasks.containsKey(id)) {       LocalizableMessage message=ERR_TASKSCHED_DUPLICATE_RECURRING_ID.get(id);       throw new DirectoryException(ResultCode.ENTRY_ALREADY_EXISTS,message);     }     Attribute attr=Attributes.create(ATTR_TASK_STATE,TaskState.RECURRING.toString());     Entry recurringTaskEntry=recurringTask.getRecurringTaskEntry();     recurringTaskEntry.putAttribute(attr.getAttributeDescription().getAttributeType(),newArrayList(attr));     if (scheduleIteration) {       Task task=recurringTask.scheduleNextIteration(new GregorianCalendar());       if (task != null) {         Task t=tasks.get(task.getTaskID());         if (t != null && TaskState.isDone(t.getTaskState())) {           removeCompletedTask(t.getTaskID());         }         scheduleTask(task,false);       }     }     recurringTasks.put(id,recurringTask);     writeState();   }   finally {     schedulerLock.unlock();   } } "
"public PlaPoint start_point(){   return start_point; } "
"static final int nextSecondarySeed(){   int r;   Thread t=Thread.currentThread();   if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {     r^=r << 13;     r^=r >>> 17;     r^=r << 5;   }  else {     localInit();     if ((r=(int)UNSAFE.getLong(t,SEED)) == 0)     r=1;   }   UNSAFE.putInt(t,SECONDARY,r);   return r; } "
"public EncryptedAssertion createEncryptedAssertion(Element elem) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ASSERTION,elem);   if (obj == null) {     return new EncryptedAssertionImpl(elem);   }  else {     return (EncryptedAssertion)obj;   } } "
"public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,File out) throws IOException {   List providers=getAudioFileWriters();   int bytesWritten=0;   boolean flag=false;   for (int i=0; i < providers.size(); i++) {     AudioFileWriter writer=(AudioFileWriter)providers.get(i);     try {       bytesWritten=writer.write(stream,fileType,out);       flag=true;       break;     }  catch (    IllegalArgumentException e) {       continue;     }   }   if (!flag) {     throw new IllegalArgumentException(\"could not write audio file: file type not supported: \" + fileType);   }  else {     return bytesWritten;   } } "
"protected void startDocumentInternal() throws org.xml.sax.SAXException {   super.startDocumentInternal();   m_needToCallStartDocument=false; } "
"public static Object unmarshal(String data) throws Exception {   if (data.startsWith(TOKEN_PREFIX)) {     return SSOTokenManager.getInstance().createSSOToken(data.substring(TOKEN_PREFIX.length()));   }  else   if (data.startsWith(OBJECT_PREFIX)) {     return IOUtils.deserialise(Base64.decode(data.substring(OBJECT_PREFIX.length())),false);   }  else {     throw new IllegalArgumentException(\"Bad context value:\" + data);   } } "
"private final boolean isSpecialPath(final String path){   return !allowSpecialPaths && (path.toUpperCase(Locale.ENGLISH).startsWith(\"/WEB-INF\") || path.toUpperCase(Locale.ENGLISH).startsWith(\"/META-INF\")); } "
"public static void main(String[] args) throws UnknownHostException {   SpringApplication app=new SpringApplication(App2App.class);   DefaultProfileUtil.addDefaultProfile(app);   Environment env=app.run(args).getEnvironment();   log.info(\"\\n----------------------------------------------------------\\n\\t\" + \"Application '{}' is running! Access URLs:\\n\\t\" + \"Local: \\t\\thttp://127.0.0.1:{}\\n\\t\"+ \"External: \\thttp://{}:{}\\n----------------------------------------------------------\",env.getProperty(\"spring.application.name\"),env.getProperty(\"server.port\"),InetAddress.getLocalHost().getHostAddress(),env.getProperty(\"server.port\"));   String configServerStatus=env.getProperty(\"configserver.status\");   log.info(\"\\n----------------------------------------------------------\\n\\t\" + \"Config Server: \\t{}\\n----------------------------------------------------------\",configServerStatus == null ? \"Not found or not setup for this application\" : configServerStatus); } "
"public void output(SessionDescription sd,OutputStream out) throws IOException {   if (out instanceof ObjectOutputStream) {     ObjectOutputStream output=(ObjectOutputStream)out;     if (sd != null)     output.writeObject(sd);  else     throw new IOException(\"The parameter is null\");   }  else   throw new IOException(\"The output stream has to be an instance of ObjectOutputStream\"); } "
"public NodeIterator nodeset() throws javax.xml.transform.TransformerException {   error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});   return null; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_documentgetrootnode.class,args); } "
"public AccessRequest(short id,Authenticator auth){   super(PacketType.ACCESS_REQUEST,id,auth); } "
"public void testGeneralPunctuationCategory(){   String[] s={\",\",\"!\",\"\\\"\",\"#\",\"%\",\"&\",\"'\",\"(\",\")\",\"-\",\".\",\"/\"};   String regexp=\"\\\\p{P}\";   for (int i=0; i < s.length; i++) {     Pattern pattern=Pattern.compile(regexp);     Matcher matcher=pattern.matcher(s[i]);     assertTrue(matcher.find());   } } "
"public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties){   this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties); } "
"private void resetStatusValues(){   dupToken=false;   oldToken=false;   unseqToken=false;   gapToken=false;   minorStatus=0;   minorString=null; } "
"private int measureLong(int measureSpec){   int result;   int specMode=MeasureSpec.getMode(measureSpec);   int specSize=MeasureSpec.getSize(measureSpec);   if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {     result=specSize;   }  else {     final int count=mViewPager.getAdapter().getCount();     result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);     if (specMode == MeasureSpec.AT_MOST) {       result=Math.min(result,specSize);     }   }   return result; } "
"public RoutingBoard(ShapeTileBox p_bounding_box,BrdLayerStructure p_layer_structure,ShapeSegments[] p_outline_shapes,int p_outline_cl_class_no,BoardRules p_rules,HostCom p_host_com,Stat p_stat){   stat=p_stat;   layer_structure=p_layer_structure;   brd_rules=p_rules;   brd_library=new BrdLibrary();   undo_items=new UndoObjects();   brd_components=new BrdComponents();   host_com=p_host_com;   bounding_box=p_bounding_box;   search_tree_manager=new AwtreeManager(this);   p_rules.nets.set_board(this);   insert_outline(p_outline_shapes,p_outline_cl_class_no);   shove_obstacle=new BrdShoveObstacle();   shove_trace_algo=new AlgoShoveTrace(this);   shove_via_algo=new AlgoShoveVia(this);   move_drill_algo=new AlgoMoveDrillItem(this);   shove_pad_algo=new AlgoShovePad(this);   optimize_via=new AlgoOptimizeVia(this); } "
"public void free(){   bufHandler.free(); } "
"public void testCase14(){   byte rBytes[]={1};   BigInteger aNumber=BigInteger.ONE;   BigInteger bNumber=BigInteger.ONE;   BigInteger result=aNumber.divide(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType) throws HeadlessException {   return showConfirmDialog(parentComponent,message,title,optionType,QUESTION_MESSAGE); } "
"public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"from_any\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.from_any(value);   }   finally {     _servant_postinvoke($so);   } } "
"public MARSHAL(String s,int minor,CompletionStatus completed){   super(s,minor,completed); } "
"public void testDivideBigDecimal1(){   String a=\"-37361671119238118911893939591735\";   int aScale=10;   String b=\"74723342238476237823787879183470\";   int bScale=15;   String c=\"-5E+4\";   int resScale=-4;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result=aNumber.divide(bNumber);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",resScale,result.scale()); } "
"private void clampPositionToBottomStackStart(StackScrollState.ViewState childViewState,int childHeight){   childViewState.yTranslation=Math.min(childViewState.yTranslation,mInnerHeight - mBottomStackPeekSize - mCollapseSecondCardPadding- childHeight); } "
"public boolean delete(String name){   String lcName=name.toLowerCase();   if (this.nameValueMap.containsKey(lcName)) {     this.nameValueMap.remove(lcName);     return true;   }  else {     return false;   } } "
"public static void write(OutputStream out,int c){   if (out == null) {     throw new IllegalArgumentException(\"output stream null.\");   }   try {     out.write(c);   }  catch (  IOException e) {     throw new RuntimeException(e.getMessage(),e);   } } "
"public boolean equals(Object o){   if (!(o instanceof RegularEnumSet))   return super.equals(o);   RegularEnumSet<?> es=(RegularEnumSet<?>)o;   if (es.elementType != elementType)   return elements == 0 && es.elements == 0;   return es.elements == elements; } "
"public AuthErrorCodeException(String authErrorCode,String rbName,String messageCode){   this(authErrorCode,rbName,messageCode,null); } "
"public SAML2ConfigBuilder customConditionsProviderClassName(String customConditionsProviderClassName){   this.customConditionsProviderClassName=customConditionsProviderClassName;   return this; } "
"public static NSObject parse(File f) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {   FileInputStream fis=new FileInputStream(f);   int type=determineType(fis);   fis.close(); switch (type) { case TYPE_BINARY:     return BinaryPropertyListParser.parse(f); case TYPE_XML:   return XMLPropertyListParser.parse(f); case TYPE_ASCII: return ASCIIPropertyListParser.parse(f); default : throw new PropertyListFormatException(\"The given file is not a property list of a supported format.\"); } } "
"public static Foo createEntity(EntityManager em){   Foo foo=new Foo();   foo.setValue(DEFAULT_VALUE);   return foo; } "
"public static int[][] createSparseMatrix(CellLayout iconLayout,CellLayout hotseatLayout,boolean isHorizontal,int allappsiconRank,boolean includeAllappsicon){   ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();   ViewGroup hotseatParent=hotseatLayout.getShortcutsAndWidgets();   int m, n;   if (isHorizontal) {     m=iconLayout.getCountX();     n=iconLayout.getCountY() + hotseatLayout.getCountY();   }  else {     m=iconLayout.getCountX() + hotseatLayout.getCountX();     n=iconLayout.getCountY();   }   int[][] matrix=createFullMatrix(m,n);   for (int i=0; i < iconParent.getChildCount(); i++) {     int cx=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellX;     int cy=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellY;     matrix[cx][cy]=i;   }   for (int i=hotseatParent.getChildCount() - 1; i >= (includeAllappsicon ? 0 : 1); i--) {     int delta=0;     if (isHorizontal) {       int cx=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellX;       if ((includeAllappsicon && cx >= allappsiconRank) || (!includeAllappsicon && cx > allappsiconRank)) {         delta=-1;       }       matrix[cx + delta][iconLayout.getCountY()]=iconParent.getChildCount() + i;     }  else {       int cy=((CellLayout.LayoutParams)hotseatParent.getChildAt(i).getLayoutParams()).cellY;       if ((includeAllappsicon && cy >= allappsiconRank) || (!includeAllappsicon && cy > allappsiconRank)) {         delta=-1;       }       matrix[iconLayout.getCountX()][cy + delta]=iconParent.getChildCount() + i;     }   }   if (DEBUG) {     printMatrix(matrix);   }   return matrix; } "
"public Support_TestProvider(){   super(NAME,VERSION,INFO);   registerServices(); } "
"public void test_engineInit_02(){   KeyManagerFactorySpiImpl kmf=new KeyManagerFactorySpiImpl();   try {     kmf.engineInit(null);     fail(\"InvalidAlgorithmParameterException wasn't thrown\");   }  catch (  InvalidAlgorithmParameterException iape) {   } catch (  Exception e) {     fail(e + \" was thrown instead of InvalidAlgorithmParameterException\");   }   try {     char[] psw=\"password\".toCharArray();     Parameters pr=new Parameters(psw);     kmf.engineInit(pr);   }  catch (  Exception e) {     fail(e + \" unexpected exception was thrown\");   } } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {   return toXMLString(includeNS,declareNS,false); } "
"public CountingOutputStream(OutputStream out){   super(out); } "
"public static FileBasedArgument bindPasswordFileArgument() throws ArgumentException {   return FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildArgument(); } "
"public AuthenticatorAppRegistrationURIBuilder(AMIdentity id,String secretHex,int codeLength,String issuer){   Reject.ifNull(id,\"id cannot be null\");   Reject.ifNull(secretHex,\"secretHex cannot be null\");   Reject.ifTrue(StringUtils.isBlank(issuer),\"issuer cannot be empty\");   Reject.ifTrue((codeLength < MIN_CODE_LENGTH),\"code length must be \" + MIN_CODE_LENGTH + \" or greater\");   if (secretHex.length() == 0) {     throw new IllegalArgumentException(\"secretHex cannot be an empty String.\");   }   this.issuer=issuer;   this.id=id;   this.secretHex=secretHex;   this.codeLength=codeLength; } "
"public void mouseMoved(MouseEvent event){   if (tipShowing) {     checkForTipChange(event);   }  else   if (showImmediately) {     JComponent component=(JComponent)event.getSource();     toolTipText=component.getToolTipText(event);     if (toolTipText != null) {       preferredLocation=component.getToolTipLocation(event);       mouseEvent=event;       insideComponent=component;       exitTimer.stop();       showTipWindow();     }   }  else {     insideComponent=(JComponent)event.getSource();     mouseEvent=event;     toolTipText=null;     enterTimer.restart();   } } "
"public AMPostCallBackException(String msg,String errorCode,UMSException ue){   super(msg,errorCode,ue); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ManifestElement createManifestElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ManifestElementImpl(); } "
"public void toBack(){   moveToBack(); } "
"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {   s.defaultWriteObject();   for (  E e : this)   s.writeObject(e);   s.writeObject(null); } "
"public DeviceCmyk(float c,float m,float y,float k){   super(new PdfDeviceCs.Cmyk(),new float[]{c > 1 ? 1 : (c > 0 ? c : 0),m > 1 ? 1 : (m > 0 ? m : 0),y > 1 ? 1 : (y > 0 ? y : 0),k > 1 ? 1 : (k > 0 ? k : 0)});   if (c > 1 || c < 0 || m > 1 || m < 0 || y > 1 || y < 0 || k > 1 || k < 0) {     Logger LOGGER=LoggerFactory.getLogger(DeviceCmyk.class);     LOGGER.warn(LogMessageConstant.COLORANT_INTENSITIES_INVALID);   } } "
"public void validateUserID(String userID,Map envParams) throws AMException {   StringBuilder errorString=new StringBuilder(10);   SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());   String orgDN=(String)envParams.get(com.sun.identity.shared.Constants.ORGANIZATION_NAME);   String regEx=getOrgUserInvalidChars(orgDN,token);   if (userID == null || userID.length() == 0) {     debug.error(\"AMUserPasswordValidationPlugin.\" + \"validateUserID() : Source string is null or empty\" + userID);     throw new AMInvalidDNException(AMSDKBundle.getString(\"157\"),\"157\");   }   if (regEx == null || regEx.length() == 0) {     debug.error(\"AMUserPasswordValidationPlugin.\" + \"validateUserID() : List of invalid characters is null \" + \"or empty\"+ regEx);     throw new AMInvalidDNException(AMSDKBundle.getString(\"157\"),\"157\");   }   StringTokenizer st=new StringTokenizer(regEx,SEPERATOR);   while (st.hasMoreTokens()) {     String obj=st.nextToken();     if (userID.indexOf(obj) > -1) {       debug.error(\"AMUserPasswordValidationPlugin.\" + \"validateUserID() : Detected invalid chars ...\");       debug.error(\"AMUserPasswordValidationPlugin.\" + \"validateUserID() : User Name validation Failed:\" + obj);       errorString.append(obj).append(\" \");     }   }   Object args[]={userID,errorString.toString()};   if (errorString.length() != 0) {     throw new AMException(AMSDKBundle.getString(\"1002\",args),\"1002\",args);   } } "
"private static void recycleMediumWeightPopup(MediumWeightPopup popup){ synchronized (MediumWeightPopup.class) {     List<MediumWeightPopup> mediumPopupCache=getMediumWeightPopupCache();     if (mediumPopupCache.size() < MAX_CACHE_SIZE) {       mediumPopupCache.add(popup);     }   } } "
"public void startDocument() throws SAXException { } "
"public void test_getInstanceLjava_lang_StringLjava_lang_String01() throws NoSuchProviderException, NoSuchAlgorithmException {   if (!DEFSupported) {     fail(NotSupportMsg);     return;   }   String provider=null;   for (int i=0; i < validValues.length; i++) {     try {       SSLContext.getInstance(defaultProtocol,provider);       fail(\"IllegalArgumentException must be thrown when provider is null\");     }  catch (    IllegalArgumentException e) {     }     try {       SSLContext.getInstance(defaultProtocol,\"\");       fail(\"IllegalArgumentException must be thrown when provider is empty\");     }  catch (    IllegalArgumentException e) {     }   } } "
"public final PlaPointInt insert_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth,int p_pullt_min_move,boolean p_with_check,TimeLimit p_time_limit){   shove_fail_clear();   PlaPoint from_corner_point=p_polyline.corner_first();   if (from_corner_point.is_rational()) {     System.err.println(classname + \"insert_trace: from_corner_point NOT int\");     return null;   }   PlaPointInt from_corner=(PlaPointInt)from_corner_point;   PlaPoint to_corner_point=p_polyline.corner_last();   if (to_corner_point.is_rational()) {     System.err.println(classname + \"insert_trace: to_corner_point NOT int\");     return from_corner;   }   PlaPointInt to_corner=(PlaPointInt)to_corner_point;   if (from_corner.equals(to_corner))   return to_corner;   changed_area_clear();   BrdTracep picked_trace=pick_one_trace(from_corner,p_layer,p_net_no_arr,p_half_width,p_clearance_class_no);   AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();   int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);   Polyline new_polyline=shove_trace_algo.spring_over_obstacles(p_polyline,compensated_half_width,p_layer,p_net_no_arr,p_clearance_class_no,null);   if (new_polyline == null)   return from_corner;   Polyline combined_polyline=picked_trace == null ? new_polyline : new_polyline.combine(picked_trace.polyline());   if (!combined_polyline.is_valid())   return from_corner;   int start_shape_no=combined_polyline.plaline_len() - new_polyline.plaline_len();   ArrayList<ShapeTile> trace_shapes=combined_polyline.offset_shapes(compensated_half_width,start_shape_no,combined_polyline.plaline_len(-1));   final int trace_shapes_count=trace_shapes.size();   int last_shape_no=trace_shapes_count;   for (int index=0; index < trace_shapes_count; ++index) {     ShapeTile curr_trace_shape=trace_shapes.get(index);     BrdFromSide from_side=new BrdFromSide(combined_polyline,combined_polyline.corner_count() - trace_shapes_count - 1 + index,curr_trace_shape);     if (p_with_check) {       boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_time_limit);       if (!check_shove_ok) {         last_shape_no=index;         break;       }     }     boolean insert_ok=shove_trace_algo.shove_trace_insert(curr_trace_shape,from_side,p_layer,p_net_no_arr,p_clearance_class_no,null,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth);     if (!insert_ok)     return null;   }   PlaPointInt new_corner=to_corner;   if (last_shape_no < trace_shapes_count) {     ShapeTile last_trace_shape=trace_shapes.get(last_shape_no);     int sample_width=2 * get_min_trace_half_width();     PlaPointFloat last_corner=new_polyline.corner_approx(last_shape_no + 1);     PlaPointFloat prev_last_corner=new_polyline.corner_approx(last_shape_no);     double last_segment_length=last_corner.distance(prev_last_corner);     if (last_segment_length > 100 * sample_width) {       return from_corner;     }     int shape_index=combined_polyline.corner_count() - trace_shapes_count - 1 + last_shape_no;     if (last_segment_length > sample_width) {       new_polyline=new_polyline.shorten(new_polyline.plaline_len(-(trace_shapes_count - last_shape_no - 1)),sample_width);       PlaPoint new_last_corner_point=new_polyline.corner_last();       if (new_last_corner_point.is_rational()) {         System.out.println(\"insert_trace: A IntPoint wanted\");         return from_corner;       }       new_corner=new_last_corner_point.round();       if (picked_trace == null) {         combined_polyline=new_polyline;       }  else {         BrdTracep combine_trace=(BrdTracep)picked_trace;         combined_polyline=new_polyline.combine(combine_trace.polyline());       }       if (!combined_polyline.is_valid())       return new_corner;       shape_index=combined_polyline.plaline_len(-3);       last_trace_shape=combined_polyline.offset_shape(compensated_half_width,shape_index);     }     BrdFromSide from_side=new BrdFromSide(combined_polyline,shape_index,last_trace_shape);     boolean check_shove_ok=shove_trace_algo.shove_trace_check(last_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_time_limit);     if (!check_shove_ok)     return from_corner;     boolean insert_ok=shove_trace_algo.shove_trace_insert(last_trace_shape,from_side,p_layer,p_net_no_arr,p_clearance_class_no,null,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth);     if (!insert_ok) {       System.out.println(\"insert_trace: shove trace failed\");       return null;     }   }   for (int index=0; index < new_polyline.corner_count(); ++index) {     changed_area_join(new_polyline.corner_approx(index),p_layer);   }   BrdTracep new_trace=insert_trace_without_cleaning(new_polyline,p_layer,p_half_width,p_net_no_arr,p_clearance_class_no,ItemFixState.UNFIXED);   new_trace.combine(20);   NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;   TimeLimitStoppable t_limit=new TimeLimitStoppable(10,null);   AlgoPullTight pull_tight_algo=AlgoPullTight.get_instance(this,opt_net_no_arr,p_pullt_min_move,t_limit,new BrdKeepPoint(new_corner,p_layer));   if (new_trace.normalize(changed_area.get_area(p_layer))) {     pull_tight_algo.split_traces_keep_point();     ItemSelectionFilter item_filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);     Set<BrdItem> curr_picked_items=pick_items(new_corner,p_layer,item_filter);     new_trace=null;     if (!curr_picked_items.isEmpty()) {       BrdItem found_trace=curr_picked_items.iterator().next();       if (found_trace instanceof BrdTracep) {         new_trace=(BrdTracep)found_trace;       }     }   }   if (new_trace != null)   new_trace.pull_tight(pull_tight_algo);   return new_corner; } "
"void remove(ThreadLocal<?> key){   cleanUp();   for (int index=key.hash & mask; ; index=next(index)) {     Object reference=table[index];     if (reference == key.reference) {       table[index]=TOMBSTONE;       table[index + 1]=null;       tombstones++;       size--;       return;     }     if (reference == null) {       return;     }   } } "
"@SuppressWarnings(\"unchecked\") public BackendTypeHelper(){   Utilities.initializeConfigurationFramework();   backends=new LinkedList<>();   for (  AbstractManagedObjectDefinition<?,?> backendType : PluggableBackendCfgDefn.getInstance().getAllChildren()) {     if (backendType instanceof ManagedObjectDefinition) {       final DefinedDefaultBehaviorProvider<String> defaultBehaviorProvider=(DefinedDefaultBehaviorProvider<String>)backendType.getPropertyDefinition(\"java-class\").getDefaultBehaviorProvider();       final Iterator<String> defaultBackendClassNameIterator=defaultBehaviorProvider.getDefaultValues().iterator();       if (!defaultBackendClassNameIterator.hasNext()) {         return;       }       addToBackendListIfClassExists(defaultBackendClassNameIterator.next(),(ManagedObjectDefinition<? extends BackendCfgClient,? extends BackendCfg>)backendType);     }   } } "
"private void appendNodeValue(String value,boolean forAttribute) throws IOException {   if (value == null) {     value=\"\";   }   write(Utils.escapeXML(value,forAttribute,true)); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.SpnegoContextTokenElement createSpnegoContextTokenElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SpnegoContextTokenElementImpl(); } "
"static void checkActorAndMustUnderstand(String actor,Boolean mustUnderstand,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {   if (actor != null && !supportedActors.contains(actor)) {     if (isServer) {       SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.BOGUS_ACTOR,messageID,null);       SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);       throw new SOAPFaultException(new Message(sf));     }  else {       throw new SOAPBindingException(bundle.getString(\"bogusActor\"));     }   }   if (mustUnderstand != null && !mustUnderstand.booleanValue()) {     if (isServer) {       SOAPFaultDetail sfd=new SOAPFaultDetail(SOAPFaultDetail.BOGUS_MUST_UNSTND,messageID,null);       SOAPFault sf=new SOAPFault(FAULT_CODE_SERVER,faultStringServerError,null,sfd);       throw new SOAPFaultException(new Message(sf));     }  else {       throw new SOAPBindingException(bundle.getString(\"bogusMustUnderstand\"));     }   } } "
"public Condition removeCondition(Condition condition){   String conditionName=getConditionName(condition);   if (conditionName != null) {     return (Condition)removeCondition(conditionName);   }   return null; } "
"public final void testRead02() throws IOException {   for (int ii=0; ii < algorithmName.length; ii++) {     try {       MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);       InputStream is=new ByteArrayInputStream(myMessage);       DigestInputStream dis=new DigestInputStream(is,md);       for (int i=0; i < MY_MESSAGE_LEN; i++) {         dis.read();       }       assertEquals(\"retval1\",-1,dis.read());       assertEquals(\"retval2\",-1,dis.read());       assertEquals(\"retval3\",-1,dis.read());       assertTrue(\"update\",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));       return;     }  catch (    NoSuchAlgorithmException e) {     }   }   fail(getName() + \": no MessageDigest algorithms available - test not performed\"); } "
"private void expandNode(Node currentNode){   Node neighbours[]=new Node[8];   neighbours[0]=new Node(currentNode.x + unit,currentNode.y);   neighbours[1]=new Node(currentNode.x + unit,currentNode.y + unit);   neighbours[2]=new Node(currentNode.x + unit,currentNode.y - unit);   neighbours[3]=new Node(currentNode.x - unit,currentNode.y);   neighbours[4]=new Node(currentNode.x - unit,currentNode.y + unit);   neighbours[5]=new Node(currentNode.x - unit,currentNode.y - unit);   neighbours[6]=new Node(currentNode.x,currentNode.y + unit);   neighbours[7]=new Node(currentNode.x,currentNode.y - unit);   for (  Node neighbour : neighbours) {     if (closedList.contains(neighbour) || !quadTree.isFilled(new Vector2(neighbour.x,neighbour.y))) {       continue;     }     neighbour.parent=currentNode;     if (!openList.contains(neighbour) || openList.contains(neighbour) && distance(openList.get(openList.indexOf(neighbour)),goal) > distance(neighbour,goal)) {       openList.add(neighbour);     }   } } "
"public static boolean isEncoded(ByteSequence value){   try {     decodeAuthPassword(value.toString());     return true;   }  catch (  Exception e) {     return false;   } } "
"public PdfDocument(PdfReader reader){   if (reader == null) {     throw new NullPointerException(\"reader\");   }   documentId=incrementDocumentId();   this.reader=reader;   this.properties=new StampingProperties();   open(null); } "
"public FrameBodyTOLY(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"@Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Throwable thrown){   if (!isLoggable(level)) {     return;   }   LogRecord lr=new LogRecord(level,msg);   lr.setSourceClassName(sourceClass);   lr.setSourceMethodName(sourceMethod);   lr.setThrown(thrown);   doLog(lr,bundleName); } "
"public StateInteractive select_items(PlaPointFloat p_location){   i_brd.display_layer_messsage();   Set<BrdItem> picked_items=i_brd.pick_items(p_location);   boolean something_found=(picked_items.size() > 0);   StateInteractive result;   if (something_found) {     result=StateSelectedItem.get_instance(picked_items,this,i_brd,this.actlog);     i_brd.screen_messages.set_status_message(resources.getString(\"in_select_mode\"));     actlog_start_scope(LogfileScope.START_SELECT,p_location);   }  else {     result=this;   }   i_brd.repaint();   return result; } "
"private String makeEscaped(String name){   int length=name.length();   if (length == 0) {     return name;   }   StringBuilder buf=new StringBuilder(length * 2);   for (int index=0; index < length; index++) {     char ch=name.charAt(index); switch (ch) { case ' ':       if (index == 0 || index == (length - 1)) {         buf.append('\\\\');       }     buf.append(' ');   break; case '\"': case '\\\\': hasQE=true; buf.append('\\\\'); buf.append(ch); break; case ',': case '+': case '<': case '>': case ';': case '#': case '=': buf.append('\\\\'); buf.append(ch); break; default : buf.append(ch); break; } } return buf.toString(); } "
"public String toXML(){   StringBuilder stringBuilder=new StringBuilder();   return stringBuilder.toString(); } "
"public boolean next(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"next\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     return $self.next();   }   finally {     _servant_postinvoke($so);   } } "
"public synchronized boolean isDesignTime(){   return designTime; } "
"public void create(Token token,ResultHandler<Token,?> handler) throws CoreTokenException {   Reject.ifNull(token);   try {     taskExecutor.execute(token.getTokenId(),taskFactory.create(token,handler));   }  catch (  DataLayerException e) {     throw new CoreTokenException(\"Error in data layer\",e);   } } "
"public synchronized Enumeration keys(){   return new Enumerator(KEYS,false); } "
"public static String lowerFirst(final String input) throws IllegalArgumentException {   if (input == null) {     throw new IllegalArgumentException(\"input can't be null\");   }   if (input.length() == 0) {     return \"\";   }   return head(input).map(null).map(null).get(); } "
"public void testCase02_FrequencyChangePerformance() throws Exception {   long startTime=System.currentTimeMillis();   Log.i(TAG,\"[Performance test][FmRadio] decrease frequency start [\" + startTime + \"]\");   clickView(mButtonDecrease);   sleep(WAIT_UI_STATE_CHANGE);   startTime=System.currentTimeMillis();   Log.i(TAG,\"[Performance test][FmRadio] increase frequency start [\" + startTime + \"]\");   clickView(mButtonIncrease);   sleep(WAIT_UI_STATE_CHANGE); } "
"public void endElement(String uri,String localName,String qName) throws SAXException {   if (DEBUG)   System.out.println(\"TransformerHandlerImpl#endElement: \" + qName);   if (m_contentHandler != null) {     m_contentHandler.endElement(uri,localName,qName);   } } "
"public void addGraceLoginUseTime(final Date date){   setDateProperty(ADD_GRACE_LOGIN_USE_TIME,date); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_characterdatareplacedataexceedslengthofdata.class,args); } "
"public void testCertPathBuilder03() throws NoSuchAlgorithmException {   if (!PKIXSupport) {     fail(NotSupportMsg);     return;   }   for (int i=0; i < validValues.length; i++) {     CertPathBuilder cpb=CertPathBuilder.getInstance(validValues[i]);     assertEquals(\"Incorrect algorithm\",cpb.getAlgorithm(),validValues[i]);   } } "
"public OutputStreamWriter(OutputStream out,CharsetEncoder enc){   super(out);   if (enc == null)   throw new NullPointerException(\"charset encoder\");   se=StreamEncoder.forOutputStreamWriter(out,this,enc); } "
"public com.sun.identity.saml2.jaxb.xmlsig.KeyNameElement createKeyNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.xmlsig.impl.KeyNameElementImpl(value); } "
"public RadiusServiceConfig(boolean isEnabled,int port,ThreadPoolConfig poolCfg,ClientConfig... clientConfigs){   this.isEnabled=isEnabled;   this.port=port;   this.threadPoolConfig=poolCfg;   for (  final ClientConfig c : clientConfigs) {     this.clients.put(c.getIpaddr(),c);   } } "
"public boolean isDefaultButton(){   JRootPane root=SwingUtilities.getRootPane(this);   if (root != null) {     return root.getDefaultButton() == this;   }   return false; } "
"private JsonValue correlateTarget() throws SynchronizationException {   return correlateTarget(null); } "
"public void showNoAntennaDialog(){   NoAntennaDialog newFragment=NoAntennaDialog.newInstance();   newFragment.show(mFragmentManager,TAG_NO_ANTENNA);   mFragmentManager.executePendingTransactions(); } "
"Lexer(Compiler compiler,PrefixResolver resolver,XPathParser xpathProcessor){   m_compiler=compiler;   m_namespaceContext=resolver;   m_processor=xpathProcessor; } "
"public void compose(StylesheetRoot sroot) throws TransformerException {   super.compose(sroot);   int length=getParamElemCount();   for (int i=0; i < length; i++) {     ElemWithParam ewp=getParamElem(i);     ewp.compose(sroot);   }   if ((null != m_templateName) && (null == m_template)) {     m_template=this.getStylesheetRoot().getTemplateComposed(m_templateName);     if (null == m_template) {       String themsg=XSLMessages.createMessage(XSLTErrorResources.ER_ELEMTEMPLATEELEM_ERR,new Object[]{m_templateName});       throw new TransformerException(themsg,this);     }     length=getParamElemCount();     for (int i=0; i < length; i++) {       ElemWithParam ewp=getParamElem(i);       ewp.m_index=-1;       int etePos=0;       for (ElemTemplateElement ete=m_template.getFirstChildElem(); null != ete; ete=ete.getNextSiblingElem()) {         if (ete.getXSLToken() == Constants.ELEMNAME_PARAMVARIABLE) {           ElemParam ep=(ElemParam)ete;           if (ep.getName().equals(ewp.getName())) {             ewp.m_index=etePos;           }         }  else         break;         etePos++;       }     }   } } "
"private TestCaseUtils(){ } "
"public synchronized int capacity(){   return elementData.length; } "
"private static synchronized void createReplayThreads(){   replayThreads.clear();   ReentrantLock switchQueueLock=new ReentrantLock();   for (int i=0; i < replayThreadNumber; i++) {     ReplayThread replayThread=new ReplayThread(updateToReplayQueue,switchQueueLock);     replayThread.start();     replayThreads.add(replayThread);   } } "
"public void addProgressUpdateListener(ProgressUpdateListener l){   listeners.add(l); } "
"public static String byteToHex(final byte b){   return com.forgerock.opendj.util.StaticUtils.byteToHex(b); } "
"public static String escapeColonInString(String str){   if (str != null) {     if (str.indexOf(\":\") >= 0) {       str=str.replaceAll(\":\",\"&#58;\");     }   }   return str; } "
"public Object deliverMoreNodes(boolean parsemore){   if (fNoMoreEvents)   return Boolean.FALSE;   try {     Object result=fCoroutineManager.co_resume(parsemore ? Boolean.TRUE : Boolean.FALSE,fControllerCoroutineID,fSourceCoroutineID);     if (result == Boolean.FALSE)     fCoroutineManager.co_exit(fControllerCoroutineID);     return result;   }  catch (  NoSuchMethodException e) {     return e;   } } "
"public void runTest() throws Throwable {   Document doc;   Element elementNode;   String elementName;   doc=(Document)load(\"hc_staff\",false);   elementNode=doc.getDocumentElement();   elementName=elementNode.getNodeName();   if ((\"image/svg+xml\".equals(getContentType()))) {     assertEquals(\"svgNodeName\",\"svg\",elementName);   }  else {     assertEqualsAutoCase(\"element\",\"nodeName\",\"html\",elementName);   } } "
"protected Sides(int value){   super(value); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node testEmployee;   Node textNode;   String localName;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagName(\"employeeId\");   testEmployee=elementList.item(0);   textNode=testEmployee.getFirstChild();   localName=textNode.getLocalName();   assertNull(\"textNodeLocalName\",localName); } "
"public void addPropertyChangeListener(PropertyChangeListener listener){   support.addPropertyChangeListener(listener); } "
"protected void close(Connection dbConnection){   if (dbConnection == null)   return;   try {     preparedSizeSql.close();   }  catch (  Throwable f) {     ExceptionUtils.handleThrowable(f);   }   this.preparedSizeSql=null;   try {     preparedSaveSql.close();   }  catch (  Throwable f) {     ExceptionUtils.handleThrowable(f);   }   this.preparedSaveSql=null;   try {     preparedClearSql.close();   }  catch (  Throwable f) {     ExceptionUtils.handleThrowable(f);   }   try {     preparedRemoveSql.close();   }  catch (  Throwable f) {     ExceptionUtils.handleThrowable(f);   }   this.preparedRemoveSql=null;   try {     preparedLoadSql.close();   }  catch (  Throwable f) {     ExceptionUtils.handleThrowable(f);   }   this.preparedLoadSql=null;   try {     if (!dbConnection.getAutoCommit()) {       dbConnection.commit();     }   }  catch (  SQLException e) {     manager.getContext().getLogger().error(sm.getString(getStoreName() + \".commitSQLException\"),e);   }   try {     dbConnection.close();   }  catch (  SQLException e) {     manager.getContext().getLogger().error(sm.getString(getStoreName() + \".close\",e.toString()));   }  finally {     this.dbConnection=null;   } } "
"public static byte[] writeToArray(NSObject root) throws IOException {   ByteArrayOutputStream bout=new ByteArrayOutputStream();   write(bout,root);   return bout.toByteArray(); } "
"public ExpiredTokenException(){   super(401,\"expired_token\",\"The request contains a token no longer valid.\"); } "
"@Override public boolean equals(Object obj){   if (this == obj) {     return true;   }   if (obj instanceof MonthDay) {     MonthDay other=(MonthDay)obj;     return month == other.month && day == other.day;   }   return false; } "
"private void updateOver(boolean o){   boolean old=isRollover();   this.over=o && isEnabled();   boolean newo=isRollover();   if (shouldActLikeButton() && old != newo) {     comboBox.repaint();   } } "
"public Configuration(Installation install,File file){   if (install == null) {     throw new NullPointerException(\"config file cannot be null\");   }   if (file == null) {     throw new NullPointerException(\"config file cannot be null\");   }  else   if (!file.getName().startsWith(\"config.ldif\")) {     throw new IllegalArgumentException(\"file must be a config.ldif file\");   }   this.install=install;   this.file=file; } "
"public void ensureFileIsVisible(File f){   getUI().ensureFileIsVisible(this,f); } "
"@Override public String toString(){   return buffer.toString(); } "
"private void verifyTable(String database,String table){   Identifier tableId=new Identifier(database,table);   if (!tablesRepo.exists(tableId)) {     throw new ItemNotFoundException(\"Table not found: \" + tableId.toString());   } } "
"private static String[] tokenizeToStringArray(String str,String delimiters){   if (str == null) {     return null;   }   StringTokenizer st=new StringTokenizer(str,delimiters);   List<String> tokens=new ArrayList<String>();   while (st.hasMoreTokens()) {     String token=st.nextToken();     token=token.trim();     if (token.length() > 0) {       tokens.add(token);     }   }   return tokens.toArray(new String[tokens.size()]); } "
"protected void cleanUpReplicationServersDB() throws Exception {   for (  ReplicationServer rs : ReplicationServer.getAllInstances()) {     clearChangelogDB(rs);   } } "
"public void insertRow(final int row,final Object[] rowData){   insertRow(row,convertToVector(rowData)); } "
"public void testMac12() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {   if (!DEFSupported) {     fail(NotSupportedMsg);     return;   }   Mac[] macs=createMacs();   assertNotNull(\"Mac objects were not created\",macs);   byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};   byte[] upd={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1,(byte)0};   SecretKeySpec scs=new SecretKeySpec(b,\"SHA1\");   for (int i=0; i < macs.length; i++) {     macs[i].init(scs);     byte[] res1=macs[i].doFinal();     byte[] res2=macs[i].doFinal();     assertEquals(\"Results are not the same\",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));     res2=macs[i].doFinal(upd);     macs[i].update(upd);     res1=macs[i].doFinal();     assertEquals(\"Results are not the same\",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String substring;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"name\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   substring=child.substringData(0,8);   assertEquals(\"characterdataSubStringValueAssert\",\"Margaret\",substring); } "
"public boolean isCodeAttribute(){   return false; } "
"public static boolean startsWith(String s1,String s2){   if (s1 == null || s2 == null) {     return false;   }   return s1.startsWith(s2); } "
"Route flipTlsMode(){   return new Route(address,proxy,inetSocketAddress,!modernTls); } "
"public void requestPasswordChangedTime(){   operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_CHANGED_TIME); } "
"public void sizeWidthToFit(){   if (headerRenderer == null) {     return;   }   Component c=headerRenderer.getTableCellRendererComponent(null,getHeaderValue(),false,false,0,0);   setMinWidth(c.getMinimumSize().width);   setMaxWidth(c.getMaximumSize().width);   setPreferredWidth(c.getPreferredSize().width);   setWidth(getPreferredWidth()); } "
"public boolean inUse(){   return !messageQueue.isEmpty(); } "
"static public String encode(byte[] data){   char[] out=new char[((data.length + 2) / 3) * 4];   for (int i=0, index=0; i < data.length; i+=3, index+=4) {     boolean quad=false;     boolean trip=false;     int val=(0xFF & (int)data[i]);     val<<=8;     if ((i + 1) < data.length) {       val|=(0xFF & (int)data[i + 1]);       trip=true;     }     val<<=8;     if ((i + 2) < data.length) {       val|=(0xFF & (int)data[i + 2]);       quad=true;     }     out[index + 3]=alphabet[(quad ? (val & 0x3F) : 64)];     val>>=6;     out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];     val>>=6;     out[index + 1]=alphabet[val & 0x3F];     val>>=6;     out[index + 0]=alphabet[val & 0x3F];   }   return new String(out); } "
"private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){   if (source[srcOffset + 2] == EQUALS_SIGN) {     int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);     destination[destOffset]=(byte)(outBuff >>> 16);     return 1;   }  else   if (source[srcOffset + 3] == EQUALS_SIGN) {     int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);     destination[destOffset]=(byte)(outBuff >>> 16);     destination[destOffset + 1]=(byte)(outBuff >>> 8);     return 2;   }  else {     int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);     destination[destOffset]=(byte)(outBuff >> 16);     destination[destOffset + 1]=(byte)(outBuff >> 8);     destination[destOffset + 2]=(byte)(outBuff);     return 3;   } } "
"void readMessages() throws IOException {   if (rxTime == 0) {     rxTime=System.currentTimeMillis();   }   MessageInfo info=channel.receive(rxBuffer,null,null);   if (info == null) {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"SCTP read-event but no message\");     }     return;   }  else   if (info.bytes() == -1) {     logger.logWarning(\"SCTP peer closed, closing too...\");     this.close();     return;   }  else   if (!info.isComplete()) {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"SCTP incomplete message; bytes=\" + info.bytes());     }     return;   }  else {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"SCTP message now complete; bytes=\" + info.bytes());     }   }   byte[] msg=new byte[rxBuffer.position()];   rxBuffer.flip();   rxBuffer.get(msg);   rxBuffer.compact();   try {     SIPMessage m=parser.parseSIPMessage(msg,true,true,this);     this.processMessage(m,rxTime);     rxTime=0;   }  catch (  ParseException e) {     logger.logException(e);     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"Invalid message bytes=\" + msg.length + \":\"+ new String(msg));     }     this.close();     throw new IOException(\"Error parsing incoming SCTP message\",e);   } } "
"public Div add(Image element){   childElements.add(element);   return this; } "
"public String formatLoginURL(String loginUrl,String authnContext){   FSUtils.debug.message(\"FSSSOAndFedHandler.formatLoginURL: Called\");   try {     if (loginUrl == null) {       FSUtils.debug.error(\"FSSSOAndFedHandler.formatLoginURL: \");       return null;     }     String ssoUrl=hostedDesc.getSingleSignOnServiceURL();     StringBuffer returnUrl=new StringBuffer(ssoUrl);     if (ssoUrl.indexOf('?') == -1) {       returnUrl.append(\"?\");     }  else {       returnUrl.append(\"&\");     }     returnUrl.append(IFSConstants.AUTHN_INDICATOR_PARAM).append(\"=\").append(IFSConstants.AUTHN_INDICATOR_VALUE).append(\"&\").append(IFSConstants.AUTHN_CONTEXT).append(\"=\").append(URLEncDec.encode(authnContext)).append(\"&\").append(IFSConstants.REALM).append(\"=\").append(URLEncDec.encode(realm)).append(\"&\").append(IFSConstants.PROVIDER_ID_KEY).append(\"=\").append(URLEncDec.encode(hostedEntityId)).append(\"&\").append(IFSConstants.META_ALIAS).append(\"=\").append(URLEncDec.encode(metaAlias)).append(\"&\").append(IFSConstants.AUTH_REQUEST_ID).append(\"=\").append(URLEncDec.encode(authnRequest.getRequestID()));     String postLoginUrl=FSServiceUtils.getBaseURL(request) + IFSConstants.POST_LOGIN_PAGE;     StringBuffer gotoUrl=new StringBuffer(postLoginUrl);     if (postLoginUrl.indexOf('?') == -1) {       gotoUrl.append(\"?\");     }  else {       gotoUrl.append(\"&\");     }     gotoUrl.append(IFSConstants.LRURL).append(\"=\").append(URLEncDec.encode(returnUrl.toString())).append(\"&\").append(IFSConstants.SSOKEY).append(\"=\").append(IFSConstants.SSOVALUE).append(\"&\").append(IFSConstants.META_ALIAS).append(\"=\").append(metaAlias);     StringBuffer redirectUrl=new StringBuffer(100);     redirectUrl.append(loginUrl);     if (loginUrl.indexOf('?') == -1) {       redirectUrl.append(\"?\");     }  else {       redirectUrl.append(\"&\");     }     redirectUrl.append(IFSConstants.GOTO_URL_PARAM).append(\"=\").append(URLEncDec.encode(gotoUrl.toString()));     redirectUrl.append(\"&\").append(IFSConstants.ORGKEY).append(\"=\").append(URLEncDec.encode(realm));     int len=redirectUrl.length() - 1;     if (redirectUrl.charAt(len) == '&') {       redirectUrl=redirectUrl.deleteCharAt(len);     }     return redirectUrl.toString();   }  catch (  Exception e) {     FSUtils.debug.error(\"FSSSOAndFedHandler.formatLoginURL: Exception: \",e);     return null;   } } "
"public static int showConfirmDialog(Component parentComponent,Object message) throws HeadlessException {   return showConfirmDialog(parentComponent,message,UIManager.getString(\"OptionPane.titleText\"),YES_NO_CANCEL_OPTION); } "
"public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){   super(message,locator,e); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   int context=xctxt.getCurrentNode();   DTMIterator nl=m_functionExpr.asIterator(xctxt,context);   XNumber score=SCORE_NONE;   if (null != nl) {     int n;     while (DTM.NULL != (n=nl.nextNode())) {       score=(n == context) ? SCORE_OTHER : SCORE_NONE;       if (score == SCORE_OTHER) {         context=n;         break;       }     }     nl.detach();   }   return score; } "
"private long tryDecReaderOverflow(long s){   if ((s & ABITS) == RFULL) {     if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {       int r;       long next;       if ((r=readerOverflow) > 0) {         readerOverflow=r - 1;         next=s;       }  else       next=s - RUNIT;       state=next;       return next;     }   }  else   if ((LockSupport.nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();   return 0L; } "
"protected final XObject executeRelativePathPattern(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {   XObject score=NodeTest.SCORE_NONE;   int context=currentNode;   DTMAxisTraverser traverser;   traverser=dtm.getAxisTraverser(m_axis);   for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {     try {       xctxt.pushCurrentNode(relative);       score=execute(xctxt);       if (score != NodeTest.SCORE_NONE)       break;     }   finally {       xctxt.popCurrentNode();     }   }   return score; } "
"public final boolean isRunningOnEmulator(){   boolean isGenyMotion=Build.MANUFACTURER.contains(\"Genymotion\") || Build.PRODUCT.contains(\"vbox86p\") || Build.DEVICE.contains(\"vbox86p\")|| Build.HARDWARE.contains(\"vbox86\");   boolean isGenericEmulator=Build.BRAND.contains(\"generic\") || Build.DEVICE.contains(\"generic\") || Build.PRODUCT.contains(\"sdk\")|| Build.HARDWARE.contains(\"goldfish\");   return isGenericEmulator || isGenyMotion; } "
"public FSAccountFedInfo readAccountFedInfo(String userID,String providerID) throws FSAccountMgmtException {   return readAccountFedInfo(userID,providerID,null); } "
"public void entityReference(String name) throws org.xml.sax.SAXException {   if (m_elemContext.m_startTagOpen) {     closeStartTag();     m_elemContext.m_startTagOpen=false;   }   try {     if (shouldIndent())     indent();     final java.io.Writer writer=m_writer;     writer.write('&');     writer.write(name);     writer.write(';');   }  catch (  IOException e) {     throw new SAXException(e);   }   if (m_tracer != null)   super.fireEntityReference(name); } "
"public boolean containsAttribute(Object name,Object value){   return value.equals(getAttribute(name)); } "
"public static void main(final String[] args){   final int retCode=new LDIFModify().run(args);   System.exit(filterExitCode(retCode)); } "
"public void execute(TransformerImpl transformer) throws TransformerException {   int sourceNode=transformer.getXPathContext().getCurrentNode();   XObject var=getValue(transformer,sourceNode);   transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var); } "
"public FramedProtocolAttribute(int framing){   super(OctetUtils.toOctets(AttributeType.FRAMED_PROTOCOL,framing));   this.framing=framing; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hasAttribute02.class,args); } "
"private void load(String[] arguments) throws Exception {   String methodName=\"load\";   Object param[];   Class<?> paramTypes[];   if (arguments == null || arguments.length == 0) {     paramTypes=null;     param=null;   }  else {     paramTypes=new Class[1];     paramTypes[0]=arguments.getClass();     param=new Object[1];     param[0]=arguments;   }   Method method=catalinaDaemon.getClass().getMethod(methodName,paramTypes);   if (log.isDebugEnabled())   log.debug(\"Calling startup class \" + method);   method.invoke(catalinaDaemon,param); } "
"private static boolean classExists(final String className){   try {     Class.forName(className);     return true;   }  catch (  ClassNotFoundException|ClassCastException e) {     return false;   } } "
"protected void installListeners(){   pcl=createPropertyChangeListener();   desktop.addPropertyChangeListener(pcl); } "
"public void removeSharedOrganizationNames(Set names) throws SMSException, SSOException { } "
"public synchronized void deleteObservers(){   obs.removeAllElements(); } "
"@Override public void addApplicationListener(String listener){ synchronized (applicationListenersLock) {     String results[]=new String[applicationListeners.length + 1];     for (int i=0; i < applicationListeners.length; i++) {       if (listener.equals(applicationListeners[i])) {         log.info(sm.getString(\"standardContext.duplicateListener\",listener));         return;       }       results[i]=applicationListeners[i];     }     results[applicationListeners.length]=listener;     applicationListeners=results;   }   fireContainerEvent(\"addApplicationListener\",listener); } "
"public void applyModification(Modification mod,boolean relaxConstraints) throws DirectoryException {   AttributeType t=mod.getAttribute().getAttributeDescription().getAttributeType();   if (t.isObjectClass()) {     applyModificationToObjectclass(mod,relaxConstraints);   }  else {     applyModificationToNonObjectclass(mod,relaxConstraints);   } } "
"public Enumeration depthFirstEnumeration(){   return postorderEnumeration(); } "
"public void testNegPos(){   byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   byte bBytes[]={0};   int aSign=-1;   int bSign=0;   byte rBytes[]={-1,1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.or(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public static String generateThreadDump(){   final StringBuilder dump=new StringBuilder();   final ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();   final ThreadInfo[] threadInfos=threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(),100);   for (  ThreadInfo threadInfo : threadInfos) {     dump.append('\"');     dump.append(threadInfo.getThreadName());     dump.append(\"\\\" \");     final Thread.State state=threadInfo.getThreadState();     dump.append(\"\\n   java.lang.Thread.State: \");     dump.append(state);     final StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();     for (    final StackTraceElement stackTraceElement : stackTraceElements) {       dump.append(\"\\n        at \");       dump.append(stackTraceElement);     }     dump.append(\"\\n\\n\");   }   return dump.toString(); } "
"public static int toRealPosition(int position,int count){   position=position - 1;   if (position < 0) {     position+=count;   }  else {     position=position % count;   }   return position; } "
"public Boolean isAutoStopTimeEnabled(){   return autoStopTimeEnable; } "
"private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){   Intent intent=new Intent(Intent.ACTION_INSERT);   intent.setType(\"vnd.android.cursor.item/event\");   long startMilliseconds=start.getTime();   intent.putExtra(\"beginTime\",startMilliseconds);   if (allDay) {     intent.putExtra(\"allDay\",true);   }   long endMilliseconds;   if (end == null) {     if (allDay) {       endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;     }  else {       endMilliseconds=startMilliseconds;     }   }  else {     endMilliseconds=end.getTime();   }   intent.putExtra(\"endTime\",endMilliseconds);   intent.putExtra(\"title\",summary);   intent.putExtra(\"eventLocation\",location);   intent.putExtra(\"description\",description);   if (attendees != null) {     intent.putExtra(Intent.EXTRA_EMAIL,attendees);   }   try {     rawLaunchIntent(intent);   }  catch (  ActivityNotFoundException anfe) {     Log.w(TAG,\"No calendar app available that responds to \" + Intent.ACTION_INSERT);     intent.setAction(Intent.ACTION_EDIT);     launchIntent(intent);   } } "
"private void showDlgAttributes(){   RuleBuilder.instance().resetFilterPath();   Intent intent=new Intent();   intent.setClass(getApplicationContext(),ActivityDlgAttributes.class);   startActivityForResult(intent,REQUEST_ADD_FILTER); } "
"private static int base64toInt(char c,byte[] alphaToInt){   int result=alphaToInt[c];   if (result < 0)   throw new IllegalArgumentException(\"Illegal character \" + c);   return result; } "
"private static SearchScope elaborateScopeForSearchInSubordinates(SearchScope currentScope){ switch (currentScope.asEnum()) { case BASE_OBJECT:     return null; case SINGLE_LEVEL:   return SearchScope.BASE_OBJECT; case SUBORDINATES: case WHOLE_SUBTREE: return SearchScope.WHOLE_SUBTREE; default : return currentScope; } } "
"public SQLDataException(String reason,String sqlState,int vendorCode){   super(reason,sqlState,vendorCode); } "
"public void addToRequestQueue(CLIRequest request){   requestQueue.add(request); } "
"@Override public String toXMLString() throws SAML2Exception {   return this.toXMLString(true,false); } "
"public String toString(){   String modelString=\"value=\" + getValue() + \", \"+ \"extent=\"+ getExtent()+ \", \"+ \"min=\"+ getMinimum()+ \", \"+ \"max=\"+ getMaximum()+ \", \"+ \"adj=\"+ getValueIsAdjusting();   return getClass().getName() + \"[\" + modelString+ \"]\"; } "
"public Object clone(){   QualifiedCollection theClone=null;   try {     theClone=(QualifiedCollection)super.clone();   }  catch (  CloneNotSupportedException ingnored) {   }   if (theClone != null) {     theClone.setCollection(getCollection());     theClone.setExclusive(isExclusive());   }   return theClone; } "
"protected void copyPrimitives(AbstractID3v2Tag copyObj){   logger.config(\"Copying primitives\");   super.copyPrimitives(copyObj);   if (copyObj instanceof ID3v24Tag) {     ID3v24Tag copyObject=(ID3v24Tag)copyObj;     this.footer=copyObject.footer;     this.tagRestriction=copyObject.tagRestriction;     this.updateTag=copyObject.updateTag;     this.imageEncodingRestriction=copyObject.imageEncodingRestriction;     this.imageSizeRestriction=copyObject.imageSizeRestriction;     this.tagSizeRestriction=copyObject.tagSizeRestriction;     this.textEncodingRestriction=copyObject.textEncodingRestriction;     this.textFieldSizeRestriction=copyObject.textFieldSizeRestriction;   } } "
"private Executors(){ } "
"public static int countAll(){   return getPersistence().countAll(); } "
"public void testCheckValidity1() throws CertificateExpiredException, CertificateNotYetValidException, java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException {   if (this.cert == null) {     return;   }   Date date=new Date();   Date nb_date=tbt_cert.getNotBefore();   Date na_date=tbt_cert.getNotAfter();   try {     tbt_cert.checkValidity();     assertFalse(\"CertificateExpiredException expected\",date.compareTo(na_date) > 0);     assertFalse(\"CertificateNotYetValidException expected\",date.compareTo(nb_date) < 0);   }  catch (  CertificateExpiredException e) {     assertTrue(\"Unexpected CertificateExpiredException was thrown\",date.compareTo(na_date) > 0);   } catch (  CertificateNotYetValidException e) {     assertTrue(\"Unexpected CertificateNotYetValidException was thrown\",date.compareTo(nb_date) < 0);   }   try {     tbt_cert.checkValidity();   }  catch (  CertificateExpiredException e) {   }   try {     cert.checkValidity();   }  catch (  java.security.cert.CertificateExpiredException e) {   } } "
"private void handlePossibleCancellationInterrupt(int s){   if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield(); } "
"private void fireMenuKeyTyped(MenuKeyEvent event){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == MenuKeyListener.class) {       ((MenuKeyListener)listeners[i + 1]).menuKeyTyped(event);     }   } } "
"private int checkInterruptWhileWaiting(Node node){   return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; } "
"public com.sun.identity.wsfederation.jaxb.xmlsig.SignedInfoElement createSignedInfoElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignedInfoElementImpl(); } "
"public boolean isRoot(){   return getParent() == null; } "
"private void writeObject(ObjectOutputStream out) throws IOException {   if (diff == null) {     out.writeBoolean(false);   }  else {     out.writeBoolean(false);     out.writeUTF(diff);   } } "
"private Map<String,EntryListeners> exportListeners(){   final Map<String,EntryListeners> listenersCopy=new HashMap<>();   for (  Map.Entry<DN,EntryListeners> entry : listeners.entrySet()) {     listenersCopy.put(entry.getKey().toString(),entry.getValue());   }   return listenersCopy; } "
"public void testCase15(){   byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};   byte bBytes[]={10,20,30,40,50,60,70,10,20,30};   int aSign=-1;   int bSign=-1;   byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.subtract(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(-1,result.signum()); } "
"public InvalidScopeException(final String message,final UrlLocation parameterLocation){   super(400,\"invalid_scope\",message,parameterLocation); } "
"public int count(){   return dict.size(); } "
"void pack(){   Component component=getComponent();   if (component instanceof Window) {     ((Window)component).pack();   } } "
"private IVGenerator(){ } "
"public boolean isApplicableAddDel(AciTargetMatchContext matchCtx){   TargAttrFilterList attrFilterList=getTargAttrFilterList(matchCtx);   if (attrFilterList == null) {     return true;   }   Map<AttributeType,SearchFilter> filterList=attrFilterList.getAttributeTypeFilterList();   Entry resEntry=matchCtx.getResourceEntry();   for (  Map.Entry<AttributeType,SearchFilter> e : filterList.entrySet()) {     AttributeType attrType=e.getKey();     SearchFilter f=e.getValue();     if (!matchFilterAttributeType(resEntry,attrType,f)) {       return revertForInequalityOperator(op,false);     }   }   return revertForInequalityOperator(op,true); } "
"public String toString(){   return str; } "
"void fullyLock(){   putLock.lock();   takeLock.lock(); } "
"public String toXMLString() throws SAML2Exception {   return this.toXMLString(true,false); } "
"@Transient public boolean isCompositionEnabled(){   return false; } "
"public String toString(){   return toString(true,false); } "
"public void test_setEndRuleIIIIZ(){   SimpleTimeZone st=new SimpleTimeZone(1000,\"Test_TZ\");   st.setStartRule(Calendar.NOVEMBER,8,Calendar.SUNDAY,1,false);   st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,1,true);   assertTrue(\"StartRule improperly set1\",st.useDaylightTime());   assertTrue(\"StartRule improperly set2\",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,7,12,0).getTime())));   assertTrue(\"StartRule improperly set3\",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,20,12,0).getTime())));   assertTrue(\"StartRule improperly set4\",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,6,12,0).getTime())));   assertTrue(\"StartRule improperly set5\",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,21,12,0).getTime())));   try {     st.setEndRule(20,15,Calendar.SUNDAY,1,true);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setEndRule(Calendar.NOVEMBER,35,Calendar.SUNDAY,1,true);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setEndRule(Calendar.NOVEMBER,15,12,1,true);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,-1,true);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   } } "
"protected AbstractString(String identifier,AbstractTagFrameBody frameBody){   super(identifier,frameBody); } "
"public com.sun.identity.liberty.ws.common.jaxb.protocol.SubjectQueryAbstractType createSubjectQueryAbstractType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.SubjectQueryAbstractTypeImpl(); } "
"public void addReferral(String referralName,Referral referral) throws NameAlreadyExistsException {   if (referralName == null) {     referralName=\"Referral:\" + ServiceTypeManager.generateRandomName();   }   if (referrals.containsKey(referralName)) {     String[] objs={referralName};     throw (new NameAlreadyExistsException(ResBundleUtils.rbName,\"name_already_present\",objs,referralName,PolicyException.REFERRAL_COLLECTION));   }   referrals.put(referralName,referral); } "
"int processDataRead(){   if (bindInProgress.get() || startTLSInProgress.get()) {     return 0;   }   try {     int result=asn1Reader.processChannelData();     if (result < 0) {       disconnect(DisconnectReason.CLIENT_DISCONNECT,false,null);       return -1;     }     return result;   }  catch (  Exception e) {     logger.traceException(e);     if (asn1Reader.hasRemainingData() || e instanceof SSLException) {       LocalizableMessage m=ERR_LDAP_CLIENT_IO_ERROR_DURING_READ.get(e);       disconnect(DisconnectReason.IO_ERROR,true,m);     }  else {       LocalizableMessage m=ERR_LDAP_CLIENT_IO_ERROR_BEFORE_READ.get();       disconnect(DisconnectReason.CLIENT_DISCONNECT,true,m);     }     return -1;   } } "
"@NonNull public static Interpolator multiply(Interpolator first,Interpolator second){   return new MultiplyInterpolator(first,second); } "
"@Override public void bind(Name name,Object obj) throws NamingException {   getBoundContext().bind(parseName(name),obj); } "
"public static SetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SetRelationDefinition<?,?> r) throws ArgumentException {   return new SetPropSubCommandHandler(parser,path.child(r),r); } "
"public CustomObjectInputStream(InputStream stream,ClassLoader classLoader,Log log,Pattern allowedClassNamePattern,boolean warnOnFailure) throws IOException {   super(stream);   if (log == null && allowedClassNamePattern != null && warnOnFailure) {     throw new IllegalArgumentException(sm.getString(\"customObjectInputStream.logRequired\"));   }   this.classLoader=classLoader;   this.log=log;   this.allowedClassNamePattern=allowedClassNamePattern;   if (allowedClassNamePattern == null) {     this.allowedClassNameFilter=null;   }  else {     this.allowedClassNameFilter=allowedClassNamePattern.toString();   }   this.warnOnFailure=warnOnFailure;   Set<String> reportedClasses; synchronized (reportedClassCache) {     reportedClasses=reportedClassCache.get(classLoader);   }   if (reportedClasses == null) {     reportedClasses=Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>()); synchronized (reportedClassCache) {       Set<String> original=reportedClassCache.get(classLoader);       if (original == null) {         reportedClassCache.put(classLoader,reportedClasses);       }  else {         reportedClasses=original;       }     }   }   this.reportedClasses=reportedClasses; } "
"public static <T>void find(ManagedObjectPath<?,?> path,PropertyDefinition<T> pd,Collection<DN> dependencies){   Visitor<T> v=new Visitor<>(dependencies);   DefaultBehaviorProvider<T> db=pd.getDefaultBehaviorProvider();   db.accept(v,path); } "
"private void parseMinorVersion(String minorVer) throws SAMLException {   try {     minorVersion=Integer.parseInt(minorVer);   }  catch (  NumberFormatException e) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"Request(Element): invalid \" + \"MinorVersion\",e);     }     throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,\"wrongInput\",null);   }   if (minorVersion > IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {     FSUtils.debug.error(\"Request(Element): MinorVersion\" + \" of the Request is too high.\");     throw new SAMLRequestVersionTooHighException(FSUtils.BUNDLE_NAME,\"requestVersionTooHigh\",null);   }  else   if (minorVersion < IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {     FSUtils.debug.error(\"Request(Element): MinorVersion\" + \" of the Request is too low.\");     throw new SAMLRequestVersionTooLowException(FSUtils.BUNDLE_NAME,\"requestVersionTooLow\",null);   } } "
"protected AbstractIntSpliterator(long est,int additionalCharacteristics){   this.est=est;   this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics; } "
"public void fixupVariables(java.util.Vector vars,int globalsSize){   super.fixupVariables(vars,globalsSize);   m_expr.fixupVariables(vars,globalsSize); } "
"public void testZeroOne(){   BigInteger aNumber=BigInteger.ZERO;   BigInteger bNumber=BigInteger.ONE;   BigInteger result=aNumber.and(bNumber);   assertTrue(result.equals(BigInteger.ZERO));   assertEquals(\"incorrect sign\",0,result.signum()); } "
"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {   s.defaultWriteObject();   for (Node<E> p=first(); p != null; p=succ(p)) {     Object item=p.item;     if (item != null)     s.writeObject(item);   }   s.writeObject(null); } "
"public PolicyEvaluationException(Throwable nestedException){   super(nestedException);   reqId=\"-1\"; } "
"public void testInsertPrepared() throws SQLException {   PreparedStatement stat=conn.prepareStatement(\"INSERT INTO \" + DatabaseCreator.TEST_TABLE5 + \" VALUES(?, ?)\");   stat.setInt(1,1);   stat.setString(2,\"1\");   stat.execute();   stat.setInt(1,2);   stat.setString(2,\"3\");   stat.execute();   ResultSet r=statement.executeQuery(\"SELECT COUNT(*) FROM \" + DatabaseCreator.TEST_TABLE5 + \" WHERE (testId = 1 AND testValue = '1') \"+ \"OR (testId = 2 AND testValue = '3')\");   r.next();   assertEquals(\"Incorrect number of records\",2,r.getInt(1));   r.close();   stat.close(); } "
"public void componentShown(ComponentEvent e){ } "
"public KeyBinding(KeyStroke key,String actionName){   this.key=key;   this.actionName=actionName; } "
"public static void assertNotNull(Object param) throws XMPException {   if (param == null) {     throw new XMPException(\"Parameter must not be null\",XMPError.BADPARAM);   }  else   if ((param instanceof String) && ((String)param).length() == 0) {     throw new XMPException(\"Parameter must not be null or empty\",XMPError.BADPARAM);   } } "
"public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){   super(Method.GET,url,null,listener,errorListener); } "
"public Builder withMessageDispatcherDuration(long duration){   config.setMessageDispatcherDuration(duration);   return this; } "
"protected void serializeCDATASection(CDATASection node) throws SAXException {   if ((fFeatures & WELLFORMED) != 0) {     isCDATASectionWellFormed(node);   }   if ((fFeatures & CDATA) != 0) {     String nodeValue=node.getNodeValue();     int endIndex=nodeValue.indexOf(\"]]>\");     if ((fFeatures & SPLITCDATA) != 0) {       if (endIndex >= 0) {         String relatedData=nodeValue.substring(0,endIndex + 2);         String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_WARNING,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT,null,relatedData,null));         }       }     }  else {       if (endIndex >= 0) {         String relatedData=nodeValue.substring(0,endIndex + 2);         String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT));         }         return;       }     }     if (!applyFilter(node,NodeFilter.SHOW_CDATA_SECTION)) {       return;     }     if (fLexicalHandler != null) {       fLexicalHandler.startCDATA();     }     dispatachChars(node);     if (fLexicalHandler != null) {       fLexicalHandler.endCDATA();     }   }  else {     dispatachChars(node);   } } "
"public void close() throws IOException {   in.close(); } "
"public int hashCode(){   return name.hashCode(); } "
"public AMInvalidDNException(String msg,String errorCode){   super(msg,errorCode); } "
"public LifetimeExceededException(final String message){   super(message); } "
"public void start(BundleContext context) throws Exception {   bc=context;   shellCommandsTracker=new ServiceTracker<CustomCommandScope,CustomCommandScope>(bc,bc.createFilter(\"(objectClass=\" + CustomCommandScope.class.getName() + \")\"),new ShellCommandsCustomizer());   shellCommandsTracker.open();   Dictionary<String,Object> props=new Hashtable<String,Object>();   props.put(CommandProcessor.COMMAND_SCOPE,\"debug\");   props.put(CommandProcessor.COMMAND_FUNCTION,DebugCommands.FUNCTIONS);   bc.registerService(DebugCommands.class.getName(),new DebugCommands(bc),props); } "
"public StateInteractive key_typed(char p_key_char){   StateInteractive result=this;   Point2D screen_mouse_pos=i_brd.gdi_context.coordinate_transform.board_to_screen(i_brd.get_current_mouse_position());   if (p_key_char == 'a') {     i_brd.get_panel().zoom_all();   }  else   if (p_key_char == 'c') {     i_brd.get_panel().center_display(screen_mouse_pos);   }  else   if (p_key_char == 'f') {     result=new StateSelectRegionZoom(this,i_brd,actlog,i_brd.get_current_mouse_position());   }  else   if (p_key_char == 'Z') {     i_brd.get_panel().zoom_out(screen_mouse_pos);   }  else   if (p_key_char == 'z') {     i_brd.get_panel().zoom_in(screen_mouse_pos);   }  else   if (p_key_char == ',') {     i_brd.get_panel().set_crosshair_cursor(!i_brd.get_panel().is_cross_hair_cursor());   }  else   if (p_key_char == '\\n' || p_key_char == ' ') {     result=complete();   }  else   if (p_key_char == java.awt.event.KeyEvent.VK_ESCAPE) {     result=cancel();   }  else   if (Character.isDigit(p_key_char)) {     board.BrdLayerStructure layer_structure=i_brd.get_routing_board().layer_structure;     int want=Character.digit(p_key_char,10);     want=Math.min(want,layer_structure.signal_layer_count());     want=Math.max(want - 1,0);     want=layer_structure.get_no(layer_structure.get_signal_layer(want));     i_brd.set_current_layer(want);   }   return result; } "
"public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {   if (DEBUG) {     System.out.println(\"startElement: uri: \" + uri + \", localname: \"+ localName+ \", qname: \"+ qName+ \", atts: \"+ attributes);     boolean DEBUG_ATTRS=true;     if (DEBUG_ATTRS & attributes != null) {       int n=attributes.getLength();       if (n == 0)       System.out.println(\"\\tempty attribute list\");  else       for (int i=0; i < n; i++)       System.out.println(\"\\t attr: uri: \" + attributes.getURI(i) + \", localname: \"+ attributes.getLocalName(i)+ \", qname: \"+ attributes.getQName(i)+ \", type: \"+ attributes.getType(i)+ \", value: \"+ attributes.getValue(i));     }   }   charactersFlush();   int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);   String prefix=getPrefix(qName,uri);   int prefixIndex=(null != prefix) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;   int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);   if (m_indexing)   indexNode(exName,elemNode);   m_parents.push(elemNode);   int startDecls=m_contextIndexes.peek();   int nDecls=m_prefixMappings.size();   int prev=DTM.NULL;   if (!m_pastFirstElement) {     prefix=\"xml\";     String declURL=\"http://www.w3.org/XML/1998/namespace\";     exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);     int val=m_valuesOrPrefixes.stringToIndex(declURL);     prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);     m_pastFirstElement=true;   }   for (int i=startDecls; i < nDecls; i+=2) {     prefix=(String)m_prefixMappings.elementAt(i);     if (prefix == null)     continue;     String declURL=(String)m_prefixMappings.elementAt(i + 1);     exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);     int val=m_valuesOrPrefixes.stringToIndex(declURL);     prev=addNode(DTM.NAMESPACE_NODE,exName,elemNode,prev,val,false);   }   int n=attributes.getLength();   for (int i=0; i < n; i++) {     String attrUri=attributes.getURI(i);     String attrQName=attributes.getQName(i);     String valString=attributes.getValue(i);     prefix=getPrefix(attrQName,attrUri);     int nodeType;     String attrLocalName=attributes.getLocalName(i);     if ((null != attrQName) && (attrQName.equals(\"xmlns\") || attrQName.startsWith(\"xmlns:\"))) {       if (declAlreadyDeclared(prefix))       continue;       nodeType=DTM.NAMESPACE_NODE;     }  else {       nodeType=DTM.ATTRIBUTE_NODE;       if (attributes.getType(i).equalsIgnoreCase(\"ID\"))       setIDAttribute(valString,elemNode);     }     if (null == valString)     valString=\"\";     int val=m_valuesOrPrefixes.stringToIndex(valString);     if (null != prefix) {       prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);       int dataIndex=m_data.size();       m_data.addElement(prefixIndex);       m_data.addElement(val);       val=-dataIndex;     }     exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);     prev=addNode(nodeType,exName,elemNode,prev,val,false);   }   if (DTM.NULL != prev)   m_nextsib.setElementAt(DTM.NULL,prev);   if (null != m_wsfilter) {     short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);     boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);     pushShouldStripWhitespace(shouldStrip);   }   m_previous=DTM.NULL;   m_contextIndexes.push(m_prefixMappings.size()); } "
"public static float readSwappedFloat(InputStream input) throws IOException {   return Float.intBitsToFloat(readSwappedInteger(input)); } "
"public void delete_selected_items(){   if (board_is_read_only)   return;   if (!is_StateSelectedItem())   return;   StateInteractive new_state=((StateSelectedItem)interactive_state).delete_items();   set_interactive_state(new_state); } "
"public SAMLResponderException(Throwable t){   super(t); } "
"public SOAPClientException(){   super(); } "
"public static Request parseXML(String xml) throws SAMLException {   Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);   Element root=doc.getDocumentElement();   return new FSRequest(root); } "
"public boolean hasString(){   return true; } "
"public int awaitAdvance(int phase){   final Phaser root=this.root;   long s=(root == this) ? state : reconcileState();   int p=(int)(s >>> PHASE_SHIFT);   if (phase < 0)   return phase;   if (p == phase)   return root.internalAwaitAdvance(phase,null);   return p; } "
"public void createDevice(Map attrValues) throws AMConsoleException {   String clientType=(String)AMAdminUtils.getValue((Set)attrValues.get(ATTRIBUTE_NAME_CLIENT_TYPE));   String[] param={clientType};   logEvent(\"ATTEMPT_CLIENT_DETECTION_CREATE_CLIENT\",param);   try {     validateClientType(clientType);     clientTypesManager.addClientExternal(getUserSSOToken(),attrValues);     logEvent(\"SUCCEED_CLIENT_DETECTION_CREATE_CLIENT\",param);   }  catch (  AMConsoleException e) {     String[] paramsEx={clientType,e.getMessage()};     logEvent(\"INVALID_CLIENT_TYPE_CLIENT_DETECTION_CREATE_CLIENT\",paramsEx);     throw e;   } catch (  AMClientCapException e) {     String strError=getErrorString(e);     String[] paramsEx={clientType,strError};     logEvent(\"CLIENT_SDK_EXCEPTION_CLIENT_DETECTION_CREATE_CLIENT\",paramsEx);     throw new AMConsoleException(strError);   } } "
"public boolean isCaptchaEnabled(){   return captchaEnabled; } "
"public void clear(){   m.clear(); } "
"public boolean equal(org.omg.DynamicAny.DynAny dyn_any){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"equal\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     return $self.equal(dyn_any);   }   finally {     _servant_postinvoke($so);   } } "
"protected JasperException handleJspException(Exception ex){   try {     Throwable realException=ex;     if (ex instanceof ServletException) {       realException=((ServletException)ex).getRootCause();     }     StackTraceElement[] frames=realException.getStackTrace();     StackTraceElement jspFrame=null;     for (int i=0; i < frames.length; ++i) {       if (frames[i].getClassName().equals(this.getServlet().getClass().getName())) {         jspFrame=frames[i];         break;       }     }     if (jspFrame == null || this.ctxt.getCompiler().getPageNodes() == null) {       return new JasperException(ex);     }     int javaLineNumber=jspFrame.getLineNumber();     JavacErrorDetail detail=ErrorDispatcher.createJavacError(jspFrame.getMethodName(),this.ctxt.getCompiler().getPageNodes(),null,javaLineNumber,ctxt);     int jspLineNumber=detail.getJspBeginLineNumber();     if (jspLineNumber < 1) {       throw new JasperException(ex);     }     if (options.getDisplaySourceFragment()) {       return new JasperException(Localizer.getMessage(\"jsp.exception\",detail.getJspFileName(),\"\" + jspLineNumber) + System.lineSeparator() + System.lineSeparator()+ detail.getJspExtract()+ System.lineSeparator()+ System.lineSeparator()+ \"Stacktrace:\",ex);     }     return new JasperException(Localizer.getMessage(\"jsp.exception\",detail.getJspFileName(),\"\" + jspLineNumber),ex);   }  catch (  Exception je) {     if (ex instanceof JasperException) {       return (JasperException)ex;     }     return new JasperException(ex);   } } "
"private void validateEntry(SSOToken token,CacheBlock cb) throws AMException {   if (!cb.hasExpiredAndUpdated() && !cb.isExists()) {     String dn=cb.getEntryDN();     boolean isPresent=super.doesEntryExists(token,dn);     if (debug.messageEnabled()) {       debug.message(\"CachedDirectoryServicesImpl.validateEntry():\" + \" DN \" + dn + \" got from DS & exists: \"+ isPresent);     }     if (isPresent) {       String rfcDN=LDAPUtils.formatToRFC(dn);       cb=new CacheBlock(rfcDN,isPresent);       sdkCache.put(rfcDN,cb);     }  else {       String locale=CommonUtils.getUserLocale(token);       Object args[]={dn};       throw new AMException(AMSDKBundle.getString(\"461\",args,locale),\"461\",args);     }   } } "
"void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){   inputLocals=new int[maxLocals];   inputStack=new int[0];   int i=0;   if ((access & Opcodes.ACC_STATIC) == 0) {     if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {       inputLocals[i++]=OBJECT | cw.addType(cw.thisName);     }  else {       inputLocals[i++]=UNINITIALIZED_THIS;     }   }   for (int j=0; j < args.length; ++j) {     int t=type(cw,args[j].getDescriptor());     inputLocals[i++]=t;     if (t == LONG || t == DOUBLE) {       inputLocals[i++]=TOP;     }   }   while (i < maxLocals) {     inputLocals[i++]=TOP;   } } "
"ReplicationEnvironment(final String rootPath,final ReplicationServer replicationServer,final TimeService timeService) throws ChangelogException {   this.replicationRootPath=rootPath;   this.replicationServer=replicationServer;   this.timeService=timeService;   this.changelogState=readOnDiskChangelogState();   this.cnIndexDBLastRotationTime=readOnDiskLastRotationTime(); } "
"public void testChooseClientAlias_Combinations() throws Exception {   test_ChooseClientAlias_KeyType(\"RSA\",\"RSA\",\"RSA\",true);   test_ChooseClientAlias_KeyType(\"RSA\",\"EC\",\"RSA\",true);   test_ChooseClientAlias_KeyType(\"RSA\",\"EC\",\"EC\",false);   test_ChooseClientAlias_KeyType(\"EC\",\"RSA\",\"EC_RSA\",true);   test_ChooseClientAlias_KeyType(\"EC\",\"EC\",\"EC_RSA\",false);   test_ChooseClientAlias_KeyType(\"EC\",\"EC\",\"EC_EC\",true);   test_ChooseClientAlias_KeyType(\"EC\",\"RSA\",\"EC_EC\",false);   test_ChooseClientAlias_KeyType(\"EC\",\"RSA\",\"RSA\",false); } "
"private void debugInfo(String tn,String s){   logger.trace(\"** TEST %s ** %s\",tn,s); } "
"public static boolean isDescendingFrom(Component a,Component b){   if (a == b)   return true;   for (Container p=a.getParent(); p != null; p=p.getParent())   if (p == b)   return true;   return false; } "
"public boolean isFocusTraversable(){   Component comp=getTextComponent();   if (comp instanceof JTextComponent) {     if (((JTextComponent)comp).isEditable()) {       return true;     }   }   return false; } "
"public void init(){   lastToken=firstToken=null; } "
"public DecisionImpl(String xml) throws XACMLException {   Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);   if (document != null) {     Element rootElement=document.getDocumentElement();     processElement(rootElement);     makeImmutable();   }  else {     XACMLSDKUtils.debug.error(\"DecisionImpl.processElement(): invalid XML input\");     throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString(\"errorObtainingElement\"));   } } "
"public final void add(final String problem,final Severity severity){   this.problems.add(new Problem(problem,severity));   this.hasFatal|=severity == Severity.FATAL; } "
"void append(final Object o){   templateValue.append(o); } "
"public static boolean hasBody(Response response){   if (response.request().method().equals(\"HEAD\")) {     return false;   }   int responseCode=response.code();   if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HTTP_NO_CONTENT && responseCode != HTTP_NOT_MODIFIED) {     return true;   }   if (OkHeaders.contentLength(response) != -1 || \"chunked\".equalsIgnoreCase(response.header(\"Transfer-Encoding\"))) {     return true;   }   return false; } "
"public void read(byte[] b,int off,int len,long pos) throws IOException {   if (b == null) {     throw new NullPointerException(\"b == null!\");   }   if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {     throw new IndexOutOfBoundsException();   }   if (pos + len > length) {     throw new IndexOutOfBoundsException();   }   long index=pos / BUFFER_LENGTH;   int offset=(int)pos % BUFFER_LENGTH;   while (len > 0) {     int nbytes=Math.min(len,BUFFER_LENGTH - offset);     byte[] buf=getCacheBlock(index++);     System.arraycopy(buf,offset,b,off,nbytes);     len-=nbytes;     off+=nbytes;     offset=0;   } } "
"public int size(){   return parameters.size(); } "
"public Vector processSortKeys(ElemForEach foreach,int sourceNodeContext) throws TransformerException {   Vector keys=null;   XPathContext xctxt=m_xcontext;   int nElems=foreach.getSortElemCount();   if (nElems > 0)   keys=new Vector();   for (int i=0; i < nElems; i++) {     ElemSort sort=foreach.getSortElem(i);     String langString=(null != sort.getLang()) ? sort.getLang().evaluate(xctxt,sourceNodeContext,foreach) : null;     String dataTypeString=sort.getDataType().evaluate(xctxt,sourceNodeContext,foreach);     if (dataTypeString.indexOf(\":\") >= 0)     System.out.println(\"TODO: Need to write the hooks for QNAME sort data type\");  else     if (!(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_TEXT)) && !(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_NUMBER)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_DATATYPE,dataTypeString});     boolean treatAsNumbers=((null != dataTypeString) && dataTypeString.equals(Constants.ATTRVAL_DATATYPE_NUMBER)) ? true : false;     String orderString=sort.getOrder().evaluate(xctxt,sourceNodeContext,foreach);     if (!(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_ASCENDING)) && !(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_DESCENDING)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_ORDER,orderString});     boolean descending=((null != orderString) && orderString.equals(Constants.ATTRVAL_ORDER_DESCENDING)) ? true : false;     AVT caseOrder=sort.getCaseOrder();     boolean caseOrderUpper;     if (null != caseOrder) {       String caseOrderString=caseOrder.evaluate(xctxt,sourceNodeContext,foreach);       if (!(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_UPPER)) && !(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_LOWER)))       foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_CASEORDER,caseOrderString});       caseOrderUpper=((null != caseOrderString) && caseOrderString.equals(Constants.ATTRVAL_CASEORDER_UPPER)) ? true : false;     }  else {       caseOrderUpper=false;     }     keys.addElement(new NodeSortKey(this,sort.getSelect(),treatAsNumbers,descending,langString,caseOrderUpper,foreach));   }   return keys; } "
"@Override public Object createStatement(Object proxy,Method method,Object[] args,Object statement,long time){   try {     String name=method.getName();     Constructor<?> constructor=null;     String sql=null;     if (compare(CREATE_STATEMENT,name)) {       constructor=getConstructor(CREATE_STATEMENT_IDX,Statement.class);     }  else     if (compare(PREPARE_STATEMENT,name)) {       constructor=getConstructor(PREPARE_STATEMENT_IDX,PreparedStatement.class);       sql=(String)args[0];     }  else     if (compare(PREPARE_CALL,name)) {       constructor=getConstructor(PREPARE_CALL_IDX,CallableStatement.class);       sql=(String)args[0];     }  else {       return statement;     }     return createDecorator(proxy,method,args,statement,constructor,sql);   }  catch (  Exception x) {     if (x instanceof InvocationTargetException) {       Throwable cause=x.getCause();       if (cause instanceof ThreadDeath) {         throw (ThreadDeath)cause;       }       if (cause instanceof VirtualMachineError) {         throw (VirtualMachineError)cause;       }     }     logger.warn(\"Unable to create statement proxy for slow query report.\",x);   }   return statement; } "
"public static TestSSLContext create(){   return create(TestKeyStore.getClient(),TestKeyStore.getServer()); } "
"static <T>T find(Class<T> type,String fallbackClassName) throws FactoryConfigurationError {   return find(type,type.getName(),null,fallbackClassName); } "
"public boolean isReal(){   return type == REAL; } "
"private boolean append(String p_string,String p_style){   StyledDocument document=text_pane.getStyledDocument();   try {     document.insertString(document.getLength(),p_string,document.getStyle(p_style));   }  catch (  BadLocationException e) {     System.out.println(\"ObjectInfoWindow.append: unable to insert text into text pane.\");     return false;   }   return true; } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   modifyProperties();   forwardTo(); } "
"public void paintSliderThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){ } "
"public ServerHelloDone(HandshakeIODataStream in,int length) throws IOException {   if (length != 0) {     fatalAlert(AlertProtocol.DECODE_ERROR,\"DECODE ERROR: incorrect ServerHelloDone\");   } } "
"public FramedIPXNetworkAttribute(byte[] octets){   super(octets);   net[0]=octets[2];   net[1]=octets[3];   net[2]=octets[4];   net[3]=octets[5]; } "
"public Token match(int tok) throws ParseException {   if (Debug.parserDebug) {     Debug.println(\"match \" + tok);   }   if (tok > START && tok < END) {     if (tok == ID) {       if (!startsId())       throw new ParseException(buffer + \"\\nID expected\",ptr);       String id=getNextId();       this.currentMatch=new Token();       this.currentMatch.tokenValue=id;       this.currentMatch.tokenType=ID;     }  else     if (tok == SAFE) {       if (!startsSafeToken())       throw new ParseException(buffer + \"\\nID expected\",ptr);       String id=ttokenSafe();       this.currentMatch=new Token();       this.currentMatch.tokenValue=id;       this.currentMatch.tokenType=SAFE;     }  else     if (tok == ID_NO_WHITESPACE) {       if (!startsIdNoWhiteSpace())       throw new ParseException(buffer + \"\\nID no white space expected\",ptr);       String id=getNextIdNoWhiteSpace();       this.currentMatch=new Token();       this.currentMatch.tokenValue=id;       this.currentMatch.tokenType=ID_NO_WHITESPACE;     }  else {       String nexttok=getNextId();       Integer cur=currentLexer.get(Utils.toUpperCase(nexttok));       if (cur == null || cur.intValue() != tok)       throw new ParseException(buffer + \"\\nUnexpected Token : \" + nexttok,ptr);       this.currentMatch=new Token();       this.currentMatch.tokenValue=nexttok;       this.currentMatch.tokenType=tok;     }   }  else   if (tok > END) {     char next=lookAhead(0);     if (tok == DIGIT) {       if (!isDigit(next))       throw new ParseException(buffer + \"\\nExpecting DIGIT\",ptr);       this.currentMatch=new Token();       this.currentMatch.tokenValue=String.valueOf(next);       this.currentMatch.tokenType=tok;       consume(1);     }  else     if (tok == ALPHA) {       if (!isAlpha(next))       throw new ParseException(buffer + \"\\nExpecting ALPHA\",ptr);       this.currentMatch=new Token();       this.currentMatch.tokenValue=String.valueOf(next);       this.currentMatch.tokenType=tok;       consume(1);     }   }  else {     char ch=(char)tok;     char next=lookAhead(0);     if (next == ch) {       consume(1);     }  else     throw new ParseException(buffer + \"\\nExpecting  >>>\" + ch+ \"<<< got >>>\"+ next+ \"<<<\",ptr);   }   return this.currentMatch; } "
"ReplicationMonitor(ReplicationDomain domain){   this.domain=domain; } "
"public RoutableMsg(){ } "
"public CSeqHeader createCSeqHeader(long sequenceNumber,String method) throws ParseException, InvalidArgumentException {   if (sequenceNumber < 0)   throw new InvalidArgumentException(\"bad arg \" + sequenceNumber);   if (method == null)   throw new NullPointerException(\"null arg method\");   CSeq cseq=new CSeq();   cseq.setMethod(method);   cseq.setSeqNumber(sequenceNumber);   return cseq; } "
"public ConnectException(String detailMessage,Throwable cause){   super(detailMessage,cause); } "
"@Inject public ResourceOwnerAuthenticator(RealmNormaliser realmNormaliser){   this.realmNormaliser=realmNormaliser; } "
"public String charAsString(int nchars){   return String.valueOf(buffer,ptr,nchars - 1); } "
"Item newDouble(final double value){   key.set(value);   Item result=get(key);   if (result == null) {     pool.putByte(DOUBLE).putLong(key.longVal);     result=new Item(index,key);     index+=2;     put(result);   }   return result; } "
"public Object clone(){   DSAMERole theClone=null;   try {     theClone=(DSAMERole)super.clone();   }  catch (  CloneNotSupportedException e) {     throw new InternalError();   }   if (subjectRoles != null) {     theClone.subjectRoles=new HashSet();     theClone.subjectRoles.addAll(subjectRoles);   }   return theClone; } "
"public void close(){   try {     writer.close();     JNAOpus.INSTANCE.opus_encoder_destroy(this.opusEncoder);   }  catch (  IOException e) {     e.printStackTrace();   } } "
"private void installSubcomponents(){   int decorationStyle=getWindowDecorationStyle();   if (decorationStyle == JRootPane.FRAME) {     createActions();     menuBar=createMenuBar();     add(menuBar);     createButtons();     add(iconifyButton);     add(toggleButton);     add(closeButton);   }  else   if (decorationStyle == JRootPane.PLAIN_DIALOG || decorationStyle == JRootPane.INFORMATION_DIALOG || decorationStyle == JRootPane.ERROR_DIALOG || decorationStyle == JRootPane.COLOR_CHOOSER_DIALOG || decorationStyle == JRootPane.FILE_CHOOSER_DIALOG || decorationStyle == JRootPane.QUESTION_DIALOG || decorationStyle == JRootPane.WARNING_DIALOG) {     createActions();     createButtons();     add(closeButton);   } } "
"public InvalidParameterSpecException(String msg){   super(msg); } "
"public void createWSFedProvider(String realm,String entityId,Map values) throws AMConsoleException {   try {     List<String> metaAliases=getFederationAlias(values,MetaTemplateParameters.P_WS_FED_ALIASES);     Set<String> duplicateCheck=new HashSet<String>(metaAliases);     if (duplicateCheck.size() < metaAliases.size()) {       throw new AMConsoleException(getLocalizedString(\"federation.create.provider.duplicate.metaAlias\"));     }     WSFederationMetaManager metaManager=new WSFederationMetaManager();     metaManager.validateMetaAliasForNewEntity(realm,metaAliases);     String metadata=CreateWSFedMetaDataTemplate.createStandardMetaTemplate(entityId,values,requestURL);     String extendedData=CreateWSFedMetaDataTemplate.createExtendedMetaTemplate(entityId,values);     FederationElement elt=(FederationElement)WSFederationMetaUtils.convertStringToJAXB(metadata);     String federationID=elt.getFederationID();     if (federationID == null) {       federationID=WSFederationConstants.DEFAULT_FEDERATION_ID;     }     metaManager.createFederation(realm,elt);     FederationConfigElement cfg=(FederationConfigElement)WSFederationMetaUtils.convertStringToJAXB(extendedData);     metaManager.createEntityConfig(realm,cfg);   }  catch (  WSFederationMetaException ex) {     throw new AMConsoleException(ex.getMessage());   } catch (  JAXBException ex) {     throw new AMConsoleException(ex.getMessage());   } catch (  CertificateEncodingException ex) {     throw new AMConsoleException(ex.getMessage());   } } "
"public void sendRelationCreationNotification(String relationId) throws IllegalArgumentException, RelationNotFoundException {   if (relationId == null) {     String excMsg=\"Invalid parameter.\";     throw new IllegalArgumentException(excMsg);   }   RELATION_LOGGER.entering(RelationService.class.getName(),\"sendRelationCreationNotification\",relationId);   StringBuilder ntfMsg=new StringBuilder(\"Creation of relation \");   ntfMsg.append(relationId);   sendNotificationInt(1,ntfMsg.toString(),relationId,null,null,null,null);   RELATION_LOGGER.exiting(RelationService.class.getName(),\"sendRelationCreationNotification\");   return; } "
"public com.sun.identity.liberty.ws.disco.jaxb.ResourceIDElement createResourceIDElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb.impl.ResourceIDElementImpl(); } "
"public Iterator<E> iterator(){   return new Itr(); } "
"public org.omg.CORBA.TypeCode type(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"type\",_opsClass);   DynEnumOperations $self=(DynEnumOperations)$so.servant;   try {     return $self.type();   }   finally {     _servant_postinvoke($so);   } } "
"public static void generateSelfSignedCertificate(KeyStore ks,String ksType,String ksPath,KeyType keyType,String alias,char[] pwd,String dn,int validity) throws KeyStoreException {   PlatformIMPL.generateSelfSignedCertificate(ks,ksType,ksPath,keyType,alias,pwd,dn,validity); } "
"public ResponseResetableException(boolean resetResponse){   super();   this.resetResponse=resetResponse; } "
"public Bitmap put(String key,Bitmap value){   return cache.put(key,value); } "
"@Inject public OpenIDConnectConfiguration(OAuth2RequestFactory requestFactory,OpenIDConnectProviderConfiguration providerConfiguration,ExceptionHandler exceptionHandler){   this.requestFactory=requestFactory;   this.providerConfiguration=providerConfiguration;   this.exceptionHandler=exceptionHandler; } "
"public Dimension maximumLayoutSize(Container target){   Dimension cpd, mbd, tpd;   int cpWidth=Integer.MAX_VALUE;   int cpHeight=Integer.MAX_VALUE;   int mbWidth=Integer.MAX_VALUE;   int mbHeight=Integer.MAX_VALUE;   int tpWidth=Integer.MAX_VALUE;   int tpHeight=Integer.MAX_VALUE;   Insets i=target.getInsets();   JRootPane root=(JRootPane)target;   if (root.getContentPane() != null) {     cpd=root.getContentPane().getMaximumSize();     if (cpd != null) {       cpWidth=cpd.width;       cpHeight=cpd.height;     }   }   if (root.getMenuBar() != null) {     mbd=root.getMenuBar().getMaximumSize();     if (mbd != null) {       mbWidth=mbd.width;       mbHeight=mbd.height;     }   }   if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {     JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();     if (titlePane != null) {       tpd=titlePane.getMaximumSize();       if (tpd != null) {         tpWidth=tpd.width;         tpHeight=tpd.height;       }     }   }   int maxHeight=Math.max(Math.max(cpHeight,mbHeight),tpHeight);   if (maxHeight != Integer.MAX_VALUE) {     maxHeight=cpHeight + mbHeight + tpHeight+ i.top+ i.bottom;   }   int maxWidth=Math.max(Math.max(cpWidth,mbWidth),tpWidth);   if (maxWidth != Integer.MAX_VALUE) {     maxWidth+=i.left + i.right;   }   return new Dimension(maxWidth,maxHeight); } "
"public synchronized void start(int level) throws IOException {   boolean valid=false;   if ((level & Channel.MBR_RX_SEQ) == Channel.MBR_RX_SEQ) {     if (receiver != null)     throw new IllegalStateException(sm.getString(\"mcastServiceImpl.receive.running\"));     try {       if (sender == null)       socket.joinGroup(address);     }  catch (    IOException iox) {       log.error(sm.getString(\"mcastServiceImpl.unable.join\"));       throw iox;     }     doRunReceiver=true;     receiver=new ReceiverThread();     receiver.setDaemon(true);     receiver.start();     valid=true;   }   if ((level & Channel.MBR_TX_SEQ) == Channel.MBR_TX_SEQ) {     if (sender != null)     throw new IllegalStateException(sm.getString(\"mcastServiceImpl.send.running\"));     if (receiver == null)     socket.joinGroup(address);     send(false);     doRunSender=true;     sender=new SenderThread(sendFrequency);     sender.setDaemon(true);     sender.start();     valid=true;   }   if (!valid) {     throw new IllegalArgumentException(sm.getString(\"mcastServiceImpl.invalid.startLevel\"));   }   waitForMembers(level);   startLevel=(startLevel | level); } "
"public static void handleException(String emsg){   new Exception().printStackTrace();   System.err.println(\"Unexepcted INTERNAL ERROR !!\");   System.err.println(emsg);   throw new RuntimeException(emsg); } "
"public static RequirementsBuilder newArray(int minItems,RequirementsBuilder builder){   return newArray(minItems,builder,null); } "
"public void logDebug(String message){   logger.debug(message); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node employeeNode;   NodeList employeeList;   Node child;   String childName;   int length;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"employee\");   employeeNode=elementList.item(2);   employeeList=employeeNode.getChildNodes();   length=(int)employeeList.getLength();   if (equals(6,length)) {     child=employeeList.item(5);     childName=child.getNodeName();     assertEquals(\"nodeName1\",\"address\",childName);   }  else {     child=employeeList.item(12);     childName=child.getNodeName();     assertEquals(\"nodeName2\",\"#text\",childName);   } } "
"private int socksGetServerPort(){   InetSocketAddress addr=(InetSocketAddress)proxy.address();   return addr.getPort(); } "
"@VisibleForTesting boolean checkPermission(String action) throws EntitlementException {   try {     Request restletRequest=getRequest();     String urlLastSegment=restletRequest.getResourceRef().getLastSegment();     String realm=RestletRealmRouter.getRealmFromRequest(restletRequest);     final Map<String,String> context=(Map<String,String>)ServletUtils.getRequest(getRequest()).getAttribute(FORGEROCK_AUTH_CONTEXT);     final String tokenId=context.get(\"tokenId\");     final SSOToken token=SSOTokenManager.getInstance().createSSOToken(tokenId);     return checkPermission(action,urlLastSegment,realm,token);   }  catch (  SSOException e) {     debug.warning(\"XacmlService permission evaluation failed\",e);     throw new EntitlementException(INTERNAL_ERROR,e);   } } "
"public void flush(){   flush(FlushReason.EXPLICIT); } "
"public PrivilegeSet(){   this.privileges=new ArrayList<>();   this.applications=new ArrayList<>();   this.resourceTypes=new ArrayList<>();   this.referralPrivileges=new ArrayList<>(); } "
"private void writeVersionContents(ServerDescriptor desc,int maxLabelWidth){   writeLabelValue(INFO_OPENDS_VERSION_LABEL.get(),desc.getOpenDSVersion(),maxLabelWidth); } "
"private void checkLDIFOutput(Writer writer,String[] expectedLDIF) throws Exception {   BufferedReader reader=writer.getLDIFBufferedReader();   StringBuilder expected=new StringBuilder();   StringBuilder actual=new StringBuilder();   boolean failed=false;   for (  String expectedLine : expectedLDIF) {     String actualLine=reader.readLine();     if (!failed && !actualLine.equals(expectedLine)) {       failed=true;     }     expected.append(\"    \");     expected.append(expectedLine);     expected.append(\"\\n\");     actual.append(\"    \");     actual.append(actualLine);     actual.append(\"\\n\");   }   String actualLine=reader.readLine();   while (actualLine != null) {     if (actualLine.trim().length() != 0) {       failed=true;     }     actual.append(\"    \");     actual.append(actualLine);     actual.append(\"\\n\");     actualLine=reader.readLine();   }   Assert.assertFalse(failed,\"expected:\\n\" + expected + \"\\nbut was:\\n\"+ actual); } "
"private void doDelete(FileEntry entry){   for (  FileAlterationListener listener : listeners) {     if (entry.isDirectory()) {       listener.onDirectoryDelete(entry.getFile());     }  else {       listener.onFileDelete(entry.getFile());     }   } } "
"private boolean isFirstGreaterThanLast(Number greater,Number less,NumericalType type){ switch (type) { case INTEGER: case BYTE: case SHORT: case LONG:     return (greater.longValue() >= less.longValue()); case FLOAT: case DOUBLE:   return (greater.doubleValue() >= less.doubleValue()); default : MONITOR_LOGGER.logp(Level.FINEST,GaugeMonitor.class.getName(),\"isFirstGreaterThanLast\",\"the threshold type is invalid\"); return false; } } "
"synchronized boolean switchToAsyncMode(){   if (!syncMode)   throw new AssertionError();   syncMode=false;   return !isCompleted(); } "
"static int tieBreakOrder(Object a,Object b){   int d;   if (a == null || b == null || (d=a.getClass().getName().compareTo(b.getClass().getName())) == 0)   d=(System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1);   return d; } "
"@Override public void close(){   Throwable localSessionError; synchronized (stateLock) {     if (closeInitiated) {       return;     }     localSessionError=sessionError;     closeInitiated=true;   }   try {     interrupt();     join();   }  catch (  InterruptedException e) {     Thread.currentThread().interrupt();   }   if (logger.isTraceEnabled()) {     if (localSessionError == null) {       logger.trace(\"Closing Session from %s to %s in %s\",plainSocket.getLocalSocketAddress(),plainSocket.getRemoteSocketAddress(),stackTraceToSingleLineString(new Exception()));     }  else {       logger.traceException(localSessionError,\"Aborting Session from %s to %s in %s due to the following error\",plainSocket.getLocalSocketAddress(),plainSocket.getRemoteSocketAddress(),stackTraceToSingleLineString(new Exception()));     }   }   if (localSessionError == null && protocolVersion >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {     try {       publish(new StopMsg());     }  catch (    final IOException ignored) {     }   }   StaticUtils.close(plainSocket,secureSocket); } "
"public String answerAsString(){   if (result == null) {     return null;   }   return Base64.encode(result); } "
"protected DataSource createDataSourceInstance() throws SQLException {   final PoolingDataSource<PoolableConnection> pds=new PoolingDataSource<>(connectionPool);   pds.setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());   return pds; } "
"public Set createDynamicGroups(Map groupsMap) throws AMException, SSOException {   Iterator iter=groupsMap.keySet().iterator();   Set groups=new HashSet();   while (iter.hasNext()) {     String groupName=(String)iter.next();     String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + \"=\" + groupName+ \",\"+ super.entryDN;     Map attributes=(Map)groupsMap.get(groupName);     AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);     groupImpl.setAttributes(attributes);     groupImpl.create();     groups.add(groupImpl);   }   return groups; } "
"private List<String> toList(String[] array){   List<String> ret=new ArrayList<String>();   if (array != null && array.length > 0) {     ret.addAll(Arrays.asList(array));   }   return ret; } "
"public final ShapeTile[] calculate_tree_shapes(BrdArea p_obstacle_area){   ShapeTile[] convex_shapes=p_obstacle_area.split_to_convex();   if (convex_shapes == null)   return new ShapeTile[0];   double max_tree_shape_width=50000;   if (r_board.host_com.host_cad_exists()) {     max_tree_shape_width=Math.min(500 * r_board.host_com.get_resolution(UnitMeasure.MIL),max_tree_shape_width);   }   Collection<ShapeTile> tree_shape_list=new LinkedList<ShapeTile>();   for (int index=0; index < convex_shapes.length; ++index) {     ShapeTile curr_convex_shape=convex_shapes[index];     int offset_width=get_clearance_compensation(p_obstacle_area.clearance_idx(),p_obstacle_area.get_layer());     curr_convex_shape=curr_convex_shape.enlarge(offset_width);     ShapeTile[] curr_tree_shapes=curr_convex_shape.divide_into_sections(max_tree_shape_width);     for (int jndex=0; jndex < curr_tree_shapes.length; ++jndex) {       tree_shape_list.add(curr_tree_shapes[jndex]);     }   }   ShapeTile[] result=new ShapeTile[tree_shape_list.size()];   Iterator<ShapeTile> it=tree_shape_list.iterator();   for (int index=0; index < result.length; ++index) {     result[index]=it.next();   }   return result; } "
"public void insertRecord(final int row,final JKTableRecord record){   this.records.insertElementAt(record,row);   fireTableRowsInserted(row,row); } "
"public PasswordGeneratorConfigManager(ServerContext serverContext){   this.serverContext=serverContext;   passwordGenerators=new ConcurrentHashMap<>(); } "
"public boolean acceptFirstLine(String firstLine){   if (firstlineMatcher == null)   return false;   return firstLine != null && firstlineMatcher.reset(firstLine).matches(); } "
"public void testCompareToEqualNeg(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   int aSign=-1;   int bSign=-1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   assertEquals(0,aNumber.compareTo(bNumber)); } "
"public void removeMessageDestinationRef(String name){   entries.remove(name);   MessageDestinationRef mdr=null; synchronized (mdrs) {     mdr=mdrs.remove(name);   }   if (mdr != null) {     support.firePropertyChange(\"messageDestinationRef\",mdr,null);     mdr.setNamingResources(null);   } } "
"public void paramValueAvaliable(List<SParameter> params,List<Instruction> instructions,SemanticScope scope,LineCol lineCol) throws SyntaxException {   for (  SParameter param : params) {     if (param.isNotEmpty()) {       Ins.Nop nop=new Ins.Nop();       Ins.IfNe ifNe=new Ins.IfNe(cast(BoolTypeDef.get(),new Ins.TLoad(param,scope,lineCol),lineCol),nop,lineCol);       instructions.add(ifNe);       instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_IllegalArgumentException_cons(),lineCol),lineCol));       instructions.add(nop);     }  else     if (param.isNotNull()) {       if (param.type() instanceof PrimitiveTypeDef) {         continue;       }       Ins.Nop nop=new Ins.Nop();       Ins.IfNonNull ifNonNull=new Ins.IfNonNull(new Ins.TLoad(param,scope,lineCol),nop,lineCol);       instructions.add(ifNonNull);       instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_NullPointerException_cons(),lineCol),lineCol));       instructions.add(nop);       Ins.Nop nop2=new Ins.Nop();       Ins.IfACmpNe ifACmpNe=new Ins.IfACmpNe(new Ins.TLoad(param,scope,lineCol),invoke_Unit_get(lineCol),nop2,lineCol);       instructions.add(ifACmpNe);       instructions.add(new Ins.AThrow(new Ins.New(getJava_lang_IllegalArgumentException_cons(),lineCol),lineCol));       instructions.add(nop2);     }   } } "
"public JMenuItem(String text){   this(text,(Icon)null); } "
"public Enumeration<Permission> elements(){ synchronized (this) {     return Collections.enumeration(perms.values());   } } "
"public boolean isSchemaEnabled(){   return isSchemaEnabled; } "
"@Override public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f,boolean inlineImage){   if (!isColor && (!image.isMask() || !(image.getBpc() == 1 || image.getBpc() > 0xff))) {     throw new PdfException(\"not.colorized.typed3.fonts.only.accept.mask.images\");   }   return super.addImage(image,a,b,c,d,e,f,inlineImage); } "
"private boolean tryToNotifyReset(){   if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {     if (mPtrUIHandlerHolder.hasHandler()) {       mPtrUIHandlerHolder.onUIReset(this);       if (DEBUG) {         PtrCLog.i(LOG_TAG,\"PtrUIHandler: onUIReset\");       }     }     mStatus=PTR_STATUS_INIT;     clearFlag();     return true;   }   return false; } "
"public String toXML(){   StringBuilder stringBuilder=new StringBuilder();   return stringBuilder.toString(); } "
"public boolean equals(Object obj){   if (this == obj) {     return true;   }  else   if (obj instanceof ActivationGroupID) {     ActivationGroupID id=(ActivationGroupID)obj;     return (uid.equals(id.uid) && system.equals(id.system));   }  else {     return false;   } } "
"@DataProvider(name=\"testSafeReadTwoRSsProvider\") private Object[][] testSafeReadTwoRSsProvider(){   return new Object[][]{{DEFAULT_GID,DEFAULT_GENID,REPLY_OK_DS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,TIMEOUT_DS_SCENARIO},{DEFAULT_GID,DEFAULT_GENID,REPLAY_ERROR_DS_SCENARIO},{OTHER_GID,DEFAULT_GENID,TIMEOUT_DS_SCENARIO},{DEFAULT_GID,OTHER_GENID,TIMEOUT_DS_SCENARIO}}; } "
"SearchResultCode(ResultCode resultCode,LocalizableMessageBuilder errorMessage){   this.resultCode=resultCode;   this.errorMessage=errorMessage; } "
"public com.sun.identity.liberty.ws.soapbinding.jaxb.ProviderType createProviderType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProviderTypeImpl(); } "
"protected boolean isHTMLFlavor(DataFlavor flavor){   DataFlavor[] flavors=htmlFlavors;   for (int i=0; i < flavors.length; i++) {     if (flavors[i].equals(flavor)) {       return true;     }   }   return false; } "
"@Override public ConnectionEntryWriter writeComment(final CharSequence comment){   Reject.ifNull(comment);   return this; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrinsertbefore1.class,args); } "
"public FrameBodyTMED(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"public static Condition and(Condition... conditions){   return new ANDCondition(conditions); } "
"public static void main(String[] args){   if (args.length != 5) {     printUsage();   }   final String host=args[0];   final int port=Integer.parseInt(args[1]);   final String groupDN=args[2];   final String memberDN=args[3];   final ModificationType modType=getModificationType(args[4]);   final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);   Connection connection=null;   try {     connection=factory.getConnection();     Collection<String> controls=RootDSE.readRootDSE(connection).getSupportedControls();     final String user=\"cn=Directory Manager\";     final char[] password=\"password\".toCharArray();     connection.bind(user,password);     if (controls.contains(PermissiveModifyRequestControl.OID)) {       final ModifyRequest request=Requests.newModifyRequest(groupDN).addControl(PermissiveModifyRequestControl.newControl(true)).addModification(modType,\"member\",memberDN);       connection.modify(request);     }  else {       System.out.println(\"Checking whether the entry with DN \" + memberDN + \" belongs to the group with DN \"+ groupDN+ \"...\");       final CompareRequest request=Requests.newCompareRequest(groupDN,\"member\",memberDN);       CompareResult result=connection.compare(request);       if (modType == ModificationType.ADD && result.getResultCode() == ResultCode.COMPARE_FALSE) {         System.out.println(\"Member does not yet belong to group.\" + \" Adding it...\");         final ModifyRequest addMember=Requests.newModifyRequest(groupDN).addModification(modType,\"member\",memberDN);         connection.modify(addMember);       }       if (modType == ModificationType.DELETE && result.getResultCode() == ResultCode.COMPARE_TRUE) {         System.out.println(\"Member belongs to group.\" + \" Removing it...\");         final ModifyRequest delMember=Requests.newModifyRequest(groupDN).addModification(modType,\"member\",memberDN);         connection.modify(delMember);       }     }     String op=(modType == ModificationType.ADD) ? \"added to\" : \"deleted from\";     System.out.println(\"The entry with DN \" + memberDN + \" has been \"+ op+ \" the group with DN \"+ groupDN+ \".\");   }  catch (  final LdapException e) {     System.err.println(e.getMessage());     System.exit(e.getResult().getResultCode().intValue());     return;   }  finally {     if (connection != null) {       connection.close();     }   } } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"private JComponent createInputComponent(AttributeSet attr,Object model){   JComponent c=null;   String type=(String)attr.getAttribute(HTML.Attribute.TYPE);   if (type.equals(\"submit\") || type.equals(\"reset\")) {     String value=(String)attr.getAttribute(HTML.Attribute.VALUE);     if (value == null) {       if (type.equals(\"submit\")) {         value=UIManager.getString(\"FormView.submitButtonText\");       }  else {         value=UIManager.getString(\"FormView.resetButtonText\");       }     }     JButton button=new JButton(value);     if (model != null) {       button.setModel((ButtonModel)model);       button.addActionListener(this);     }     c=button;     maxIsPreferred=3;   }  else   if (type.equals(\"image\")) {     String srcAtt=(String)attr.getAttribute(HTML.Attribute.SRC);     JButton button;     try {       URL base=((HTMLDocument)getElement().getDocument()).getBase();       URL srcURL=new URL(base,srcAtt);       Icon icon=new ImageIcon(srcURL);       button=new JButton(icon);     }  catch (    MalformedURLException e) {       button=new JButton(srcAtt);     }     if (model != null) {       button.setModel((ButtonModel)model);       button.addMouseListener(new MouseEventListener());     }     c=button;     maxIsPreferred=3;   }  else   if (type.equals(\"checkbox\")) {     c=new JCheckBox();     if (model != null) {       ((JCheckBox)c).setModel((JToggleButton.ToggleButtonModel)model);     }     maxIsPreferred=3;   }  else   if (type.equals(\"radio\")) {     c=new JRadioButton();     if (model != null) {       ((JRadioButton)c).setModel((JToggleButton.ToggleButtonModel)model);     }     maxIsPreferred=3;   }  else   if (type.equals(\"text\")) {     int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);     JTextField field;     if (size > 0) {       field=new JTextField();       field.setColumns(size);     }  else {       field=new JTextField();       field.setColumns(20);     }     c=field;     if (model != null) {       field.setDocument((Document)model);     }     field.addActionListener(this);     maxIsPreferred=3;   }  else   if (type.equals(\"password\")) {     JPasswordField field=new JPasswordField();     c=field;     if (model != null) {       field.setDocument((Document)model);     }     int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);     field.setColumns((size > 0) ? size : 20);     field.addActionListener(this);     maxIsPreferred=3;   }  else   if (type.equals(\"file\")) {     JTextField field=new JTextField();     if (model != null) {       field.setDocument((Document)model);     }     int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);     field.setColumns((size > 0) ? size : 20);     JButton browseButton=new JButton(UIManager.getString(\"FormView.browseFileButtonText\"));     Box box=Box.createHorizontalBox();     box.add(field);     box.add(Box.createHorizontalStrut(5));     box.add(browseButton);     browseButton.addActionListener(new BrowseFileAction(attr,(Document)model));     c=box;     maxIsPreferred=3;   }   return c; } "
"public static String downloadString(String url,int triesCount) throws MalformedURLException {   return downloadString(new URL(url),null,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,\"utf-8\",triesCount); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementremoveattributens01.class,args); } "
"public SIPHeader parse() throws ParseException {   AcceptLanguageList acceptLanguageList=new AcceptLanguageList();   if (debug)   dbg_enter(\"AcceptLanguageParser.parse\");   try {     headerName(TokenTypes.ACCEPT_LANGUAGE);     do {       AcceptLanguage acceptLanguage=new AcceptLanguage();       this.lexer.SPorHT();       if (lexer.startsId()) {         Token value=lexer.match(TokenTypes.ID);         acceptLanguage.setLanguageRange(value.getTokenValue());         this.lexer.SPorHT();         while (lexer.lookAhead(0) == ';') {           this.lexer.match(';');           this.lexer.SPorHT();           this.lexer.match('q');           this.lexer.SPorHT();           this.lexer.match('=');           this.lexer.SPorHT();           lexer.match(TokenTypes.ID);           value=lexer.getNextToken();           try {             float fl=Float.parseFloat(value.getTokenValue());             acceptLanguage.setQValue(fl);           }  catch (          NumberFormatException ex) {             throw createParseException(ex.getMessage());           } catch (          InvalidArgumentException ex) {             throw createParseException(ex.getMessage());           }           this.lexer.SPorHT();         }       }       acceptLanguageList.add(acceptLanguage);       if (lexer.lookAhead(0) == ',') {         this.lexer.match(',');         this.lexer.SPorHT();       }  else       break;     }  while (true);   }   finally {     if (debug)     dbg_leave(\"AcceptLanguageParser.parse\");   }   return acceptLanguageList; } "
"public void animateBgAlpha(float finalAlpha,int duration){   int finalAlphaI=(int)(finalAlpha * 255f);   if (getAlpha() != finalAlphaI) {     mBackgroundAnim=cancelAnimator(mBackgroundAnim);     mBackgroundAnim=ObjectAnimator.ofInt(this,\"alpha\",finalAlphaI);     mBackgroundAnim.setDuration(duration);     mBackgroundAnim.start();   } } "
"protected void decodeHeader(byte allowedType,ByteArrayScanner scanner) throws DataFormatException {   final byte msgType=scanner.nextByte();   if (allowedType != msgType) {     throw new DataFormatException(\"byte[] is not a valid update msg: \" + msgType);   }   protocolVersion=scanner.nextByte();   csn=scanner.nextCSNUTF8();   assuredFlag=scanner.nextBoolean();   assuredMode=AssuredMode.valueOf(scanner.nextByte());   safeDataLevel=scanner.nextByte(); } "
"public void reportError(LocalizableMessage error,boolean isAcceptable,ResultCode resultCode){ switch (_configPhase) { case PHASE_INIT: {       _errorMessages.add(error);       _isAcceptable=isAcceptable;       break;     } case PHASE_ACCEPTABLE: {     _unacceptableReasons.add(error);     _isAcceptable=isAcceptable;     break;   } case PHASE_APPLY: {   _errorMessages.add(error);   _isAcceptable=isAcceptable;   if (_resultCode == ResultCode.SUCCESS) {     _resultCode=resultCode;   }   break; } } } "
"public static void removeConstraint(Constraint constraint){   TestChildCfgDefn.getInstance().deregisterConstraint(constraint); } "
"Hyphen(String pre){   preBreak=pre;   noBreak=null;   postBreak=null; } "
"static void checkSignedByte(final int value,final String msg){   if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {     throw new IllegalArgumentException(msg + \" (must be a signed byte): \" + value);   } } "
"@Override public long skip(long numberOfBytes) throws IOException {   if (eof) {     throw new IOException(\"Skip after end of file\");   }   if (position == size) {     return doEndOfFile();   }   position+=numberOfBytes;   long returnLength=numberOfBytes;   if (position > size) {     returnLength=numberOfBytes - (position - size);     position=size;   }   return returnLength; } "
"public AppTest(String testName){   super(testName); } "
"SessionID updateSessionID(SessionID previousId,SessionInfo newSessionInfo) throws SessionException {   cache.remove(getJWTFromSessionID(previousId,true));   String jwt=getJwtSessionMapper().asJwt(newSessionInfo);   return SessionID.generateStatelessSessionID(sessionServerConfig,newSessionInfo.getClientDomain(),jwt); } "
"public synchronized void removeIconsForPkg(String packageName,UserHandleCompat user){   removeFromMemCacheLocked(packageName,user);   long userSerial=mUserManager.getSerialNumberForUser(user);   mIconDb.getWritableDatabase().delete(IconDB.TABLE_NAME,IconDB.COLUMN_COMPONENT + \" LIKE ? AND \" + IconDB.COLUMN_USER+ \" = ?\",new String[]{packageName + \"/%\",Long.toString(userSerial)}); } "
"public static Feature fromGeometry(Geometry geometry,JsonObject properties){   return new Feature(geometry,properties,null); } "
"public static String unescapePipe(String text){   return text.replaceAll(\"&#124;\",\"|\"); } "
"@Override public void disconnect(DisconnectReason disconnectReason,boolean sendNotification,LocalizableMessage message){ synchronized (opsInProgressLock) {     if (disconnectRequested) {       return;     }     disconnectRequested=true;   }   if (keepStats) {     statTracker.updateDisconnect();   }   if (connectionID >= 0) {     DirectoryServer.connectionClosed(this);   }   connectionValid=false;   final LocalizableMessage cancelMessage;   if (message != null) {     cancelMessage=new LocalizableMessageBuilder().append(disconnectReason.getClosureMessage()).append(\": \").append(message).toMessage();   }  else {     cancelMessage=disconnectReason.getClosureMessage();   }   cancelAllOperations(new CancelRequest(true,cancelMessage));   finalizeConnectionInternal();   Selector selector=writeSelector.get();   close(selector);   if (sendNotification && ldapVersion != 2) {     try {       int resultCode=toResultCode(disconnectReason);       LocalizableMessage errMsg=message != null ? message : INFO_LDAP_CLIENT_GENERIC_NOTICE_OF_DISCONNECTION.get();       ExtendedResponseProtocolOp notificationOp=new ExtendedResponseProtocolOp(resultCode,errMsg,null,null,OID_NOTICE_OF_DISCONNECTION,null);       sendLDAPMessage(new LDAPMessage(0,notificationOp,null));     }  catch (    Exception e) {       logger.traceException(e);     }   }   Runnable r=new ConnectionFinalizerJob(asn1Reader,clientChannel);   connectionHandler.registerConnectionFinalizer(r);   logDisconnect(this,disconnectReason,message);   try {     PluginConfigManager pluginManager=DirectoryServer.getPluginConfigManager();     pluginManager.invokePostDisconnectPlugins(this,disconnectReason,message);   }  catch (  Exception e) {     logger.traceException(e);   } } "
"public ObjectName preRegister(MBeanServer server,ObjectName name) throws java.lang.Exception {   return name; } "
"public boolean hasThread(){   return !this.waitingThreads.isEmpty(); } "
"public boolean isNodeRelated(DefaultMutableTreeNode aNode){   return (aNode != null) && (getRoot() == aNode.getRoot()); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributenodenomodificationallowederrEE.class,args); } "
"public String toXMLString() throws SAML2Exception {   return toXMLString(true,false); } "
"public void uninstallUI(JComponent a){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);   } } "
"@Override public void open() throws Exception { synchronized (groups) { synchronized (users) {       users.clear();       groups.clear();       roles.clear();       String pathName=getPathname();       try (InputStream is=ConfigFileLoader.getInputStream(getPathname())){         Digester digester=new Digester();         try {           digester.setFeature(\"http://apache.org/xml/features/allow-java-encodings\",true);         }  catch (        Exception e) {           log.warn(sm.getString(\"memoryUserDatabase.xmlFeatureEncoding\"),e);         }         digester.addFactoryCreate(\"tomcat-users/group\",new MemoryGroupCreationFactory(this),true);         digester.addFactoryCreate(\"tomcat-users/role\",new MemoryRoleCreationFactory(this),true);         digester.addFactoryCreate(\"tomcat-users/user\",new MemoryUserCreationFactory(this),true);         digester.parse(is);       }  catch (      IOException ioe) {         log.error(sm.getString(\"memoryUserDatabase.fileNotFound\",pathName));         return;       }     }   } } "
"public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {   if (inputOffset > 0) {     skipFully(input,inputOffset);   }   if (length == 0) {     return 0;   }   final int bufferLength=buffer.length;   int bytesToRead=bufferLength;   if (length > 0 && length < bufferLength) {     bytesToRead=(int)length;   }   int read;   long totalRead=0;   while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {     output.write(buffer,0,read);     totalRead+=read;     if (length > 0) {       bytesToRead=(int)Math.min(length - totalRead,bufferLength);     }   }   return totalRead; } "
"public void runTest() throws Throwable {   Document doc;   NodeList genderList;   Node gender;   NodeList genList;   Node gen;   NodeList gList;   Node g;   NamedNodeMap attrList;   Attr attrNode;   doc=(Document)load(\"staff\",true);   genderList=doc.getElementsByTagName(\"gender\");   gender=genderList.item(2);   assertNotNull(\"genderNotNull\",gender);   genList=gender.getChildNodes();   gen=genList.item(0);   assertNotNull(\"genderFirstChildNotNull\",gen);   gList=gen.getChildNodes();   g=gList.item(0);   assertNotNull(\"genderFirstGrandchildNotNull\",g);   attrList=g.getAttributes();   assertNotNull(\"attributesNotNull\",attrList);   attrNode=(Attr)attrList.getNamedItem(\"domestic\");   assertNotNull(\"attrNotNull\",attrNode); {     boolean success=false;     try {       attrNode.setValue(\"newvalue\");     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"setValue_throws_NO_MODIFICATION\",success);   } {     boolean success=false;     try {       attrNode.setNodeValue(\"newvalue2\");     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"setNodeValue_throws_NO_MODIFICATION\",success);   } } "
"protected void flushWaitingObjects(){   PdfXrefTable xref=document.getXref();   boolean needFlush=true;   while (needFlush) {     needFlush=false;     for (int i=1; i < xref.size(); i++) {       PdfIndirectReference indirectReference=xref.get(i);       if (indirectReference != null && indirectReference.checkState(PdfObject.MUST_BE_FLUSHED)) {         PdfObject obj=indirectReference.getRefersTo(false);         if (obj != null) {           obj.flush();           needFlush=true;         }       }     }   }   if (objectStream != null && objectStream.getSize() > 0) {     objectStream.flush();     objectStream=null;   } } "
"public NSData(byte[] bytes){   this.bytes=bytes; } "
"private boolean isSeparator(final char c){ switch (c) { case ' ': case '-':     return true; default :   return false; } } "
"private AttrSet findEntity(PersistentObject pObject,Set set) throws UMSException {   AttrSet foundAttrSet=null;   AttrSet attrSet=null;   try {     Iterator it=set.iterator();     while (it.hasNext()) {       attrSet=(AttrSet)it.next();       String filter=attrSet.getAttribute(ENTITY_FILTER).getValue();       SearchControl sc=new SearchControl();       sc.setSearchScope(SearchControl.SCOPE_BASE);       SearchResults sr=pObject.search(filter,sc);       if (sr.hasMoreElements()) {         sr.abandon();         if ((foundAttrSet == null) || (Integer.parseInt(attrSet.getAttribute(ENTITY_PRIORITY).getValue()) < Integer.parseInt(foundAttrSet.getAttribute(ENTITY_PRIORITY).getValue()))) {           foundAttrSet=attrSet;         }       }     }   }  catch (  NumberFormatException nfe) {     String args[]=new String[3];     args[0]=\"\" + attrSet;     args[1]=\"\" + foundAttrSet;     args[2]=nfe.getMessage();     String msg=i18n.getString(IUMSConstants.BAD_STRUCTURE_TEMPLATE_PRIORITY,args);     throw new UMSException(msg);   }   return foundAttrSet; } "
"public void installUI(JComponent a){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).installUI(a);   } } "
"public CustomHeaderExtractor(String customHeaderUsername,String customHeaderPassword){   this.customHeaderUsername=checkNotNull(customHeaderUsername,\"customHeaderUsername cannot be null\");   this.customHeaderPassword=checkNotNull(customHeaderPassword,\"customHeaderPassword cannot be null\"); } "
"public void handleTblRequestHandlerListButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {   setSubmitCycle(true);   CCActionTable table=(CCActionTable)getChild(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);   table.restoreStateData();   CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);   Integer[] selected=tblModel.getSelectedRows();   if ((selected != null) && (selected.length > 0)) {     OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);     tblValues.removeAll(selected);     setPageSessionAttribute(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST,tblValues);     populateRequestHandlerListTable(tblValues);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"message.profile.modified\");     setPageSessionAttribute(PAGE_MODIFIED,\"1\");   }   forwardTo(); } "
"public void elementDecl(String name,String model) throws SAXException {   if (m_inExternalDTD)   return;   try {     final java.io.Writer writer=m_writer;     DTDprolog();     writer.write(\"<!ELEMENT \");     writer.write(name);     writer.write(' ');     writer.write(model);     writer.write('>');     writer.write(m_lineSep,0,m_lineSepLen);   }  catch (  IOException e) {     throw new SAXException(e);   } } "
"private void initialize_windows(){   allocate_permanent_subwindows();   work_frame.setLocation(120,0);   select_parameter_window.setLocation(0,0);   select_parameter_window.setVisible(true);   route_parameter_window.setLocation(0,100);   autoroute_parameter_window.setLocation(0,200);   move_parameter_window.setLocation(0,50);   clearance_matrix_window.setLocation(0,150);   via_window.setLocation(50,150);   edit_vias_window.setLocation(100,150);   edit_net_rules_window.setLocation(100,200);   assign_net_classes_window.setLocation(100,250);   padstacks_window.setLocation(100,30);   packages_window.setLocation(200,30);   components_window.setLocation(300,30);   incompletes_window.setLocation(400,30);   clearance_violations_window.setLocation(500,30);   length_violations_window.setLocation(550,30);   net_info_window.setLocation(350,30);   unconnected_route_window.setLocation(650,30);   route_stubs_window.setLocation(600,30);   window_beanshell.setLocation(0,250);   layer_visibility_window.setLocation(0,450);   object_visibility_window.setLocation(0,550);   display_misc_window.setLocation(0,350);   color_manager.setLocation(0,600);   about_window.setLocation(200,200); } "
"public Object[] toArray(){   return Arrays.copyOf(elementData,size); } "
"public int max_net_no(){   return net_list.size(); } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>T min(Collection<? extends T> coll,Comparator<? super T> comp){   if (comp == null)   return (T)min((Collection)coll);   Iterator<? extends T> i=coll.iterator();   T candidate=i.next();   while (i.hasNext()) {     T next=i.next();     if (comp.compare(next,candidate) < 0)     candidate=next;   }   return candidate; } "
"static void copyFile(File original,File copy) throws IOException {   copyInputStreamToFile(new FileInputStream(original),copy); } "
"@Override protected Object clone() throws CloneNotSupportedException {   throw new CloneNotSupportedException(); } "
"public boolean isLocked(){   return locked; } "
"public static String parseCharset(Map<String,String> headers,String defaultCharset){   String contentType=headers.get(HTTP.CONTENT_TYPE);   if (contentType != null) {     String[] params=contentType.split(\";\");     for (int i=1; i < params.length; i++) {       String[] pair=params[i].trim().split(\"=\");       if (pair.length == 2) {         if (pair[0].equals(\"charset\")) {           return pair[1];         }       }     }   }   return defaultCharset; } "
"public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   return (XString)getArg0AsString(xctxt); } "
"public boolean shouldSelectCell(EventObject event){   return realEditor.shouldSelectCell(event); } "
"public void testReceive_NonBlockNoServerBufZero() throws Exception {   this.channel1.configureBlocking(false);   receiveNonBlockNoServer(CAPACITY_ZERO); } "
"public boolean equals(FontRenderContext rhs){   if (this == rhs) {     return true;   }   if (rhs == null) {     return false;   }   if (!rhs.defaulting && !defaulting) {     if (rhs.aaHintValue == aaHintValue && rhs.fmHintValue == fmHintValue) {       return tx == null ? rhs.tx == null : tx.equals(rhs.tx);     }     return false;   }  else {     return rhs.getAntiAliasingHint() == getAntiAliasingHint() && rhs.getFractionalMetricsHint() == getFractionalMetricsHint() && rhs.getTransform().equals(getTransform());   } } "
"public Future<Job> failed(){   this.failed_at=System.currentTimeMillis();   return this.updateNow().compose(null).compose(null); } "
"private static boolean calc_horizontal_first_from_door(ExpandObject p_from_door,PlaPointFloat p_from_point,PlaPointFloat p_to_point){   ShapeTile door_shape=p_from_door.get_shape();   ShapeTileBox from_door_box=door_shape.bounding_box();   if (p_from_door.get_dimension().is_area()) {     return from_door_box.height() >= from_door_box.width();   }   PlaSegmentFloat door_line_segment=door_shape.diagonal_corner_segment();   PlaPointFloat left_corner;   PlaPointFloat right_corner;   if (door_line_segment.point_a.v_x < door_line_segment.point_b.v_x || door_line_segment.point_a.v_x == door_line_segment.point_b.v_x && door_line_segment.point_a.v_y <= door_line_segment.point_b.v_y) {     left_corner=door_line_segment.point_a;     right_corner=door_line_segment.point_b;   }  else {     left_corner=door_line_segment.point_b;     right_corner=door_line_segment.point_a;   }   double door_dx=right_corner.v_x - left_corner.v_x;   double door_dy=right_corner.v_y - left_corner.v_y;   double abs_door_dy=Math.abs(door_dy);   double door_max_width=Math.max(door_dx,abs_door_dy);   boolean result;   double door_half_max_width=0.5 * door_max_width;   if (from_door_box.width() <= door_half_max_width) {     result=true;   }  else   if (from_door_box.height() <= door_half_max_width) {     result=false;   }  else {     double dx=p_to_point.v_x - p_from_point.v_x;     double dy=p_to_point.v_y - p_from_point.v_y;     if (left_corner.v_y < right_corner.v_y) {       if (Signum.of(dx) == Signum.of(dy)) {         result=Math.abs(dx) > Math.abs(dy);       }  else {         result=Math.abs(dx) < Math.abs(dy);       }     }  else {       if (Signum.of(dx) == Signum.of(dy)) {         result=Math.abs(dx) < Math.abs(dy);       }  else {         result=Math.abs(dx) > Math.abs(dy);       }     }   }   return result; } "
"private static boolean hasConditions(Request request){   return request.header(\"If-Modified-Since\") != null || request.header(\"If-None-Match\") != null; } "
"public Object clone(){   byte[] newData=new byte[length];   System.arraycopy(data,0,newData,0,newData.length);   MetaMessage event=new MetaMessage(newData);   return event; } "
"public com.sun.identity.liberty.ws.idpp.jaxb.AltIDElement createAltIDElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltIDElementImpl(); } "
"public boolean onBackPressed(){   OnBackPressListener currentFragment=(OnBackPressListener)mAdapter.getRegisteredFragment(mPager.getCurrentItem());   if (currentFragment != null) {     if (mSlideBackPressSupport) {       if (!currentFragment.onBackPressed()) {         if (mPager.getCurrentItem() == 0) {           return false;         }         withPreviousSlide(true);         return true;       }  else {         return true;       }     }  else {       return currentFragment.onBackPressed();     }   }   return false; } "
"public void writeElement(String namespace,String name,int type){   writeElement(namespace,null,name,type); } "
"public InvalidFrameIdentifierException(String msg,Throwable ex){   super(msg,ex); } "
"public void removeProperty(String name){   properties.remove(name); } "
"public static MultiPoint fromJson(String json){   GsonBuilder gson=new GsonBuilder();   gson.registerTypeAdapter(Position.class,new PositionDeserializer());   return gson.create().fromJson(json,MultiPoint.class); } "
"protected boolean userAgentCheck(String httpUA,String clientUA){   if ((httpUA == null) || (clientUA == null)) {     return false;   }   if ((httpUA.equalsIgnoreCase(clientUA)) || (httpUA.indexOf(clientUA) > -1)) {     return true;   }  else {     return false;   } } "
"public void preSendFailureResponse(HttpServletRequest request,HttpServletResponse response,String faultCode,String faultDetail) throws SAML2Exception { } "
"private void assertThatCursorCanBeFullyReadFromStart(DBCursor<Record<String,String>> cursor,int fromIndex,int endIndex) throws Exception {   assertThat(cursor.getRecord()).isNull();   assertThatCursorCanBeFullyRead(cursor,fromIndex,endIndex); } "
"@Override public boolean completeCycle(){   return completeCycle; } "
"public SpinnerListModel(){   this(new Object[]{\"empty\"}); } "
"public void read_logfile(InputStream p_input_stream){   if (board_is_read_only)   return;   if (!(interactive_state instanceof StateMenu))   return;   interactive_action_thread=new ReadActlogThread(this,p_input_stream);   interactive_action_thread.start(); } "
"public void debugWarning(String message,Exception e){   debug.warning(message,e); } "
"public boolean isDeltaCRLIndicatorEnabled(){   return deltaCRLIndicator; } "
"public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,ClassLoader[] cls){   super(owner,channel,timeout,mapContextName,AbstractReplicatedMap.DEFAULT_INITIAL_CAPACITY,AbstractReplicatedMap.DEFAULT_LOAD_FACTOR,Channel.SEND_OPTIONS_DEFAULT,cls,true); } "
"protected JTextField createEditorComponent(){   JTextField editor=new BorderlessTextField(\"\",9);   editor.setBorder(null);   return editor; } "
"protected void firePopupMenuWillBecomeVisible(){   Object[] listeners=listenerList.getListenerList();   PopupMenuEvent e=null;   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == PopupMenuListener.class) {       if (e == null)       e=new PopupMenuEvent(this);       ((PopupMenuListener)listeners[i + 1]).popupMenuWillBecomeVisible(e);     }   } } "
"public MarshalledObject(T obj) throws IOException {   if (obj == null) {     hash=13;     return;   }   ByteArrayOutputStream bout=new ByteArrayOutputStream();   ByteArrayOutputStream lout=new ByteArrayOutputStream();   MarshalledObjectOutputStream out=new MarshalledObjectOutputStream(bout,lout);   out.writeObject(obj);   out.flush();   objBytes=bout.toByteArray();   locBytes=(out.hadAnnotations() ? lout.toByteArray() : null);   int h=0;   for (int i=0; i < objBytes.length; i++) {     h=31 * h + objBytes[i];   }   hash=h; } "
"public static double parseDouble(byte[] bytes,int startIndex,int endIndex){   if (endIndex - startIndex == 8) {     return Double.longBitsToDouble(parseLong(bytes,startIndex,endIndex));   }  else   if (endIndex - startIndex == 4) {     return Float.intBitsToFloat((int)parseLong(bytes,startIndex,endIndex));   }  else {     throw new IllegalArgumentException(\"endIndex (\" + endIndex + \") - startIndex (\"+ startIndex+ \") != 4 or 8\");   } } "
"public static void deleteFileIfExistsWithRetry(Path path) throws IOException {   try {     if (Files.exists(path))     deleteFileWithRetry0(path);   }  catch (  InterruptedException x) {     throw new IOException(\"Interrupted while deleting.\",x);   } } "
"public TooManyHopsException(){   super(); } "
"public synchronized StringBuffer append(char[] chars,int start,int length){   append0(chars,start,length);   return this; } "
"public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {   return getPersistence().findByField2_First(field2,orderByComparator); } "
"@Override public synchronized void reset() throws IOException {   fbIndex=markFbIndex;   if (markedAtStart) {     firstBytes=null;   }   in.reset(); } "
"private static String reasonToString(int reason){   if ((reason > 0) && (reason < REASON_STRINGS.length)) {     return REASON_STRINGS[reason];   }   return \"Unknown reason \" + reason; } "
"public Object clone() throws CloneNotSupportedException {   return new IntVector(this); } "
"@AfterMethod(alwaysRun=true) public void reenableBackend() throws DirectoryException {   Backend<?> b=DirectoryServer.getBackend(DN.valueOf(\"o=test\"));   b.setWritabilityMode(WritabilityMode.ENABLED); } "
"public AttributeSet translateHTMLToCSS(AttributeSet htmlAttrSet){   AttributeSet cssAttrSet=css.translateHTMLToCSS(htmlAttrSet);   MutableAttributeSet cssStyleSet=addStyle(null,null);   cssStyleSet.addAttributes(cssAttrSet);   return cssStyleSet; } "
"private String result(HttpURLConnection conn,boolean input) throws IOException {   StringBuffer sb=new StringBuffer();   if (input) {     InputStream is=conn.getInputStream();     BufferedReader reader=new BufferedReader(new InputStreamReader(is,\"utf-8\"));     String line=null;     while ((line=reader.readLine()) != null) {       sb.append(line);     }     reader.close();     is.close();   }   Map<String,Object> result=new HashMap<String,Object>();   result.put(\"code\",conn.getResponseCode());   result.put(\"mesg\",conn.getResponseMessage());   result.put(\"type\",conn.getContentType());   result.put(\"data\",sb);   String output=String.valueOf(conn.getResponseCode());   setOutputResponseCode(output);   Gson gson=new Gson();   String json=gson.toJson(result);   logger.info(\"json = \" + json);   return json; } "
"public Base64PasswordStorageSchemeTestCase(){   super(\"cn=Base64,cn=Password Storage Schemes,cn=config\"); } "
"public static void removeFiles(String srcDir,String desDir){   File srcFile=new File(srcDir);   String[] list=srcFile.list();   if (list != null) {     int count=list.length;     for (int i=0; i < count; i++) {       String fileName=list[i];       File file=new File(desDir,fileName);       if (file.isFile()) {         file.delete();       }  else {         Debug.log(\"FileUtils.removeFiles() Unable to delete file\");       }     }   } } "
"public static String generateActivationKey(){   return RandomStringUtils.randomNumeric(DEF_COUNT); } "
"public boolean isMemberOf(IMembership im) throws UMSException {   return im.hasMember(getGuid()); } "
"public LockableFileWriter(File file,boolean append) throws IOException {   this(file,append,null); } "
"public static void hideSoftKeyBoard(Context context,IBinder windowToken){   InputMethodManager mgr=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);   mgr.hideSoftInputFromWindow(windowToken,0); } "
"public void testCertificateFactory13() throws IOException {   if (!X509Support) {     fail(NotSupportMsg);     return;   }   CertificateFactory[] certFs=initCertFs();   assertNotNull(\"CertificateFactory objects were not created\",certFs);   byte[] enc={(byte)0,(byte)2,(byte)3,(byte)4,(byte)5};   MyCertPath mc=new MyCertPath(enc);   ByteArrayOutputStream os=new ByteArrayOutputStream();   ObjectOutputStream oos=new ObjectOutputStream(os);   oos.writeObject(mc);   oos.flush();   oos.close();   byte[] arr=os.toByteArray();   ByteArrayInputStream is=new ByteArrayInputStream(arr);   for (int i=0; i < certFs.length; i++) {     try {       certFs[i].generateCertPath(is);       fail(\"CertificateException must be thrown because input stream contains incorrect datas\");     }  catch (    CertificateException e) {     }     Iterator<String> it=certFs[i].getCertPathEncodings();     while (it.hasNext()) {       try {         certFs[i].generateCertPath(is,it.next());         fail(\"CertificateException must be thrown because input stream contains incorrect datas\");       }  catch (      CertificateException e) {       }     }   } } "
"public synchronized String toString(){   String toString=\"Thread Auditor - List of monitored threads:\\n\";   Iterator<ThreadHandle> it=threadHandles.values().iterator();   while (it.hasNext()) {     ThreadHandle threadHandle=(ThreadHandle)it.next();     toString+=\"   \" + threadHandle.toString() + \"\\n\";   }   return toString; } "
"public int length(){   return count; } "
"public final long determinant(PlaPointInt p_other){   return (long)v_x * p_other.v_y - (long)v_y * p_other.v_x; } "
"public static String URLDecode(String str,String enc,boolean isQuery){   if (str == null)   return (null);   byte[] bytes=null;   try {     if (enc == null) {       bytes=str.getBytes(StandardCharsets.ISO_8859_1);       enc=\"ISO-8859-1\";     }  else {       bytes=str.getBytes(B2CConverter.getCharset(enc));     }   }  catch (  UnsupportedEncodingException uee) {     if (log.isDebugEnabled()) {       log.debug(sm.getString(\"uDecoder.urlDecode.uee\",enc),uee);     }   }   return URLDecode(bytes,enc,isQuery); } "
"public static ValueExp minus(ValueExp value1,ValueExp value2){   return new BinaryOpValueExp(MINUS,value1,value2); } "
"public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {   throw new UnsupportedOperationException(\"not yet.\"); } "
"public SIPHeader parse() throws ParseException {   if (debug)   dbg_enter(\"DateParser.parse\");   try {     headerName(TokenTypes.DATE);     wkday();     lexer.match(',');     lexer.match(' ');     Calendar cal=date();     lexer.match(' ');     time(cal);     lexer.match(' ');     String tzone=this.lexer.ttoken().toLowerCase();     if (!\"gmt\".equals(tzone))     throw createParseException(\"Bad Time Zone \" + tzone);     this.lexer.match('\\n');     SIPDateHeader retval=new SIPDateHeader();     retval.setDate(cal);     return retval;   }   finally {     if (debug)     dbg_leave(\"DateParser.parse\");   } } "
"public static String showInputDialog(Component parentComponent,Object message,Object initialSelectionValue){   return (String)showInputDialog(parentComponent,message,UIManager.getString(\"OptionPane.inputDialogTitle\",parentComponent),QUESTION_MESSAGE,null,null,initialSelectionValue); } "
"public static boolean isXML11NameHighSurrogate(int c){   return (0xD800 <= c && c <= 0xDB7F); } "
"public static Pose toOpenGLPoseWithScreenRotation(TangoPoseData tangoPose,int rotationIndex){   Matrix4 startServiceTDevice=tangoPoseToMatrix(tangoPose);   Matrix4 openglWorldTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTDevice); switch (rotationIndex) { case 0:     openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT);   break; case 1: openglWorldTDevice.multiply(ROTATION_90_T_DEFAULT); break; case 2: openglWorldTDevice.multiply(ROTATION_180_T_DEFAULT); break; case 3: openglWorldTDevice.multiply(ROTATION_270_T_DEFAULT); break; default : openglWorldTDevice.multiply(ROTATION_0_T_DEFAULT); break; } return matrixToPose(openglWorldTDevice); } "
"@Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return _fooLocalService.deleteFoo(foo); } "
"static double powerOfTwoD(int n){   assert (n >= DoubleConsts.MIN_EXPONENT && n <= DoubleConsts.MAX_EXPONENT);   return Double.longBitsToDouble((((long)n + (long)DoubleConsts.EXP_BIAS) << (DoubleConsts.SIGNIFICAND_WIDTH - 1)) & DoubleConsts.EXP_BIT_MASK); } "
"protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){   super.firePropertyChange(propertyName,oldValue,newValue);   if (propertyName.equals(EnableWindowBlit)) {     if (newValue != null) {       setScrollMode(BLIT_SCROLL_MODE);     }  else {       setScrollMode(SIMPLE_SCROLL_MODE);     }   } } "
"private void validateFilterMap(FilterMap filterMap){   String filterName=filterMap.getFilterName();   String[] servletNames=filterMap.getServletNames();   String[] urlPatterns=filterMap.getURLPatterns();   if (findFilterDef(filterName) == null)   throw new IllegalArgumentException(sm.getString(\"standardContext.filterMap.name\",filterName));   if (!filterMap.getMatchAllServletNames() && !filterMap.getMatchAllUrlPatterns() && (servletNames.length == 0)&& (urlPatterns.length == 0))   throw new IllegalArgumentException(sm.getString(\"standardContext.filterMap.either\"));   for (int i=0; i < urlPatterns.length; i++) {     if (!validateURLPattern(urlPatterns[i])) {       throw new IllegalArgumentException(sm.getString(\"standardContext.filterMap.pattern\",urlPatterns[i]));     }   } } "
"public void replaceResourceData(int idx,SMDiscoEntryData data) throws AMConsoleException {   data.setDiscoStr(isUserResourceOffering());   SMDiscoEntryData old=(SMDiscoEntryData)discoData.set(idx,data); } "
"public boolean hasAttributeNS(String namespaceURI,String localName){   return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName); } "
"public void makeGraph(File linkGraph) throws Exception {   String temp212;   int rowNum=0;   BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));   while ((temp212=br.readLine()) != null) {     String[] strs=temp212.split(\" \");     for (int i=0; i < strs.length; i++) {       graph[rowNum][i]=Double.parseDouble(strs[i]);     }     rowNum++;   }   for (int i=0; i < dataNum; i++) {     for (int j=0; j < dimension; j++) {       W[i][j]=r.nextDouble();       H[j][i]=r.nextDouble();     }   }   for (int i=0; i < dataNum; i++) {     double sumW=0;     double sumH=0;     for (int j=0; j < dimension; j++) {       sumW+=W[i][j] * W[i][j];       sumH+=H[j][i] * H[j][i];     }     sumW=Math.sqrt(sumW);     sumH=Math.sqrt(sumH);     for (int j=0; j < dimension; j++) {       W[i][j]/=sumW;       H[j][i]/=sumH;     }   }   trainW();   init=false; } "
"public static void unregisterAll(){ synchronized (allLists) {     for (    HandlerList h : allLists) { synchronized (h) {         for (        List<RegisteredListener> list : h.handlerslots.values()) {           list.clear();         }         h.handlers=null;       }     }   } } "
"protected void uninstallDefaults(){   LookAndFeel.installColorsAndFont(comboBox,\"ComboBox.background\",\"ComboBox.foreground\",\"ComboBox.font\");   LookAndFeel.uninstallBorder(comboBox); } "
"public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){   paintBackground(context,g,x,y,w,h,orientation); } "
"public final void lazySet(boolean newValue){   int v=newValue ? 1 : 0;   unsafe.putOrderedInt(this,valueOffset,v); } "
"static <T>ReplayPromise<T> replayPromise(final Duration timeout,final long time){   return new ReplayPromiseImpl<>(timeout,time); } "
"public static Packet toPacket(ByteBuffer data){   final byte code=data.get();   final short id=(short)((data.get()) & 0xFF);   final short datalen=data.getShort();   final byte[] authData=new byte[16];   data.get(authData);   final PacketType type=PacketType.getPacketType(code);   Packet pkt=null; switch (type) { case ACCESS_ACCEPT:     pkt=new AccessAccept();   pkt.setAuthenticator(new ResponseAuthenticator(authData)); break; case ACCESS_CHALLENGE: pkt=new AccessChallenge(); pkt.setAuthenticator(new ResponseAuthenticator(authData)); break; case ACCESS_REJECT: pkt=new AccessReject(); pkt.setAuthenticator(new ResponseAuthenticator(authData)); break; case ACCESS_REQUEST: pkt=new AccessRequest(); pkt.setAuthenticator(new RequestAuthenticator(authData)); break; case UNKNOWN: default : LOG.log(Level.WARNING,\"Unsupported packet type code '\" + code + \"' received. Unable to handle packet.\"); return null; } pkt.setIdentifier(id); Attribute a=null; while ((a=PacketFactory.nextAttribute(data)) != null) { pkt.addAttribute(a); } return pkt; } "
"public EmbeddedDirectoryServerException(LocalizableMessage message){   super(message); } "
"public boolean hasChild(String childName){   return children.containsKey(childName); } "
"@Override public void write(String str){ } "
"public JMXProviderException(String message,Throwable cause){   super(message);   this.cause=cause; } "
"@Deprecated public RMISecurityException(String name){   super(name); } "
"private void appendHeader(final Operation operation,final String opType,final String category,final StringBuilder buffer){   buffer.append('[').append(TimeThread.getUserDefinedTime(timeStampFormat)).append(\"] \");   buffer.append(opType);   if (!isCombinedMode) {     buffer.append(' ').append(category);   }   buffer.append(\" conn=\").append(operation.getConnectionID());   buffer.append(\" op=\").append(operation.getOperationID());   buffer.append(\" msgID=\").append(operation.getMessageID());   appendTransactionId(operation,buffer); } "
"public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {   ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,\"text()\",\"text\");   charProcessor.setXslTextElement(null); } "
"public TransformerConfigurationException(Throwable e){   super(e); } "
"@Inject public OldPolicyConditionMigrationUpgradeStep(PrivilegedAction<SSOToken> adminTokenAction,@DataLayer(ConnectionType.DATA_LAYER) ConnectionFactory connectionFactory){   super(adminTokenAction,connectionFactory);   this.conditionUpgrader=new PolicyConditionUpgrader(new PolicyConditionUpgradeMap()); } "
"public CompareOperation processCompare(ByteString rawEntryDN,String attributeType,ByteString assertionValue,List<Control> controls){   CompareOperationBasis compareOperation=new CompareOperationBasis(this,nextOperationID(),nextMessageID(),controls,rawEntryDN,attributeType,assertionValue);   compareOperation.setInternalOperation(true);   compareOperation.run();   return compareOperation; } "
"@Override public synchronized int hashCode(){   int hashCode=getID().hashCode() + rawOffset;   if (useDaylight) {     hashCode+=startYear + startMonth + startDay+ startDayOfWeek+ startTime+ startMode+ endMonth+ endDay+ endDayOfWeek+ endTime+ endMode+ dstSavings;   }   return hashCode; } "
"public void update(Graphics g){   paint(g); } "
"public RuntimePermission(String name){   super(name); } "
"public void updateToken(Subject subject,String tokenId,String eTag,JSONObject newVals) throws CoreTokenException, JSONException {   SSOToken token=SubjectUtils.getSSOToken(subject);   if (token == null) {     throw new CoreTokenException(210,null,401);   }   String dn=null;   try {     dn=getCoreTokenDN(tokenId);     if (SMSEntry.checkIfEntryExists(dn,token)) {       SMSEntry s=new SMSEntry(token,dn);       String tokenAttrs=getTokenAttributeValueFromSM(s,JSON_ATTR);       JSONObject json=new JSONObject(tokenAttrs);       checkETag(eTag,json,tokenId);       newVals=validateAndToLowerCase(newVals);       if (newVals.has(CoreTokenConstants.TOKEN_ID)) {         throw new CoreTokenException(221,null,409);       }       if (newVals.has(CoreTokenConstants.TOKEN_TYPE)) {         throw new CoreTokenException(224,null,409);       }       json=updateAttributeValues(json,newVals);       Map<String,Set<String>> map=validateAndCreateMap(tokenId,json);       s.setAttributes(map);       s.save();     }  else {       throw new CoreTokenException(203,null,404);     }   }  catch (  SMSException e) {     CoreTokenUtils.debug.error(\"OpenSSOCoreTokenStore.updateToken\",e);     throw new CoreTokenException(206,null,e);   } catch (  SSOException e) {     CoreTokenUtils.debug.error(\"OpenSSOCoreTokenStore.updateToken\",e);     throw new CoreTokenException(301,null,e);   } } "
"public void handleButton2Request(RequestInvocationEvent event){   PolicyModel model=(PolicyModel)getModel();   String cacheID=(String)getPageSessionAttribute(ProfileViewBeanBase.PG_SESSION_POLICY_CACHE_ID);   try {     CachedPolicy cachedPolicy=model.getCachedPolicy(cacheID);     String policyName=cachedPolicy.getTrackPolicyName();     String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);     try {       cacheID=model.cachePolicy(curRealm,policyName);       setPageSessionAttribute(PolicyOpViewBeanBase.PG_SESSION_POLICY_CACHE_ID,cacheID);     }  catch (    AMConsoleException e) {       setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     }     forwardTo();   }  catch (  AMConsoleException e) {     debug.warning(\"PolicyNormalEditViewBean.handleButton2Request\",e);     redirectToStartURL();   } } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   String subSchema=(String)getDisplayFieldValue(RB_SUBCONFIG);   SubConfigAddViewBean vb=(SubConfigAddViewBean)getViewBean(SubConfigAddViewBean.class);   unlockPageTrailForSwapping();   passPgSessionMap(vb);   vb.setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_SCHEMA_NAME,subSchema);   vb.forwardTo(getRequestContext()); } "
"public void handleReorderEntryButtonRequest(RequestInvocationEvent event) throws ModelControlException {   CCActionTable table=(CCActionTable)getChild(AUTH_ENTRY_TABLE);   table.restoreStateData();   cacheValues();   setPageSessionAttribute(ENTRY_LIST,AMAuthConfigUtils.authConfigurationEntryToXMLString(getTableData()));   ReorderAuthChainsViewBean vb=(ReorderAuthChainsViewBean)getViewBean(ReorderAuthChainsViewBean.class);   passPgSessionMap(vb);   vb.forwardTo(getRequestContext()); } "
"public static void resetShutdownCalled(){   shutdownCalled=false; } "
"public void insertUpdate(DocumentEvent e,Shape a,ViewFactory f){   if (isLoaded()) {     super.insertUpdate(e,a,f);   } } "
"public String toXMLString() throws FSMsgException {   return toXMLString(true,true); } "
"public static Map<String,String> parseAttributeMapping(Set<String> mappings){   Map<String,String> map=new CaseInsensitiveHashMap();   if (mappings == null) {     return map;   }   for (  String mapping : mappings) {     int idx=mapping.indexOf('=');     if (idx == -1) {       map.put(mapping,mapping);     }  else {       String from=mapping.substring(0,idx);       String to=mapping.substring(idx + 1);       map.put(from,to);     }   }   return map; } "
"public boolean isConnected(){   return mClient.isConnected(); } "
"public void endEntity(String name) throws org.xml.sax.SAXException {   if (name.equals(\"[dtd]\"))   m_inExternalDTD=false;   m_inEntityRef=false;   if (m_tracer != null)   this.fireEndEntity(name); } "
"public void clear(){   table=null; } "
"protected void fireColumnAdded(TableColumnModelEvent e){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == TableColumnModelListener.class) {       ((TableColumnModelListener)listeners[i + 1]).columnAdded(e);     }   } } "
"void capture(final Context context,final Response response,final CapturePoint mode){   StringWriter out=new StringWriter();   PrintWriter writer=new PrintWriter(out);   String id=context.getId(); switch (mode) { case RESPONSE:     captureResponse(writer,response,id);   break; case FILTERED_RESPONSE: captureFilteredResponse(writer,response,id); break; default : throw new IllegalArgumentException(\"The given mode is not accepted: \" + mode.name()); } if (captureContext) { writer.println(\"Context's content as JSON:\"); captureContextAsJson(writer,context); } logger.info(out.toString()); } "
"public Request createRequest(){   Request request=new Request();   request.setConnector(this);   return (request); } "
"public static void importServiceData(String fileName) throws UpgradeException {   System.out.println(bundle.getString(\"upg-import-service-data\") + \": \" + fileName);   String[] args=new String[8];   args[0]=\"--runasdn\";   args[1]=bindDN;   args[2]=\"-w\";   args[3]=bindPasswd;   args[4]=\"-c\";   args[5]=\"-v\";   args[6]=\"-t\";   args[7]=fileName;   invokeAdminCLI(args); } "
"public IllegalFormatConversionException(char c,Class<?> arg){   if (arg == null)   throw new NullPointerException();   this.c=c;   this.arg=arg; } "
"public static DeleteRequest newDeleteRequest(final DN name){   Reject.ifNull(name);   return new DeleteRequestImpl(name); } "
"public XStringForChars(char[] val,int start,int length){   super(val);   m_start=start;   m_length=length;   if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null)); } "
"private PolicyEvaluator(String serviceName,AppSSOTokenProvider appSSOTokenProvider) throws PolicyException, SSOException {   if (debug.messageEnabled()) {     debug.message(\"PolicyEvaluator():Creating PolicyEvaluator:\" + \"serviceName=\" + serviceName + \":appSSOTokenProvider=\"+ appSSOTokenProvider);   }   if (serviceName == null) {     if (debug.warningEnabled()) {       debug.warning(\"PolicyEvaluator():\" + \"serviceName is null\");     }     return;   }   init(serviceName,appSSOTokenProvider); } "
"public AMUser createUser(String uid,Map attrMap,Map serviceNameAndAttrs) throws AMException, SSOException {   Set serviceNames=getOrgTypeAttributes(ADMINISTRATION_SERVICE,REQUIRED_SERVICES_ATTR);   if (serviceNames == Collections.EMPTY_SET) {     serviceNames=new HashSet();   }   Set assignServiceNames=serviceNameAndAttrs.keySet();   Set registered=dsServices.getRegisteredServiceNames(null,entryDN);   Iterator it=assignServiceNames.iterator();   while (it.hasNext()) {     String tmpS=(String)it.next();     if (!registered.contains(tmpS)) {       Object[] args={tmpS};       throw new AMException(AMSDKBundle.getString(\"459\",args,super.locale),\"459\",args);     }   }   it=assignServiceNames.iterator();   while (it.hasNext()) {     String tmp=(String)it.next();     serviceNames.add(tmp);   }   Set objectClasses=null;   if ((serviceNames != null) && (!serviceNames.isEmpty())) {     objectClasses=AMServiceUtils.getServiceObjectClasses(token,serviceNames);     Set userOCs=(Set)attrMap.get(\"objectclass\");     objectClasses=AMCommonUtils.combineOCs(userOCs,objectClasses);   }   String userDN=AMNamingAttrManager.getNamingAttr(USER) + \"=\" + uid+ \",\"+ super.entryDN;   AMUserImpl user=new AMUserImpl(super.token,userDN);   user.setAttributes(attrMap);   it=assignServiceNames.iterator();   while (it.hasNext()) {     String thisService=(String)it.next();     Map sAttrMap=(Map)serviceNameAndAttrs.get(thisService);     try {       ServiceSchemaManager ssm=new ServiceSchemaManager(thisService,token);       ServiceSchema ss=ssm.getSchema(SchemaType.USER);       sAttrMap=ss.validateAndInheritDefaults(sAttrMap,true);       sAttrMap=AMCommonUtils.removeEmptyValues(sAttrMap);       user.setAttributes(sAttrMap);     }  catch (    SMSException se) {       debug.error(\"AMOrganizationImpl: Data validation failed-> \" + thisService,se);       Object args[]={thisService};       throw new AMException(AMSDKBundle.getString(\"976\",args,super.locale),\"976\",args);     }   }   if (objectClasses != null && !objectClasses.isEmpty()) {     user.setAttribute(\"objectclass\",objectClasses);   }   user.create();   return (user); } "
"public String parse(String source){   StringBuffer sbuf=new StringBuffer(source);   Iterator key_it=argmap.keySet().iterator();   while (key_it.hasNext()) {     String it_key=(String)key_it.next();     String it_obj=formatObject(argmap.get(it_key));     int it_idx=-1;     do {       it_idx=sbuf.toString().indexOf(it_obj,++it_idx);       if (it_idx >= 0) {         sbuf.replace(it_idx,it_idx + it_obj.length(),ldel + it_key + rdel);       }     }  while (it_idx != -1);   }   return sbuf.toString(); } "
"@NonNull public final Agera filter(@NonNull Condition condition){   return new AgeraFilter(this,condition); } "
"protected ViewListener createViewListener(){   return new ViewListener(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributensurinull.class,args); } "
"@Override public void cacheResult(List<Foo> foos){   for (  Foo foo : foos) {     if (entityCache.getResult(FooModelImpl.ENTITY_CACHE_ENABLED,FooImpl.class,foo.getPrimaryKey()) == null) {       cacheResult(foo);     }  else {       foo.resetOriginalValues();     }   } } "
"private void requestPermissions(){   if (ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {     ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},MY_PERMISSIONS_REQUEST_WRITE_STORAGE);   }  else {     dispatchTakePictureIntent();   } } "
"public String toString(){   return new String(getType() + \" with current value: \" + getValue()+ \" \"+ units+ \" (range: \"+ minimum+ \" - \"+ maximum+ \")\"); } "
"public static String stopCapture(){   Stack<CaptureLog> stack=logs.get();   if (stack == null || stack.isEmpty()) {     return null;   }   CaptureLog log=stack.pop();   if (log == null) {     return null;   }   String capture=log.getCapture();   log.reset();   reuse.push(log);   return capture; } "
"protected void populateClient(String clientName,Properties props) throws InvalidPropertiesFormatException {   String name=props.getProperty(clientName + NAME_SUFFIX);   String attrList=props.getProperty(clientName + ATTRIBUTE_SUFFIX);   StringTokenizer st=new StringTokenizer(attrList,COMMA);   Map attributes=new HashMap();   Set attributeValues=null;   while (st.hasMoreTokens()) {     attributeValues=new HashSet();     String entry=st.nextToken();     String attrName=entry.substring(0,entry.indexOf(EQUALS));     String attrValue=entry.substring(entry.indexOf(EQUALS) + 1);     attributeValues.add(attrValue);     attributes.put(attrName,attributeValues);   }   clients.put(name,new Client(name,attributes));   clientsData.put(name,attributes); } "
"private boolean doesMatch(String pattern,int pp,String result,int rp){   for (; ; ) {     if (pp == pattern.length() && rp == result.length())     return true;     if (pp == pattern.length())     return false;     char pc=pattern.charAt(pp);     if (pc == '_') {       if (rp == result.length())       return false;       pp++;       rp++;     }  else     if (pc == '%') {       if (pp == pattern.length() - 1) {         return true;       }       for (int sp=rp; sp < result.length(); sp++) {         if (doesMatch(pattern,pp + 1,result,sp)) {           return true;         }       }       return false;     }  else {       if (rp == result.length())       return false;       if (pc != result.charAt(rp)) {         return false;       }       pp++;       rp++;     }   } } "
"public void add(SniffMessage sniffMessage){   boolean newSession=true;   ListIterator i=super.listIterator();   while (i.hasNext()) {     SniffMessageList temp=(SniffMessageList)i.next();     if (temp.getCallID().equals(sniffMessage.getCallID())) {       temp.add(sniffMessage);       newSession=false;     }   }   if (newSession == true) {     SniffMessageList newMessageList=new SniffMessageList();     newMessageList.add(sniffMessage);     super.add(newMessageList);   } } "
"public SerializedField(View parent,Model model,String name,String boundName,Serializable value){   super(parent,model,name,boundName,null);   setValue(value,false); } "
"protected void decrypt() throws IOException {   inBuffer.flip();   outBuffer.clear();   try {     cipher.update(inBuffer,outBuffer);   }  catch (  ShortBufferException e) {     throw new IOException(e);   }   inBuffer.clear();   outBuffer.flip(); } "
"public static SearchFilter createExtensibleMatchFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue,String matchingRuleID,boolean dnAttributes) throws DirectoryException {   if (attributeType == null && matchingRuleID == null) {     LocalizableMessage message=ERR_SEARCH_FILTER_CREATE_EXTENSIBLE_MATCH_NO_AT_OR_MR.get();     throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);   }   return new SearchFilter(FilterType.EXTENSIBLE_MATCH,null,null,attributeType,attributeOptions,assertionValue,null,null,null,matchingRuleID,dnAttributes); } "
"@Override public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   String realm=getStringOptionValue(IArgument.REALM_NAME);   String name=getStringOptionValue(PARAM_NAME);   String[] params={realm,name};   writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_CREATE_APPLICATION_PRIVILEGE\",params);   String description=getStringOptionValue(PARAM_DESCRIPTION);   ApplicationPrivilege.PossibleAction actions=getActions();   Set<SubjectImplementation> subjects=getSubjects(rc);   try {     Map<String,Set<String>> mapAppToResources=getApplicationResourcesMap(rc,realm);     Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());     ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);     ApplicationPrivilege appPrivilege=new ApplicationPrivilege(name);     appPrivilege.setDescription(description);     appPrivilege.setActionValues(actions);     appPrivilege.setApplicationResources(mapAppToResources);     appPrivilege.setSubject(subjects);     apm.addPrivilege(appPrivilege);     Object[] msgParam={name};     getOutputWriter().printlnMessage(MessageFormat.format(getResourceString(\"create-application-privilege-succeeded\"),msgParam));     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEEDED_CREATE_APPLICATION_PRIVILEGE\",params);   }  catch (  EntitlementException ex) {     String[] paramExs={realm,name,ex.getMessage()};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"FAILED_CREATE_APPLICATION_PRIVILEGE\",paramExs);     throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  CLIException ex) {     String[] paramExs={realm,name,ex.getMessage()};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"FAILED_CREATE_APPLICATION_PRIVILEGE\",paramExs);     throw ex;   } } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   try {     handleButton1Request(getCachedPolicy());   }  catch (  AMConsoleException e) {     redirectToStartURL();   } } "
"public RemoteException(String s){   super(s);   initCause(null); } "
"public static void appendToList(List<String> list,String[] array){   if ((array != null) && (array.length > 0)) {     for (int i=0; i < array.length; i++) {       list.add(array[i]);     }   } } "
"public boolean isAuthenticated(){   return isAuthenticated; } "
"public final void yyclose() throws java.io.IOException {   zzAtEOF=true;   zzEndRead=zzStartRead;   if (zzReader != null)   zzReader.close(); } "
"public Future<Long> activeCount(String type){   Future<Long> future=Future.future();   jobService.activeCount(type,future.completer());   return future; } "
"public void test_getPeerHost() throws Exception {   SSLSession s=clientSession;   assertEquals(InetAddress.getLocalHost().getHostName(),s.getPeerHost());   assertEquals(serverSocket.getLocalPort(),s.getPeerPort()); } "
"public void clear(){   this.parameters=null; } "
"@Inject public DeviceCodeVerificationResource(XUIState xuiState,@Named(\"OAuth2Router\") Router router,BaseURLProviderFactory baseURLProviderFactory,OAuth2Representation representation,TokenStore tokenStore,OAuth2RequestFactory requestFactory,AuthorizationService authorizationService,OAuth2ProviderSettingsFactory providerSettingsFactory,ExceptionHandler exceptionHandler,ResourceOwnerSessionValidator resourceOwnerSessionValidator,ClientRegistrationStore clientRegistrationStore,OAuth2Utils oAuth2Utils,CsrfProtection csrfProtection){   super(router,baseURLProviderFactory,xuiState,resourceOwnerSessionValidator);   this.representation=representation;   this.tokenStore=tokenStore;   this.requestFactory=requestFactory;   this.authorizationService=authorizationService;   this.providerSettingsFactory=providerSettingsFactory;   this.exceptionHandler=exceptionHandler;   this.resourceOwnerSessionValidator=resourceOwnerSessionValidator;   this.clientRegistrationStore=clientRegistrationStore;   this.oAuth2Utils=oAuth2Utils;   this.csrfProtection=csrfProtection; } "
"public boolean matchesEntry(Entry entry) throws DirectoryException {   ConditionResult result=matchesEntryInternal(this,entry,0); switch (result) { case TRUE:     return true; case FALSE: case UNDEFINED:   return false; default : logger.error(ERR_SEARCH_FILTER_INVALID_RESULT_TYPE,entry.getName(),this,result); return false; } } "
"public SQLNonTransientException(String reason,String sqlState,int vendorCode,Throwable cause){   super(reason,sqlState,vendorCode,cause); } "
"protected void updateLayoutState(){   int fixedCellHeight=list.getFixedCellHeight();   int fixedCellWidth=list.getFixedCellWidth();   cellWidth=(fixedCellWidth != -1) ? fixedCellWidth : -1;   if (fixedCellHeight != -1) {     cellHeight=fixedCellHeight;     cellHeights=null;   }  else {     cellHeight=-1;     cellHeights=new int[list.getModel().getSize()];   }   if ((fixedCellWidth == -1) || (fixedCellHeight == -1)) {     ListModel dataModel=list.getModel();     int dataModelSize=dataModel.getSize();     ListCellRenderer renderer=list.getCellRenderer();     if (renderer != null) {       for (int index=0; index < dataModelSize; index++) {         Object value=dataModel.getElementAt(index);         Component c=renderer.getListCellRendererComponent(list,value,index,false,false);         rendererPane.add(c);         Dimension cellSize=c.getPreferredSize();         if (fixedCellWidth == -1) {           cellWidth=Math.max(cellSize.width,cellWidth);         }         if (fixedCellHeight == -1) {           cellHeights[index]=cellSize.height;         }       }     }  else {       if (cellWidth == -1) {         cellWidth=0;       }       if (cellHeights == null) {         cellHeights=new int[dataModelSize];       }       for (int index=0; index < dataModelSize; index++) {         cellHeights[index]=0;       }     }   }   columnCount=1;   if (layoutOrientation != JList.VERTICAL) {     updateHorizontalLayoutState(fixedCellWidth,fixedCellHeight);   } } "
"public Builder names(final Collection<String> names){   this.names.addAll(names);   return this; } "
"private void updateSchemaFile(SchemaElement schemaElement) throws OpenDsException {   String schemaFile=getSchemaFile(schemaElement);   try (LDIFExportConfig exportConfig=new LDIFExportConfig(schemaFile,OVERWRITE);LDIFReader reader=new LDIFReader(new LDIFImportConfig(schemaFile))){     Entry schemaEntry=reader.readEntry();     Modification mod=new Modification(ModificationType.DELETE,Attributes.create(getAttributeConfigName(schemaElement),getSchemaFileAttributeValue(schemaElement)));     schemaEntry.applyModification(mod);     try (LDIFWriter writer=new LDIFWriter(exportConfig)){       writer.writeEntry(schemaEntry);       exportConfig.getWriter().newLine();     }    }  catch (  IOException e) {     throw new OfflineUpdateException(ERR_CTRL_PANEL_ERROR_UPDATING_SCHEMA.get(e),e);   } } "
"private boolean isShuttingDown(){   return stopRequested; } "
"public void initialize(Map initParams){ } "
"public com.sun.identity.liberty.ws.idpp.jaxb.LOElement createLOElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LOElementImpl(); } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws SAML2Exception {   if (action == null || action.trim().length() == 0) {     if (SAML2SDKUtils.debug.messageEnabled()) {       SAML2SDKUtils.debug.message(\"ActionImpl.toXMLString: \" + \"Action value is null or empty.\");     }     throw new SAML2Exception(SAML2SDKUtils.bundle.getString(\"emptyElementValue\"));   }   if (namespace == null || namespace.trim().length() == 0) {     if (SAML2SDKUtils.debug.messageEnabled()) {       SAML2SDKUtils.debug.message(\"ActionImpl.toXMLString: \" + \"Namespace is empty or missing\");     }     throw new SAML2Exception(SAML2SDKUtils.bundle.getString(\"missingAttribute\"));   }   StringBuffer result=new StringBuffer(1000);   String prefix=\"\";   String uri=\"\";   if (includeNS) {     prefix=SAML2Constants.ASSERTION_PREFIX;   }   if (declareNS) {     uri=SAML2Constants.ASSERTION_DECLARE_STR;   }   result.append(\"<\").append(prefix).append(\"Action\").append(uri).append(\" Namespace=\\\"\").append(namespace).append(\"\\\">\");   result.append(action);   result.append(\"</\").append(prefix).append(\"Action>\");   return ((String)result.toString()); } "
"public void handleHrefExceptionRequest(RequestInvocationEvent event) throws ServletException, IOException {   ViewBean targetView=getViewBean(LoginViewBean.class);   targetView.forwardTo(getRequestContext()); } "
"public Object[] toArray(){   return children.toArray(); } "
"public static VirtualListViewResponseControl newControl(final int targetPosition,final int contentCount,final ResultCode result,final ByteString contextID){   Reject.ifNull(result);   Reject.ifFalse(targetPosition >= 0,\"targetPosition is less than 0\");   Reject.ifFalse(contentCount >= 0,\"contentCount is less than 0\");   return new VirtualListViewResponseControl(false,targetPosition,contentCount,result,contextID); } "
"private void validateChrono(TemporalAccessor temporal){   Objects.requireNonNull(temporal,\"temporal\");   Chronology temporalChrono=temporal.query(TemporalQueries.chronology());   if (temporalChrono != null && chrono.equals(temporalChrono) == false) {     throw new DateTimeException(\"Chronology mismatch, expected: \" + chrono.getId() + \", actual: \"+ temporalChrono.getId());   } } "
"public void createFederation(String realm,FederationElement federation) throws WSFederationMetaException {   String federationId=federation.getFederationID();   if (federationId == null) {     federationId=WSFederationConstants.DEFAULT_FEDERATION_ID;   }   if (realm == null) {     realm=\"/\";   }   String[] objs={federationId,realm};   try {     Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_METADATA,federation);     configInst.createConfiguration(realm,federationId,attrs);     LogUtil.access(Level.INFO,LogUtil.ENTITY_DESCRIPTOR_CREATED,objs,null);   }  catch (  ConfigurationException e) {     debug.error(\"WSFederationMetaManager.createFederation:\",e);     String[] data={e.getMessage(),federationId,realm};     LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_DESCRIPTOR,data,null);     throw new WSFederationMetaException(e);   } catch (  JAXBException jaxbe) {     debug.error(\"WSFederationMetaManager.createFederation:\",jaxbe);     LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_DESCRIPTOR,objs,null);     throw new WSFederationMetaException(\"invalid_descriptor\",objs);   } } "
"boolean ancestorIsOk(ElemTemplateElement child){   while (child.getParentElem() != null && !(child.getParentElem() instanceof ElemExsltFunction)) {     ElemTemplateElement parent=child.getParentElem();     if (parent instanceof ElemExsltFuncResult || parent instanceof ElemVariable || parent instanceof ElemParam|| parent instanceof ElemMessage)     return true;     child=parent;   }   return false; } "
"public BrdComponent(String p_name,PlaPointInt p_location,int p_rotation_in_degree,boolean p_on_front,LibPackage p_package_front,LibPackage p_package_back,int p_no,boolean p_position_fixed){   id_no=p_no;   name=p_name;   location=p_location;   on_front=p_on_front;   lib_package_front=p_package_front;   lib_package_back=p_package_back;   position_fixed=p_position_fixed;   rotation_in_degree=normalize_rotation(p_rotation_in_degree); } "
"public InvalidCodeException(final String message){   super(400,\"invalid_code\",message); } "
"public void readHeader(String[] recordListHeader){   Vector header=new Vector(recordListHeader.length);   header.addAll(Arrays.asList(recordListHeader));   String signFieldName=LogConstants.SIGNATURE_FIELDNAME;   for (int j=0; j < header.size(); j++) {     if ((((String)header.get(j))).equalsIgnoreCase(signFieldName)) {       break;     }   } } "
"public boolean isSessionBlacklistingEnabled(){   return hotSwappableSessionServiceConfig.sessionBlacklistEnabled; } "
"protected void close() throws IOException {   shutdownEntry();   if (connection.isOpen())   connection.close(); } "
"static AttributeType newPlaceHolder(final String name,final Syntax syntax,final MatchingRule equalityMatchingRule){   return new AttributeType(name,syntax,equalityMatchingRule); } "
"public static void sort(byte[] array,int start,int end){   DualPivotQuicksort.sort(array,start,end); } "
"public void requestGraceLoginUseTimes(){   operations.add(PasswordPolicyStateOperationType.GET_GRACE_LOGIN_USE_TIMES); } "
"public void sendEvent(InternalSession internalSession,SessionEventType eventType){   sessionNotificationSender.sendEvent(internalSession,eventType); } "
"public static void main(final String[] args){   DOMTestCase.doMain(attrspecifiedvaluechanged.class,args); } "
"public GuiResources newGuiResources(String bundle_key){   return new GuiResources(stat,bundle_key); } "
"final public ColorModel coerceData(WritableRaster raster,boolean isAlphaPremultiplied){   if (!supportsAlpha || this.isAlphaPremultiplied() == isAlphaPremultiplied) {     return this;   }   int w=raster.getWidth();   int h=raster.getHeight();   int aIdx=numColorComponents;   float normAlpha;   float alphaScale=1.0f / ((float)((1 << nBits[aIdx]) - 1));   int rminX=raster.getMinX();   int rY=raster.getMinY();   int rX;   int pixel[]=null;   int zpixel[]=null;   if (isAlphaPremultiplied) { switch (transferType) { case DataBuffer.TYPE_BYTE: {         for (int y=0; y < h; y++, rY++) {           rX=rminX;           for (int x=0; x < w; x++, rX++) {             pixel=raster.getPixel(rX,rY,pixel);             normAlpha=pixel[aIdx] * alphaScale;             if (normAlpha != 0.f) {               for (int c=0; c < aIdx; c++) {                 pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);               }               raster.setPixel(rX,rY,pixel);             }  else {               if (zpixel == null) {                 zpixel=new int[numComponents];                 java.util.Arrays.fill(zpixel,0);               }               raster.setPixel(rX,rY,zpixel);             }           }         }       }     break; case DataBuffer.TYPE_USHORT: {     for (int y=0; y < h; y++, rY++) {       rX=rminX;       for (int x=0; x < w; x++, rX++) {         pixel=raster.getPixel(rX,rY,pixel);         normAlpha=pixel[aIdx] * alphaScale;         if (normAlpha != 0.f) {           for (int c=0; c < aIdx; c++) {             pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);           }           raster.setPixel(rX,rY,pixel);         }  else {           if (zpixel == null) {             zpixel=new int[numComponents];             java.util.Arrays.fill(zpixel,0);           }           raster.setPixel(rX,rY,zpixel);         }       }     }   } break; case DataBuffer.TYPE_INT: { for (int y=0; y < h; y++, rY++) {   rX=rminX;   for (int x=0; x < w; x++, rX++) {     pixel=raster.getPixel(rX,rY,pixel);     normAlpha=pixel[aIdx] * alphaScale;     if (normAlpha != 0.f) {       for (int c=0; c < aIdx; c++) {         pixel[c]=(int)(pixel[c] * normAlpha + 0.5f);       }       raster.setPixel(rX,rY,pixel);     }  else {       if (zpixel == null) {         zpixel=new int[numComponents];         java.util.Arrays.fill(zpixel,0);       }       raster.setPixel(rX,rY,zpixel);     }   } } } break; default : throw new UnsupportedOperationException(\"This method has not been \" + \"implemented for transferType \" + transferType); } }  else { switch (transferType) { case DataBuffer.TYPE_BYTE: { for (int y=0; y < h; y++, rY++) { rX=rminX; for (int x=0; x < w; x++, rX++) { pixel=raster.getPixel(rX,rY,pixel); normAlpha=pixel[aIdx] * alphaScale; if (normAlpha != 0.0f) { float invAlpha=1.0f / normAlpha; for (int c=0; c < aIdx; c++) {   pixel[c]=(int)(pixel[c] * invAlpha + 0.5f); } raster.setPixel(rX,rY,pixel); } } } } break; case DataBuffer.TYPE_USHORT: { for (int y=0; y < h; y++, rY++) { rX=rminX; for (int x=0; x < w; x++, rX++) { pixel=raster.getPixel(rX,rY,pixel); normAlpha=pixel[aIdx] * alphaScale; if (normAlpha != 0) { float invAlpha=1.0f / normAlpha; for (int c=0; c < aIdx; c++) { pixel[c]=(int)(pixel[c] * invAlpha + 0.5f); } raster.setPixel(rX,rY,pixel); } } } } break; case DataBuffer.TYPE_INT: { for (int y=0; y < h; y++, rY++) { rX=rminX; for (int x=0; x < w; x++, rX++) { pixel=raster.getPixel(rX,rY,pixel); normAlpha=pixel[aIdx] * alphaScale; if (normAlpha != 0) { float invAlpha=1.0f / normAlpha; for (int c=0; c < aIdx; c++) { pixel[c]=(int)(pixel[c] * invAlpha + 0.5f); } raster.setPixel(rX,rY,pixel); } } } } break; default : throw new UnsupportedOperationException(\"This method has not been \" + \"implemented for transferType \" + transferType); } } return new DirectColorModel(colorSpace,pixel_bits,maskArray[0],maskArray[1],maskArray[2],maskArray[3],isAlphaPremultiplied,transferType); } "
"@Override protected int sizeOf(String key,BitmapDrawable value){   final int bitmapSize=getBitmapSize(value) / 1024;   return bitmapSize == 0 ? 1 : bitmapSize; } "
"public boolean hasAttributeNS(String namespaceURI,String localName){   return hasAttribute(localName); } "
"@Override public Promise<ResourceResponse,ResourceException> filterRead(Context context,ReadRequest request,RequestHandler next){   CrestAuditor auditor=newAuditor(context,request);   auditor.auditAccessAttempt();   return auditResponse(next.handleRead(context,request),auditor,request); } "
"private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   String classMethod=\"CookieReaderServlet.doGetPost: \";   preferred_cookie_name=CookieUtils.getPreferCookieName(request.getRequestURI());   if (preferred_cookie_name == null) {     CookieUtils.debug.error(classMethod + \"The request uri is null.\");     CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,\"nullRequestUri\",CookieUtils.bundle.getString(\"nullRequestUri\"));     return;   }  else   if (preferred_cookie_name.equals(\"\")) {     CookieUtils.debug.error(classMethod + \"Cannot match the cookie name from \" + \"the request uri.\");     CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,\"invalidRequestUri\",CookieUtils.bundle.getString(\"invalidRequestUri\"));     return;   }   try {     boolean isValidReturn=false;     String returnURL=request.getParameter(IDPDiscoveryConstants.LRURL);     if (returnURL == null || returnURL.trim().length() <= 0) {       CookieUtils.debug.error(classMethod + \"Redirect URL not specified. \" + \"Cannot send preferred idp in query string\");       isValidReturn=false;     }  else {       isValidReturn=true;     }     if (isValidReturn) {       String cookieValue=getPreferredIdpCookie(request);       if (cookieValue != null) {         returnURL=appendCookieToReturnURL(returnURL,cookieValue);         if (CookieUtils.debug.messageEnabled()) {           CookieUtils.debug.message(classMethod + \"preferred idp:\" + cookieValue);         }       }       response.sendRedirect(returnURL);       return;     }  else {       CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,\"noRedirectionURL\",CookieUtils.bundle.getString(\"noRedirectionURL\"));       return;     }   }  catch (  Exception e) {     CookieUtils.debug.error(classMethod,e);     CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,\"readerServiceFailed\",e.getMessage());     return;   } } "
"@Override public void deallocate(Servlet servlet) throws ServletException {   if (!singleThreadModel) {     countAllocated.decrementAndGet();     return;   } synchronized (instancePool) {     countAllocated.decrementAndGet();     instancePool.push(servlet);     instancePool.notify();   } } "
"public boolean is_automatic_neckdown(){   return automatic_neckdown; } "
"public static String stringForQuery(SQLiteStatement prog,String[] selectionArgs){   prog.bindAllArgsAsStrings(selectionArgs);   return prog.simpleQueryForString(); } "
"public static ArgumentException unknownValueForChildComponent(String componentName){   LocalizableMessage msg=ERR_DSCFG_ERROR_FINDER_NO_CHILDREN.get(componentName);   return new ArgumentException(msg); } "
"private static <T>Handler<AsyncResult<T>> _failure(){   return null; } "
"public InvalidPathException(String input,String reason){   this(input,reason,-1); } "
"void deleteAssertion(String assertionID,String artifact){   ArtEntry artEntry=null;   if (artifact != null) {     artEntry=(ArtEntry)artEntryMap.remove(artifact);     String[] data={SAMLUtils.bundle.getString(\"assertionArtifactRemoved\"),artifact};     LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_ARTIFACT_REMOVED,data);   }   if (assertionID != null) {     Entry entry=null;     entry=(Entry)idEntryMap.remove(assertionID);     if (entry != null) {       String[] data={SAMLUtils.bundle.getString(\"assertionRemoved\"),assertionID};       LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_REMOVED,data);       if (artifact == null) {         String artString=entry.getArtifactString();         if (artString != null) { synchronized (artEntryMap) {             artEntryMap.remove(artString);           }           String[] data2={SAMLUtils.bundle.getString(\"assertionArtifactRemoved\"),artifact};           LogUtils.access(java.util.logging.Level.FINE,LogUtils.ASSERTION_ARTIFACT_REMOVED,data2);         }       }     }   }  else {     if ((artEntry != null) && SAMLServiceManager.getRemoveAssertion()) { synchronized (idEntryMap) {         idEntryMap.remove(artEntry.getAssertionID());       }     }   } } "
"public void print(Node node){   if (node == null) {     return;   }   int type=node.getNodeType(); switch (type) { case Node.DOCUMENT_NODE:     if (!canonical) {       out.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");     }   print(((Document)node).getDocumentElement()); out.flush(); break; case Node.ELEMENT_NODE: out.print('<'); out.print(node.getLocalName()); Attr attrs[]=sortAttributes(node.getAttributes()); for (int i=0; i < attrs.length; i++) { Attr attr=attrs[i]; out.print(' '); out.print(attr.getLocalName()); out.print(\"=\\\"\"); out.print(normalize(attr.getNodeValue())); out.print('\"'); } out.print('>'); printChildren(node); break; case Node.ENTITY_REFERENCE_NODE: if (canonical) { printChildren(node); }  else { out.print('&'); out.print(node.getLocalName()); out.print(';'); } break; case Node.CDATA_SECTION_NODE: if (canonical) { out.print(normalize(node.getNodeValue())); }  else { out.print(\"<![CDATA[\"); out.print(node.getNodeValue()); out.print(\"]]>\"); } break; case Node.TEXT_NODE: out.print(normalize(node.getNodeValue())); break; case Node.PROCESSING_INSTRUCTION_NODE: out.print(\"<?\"); out.print(node.getLocalName()); String data=node.getNodeValue(); if (data != null && data.length() > 0) { out.print(' '); out.print(data); } out.print(\"?>\"); break; } if (type == Node.ELEMENT_NODE) { out.print(\"</\"); out.print(node.getLocalName()); out.print('>'); } out.flush(); } "
"public String toString(){   return getClass().getName() + \"[\" + getName()+ \" \"+ getClassName()+ \"]\"; } "
"private org.forgerock.opendj.ldap.Entry putAttribute(org.forgerock.opendj.ldap.Entry configEntry,String attrName,Syntax syntax,Object... values){   org.forgerock.opendj.ldap.Entry newEntry=LinkedHashMapEntry.deepCopyOfEntry(configEntry);   AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrName,syntax);   newEntry.replaceAttribute(new LinkedAttribute(AttributeDescription.create(attrType),values));   return newEntry; } "
"public void addActionListener(ActionListener l){   listenerList.add(ActionListener.class,l); } "
"public void testUpdate3(){   int newValue1=-1;   int newValue2=-2;   String updateQuery=\"UPDATE \" + DatabaseCreator.TEST_TABLE1 + \" SET field2=\"+ newValue1+ \", field3=\"+ newValue2;   try {     int num=statement.executeUpdate(updateQuery);     assertEquals(\"Not all records in the database were updated\",numberOfRecords,num);     String selectQuery=\"SELECT field2, field3 FROM \" + DatabaseCreator.TEST_TABLE1;     ResultSet result=statement.executeQuery(selectQuery);     while (result.next()) {     }     result.close();   }  catch (  SQLException e) {     fail(\"Unexpected exception\" + e.getMessage());   } } "
"public void runTest() throws Throwable {   Document doc;   Attr newAttribute;   NodeList addressElementList;   Element testAddress;   Element newElement;   Node appendedChild;   Attr setAttr1;   Attr setAttr2;   doc=(Document)load(\"staff\",true);   addressElementList=doc.getElementsByTagName(\"address\");   testAddress=(Element)addressElementList.item(1);   newElement=doc.createElement(\"newElement\");   appendedChild=testAddress.appendChild(newElement);   newAttribute=doc.createAttribute(\"newAttribute\");   setAttr1=newElement.setAttributeNode(newAttribute); {     boolean success=false;     try {       setAttr2=testAddress.setAttributeNode(newAttribute);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);     }     assertTrue(\"throw_INUSE_ATTRIBUTE_ERR\",success);   } } "
"@Override public void flush(){   FlushTask task; synchronized (logRecords) {     task=new FlushTask(new ArrayList<String>(logRecords));     logRecords.clear();   }   task.run(); } "
"protected void fireValueChanged(boolean isAdjusting){   fireValueChanged(getMinSelectionIndex(),getMaxSelectionIndex(),isAdjusting); } "
"public static void main(final String[] args){   DOMTestCase.doMain(noderemovechildnomodificationallowederr.class,args); } "
"public static int findWordEnd(String line,int pos,String noWordSep,boolean joinNonWordChars,boolean eatWhitespace){   return findWordEnd(line,pos,noWordSep,joinNonWordChars,false,eatWhitespace); } "
"protected WritableRaster(SampleModel sampleModel,Point origin){   this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null); } "
"public SIPHeader parse() throws ParseException {   if (debug)   dbg_enter(\"AllowParser.parse\");   AllowList list=new AllowList();   try {     headerName(TokenTypes.ALLOW);     Allow allow=new Allow();     list.add(allow);     if (lexer.startsId()) {       Token token=this.lexer.match(TokenTypes.ID);       allow.setMethod(token.getTokenValue());       this.lexer.SPorHT();       while (lexer.lookAhead(0) == ',') {         this.lexer.match(',');         this.lexer.SPorHT();         allow=new Allow();         token=this.lexer.match(TokenTypes.ID);         allow.setMethod(token.getTokenValue());         list.add(allow);         this.lexer.SPorHT();       }     }     this.lexer.match('\\n');     return list;   }   finally {     if (debug)     dbg_leave(\"AllowParser.parse\");   } } "
"public XPathExpressionException(String message){   super(message); } "
"@Override public String toString(){   return buf.toString(); } "
"public AuditEvent auditAccessSuccess(){   long endTime=timeService.now();   long elapsedTime=endTime - startTime;   return accessEvent().forHttpServletRequest(request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_OUTCOME).component(component).response(SUCCESSFUL,\"\",elapsedTime,MILLISECONDS).toEvent(); } "
"protected void releaseContent(){   super.releaseContent();   try {     if (outputStream != null) {       outputStream.close();       outputStream=null;     }   }  catch (  IOException e) {     throw new PdfException(PdfException.IoException,e);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_characterdatasubstringexceedsvalue.class,args); } "
"private boolean processDeleteConflict(CSN csn,Modification m,Entry modifiedEntry){   Attribute modAttr=m.getAttribute();   if (modAttr.isEmpty()) {     m.setModificationType(ModificationType.REPLACE);     AttributeBuilder builder=new AttributeBuilder(modAttr.getAttributeDescription());     for (Iterator<AttrValueHistorical> it=valuesHist.iterator(); it.hasNext(); ) {       AttrValueHistorical valInfo=it.next();       if (csn.isOlderThan(valInfo.getValueUpdateTime())) {         builder.add(valInfo.getAttributeValue());       }  else       if (csn.isNewerThanOrEqualTo(valInfo.getValueDeleteTime())) {         it.remove();       }     }     m.setAttribute(builder.toAttribute());     if (csn.isNewerThan(getDeleteTime())) {       deleteTime=csn;     }     if (csn.isNewerThan(getLastUpdateTime())) {       lastUpdateTime=csn;     }   }  else {     AttributeBuilder builder=new AttributeBuilder(modAttr);     AttributeType attrType=modAttr.getAttributeDescription().getAttributeType();     for (    ByteString val : modAttr) {       boolean deleteIt=true;       boolean addedInCurrentOp=false;       AttrValueHistorical valInfo=new AttrValueHistorical(val,attrType,null,csn);       AttrValueHistorical oldValInfo=valuesHist.get(valInfo);       if (oldValInfo == null) {         valuesHist.add(valInfo);       }  else {         if (csn.equals(oldValInfo.getValueUpdateTime())) {           addedInCurrentOp=true;         }         if (csn.isNewerThanOrEqualTo(oldValInfo.getValueDeleteTime()) && csn.isNewerThanOrEqualTo(oldValInfo.getValueUpdateTime())) {           valuesHist.addOrReplace(valInfo);         }  else         if (oldValInfo.isUpdate()) {           deleteIt=false;         }       }       if (!deleteIt || (!modifiedEntry.hasValue(modAttr.getAttributeDescription(),val) && !addedInCurrentOp)) {         builder.remove(val);         if (builder.isEmpty()) {           return false;         }       }     }     m.setAttribute(builder.toAttribute());     if (csn.isNewerThan(getLastUpdateTime())) {       lastUpdateTime=csn;     }   }   return true; } "
"public T mapping(String mapping){   jsonValue.put(MAPPING,mapping);   return self(); } "
"public Job(String jobName,Runnable command){   this.jobName=jobName;   this.command=command; } "
"public void addCondition(String name,Condition condition) throws NameAlreadyExistsException, InvalidNameException {   conditions.addCondition(name,condition); } "
"public static List<String> toList(String[] array){   List<String> list=new ArrayList<String>();   if ((array != null) && (array.length > 0)) {     for (int i=0; i < array.length; i++) {       list.add(array[i]);     }   }   return list; } "
"public boolean isNavigationAtBottom(){   return (mSmallestWidthDp >= 600 || mInPortrait); } "
"public SetupParameters ldifFile(String ldif){   this.ldifFiles.add(ldif);   return this; } "
"public MyCertificate(String type,byte[] encoding){   super(type);   this.encoding=encoding; } "
"@Override public void init(Subject subject,Map sharedState,Map options){   try {     if (debug.messageEnabled()) {       debug.message(\"Radius resbundle locale=\" + getLoginLocale());     }     this.sharedState=sharedState;     if (options != null) {       try {         String serverPort=CollectionHelper.getMapAttr(options,\"iplanet-am-auth-radius-server-port\",DEFAULT_SERVER_PORT);         iServerPort=Integer.parseInt(serverPort);         primaryServers=new LinkedHashSet<RADIUSServer>();         Set<String> tmp;         tmp=CollectionHelper.getServerMapAttrs(options,\"iplanet-am-auth-radius-server1\");         if (tmp.isEmpty()) {           primaryServers.add(new RADIUSServer(\"localhost\",iServerPort));           debug.error(\"Error: primary server attribute \" + \"misconfigured using localhost\");         }         for (        String server : tmp) {           int idx=server.indexOf(':');           if (idx == -1) {             primaryServers.add(new RADIUSServer(server,iServerPort));           }  else {             primaryServers.add(new RADIUSServer(server.substring(0,idx),Integer.parseInt(server.substring(idx + 1))));           }         }         secondaryServers=new LinkedHashSet<RADIUSServer>();         tmp=CollectionHelper.getServerMapAttrs(options,\"iplanet-am-auth-radius-server2\");         if (tmp == null) {           secondaryServers.add(new RADIUSServer(\"localhost\",iServerPort));           debug.error(\"Error: primary server attribute \" + \"misconfigured using localhost\");         }         for (        String server : tmp) {           int idx=server.indexOf(':');           if (server.indexOf(':') == -1) {             secondaryServers.add(new RADIUSServer(server,iServerPort));           }  else {             secondaryServers.add(new RADIUSServer(server.substring(0,idx),Integer.parseInt(server.substring(idx + 1))));           }         }         sharedSecret=CollectionHelper.getMapAttr(options,\"iplanet-am-auth-radius-secret\");         String timeOut=CollectionHelper.getMapAttr(options,\"iplanet-am-auth-radius-timeout\",DEFAULT_TIMEOUT);         iTimeOut=Integer.parseInt(timeOut);         String authLevel=CollectionHelper.getMapAttr(options,\"iplanet-am-auth-radius-auth-level\");         String interval=CollectionHelper.getMapAttr(options,\"openam-auth-radius-healthcheck-interval\",DEFAULT_INTERVAL);         healthCheckInterval=Integer.parseInt(interval);         if (authLevel != null) {           try {             setAuthLevel(Integer.parseInt(authLevel));           }  catch (          Exception e) {             debug.error(\"Unable to set auth level \" + authLevel);           }         }         if (debug.messageEnabled()) {           debug.message(\"server1: \" + primaryServers + \" server2: \"+ secondaryServers+ \" serverPort: \"+ serverPort+ \" timeOut: \"+ timeOut+ \" authLevel: \"+ authLevel);         }         if ((sharedSecret == null) || (sharedSecret.length() == 0)) {           debug.error(\"RADIUS initialization failure; no Shared Secret\");         }       }  catch (      Exception ex) {         debug.error(\"RADIUS parameters initialization failure\",ex);       }     }  else {       debug.error(\"options not initialized\");     }   }  catch (  Exception e) {     debug.error(\"RADIUS init Error....\",e);   } } "
"public RenderContext(AffineTransform usr2dev,Shape aoi){   this(usr2dev,aoi,null); } "
"public void fix_items(){   for (  BrdItem curr_ob : items_list) {     if (curr_ob.get_fixed_state().ordinal() < ItemFixState.USER_FIXED.ordinal()) {       curr_ob.set_fixed_state(ItemFixState.USER_FIXED);     }   }   actlog_start_scope(LogfileScope.FIX_SELECTED_ITEMS); } "
"public void draw(Graphics p_graphics,GdiContext p_graphics_context){   if (itera_settings.is_hilight_routing_obstacle() && shove_failing_obstacle != null) {     shove_failing_obstacle.draw(p_graphics,p_graphics_context,p_graphics_context.get_violations_color(),1);   }   if (target_set == null || net_nos.is_empty())   return;   RuleNet curr_net=r_board.brd_rules.nets.get(net_nos.first());   if (curr_net == null)   return;   Color highlight_color=p_graphics_context.get_hilight_color();   double highligt_color_intensity=p_graphics_context.get_hilight_color_intensity();   for (  PinSwappable curr_info : swap_pin_infos) {     curr_info.my_pin.draw(p_graphics,p_graphics_context,highlight_color,0.3 * highligt_color_intensity);     if (curr_info.incomplete != null) {       PlaPointFloat[] draw_points=new PlaPointFloat[2];       draw_points[0]=curr_info.incomplete.point_a;       draw_points[1]=curr_info.incomplete.point_b;       Color draw_color=p_graphics_context.get_incomplete_color();       p_graphics_context.draw(draw_points,1,draw_color,p_graphics,highligt_color_intensity);     }   }   for (  BrdItem curr_item : target_set) {     if (curr_item instanceof BrdAreaConduction)     continue;     curr_item.draw(p_graphics,p_graphics_context,highlight_color,highligt_color_intensity);   }   if (nearest_target_point == null || prev_corner == null)   return;   PlaPointFloat from_corner=prev_corner.to_float();   boolean curr_length_matching_ok=true;   double max_trace_length=curr_net.get_class().get_maximum_trace_length();   double min_trace_length=curr_net.get_class().get_minimum_trace_length();   double length_matching_color_intensity=p_graphics_context.get_length_matching_area_color_intensity();   if (max_trace_length > 0 || min_trace_length > 0 && length_matching_color_intensity > 0) {     double trace_length_add=from_corner.distance(prev_corner.to_float());     if (max_trace_length <= 0) {       max_trace_length=0.3 * freert.planar.PlaLimits.CRIT_INT;     }     double curr_max_trace_length=max_trace_length - (curr_net.get_trace_length() + trace_length_add);     double curr_min_trace_length=min_trace_length - (curr_net.get_trace_length() + trace_length_add);     double incomplete_length=nearest_target_point.distance(from_corner);     if (incomplete_length < curr_max_trace_length && min_trace_length <= max_trace_length) {       PlaVectorInt delta=nearest_target_point.round().difference_by(prev_corner);       double rotation=delta.angle_approx();       PlaPointFloat center=from_corner.middle_point(nearest_target_point);       double bigger_radius=0.5 * curr_max_trace_length;       double smaller_radius=0.5 * Math.sqrt(curr_max_trace_length * curr_max_trace_length - incomplete_length * incomplete_length);       int ellipse_count;       if (min_trace_length <= 0 || incomplete_length >= curr_min_trace_length) {         ellipse_count=1;       }  else {         ellipse_count=2;       }       PlaEllipse[] ellipse_arr=new PlaEllipse[ellipse_count];       ellipse_arr[0]=new PlaEllipse(center,rotation,bigger_radius,smaller_radius);       ShapeTileBox bounding_box=new ShapeTileBox(prev_corner.to_float().round(),nearest_target_point.round());       bounding_box=bounding_box.offset(curr_max_trace_length - incomplete_length);       r_board.gdi_update_join(bounding_box);       if (ellipse_count == 2) {         bigger_radius=0.5 * curr_min_trace_length;         smaller_radius=0.5 * Math.sqrt(curr_min_trace_length * curr_min_trace_length - incomplete_length * incomplete_length);         ellipse_arr[1]=new PlaEllipse(center,rotation,bigger_radius,smaller_radius);       }       p_graphics_context.fill_ellipse_arr(ellipse_arr,p_graphics,p_graphics_context.get_length_matching_area_color(),length_matching_color_intensity);     }  else {       curr_length_matching_ok=false;     }   }   PlaPointFloat[] draw_points=new PlaPointFloat[2];   draw_points[0]=from_corner;   draw_points[1]=nearest_target_point;   Color draw_color=p_graphics_context.get_incomplete_color();   double draw_width=Math.min(r_board.host_com.get_resolution(UnitMeasure.MIL),100);   if (!curr_length_matching_ok) {     draw_color=p_graphics_context.get_violations_color();     draw_width*=3;   }   p_graphics_context.draw(draw_points,draw_width,draw_color,p_graphics,highligt_color_intensity);   if (nearest_target_item != null && !nearest_target_item.is_on_layer(layer_active_no)) {     NetIncompletes.draw_layer_change_marker(draw_points[0],4 * pen_half_width_arr[0],p_graphics,p_graphics_context);   } } "
"public TRANSIENT(){   this(\"\"); } "
"public final Key translateKey(Key key) throws InvalidKeyException {   return spiImpl.engineTranslateKey(key); } "
"public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {   return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator); } "
"@Override public void update(){   if (flagPoleHit) {     SpriteHandler.getCurrentCast().get(2).update();     if (SpriteHandler.getCurrentCast().get(2).getSpriteFrame() == null)     isReadyForRemoval=true;     return;   }   super.update();   if (super.getCollisionStatus()) {     if (!flagPoleHit) {       main.Main.energyImpact.play();       flagPoleHit=true;     }     super.dispose();     isReadyForRemoval=false;     SpriteHandler.getCurrentCast().get(2).update();   } } "
"public void reset(){   super.reset();   bodyContent=null; } "
"private void appendHTMLStack(ProfileStack stack,StringBuilder html,String highlightClassAndMethod){   int numFrames=stack.getNumFrames();   for (int i=numFrames - 1; i >= 0; i--) {     html.append(\"<BR>     \");     String className=stack.getClassName(i);     String methodName=stack.getMethodName(i);     int lineNumber=stack.getLineNumber(i);     String safeMethod=methodName.equals(\"<init>\") ? \"&lt;init&gt;\" : methodName;     String classAndMethod=className + \".\" + methodName;     if (classAndMethod.equals(highlightClassAndMethod)) {       html.append(\"<B>\");       html.append(className);       html.append(\".\");       html.append(safeMethod);       html.append(\":\");       if (lineNumber == ProfileStack.LINE_NUMBER_NATIVE) {         html.append(\"&lt;native&gt;\");       }  else       if (lineNumber == ProfileStack.LINE_NUMBER_UNKNOWN) {         html.append(\"&lt;unknown&gt;\");       }  else {         html.append(lineNumber);       }       html.append(\"</B>\");     }  else {       html.append(className);       html.append(\".\");       html.append(safeMethod);       html.append(\":\");       if (lineNumber == ProfileStack.LINE_NUMBER_NATIVE) {         html.append(\"&lt;native&gt;\");       }  else       if (lineNumber == ProfileStack.LINE_NUMBER_UNKNOWN) {         html.append(\"&lt;unknown&gt;\");       }  else {         html.append(lineNumber);       }     }   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String badString;   doc=(Document)load(\"hc_staff\",false);   elementList=doc.getElementsByTagName(\"acronym\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild(); {     boolean success=false;     try {       badString=child.substringData(-5,3);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.INDEX_SIZE_ERR);     }     assertTrue(\"throws_INDEX_SIZE_ERR\",success);   } } "
"public final void testGetPrivateExponent(){   RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);   assertTrue(BigInteger.ONE.equals(ks.getPrivateExponent())); } "
"private void checkSaveButton(){   if (!ignoreCheckSave && index != null) {     saveChanges.setEnabled(!authenticationRequired(getInfo().getServerDescriptor()) && isModified());   } } "
"public void addStringProperty(String key,String value){   getProperties().addProperty(key,value); } "
"public MenuResult<Void> edit(ManagedObject<?> mo,Collection<PropertyDefinition<?>> c,boolean isCreate) throws ClientException {   for (  PropertyDefinition<?> pd : c) {     if (pd.hasOption(PropertyOption.MANDATORY) && mo.getPropertyValues(pd).isEmpty()) {       MandatoryPropertyInitializer mpi=new MandatoryPropertyInitializer(mo,pd);       MenuResult<Void> result=mpi.invoke(app);       if (!result.isSuccess()) {         return result;       }     }   }   while (true) {     MenuBuilder<Boolean> builder=new MenuBuilder<>(app);     String ufn=mo.getManagedObjectPath().getName();     if (ufn == null) {       ufn=mo.getManagedObjectDefinition().getUserFriendlyName().toString();     }     builder.setPrompt(INFO_EDITOR_HEADING_CONFIGURE_COMPONENT.get(ufn));     LocalizableMessage heading1=INFO_DSCFG_HEADING_PROPERTY_NAME.get();     LocalizableMessage heading2=INFO_DSCFG_HEADING_PROPERTY_VALUE.get();     builder.setColumnHeadings(heading1,heading2);     builder.setColumnWidths(null,0);     for (    PropertyDefinition<?> pd : c) {       boolean isReadOnly=pd.hasOption(PropertyOption.MONITORING);       if (!isCreate && pd.hasOption(PropertyOption.READ_ONLY)) {         isReadOnly=true;       }       MenuCallback<Boolean> callback;       if (isReadOnly) {         callback=new ReadOnlyPropertyViewer(mo,pd);       }  else       if (pd.hasOption(PropertyOption.MULTI_VALUED)) {         callback=new MultiValuedPropertyEditor(mo,pd);       }  else {         callback=new SingleValuedPropertyEditor(mo,pd);       }       LocalizableMessage values=getPropertyValues(pd,mo);       builder.addNumberedOption(LocalizableMessage.raw(\"%s\",pd.getName()),callback,values);     }     HelpCallback helpCallback=new ComponentHelpCallback(mo,c);     builder.addHelpOption(helpCallback);     if (isCreate) {       builder.addCharOption(INFO_EDITOR_OPTION_FINISH_KEY.get(),INFO_EDITOR_OPTION_FINISH_CREATE_COMPONENT.get(ufn),MenuResult.success(true));     }  else {       builder.addCharOption(INFO_EDITOR_OPTION_FINISH_KEY.get(),INFO_EDITOR_OPTION_FINISH_MODIFY_COMPONENT.get(ufn),MenuResult.success(true));     }     builder.setDefault(INFO_EDITOR_OPTION_FINISH_KEY.get(),MenuResult.success(true));     if (app.isMenuDrivenMode()) {       builder.addCancelOption(false);     }     builder.addQuitOption();     app.println();     app.println();     Menu<Boolean> menu=builder.toMenu();     MenuResult<Boolean> result=menu.run();     if (result.isSuccess()) {       if (result.getValue()) {         return MenuResult.success();       }     }  else     if (result.isCancel()) {       return MenuResult.cancel();     }  else {       return MenuResult.quit();     }   } } "
"protected boolean processKeyBinding(KeyStroke ks,KeyEvent e,int condition,boolean pressed){   InputMap map=getInputMap(condition,false);   ActionMap am=getActionMap(false);   if (map != null && am != null && isEnabled()) {     Object binding=map.get(ks);     Action action=(binding == null) ? null : am.get(binding);     if (action != null) {       return SwingUtilities.notifyAction(action,ks,e,this,e.getModifiers());     }   }   return false; } "
"private boolean validateType(Set values,Map env) throws SMSException {   String installTime=SystemProperties.get(Constants.SYS_PROPERTY_INSTALL_TIME,\"false\");   String[] array;   AttributeSchema.Type type=as.getType();   if (type == null)   return (true);   if (type.equals(AttributeSchema.Type.SINGLE)) {     if (values.size() > 1) {       return (false);     }  else {       return (true);     }   }   if (type.equals(AttributeSchema.Type.LIST)) {     int size=values.size();     int minValue=as.getMinValue();     int maxValue=as.getMaxValue();     if (!(minValue == -1 || maxValue == -1)) {       if (size < minValue || size > maxValue) {         return (false);       }     }     return (true);   }   if (type.equals(AttributeSchema.Type.SINGLE_CHOICE)) {     if (values.size() > 1) {       return (false);     }  else {       if (installTime.equalsIgnoreCase(\"true\")) {         return true;       }       array=as.getChoiceValues(env);       Iterator it=values.iterator();       String val=(it.hasNext()) ? (String)it.next() : null;       if (val == null) {         return (true);       }       for (int i=0; i < array.length; i++) {         if (array[i].equalsIgnoreCase(val)) {           return (true);         }       }       return (false);     }   }   if (type.equals(AttributeSchema.Type.MULTIPLE_CHOICE)) {     if (installTime.equalsIgnoreCase(\"true\")) {       return true;     }     array=as.getChoiceValues(env);     int size=values.size();     int minValue=as.getMinValue();     int maxValue=as.getMaxValue();     if (!(minValue == -1 || maxValue == -1)) {       if (size < minValue || size > maxValue) {         return (false);       }     }     if (size == 0) {       return (true);     }     if ((array == null) || (array.length == 0)) {       return false;     }     Iterator it=values.iterator();     int arraySize=array.length;     while (it.hasNext()) {       boolean match=false;       String value=(String)it.next();       for (int i=0; i < arraySize; i++) {         if (array[i].equalsIgnoreCase(value)) {           match=true;           break;         }       }       if (!match) {         return (false);       }     }     return (true);   }   if (type.equals(AttributeSchema.Type.VALIDATOR)) {     return (true);   }   if (type.equals(AttributeSchema.Type.SIGNATURE)) {     return (true);   }   String[] args={as.getName()};   throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME,\"sms-invalid_attribute_type\",args); } "
"public SolidBorder(Color color,float width){   super(color,width); } "
"public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {   if (m_inEntityRef)   return;   m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);   try {     final java.io.Writer writer=m_writer;     if (m_elemContext.m_startTagOpen) {       if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);       int nAttrs=m_attributes.getLength();       if (nAttrs > 0) {         processAttributes(m_writer,nAttrs);         m_attributes.clear();       }       if (m_spaceBeforeClose)       writer.write(\" />\");  else       writer.write(\"/>\");     }  else {       if (m_cdataTagOpen)       closeCDATA();       if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);       writer.write('<');       writer.write('/');       writer.write(name);       writer.write('>');     }   }  catch (  IOException e) {     throw new SAXException(e);   }   if (!m_elemContext.m_startTagOpen && m_doIndent) {     m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();   }   m_isprevtext=false;   if (m_tracer != null)   super.fireEndElem(name);   m_elemContext=m_elemContext.m_prev; } "
"@Override public void put(String name,char value){   emulatedFields.put(name,value); } "
"public CertificateParsingException(){   super(); } "
"public Clob readClob() throws SQLException {   return (Clob)getNextAttribute(); } "
"protected void registerChildren(){   registerChild(TITLE_HTML_PAGE,StaticTextField.class);   registerChild(COPYRIGHT_TEXT,StaticTextField.class);   registerChild(ERROR_TITLE,StaticTextField.class);   registerChild(ERROR_MSG,StaticTextField.class);   registerChild(INFO_MSG,StaticTextField.class);   registerChild(LBL_SUN_LOGO,StaticTextField.class);   registerChild(LBL_PRODUCT,StaticTextField.class);   registerChild(LBL_JAVA_LOGO,StaticTextField.class); } "
"public AuthenticationNotSupportedException(String explanation){   super(explanation); } "
"public void firePropertyChange(String propertyName,int oldValue,int newValue){   firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue)); } "
"protected PdfPKCS7 coversWholeDocument() throws GeneralSecurityException {   PdfPKCS7 pkcs7=sgnUtil.verifySignature(signatureName,null);   if (sgnUtil.signatureCoversWholeDocument(signatureName)) {     LOGGER.info(\"The timestamp covers whole document.\");   }  else {     throw new VerificationException((Certificate)null,\"Signature doesn't cover whole document.\");   }   if (pkcs7.verify()) {     LOGGER.info(\"The signed document has not been modified.\");     return pkcs7;   }  else {     throw new VerificationException((Certificate)null,\"The document was altered after the final signature was applied.\");   } } "
"public FrameBodyTIME(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"private String local_number() throws ParseException {   StringBuilder s=new StringBuilder();   if (debug)   dbg_enter(\"local_number\");   try {     int lc=0;     while (lexer.hasMoreChars()) {       char la=lexer.lookAhead(0);       if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {         lexer.consume(1);         s.append(la);         lc++;       }  else       if (lc > 0)       break;  else       throw createParseException(\"unexepcted \" + la);     }     return s.toString();   }   finally {     if (debug)     dbg_leave(\"local_number\");   } } "
"private NightlyIndexHtml(){ } "
"public void processRemoteNotification(Notification notification){   SessionNotification snot=SessionNotification.parseXML(notification.getContent());   if (snot != null) {     processNotification(snot,false);   } } "
"int readCorner3(int numRows,int numColumns){   int currentByte=0;   if (readModule(numRows - 1,0,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 3,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 3,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   return currentByte; } "
"@org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) public void addSearchReference(SearchResultReference searchReference) throws DirectoryException {   if (searchListener == null) {     referenceList.add(searchReference);   }  else {     searchListener.handleInternalSearchReference(this,searchReference);   } } "
"public Class<?>[] parameterArray(){   return ptypes.clone(); } "
"static boolean handleHotseatButtonKeyEvent(View v,int keyCode,KeyEvent e){   boolean consume=FocusLogic.shouldConsume(keyCode);   if (e.getAction() == KeyEvent.ACTION_UP || !consume) {     return consume;   }   DeviceProfile profile=((Launcher)v.getContext()).getDeviceProfile();   if (DEBUG) {     Log.v(TAG,String.format(\"Handle HOTSEAT BUTTONS keyevent=[%s] on hotseat buttons, isVertical=%s\",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));   }   final ShortcutAndWidgetContainer hotseatParent=(ShortcutAndWidgetContainer)v.getParent();   final CellLayout hotseatLayout=(CellLayout)hotseatParent.getParent();   Hotseat hotseat=(Hotseat)hotseatLayout.getParent();   Workspace workspace=(Workspace)v.getRootView().findViewById(R.id.workspace);   int pageIndex=workspace.getNextPage();   int pageCount=workspace.getChildCount();   int countX=-1;   int countY=-1;   int iconIndex=hotseatParent.indexOfChild(v);   int iconRank=((CellLayout.LayoutParams)hotseatLayout.getShortcutsAndWidgets().getChildAt(iconIndex).getLayoutParams()).cellX;   final CellLayout iconLayout=(CellLayout)workspace.getChildAt(pageIndex);   if (iconLayout == null) {     return consume;   }   final ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();   ViewGroup parent=null;   int[][] matrix=null;   if (keyCode == KeyEvent.KEYCODE_DPAD_UP && !profile.isVerticalBarLayout()) {     matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank,iconRank == profile.inv.hotseatAllAppsRank);     iconIndex+=iconParent.getChildCount();     countX=iconLayout.getCountX();     countY=iconLayout.getCountY() + hotseatLayout.getCountY();     parent=iconParent;   }  else   if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT && profile.isVerticalBarLayout()) {     matrix=FocusLogic.createSparseMatrix(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank,iconRank == profile.inv.hotseatAllAppsRank);     iconIndex+=iconParent.getChildCount();     countX=iconLayout.getCountX() + hotseatLayout.getCountX();     countY=iconLayout.getCountY();     parent=iconParent;   }  else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {     keyCode=KeyEvent.KEYCODE_PAGE_DOWN;   }  else {     matrix=FocusLogic.createSparseMatrix(hotseatLayout);     countX=hotseatLayout.getCountX();     countY=hotseatLayout.getCountY();     parent=hotseatParent;   }   int newIconIndex=FocusLogic.handleKeyEvent(keyCode,countX,countY,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));   View newIcon=null;   if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {     parent=getCellLayoutChildrenForIndex(workspace,pageIndex + 1);     newIcon=parent.getChildAt(0);     workspace.snapToPage(pageIndex + 1);   }   if (parent == iconParent && newIconIndex >= iconParent.getChildCount()) {     newIconIndex-=iconParent.getChildCount();   }   if (parent != null) {     if (newIcon == null && newIconIndex >= 0) {       newIcon=parent.getChildAt(newIconIndex);     }     if (newIcon != null) {       newIcon.requestFocus();       playSoundEffect(keyCode,v);     }   }   return consume; } "
"private static String createSOAPMessage(Request req) throws SAMLException {   if (req == null) {     throw new SAMLException(SAMLUtils.bundle.getString(\"nullInput\"));   }   try {     StringBuffer envBegin=new StringBuffer(100);     envBegin.append(\"<\").append(SAMLConstants.SOAP_ENV_PREFIX).append(\":Envelope\").append(SAMLConstants.SPACE).append(\"xmlns:\").append(SAMLConstants.SOAP_ENV_PREFIX).append(\"=\\\"\").append(SAMLConstants.SOAP_URI).append(\"\\\">\").append(SAMLConstants.NL).append(\"<\").append(SAMLConstants.SOAP_ENV_PREFIX).append(\":Body>\").append(SAMLConstants.NL);     StringBuffer envEnd=new StringBuffer(100);     envEnd.append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(\":Body>\").append(SAMLConstants.NL).append(SAMLConstants.START_END_ELEMENT).append(SAMLConstants.SOAP_ENV_PREFIX).append(\":Envelope>\").append(SAMLConstants.NL);     StringBuffer sb=new StringBuffer(300);     sb.append(envBegin).append(req.toString(true,true)).append(envEnd);     return (sb.toString());   }  catch (  Exception e) {     throw new SAMLException(e.getMessage());   } } "
"public boolean isEmpty(){   return fields.size() <= 1; } "
"public void changed_area_clear(){   changed_area.clear(get_layer_count()); } "
"public String encode(){   return INFORMATION_FIELD + information + Separators.NEWLINE; } "
"public static AsfHeader readHeader(final RandomAccessFile file) throws IOException {   final InputStream stream=createStream(file);   return FULL_READER.read(Utils.readGUID(stream),stream,0); } "
"@Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsOctetString() throws Exception {   super.testDecodeTruncatedLengthArrayAsOctetString(); } "
"public void testDoubleValueNegRounded2(){   byte[] a={-128,1,2,3,4,5,36,23,1,-3,-5};   int aSign=-1;   double result=-1.547472643879479E26;   double aNumber=new BigInteger(aSign,a).doubleValue();   assertTrue(aNumber == result); } "
"public InhibitAnyPolicy(byte[] encoding) throws IOException {   super(encoding);   this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue(); } "
"private IntegerValidator(){ } "
"ConfigurationError(String msg,Exception x){   super(msg);   this.exception=x; } "
"public static <E>List<E> singletonList(E object){   return new SingletonList<E>(object); } "
"private boolean cleanSomeSlots(int i,int n){   boolean removed=false;   Entry[] tab=table;   int len=tab.length;   do {     i=nextIndex(i,len);     Entry e=tab[i];     if (e != null && e.get() == null) {       n=len;       removed=true;       i=expungeStaleEntry(i);     }   }  while ((n>>>=1) != 0);   return removed; } "
"public GenericGF(int primitive,int size,int b){   this.primitive=primitive;   this.size=size;   this.generatorBase=b;   expTable=new int[size];   logTable=new int[size];   int x=1;   for (int i=0; i < size; i++) {     expTable[i]=x;     x*=2;     if (x >= size) {       x^=primitive;       x&=size - 1;     }   }   for (int i=0; i < size - 1; i++) {     logTable[expTable[i]]=i;   }   zero=new GenericGFPoly(this,new int[]{0});   one=new GenericGFPoly(this,new int[]{1}); } "
"public void modifyEntity(String entityName,String entityType,Map attributes) throws EntityException, SSOException {   try {     Object[] objs={tokenString,entityName,entityType,entityLocation,attributes};     client.send(client.encodeMessage(\"modifyEntity\",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null);   }  catch (  RemoteException rex) {     EntityUtils.debug.warning(\"EntityObject:modifyEntity->RemoteException\",rex);     throw new EntityException(rex.getMessage(),\"1000\");   } catch (  Exception ex) {     EntityUtils.debug.warning(\"EntityObject:modifyEntity->Exception\",ex);     throw new EntityException(ex.getMessage(),\"1000\");   } } "
"private String formatQuoteToJSON(OHLCquote quote){   String jsonData=null;   ObjectMapper mapper=new ObjectMapper();   try {     jsonData=mapper.writeValueAsString(quote);   }  catch (  JsonProcessingException e) {     System.out.println(\"TimeRangeOHLCActionHandler.formatQuoteToJSON(): ERROR: JsonProcessingException on quote !!!\");     e.printStackTrace();   }   return jsonData; } "
"public void testClearBitNegativeInside1(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=-1;   int number=15;   byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.CanonicalizationMethodElement createCanonicalizationMethodElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.CanonicalizationMethodElementImpl(); } "
"private PlaSegmentFloat calc_door_line_segment(ShapeTile p_door_shape){   ShapeTile first_room_shape=first_room.get_shape();   ShapeTile second_room_shape=second_room.get_shape();   PlaPointInt first_corner=null;   PlaPointInt second_corner=null;   int corner_count=p_door_shape.border_line_count();   for (int index=0; index < corner_count; ++index) {     PlaPointInt curr_corner=p_door_shape.corner(index);     if (!(!first_room_shape.contains_inside(curr_corner) && !second_room_shape.contains_inside(curr_corner)))     continue;     if (first_corner == null) {       first_corner=curr_corner;     }  else     if (second_corner == null && !first_corner.equals(curr_corner)) {       second_corner=curr_corner;       break;     }   }   if (first_corner == null || second_corner == null)   return null;   return new PlaSegmentFloat(first_corner.to_float(),second_corner.to_float()); } "
"public com.sun.identity.liberty.ws.idpp.jaxb.PostalAddressElement createPostalAddressElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PostalAddressElementImpl(); } "
"private Entry removeAttribute(Entry entry,String attrName){   Entry duplicateEntry=entry.duplicate(false);   for (  AttributeType t : entry.getUserAttributes().keySet()) {     if (t.hasNameOrOID(attrName)) {       entry.getUserAttributes().remove(t);       return duplicateEntry;     }   }   for (  AttributeType t : entry.getOperationalAttributes().keySet()) {     if (t.hasNameOrOID(attrName)) {       entry.getOperationalAttributes().remove(t);       return duplicateEntry;     }   }   return duplicateEntry; } "
"public int showSaveDialog(Component parent) throws HeadlessException {   setDialogType(SAVE_DIALOG);   return showDialog(parent,null); } "
"public int read(byte b[]) throws IOException {   return read(b,0,b.length); } "
"public void treeStructureChanged(TreeModelEvent e){   if (e != null) {     TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());     TreeStateNode changedNode;     changedNode=getNodeForPath(changedPath,false,false);     if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() == 1)))) {       rebuild(true);     }  else     if (changedNode != null) {       int nodeIndex, oldRow;       TreeStateNode newNode, parent;       boolean wasExpanded, wasVisible;       int newIndex;       wasExpanded=changedNode.isExpanded();       wasVisible=(changedNode.getRow() != -1);       parent=(TreeStateNode)changedNode.getParent();       nodeIndex=parent.getIndex(changedNode);       if (wasVisible && wasExpanded) {         changedNode.collapse(false);       }       if (wasVisible)       visibleNodes.removeElement(changedNode);       changedNode.removeFromParent();       createNodeAt(parent,nodeIndex);       newNode=(TreeStateNode)parent.getChildAt(nodeIndex);       if (wasVisible && wasExpanded)       newNode.expand(false);       newIndex=newNode.getRow();       if (!isFixedRowHeight() && wasVisible) {         if (newIndex == 0)         updateYLocationsFrom(newIndex);  else         updateYLocationsFrom(newIndex - 1);         this.visibleNodesChanged();       }  else       if (wasVisible)       this.visibleNodesChanged();     }   } } "
"public final String pop(){   if (m_firstFree <= 0)   return null;   m_firstFree--;   String s=m_map[m_firstFree];   m_map[m_firstFree]=null;   return s; } "
"protected Collection<PlaPointFloat> calculate_next_trace_corners(){   Collection<PlaPointFloat> result=new LinkedList<PlaPointFloat>();   if (current_to_door_index >= current_target_door_index) {     if (current_to_door_index == current_target_door_index) {       PlaPointFloat nearest_point=current_target_shape.nearest_point_approx(current_from_point.round());       ++current_to_door_index;       result.add(nearest_point);     }     return result;   }   double trace_halfwidth_exact=art_ctrl.compensated_trace_half_width[current_trace_layer];   double trace_halfwidth_max=trace_halfwidth_exact + ArtEngine.TRACE_WIDTH_TOLERANCE;   double trace_halfwidth_middle=trace_halfwidth_exact + c_tolerance;   ArtBacktrackElement curr_to_info=backtrack_array[current_to_door_index];   PlaPointFloat door_left_corner=calc_door_left_corner(curr_to_info);   if (door_left_corner == null)   return result;   PlaPointFloat door_right_corner=calc_door_right_corner(curr_to_info);   if (door_right_corner == null)   return result;   if (current_from_point.side_of(door_left_corner,door_right_corner) != PlaSide.ON_THE_LEFT) {     if (current_from_point.scalar_product(previous_from_point,door_left_corner) >= 0) {       door_left_corner=null;     }     if (current_from_point.scalar_product(previous_from_point,door_right_corner) >= 0) {       door_right_corner=null;     }     if (door_left_corner == null && door_right_corner == null) {       current_to_door_index++;       result.add(current_from_point);       return result;     }   }   boolean end_of_trace=false;   PlaPointFloat left_tangent_point=null;   PlaPointFloat right_tangent_point=null;   int new_door_ind=current_to_door_index;   int left_ind=new_door_ind;   int right_ind=new_door_ind;   int curr_door_ind=current_to_door_index + 1;   PlaPointFloat result_corner=null;   for (; ; ) {     left_tangent_point=current_from_point.right_tangential_point(door_left_corner,trace_halfwidth_max);     if (door_left_corner != null && left_tangent_point == null) {       System.out.println(\"LocateFoundConnectionAlgo.calculate_next_trace_corner: left tangent point is null\");       left_tangent_point=door_left_corner;     }     right_tangent_point=current_from_point.left_tangential_point(door_right_corner,trace_halfwidth_max);     if (door_right_corner != null && right_tangent_point == null) {       System.out.println(\"LocateFoundConnectionAlgo.calculate_next_trace_corner: right tangent point is null\");       right_tangent_point=door_right_corner;     }     if (left_tangent_point != null && right_tangent_point != null && right_tangent_point.side_of(current_from_point,left_tangent_point) != PlaSide.ON_THE_RIGHT) {       double left_corner_distance=door_left_corner.distance(current_from_point);       double right_corner_distance=door_right_corner.distance(current_from_point);       if (left_corner_distance <= right_corner_distance) {         new_door_ind=left_ind;         result_corner=left_turn_next_corner(current_from_point,trace_halfwidth_max,door_left_corner,door_right_corner);       }  else {         new_door_ind=right_ind;         result_corner=right_turn_next_corner(current_from_point,trace_halfwidth_max,door_right_corner,door_left_corner);       }       break;     }     if (curr_door_ind >= current_target_door_index) {       end_of_trace=true;       break;     }     ArtBacktrackElement next_to_info=backtrack_array[curr_door_ind];     PlaPointFloat next_left_corner=calc_door_left_corner(next_to_info);     PlaPointFloat next_right_corner=calc_door_right_corner(next_to_info);     if (current_from_point.side_of(next_left_corner,next_right_corner) != PlaSide.ON_THE_RIGHT) {       if (door_left_corner == null && current_from_point.scalar_product(previous_from_point,next_left_corner) >= 0) {         next_left_corner=null;       }       if (door_right_corner == null && current_from_point.scalar_product(previous_from_point,next_right_corner) >= 0) {         next_right_corner=null;       }       if (next_left_corner == null && next_right_corner == null) {         System.out.println(\"LocateFoundConnectionAlgo.calculate_next_trace_corner: next door passed unexpected\");         ++current_to_door_index;         result.add(current_from_point);         return result;       }     }     if (door_left_corner != null && door_right_corner != null) {       if (next_left_corner.side_of(current_from_point,door_right_corner) == PlaSide.ON_THE_RIGHT) {         new_door_ind=right_ind + 1;         result_corner=right_turn_next_corner(current_from_point,trace_halfwidth_max,door_right_corner,next_left_corner);         break;       }       if (next_right_corner.side_of(current_from_point,door_left_corner) == PlaSide.ON_THE_LEFT) {         new_door_ind=left_ind + 1;         result_corner=left_turn_next_corner(current_from_point,trace_halfwidth_max,door_left_corner,next_right_corner);         break;       }     }     boolean visability_range_gets_smaller_on_the_right_side=(door_right_corner == null);     if (door_right_corner != null && next_right_corner.side_of(current_from_point,door_right_corner) != PlaSide.ON_THE_RIGHT) {       PlaPointFloat curr_tangential_point=current_from_point.left_tangential_point(next_right_corner,trace_halfwidth_max);       if (curr_tangential_point != null) {         PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,curr_tangential_point);         if (check_line.segment_distance(door_right_corner) >= trace_halfwidth_max) {           visability_range_gets_smaller_on_the_right_side=true;         }       }     }     if (visability_range_gets_smaller_on_the_right_side) {       door_right_corner=next_right_corner;       right_ind=curr_door_ind;     }     boolean visability_range_gets_smaller_on_the_left_side=(door_left_corner == null);     if (door_left_corner != null && next_left_corner.side_of(current_from_point,door_left_corner) != PlaSide.ON_THE_LEFT) {       PlaPointFloat curr_tangential_point=current_from_point.right_tangential_point(next_left_corner,trace_halfwidth_max);       if (curr_tangential_point != null) {         PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,curr_tangential_point);         if (check_line.segment_distance(door_left_corner) >= trace_halfwidth_max) {           visability_range_gets_smaller_on_the_left_side=true;         }       }     }     if (visability_range_gets_smaller_on_the_left_side) {       door_left_corner=next_left_corner;       left_ind=curr_door_ind;     }     ++curr_door_ind;   }   if (end_of_trace) {     PlaPointFloat nearest_point=current_target_shape.nearest_point_approx(current_from_point);     result_corner=nearest_point;     if (left_tangent_point != null && nearest_point.side_of(current_from_point,left_tangent_point) == PlaSide.ON_THE_LEFT) {       new_door_ind=left_ind + 1;       PlaPointFloat target_right_corner=current_target_shape.corner_approx(current_target_shape.index_of_right_most_corner(current_from_point));       PlaPointFloat curr_corner=right_left_tangential_point(current_from_point,target_right_corner,door_left_corner,trace_halfwidth_max);       if (curr_corner != null) {         result_corner=curr_corner;         end_of_trace=false;       }     }  else     if (right_tangent_point != null && nearest_point.side_of(current_from_point,right_tangent_point) == PlaSide.ON_THE_RIGHT) {       PlaPointFloat target_left_corner=current_target_shape.corner_approx(current_target_shape.index_of_left_most_corner(current_from_point));       new_door_ind=right_ind + 1;       PlaPointFloat curr_corner=left_right_tangential_point(current_from_point,target_left_corner,door_right_corner,trace_halfwidth_max);       if (curr_corner != null) {         result_corner=curr_corner;         end_of_trace=false;       }     }   }   if (end_of_trace) {     new_door_ind=current_target_door_index;   }   PlaSegmentFloat check_line=new PlaSegmentFloat(current_from_point,result_corner);   int check_from_door_index=Math.max(current_to_door_index - 5,current_from_door_index + 1);   PlaPointFloat corrected_result=null;   int corrected_door_ind=0;   for (int index=check_from_door_index; index < new_door_ind; ++index) {     PlaPointFloat curr_left_corner=calc_door_left_corner(backtrack_array[index]);     double curr_dist=check_line.segment_distance(curr_left_corner);     if (Math.abs(curr_dist) < trace_halfwidth_middle) {       PlaPointFloat curr_corrected_result=right_left_tangential_point(check_line.point_a,check_line.point_b,curr_left_corner,trace_halfwidth_max);       if (curr_corrected_result != null) {         if (corrected_result == null || curr_corrected_result.side_of(current_from_point,corrected_result) == PlaSide.ON_THE_RIGHT) {           corrected_door_ind=index;           corrected_result=curr_corrected_result;         }       }     }     PlaPointFloat curr_right_corner=calc_door_right_corner(backtrack_array[index]);     curr_dist=check_line.segment_distance(curr_right_corner);     if (Math.abs(curr_dist) < trace_halfwidth_middle) {       PlaPointFloat curr_corrected_result=left_right_tangential_point(check_line.point_a,check_line.point_b,curr_right_corner,trace_halfwidth_max);       if (curr_corrected_result != null) {         if (corrected_result == null || curr_corrected_result.side_of(current_from_point,corrected_result) == PlaSide.ON_THE_LEFT) {           corrected_door_ind=index;           corrected_result=curr_corrected_result;         }       }     }   }   if (corrected_result != null) {     result_corner=corrected_result;     new_door_ind=Math.max(corrected_door_ind,current_to_door_index);   }   current_to_door_index=new_door_ind;   if (result_corner != null && result_corner != current_from_point) {     result.add(result_corner);   }   return result; } "
"public static int[] copyOf(int[] original,int newLength){   int[] copy=new int[newLength];   System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));   return copy; } "
"public int put(int key,int value){   Entry[] tab=table;   int index=(key & 0x7FFFFFFF) % tab.length;   for (Entry e=tab[index]; e != null; e=e.next) {     if (e.key == key) {       int old=e.value;       e.value=value;       return old;     }   }   if (count >= threshold) {     rehash();     tab=table;     index=(key & 0x7FFFFFFF) % tab.length;   }   Entry e=new Entry(key,value,tab[index]);   tab[index]=e;   count++;   return 0; } "
"public ServicesAddViewBean(){   super(\"ServicesAdd\",DEFAULT_DISPLAY_URL,null);   String serviceName=(String)getPageSessionAttribute(SERVICE_NAME);   if (serviceName != null) {     initialize(serviceName);   } } "
"public static String toHexString(byte[] array){   if (array == null) {     return null;   }   if (array.length == 0) {     return \"[]\";   }   StringBuilder sb=new StringBuilder();   sb.append('[');   sb.append(String.format(\"%02x\",array[0] & 0xff));   for (int i=1; i < array.length; i++) {     sb.append(\", \");     sb.append(String.format(\"%02x\",array[i] & 0xff));   }   sb.append(']');   return sb.toString(); } "
"public static String putReplyURL(String wreply){   String wctx=SAML2Utils.generateID(); synchronized (wctxMap) {     wctxMap.put(wctx,wreply);   }   return wctx; } "
"public void addButtonActionListener(ButtonActionListener l){   for (  WizardStep s : hmPanels.keySet()) {     getPanel(s).addButtonActionListener(l);   } } "
"private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){   int symbolWidth=symbolInfo.getSymbolDataWidth();   int symbolHeight=symbolInfo.getSymbolDataHeight();   ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());   int matrixY=0;   for (int y=0; y < symbolHeight; y++) {     int matrixX;     if ((y % symbolInfo.matrixHeight) == 0) {       matrixX=0;       for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {         matrix.set(matrixX,matrixY,(x % 2) == 0);         matrixX++;       }       matrixY++;     }     matrixX=0;     for (int x=0; x < symbolWidth; x++) {       if ((x % symbolInfo.matrixWidth) == 0) {         matrix.set(matrixX,matrixY,true);         matrixX++;       }       matrix.set(matrixX,matrixY,placement.getBit(x,y));       matrixX++;       if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {         matrix.set(matrixX,matrixY,(y % 2) == 0);         matrixX++;       }     }     matrixY++;     if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {       matrixX=0;       for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {         matrix.set(matrixX,matrixY,true);         matrixX++;       }       matrixY++;     }   }   return convertByteMatrixToBitMatrix(matrix); } "
"public synchronized Principal authenticate(Connection dbConnection,String username,String credentials){   if (username == null || credentials == null) {     if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString(\"jdbcRealm.authenticateFailure\",username));     return null;   }   String dbCredentials=getPassword(username);   if (dbCredentials == null) {     getCredentialHandler().mutate(credentials);     if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString(\"jdbcRealm.authenticateFailure\",username));     return null;   }   boolean validated=getCredentialHandler().matches(credentials,dbCredentials);   if (validated) {     if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString(\"jdbcRealm.authenticateSuccess\",username));   }  else {     if (containerLog.isTraceEnabled())     containerLog.trace(sm.getString(\"jdbcRealm.authenticateFailure\",username));     return null;   }   ArrayList<String> roles=getRoles(username);   return (new GenericPrincipal(username,credentials,roles)); } "
"public final void testPSSParameterSpec0202(){   try {     new PSSParameterSpec(null,\"MGF1\",MGF1ParameterSpec.SHA1,20,1);     fail(\"Expected NPE not thrown\");   }  catch (  NullPointerException e) {   } } "
"public boolean signHash(){   return signHash; } "
"public Builder optionalAttributes(final Collection<String> attributeNamesOrOIDs){   this.optionalAttributeOIDs.addAll(attributeNamesOrOIDs);   return this; } "
"@Override public MapboxDirections build() throws ServicesException {   validateAccessToken(accessToken);   geometry=DirectionsCriteria.GEOMETRY_POLYLINE;   return new MapboxDirections(this); } "
"@Override protected boolean doAuthenticate(Request request,HttpServletResponse response) throws IOException {   if (checkForCachedAuthentication(request,response,true)) {     if (cache) {       request.getSessionInternal(true).setPrincipal(request.getUserPrincipal());     }     return true;   }   if (containerLog.isDebugEnabled())   containerLog.debug(\"User authenticated without any roles\");   return true; } "
"QueryFilterCondition(QueryFilter<JsonPointer> queryFilter){   this.queryFilter=queryFilter; } "
"public static ChatPage paginate(String unpaginatedString,int pageNumber,int lineLength,int pageHeight){   String[] lines=wordWrap(unpaginatedString,lineLength);   int totalPages=lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);   int actualPageNumber=pageNumber <= totalPages ? pageNumber : totalPages;   int from=(actualPageNumber - 1) * pageHeight;   int to=from + pageHeight <= lines.length ? from + pageHeight : lines.length;   String[] selectedLines=Java15Compat.Arrays_copyOfRange(lines,from,to);   return new ChatPage(selectedLines,actualPageNumber,totalPages); } "
"public final void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){   int compensated_half_width=p_obj.get_half_width() + get_clearance_compensation(p_obj.clearance_idx(),p_obj.get_layer());   ArrayList<ShapeTile> changed_shapes=offset_shapes(p_new_polyline,compensated_half_width,p_keep_at_start_count,p_new_polyline.plaline_len(-1) - p_keep_at_end_count);   int old_shape_count=p_obj.tree_shape_count(this);   int new_shape_count=changed_shapes.size() + p_keep_at_start_count + p_keep_at_end_count;   AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];   ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];   AwtreeNodeLeaf[] old_entries=p_obj.get_search_tree_entries(this);   for (int index=0; index < p_keep_at_start_count; ++index) {     new_leaf_arr[index]=old_entries[index];     new_precalculated_tree_shapes[index]=p_obj.get_tree_shape(this,index);   }   for (int index=p_keep_at_start_count; index < old_shape_count - p_keep_at_end_count; ++index) {     remove_leaf(old_entries[index]);   }   for (int i=0; i < p_keep_at_end_count; ++i) {     int new_index=new_shape_count - p_keep_at_end_count + i;     int old_index=old_shape_count - p_keep_at_end_count + i;     new_leaf_arr[new_index]=old_entries[old_index];     new_leaf_arr[new_index].shape_index_in_object=new_index;     new_precalculated_tree_shapes[new_index]=p_obj.get_tree_shape(this,old_index);   }   for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {     new_precalculated_tree_shapes[index]=changed_shapes.get(index - p_keep_at_start_count);   }   p_obj.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);   for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {     new_leaf_arr[index]=insert(p_obj,index);   }   p_obj.set_search_tree_entries(this,new_leaf_arr); } "
"private Map parsePropertyNames(Map m){   Map props=new HashMap();   Iterator allKeys=m.keySet().iterator();   while (allKeys.hasNext()) {     String attrName=(String)allKeys.next();     Set vals=(Set)m.get(attrName);     if (vals.isEmpty()) {       continue;     }     if (attrName.equalsIgnoreCase(ADDITIONAL_PROPERTIES_ATTR)) {       Iterator attrs=vals.iterator();       while (attrs.hasNext()) {         String compositeVal=(String)attrs.next();         int index=compositeVal.indexOf(EQUALS);         String propName=compositeVal.substring(0,index);         String propVal=compositeVal.substring(index + 1);         addToMap(props,propName,propVal);       }     }  else {       String propertyName=(String)LDAPToSchema.get(attrName);       if (propertyName != null) {         addToMap(props,propertyName,vals);       }     }   }   return props; } "
"public static boolean isValidMaskPattern(int maskPattern){   return maskPattern >= 0 && maskPattern < NUM_MASK_PATTERNS; } "
"public void handleBtnSearchRequest(RequestInvocationEvent event){   forwardTo(); } "
"@Override public Call<DirectionsResponse> cloneCall(){   return getCall().clone(); } "
"ArrayList parse(Reader isreader) throws Exception {   ArrayList result=new ArrayList();   StringBuffer buff=new StringBuffer();   int boundCount=0;   boolean inComment=false;   boolean inCompoundToken=false;   boolean inQuotes=false;   int length;   char[] cbuf=new char[1];   BufferedReader in=new BufferedReader(isreader);   while ((length=in.read(cbuf,0,1)) != -1) {     char ch=cbuf[0];     if (ch == '\"') {       if ((buff.length() != 0) && buff.toString().endsWith(\"\\\\\")) {         buff.append(ch);         continue;       }  else {         inQuotes=!inQuotes;         buff.append(ch);         continue;       }     }     if (inQuotes) {       buff.append(ch);       continue;     }     if (ch == '<') {       if (inComment) {         buff.append(ch);       }  else       if (boundCount == 0) {         if (buff.length() > 0) {           result.add(getXMLTokenFactory().getToken(buff.toString()));           buff.delete(0,buff.length());         }         buff.append(ch);         boundCount++;       }  else       if (boundCount > 0) {         buff.append(ch);         boundCount++;       }  else {         throw new Exception(\"Invalid boundCount: \" + boundCount);       }     }  else     if (ch == '>') {       if (buff.length() >= 1) {         if (!inComment) {           buff.append(ch);           boundCount--;           if (boundCount == 0) {             result.add(getXMLTokenFactory().getToken(buff.toString()));             buff.delete(0,buff.length());           }           continue;         }         if (buff.length() > 1 && buff.substring(buff.length() - 2,buff.length()).equals(\"--\")) {           buff.append(ch);           if (inComment) {             boundCount--;             inComment=false;           }           if (boundCount == 0) {             result.add(getXMLTokenFactory().getToken(buff.toString()));             buff.delete(0,buff.length());           }         }  else {           buff.append(ch);         }       }  else {         throw new Exception(\"Char > in begining of token\");       }     }  else     if (ch == '-') {       if (buff.length() > 2 && buff.toString().startsWith(\"<!-\")) {         if (!inComment) {           inComment=true;         }       }       buff.append(ch);     }  else {       buff.append(ch);     }   }   if (inQuotes) {     throw new Exception(\"unbalanced quote encountered\");   }   if (boundCount > 0) {     throw new Exception(\"unbalanced token encountered: boundCount = \" + boundCount);   }  else   if (boundCount < 0) {     throw new Exception(\" invalid boundCount: \" + boundCount);   }   if (buff.length() > 0) {     result.add(getXMLTokenFactory().getToken(buff.toString()));   }   in.close();   return result; } "
"public boolean doSingleSignOn(Object ssoToken,String inResponseTo,NameIdentifier spNameIdentifier,NameIdentifier idpNameIdentifier){   FSUtils.debug.message(\"FSProxyHandler.doSingleSignOn:Init\");   String protocolProfile=authnRequest.getProtocolProfile();   if (protocolProfile == null || protocolProfile.equals(IFSConstants.SSO_PROF_BROWSER_ART)) {     FSSSOBrowserArtifactProfileHandler handler=new FSSSOBrowserArtifactProfileHandler(request,response,authnRequest,spDescriptor,spConfig,spEntityId,relayState);     handler.setHostedEntityId(hostedEntityId);     handler.setHostedDescriptor(hostedDesc);     handler.setHostedDescriptorConfig(hostedConfig);     handler.setMetaAlias(metaAlias);     handler.setRealm(realm);     return handler.doSingleSignOn(ssoToken,inResponseTo,spNameIdentifier,idpNameIdentifier);   }  else   if (protocolProfile.equals(IFSConstants.SSO_PROF_BROWSER_POST)) {     FSSSOBrowserPostProfileHandler handler=new FSSSOBrowserPostProfileHandler(request,response,authnRequest,spDescriptor,spConfig,spEntityId,relayState);     handler.setHostedEntityId(hostedEntityId);     handler.setHostedDescriptor(hostedDesc);     handler.setHostedDescriptorConfig(hostedConfig);     handler.setMetaAlias(metaAlias);     handler.setRealm(realm);     return handler.doSingleSignOn(ssoToken,inResponseTo,spNameIdentifier,idpNameIdentifier);   }  else {     FSUtils.debug.error(\"FSProxyHandler.doProxySingleSignOn:\" + \"Unsupported protocol profile.\");     return false;   } } "
"public void testCase19(){   byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};   byte bBytes[]={27,-15,65,39,100};   int aSign=1;   int bSign=-1;   byte rBytes[]={12,-21,73,56,27};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.remainder(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public boolean isEmpty(){   return (this.size() == 0); } "
"public PasswordPolicyException(String errorCode,Object[] args){   super(IdRepoBundle.BUNDLE_NAME,errorCode,args); } "
"public SecurityPermission(String name){   super(name); } "
"public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int changeType){   if (DEBUG.messageEnabled()) {     StringBuilder sb=new StringBuilder(255);     sb.append(\"Received SMS notification, orgConfigChanged\");     sb.append(\"serviceName, version, orgName, groupName, \");     sb.append(\" serviceComponent, changeType:\");     sb.append(serviceName).append(\":\").append(version).append(\":\");     sb.append(orgName).append(\":\").append(groupName).append(\":\");     sb.append(serviceComponent).append(\":\").append(changeType);     DEBUG.message(sb.toString());   }   Policy oldPolicy=null;   Policy newPolicy=null;   if (serviceComponent.startsWith(POLICIES_COMPONENT)) {     String cacheKey=buildCacheKey(serviceName,version,orgName,groupName,serviceComponent);     if (changeType == ServiceListener.ADDED) {       if (DEBUG.messageEnabled()) {         DEBUG.message(\"SMS Notification- policy added -\" + \"Refreshing policy for cacheKey=\" + cacheKey);       }       newPolicy=refreshPolicy(cacheKey);     }  else     if (changeType == ServiceListener.REMOVED) {       if (DEBUG.messageEnabled()) {         DEBUG.message(\"SMS Notification- policy removed -\" + \" cacheKey=\" + cacheKey);       }       oldPolicy=(Policy)policies.get(cacheKey);       policies.put(cacheKey,null);     }  else     if (changeType == ServiceListener.MODIFIED) {       oldPolicy=(Policy)policies.get(cacheKey);       if (DEBUG.messageEnabled()) {         DEBUG.message(\"SMS Notification- policy modified -\" + \"Refreshing policy for cacheKey=\" + cacheKey);       }       newPolicy=refreshPolicy(cacheKey);     }  else {       DEBUG.error(\"SMS Notification- unsupported change type : \" + changeType);     }     sendPolicyChangeNotification(oldPolicy,newPolicy,changeType);   }   if (serviceComponent.startsWith(RESOURCES_COMPONENT)) {     try {       PolicyManager pm=getPolicyManager(orgName);       String resourceTypeName=serviceComponent.substring(\"/resources\".length() + 1);       if (DEBUG.messageEnabled()) {         DEBUG.message(\"SMS Notification- resource index modified-\" + \"clearing index for resource type \" + resourceTypeName);       }       pm.getResourceIndexManager().clearResourceIndex(resourceTypeName);     }  catch (    PolicyException pe) {       DEBUG.error(\"error while clearing resource index \",pe);     } catch (    SSOException ssoe) {       DEBUG.error(ResBundleUtils.getString(\"invalid_sso_token\"),ssoe);     }   }   if (serviceComponent.startsWith(REALM_SUBJECTS_COMPONENT)) {     if (DEBUG.messageEnabled()) {       DEBUG.message(\"SMS Notification- realm subjects modified \" + \"- resetting realm subjects for orgName:\" + orgName);     }     realmSubjectsChanged(orgName);   } } "
"public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){   super(reason,SQLState,vendorCode,cause);   this.updateCounts=updateCounts; } "
"private View createGapView(){   final View view=new View(mContext);   final int width=directionVertical() ? ViewGroup.LayoutParams.MATCH_PARENT : (int)dpToPx(GAP_SIZE);   final int height=directionVertical() ? (int)dpToPx(GAP_SIZE) : ViewGroup.LayoutParams.MATCH_PARENT;   final ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(width,height);   if (directionVertical()) {     params.width=1;   }  else {     params.height=1;   }   view.setLayoutParams(params);   return view; } "
"public boolean match(Object matchObj){   if (matchObj == null)   return true;  else   if (!matchObj.getClass().equals(this.getClass())) {     return false;   }  else   if (matchObj == this)   return true;   SIPResponse that=(SIPResponse)matchObj;   StatusLine rline=that.statusLine;   if (this.statusLine == null && rline != null)   return false;  else   if (this.statusLine == rline)   return super.match(matchObj);  else {     return statusLine.match(that.statusLine) && super.match(matchObj);   } } "
"public synchronized void paintIcon(Component c,Graphics g,int x,int y){   if (imageObserver == null) {     g.drawImage(image,x,y,c);   }  else {     g.drawImage(image,x,y,imageObserver);   } } "
"protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {   reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true); } "
"public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_float\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.insert_float(value);   }   finally {     _servant_postinvoke($so);   } } "
"public void clearPasswordHistory(){   operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_HISTORY); } "
"public void removeTag(){   parameters.delete(ParameterNames.TAG); } "
"public static void removeStorageFiles(File backendDir){   if (!backendDir.exists()) {     return;   }   if (!backendDir.isDirectory()) {     throw new StorageRuntimeException(ERR_DIRECTORY_INVALID.get(backendDir.getPath()).toString());   }   try {     File[] files=backendDir.listFiles();     for (    File f : files) {       f.delete();     }   }  catch (  Exception e) {     throw new StorageRuntimeException(ERR_REMOVE_FAIL.get(e.getMessage()).toString(),e);   } } "
"public void paint(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).paint(a,b);   } } "
"public AMAuthenticationInstance createAuthenticationInstance(String name,String type,Map attributes) throws AMConfigurationException {   if (name.indexOf(' ') != -1) {     throw new AMConfigurationException(BUNDLE_NAME,\"invalidAuthenticationInstanceName\",null);   }   Set moduleTypes=getAuthenticationTypes();   if (!moduleTypes.contains(type)) {     throw new AMConfigurationException(BUNDLE_NAME,\"wrongType\",new Object[]{type});   }   AMAuthenticationInstance instance=getAuthenticationInstance(name);   if (instance != null) {     if (instance.getServiceConfig() != null) {       throw new AMConfigurationException(BUNDLE_NAME,\"authInstanceExist\",new Object[]{name});     }  else {       throw new AMConfigurationException(BUNDLE_NAME,\"authInstanceIsGlobal\",new Object[]{name});     }   }   String serviceName=getServiceName(type);   ServiceSchema schema=null;   try {     ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);     schema=ssm.getSchema(SchemaType.GLOBAL);   }  catch (  SSOException e) {     if (DEBUG.warningEnabled()) {       DEBUG.warning(\"Token doesn't have access to service: \" + token + \" -> \"+ serviceName);     }   } catch (  SMSException e) {   }   try {     OrganizationConfigManager ocm=new OrganizationConfigManager(token,realm);     if (!ocm.getAssignedServices().contains(serviceName)) {       ocm.assignService(serviceName,null);     }     ServiceConfig orgConfig=ocm.getServiceConfig(serviceName);     if (orgConfig == null) {       orgConfig=ocm.addServiceConfig(serviceName,null);     }     ServiceConfig subConfig=orgConfig;     if (!name.equals(type)) {       orgConfig.addSubConfig(name,ISAuthConstants.SERVER_SUBSCHEMA,0,attributes);       subConfig=orgConfig.getSubConfig(name);     }  else {       subConfig.setAttributes(attributes);     }     if (!SystemProperties.isServerMode()) {       buildModuleInstanceForService(realm,serviceName);     }     return new AMAuthenticationInstance(name,type,subConfig,schema);   }  catch (  Exception e) {     throw new AMConfigurationException(e);   } } "
"@Override public boolean isField2(){   return _foo.isField2(); } "
"public void testConstructorStringRadix10Negative(){   String value=\"-234871376037\";   int radix=36;   byte rBytes[]={-4,48,71,62,-76,93,-105,13};   BigInteger aNumber=new BigInteger(value,radix);   byte resBytes[]=new byte[rBytes.length];   resBytes=aNumber.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,aNumber.signum()); } "
"public static void removeByUuid(java.lang.String uuid){   getPersistence().removeByUuid(uuid); } "
"private void readNameTable() throws java.io.IOException {   int table_location[];   table_location=tables.get(\"name\");   if (table_location == null) {     if (fileName != null) {       throw new IOException(\"table.1.does.not.exist.in.2\").setMessageParams(\"name\",fileName);     }  else {       throw new IOException(\"table.1.does.not.exist\").setMessageParams(\"name\");     }   }   allNameEntries=new LinkedHashMap<>();   raf.seek(table_location[0] + 2);   int numRecords=raf.readUnsignedShort();   int startOfStorage=raf.readUnsignedShort();   for (int k=0; k < numRecords; ++k) {     int platformID=raf.readUnsignedShort();     int platformEncodingID=raf.readUnsignedShort();     int languageID=raf.readUnsignedShort();     int nameID=raf.readUnsignedShort();     int length=raf.readUnsignedShort();     int offset=raf.readUnsignedShort();     List<String[]> names;     if (allNameEntries.containsKey(nameID)) {       names=allNameEntries.get(nameID);     }  else {       allNameEntries.put(nameID,names=new ArrayList<>());     }     int pos=(int)raf.getPosition();     raf.seek(table_location[0] + startOfStorage + offset);     String name;     if (platformID == 0 || platformID == 3 || platformID == 2 && platformEncodingID == 1) {       name=readUnicodeString(length);     }  else {       name=readStandardString(length);     }     names.add(new String[]{Integer.toString(platformID),Integer.toString(platformEncodingID),Integer.toString(languageID),name});     raf.seek(pos);   } } "
"public SOAPElement create(String localName,String prefix,String uri) throws SOAPException {   return soapFactory.createElement(localName,prefix,uri); } "
"static void releaseSearchBuffer(SearchBuffer sb){   sb.empty();   searchBuffers.push(sb); } "
"final ElemContext pop(){   return this.m_prev; } "
"public Point mul(Point p,boolean checkInfinity) throws DivisionException {   Point r=new Point(p.getX(),p.getY());   for (int i=1; i < secret.bitLength(); i++) {     try {       r=dbl(r,checkInfinity);       if (secret.testBit(secret.bitLength() - 1 - i)) {         r=add(r,p,checkInfinity);       }     }  catch (    DivisionException e) {       throw new DivisionException(e.getLocalizedMessage(),i);     }   }   return r; } "
"public boolean mustCheckUnsavedChanges(){   return schemaElementPanel != null && schemaElementPanel.mustCheckUnsavedChanges(); } "
"public Mp4TagRawBinaryField(Mp4BoxHeader header,ByteBuffer raw) throws UnsupportedEncodingException {   super(header.getId());   dataSize=header.getDataLength();   build(raw); } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   try {     Map map=getValues();     String name=(String)map.get(ATTR_NAME);     Set values=(Set)map.get(ATTR_VALUES);     Map mapValues=(Map)getPageSessionAttribute(SessionPropertyConditionHelper.PG_SESSION_PROPERTY_VALUES);     boolean okToAdd=true;     if (mapValues == null) {       mapValues=new HashMap();       setPageSessionAttribute(SessionPropertyConditionHelper.PG_SESSION_PROPERTY_VALUES,(HashMap)mapValues);     }  else {       Set check=(Set)mapValues.get(name);       if (check != null) {         okToAdd=false;         setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",\"policy.condition.session.property.name.already.exists.message\");         forwardTo();       }     }     if (okToAdd) {       mapValues.put(name,values);       forwardToCallingViewBean();     }   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     forwardTo();   } } "
"public boolean hasArrayIndexedField(JsonPointer fieldIndexPointer){   return fieldIndexPointer.size() == 2 && hasField(fieldIndexPointer.parent()) && fieldIndexPointer.leaf().matches(\"[0-9]+\") && getField(fieldIndexPointer.parent()).isArray(); } "
"public boolean addGpsDateTimeStampTag(long timestamp){   ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));   if (t == null) {     return false;   }   setTag(t);   mGPSTimeStampCalendar.setTimeInMillis(timestamp);   t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});   if (t == null) {     return false;   }   setTag(t);   return true; } "
"public boolean isEncrypted(){   return cipherInfo.encrypt; } "
"private void updateView(){   if (rebuildItems()) {     calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);     layout(getWidth(),getHeight());   } } "
"public Boolean isMustUnderstand(){   return mustUnderstand; } "
"public static AuthenticationHandler passwordBased(final SecretProvider data,final boolean isDryRun){   return new AuthenticationHandler(data,isDryRun,false); } "
"public Element current(){   if (elementStack == null) {     return first();   }   if (!elementStack.empty()) {     StackItem item=elementStack.peek();     Element elem=item.getElement();     int index=item.getIndex();     if (index == -1) {       return elem;     }     return elem.getElement(index);   }   return null; } "
"public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {   if (dataToEncode == null) {     throw new NullPointerException(\"Data to encode was null.\");   }   B64OutputStream bos=null;   try {     bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);     bos.write(dataToEncode);   }  catch (  java.io.IOException e) {     throw e;   }  finally {     try {       bos.close();     }  catch (    Exception e) {     }   } } "
"public GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second){   this(year,month,dayOfMonth,hourOfDay,minute,second,0); } "
"public void testConstrStringWithExponentWithoutPoint4(){   String a=\"238768787678287e+214\";   int aScale=-214;   BigInteger bA=new BigInteger(\"238768787678287\");   BigDecimal aNumber=new BigDecimal(a);   assertEquals(\"incorrect value\",bA,aNumber.unscaledValue());   assertEquals(\"incorrect scale\",aScale,aNumber.scale()); } "
"private void enqueue(Node<E> node){   last=last.next=node; } "
"public static void main(String[] args){   StringBuilder str=new StringBuilder();   str.append(\"Custom Scripted Connector Bundler\").append(\" for OpenIDM v\").append(ScriptedBundler.class.getPackage().getImplementationVersion());   System.out.println(str);   CommandLineParser parser=new BasicParser();   CommandLine cmdline=null;   try {     cmdline=parser.parse(options,args);   }  catch (  ParseException e) {     printHelp();     return;   }   if (cmdline == null || cmdline.hasOption(\"h\") || !cmdline.hasOption(\"c\")) {     printHelp();   }  else {     bundleConnector(cmdline.getOptionValue(\"c\"),cmdline.hasOption(\"v\"));   } } "
"public void handleButton2Request(RequestInvocationEvent event){   forwardToCallingViewBean(); } "
"public ListRenderer(com.itextpdf.layout.element.List modelElement){   super(modelElement); } "
"public StyledEditorKit(){   createInputAttributeUpdated();   createInputAttributes(); } "
"public final void testGetEncryptedData03() throws IOException {   boolean performed=false;   for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(EncryptedPrivateKeyInfoData.algName0[i][0]);       ap.init(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));       EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(ap,EncryptedPrivateKeyInfoData.encryptedData);       assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.encryptedData,epki.getEncryptedData()));       performed=true;     }  catch (    NoSuchAlgorithmException allowedFailure) {     }   }   assertTrue(\"Test not performed\",performed); } "
"public Rectangle moveLeft(float move){   x-=move;   return this; } "
"@Override public void mark(int readlimit){ } "
"public NimbusLookAndFeel(){   super();   defaults=new NimbusDefaults(); } "
"public JToolBar(){   this(HORIZONTAL); } "
"public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public ThreadLocal(){ } "
"@SuppressWarnings(\"unchecked\") public void writeNClob(NClob x) throws SQLException {   attribs.add(x); } "
"protected void tearDown(){   ht10=null;   ht100=null;   htfull=null;   keyVector=null;   elmVector=null; } "
"public void characters(String characters) throws SAXException {   final int len=characters.length();   if (len > m_charsBuff.length) {     m_charsBuff=new char[len * 2 + 1];   }   characters.getChars(0,len,m_charsBuff,0);   characters(m_charsBuff,0,len); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.DigSigElement createDigSigElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DigSigElementImpl(); } "
"private PrepNight(){ } "
"public void test_Ctor() throws Exception {   try {     new testCipher(null,null,\"s\");     fail();   }  catch (  NullPointerException expected) {   }   try {     new testCipher(new MyCipher(),null,\"s\");     fail(\"NullPointerException expected for 'null' provider\");   }  catch (  NullPointerException expected) {   }   try {     new testCipher(null,new Provider(\"qwerty\",1.0,\"qwerty\"){     } ,\"s\");     fail(\"NullPointerException expected for 'null' cipherSpi\");   }  catch (  NullPointerException expected) {   } } "
"@SuppressLint(\"CommitPrefEdits\") public static void writeUserBasicData(Context context,String string){   SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();   JSONObject jsonObject=null;   try {     jsonObject=new JSONObject(string);     SettingsManager.setUserId(jsonObject.getInt(\"id\"));   }  catch (  JSONException e) {     e.printStackTrace();   }   editor.commit(); } "
"public void test_SelectThreeTables() throws SQLException {   String sql=\"SELECT onum, \" + DatabaseCreator.ORDERS_TABLE + \".cnum\"+ \" FROM \"+ DatabaseCreator.SALESPEOPLE_TABLE+ \", \"+ DatabaseCreator.CUSTOMERS_TABLE+ \", \"+ DatabaseCreator.ORDERS_TABLE+ \" WHERE \"+ DatabaseCreator.CUSTOMERS_TABLE+ \".city <> \"+ DatabaseCreator.SALESPEOPLE_TABLE+ \".city\"+ \" AND \"+ DatabaseCreator.ORDERS_TABLE+ \".cnum = \"+ DatabaseCreator.CUSTOMERS_TABLE+ \".cnum\"+ \" AND \"+ DatabaseCreator.ORDERS_TABLE+ \".snum = \"+ DatabaseCreator.SALESPEOPLE_TABLE+ \".snum\";   ResultSet result=statement.executeQuery(sql);   HashMap<Integer,Integer> value=new HashMap<Integer,Integer>();   value.put(3001,2008);   value.put(3002,2007);   value.put(3006,2008);   value.put(3009,2002);   value.put(3007,2004);   value.put(3010,2004);   while (result.next()) {     int key=result.getInt(\"onum\");     int val=result.getInt(\"cnum\");     assertTrue(\"wrong value of onum field\",value.containsKey(key));     assertEquals(\"wrong value of cnum field\",value.get(key),(Integer)val);     value.remove(key);   }   assertTrue(\"expected rows number doesn't equal actual rows number\",value.isEmpty());   result.close(); } "
"public void addRelationType(RelationType relationTypeObj) throws IllegalArgumentException, InvalidRelationTypeException {   if (relationTypeObj == null) {     String excMsg=\"Invalid parameter.\";     throw new IllegalArgumentException(excMsg);   }   RELATION_LOGGER.entering(RelationService.class.getName(),\"addRelationType\");   List<RoleInfo> roleInfoList=relationTypeObj.getRoleInfos();   if (roleInfoList == null) {     String excMsg=\"No role info provided.\";     throw new InvalidRelationTypeException(excMsg);   }   RoleInfo[] roleInfoArray=new RoleInfo[roleInfoList.size()];   int i=0;   for (  RoleInfo currRoleInfo : roleInfoList) {     roleInfoArray[i]=currRoleInfo;     i++;   }   RelationTypeSupport.checkRoleInfos(roleInfoArray);   addRelationTypeInt(relationTypeObj);   RELATION_LOGGER.exiting(RelationService.class.getName(),\"addRelationType\");   return; } "
"private EntitlementException causeOf(EntitlementException ex){   if (ex.getErrorCode() == EntitlementException.INVALID_JSON) {     if (ex.getCause() instanceof JsonMappingException) {       if (ex.getCause().getCause() instanceof EntitlementException) {         EntitlementException cause=(EntitlementException)ex.getCause().getCause();         if (errorCodeMapping.containsKey(cause.getErrorCode())) {           return cause;         }       }     }   }   return ex; } "
"public void runTest() throws Throwable {   Document doc;   EntityReference badEntityRef;   doc=(Document)load(\"hc_staff\",true);   if ((\"text/html\".equals(getContentType()))) { {       boolean success=false;       try {         badEntityRef=doc.createEntityReference(\"foo\");       }  catch (      DOMException ex) {         success=(ex.code == DOMException.NOT_SUPPORTED_ERR);       }       assertTrue(\"throw_NOT_SUPPORTED_ERR\",success);     }   }  else { {       boolean success=false;       try {         badEntityRef=doc.createEntityReference(\"invalid^Name\");       }  catch (      DOMException ex) {         success=(ex.code == DOMException.INVALID_CHARACTER_ERR);       }       assertTrue(\"throw_INVALID_CHARACTER_ERR\",success);     }   } } "
"public void addRow(final Vector rowData){   insertRow(getRowCount(),rowData); } "
"private static boolean isFractionalConfigEquivalent(FractionalConfig cfg1,FractionalConfig cfg2) throws ConfigException {   if (!cfg1.getBaseDn().equals(cfg2.getBaseDn())) {     return false;   }   if (cfg1.isFractional() != cfg2.isFractional() || cfg1.isFractionalExclusive() != cfg2.isFractionalExclusive()) {     return false;   }   Set<String> allClassesAttrs1=cfg1.getFractionalAllClassesAttributes();   Set<String> allClassesAttrs2=cfg2.getFractionalAllClassesAttributes();   if (!areAttributesEquivalent(allClassesAttrs1,allClassesAttrs2)) {     return false;   }   Map<String,Set<String>> specificClassesAttrs1=cfg1.getFractionalSpecificClassesAttributes();   Map<String,Set<String>> specificClassesAttrs2=cfg2.getFractionalSpecificClassesAttributes();   if (specificClassesAttrs1.size() != specificClassesAttrs2.size()) {     return false;   }   Schema schema=DirectoryServer.getSchema();   for (  String className1 : specificClassesAttrs1.keySet()) {     ObjectClass objectClass1=schema.getObjectClass(className1);     if (objectClass1.isPlaceHolder()) {       throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className1));     }     boolean foundClass=false;     for (    String className2 : specificClassesAttrs2.keySet()) {       ObjectClass objectClass2=schema.getObjectClass(className2);       if (objectClass2.isPlaceHolder()) {         throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className2));       }       if (objectClass1.equals(objectClass2)) {         foundClass=true;         Set<String> attributes1=specificClassesAttrs1.get(className1);         Set<String> attributes2=specificClassesAttrs2.get(className2);         if (!areAttributesEquivalent(attributes1,attributes2)) {           return false;         }         break;       }     }     if (!foundClass) {       return false;     }   }   return true; } "
"@AfterClass public static void cleanupClass(){   try {     Misc.deleteDirectorySimple(scenario.getRepositoryLocation());   }  catch (  Exception ignore) {     System.err.println(\"cannot remove \" + scenario.getRepositoryLocation());   } } "
"public void recycle(){   decoder.reset();   leftovers.position(0); } "
"public boolean isCachedFile(){   return false; } "
"public static void main(String[] args) throws Exception {   File workDir=new File(System.getProperty(\"user.dir\"));   try (GitVersionCalculator jgitver=GitVersionCalculator.location(workDir).setMavenLike(true)){     System.out.println(jgitver.getVersion());   }  } "
"private E dequeue(){   final Object[] items=this.items;   @SuppressWarnings(\"unchecked\") E x=(E)items[takeIndex];   items[takeIndex]=null;   if (++takeIndex == items.length)   takeIndex=0;   count--;   if (itrs != null)   itrs.elementDequeued();   notFull.signal();   return x; } "
"public JsonValue build(){   return new JsonValue(content); } "
"public static void releaseMBeanServer(MBeanServer mbeanServer){   checkPermission(\"releaseMBeanServer\");   removeMBeanServer(mbeanServer); } "
"public void runTest() throws Throwable {   Document doc;   DocumentType docType;   NamedNodeMap attrList;   doc=(Document)load(\"staff\",false);   docType=doc.getDoctype();   assertNotNull(\"docTypeNotNull\",docType);   attrList=docType.getAttributes();   assertNull(\"doctypeAttributesNull\",attrList); } "
"@Override public void handleMessage(SoapMessage message) throws Fault {   boolean isReq=MessageUtils.isRequestor(message);   boolean isOut=MessageUtils.isOutbound(message);   if (isReq != isOut) {     assertTokens(message);     return;   }   if (isReq) {     addToken(message);   }  else {     processToken(message);   } } "
"public RepoJobStore(){ } "
"public ECPRequest createECPRequest(Element value) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST,value);   if (obj == null) {     return new ECPRequestImpl(value);   }  else {     return (ECPRequest)obj;   } } "
"@NonNull public static Agera empty(){   return new AgeraEmpty(); } "
"public FrameBodyTCON(byte textEncoding,String text){   super(textEncoding,text); } "
"public void testFieldTEN(){   String oneS=\"10\";   double oneD=10.0;   assertEquals(\"incorrect string value\",oneS,BigDecimal.TEN.toString());   assertEquals(\"incorrect double value\",oneD,BigDecimal.TEN.doubleValue(),0); } "
"@Advice.OnMethodExit public static void exit(@Advice.Enter long startTime,@Advice.Argument(0) CQLStatement statement,@Advice.Argument(1) QueryState queryState,@Advice.Argument(2) QueryOptions options,@Advice.Return ResultMessage result){   ConnectorImpl.queryProcessorWrapper().processStatement(statement,queryState,options,startTime,result,null); } "
"public int previous(){   if (text == null) {     return NULLORDER;   }   NormalizerBase.Mode textMode=text.getMode();   NormalizerBase.Mode ownerMode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());   if (textMode != ownerMode) {     text.setMode(ownerMode);   }   if (buffer != null) {     if (expIndex > 0) {       return strengthOrder(buffer[--expIndex]);     }  else {       buffer=null;       expIndex=0;     }   }  else   if (swapOrder != 0) {     if (Character.isSupplementaryCodePoint(swapOrder)) {       char[] chars=Character.toChars(swapOrder);       swapOrder=chars[1];       return chars[0] << 16;     }     int order=swapOrder << 16;     swapOrder=0;     return order;   }   int ch=text.previous();   if (ch == NormalizerBase.DONE) {     return NULLORDER;   }   int value=ordering.getUnicodeOrder(ch);   if (value == RuleBasedCollator.UNMAPPED) {     swapOrder=UNMAPPEDCHARVALUE;     return ch;   }  else   if (value >= RuleBasedCollator.CONTRACTCHARINDEX) {     value=prevContractChar(ch);   }   if (value >= RuleBasedCollator.EXPANDCHARINDEX) {     buffer=ordering.getExpandValueList(value);     expIndex=buffer.length;     value=buffer[--expIndex];   }   if (ordering.isSEAsianSwapping()) {     int vowel;     if (isThaiBaseConsonant(ch)) {       vowel=text.previous();       if (isThaiPreVowel(vowel)) {         buffer=makeReorderedBuffer(vowel,value,buffer,false);         expIndex=buffer.length - 1;         value=buffer[expIndex];       }  else {         text.next();       }     }     if (isLaoBaseConsonant(ch)) {       vowel=text.previous();       if (isLaoPreVowel(vowel)) {         buffer=makeReorderedBuffer(vowel,value,buffer,false);         expIndex=buffer.length - 1;         value=buffer[expIndex];       }  else {         text.next();       }     }   }   return strengthOrder(value); } "
"public RenderContext(AffineTransform usr2dev,Shape aoi,RenderingHints hints){   this.hints=hints;   this.aoi=aoi;   this.usr2dev=(AffineTransform)usr2dev.clone(); } "
"public XMLString xstr(){   return this; } "
"private boolean hasPrivilege(final AuthenticationInfo authInfo){   boolean ret=true;   final InternalClientConnection tempConn=new InternalClientConnection(authInfo);   if (!tempConn.hasPrivilege(Privilege.PROXIED_AUTH,bindOp)) {     setCallbackMsg(ERR_SASL_AUTHZID_INSUFFICIENT_PRIVILEGES.get(authEntry.getName()));     ret=false;   }   return ret; } "
"public boolean endsWith(String suffix){   return m_str.endsWith(suffix); } "
"private void parseMinorVersion(String minorVer) throws FSMsgException {   try {     minorVersion=Integer.parseInt(minorVer);   }  catch (  NumberFormatException e) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSAuthnRequest(Element): invalid \" + \"MinorVersion\",e);     }     throw new FSMsgException(\"wrongInput\",null);   }   if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSAuthnRequest.checkMinorVersion:\" + \" Minor Version of the AuthnRequest is too high.\");     }     throw new FSMsgException(\"requestVersionTooHigh\",null);   }  else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSAuthnRequest.checkMinorVersion:\" + \" Minor Version of the AuthnRequest is too low.\");     }     throw new FSMsgException(\"requestVersionTooLow\",null);   } } "
"private void mergeConfigFiles(String instanceConfigFileMigrate,String instanceConfigFile,Properties mappedProperties) throws Exception {   BufferedReader br=null;   PrintWriter pw=null;   FileInputStream fStream=null;   String oldPropertyName=null;   Debug.log(\"MigrateWebAgentConfigurePropertiesTask.mergeConfigFiles() - \" + \"config file to migrate from: \" + instanceConfigFileMigrate + \" config file to migrate to: \"+ instanceConfigFile);   try {     FileReader fr=new FileReader(instanceConfigFile);     br=new BufferedReader(fr);     String tmpFileName=instanceConfigFile + \".tmp\";     pw=new PrintWriter(new FileWriter(tmpFileName));     String lineData=null;     KeyValue keyValue=null;     ArrayList migrateLines=null;     while ((lineData=br.readLine()) != null) {       lineData=lineData.trim();       if (lineData.startsWith(FileUtils.HASH) || lineData.length() == 0) {         pw.println(lineData);       }  else {         keyValue=new KeyValue(lineData);         if (nonMigratedParameters.contains(keyValue.getKey())) {           pw.println(lineData);           continue;         }         oldPropertyName=mappedProperties.getProperty(keyValue.getParameter());         migrateLines=getMigrateLines(keyValue.getParameter(),oldPropertyName,instanceConfigFileMigrate);         Debug.log(\"MigrateWebAgentConfigurePropertiesTask.mergeConfigFiles()- \" + \"parameter: \" + keyValue.getParameter() + \" matched migration parameter: \"+ migrateLines);         if (migrateLines.size() > 0) {           for (int i=0; i < migrateLines.size(); i++) {             pw.println(migrateLines.get(i));           }         }  else {           if (lineData.indexOf(AGENT_ENCRYPT_KEY_PROPERTY) >= 0) {             StringBuffer newLineData=new StringBuffer();             int count=0;             StringTokenizer st=new StringTokenizer(lineData,\"=\");             while (st.hasMoreElements()) {               String tok=st.nextToken();               if (count == 0) {                 newLineData.append(tok);                 newLineData.append(\"= \");               }  else {                 newLineData.append(AGENT_22_ENCRYPT_KEY_VALUE);               }               count++;             }             pw.println(newLineData);           }  else {             pw.println(lineData);           }         }       }     }     br.close();     pw.flush();     pw.close();     FileUtils.copyFile(tmpFileName,instanceConfigFile);     File tmpFile=new File(tmpFileName);     tmpFile.delete();   }  catch (  Exception ex) {     if (br != null) {       try {         br.close();       }  catch (      Exception ex1) {       }     }     if (pw != null) {       try {         pw.close();       }  catch (      Exception ex1) {       }     }   } } "
"public boolean isBridge(){   return testAllFlags(IS_METHOD | BRIDGE); } "
"public DefaultCaret(){ } "
"@KnownFailure(\"not supported\") public void testUpdate4() throws SQLException {   DatabaseCreator.fillFKStrictTable(conn);   try {     statement.executeUpdate(\"UPDATE \" + DatabaseCreator.FKSTRICT_TABLE + \" SET name_id = 6 WHERE name_id = 2\");     fail(\"expecting SQLException\");   }  catch (  SQLException ex) {   } } "
"public FacebookException(String message,Throwable throwable){   super(message,throwable); } "
"public void removeValve(String name) throws Exception {   ObjectName oname=new ObjectName(name);   Container container=getParentContainerFromChild(oname);   Valve[] valves=container.getPipeline().getValves();   for (int i=0; i < valves.length; i++) {     ObjectName voname=((JmxEnabled)valves[i]).getObjectName();     if (voname.equals(oname)) {       container.getPipeline().removeValve(valves[i]);     }   } } "
"protected boolean isRootPaneCheckingEnabled(){   return rootPaneCheckingEnabled; } "
"void skipRemainingSiblings(){   if (!stack.isEmpty()) {     stack.peek().skip();   } } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationContextStatementType createAuthenticationContextStatementType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationContextStatementTypeImpl(); } "
"public int size(){   final ReentrantLock lock=this.lock;   lock.lock();   try {     return count;   }   finally {     lock.unlock();   } } "
"public static <T extends Fragment>BuilderImages<T> takeImages(T fragment){   return new BuilderImages<T>(fragment); } "
"@DataProvider(name=\"invalidasciidata\") public Object[][] createInValidASCIIData(){   return new Object[][]{{'\\u200A'}}; } "
"public void initializePasswordValidators() throws ConfigException, InitializationException {   RootCfg rootConfiguration=serverContext.getRootConfig();   rootConfiguration.addPasswordValidatorAddListener(this);   rootConfiguration.addPasswordValidatorDeleteListener(this);   for (  String validatorName : rootConfiguration.listPasswordValidators()) {     PasswordValidatorCfg validatorConfiguration=rootConfiguration.getPasswordValidator(validatorName);     validatorConfiguration.addChangeListener(this);     if (validatorConfiguration.isEnabled()) {       String className=validatorConfiguration.getJavaClass();       try {         PasswordValidator<? extends PasswordValidatorCfg> validator=loadValidator(className,validatorConfiguration,true);         passwordValidators.put(validatorConfiguration.dn(),validator);         DirectoryServer.registerPasswordValidator(validatorConfiguration.dn(),validator);       }  catch (      InitializationException ie) {         logger.error(ie.getMessageObject());         continue;       }     }   } } "
"private void writeObject(ObjectOutputStream s) throws IOException {   s.defaultWriteObject();   s.writeObject(SerializationTester.test(flavorMap) ? flavorMap : null);   DnDEventMulticaster.save(s,dragSourceListenerK,listener);   DnDEventMulticaster.save(s,dragSourceMotionListenerK,motionListener);   s.writeObject(null); } "
"public static Response.Builder readHttp2HeadersList(List<Header> headerBlock) throws IOException {   String status=null;   Headers.Builder headersBuilder=new Headers.Builder();   for (int i=0, size=headerBlock.size(); i < size; i++) {     ByteString name=headerBlock.get(i).name;     String value=headerBlock.get(i).value.utf8();     if (name.equals(RESPONSE_STATUS)) {       status=value;     }  else     if (!HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(name)) {       headersBuilder.add(name.utf8(),value);     }   }   if (status == null)   throw new ProtocolException(\"Expected ':status' header not present\");   StatusLine statusLine=StatusLine.parse(\"HTTP/1.1 \" + status);   return new Response.Builder().protocol(Protocol.HTTP_2).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build()); } "
"private boolean expand_to_door_section(ExpandObject p_door,int p_section_no,PlaSegmentFloat p_shape_entry,MazeListElement p_from_element,int p_add_costs,MazeAdjustment p_adjustment){   if (p_door.get_maze_search_element(p_section_no).is_occupied || p_shape_entry == null) {     return false;   }   ExpandRoomComplete next_room=p_door.other_room_complete(p_from_element.next_room);   int layer=p_from_element.next_room.get_layer();   PlaPointFloat shape_entry_middle=p_shape_entry.point_a.middle_point(p_shape_entry.point_b);   double expansion_value=p_from_element.expansion_value + p_add_costs + shape_entry_middle.distance_weighted(p_from_element.shape_entry.point_a.middle_point(p_from_element.shape_entry.point_b),art_ctrl.trace_costs[layer].horizontal,art_ctrl.trace_costs[layer].vertical);   double sorting_value=expansion_value + destination_distance.calculate(shape_entry_middle,layer);   boolean room_ripped=p_add_costs > 0 && p_adjustment == MazeAdjustment.NONE || p_from_element.already_checked && p_from_element.room_ripped;   MazeListElement new_element=new MazeListElement(p_door,p_section_no,p_from_element.door,p_from_element.section_no_of_door,expansion_value,sorting_value,next_room,p_shape_entry,room_ripped,p_adjustment,false);   maze_expansion_list.add(new_element);   return true; } "
"private boolean serializeCompactRDFStructProp(XMPNode node,int indent,boolean hasRDFResourceQual) throws XMPException, IOException {   boolean hasAttrFields=false;   boolean hasElemFields=false;   boolean emitEndTag=true;   for (Iterator ic=node.iterateChildren(); ic.hasNext(); ) {     XMPNode field=(XMPNode)ic.next();     if (canBeRDFAttrProp(field)) {       hasAttrFields=true;     }  else {       hasElemFields=true;     }     if (hasAttrFields && hasElemFields) {       break;     }   }   if (hasRDFResourceQual && hasElemFields) {     throw new XMPException(\"Can't mix rdf:resource qualifier and element fields\",XMPError.BADRDF);   }   if (!node.hasChildren()) {     write(\" rdf:parseType=\\\"Resource\\\"/>\");     writeNewline();     emitEndTag=false;   }  else   if (!hasElemFields) {     serializeCompactRDFAttrProps(node,indent + 1);     write(\"/>\");     writeNewline();     emitEndTag=false;   }  else   if (!hasAttrFields) {     write(\" rdf:parseType=\\\"Resource\\\">\");     writeNewline();     serializeCompactRDFElementProps(node,indent + 1);   }  else {     write('>');     writeNewline();     writeIndent(indent + 1);     write(RDF_STRUCT_START);     serializeCompactRDFAttrProps(node,indent + 2);     write(\">\");     writeNewline();     serializeCompactRDFElementProps(node,indent + 1);     writeIndent(indent + 1);     write(RDF_STRUCT_END);     writeNewline();   }   return emitEndTag; } "
"public FrameBodyTIPL(){   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1); } "
"private long parseMaxSize(){   char lastChar=maxSize.toLowerCase().charAt(maxSize.length() - 1);   int a; switch (lastChar) { case 'k':     a=BYTES;   break; case 'm': a=BYTES * BYTES; break; case 'g': a=BYTES * BYTES * BYTES; break; default : return 0; } long value=Long.parseLong(maxSize.substring(0,maxSize.length() - 1)); return value * a; } "
"public void initialize(Map configParams){ } "
"public CodeSource(URL url,CodeSigner[] signers){   this.location=url;   if (signers != null) {     this.signers=signers.clone();   } } "
"public Object[] parse(String string) throws ParseException {   ParsePosition position=new ParsePosition(0);   Object[] result=parse(string,position);   if (position.getIndex() == 0) {     throw new ParseException(\"Parse failure\",position.getErrorIndex());   }   return result; } "
"public static void main(final String[] args){   DOMTestCase.doMain(textsplittextfour.class,args); } "
"public void scrollRectToVisible(Rectangle r){   Insets i=getInsets();   int x0=r.x + visibility.getValue() - i.left;   int x1=x0 + r.width;   if (x0 < visibility.getValue()) {     visibility.setValue(x0);   }  else   if (x1 > visibility.getValue() + visibility.getExtent()) {     visibility.setValue(x1 - visibility.getExtent());   } } "
"public SmallSet(int initialCapacity){   Reject.ifFalse(initialCapacity >= 0);   if (initialCapacity > 1) {     elements=new LinkedHashMap<>(initialCapacity);   } } "
"public void remove(int position){   delItem(position); } "
"public void removeStaticGroup(String groupDN) throws AMException, SSOException {   SSOTokenManager.getInstance().validateToken(super.token);   Set userDNs=new HashSet();   userDNs.add(super.entryDN);   dsServices.modifyMemberShip(super.token,userDNs,groupDN,GROUP,REMOVE_MEMBER); } "
"public void finishResponse(){   try {     if (writer != null) {       writer.close();     }  else {       if (stream != null)       stream.close();     }   }  catch (  IOException e) {   } } "
"static boolean canBootstrap() throws ConfiguratorException {   String bsFile=getBootStrapFile();   return bsFile != null; } "
"protected int checkRiskAttribute(){   int retVal=0;   if (debug.messageEnabled()) {     debug.message(\"{}.checkRiskAttribute\",ADAPTIVE);   }   if (riskAttributeName != null && riskAttributeValue != null) {     Set<String> riskAttributeValues=null;     riskAttributeValues=getIdentityAttributeSet(riskAttributeName);     if (riskAttributeValues != null) {       for (      String riskAttr : riskAttributeValues) {         if (riskAttributeValue.equalsIgnoreCase(riskAttr)) {           if (debug.messageEnabled()) {             debug.message(\"{}.checkRiskAttribute: Found Match\",ADAPTIVE);           }           retVal=riskAttributeScore;           break;         }       }     }   }   if (!riskAttributeInvert) {     retVal=riskAttributeScore - retVal;   }   return retVal; } "
"boolean isParagraph(){   return (this == P || this == IMPLIED || this == DT || this == H1 || this == H2 || this == H3 || this == H4 || this == H5 || this == H6); } "
"public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzServiceElement createXACMLAuthzServiceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzServiceElementImpl(); } "
"public static ObjectName createObjectName(String domain,ContextResourceLink resourceLink) throws MalformedObjectNameException {   ObjectName name=null;   String quotedResourceLinkName=ObjectName.quote(resourceLink.getName());   Object container=resourceLink.getNamingResources().getContainer();   if (container instanceof Server) {     name=new ObjectName(domain + \":type=ResourceLink\" + \",resourcetype=Global\"+ \",name=\"+ quotedResourceLinkName);   }  else   if (container instanceof Context) {     Context context=((Context)container);     ContextName cn=new ContextName(context.getName(),false);     Container host=context.getParent();     name=new ObjectName(domain + \":type=ResourceLink\" + \",resourcetype=Context,host=\"+ host.getName()+ \",context=\"+ cn.getDisplayName()+ \",name=\"+ quotedResourceLinkName);   }   return (name); } "
"public static void main(final String[] args){   DOMTestCase.doMain(removeAttributeNS01.class,args); } "
"private void writeConfigArchive(){   if (!maintainConfigArchive) {     return;   }   File archiveDirectory=new File(configFile.getParentFile(),CONFIG_ARCHIVE_DIR_NAME);   try {     createArchiveDirectoryIfNeeded(archiveDirectory);     File archiveFile=getNewArchiveFile(archiveDirectory);     copyCurrentConfigFileToArchiveFile(archiveFile);     removeOldArchiveFilesIfNeeded(archiveDirectory);   }  catch (  DirectoryException e) {     LocalizableMessage message=e.getMessageObject();     logger.error(message);     DirectoryServer.sendAlertNotification(this,ALERT_TYPE_CANNOT_WRITE_CONFIGURATION,message);   } } "
"public void delete(DeleteRequest request) throws LdapException {   addControls(request);   conn.getConnection().delete(request); } "
"public Hopper(BlockFace facingDirection,boolean isActive){   super(Material.HOPPER);   setFacingDirection(facingDirection);   setActive(isActive); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.WssRelV20Token10Element createWssRelV20Token10Element() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssRelV20Token10ElementImpl(); } "
"public StaticResponseHandler addHeader(final String key,final Expression<String> expression){   headers.add(key,expression);   return this; } "
"public org.omg.CORBA.Any to_any(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"to_any\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     return $self.to_any();   }   finally {     _servant_postinvoke($so);   } } "
"public void removePropertyChangeListener(PropertyChangeListener listener){   super.removePropertyChangeListener(listener); } "
"public SQLXML readSQLXML() throws SQLException {   return (SQLXML)getNextAttribute(); } "
"public String toString(){   String s=\"\";   Enumeration names=getAttributeNames();   while (names.hasMoreElements()) {     Object key=names.nextElement();     Object value=getAttribute(key);     if (value instanceof AttributeSet) {       s=s + key + \"=**AttributeSet** \";     }  else {       s=s + key + \"=\"+ value+ \" \";     }   }   return s; } "
"private static void defineTrustManager(KeyStore trustStore,String algorithm) throws SOAPBindingException {   boolean error=false;   try {     TrustManagerFactory tf=TrustManagerFactory.getInstance(algorithm);     tf.init(trustStore);     TrustManager[] defaultTrustManagers=tf.getTrustManagers();     String trustManagerDefinition=SystemPropertiesManager.get(SOAP_TRUST_MNGR_PROP);     if (trustManagerDefinition != null && trustManagerDefinition.length() > 0) {       tms=new TrustManager[defaultTrustManagers.length + 1];       tms[0]=(TrustManager)Class.forName(trustManagerDefinition).newInstance();       for (int i=0; i < defaultTrustManagers.length; i++) {         tms[i + 1]=defaultTrustManagers[i];       }     }  else {       tms=defaultTrustManagers;     }   }  catch (  ClassNotFoundException cnfe) {     Utils.debug.error(\"Client.defineTrustManager class not found: \",cnfe);     error=true;   } catch (  InstantiationException ie) {     Utils.debug.error(\"Client.defineTrustManager cannot instantiate: \",ie);     error=true;   } catch (  NoSuchAlgorithmException nsae) {     Utils.debug.error(\"Client.defineTrustManager no algorithm: \",nsae);     error=true;   } catch (  IllegalAccessException iae) {     Utils.debug.error(\"Client.defineTrustManager illegal access: \",iae);     error=true;   } catch (  KeyStoreException kse) {     Utils.debug.error(\"Client.defineTrustManager keystore: \",kse);     error=true;   }   if (error) {     String msg=Utils.bundle.getString(\"cannotDefineTrustManager\");     throw new SOAPBindingException(msg);   } } "
"public void testClearBitPositiveOutside2(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=191;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public synchronized void addHostAlias(String name,String alias){   MappedHost realHost=exactFind(hosts,name);   if (realHost == null) {     return;   }   alias=renameWildcardHost(alias);   MappedHost newAlias=new MappedHost(alias,realHost);   if (addHostAliasImpl(newAlias)) {     realHost.addAlias(newAlias);   } } "
"public KeyException(String msg){   super(msg); } "
"public void drawResultBitmap(Bitmap barcode){   resultBitmap=barcode;   invalidate(); } "
"public boolean canTraverseOutsideSubtree(){   return (null == m_arg0) ? false : super.canTraverseOutsideSubtree(); } "
"private String retrieveFullID(String resourceID,String objectID){   return resourceID + '/' + objectID; } "
"public void remove(Component child){   child.removeComponentListener(viewListener);   super.remove(child); } "
"boolean isNavigatable(int offset){   return true; } "
"public boolean accept(File f){   if (f.isHidden() || !f.canRead()) {     return false;   }   if (f.isDirectory()) {     return allowDirectories;   }   String ext=Utils.getExtension(f);   try {     if (SupportedFileFormat.valueOf(ext.toUpperCase()) != null) {       return true;     }   }  catch (  IllegalArgumentException iae) {     return false;   }   return false; } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static <T>T max(Collection<? extends T> coll,Comparator<? super T> comp){   if (comp == null)   return (T)max((Collection)coll);   Iterator<? extends T> i=coll.iterator();   T candidate=i.next();   while (i.hasNext()) {     T next=i.next();     if (comp.compare(next,candidate) > 0)     candidate=next;   }   return candidate; } "
"public final int length(){   return array.length; } "
"public Enumeration children(){   if (children == null) {     return EMPTY_ENUMERATION;   }  else {     return children.elements();   } } "
"public static WSFederationEntityInfo from(final String realm,final String entityID,final String role){   return new WSFederationEntityInfo(realm,entityID,role); } "
"private static boolean sendEntryIfMatches(SearchOperation searchOp,Entry entry,String cookie) throws DirectoryException {   if (matchBaseAndScopeAndFilter(searchOp,entry)) {     return searchOp.returnEntry(entry,getControls(cookie));   }   return true; } "
"public void create(String tokenID,String objName,Map attributes) throws SMSException, SSOException, RemoteException {   initialize();   if (debug.messageEnabled()) {     debug.message(\"SMSJAXRPCObjectImpl::create dn: \" + objName);   }   SMSEntry entry=new SMSEntry(getToken(tokenID),objName);   entry.setAttributes(attributes);   entry.save(); } "
"public com.sun.identity.saml2.jaxb.assertion.SubjectElement createSubjectElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectElementImpl(); } "
"public static LDAPReplicationDomain findDomain(DN dn,PluginOperation pluginOp){   if (pluginOp instanceof Operation) {     final Operation op=(Operation)pluginOp;     if (op.dontSynchronize()) {       return null;     }     for (Iterator<Control> it=op.getRequestControls().iterator(); it.hasNext(); ) {       Control c=it.next();       if (OID_REPLICATION_REPAIR_CONTROL.equals(c.getOID())) {         op.setSynchronizationOperation(true);         op.setDontSynchronize(true);         it.remove();         return null;       }     }   }   LDAPReplicationDomain domain=null;   DN temp=dn;   while (domain == null && temp != null) {     domain=domains.get(temp);     temp=DirectoryServer.getParentDNInSuffix(temp);   }   return domain; } "
"private void initializeTable(int capacity){   this.table=new Object[capacity * 2];   this.mask=table.length - 1;   this.clean=0;   this.maximumLoad=capacity * 2 / 3; } "
"private void validate(){   if (values != null)   return;   values=new Values();   Map<String,Object> defaults=((NimbusLookAndFeel)UIManager.getLookAndFeel()).getDefaultsForPrefix(prefix);   if (component != null) {     Object o=component.get().getClientProperty(\"Nimbus.Overrides\");     if (o instanceof UIDefaults) {       Object i=component.get().getClientProperty(\"Nimbus.Overrides.InheritDefaults\");       boolean inherit=i instanceof Boolean ? (Boolean)i : true;       UIDefaults d=(UIDefaults)o;       TreeMap<String,Object> map=new TreeMap<String,Object>();       for (      Object obj : d.keySet()) {         if (obj instanceof String) {           String key=(String)obj;           if (key.startsWith(prefix)) {             map.put(key,d.get(key));           }         }       }       if (inherit) {         defaults.putAll(map);       }  else {         defaults=map;       }     }   }   List<State> states=new ArrayList<State>();   Map<String,Integer> stateCodes=new HashMap<String,Integer>();   List<RuntimeState> runtimeStates=new ArrayList<RuntimeState>();   String statesString=(String)defaults.get(prefix + \".States\");   if (statesString != null) {     String s[]=statesString.split(\",\");     for (int i=0; i < s.length; i++) {       s[i]=s[i].trim();       if (!State.isStandardStateName(s[i])) {         String stateName=prefix + \".\" + s[i];         State customState=(State)defaults.get(stateName);         if (customState != null) {           states.add(customState);         }       }  else {         states.add(State.getStandardState(s[i]));       }     }     if (states.size() > 0) {       values.stateTypes=states.toArray(new State[states.size()]);     }     int code=1;     for (    State state : states) {       stateCodes.put(state.getName(),code);       code<<=1;     }   }  else {     states.add(State.Enabled);     states.add(State.MouseOver);     states.add(State.Pressed);     states.add(State.Disabled);     states.add(State.Focused);     states.add(State.Selected);     states.add(State.Default);     stateCodes.put(\"Enabled\",ENABLED);     stateCodes.put(\"MouseOver\",MOUSE_OVER);     stateCodes.put(\"Pressed\",PRESSED);     stateCodes.put(\"Disabled\",DISABLED);     stateCodes.put(\"Focused\",FOCUSED);     stateCodes.put(\"Selected\",SELECTED);     stateCodes.put(\"Default\",DEFAULT);   }   for (  String key : defaults.keySet()) {     String temp=key.substring(prefix.length());     if (temp.indexOf('\"') != -1 || temp.indexOf(':') != -1)     continue;     temp=temp.substring(1);     String stateString=null;     String property=null;     int bracketIndex=temp.indexOf(']');     if (bracketIndex < 0) {       property=temp;     }  else {       stateString=temp.substring(0,bracketIndex);       property=temp.substring(bracketIndex + 2);     }     if (stateString == null) {       if (\"contentMargins\".equals(property)) {         values.contentMargins=(Insets)defaults.get(key);       }  else       if (\"States\".equals(property)) {       }  else {         values.defaults.put(property,defaults.get(key));       }     }  else {       boolean skip=false;       int componentState=0;       String[] stateParts=stateString.split(\"\\\\+\");       for (      String s : stateParts) {         if (stateCodes.containsKey(s)) {           componentState|=stateCodes.get(s);         }  else {           skip=true;           break;         }       }       if (skip)       continue;       RuntimeState rs=null;       for (      RuntimeState s : runtimeStates) {         if (s.state == componentState) {           rs=s;           break;         }       }       if (rs == null) {         rs=new RuntimeState(componentState,stateString);         runtimeStates.add(rs);       }       if (\"backgroundPainter\".equals(property)) {         rs.backgroundPainter=getPainter(defaults,key);       }  else       if (\"foregroundPainter\".equals(property)) {         rs.foregroundPainter=getPainter(defaults,key);       }  else       if (\"borderPainter\".equals(property)) {         rs.borderPainter=getPainter(defaults,key);       }  else {         rs.defaults.put(property,defaults.get(key));       }     }   }   Collections.sort(runtimeStates,STATE_COMPARATOR);   values.states=runtimeStates.toArray(new RuntimeState[runtimeStates.size()]); } "
"boolean isVersionNewer(){   return VersionUtils.isVersionNewer(); } "
"public boolean isCompressed(){   return isCompressed; } "
"public void reset(){   super.reset();   if (null != m_iterator)   m_iterator.reset(); } "
"public static XMPDateTime convertToLocalTime(XMPDateTime dateTime){   long timeInMillis=dateTime.getCalendar().getTimeInMillis();   GregorianCalendar cal=new GregorianCalendar();   cal.setTimeInMillis(timeInMillis);   return new XMPDateTimeImpl(cal); } "
"public boolean stopEditing(JTree a){   boolean returnValue=((TreeUI)(uis.elementAt(0))).stopEditing(a);   for (int i=1; i < uis.size(); i++) {     ((TreeUI)(uis.elementAt(i))).stopEditing(a);   }   return returnValue; } "
"protected Attr[] sortAttributes(NamedNodeMap attrs){   int len=(attrs != null) ? attrs.getLength() : 0;   Attr[] array=new Attr[len];   for (int i=0; i < len; i++) {     array[i]=(Attr)attrs.item(i);   }   for (int i=0; i < len - 1; i++) {     String name=array[i].getNodeName();     int index=i;     for (int j=i + 1; j < len; j++) {       String curName=array[j].getNodeName();       if (curName.compareTo(name) < 0) {         name=curName;         index=j;       }     }     if (index != i) {       Attr temp=array[i];       array[i]=array[index];       array[index]=temp;     }   }   return array; } "
"public Set<N> neighbors(N node) throws NullPointerException {   return Collections.unmodifiableSet(theNeighbors.get(node)); } "
"private void logOutIfPossible(){   try {     openActionBarOverflowOrOptionsMenu(InstrumentationRegistry.getTargetContext());     onView(withText(R.string.log_out)).perform(click());   }  catch (  NoMatchingViewException e) {   } } "
"private boolean via_try_snap_smd_center(int p_layer){   ItemSelectionFilter selection_filter=new ItemSelectionFilter(ItemSelectionChoice.PINS);   Collection<BrdItem> picked_items=r_board.pick_items(prev_corner,p_layer,selection_filter);   BrdAbitPin found_smd_pin=null;   for (  BrdItem curr_item : picked_items) {     if (!(curr_item instanceof BrdAbitPin))     continue;     BrdAbitPin a_pin=(BrdAbitPin)curr_item;     if (!a_pin.shares_net_no(net_nos))     continue;     if (a_pin.first_layer() == p_layer && a_pin.last_layer() == p_layer) {       found_smd_pin=a_pin;       break;     }   }   if (found_smd_pin == null)   return false;   PlaPointInt pin_center=found_smd_pin.center_get();   if (itera_connect(prev_corner,pin_center)) {     prev_corner=pin_center;   }   return true; } "
"public DeviceRgb(){   this(0f,0f,0f); } "
"public boolean hasDynamicAttributes(){   return dynamicAttributes; } "
"private SearchScope(final int intValue,final String name,Enum searchScopeEnum){   this.intValue=intValue;   this.name=name;   this.searchScopeEnum=searchScopeEnum; } "
"public final void update(byte[] data) throws SignatureException {   update(data,0,data.length); } "
"public ServerNotActiveException(){ } "
"public boolean forget(String messageId){   MessagePromise messagePromise=cache.getIfPresent(messageId);   if (messagePromise != null) {     cache.invalidate(messageId);     return true;   }   return false; } "
"public static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){   Set returnOCs=removeOCs;   if (removeOCs != null && !removeOCs.isEmpty()) {     returnOCs=new HashSet();     Iterator itr1=origSet.iterator();     while (itr1.hasNext()) {       String origOC=(String)itr1.next();       Iterator itr2=removeOCs.iterator();       while (itr2.hasNext()) {         String removeOC=(String)itr2.next();         if (origOC.equalsIgnoreCase(removeOC)) {           returnOCs.add(origOC);           break;         }       }     }     origSet.removeAll(returnOCs);   }   return returnOCs; } "
"private static void startMonitoringAgent(SSOServerInfo svrInfo){   agentSvrInfo=svrInfo;   ssoServerID=svrInfo.serverID;   ssoSiteID=svrInfo.siteID;   ssoProtocol=svrInfo.serverProtocol;   ssoName=svrInfo.serverName;   ssoURI=svrInfo.serverURI;   ssoPort=svrInfo.serverPort;   dsIsEmbedded=svrInfo.isEmbeddedDS;   siteIdTable=svrInfo.siteIDTable;   serverIDTable=svrInfo.serverIDTable;   namingTable=svrInfo.namingTable;   startDate=svrInfo.startDate;   String classMethod=\"Agent.startMonitoringAgent:\";   if (debug.messageEnabled()) {     StringBuilder sb=new StringBuilder(\"Agent.startMonitoringAgent:ServerInfo:\\n\");     sb.append(\"  ServerID = \").append(ssoServerID).append(\"\\n\").append(\"  SiteID = \").append(ssoSiteID).append(\"\\n\").append(\"  ServerProtocol = \").append(ssoProtocol).append(\"\\n\").append(\"  ServerName = \").append(ssoName).append(\"\\n\").append(\"  ServerURI = \").append(ssoURI).append(\"\\n\").append(\"  IsEmbeddedDS = \").append(dsIsEmbedded).append(\"\\n\").append(\"\\n\");     String svrURL=namingTable.get(ssoServerID);     sb.append(\"  Naming table entry for serverID \").append(ssoServerID).append(\" is \");     if ((svrURL != null) && (svrURL.length() > 0)) {       sb.append(svrURL).append(\"\\n\");     }  else {       sb.append(\"NULL!\\n\");     }     svrURL=namingTable.get(ssoSiteID);     sb.append(\"  Naming table entry for siteID \").append(ssoSiteID).append(\" is \");     if ((svrURL != null) && (svrURL.length() > 0)) {       sb.append(svrURL).append(\"\\n\");     }  else {       sb.append(\"NULL!\\n\");     }     sb.append(\"    start date/time = \").append(startDate);     debug.message(sb.toString());     sb=new StringBuilder(classMethod);     if ((siteIdTable != null) && !siteIdTable.isEmpty()) {       sb.append(\"Site ID Table:\\n\");       for (      Map.Entry<String,String> entry : siteIdTable.entrySet()) {         String siteid=entry.getKey();         String svrid=siteIdTable.get(siteid);         String sURL=namingTable.get(siteid);         sb.append(\"  \").append(siteid).append('(').append(sURL).append(')').append(\" = \").append(svrid).append('\\n');       }     }  else {       sb.append(\"siteIdTable is null or empty\");     }     debug.message(sb.toString());     sb=new StringBuilder(classMethod);     if ((serverIDTable != null) && !serverIDTable.isEmpty()) {       sb.append(\"Server ID Table:\\n\");       for (      Map.Entry<String,String> entry : serverIDTable.entrySet()) {         sb.append(\"  server \").append(entry.getKey()).append(\" ==> svrid \").append(entry.getValue()).append(\"\\n\");       }     }  else {       sb.append(\"ServerIdTable is null or empty\");     }     debug.message(sb.toString());     sb=new StringBuilder(classMethod);     if ((namingTable != null) && !namingTable.isEmpty()) {       Set ks=namingTable.keySet();       sb.append(\"Naming Table:\\n\");       for (Iterator it=ks.iterator(); it.hasNext(); ) {         String svr=(String)it.next();         String svrid=(String)namingTable.get(svr);         sb.append(\"  key \").append(svr).append(\" ==> value \").append(svrid).append(\"\\n\");       }     }  else {       sb.append(\"NamingTable is null or empty\");     }     debug.message(sb.toString());   } } "
"public void putValue(String key,Object newValue){   Object oldValue=null;   if (key == \"enabled\") {     if (newValue == null || !(newValue instanceof Boolean)) {       newValue=false;     }     oldValue=enabled;     enabled=(Boolean)newValue;   }  else {     if (arrayTable == null) {       arrayTable=new ArrayTable();     }     if (arrayTable.containsKey(key))     oldValue=arrayTable.get(key);     if (newValue == null) {       arrayTable.remove(key);     }  else {       arrayTable.put(key,newValue);     }   }   firePropertyChange(key,oldValue,newValue); } "
"public Segment(char[] array,int offset,int count){   this.array=array;   this.offset=offset;   this.count=count;   partialReturn=false; } "
"private boolean handleConflictResolution(){   for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {     try {       SynchronizationProviderResult result=provider.handleConflictResolution(this);       if (!result.continueProcessing()) {         setResultCodeAndMessageNoInfoDisclosure(entry,result.getResultCode(),result.getErrorMessage());         setMatchedDN(result.getMatchedDN());         setReferralURLs(result.getReferralURLs());         return false;       }     }  catch (    DirectoryException de) {       logger.traceException(de);       logger.error(ERR_DELETE_SYNCH_CONFLICT_RESOLUTION_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));       setResponseData(de);       return false;     }   }   return true; } "
"@RequestMapping(value=\"/foos\",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> createFoo(@RequestBody Foo foo) throws URISyntaxException {   log.debug(\"REST request to save Foo : {}\",foo);   if (foo.getId() != null) {     return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(\"foo\",\"idexists\",\"A new foo cannot already have an ID\")).body(null);   }   Foo result=fooRepository.save(foo);   return ResponseEntity.created(new URI(\"/api/foos/\" + result.getId())).headers(HeaderUtil.createEntityCreationAlert(\"foo\",result.getId().toString())).body(result); } "
"protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){   return new SmallAttributeSet(a); } "
"SamlFederationHandler(Map<String,String> attributeMapping,String subjectMapping,String authnContextDelimiter,String authnContext,String sessionIndexMapping,String redirectURI,String logoutURI,String assertionConsumerEndpoint,String sPinitiatedSSOEndpoint,String singleLogoutEndpoint,String singleLogoutEndpointSoap,String sPinitiatedSLOEndpoint){   this.attributeMapping=Collections.unmodifiableMap(attributeMapping);   this.subjectMapping=subjectMapping;   this.authnContextDelimiter=authnContextDelimiter;   this.authnContext=authnContext;   this.sessionIndexMapping=sessionIndexMapping;   this.redirectURI=redirectURI;   this.logoutURI=logoutURI;   this.assertionConsumerEndpoint=assertionConsumerEndpoint;   this.sPinitiatedSSOEndpoint=sPinitiatedSSOEndpoint;   this.singleLogoutEndpoint=singleLogoutEndpoint;   this.singleLogoutEndpointSoap=singleLogoutEndpointSoap;   this.sPinitiatedSLOEndpoint=sPinitiatedSLOEndpoint; } "
"protected void verifyAndLinkRoleToGroup(SSOToken token,Guid[] membersGuid,String roleDN) throws AMException {   DN dn=DN.valueOf(roleDN);   String groupName=getGroupFromRoleDN(dn);   if (groupName != null) {     String orgDN=dn.parent().toString();     String groupDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + \"=\" + groupName+ \",ou=Groups,\"+ orgDN;     String groupRDN=NamingAttributeManager.getNamingAttribute(AMObject.GROUP) + \"=\" + groupName;     try {       AssignableDynamicGroup group=(AssignableDynamicGroup)UMSObject.getObject(token,new Guid(groupDN));       group.addMembers(membersGuid);       Attr attrs[]=new Attr[1];       attrs[0]=new Attr(\"adminrole\",groupRDN);       AttrSet attrSet=new AttrSet(attrs);       int numMembers=membersGuid.length;       for (int i=0; i < numMembers; i++) {         addAttributesToEntry(token,membersGuid[i].getDn(),attrSet);       }     }  catch (    EntryNotFoundException ex) {       debug.error(\"Compliance.verifyAndLinkRoleToGroup: \" + \"Admin groups are missing\");     } catch (    UMSException ue) {       debug.error(\"Compliance.\" + \"verifyAndLinkRoleToGroup(): \",ue);       throw new AMException(AMSDKBundle.getString(\"771\"),\"771\");     }   } } "
"public JsonValue toJson(){   JsonValue ret=json(object(field(\"_id\",getId()),field(\"archive\",getArchive()),field(\"status\",getStatus() != null ? getStatus().toString() : null),field(\"completedTasks\",getCompletedTasks()),field(\"totalTasks\",getTotalTasks()),field(\"startDate\",getStartDate()),field(\"userName\",getUserName())));   if (getStatusMessage() != null) {     ret.put(\"statusMessage\",getStatusMessage());   }   if (getEndDate() != null) {     ret.put(\"endDate\",getEndDate());   }   if (getNodeId() != null) {     ret.put(\"nodeId\",getNodeId());   }   ret.put(\"files\",files);   return ret; } "
"public void removeListDataListener(ListDataListener l){   listenerList.remove(ListDataListener.class,l); } "
"public static boolean isRegistered(String fontName){   return FontProgramFactory.isRegisteredFont(fontName); } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"@Override public boolean isShow(HttpServletRequest request) throws PortalException {   return true; } "
"static void exhaustInputStream(final InputStream inStream) throws IOException {   byte buffer[]=new byte[1024];   while (inStream.read(buffer) >= 0) {     ;   } } "
"public static String readPascalString(RandomAccessFile raf) throws IOException {   int len=raf.read();   byte[] buf=new byte[len + 1];   raf.read(buf,1,len);   buf[0]=(byte)len;   return bytesToPascalString(buf); } "
"public void stopNicely(){   run=false; } "
"public void append(byte[] src){   int length=src.length;   if (BUFFER_SIZE - (end - pos) < length) {     throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException(\"Could not accept income app data.\"));   }   if (end + length > BUFFER_SIZE) {     System.arraycopy(buffer,pos,buffer,0,end - pos);     end-=pos;     pos=0;   }   System.arraycopy(src,0,buffer,end,length);   end=end + length; } "
"public synchronized long size(){   return size; } "
"public JFileChooser(String currentDirectoryPath,FileSystemView fsv){   setup(fsv);   if (currentDirectoryPath == null) {     setCurrentDirectory(null);   }  else {     setCurrentDirectory(fileSystemView.createFileObject(currentDirectoryPath));   } } "
"public boolean willThrowExceptionIfKeyWasNotFound(){   return throwex; } "
"protected void release(PooledConnection con){   if (con == null)   return;   try {     con.lock();     if (con.release()) {       size.addAndGet(-1);       con.setHandler(null);     }   }   finally {     con.unlock();   }   if (waitcount.get() > 0) {     idle.offer(create(true));   } } "
"public void explicitOp(Context context,JsonValue sourceObject,JsonValue targetObject,Situation situation,ReconAction action,String reconId) throws SynchronizationException {   for (  String linkQualifier : getLinkQualifiers(sourceObject,null,false,context,null)) {     ExplicitSyncOperation linkOp=new ExplicitSyncOperation(this,context);     linkOp.setLinkQualifier(linkQualifier);     linkOp.init(sourceObject,targetObject,situation,action,reconId);     linkOp.sync();   } } "
"public ErodingFactor(final float factor){   this.factor=factor;   nextShrink=System.currentTimeMillis() + (long)(900000 * factor);   idleHighWaterMark=1; } "
"private void stopMonitoringPublisher(){   final MonitoringPublisher thread=monitoringPublisher.get();   if (thread != null && monitoringPublisher.compareAndSet(thread,null)) {     thread.shutdown();     thread.waitForShutdown();   } } "
"private void compilePredicates(int opPos,Expression[] predicates) throws TransformerException {   for (int i=0; OpCodes.OP_PREDICATE == getOp(opPos); i++) {     predicates[i]=predicate(opPos);     opPos=getNextOpPos(opPos);   } } "
"public com.sun.identity.liberty.ws.disco.jaxb11.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb11.impl.EmptyTypeImpl(); } "
"public boolean processEntryCacheConfig(SoftReferenceEntryCacheCfg configuration,boolean applyChanges,EntryCacheCommon.ConfigErrorHandler errorHandler){   DN newConfigEntryDN;   Set<SearchFilter> newIncludeFilters=null;   Set<SearchFilter> newExcludeFilters=null;   newConfigEntryDN=configuration.dn(); switch (errorHandler.getConfigPhase()) { case PHASE_INIT: case PHASE_ACCEPTABLE: case PHASE_APPLY:     newIncludeFilters=EntryCacheCommon.getFilters(configuration.getIncludeFilter(),ERR_CACHE_INVALID_INCLUDE_FILTER,errorHandler,newConfigEntryDN);   newExcludeFilters=EntryCacheCommon.getFilters(configuration.getExcludeFilter(),ERR_CACHE_INVALID_EXCLUDE_FILTER,errorHandler,newConfigEntryDN); break; } if (applyChanges && errorHandler.getIsAcceptable()) { setIncludeFilters(newIncludeFilters); setExcludeFilters(newExcludeFilters); registeredConfiguration=configuration; } return errorHandler.getIsAcceptable(); } "
"public static int sizeOfString(String string){   if (string == null) {     return 0;   }   return 4 + string.length() * 2; } "
"public void testConstructorSignBytesZeroNull3(){   byte aBytes[]={};   int aSign=1;   byte rBytes[]={0};   BigInteger aNumber=new BigInteger(aSign,aBytes);   byte resBytes[]=new byte[rBytes.length];   resBytes=aNumber.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",0,aNumber.signum()); } "
"public void flush() throws IOException {   out.flush(); } "
"private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {   if (!word.startsWith(ENCODED_TOKEN_MARKER)) {     throw new ParseException(\"Invalid RFC 2047 encoded-word: \" + word);   }   int charsetPos=word.indexOf('?',2);   if (charsetPos == -1) {     throw new ParseException(\"Missing charset in RFC 2047 encoded-word: \" + word);   }   String charset=word.substring(2,charsetPos).toLowerCase(Locale.ENGLISH);   int encodingPos=word.indexOf('?',charsetPos + 1);   if (encodingPos == -1) {     throw new ParseException(\"Missing encoding in RFC 2047 encoded-word: \" + word);   }   String encoding=word.substring(charsetPos + 1,encodingPos);   int encodedTextPos=word.indexOf(ENCODED_TOKEN_FINISHER,encodingPos + 1);   if (encodedTextPos == -1) {     throw new ParseException(\"Missing encoded text in RFC 2047 encoded-word: \" + word);   }   String encodedText=word.substring(encodingPos + 1,encodedTextPos);   if (encodedText.length() == 0) {     return \"\";   }   try {     ByteArrayOutputStream out=new ByteArrayOutputStream(encodedText.length());     byte[] decodedData;     if (encoding.equals(BASE64_ENCODING_MARKER)) {       decodedData=Base64.decodeBase64(encodedText);     }  else     if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {       byte[] encodedData=encodedText.getBytes(US_ASCII_CHARSET);       QuotedPrintableDecoder.decode(encodedData,out);       decodedData=out.toByteArray();     }  else {       throw new UnsupportedEncodingException(\"Unknown RFC 2047 encoding: \" + encoding);     }     return new String(decodedData,javaCharset(charset));   }  catch (  IOException e) {     throw new UnsupportedEncodingException(\"Invalid RFC 2047 encoding\");   } } "
"@Override public void init(ServletConfig config) throws ServletException {   try {     hostName=stringValue(config,HOST);     port=Integer.valueOf(stringValue(config,PORT));     userDN=stringValue(config,USERDN);     userPassword=stringValue(config,USERPWD);     useSSL=booleanValue(config,USESSL);     useStartTLS=booleanValue(config,USESTARTTLS);     trustStorePathValue=stringValue(config,TRUSTSTOREPATH);     trustStorePasswordValue=stringValue(config,TRUSTSTOREPASSWORD);     trustAll=booleanValue(config,TRUSTALLCERTS);     useHTTPAuthzID=booleanValue(config,USEHTTPAUTHZID);     Enumeration<String> names=config.getServletContext().getInitParameterNames();     while (names.hasMoreElements()) {       String name=names.nextElement();       if (name.startsWith(EXOPSTRINGPREFIX) && Boolean.valueOf(config.getServletContext().getInitParameter(name))) {         exopStrings.add(name.substring(EXOPSTRINGPREFIX.length()));       }     }     System.setProperty(\"mapAnyUriToUri\",\"true\");     if (jaxbContext == null) {       jaxbContext=JAXBContext.newInstance(PKG_NAME,getClass().getClassLoader());     }     if (schema == null) {       URL url=getClass().getResource(\"/resources/DSMLv2.xsd\");       if (url != null) {         SchemaFactory sf=SchemaFactory.newInstance(W3C_XML_SCHEMA_NS_URI);         schema=sf.newSchema(url);       }     }     DirectoryServer.bootstrapClient();   }  catch (  Exception je) {     je.printStackTrace();     throw new ServletException(je.getMessage());   } } "
"public boolean isPasswordResetEnabled(){   return pwResetEnable; } "
"@Override public void memberAdded(Member member){ } "
"public XalanDOMTestDocumentBuilderFactory(DocumentBuilderFactory baseFactory,DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {   super(baseFactory,settings); } "
"public boolean bool(){   return false; } "
"public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_typecode\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.insert_typecode(value);   }   finally {     _servant_postinvoke($so);   } } "
"public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException, AMConsoleException {   removePageSessionAttribute(PAGE_MODIFIED);   AMViewBeanBase vb=getPreviousPage();   passPgSessionMap(vb);   vb.forwardTo(getRequestContext()); } "
"public boolean isReadable(){   return isReadable; } "
"private void switchOverToHash(int numAtts){   for (int index=0; index < numAtts; index++) {     String qName=super.getQName(index);     Integer i=new Integer(index);     m_indexFromQName.put(qName,i);     String uri=super.getURI(index);     String local=super.getLocalName(index);     m_buff.setLength(0);     m_buff.append('{').append(uri).append('}').append(local);     String key=m_buff.toString();     m_indexFromQName.put(key,i);   } } "
"@Override @SuppressWarnings(\"unchecked\") public V put(K key,V value){   return putImpl(key,value); } "
"public com.sun.identity.liberty.ws.common.jaxb.secext.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.ReferenceElementImpl(); } "
"public void paint(Graphics g,Shape allocation){   Rectangle a=(Rectangle)allocation;   painter.paint(g,a.x,a.y,a.width,a.height,this);   super.paint(g,a); } "
"public float convertToGb(long valInBytes){   return (float)valInBytes / (BYTEFACTOR * BYTEFACTOR * BYTEFACTOR); } "
"public synchronized void enableAllObjectNames(){   RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),\"enableAllObjectNames\");   selectedNames=null;   deselectedNames=new Vector<ObjectName>();   RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),\"enableAllObjectNames\");   return; } "
"private int readMethod(final ClassVisitor classVisitor,final Context context,int u){   char[] c=context.buffer;   context.access=readUnsignedShort(u);   context.name=readUTF8(u + 2,c);   context.desc=readUTF8(u + 4,c);   u+=6;   int code=0;   int exception=0;   String[] exceptions=null;   String signature=null;   int methodParameters=0;   int anns=0;   int ianns=0;   int tanns=0;   int itanns=0;   int dann=0;   int mpanns=0;   int impanns=0;   int firstAttribute=u;   Attribute attributes=null;   for (int i=readUnsignedShort(u); i > 0; --i) {     String attrName=readUTF8(u + 2,c);     if (\"Code\".equals(attrName)) {       if ((context.flags & SKIP_CODE) == 0) {         code=u + 8;       }     }  else     if (\"Exceptions\".equals(attrName)) {       exceptions=new String[readUnsignedShort(u + 8)];       exception=u + 10;       for (int j=0; j < exceptions.length; ++j) {         exceptions[j]=readClass(exception,c);         exception+=2;       }     }  else     if (SIGNATURES && \"Signature\".equals(attrName)) {       signature=readUTF8(u + 8,c);     }  else     if (\"Deprecated\".equals(attrName)) {       context.access|=Opcodes.ACC_DEPRECATED;     }  else     if (ANNOTATIONS && \"RuntimeVisibleAnnotations\".equals(attrName)) {       anns=u + 8;     }  else     if (ANNOTATIONS && \"RuntimeVisibleTypeAnnotations\".equals(attrName)) {       tanns=u + 8;     }  else     if (ANNOTATIONS && \"AnnotationDefault\".equals(attrName)) {       dann=u + 8;     }  else     if (\"Synthetic\".equals(attrName)) {       context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;     }  else     if (ANNOTATIONS && \"RuntimeInvisibleAnnotations\".equals(attrName)) {       ianns=u + 8;     }  else     if (ANNOTATIONS && \"RuntimeInvisibleTypeAnnotations\".equals(attrName)) {       itanns=u + 8;     }  else     if (ANNOTATIONS && \"RuntimeVisibleParameterAnnotations\".equals(attrName)) {       mpanns=u + 8;     }  else     if (ANNOTATIONS && \"RuntimeInvisibleParameterAnnotations\".equals(attrName)) {       impanns=u + 8;     }  else     if (\"MethodParameters\".equals(attrName)) {       methodParameters=u + 8;     }  else {       Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);       if (attr != null) {         attr.next=attributes;         attributes=attr;       }     }     u+=6 + readInt(u + 4);   }   u+=2;   MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);   if (mv == null) {     return u;   }   if (WRITER && mv instanceof MethodWriter) {     MethodWriter mw=(MethodWriter)mv;     if (mw.cw.cr == this && signature == mw.signature) {       boolean sameExceptions=false;       if (exceptions == null) {         sameExceptions=mw.exceptionCount == 0;       }  else       if (exceptions.length == mw.exceptionCount) {         sameExceptions=true;         for (int j=exceptions.length - 1; j >= 0; --j) {           exception-=2;           if (mw.exceptions[j] != readUnsignedShort(exception)) {             sameExceptions=false;             break;           }         }       }       if (sameExceptions) {         mw.classReaderOffset=firstAttribute;         mw.classReaderLength=u - firstAttribute;         return u;       }     }   }   if (methodParameters != 0) {     for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {       mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));     }   }   if (ANNOTATIONS && dann != 0) {     AnnotationVisitor dv=mv.visitAnnotationDefault();     readAnnotationValue(dann,c,null,dv);     if (dv != null) {       dv.visitEnd();     }   }   if (ANNOTATIONS && anns != 0) {     for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {       v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));     }   }   if (ANNOTATIONS && ianns != 0) {     for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {       v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));     }   }   if (ANNOTATIONS && tanns != 0) {     for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {       v=readAnnotationTarget(context,v);       v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));     }   }   if (ANNOTATIONS && itanns != 0) {     for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {       v=readAnnotationTarget(context,v);       v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));     }   }   if (ANNOTATIONS && mpanns != 0) {     readParameterAnnotations(mv,context,mpanns,true);   }   if (ANNOTATIONS && impanns != 0) {     readParameterAnnotations(mv,context,impanns,false);   }   while (attributes != null) {     Attribute attr=attributes.next;     attributes.next=null;     mv.visitAttribute(attributes);     attributes=attr;   }   if (code != 0) {     mv.visitCode();     readCode(mv,context,code);   }   mv.visitEnd();   return u; } "
"public static boolean requiresUnsynchronization(byte[] abySource){   for (int i=0; i < abySource.length - 1; i++) {     if (((abySource[i] & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) && ((abySource[i + 1] & MPEGFrameHeader.SYNC_BYTE2) == MPEGFrameHeader.SYNC_BYTE2)) {       if (logger.isLoggable(Level.FINEST)) {         logger.finest(\"Unsynchronisation required found bit at:\" + i);       }       return true;     }   }   return false; } "
"public void endPrefixMapping(String prefix){ } "
"public void resetCount(){   mProgress=0.0f;   mTargetProgress=0.0f;   invalidate(); } "
"private static void assertEcho(String result,String expected){   Assert.assertTrue(result,result.indexOf(\"<p>\" + expected + \"</p>\") > 0); } "
"public void disableVertexAttribute(String name){   int location=fetchAttributeLocation(name);   if (location == -1)   return;   GLES20.glDisableVertexAttribArray(location); } "
"public boolean isErrorEnabled(){   return (getLogger().isLoggable(Level.SEVERE)); } "
"public void completeComputing(){   StringBuilder mds=new StringBuilder();   for (  Entry<Integer,ServerState> entry : ldapStates.entrySet()) {     clear(mds);     final Integer lsiServerId=entry.getKey();     final ServerState lsiState=entry.getValue();     long lsiMissingChanges=computeMissingChanges(mds,lsiServerId,lsiState);     if (logger.isTraceEnabled()) {       mds.append(\"=\").append(lsiMissingChanges);     }     this.missingChanges.put(lsiServerId,lsiMissingChanges);     logger.trace(\"Complete monitor data : Missing changes    (%5d)=%s\",lsiServerId,mds);   }   for (  Entry<Integer,ServerState> entry : rsStates.entrySet()) {     clear(mds);     final Integer lsiServerId=entry.getKey();     final ServerState lsiState=entry.getValue();     long lsiMissingChanges=computeMissingChanges(mds,null,lsiState);     if (logger.isTraceEnabled()) {       mds.append(\"=\").append(lsiMissingChanges);     }     this.missingChangesRS.put(lsiServerId,lsiMissingChanges);     logger.trace(\"Complete monitor data : Missing changes RS (%5d)=%s\",lsiServerId,mds);   } } "
"public static void logModifyDNRequest(ModifyDNOperation modifyDNOperation){   for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {     publisher.logModifyDNRequest(modifyDNOperation);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrappendchild5.class,args); } "
"public void duplicate(MessageBytes src) throws IOException { switch (src.getType()) { case MessageBytes.T_BYTES:     type=T_BYTES;   ByteChunk bc=src.getByteChunk(); byteC.allocate(2 * bc.getLength(),-1); byteC.append(bc); break; case MessageBytes.T_CHARS: type=T_CHARS; CharChunk cc=src.getCharChunk(); charC.allocate(2 * cc.getLength(),-1); charC.append(cc); break; case MessageBytes.T_STR: type=T_STR; String sc=src.getString(); this.setString(sc); break; } setCharset(src.getCharset()); } "
"private String stringifyIP(byte[] ip){   String temp=\"\";   for (int i=0; i < ip.length / 2; i++) {     temp+=Integer.toString(ip[i] & 0x00FF) + \".\";   }   temp=temp.substring(0,temp.length() - 1);   temp+=\"/\";   for (int i=ip.length / 2; i < ip.length; i++) {     temp+=Integer.toString(ip[i] & 0x00FF) + \".\";   }   temp=temp.substring(0,temp.length() - 1);   return temp; } "
"public com.sun.identity.liberty.ws.common.jaxb.assertion.NameIdentifierElement createNameIdentifierElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.NameIdentifierElementImpl(); } "
"public String generateNamedAttributeJspFragment(Node.NamedAttribute n,String tagHandlerVar) throws JasperException {   String varName=n.getTemporaryVariableName();   out.printin(\"javax.servlet.jsp.tagext.JspFragment \" + varName + \" = \");   generateJspFragment(n,tagHandlerVar);   out.println(\";\");   return varName; } "
"private TemplateTag parseAttributeTag(final String tagString,final Branch branch,final Template template,final int lineNumber,final List<LocalizableMessage> warnings) throws DecodeException {   final StringTokenizer tokenizer=new StringTokenizer(tagString,\":\");   final List<String> args=new ArrayList<>();   while (tokenizer.hasMoreTokens()) {     args.add(tokenizer.nextToken());   }   final String[] arguments=args.toArray(new String[args.size()]);   final AttributeValueTag tag=new AttributeValueTag();   if (branch != null) {     tag.initializeForBranch(schema,this,branch,arguments,lineNumber,warnings);   }  else {     tag.initializeForTemplate(schema,this,template,arguments,lineNumber,warnings);   }   return tag; } "
"static String readQuotedToken(StringReader input) throws IOException {   StringBuilder result=new StringBuilder();   boolean quoted=false;   int c=skipLws(input,false);   if (c == '\"') {     quoted=true;   }  else   if (c == -1 || !isToken(c)) {     return null;   }  else {     result.append((char)c);   }   c=input.read();   while (c != -1 && isToken(c)) {     result.append((char)c);     c=input.read();   }   if (quoted) {     if (c != '\"') {       return null;     }   }  else {     input.skip(-1);   }   if (c != -1 && result.length() == 0) {     return null;   }  else {     return result.toString();   } } "
"protected static boolean isCachingEnabled(){   return cachingEnabled; } "
"protected static String removeQuotes(String quotedString){   return removeQuotes(quotedString,false); } "
"public static String encryptLocal(String clearText){   return encode(clearText,localEncryptor); } "
"public static void shuffle(List<?> list,Random random){   @SuppressWarnings(\"unchecked\") final List<Object> objectList=(List<Object>)list;   if (list instanceof RandomAccess) {     for (int i=objectList.size() - 1; i > 0; i--) {       int index=random.nextInt(i + 1);       objectList.set(index,objectList.set(i,objectList.get(index)));     }   }  else {     Object[] array=objectList.toArray();     for (int i=array.length - 1; i > 0; i--) {       int index=random.nextInt(i + 1);       Object temp=array[i];       array[i]=array[index];       array[index]=temp;     }     int i=0;     ListIterator<Object> it=objectList.listIterator();     while (it.hasNext()) {       it.next();       it.set(array[i++]);     }   } } "
"private void dismissSaveRecordingDialog(){   FragmentTransaction ft=mFragmentManager.beginTransaction();   Fragment fragment=mFragmentManager.findFragmentByTag(TAG_SAVE_RECORDINGD);   if (null != fragment) {     ft.remove(fragment);     ft.commitAllowingStateLoss();   } } "
"public static TestSuite suite() throws Exception {   Class testClass=ClassLoader.getSystemClassLoader().loadClass(\"org.w3c.domts.level3.validation.alltests\");   Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});   DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);   Object test=testConstructor.newInstance(new Object[]{factory});   return new JUnitTestSuiteAdapter((DOMTestSuite)test); } "
"public StoreDescription unregisterDescription(StoreDescription desc){   String key=desc.getId();   if (key == null || \"\".equals(key))   key=desc.getTagClass();   return descriptors.remove(key); } "
"public boolean reset(){   boolean wasReset=false;   if (super.reset()) {     resetToSAXHandler();     wasReset=true;   }   return wasReset; } "
"@Override public boolean isFullSpan(){   return true; } "
"public void resetOriginals(){   mStartingStartTrim=0;   mStartingEndTrim=0;   mStartingRotation=0;   setStartTrim(0);   setEndTrim(0);   setRotation(0); } "
"protected MouseMotionListener createMouseMotionListener(){   return getHandler(); } "
"public void init(KeyGenerationParameters param){   this.random=param.getRandom();   this.strength=(param.getStrength() + 7) / 8; } "
"@DataProvider(name=\"createParentAndRDNTestData\") public Object[][] createParentAndRDNTestData(){   return new Object[][]{{\"\",null,null},{\"dc=com\",\"\",\"dc=com\"},{\"dc=opendj,dc=com\",\"dc=com\",\"dc=opendj\"},{\"dc=world,dc=opendj,dc=com\",\"dc=opendj,dc=com\",\"dc=world\"},{\"dc=hello,dc=world,dc=opendj,dc=com\",\"dc=world,dc=opendj,dc=com\",\"dc=hello\"}}; } "
"protected int calculateNewPagerPosition(int newActiveElement){   newActiveElement++;   if (newActiveElement <= 0)   newActiveElement=1;   int pagerActiveElemCenterPosX=mPagerElementActiveSize / 2 + newActiveElement * mPagerElementLeftMargin + (newActiveElement - 1) * (mPagerElementNormalSize + mPagerElementRightMargin);   return mRootLayout.getWidth() / 2 - pagerActiveElemCenterPosX; } "
"public Result useInteractedBlock(){   return useClickedBlock; } "
"public void exprSetParent(ExpressionNode n){   super.exprSetParent(n);   int nArgs=m_argVec.size();   for (int i=0; i < nArgs; i++) {     Expression arg=(Expression)m_argVec.elementAt(i);     arg.exprSetParent(n);   } } "
"public AuthenticationInfoParser(String authenticationInfo){   super(authenticationInfo); } "
"public SIPHeader parse() throws ParseException {   dbg_enter(\"parse\");   try {     headerName(TokenTypes.AUTHORIZATION);     Authorization auth=new Authorization();     super.parse(auth);     return auth;   }   finally {     dbg_leave(\"parse\");   } } "
"private final void primitiveRightShift(int n){   int[] val=value;   int n2=32 - n;   for (int i=offset + intLen - 1, c=val[i]; i > offset; i--) {     int b=c;     c=val[i - 1];     val[i]=(c << n2) | (b >>> n);   }   val[offset]>>>=n; } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   try {     logger.info(\"shootme: got an Invite sending Trying\");     ServerTransaction st=requestEvent.getServerTransaction();     if (st == null) {       logger.info(\"null server tx -- getting a new one\");       st=sipProvider.getNewServerTransaction(request);     }     logger.info(\"getNewServerTransaction : \" + st);     String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();     this.serverTxTable.put(txId,st);     Response response=messageFactory.createResponse(Response.TRYING,request);     ListeningPoint lp=sipProvider.getListeningPoint(transport);     int myPort=lp.getPort();     Address address=addressFactory.createAddress(\"Shootme <sip:\" + myAddress + \":\"+ myPort+ \">\");     int timeToSleep=(int)(Math.random() * 1000);     Thread.sleep(timeToSleep);     st.sendResponse(response);     Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);     ContactHeader contactHeader=headerFactory.createContactHeader(address);     response.addHeader(contactHeader);     ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);     String toTag;     if (((ToHeader)ringingResponse.getHeader(ToHeader.NAME)).getTag() == null) {       toTag=new Integer(new Random().nextInt()).toString();       toHeader.setTag(toTag);     }  else {       toTag=((ToHeader)ringingResponse.getHeader(ToHeader.NAME)).getTag();     }     if (sendRinging) {       ringingResponse.addHeader(contactHeader);       st.sendResponse(ringingResponse);     }     Dialog dialog=st.getDialog();     dialog.setApplicationData(st);     this.inviteSeen=true;     this.sendInviteOK(requestEvent,st,toTag);   }  catch (  Exception ex) {     ex.printStackTrace();     System.exit(0);   } } "
"private boolean mask_handled(Object src){   for (  CheckboxAndBitmask arow : mask_list) {     if (arow.checkbox != src)     continue;     if ((stat.debug_mask & arow.bitmask) != 0)     stat.debug_mask&=~arow.bitmask;  else     stat.debug_mask|=arow.bitmask;     return true;   }   return false; } "
"public String toGnuStepASCIIPropertyList(){   StringBuilder ascii=new StringBuilder();   toASCIIGnuStep(ascii,0);   ascii.append(NEWLINE);   return ascii.toString(); } "
"public static Bitmap createIconBitmap(String packageName,String resourceName,Context context){   PackageManager packageManager=context.getPackageManager();   try {     Resources resources=packageManager.getResourcesForApplication(packageName);     if (resources != null) {       final int id=resources.getIdentifier(resourceName,null,null);       return createIconBitmap(resources.getDrawableForDensity(id,LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi),context);     }   }  catch (  Exception e) {   }   return null; } "
"private SortedSet<String> generateOtherReplicationServerUrls(int excludedRsPort,int totalNbRS){   SortedSet<String> replServers=new TreeSet<>();   if (totalNbRS >= 2) {     addIfNotSame(replServers,rsPorts[0],excludedRsPort);     addIfNotSame(replServers,rsPorts[1],excludedRsPort);     if (totalNbRS >= 3) {       addIfNotSame(replServers,rsPorts[2],excludedRsPort);       if (totalNbRS >= 4) {         addIfNotSame(replServers,rsPorts[3],excludedRsPort);       }     }   }   return replServers; } "
"public static Position[] simplify(Position[] points,double tolerance){   return simplify(points,tolerance,SIMPLIFY_DEFAULT_HIGHEST_QUALITY); } "
"public ClientDetectionDefaultImpl(){ } "
"static Object internalMemberNameEnsureInit(Object mh){   DirectMethodHandle dmh=(DirectMethodHandle)mh;   dmh.ensureInitialized();   return dmh.member; } "
"public void printStackTrace(){   super.printStackTrace(); } "
"public final void update(byte[] data,int off,int len) throws SignatureException {   if (state == SIGN || state == VERIFY) {     if (data == null) {       throw new IllegalArgumentException(\"data is null\");     }     if (off < 0 || len < 0) {       throw new IllegalArgumentException(\"off or len is less than 0\");     }     if (data.length - off < len) {       throw new IllegalArgumentException(\"data too small for specified offset and length\");     }     engineUpdate(data,off,len);   }  else {     throw new SignatureException(\"object not initialized for \" + \"signature or verification\");   } } "
"@NonNull public final Agera take(long limit){   return new AgeraTake(this,limit); } "
"private BaseDnRegistry(boolean testOnly){   this.testOnly=testOnly; } "
"@Override public void encodeEnd(final FacesContext context) throws IOException {   encodeAll(context); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapnumberofnodes.class,args); } "
"public void doInitBody() throws JspException { } "
"public void test_read_$CII_Exception() throws IOException {   pbr=new PushbackReader(new StringReader(pbString),10);   char[] nullCharArray=null;   char[] charArray=new char[10];   try {     pbr.read(nullCharArray,0,1);     fail(\"should throw NullPointerException\");   }  catch (  NullPointerException e) {   }   try {     pbr.read(charArray,0,-1);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     pbr.read(charArray,-1,0);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     pbr.read(charArray,charArray.length + 1,0);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     pbr.read(charArray,charArray.length,1);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     pbr.read(charArray,1,charArray.length);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     pbr.read(charArray,0,charArray.length + 1);     fail(\"should throw IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   pbr.close();   try {     pbr.read(charArray,0,1);     fail(\"should throw IOException\");   }  catch (  IOException e) {   } } "
"public PushbackInputStream(InputStream in){   this(in,1); } "
"public boolean containsEntryID(ReadableTransaction txn,EntryID entryID){   checkNotNull(txn,\"txn must not be null\");   checkNotNull(entryID,\"entryID must not be null\");   try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(getName())){     return cursor.positionToKey(entryID.toByteString());   }  } "
"private void createLayout(){   GridBagConstraints gbc=new GridBagConstraints();   gbc.anchor=GridBagConstraints.WEST;   gbc.gridx=0;   gbc.gridy=0;   gbc.weightx=0.0;   gbc.gridwidth=1;   gbc.fill=GridBagConstraints.NONE;   dnLabel=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_BIND_DN_LABEL.get());   add(dnLabel,gbc);   gbc.insets.left=10;   gbc.gridx=1;   dn=Utilities.createTextField(\"cn=Directory Manager\",20);   gbc.weightx=1.0;   gbc.fill=GridBagConstraints.HORIZONTAL;   add(dn,gbc);   gbc.insets.top=10;   gbc.insets.left=0;   gbc.gridx=0;   gbc.gridy++;   gbc.weightx=0.0;   gbc.gridwidth=1;   gbc.fill=GridBagConstraints.NONE;   pwdLabel=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_BIND_PASSWORD_LABEL.get());   add(pwdLabel,gbc);   gbc.insets.left=10;   gbc.gridx=1;   pwd=Utilities.createPasswordField();   gbc.weightx=1.0;   gbc.fill=GridBagConstraints.HORIZONTAL;   add(pwd,gbc);   addBottomGlue(gbc); } "
"public static Builder create(final Context context){   if (SDK_INT >= ICE_CREAM_SANDWICH)   return new Builder(context,THEME_HOLO_LIGHT);  else   return new Builder(context); } "
"public void testSetScaleSame(){   String a=\"1231212478987482988429808779810457634781384756794987\";   int aScale=18;   int newScale=18;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=aNumber.setScale(newScale);   assertTrue(\"incorrect scale\",bNumber.scale() == newScale);   assertTrue(\"incorrect value\",bNumber.equals(aNumber)); } "
"protected void forwardUpdateToView(View v,DocumentEvent e,Shape a,ViewFactory f){   v.setParent(this);   super.forwardUpdateToView(v,e,a,f); } "
"public void initializeEntryCache() throws ConfigException {   RootCfg rootConfiguration=serverContext.getRootConfig();   rootConfiguration.addEntryCacheAddListener(this);   rootConfiguration.addEntryCacheDeleteListener(this);   Entry entryCacheBase;   try {     DN configEntryDN=DN.valueOf(ConfigConstants.DN_ENTRY_CACHE_BASE);     entryCacheBase=DirectoryServer.getConfigEntry(configEntryDN);   }  catch (  Exception e) {     logger.traceException(e);     logger.warn(WARN_CONFIG_ENTRYCACHE_NO_CONFIG_ENTRY);     return;   }   if (entryCacheBase == null) {     logger.error(WARN_CONFIG_ENTRYCACHE_NO_CONFIG_ENTRY);     return;   }   for (  String cacheName : rootConfiguration.listEntryCaches()) {     EntryCacheCfg configuration=rootConfiguration.getEntryCache(cacheName);     configuration.addChangeListener(this);     if (!cacheOrderMap.isEmpty() && cacheOrderMap.containsKey(configuration.getCacheLevel())) {       logger.error(ERR_CONFIG_ENTRYCACHE_CONFIG_LEVEL_NOT_ACCEPTABLE,configuration.dn(),configuration.getCacheLevel());       continue;     }     if (configuration.isEnabled()) {       String className=configuration.getJavaClass();       try {         loadAndInstallEntryCache(className,configuration);       }  catch (      InitializationException ie) {         logger.error(ie.getMessageObject());       }     }   } } "
"public Set<AclEntryPermission> permissions(){   return new HashSet<AclEntryPermission>(perms); } "
"public void test_isEqual$B$B(){   assertTrue(\"isEqual is not correct\",MessageDigest.isEqual(AR1,AR2)); } "
"public int hashCode(){   return name.hashCode(); } "
"private NSObject parseObject(int obj) throws PropertyListFormatException, UnsupportedEncodingException {   int offset=offsetTable[obj];   byte type=bytes[offset];   int objType=(type & 0xF0) >> 4;   int objInfo=(type & 0x0F); switch (objType) { case 0x0: { switch (objInfo) { case 0x0: {           return null;         } case 0x8: {         return new NSNumber(false);       } case 0x9: {       return new NSNumber(true);     } case 0xC: {     throw new UnsupportedOperationException(\"The given binary property list contains a URL object. Parsing of this object type is not yet implemented.\");   } case 0xD: {   throw new UnsupportedOperationException(\"The given binary property list contains a URL object. Parsing of this object type is not yet implemented.\"); } case 0xE: { throw new UnsupportedOperationException(\"The given binary property list contains a UUID object. Parsing of this object type is not yet implemented.\"); } default : { throw new PropertyListFormatException(\"The given binary property list contains an object of unknown type (\" + objType + \")\"); } } } case 0x1: { int length=(int)Math.pow(2,objInfo); return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.INTEGER); } case 0x2: { int length=(int)Math.pow(2,objInfo); return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.REAL); } case 0x3: { if (objInfo != 0x3) { throw new PropertyListFormatException(\"The given binary property list contains a date object of an unknown type (\" + objInfo + \")\"); } return new NSDate(bytes,offset + 1,offset + 9); } case 0x4: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int dataOffset=lengthAndOffset[1]; return new NSData(copyOfRange(bytes,offset + dataOffset,offset + dataOffset + length)); } case 0x5: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int strOffset=lengthAndOffset[1]; return new NSString(bytes,offset + strOffset,offset + strOffset + length,\"ASCII\"); } case 0x6: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int characters=lengthAndOffset[0]; int strOffset=lengthAndOffset[1]; int length=characters * 2; return new NSString(bytes,offset + strOffset,offset + strOffset + length,\"UTF-16BE\"); } case 0x7: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int strOffset=lengthAndOffset[1]; int characters=lengthAndOffset[0]; int length=calculateUtf8StringLength(bytes,offset + strOffset,characters); return new NSString(bytes,offset + strOffset,offset + strOffset + length,\"UTF-8\"); } case 0x8: { int length=objInfo + 1; return new UID(String.valueOf(obj),copyOfRange(bytes,offset + 1,offset + 1 + length)); } case 0xA: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int arrayOffset=lengthAndOffset[1]; NSArray array=new NSArray(length); for (int i=0; i < length; i++) { int objRef=(int)parseUnsignedInt(bytes,offset + arrayOffset + i * objectRefSize,offset + arrayOffset + (i + 1) * objectRefSize); array.setValue(i,parseObject(objRef)); } return array; } case 0xB: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int contentOffset=lengthAndOffset[1]; NSSet set=new NSSet(true); for (int i=0; i < length; i++) { int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize); set.addObject(parseObject(objRef)); } return set; } case 0xC: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int contentOffset=lengthAndOffset[1]; NSSet set=new NSSet(); for (int i=0; i < length; i++) { int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize); set.addObject(parseObject(objRef)); } return set; } case 0xD: { int[] lengthAndOffset=readLengthAndOffset(objInfo,offset); int length=lengthAndOffset[0]; int contentOffset=lengthAndOffset[1]; NSDictionary dict=new NSDictionary(); for (int i=0; i < length; i++) { int keyRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize); int valRef=(int)parseUnsignedInt(bytes,offset + contentOffset + (length * objectRefSize)+ i * objectRefSize,offset + contentOffset + (length * objectRefSize)+ (i + 1) * objectRefSize); NSObject key=parseObject(keyRef); NSObject val=parseObject(valRef); assert key != null; dict.put(key.toString(),val); } return dict; } default : { throw new PropertyListFormatException(\"The given binary property list contains an object of unknown type (\" + objType + \")\"); } } } "
"DateTimeParseContext copy(){   DateTimeParseContext newContext=new DateTimeParseContext(formatter);   newContext.caseSensitive=caseSensitive;   newContext.strict=strict;   return newContext; } "
"public final boolean isTraceEnabled(){   return false; } "
"private boolean isId3v2Tag() throws IOException {   byte buf[]=new byte[3];   raf.read(buf);   String id=new String(buf,\"ASCII\");   return \"ID3\".equals(id); } "
"private void postToTarget(RequestSecurityTokenResponse rstr,String targetURL) throws IOException, ServletException {   String classMethod=\"IDPSSOUtil.postToTarget: \";   String wresult=rstr.toString();   if (debug.messageEnabled()) {     debug.message(classMethod + \"wresult before encoding: \" + wresult);   }   request.setAttribute(WSFederationConstants.POST_ACTION,ESAPI.encoder().encodeForHTML(targetURL));   request.setAttribute(WSFederationConstants.POST_WA,WSFederationConstants.WSIGNIN10);   request.setAttribute(WSFederationConstants.POST_WCTX,ESAPI.encoder().encodeForHTML(wctx));   request.setAttribute(WSFederationConstants.POST_WRESULT,ESAPI.encoder().encodeForHTML(wresult));   request.getRequestDispatcher(\"/wsfederation/jsp/post.jsp\").forward(request,response); } "
"public void runTest() throws Throwable {   Document doc;   Node entRef;   Node createdNode;   Node insertedNode;   Node refChild=null;   doc=(Document)load(\"staff\",true);   entRef=doc.createEntityReference(\"ent4\");   assertNotNull(\"createdEntRefNotNull\",entRef);   createdNode=doc.createElement(\"text3\"); {     boolean success=false;     try {       insertedNode=entRef.insertBefore(createdNode,refChild);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"throw_NO_MODIFICATION_ALLOWED_ERR\",success);   } } "
"public String generateCode(CodeGeneratorSource alphabet,int length){   Reject.ifTrue(length < 1);   Reject.ifNull(alphabet);   StringBuilder codeBuilder=new StringBuilder(length);   String chars=alphabet.getChars();   for (int k=0; k < length; k++) {     codeBuilder.append(chars.charAt(secureRandom.nextInt(chars.length())));   }   return codeBuilder.toString(); } "
"public static void loadDefaultsFromMetadata(Context context){   defaultsLoaded=true;   if (context == null) {     return;   }   ApplicationInfo ai=null;   try {     ai=context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);   }  catch (  PackageManager.NameNotFoundException e) {     return;   }   if (ai == null || ai.metaData == null) {     return;   }   if (applicationId == null) {     applicationId=ai.metaData.getString(APPLICATION_ID_PROPERTY);   }   if (appClientToken == null) {     appClientToken=ai.metaData.getString(CLIENT_TOKEN_PROPERTY);   } } "
"@Deprecated public PistonBaseMaterial(final int type){   super(type); } "
"public SignatureUtil(PdfDocument document){   this.document=document;   this.acroForm=PdfAcroForm.getAcroForm(document,true); } "
"public Mp4TagBinaryField(String id){   super(id); } "
"public EmptyResultSetException(String message){   super(message); } "
"public void spin(){   lastTimeAnimated=SystemClock.uptimeMillis();   isSpinning=true;   invalidate(); } "
"private NumericShaper(int ranges,int defaultContext,boolean isContextual){   this.fRanges=ranges;   this.fDefaultContextIndex=getIndexFromRange(defaultContext);   this.fContextual=isContextual;   if (!fContextual) {     fSingleRangeIndex=getIndexFromRange(ranges);   } } "
"public LibPackagePin(String p_name,int p_padstack_no,PlaVectorInt p_relative_location,int p_rotation_in_degree){   name=p_name;   padstack_no=p_padstack_no;   relative_location=p_relative_location;   rotation_in_degree=p_rotation_in_degree; } "
"public Set<String> searchPrivilegeNames(Set<SearchFilter> filters,boolean boolAnd,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {   Subject adminSubject=getAdminSubject();   String realm=getRealm();   String searchFilters=getSearchFilter(filters,boolAnd);   return dataStore.search(adminSubject,realm,searchFilters,numOfEntries * (2),sortResults,ascendingOrder); } "
"private static void checkRange(int fromIndex,int toIndex){   if (fromIndex < 0)   throw new IndexOutOfBoundsException(\"fromIndex < 0: \" + fromIndex);   if (toIndex < 0)   throw new IndexOutOfBoundsException(\"toIndex < 0: \" + toIndex);   if (fromIndex > toIndex)   throw new IndexOutOfBoundsException(\"fromIndex: \" + fromIndex + \" > toIndex: \"+ toIndex); } "
"private ByteOrderMark find(){   for (  ByteOrderMark bom : boms) {     if (matches(bom)) {       return bom;     }   }   return null; } "
"public AsfTag(){   this(false); } "
"public ClientAbortException(String message,Throwable throwable){   super(message,throwable); } "
"public void handleTblSiteButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {   CCActionTable table=(CCActionTable)getChild(TBL_SITES);   table.restoreStateData();   Integer[] selected=tblSiteModel.getSelectedRows();   SerializedField szCache=(SerializedField)getChild(SZ_CACHE_1);   List list=(List)szCache.getSerializedObj();   Set names=new HashSet(selected.length * 2);   for (int i=0; i < selected.length; i++) {     String name=(String)list.get(selected[i].intValue());     names.add(name);   }   try {     ServerSiteModel model=(ServerSiteModel)getModel();     model.deleteSites(names);     if (selected.length == 1) {       setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"siteconfig.message.deleted\");     }  else {       setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"siteconfig.message.deleted.pural\");     }   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }   forwardTo(); } "
"private void syncUIControlState(){   boolean disableControls=(mWZBroadcast == null || !(mWZBroadcast.getStatus().isIdle() || mWZBroadcast.getStatus().isRunning()));   if (disableControls) {     mBtnBroadcast.setEnabled(false);     mBtnSettings.setEnabled(false);     mBtnLoop.setEnabled(false);     mBtnFileSelect.setEnabled(false);   }  else {     boolean isStreaming=mWZBroadcast.getStatus().isRunning();     mBtnBroadcast.setState(isStreaming);     mBtnBroadcast.setEnabled(mMP4FileUri != null);     mBtnSettings.setEnabled(!isStreaming);     mBtnFileSelect.setEnabled(!isStreaming);   } } "
"public synchronized void flush() throws IOException {   if (sink != null) { synchronized (sink) {       sink.notifyAll();     }   } } "
"protected static boolean isAdminGroupsEnabled(String orgDN) throws AMException {   if (!isUnderRootSuffix(orgDN)) {     return false;   }   try {     if (AMDCTree.gsc == null) {       ServiceSchemaManager scm=new ServiceSchemaManager(ADMINISTRATION_SERVICE,(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()));       AMDCTree.gsc=scm.getGlobalSchema();     }     Map attrMap=AMDCTree.gsc.getReadOnlyAttributeDefaults();     Set values=(Set)attrMap.get(ADMIN_GROUPS_ENABLED_ATTR);     boolean enabled=false;     if (values == null || values.isEmpty()) {       enabled=false;     }  else {       String val=(String)values.iterator().next();       enabled=(val.equalsIgnoreCase(\"true\"));     }     if (debug.messageEnabled()) {       debug.message(\"Compliance.isAdminGroupsEnabled = \" + enabled);     }     return enabled;   }  catch (  SMSException ex) {     debug.error(AMSDKBundle.getString(\"357\"),ex);     throw new AMException(AMSDKBundle.getString(\"357\"),\"357\");   } catch (  SSOException ex) {     debug.error(AMSDKBundle.getString(\"357\"),ex);     throw new AMException(AMSDKBundle.getString(\"357\"),\"357\");   } } "
"protected ResourceMatch compare(String resource1,String resource2,boolean interpretWildCard){   if (resourceNameUtil == null) {     return (ResourceMatch.NO_MATCH);   }   return (resourceNameUtil.compare(resource1,resource2,interpretWildCard)); } "
"private char processChar(char ch){ switch (state) { case STATE_START:     if (ch == '&') {       state=STATE_AMP;     }   return ch; case STATE_AMP: if (ch == '#') {   state=STATE_HASH; }  else {   state=STATE_ERROR; } return ch; case STATE_HASH: if (ch == 'x') { control=0; digits=0; state=STATE_HEX; }  else if ('0' <= ch && ch <= '9') { control=Character.digit(ch,10); digits=1; state=STATE_DIG1; }  else { state=STATE_ERROR; } return ch; case STATE_DIG1: if ('0' <= ch && ch <= '9') { control=control * 10 + Character.digit(ch,10); digits++; if (digits <= 5) { state=STATE_DIG1; }  else { state=STATE_ERROR; } }  else if (ch == ';' && Utils.isControlChar((char)control)) { state=STATE_START; return (char)control; }  else { state=STATE_ERROR; } return ch; case STATE_HEX: if (('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'f') || ('A' <= ch && ch <= 'F')) { control=control * 16 + Character.digit(ch,16); digits++; if (digits <= 4) { state=STATE_HEX; }  else { state=STATE_ERROR; } }  else if (ch == ';' && Utils.isControlChar((char)control)) { state=STATE_START; return (char)control; }  else { state=STATE_ERROR; } return ch; case STATE_ERROR: state=STATE_START; return ch; default : return ch; } } "
"public Manifest(Manifest man){   attr.putAll(man.getMainAttributes());   entries.putAll(man.getEntries()); } "
"public void stopStreaming(){ synchronized (SyncOp) {     videoClient.stopStreaming();     audioClient.stop();     rtmpSender.stop();     LogTools.d(\"RESClient,stopStreaming()\");   } } "
"public static boolean isConnectedMobile(Context context){   NetworkInfo info=Connectivity.getNetworkInfo(context);   return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE); } "
"protected AdminClientException(LocalizableMessage message,Throwable cause){   super(message,cause); } "
"public static boolean deleteDir(File dir,boolean logFailure){   String files[]=dir.list();   if (files == null) {     files=new String[0];   }   for (int i=0; i < files.length; i++) {     File file=new File(dir,files[i]);     if (file.isDirectory()) {       deleteDir(file,logFailure);     }  else {       file.delete();     }   }   boolean result;   if (dir.exists()) {     result=dir.delete();   }  else {     result=true;   }   if (logFailure && !result) {     log.error(sm.getString(\"expandWar.deleteFailed\",dir.getAbsolutePath()));   }   return result; } "
"private void readFractionalConfig(ReplicationDomainCfg configuration,boolean allowReconnection){   FractionalConfig newFractionalConfig;   try {     newFractionalConfig=FractionalConfig.toFractionalConfig(configuration);   }  catch (  ConfigException e) {     logger.info(NOTE_ERR_FRACTIONAL,getBaseDN(),stackTraceToSingleLineString(e));     return;   }   boolean needReconnection;   try {     needReconnection=!FractionalConfig.isFractionalConfigEquivalent(fractionalConfig,newFractionalConfig);   }  catch (  ConfigException e) {     logger.info(NOTE_ERR_FRACTIONAL,getBaseDN(),stackTraceToSingleLineString(e));     return;   }   final boolean needRestart=needReconnection && allowReconnection;   if (needRestart) {     disableService();   }   int newFractionalMode=newFractionalConfig.fractionalConfigToInt();   fractionalConfig.setFractional(newFractionalMode != FractionalConfig.NOT_FRACTIONAL);   if (fractionalConfig.isFractional()) {     fractionalConfig.setFractionalExclusive(newFractionalMode == FractionalConfig.EXCLUSIVE_FRACTIONAL);     fractionalConfig.setFractionalSpecificClassesAttributes(newFractionalConfig.getFractionalSpecificClassesAttributes());     fractionalConfig.setFractionalAllClassesAttributes(newFractionalConfig.fractionalAllClassesAttributes);   }  else {     fractionalConfig.setFractionalExclusive(true);     fractionalConfig.setFractionalSpecificClassesAttributes(new HashMap<String,Set<String>>());     fractionalConfig.setFractionalAllClassesAttributes(new HashSet<String>());   }   if (needRestart) {     enableService();   } } "
"public static String printDateTime(java.util.Calendar val){   if (theConverter == null)   initConverter();   return theConverter.printDateTime(val); } "
"private void createAdministrationSuffix(String backendName) throws ADSContextException {   ADSContextHelper helper=new ADSContextHelper();   String ben=backendName;   if (backendName == null) {     ben=getDefaultBackendName();   }   helper.createAdministrationSuffix(connectionWrapper,ben); } "
"public boolean isUrlSafe(){   return this.encodeTable == URL_SAFE_ENCODE_TABLE; } "
"public Period withYears(int years){   if (years == this.years) {     return this;   }   return create(years,months,days); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl(); } "
"public void clearAuthenticationFailureTimes(){   operations.add(PasswordPolicyStateOperationType.CLEAR_AUTHENTICATION_FAILURE_TIMES); } "
"public BindResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){   this.resultCode=resultCode;   this.errorMessage=errorMessage;   this.matchedDN=matchedDN;   this.referralURLs=referralURLs; } "
"public void addAll(Collection<T> newData){   data.addAll(newData); } "
"public static String bytesToHex(byte[] b){   if (b == null || b.length == 0) {     return \"\";   }   int arrayLength=b.length;   StringBuilder buffer=new StringBuilder((arrayLength - 1) * 3 + 2);   buffer.append(byteToHex(b[0]));   for (int i=1; i < arrayLength; i++) {     buffer.append(\" \");     buffer.append(byteToHex(b[i]));   }   return buffer.toString(); } "
"public void deleteChar(AttributedCharacterIterator newParagraph,int deletePos){   fStart=newParagraph.getBeginIndex();   int end=newParagraph.getEndIndex();   if (end - fStart != fChars.length - 1) {     initAll(newParagraph);   }   char[] newChars=new char[end - fStart];   int changedIndex=deletePos - fStart;   System.arraycopy(fChars,0,newChars,0,deletePos - fStart);   System.arraycopy(fChars,changedIndex + 1,newChars,changedIndex,end - deletePos);   fChars=newChars;   if (fBidi != null) {     fBidi=new Bidi(newParagraph);     if (fBidi.isLeftToRight()) {       fBidi=null;     }   }   fParagraph=StyledParagraph.deleteChar(newParagraph,fChars,deletePos,fParagraph);   invalidateComponents(); } "
"@Override public void close() throws IOException {   try {     out.close();   }  catch (  IOException e) {     handleIOException(e);   } } "
"public TransformerException(Throwable e){   super(e.toString());   this.containedException=e;   this.locator=null; } "
"private Set<String> toScopeSet(String value) throws EntitlementException {   final Set<String> scopes=new LinkedHashSet<String>();   if (value != null) {     for (    String scope : value.split(SCOPE_DELIMITERS)) {       if (!VALID_SCOPE_PATTERN.matcher(scope.trim()).matches()) {         if (debug.errorEnabled()) {           debug.error(\"OAuth2ScopeCondition.toScopeSet(): invalid OAuth2 scope, \" + scope);         }         throw new EntitlementException(INVALID_OAUTH2_SCOPE,scope);       }       scopes.add(scope.trim());     }   }   return scopes; } "
"protected void endTag(Element elem) throws IOException {   if (synthesizedElement(elem)) {     return;   }   closeOutUnwantedEmbeddedTags(elem.getAttributes());   if (inContent) {     if (!newlineOutputed && !inPre) {       writeLineSeparator();     }     newlineOutputed=false;     inContent=false;   }   if (!inPre) {     indentSmart();   }   if (matchNameAttribute(elem.getAttributes(),HTML.Tag.PRE)) {     inPre=false;   }   write('<');   write('/');   write(elem.getName());   write('>');   writeLineSeparator(); } "
"public synchronized void addSmap(String smap,String stratumName){   embedded.add(\"*O \" + stratumName + \"\\n\"+ smap+ \"*C \"+ stratumName+ \"\\n\"); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hasAttributes01.class,args); } "
"public int indexOf(Object obj){   return this.hlist.indexOf(obj); } "
"public Trie(boolean lowerCaseOnly){   m_Root=new Node();   m_lowerCaseOnly=lowerCaseOnly; } "
"public boolean checkFolderACL(final String resourceType,final String folder,final String currentUserRole,final int acl){   return ((checkACLForRole(resourceType,folder,currentUserRole) & acl) == acl); } "
"public static void dropAllTables(SQLiteDatabase db,boolean ifExists){   PictureInfoDao.dropTable(db,ifExists); } "
"private Object readResolve(){   if (getDescriptor().getFieldNames().length == 0) {     OpenType<Object> xopenType=cast(openType);     Set<Object> xlegalValues=cast(legalValues);     Comparable<Object> xminValue=cast(minValue);     Comparable<Object> xmaxValue=cast(maxValue);     return new OpenMBeanAttributeInfoSupport(name,description,openType,isReadable(),isWritable(),isIs(),makeDescriptor(xopenType,defaultValue,xlegalValues,xminValue,xmaxValue));   }  else   return this; } "
"public ReconAuditEventBuilder entryType(String entryType){   jsonValue.put(ENTRY_TYPE,entryType);   return self(); } "
"public String toString(){   StringBuilder result=new StringBuilder();   result.append(\"role name: \" + roleName);   if (roleValue != null) {     result.append(\"; value: \");     for (Iterator<ObjectName> objNameIter=roleValue.iterator(); objNameIter.hasNext(); ) {       ObjectName currObjName=objNameIter.next();       result.append(currObjName.toString());       if (objNameIter.hasNext()) {         result.append(\", \");       }     }   }   result.append(\"; problem type: \" + problemType);   return result.toString(); } "
"public boolean isNavigationAtBottom(){   return (mSmallestWidthDp >= 600 || mInPortrait); } "
"public com.sun.identity.liberty.ws.common.jaxb.secext.PasswordString createPasswordString() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.PasswordStringImpl(); } "
"public boolean removeElement(int s){   if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));   return super.removeElement(s); } "
"@Override public String toString(){   return charSequence.toString(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringoffsetgreater.class,args); } "
"public void endMonitoringOf(final InetAddress inetAddress,final int inode){   candidateSockets.endMonitoringOfSocketIdentifier(fromInet4AddressAndInode(inetAddress,inode)); } "
"public void writeVecor(File ftrain,File ftest,File all,File trainLabel) throws Exception {   int labels[]=readLabels();   FileWriter fw=new FileWriter(ftrain);   FileWriter fwt=new FileWriter(ftest);   FileWriter flabel=new FileWriter(trainLabel);   for (int i=0; i < dataNum; i++) {     if (TestTrain[i] == 1) {       flabel.write(String.valueOf(labels[i]) + '\\n');       for (int j=0; j < dimension; j++) {         if (j != dimension - 1) {           fw.write(String.valueOf(W[i][j]) + \" \");         }  else {           fw.write(String.valueOf(W[i][j]) + '\\n');         }       }     }  else {       for (int j=0; j < dimension; j++) {         if (j != dimension - 1) {           fwt.write(String.valueOf(W[i][j]) + \" \");         }  else {           fwt.write(String.valueOf(W[i][j]) + '\\n');         }       }     }   }   fw.close();   fwt.close();   flabel.close();   FileWriter fwall=new FileWriter(all);   for (int i=0; i < dataNum; i++) {     for (int j=0; j < dimension; j++) {       if (j != dimension - 1) {         fwall.write(String.valueOf(W[i][j]) + \" \");       }  else {         fwall.write(String.valueOf(W[i][j]) + '\\n');       }     }   }   fwall.close(); } "
"public SSOException(Throwable t){   super(t); } "
"private int makeAvailable() throws IOException {   if (pos != -1) {     return 0;   }   total+=tail - head - pad;   System.arraycopy(buffer,tail - pad,buffer,0,pad);   head=0;   tail=pad;   for (; ; ) {     int bytesRead=input.read(buffer,tail,bufSize - tail);     if (bytesRead == -1) {       final String msg=\"Stream ended unexpectedly\";       throw new MalformedStreamException(msg);     }     if (notifier != null) {       notifier.noteBytesRead(bytesRead);     }     tail+=bytesRead;     findSeparator();     int av=available();     if (av > 0 || pos != -1) {       return av;     }   } } "
"public PdfCanvas eoClip(){   contentStream.getOutputStream().writeBytes(WStar);   return this; } "
"public SubjectConfirmationData createSubjectConfirmationData(Element elem) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION_DATA,elem);   if (obj == null) {     return new SubjectConfirmationDataImpl(elem);   }  else {     return (SubjectConfirmationData)obj;   } } "
"public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){   if (map == null) {     throw new NullPointerException(\"map == null\");   }   return new SynchronizedSortedMap<K,V>(map); } "
"public FieldPosition(Format.Field attribute){   this(attribute,-1); } "
"public void postSingleFile(Context context,Handler h,String fileParam,String fileName,String fileType,InputStream inputStream){   postSingleFile(context,h,null,fileParam,fileName,fileType,inputStream); } "
"@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static List toSimpleModel(List listToClean){   ListIterator<Object> listIter=listToClean.listIterator();   while (listIter.hasNext()) {     Object listEntry=listIter.next();     if (listEntry instanceof ODocument || listEntry instanceof Set) {       listIter.set(asSimpleBinding(listEntry));     }  else {       asSimpleBinding(listEntry);     }   }   return listToClean; } "
"public boolean update(Long ruleActionID,Long ruleID,Long actionID){   if (ruleActionID == null) {     throw new IllegalArgumentException(\"primary key null.\");   }   ContentValues args=new ContentValues();   if (ruleID != null) {     args.put(KEY_RULEID,ruleID);   }   if (actionID != null) {     args.put(KEY_ACTIONID,actionID);   }   if (args.size() > 0) {     return database.update(DATABASE_TABLE,args,KEY_RULEACTIONID + \"=\" + ruleActionID,null) > 0;   }   return false; } "
"public static void start(Context context){   start(context,new Params()); } "
"@Inject public CreateApplication(ApplicationServiceFactory applicationServiceFactory){   super(applicationServiceFactory); } "
"public BackendConfigManager(ServerContext serverContext){   this.serverContext=serverContext; } "
"final synchronized void process(Runnable task) throws InterruptedException {   this.task=task;   notify(); } "
"public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_double\",_opsClass);   DynUnionOperations $self=(DynUnionOperations)$so.servant;   try {     $self.insert_double(value);   }   finally {     _servant_postinvoke($so);   } } "
"protected BlockElement(){ } "
"public void reset(){   super.reset();   H1=0x6a09e667;   H2=0xbb67ae85;   H3=0x3c6ef372;   H4=0xa54ff53a;   H5=0x510e527f;   H6=0x9b05688c;   H7=0x1f83d9ab;   H8=0x5be0cd19;   xOff=0;   for (int i=0; i != X.length; i++) {     X[i]=0;   } } "
"public static boolean isJavaKeyword(String key){   int i=0;   int j=javaKeywords.length;   while (i < j) {     int k=(i + j) / 2;     int result=javaKeywords[k].compareTo(key);     if (result == 0) {       return true;     }     if (result < 0) {       i=k + 1;     }  else {       j=k;     }   }   return false; } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String realm=getStringOptionValue(IArgument.REALM_NAME);   String idName=getStringOptionValue(ARGUMENT_ID_NAME);   String type=getStringOptionValue(ARGUMENT_ID_TYPE);   IdType idType=convert2IdType(type);   String membershipType=getStringOptionValue(ARGUMENT_MEMBERSHIP_IDTYPE);   IdType membershipIdType=convert2IdType(membershipType);   String[] params={realm,type,idName,membershipType};   try {     AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);     Set memberOfs=membershipIdType.canBeMemberOf();     if (!memberOfs.contains(idType)) {       String[] args={type,membershipType};       throw new CLIException(MessageFormat.format(getResourceString(\"idrepo-cannot-be-member\"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_IDREPO_GET_MEMBERS\",params);     AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);     Set members=amid.getMembers(membershipIdType);     if ((members != null) && !members.isEmpty()) {       String msg=getResourceString(\"idrepo-members-result\");       String[] arg={\"\",\"\"};       for (Iterator i=members.iterator(); i.hasNext(); ) {         AMIdentity a=(AMIdentity)i.next();         arg[0]=a.getName();         arg[1]=a.getUniversalId();         outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));       }     }  else {       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"idrepo-no-members\"),(Object[])params));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_IDREPO_GET_MEMBERS\",params);   }  catch (  IdRepoException e) {     String[] args={realm,type,idName,membershipType,e.getMessage()};     debugError(\"GetMembers.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IDREPO_GET_MEMBERS\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={realm,type,idName,membershipType,e.getMessage()};     debugError(\"GetMembers.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IDREPO_GET_MEMBERS\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"private Set intersectIP(Set permitted,Set ips){   Set intersect=new HashSet();   for (Iterator it=ips.iterator(); it.hasNext(); ) {     byte[] ip=ASN1OctetString.getInstance(((GeneralSubtree)it.next()).getBase().getName()).getOctets();     if (permitted == null) {       if (ip != null) {         intersect.add(ip);       }     }  else {       Iterator it2=permitted.iterator();       while (it2.hasNext()) {         byte[] _permitted=(byte[])it2.next();         intersect.addAll(intersectIPRange(_permitted,ip));       }     }   }   return intersect; } "
"private static TypeDescription statementDescription(){   return new TypeDescription.Latent(\"com.datastax.driver.core.Statement\",Modifier.ABSTRACT,null,null); } "
"public static void createTable(SQLiteDatabase db,boolean ifNotExists){   String constraint=ifNotExists ? \"IF NOT EXISTS \" : \"\";   db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"CUSTOMER\\\" (\"+ \"\\\"_id\\\" INTEGER PRIMARY KEY ,\"+ \"\\\"NAME\\\" TEXT NOT NULL );\"); } "
"public static void sort(int[] array){   DualPivotQuicksort.sort(array); } "
"public static void main(final String[] args){   try {     Utils.checkJavaVersion();     System.exit(0);   }  catch (  final IncompatibleVersionException ive) {     System.out.println(ive.getMessageObject());     System.exit(JAVA_VERSION_INCOMPATIBLE);   } } "
"private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){   if (declaredTypes.length == actualTypes.length) {     for (int i=0; i < actualTypes.length; i++) {       if (actualTypes[i] == NULL.class)       continue;       if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;       return false;     }     return true;   }  else {     return false;   } } "
"private static String doNormalize(String filename,char separator,boolean keepSeparator){   if (filename == null) {     return null;   }   int size=filename.length();   if (size == 0) {     return filename;   }   int prefix=getPrefixLength(filename);   if (prefix < 0) {     return null;   }   char[] array=new char[size + 2];   filename.getChars(0,filename.length(),array,0);   char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;   for (int i=0; i < array.length; i++) {     if (array[i] == otherSeparator) {       array[i]=separator;     }   }   boolean lastIsDirectory=true;   if (array[size - 1] != separator) {     array[size++]=separator;     lastIsDirectory=false;   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == separator) {       System.arraycopy(array,i,array,i - 1,size - i);       size--;       i--;     }   }   for (int i=prefix + 1; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {       if (i == size - 1) {         lastIsDirectory=true;       }       System.arraycopy(array,i + 1,array,i - 1,size - i);       size-=2;       i--;     }   }   outer:   for (int i=prefix + 2; i < size; i++) {     if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {       if (i == prefix + 2) {         return null;       }       if (i == size - 1) {         lastIsDirectory=true;       }       int j;       for (j=i - 4; j >= prefix; j--) {         if (array[j] == separator) {           System.arraycopy(array,i + 1,array,j + 1,size - i);           size-=i - j;           i=j + 1;           continue outer;         }       }       System.arraycopy(array,i + 1,array,prefix,size - i);       size-=i + 1 - prefix;       i=prefix + 1;     }   }   if (size <= 0) {     return \"\";   }   if (size <= prefix) {     return new String(array,0,size);   }   if (lastIsDirectory && keepSeparator) {     return new String(array,0,size);   }   return new String(array,0,size - 1); } "
"public boolean isTerminalDataDependency(){   EventKind kind=getTrace().getKind(getEventID());   return kind.isDefinition || kind.isArgument || kind.isInvocation|| kind == EventKind.RETURN || kind.isInstantiation; } "
"public synchronized void end(){   super.end();   this.trimEdits(indexOfNextAdd,edits.size() - 1); } "
"public static void main(String args[]) throws Exception {   System.out.println(getComponentName() + \" \" + getComponentVersion());   if (isNativeCodeLoaded()) {     System.out.println(\"Native code loaded OK \" + OpenSslInfoNative.NativeVersion());     System.out.println(\"Native Name \" + OpenSslInfoNative.NativeName());     System.out.println(\"Native Built \" + OpenSslInfoNative.NativeTimeStamp());     System.out.println(\"OpenSSL library loaded OK, version: 0x\" + Long.toHexString(OpenSslInfoNative.SSLeay()));     System.out.println(OpenSslInfoNative.SSLeayVersion(0)); {       Properties props=new Properties();       props.setProperty(CryptoRandomFactory.CLASSES_KEY,CryptoRandomFactory.RandomProvider.OPENSSL.getClassName());       CryptoRandomFactory.getCryptoRandom(props);       System.out.println(\"Random instance created OK\");     } {       Properties props=new Properties();       props.setProperty(CryptoCipherFactory.CLASSES_KEY,CryptoCipherFactory.CipherProvider.OPENSSL.getClassName());       CryptoCipherFactory.getCryptoCipher(\"AES/CTR/NoPadding\",props);       System.out.println(\"Cipher instance created OK\");     }     System.out.println(\"Additional SSLeay_version(n) details:\");     for (int j=1; j < 6; j++) {       System.out.println(j + \": \" + OpenSslInfoNative.SSLeayVersion(j));     }   }  else {     System.out.println(\"Native load failed: \" + getLoadingError());   } } "
"public static AlertDialog create(Context context,CharSequence message){   if (SDK_INT > FROYO) {     ProgressDialog dialog;     if (SDK_INT >= ICE_CREAM_SANDWICH)     dialog=new LightProgressDialog(context,message);  else {       dialog=new ProgressDialog(context);       dialog.setInverseBackgroundForced(true);     }     dialog.setMessage(message);     dialog.setIndeterminate(true);     dialog.setProgressStyle(STYLE_SPINNER);     dialog.setIndeterminateDrawable(context.getResources().getDrawable(R.drawable.spinner));     return dialog;   }  else {     AlertDialog dialog=LightAlertDialog.create(context);     dialog.setInverseBackgroundForced(true);     View view=LayoutInflater.from(context).inflate(R.layout.dialog_progress,null);     ((TextView)view.findViewById(R.id.tv_loading)).setText(message);     dialog.setView(view);     return dialog;   } } "
"public static boolean isAlpha(final char c){   return com.forgerock.opendj.util.StaticUtils.isAlpha(c); } "
"protected SheetCollate(int value){   super(value); } "
"public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {   boolean forwarded=false;   submitCycle=true;   bFilter=true;   try {     Subject subject=createSubject();     if (subject != null) {       CachedPolicy cachedPolicy=getCachedPolicy();       Policy policy=cachedPolicy.getPolicy();       String name=(String)propertySheetModel.getValue(SUBJECT_NAME);       policy.addSubject(name,subject,isExclusive());       backTrail();       forwardToPolicyViewBean();       forwarded=true;     }   }  catch (  NameAlreadyExistsException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",getModel().getErrorString(e));   } catch (  InvalidNameException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",getModel().getErrorString(e));   } catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }  finally {     if (!forwarded) {       forwardTo();     }   } } "
"private LameFrame(ByteBuffer lameHeader){   encoder=Utils.getString(lameHeader,0,ENCODER_SIZE,TextEncoding.CHARSET_ISO_8859_1); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapsetnameditemns11.class,args); } "
"private boolean checkSecond(final byte[] msg){   boolean result=true;   for (int i=1; i < 9; i++) {     if (msg[i] == 0x00) {       result=false;     }   }   return result; } "
"public static void addToSite(SSOToken ssoToken,String instanceName,String siteId) throws SMSException, SSOException, ConfigurationException {   ServiceConfig svr=getServerConfig(ssoToken,instanceName);   if (svr != null) {     Map attrs=svr.getAttributes();     Set setID=(Set)attrs.get(ATTR_SERVER_ID);     String serverId=(String)setID.iterator().next();     if (!serverId.equals(DEFAULT_SERVER_ID)) {       Set set=new HashSet(2);       set.add(siteId);       attrs.put(ATTR_PARENT_SITE_ID,set);       svr.setAttributes(attrs);     }   }  else {     Object[] param={instanceName};     throw new ConfigurationException(\"invalid.server.instance\",param);   } } "
"public void nodeClicked(RequestInvocationEvent event,int nodeID){   String profileName=getProfileName(nodeID);   setPageSessionAttribute(PAGE_SESSION_PROFILE_NAME,profileName);   removePageSessionAttribute(PAGE_SESSION_STYLE_NAME);   setDisplayFieldValue(SINGLECHOICE_STYLE,\"\");   forwardTo(); } "
"@DataProvider(name=\"validBase64Data\") public Object[][] createValidBase64Data(){   return new Object[][]{{\"\",\"\"},{\"00\",\"AA==\"},{\"01\",\"AQ==\"},{\"02\",\"Ag==\"},{\"03\",\"Aw==\"},{\"04\",\"BA==\"},{\"05\",\"BQ==\"},{\"06\",\"Bg==\"},{\"07\",\"Bw==\"},{\"0000\",\"AAA=\"},{\"000000\",\"AAAA\"},{\"00000000\",\"AAAAAA==\"},{\"000102030405060708090a0b0c0d0e0f\" + \"101112131415161718191a1b1c1d1e1f\" + \"202122232425262728292a2b2c2d2e2f\"+ \"303132333435363738393a3b3c3d3e3f\"+ \"404142434445464748494a4b4c4d4e4f\"+ \"505152535455565758595a5b5c5d5e5f\"+ \"606162636465666768696a6b6c6d6e6f\"+ \"707172737475767778797a7b7c7d7e7f\"+ \"808182838485868788898a8b8c8d8e8f\"+ \"909192939495969798999a9b9c9d9e9f\"+ \"a0a1a2a3a4a5a6a7a8a9aaabacadaeaf\"+ \"b0b1b2b3b4b5b6b7b8b9babbbcbdbebf\"+ \"c0c1c2c3c4c5c6c7c8c9cacbcccdcecf\"+ \"d0d1d2d3d4d5d6d7d8d9dadbdcdddedf\"+ \"e0e1e2e3e4e5e6e7e8e9eaebecedeeef\"+ \"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\",\"AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4v\" + \"MDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5f\" + \"YGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6P\"+ \"kJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/\"+ \"wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v\"+ \"8PHy8/T19vf4+fr7/P3+/w==\"}}; } "
"public static Service create(QName serviceName,WebServiceFeature... features){   return new Service(null,serviceName,features); } "
"public com.sun.identity.liberty.ws.idpp.jaxb.PostalCodeElement createPostalCodeElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PostalCodeElementImpl(); } "
"@org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public boolean removeOperationInProgress(int messageID){   return false; } "
"public static Map parseEnvParameters(Node pNode) throws PolicyException {   Node node=null;   Set nodeSet=XMLUtils.getChildNodes(pNode,ATTRIBUTE_VALUE_PAIR);   if (nodeSet == null) {     debug.error(\"parseEnvParameters: missing element \" + ATTRIBUTE_VALUE_PAIR);     String objs[]={ATTRIBUTE_VALUE_PAIR};     throw new PolicyException(ResBundleUtils.rbName,\"missing_element\",objs,null);   }   HashMap envParams=new HashMap();   Iterator nodes=nodeSet.iterator();   while (nodes.hasNext()) {     node=(Node)nodes.next();     String attributeName=getAttributeName(node);     if (attributeName == null) {       debug.error(\"PolicyUtils.parseEnvParameters():\" + \" missing attribute name\");       String objs[]={ATTRIBUTE_NAME};       throw new PolicyException(ResBundleUtils.rbName,\"missing_attribute\",objs,null);     }     Set values=getAttributeValues(node);     if (values == null) {       debug.error(\"PolicyUtils.parseEnvParameters():\" + \" missing attribute value\");       String objs[]={VALUE};       throw new PolicyException(ResBundleUtils.rbName,\"missing_attribute\",objs,null);     }     envParams.put(attributeName,values);   }   return envParams; } "
"public InvalidDataTypeException(){ } "
"private void copyOutlines(Set<PdfOutline> outlines,PdfDocument toDocument,Map<PdfPage,PdfPage> page2page){   Set<PdfOutline> outlinesToCopy=new HashSet<>();   outlinesToCopy.addAll(outlines);   for (  PdfOutline outline : outlines) {     getAllOutlinesToCopy(outline,outlinesToCopy);   }   PdfOutline rootOutline=toDocument.getOutlines(false);   if (rootOutline == null) {     rootOutline=new PdfOutline(toDocument);     rootOutline.setTitle(\"Outlines\");   }   cloneOutlines(outlinesToCopy,rootOutline,getOutlines(false),page2page,toDocument); } "
"void addToParent(Element headerE){   Document doc=headerE.getOwnerDocument();   Element usageDirectiveHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_USAGE_DIRECTIVE);   headerE.appendChild(usageDirectiveHeaderE);   usageDirectiveHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_REF,ref);   if (id != null) {     usageDirectiveHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);   }   if (mustUnderstand != null) {     usageDirectiveHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));   }   if (actor != null) {     usageDirectiveHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);   }   if (elements != null && !elements.isEmpty()) {     Iterator iter=elements.iterator();     while (iter.hasNext()) {       Element childE=(Element)iter.next();       usageDirectiveHeaderE.appendChild(doc.importNode(childE,true));     }   } } "
"private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){   if (index < 0)   return false;   int distance=index - prevTakeIndex;   if (distance < 0)   distance+=length;   return dequeues > distance; } "
"protected void closeOutUnwantedEmbeddedTags(AttributeSet attr) throws IOException {   tagsToRemove.removeAllElements();   attr=convertToHTML(attr,null);   HTML.Tag t;   Object tValue;   int firstIndex=-1;   int size=tags.size();   for (int i=size - 1; i >= 0; i--) {     t=tags.elementAt(i);     tValue=tagValues.elementAt(i);     if ((attr == null) || noMatchForTagInAttributes(attr,t,tValue)) {       firstIndex=i;       tagsToRemove.addElement(t);     }   }   if (firstIndex != -1) {     boolean removeAll=((size - firstIndex) == tagsToRemove.size());     for (int i=size - 1; i >= firstIndex; i--) {       t=tags.elementAt(i);       if (removeAll || tagsToRemove.contains(t)) {         tags.removeElementAt(i);         tagValues.removeElementAt(i);       }       write('<');       write('/');       write(t.toString());       write('>');     }     size=tags.size();     for (int i=firstIndex; i < size; i++) {       t=tags.elementAt(i);       write('<');       write(t.toString());       Object o=tagValues.elementAt(i);       if (o != null && o instanceof AttributeSet) {         writeAttributes((AttributeSet)o);       }       write('>');     }   } } "
"protected final void registerOption(ManagedObjectOption option){   options.add(option); } "
"private void modifyEntry(Entry srcEntry,Entry dstEntry){   List<Attribute> srcList=srcEntry.getAllAttributes(attrCert);   List<Attribute> dstList=dstEntry.getAllAttributes(attrCert);   if (!srcList.equals(dstList)) {     DN dstDN=dstEntry.getName();     deleteEntry(dstDN);     addEntry(srcEntry,dstDN);   } } "
"public void testCase1(){   byte aBytes[]={1,2,3,4,5,6,7};   byte bBytes[]={0};   int aSign=1;   int bSign=0;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   try {     aNumber.divide(bNumber);     fail(\"ArithmeticException has not been caught\");   }  catch (  ArithmeticException e) {   } } "
"private int readAnnotationTarget(final Context context,int u){   int target=readInt(u); switch (target >>> 24) { case 0x00: case 0x01: case 0x16:     target&=0xFFFF0000;   u+=2; break; case 0x13: case 0x14: case 0x15: target&=0xFF000000; u+=1; break; case 0x40: case 0x41: { target&=0xFF000000; int n=readUnsignedShort(u + 1); context.start=new Label[n]; context.end=new Label[n]; context.index=new int[n]; u+=3; for (int i=0; i < n; ++i) { int start=readUnsignedShort(u); int length=readUnsignedShort(u + 2); context.start[i]=readLabel(start,context.labels); context.end[i]=readLabel(start + length,context.labels); context.index[i]=readUnsignedShort(u + 4); u+=6; } break; } case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: target&=0xFF0000FF; u+=4; break; default : target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000; u+=3; break; } int pathLength=readByte(u); context.typeRef=target; context.typePath=pathLength == 0 ? null : new TypePath(b,u); return u + 1 + 2 * pathLength; } "
"public static void test_callInstanceMethod(){   Target target=new Target();   assertSame(\"zorch\",target.zorch()); } "
"void onBindAppWidget(Launcher launcher){   if (!mHasNotifiedInitialWidgetSizeChanged) {     notifyWidgetSizeChanged(launcher);   } } "
"public static HierarchyListener add(HierarchyListener a,HierarchyListener b){   return (HierarchyListener)addInternal(a,b); } "
"void addUser(String username,String password,String roles){   ArrayList<String> list=new ArrayList<>();   roles+=\",\";   while (true) {     int comma=roles.indexOf(',');     if (comma < 0)     break;     String role=roles.substring(0,comma).trim();     list.add(role);     roles=roles.substring(comma + 1);   }   GenericPrincipal principal=new GenericPrincipal(username,password,list);   principals.put(username,principal); } "
"public boolean containsProvider(String providerID){   EntityDescriptorElement ed=null;   try {     ed=metaManager.getEntityDescriptor(\"/\",providerID);   }  catch (  SAML2MetaException smex) {     SAML2Utils.debug.error(\"SAML2ProviderManager.containsProvider:\",smex);   }   return (ed != null); } "
"@Override public void onOptionsMenuClosed(final Menu menu){   delegate.onOptionsMenuClosed(menu); } "
"public static boolean isIDPProxyEnabled(String requestID){   return IDPCache.proxySPAuthnReqCache.containsKey(requestID); } "
"public boolean isRecursive(){   return recursive; } "
"public static String doFix(String path,@Nullable String fileContent,HighlightInfo.IntentionActionDescriptor intentionActionDescriptor){   UIUtil.invokeAndWaitIfNeeded((Runnable)null);   return null; } "
"public void validateRelationshipField(Context context,JsonValue oldValue,JsonValue newValue) throws ResourceException {   if (oldValue.isNull() && newValue.isNull()) {     logger.debug(\"not validating relationship as old and new values are both null.\");   }  else   if (oldValue.isNull() || !oldValue.getObject().equals(newValue.getObject())) {     relationshipValidator.validateRelationship(newValue,context);   } } "
"public void queueThread(WaitingThread wt){   if (wt == null) {     throw new IllegalArgumentException(\"Waiting thread must not be null.\");   }   this.waitingThreads.add(wt); } "
"private void sendEvents(AMEvent dpEvent){ synchronized (listeners) {     Iterator iterator=listeners.iterator();     while (iterator.hasNext()) {       AMEventListener listener=(AMEventListener)iterator.next();       try { switch (dpEvent.getEventType()) { case AMEvent.OBJECT_CHANGED: case AMEvent.OBJECT_EXPIRED:           listener.objectChanged(dpEvent);         break; case AMEvent.OBJECT_REMOVED:       listener.objectRemoved(dpEvent);     break; case AMEvent.OBJECT_RENAMED:   listener.objectRenamed(dpEvent); break; default : } }  catch (Throwable t) { } } } } "
"public Future<List<Job>> jobRange(long from,long to,String order){   Future<List<Job>> future=Future.future();   jobService.jobRange(from,to,order,future.completer());   return future; } "
"public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_reference\",_opsClass);   DynFixedOperations $self=(DynFixedOperations)$so.servant;   try {     $self.insert_reference(value);   }   finally {     _servant_postinvoke($so);   } } "
"public boolean isError(){   return errorState.get() > 0; } "
"private boolean isNeverExpires(){   return getExpiryTime() == defaultExpireTime(); } "
"@Override public String toString(){   if (count == 0) {     return \"\";   }   int wasted=value.length - count;   if (wasted >= 256 || (wasted >= INITIAL_CAPACITY && wasted >= (count >> 1))) {     return new String(value,0,count);   }   shared=true;   return new String(0,count,value); } "
"static short readShort(final byte[] b,final int index){   return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF)); } "
"private static boolean remove(JsonValue subject,PatchOperation operation) throws BadRequestException {   if (!operation.isRemove()) {     throw new BadRequestException(\"Operation is an \" + operation.getOperation() + \", not a remove!\");   }   final JsonValue current=subject.get(operation.getField());   if (current == null || current.isNull()) {     return false;   }   if (operation.getValue() == null || operation.getValue().isNull()) {     subject.remove(operation.getField());     return true;   }  else {     if (current.isList()) {       while (current.asList().remove(operation.getValue().getObject())) {       }       return true;     }  else {       if (operation.getValue().getObject().equals(current.getObject())) {         subject.remove(operation.getField());         return true;       }     }     return false;   } } "
"public void testTestBitPositive1(){   byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=7;   BigInteger aNumber=new BigInteger(aSign,aBytes);   assertTrue(!aNumber.testBit(number)); } "
"public Dimension preferredLayoutSize(Container parent){   Dimension rd, mbd;   Insets i=getInsets();   if (contentPane != null) {     rd=contentPane.getPreferredSize();   }  else {     rd=parent.getSize();   }   if (menuBar != null && menuBar.isVisible()) {     mbd=menuBar.getPreferredSize();   }  else {     mbd=new Dimension(0,0);   }   return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom); } "
"private ScriptException convertException(RhinoException ex){   final ScriptException se=new ScriptException(ex.getMessage(),ex.sourceName(),ex.lineNumber(),ex.columnNumber());   se.initCause(ex);   return se; } "
"public void stop(){ synchronized (eventMutex) {     if (this.refCount > 0)     this.refCount--;     if (this.refCount == 0) {       isStopped=true;       eventMutex.notify();     }   } } "
"private String buildCacheKey(String serviceName,String version,String orgName,String groupName,String serviceComponent){   StringBuilder sb=new StringBuilder(100);   sb.append(serviceComponent).append(CACHE_KEY_DELIMITER);   sb.append(groupName).append(CACHE_KEY_DELIMITER);   sb.append(version).append(CACHE_KEY_DELIMITER);   sb.append(serviceName).append(CACHE_KEY_DELIMITER);   sb.append(orgName);   return sb.toString().toLowerCase(); } "
"float measure(int offset,boolean trailing,FontMetricsInt fmi){   int target=trailing ? offset - 1 : offset;   if (target < 0) {     return 0;   }   float h=0;   if (!mHasTabs) {     if (mDirections == Layout.DIRS_ALL_LEFT_TO_RIGHT) {       return measureRun(0,offset,mLen,false,fmi);     }     if (mDirections == Layout.DIRS_ALL_RIGHT_TO_LEFT) {       return measureRun(0,offset,mLen,true,fmi);     }   }   char[] chars=mChars;   int[] runs=mDirections.mDirections;   for (int i=0; i < runs.length; i+=2) {     int runStart=runs[i];     int runLimit=runStart + (runs[i + 1] & Layout.RUN_LENGTH_MASK);     if (runLimit > mLen) {       runLimit=mLen;     }     boolean runIsRtl=(runs[i + 1] & Layout.RUN_RTL_FLAG) != 0;     int segstart=runStart;     for (int j=mHasTabs ? runStart : runLimit; j <= runLimit; j++) {       int codept=0;       Bitmap bm=null;       if (mHasTabs && j < runLimit) {         codept=chars[j];         if (codept >= 0xd800 && codept < 0xdc00 && j + 1 < runLimit) {           codept=Character.codePointAt(chars,j);           if (codept > 0xffff) {             ++j;             continue;           }         }       }       if (j == runLimit || codept == '\\t' || bm != null) {         boolean inSegment=target >= segstart && target < j;         boolean advance=(mDir == Layout.DIR_RIGHT_TO_LEFT) == runIsRtl;         if (inSegment && advance) {           return h+=measureRun(segstart,offset,j,runIsRtl,fmi);         }         float w=measureRun(segstart,j,j,runIsRtl,fmi);         h+=advance ? w : -w;         if (inSegment) {           return h+=measureRun(segstart,offset,j,runIsRtl,null);         }         if (codept == '\\t') {           if (offset == j) {             return h;           }           h=mDir * nextTab(h * mDir);           if (target == j) {             return h;           }         }         if (bm != null) {           float bmAscent=ascent(j);           float wid=bm.getWidth() * -bmAscent / bm.getHeight();           h+=mDir * wid;           j++;         }         segstart=j + 1;       }     }   }   return h; } "
"public void logAddRequest(AddOperation addOperation){ } "
"public static String filterSchemaBackendName(final String dsCfgBackendName){   final String cfgNameRegExp=\"(.*)-backend.*\";   final Matcher regExpMatcher=Pattern.compile(cfgNameRegExp,Pattern.CASE_INSENSITIVE).matcher(dsCfgBackendName);   if (regExpMatcher.matches()) {     return regExpMatcher.group(1);   }   return dsCfgBackendName; } "
"public Node selectSingleNode(Node contextNode,String str) throws TransformerException {   return selectSingleNode(contextNode,str,contextNode); } "
"public void test_Of_EEEEE(){   EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c,EnumWithInnerClass.d,EnumWithInnerClass.e);   assertEquals(\"Size of enumSet should be 5:\",5,enumSet.size());   assertTrue(\"Should return true\",enumSet.contains(EnumWithInnerClass.a));   assertTrue(\"Should return true\",enumSet.contains(EnumWithInnerClass.e));   try {     EnumSet.of((EnumWithInnerClass)null,null,null,null,null);     fail(\"Should throw NullPointerException\");   }  catch (  NullPointerException npe) {   }   EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d,HugeEnumWithInnerClass.e);   assertEquals(5,hugeEnumSet.size());   assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));   assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.e));   try {     EnumSet.of((HugeEnumWithInnerClass)null,null,null,null,null);     fail(\"Should throw NullPointerException\");   }  catch (  NullPointerException npe) {   } } "
"public Point dbl(Point p) throws DivisionException {   BigInteger x=p.getX();   BigInteger y=p.getY();   if (y.equals(BigInteger.ZERO)) {     throw new DivisionException(\"y was equal to zero\");   }   BigInteger l1=((THREE.multiply(x.pow(2))).add(curve.getA()));   BigInteger l2=TWO.multiply(y).modInverse(curve.getP());   BigInteger l=l1.multiply(l2).mod(curve.getP());   BigInteger xr=l.pow(2).subtract(TWO.multiply(x)).mod(curve.getP());   BigInteger yr=l.multiply(x.subtract(xr)).subtract(y).mod(curve.getP());   Point ret=new Point(xr,yr);   return ret; } "
"public synchronized void dragExit(DropTargetEvent dte){   isDraggingInside=false;   if (!active)   return;   if (dtListener != null && active)   dtListener.dragExit(dte);   clearAutoscroll(); } "
"public static void main(String[] args){   OpenAMUpgrade upgrade=InjectorHolder.getInstance(OpenAMUpgrade.class);   upgrade.execute(args); } "
"public void test_copyLjava_util_ListLjava_util_List(){   try {     Collections.copy(null,ll);     fail(\"Expected NullPointerException for null list first parameter\");   }  catch (  NullPointerException e) {   }   try {     Collections.copy(ll,null);     fail(\"Expected NullPointerException for null list second parameter\");   }  catch (  NullPointerException e) {   }   final int llSize=ll.size();   ll.set(25,null);   ArrayList al=new ArrayList();   Integer extraElement=new Integer(1);   Integer extraElement2=new Integer(2);   al.addAll(myReversedLinkedList);   al.add(extraElement);   al.add(extraElement2);   Collections.copy(al,ll);   for (int counter=0; counter < llSize; counter++) {     assertTrue(\"Elements do not match after copying collection\",al.get(counter) == ll.get(counter));   }   assertTrue(\"Elements after copied elements affected by copy\",extraElement == al.get(llSize) && extraElement2 == al.get(llSize + 1));   ArrayList ar1=new ArrayList();   ArrayList ar2=new ArrayList();   int i;   for (i=0; i < 5; i++) {     ar2.add(new Integer(i));   }   for (i=0; i < 10; i++) {     ar1.add(new Integer(i));   }   try {     Collections.copy(ar2,ar1);     fail(\"IndexOutOfBoundsException expected\");   }  catch (  IndexOutOfBoundsException e) {   }   Mock_ArrayList mal1=new Mock_ArrayList();   Mock_ArrayList mal2=new Mock_ArrayList();   for (i=0; i < 10; i++) {     mal1.add(new Integer(i));     mal2.add(new Integer(10 - i));   }   try {     Collections.copy(mal1,mal2);     fail(\"UnsupportedOperationException expected\");   }  catch (  UnsupportedOperationException e) {   } } "
"private static JavacErrorDetail[] parseJavacMessage(String errMsg,String fname,Node.Nodes page) throws IOException, JasperException {   ArrayList<JavacErrorDetail> errors=new ArrayList<>();   StringBuilder errMsgBuf=null;   int lineNum=-1;   JavacErrorDetail javacError=null;   BufferedReader reader=new BufferedReader(new StringReader(errMsg));   String line=null;   while ((line=reader.readLine()) != null) {     int beginColon=line.indexOf(':',2);     int endColon=line.indexOf(':',beginColon + 1);     if ((beginColon >= 0) && (endColon >= 0)) {       if (javacError != null) {         errors.add(javacError);       }       String lineNumStr=line.substring(beginColon + 1,endColon);       try {         lineNum=Integer.parseInt(lineNumStr);       }  catch (      NumberFormatException e) {         lineNum=-1;       }       errMsgBuf=new StringBuilder();       javacError=createJavacError(fname,page,errMsgBuf,lineNum);     }     if (errMsgBuf != null) {       errMsgBuf.append(line);       errMsgBuf.append(System.lineSeparator());     }   }   if (javacError != null) {     errors.add(javacError);   }   reader.close();   JavacErrorDetail[] errDetails=null;   if (errors.size() > 0) {     errDetails=new JavacErrorDetail[errors.size()];     errors.toArray(errDetails);   }   return errDetails; } "
"public FrameBodyXSOT(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"public static BooleanArgument useSSLArgument() throws ArgumentException {   return BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildArgument(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementgetattributens02.class,args); } "
"@Override public Object create() throws HeapException {   SampleFilter filter=new SampleFilter();   filter.name=config.get(\"name\").as(evaluatedWithHeapProperties()).required().asString();   filter.value=config.get(\"value\").as(evaluatedWithHeapProperties()).required().asString();   return filter; } "
"public AttributeStatement createAttributeStatement(String xml) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT,xml);   if (obj == null) {     return new AttributeStatementImpl(xml);   }  else {     return (AttributeStatement)obj;   } } "
"public final void testCertPath(){   try {     CertPath cp1=new MyCertPath(testEncoding);     assertEquals(\"MyEncoding\",cp1.getType());     assertTrue(Arrays.equals(testEncoding,cp1.getEncoded()));   }  catch (  CertificateEncodingException e) {     fail(\"Unexpected CertificateEncodingException \" + e.getMessage());   }   try {     CertPath cp1=new MyCertPath(null);   }  catch (  Exception e) {     fail(\"Unexpected exception \" + e.getMessage());   } } "
"public int countMetaBlocks(File f) throws CannotReadException, IOException {   RandomAccessFile raf=new RandomAccessFile(f,\"r\");   FlacStreamReader flacStream=new FlacStreamReader(raf);   flacStream.findStream();   boolean isLastBlock=false;   int count=0;   while (!isLastBlock) {     MetadataBlockHeader mbh=MetadataBlockHeader.readHeader(raf);     logger.config(\"Found block:\" + mbh.getBlockType());     raf.seek(raf.getFilePointer() + mbh.getDataLength());     isLastBlock=mbh.isLastBlock();     mbh=null;     count++;   }   raf.close();   return count; } "
"public XMLString substring(int beginIndex,int endIndex){   int len=endIndex - beginIndex;   if (len > m_length)   len=m_length;   if (len <= 0)   return XString.EMPTYSTRING;  else {     int start=m_start + beginIndex;     return new XStringForFSB(fsb(),start,len);   } } "
"@SuppressWarnings(\"unchecked\") public Enumeration<Permission> elements(){ synchronized (this) {     return Collections.enumeration((List<Permission>)(List)perms);   } } "
"public ResourceMatch compare(String requestResource,String targetResource,boolean wildcardCompare){   if ((requestResource == null) || (targetResource == null)) {     return ResourceMatch.NO_MATCH;   }   if (debug.messageEnabled()) {     debug.message(\"HttpURLResourceName.compare: \" + \"request resource=\" + requestResource + \"; policy resource=\"+ targetResource);   }   int requestIndex=requestResource.indexOf(\"?\");   int targetIndex=targetResource.indexOf(\"?\");   if ((requestIndex >= 0) || (targetIndex >= 0)) {     ResourceMatch result=ResourceMatch.NO_MATCH;     String requestSubstring1=requestResource;     String requestSubstring2=null;     if (requestIndex >= 0) {       requestSubstring1=requestResource.substring(0,requestIndex);       if (requestResource.length() > (requestIndex + 1)) {         requestSubstring2=requestResource.substring(requestIndex + 1);       }     }     String targetSubstring1=targetResource;     String targetSubstring2=null;     if (targetIndex >= 0) {       targetSubstring1=targetResource.substring(0,targetIndex);       if (targetResource.length() > (targetIndex + 1)) {         targetSubstring2=targetResource.substring(targetIndex + 1);       }     }     if (debug.messageEnabled()) {       debug.message(\"HttpURLResourceName.compare: \" + \"request resource substring1=\" + requestSubstring1 + \"; request resource substring2=\"+ requestSubstring2+ \"; policy resource substring1=\"+ targetSubstring1+ \"; policy resource substring2=\"+ targetSubstring2);     }     ResourceMatch substring1Res=compare(requestSubstring1,targetSubstring1,wildcardCompare);     if ((substring1Res == ResourceMatch.EXACT_MATCH) || (substring1Res == ResourceMatch.WILDCARD_MATCH)) {       if (targetSubstring2 != null && targetSubstring2.equals(wildcard) && requestResource.contains(\"?\") && ((requestSubstring2 == null) || (requestSubstring2.trim().length() == 0))) {         return ResourceMatch.WILDCARD_MATCH;       }       if ((requestSubstring2 == null) || (requestSubstring2.trim().length() == 0)) {         return ResourceMatch.SUB_RESOURCE_MATCH;       }       if ((targetSubstring2 == null) || (targetSubstring2.trim().length() == 0)) {         return ResourceMatch.SUPER_RESOURCE_MATCH;       }       ResourceMatch substring2Res=compare(requestSubstring2,targetSubstring2,wildcardCompare);       if ((substring2Res == ResourceMatch.EXACT_MATCH) || (substring2Res == ResourceMatch.WILDCARD_MATCH)) {         if (substring1Res == substring2Res) {           result=substring2Res;         }  else {           result=ResourceMatch.WILDCARD_MATCH;         }       }     }  else {       result=substring1Res;     }     if (debug.messageEnabled()) {       debug.message(\"HttpURLResourceName.compare: with query string \" + \"; result=\" + result);     }     return result;   }   if ((!wildcardCompare) || !targetResource.endsWith(delimiter + wildcard)) {     return (super.compare(requestResource,targetResource,wildcardCompare));   }   ResourceMatch res=super.compare(requestResource,targetResource,wildcardCompare);   if ((res == ResourceMatch.EXACT_MATCH) || (res == ResourceMatch.WILDCARD_MATCH) || (res == ResourceMatch.SUPER_RESOURCE_MATCH)) {     res=ResourceMatch.WILDCARD_MATCH;   }  else   if (res == ResourceMatch.SUB_RESOURCE_MATCH) {     res=ResourceMatch.SUB_RESOURCE_MATCH;   }  else {     res=ResourceMatch.NO_MATCH;   }   if (debug.messageEnabled()) {     debug.message(\"HttpURLResourceName.compare: result=\" + res);   }   return res; } "
"public _PolicyStub(org.omg.CORBA.portable.Delegate delegate){   super();   _set_delegate(delegate); } "
"public void processingInstruction(String target,String data) throws SAXException {   charactersFlush();   int dataIndex=m_data.size();   m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,DTM.PROCESSING_INSTRUCTION_NODE,m_parents.peek(),m_previous,-dataIndex,false);   m_data.addElement(m_valuesOrPrefixes.stringToIndex(target));   m_values.addElement(data);   m_data.addElement(m_valueIndex++); } "
"private boolean testApplicableLists(AciEvalContext evalCtx){   evalCtx.setEvaluationResult(NO_REASON,null);   if (evalCtx.getAllowList().isEmpty() && (!evalCtx.isGetEffectiveRightsEval() || evalCtx.hasRights(ACI_SELF) || !evalCtx.isTargAttrFilterMatchAciEmpty())) {     evalCtx.setEvaluationResult(NO_ALLOW_ACIS,null);     return false;   }   for (  Aci denyAci : evalCtx.getDenyList()) {     final EnumEvalResult res=Aci.evaluate(evalCtx,denyAci);     if (EnumEvalResult.FAIL.equals(res)) {       evalCtx.setEvaluationResult(EVALUATED_DENY_ACI,denyAci);       return false;     }  else     if (EnumEvalResult.TRUE.equals(res)) {       if (testAndSetTargAttrOperationMatches(evalCtx,denyAci,true)) {         continue;       }       evalCtx.setEvaluationResult(EVALUATED_DENY_ACI,denyAci);       return false;     }   }   for (  Aci allowAci : evalCtx.getAllowList()) {     final EnumEvalResult res=Aci.evaluate(evalCtx,allowAci);     if (EnumEvalResult.TRUE.equals(res)) {       if (testAndSetTargAttrOperationMatches(evalCtx,allowAci,false)) {         continue;       }       evalCtx.setEvaluationResult(EVALUATED_ALLOW_ACI,allowAci);       return true;     }   }   evalCtx.setEvaluationResult(NO_MATCHED_ALLOWS_ACIS,null);   return false; } "
"public Object clone(){   DefaultMutableTreeNode newNode=null;   try {     newNode=(DefaultMutableTreeNode)super.clone();     newNode.children=null;     newNode.parent=null;   }  catch (  CloneNotSupportedException e) {     throw new Error(e.toString());   }   return newNode; } "
"public void runTo(int index){   if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_INDEX,null));   if ((index >= 0) && (m_next < m_firstFree))   m_next=index;  else   m_next=m_firstFree - 1; } "
"public void insertAt(int row,int[] values){   if ((row < 0) || (row > size())) {     throw new IndexOutOfBoundsException(\"row \" + row);   }   if ((values != null) && (values.length < width())) {     throw new IndexOutOfBoundsException(\"value count \" + values.length);   }   moveRowGapTo(row);   if (mRowGapLength == 0) {     growBuffer();   }   mRowGapStart++;   mRowGapLength--;   if (values == null) {     for (int i=mColumns - 1; i >= 0; i--) {       setValueInternal(row,i,0);     }   }  else {     for (int i=mColumns - 1; i >= 0; i--) {       setValueInternal(row,i,values[i]);     }   } } "
"public static boolean isEmpty(Iterable<?> iterable){   return !iterable.iterator().hasNext(); } "
"public DispatcherThreadPool(ExecutorService executorService){   this.executorService=executorService; } "
"boolean publish(ReplicationMsg msg,boolean retryOnFailure){   return publish(msg,false,retryOnFailure); } "
"@Override public void show(final FragmentManager manager,final String tag){   delegate.show(manager,tag); } "
"protected static void loadClassAnnotation(Context context,Class<?> classClass){   Resource resourceAnnotation=classClass.getAnnotation(Resource.class);   if (resourceAnnotation != null) {     addResource(context,resourceAnnotation);   }   Resources resourcesAnnotation=classClass.getAnnotation(Resources.class);   if (resourcesAnnotation != null && resourcesAnnotation.value() != null) {     for (    Resource resource : resourcesAnnotation.value()) {       addResource(context,resource);     }   }   DeclareRoles declareRolesAnnotation=classClass.getAnnotation(DeclareRoles.class);   if (declareRolesAnnotation != null && declareRolesAnnotation.value() != null) {     for (    String role : declareRolesAnnotation.value()) {       context.addSecurityRole(role);     }   } } "
"public static final short tertiaryOrder(int order){   return (short)CollationElementIteratorICU.tertiaryOrder(order); } "
"public DottedLine(float lineWidth,float gap){   this.lineWidth=lineWidth;   this.gap=gap; } "
"public void test_getPrivateKey(){   init(CLIENT);   assertNull(\"Not NULL for NULL parameter\",manager.getPrivateKey(null));   assertNull(\"Not NULL for serverAlias_00 parameter\",manager.getPrivateKey(\"serverAlias_00\"));   assertNull(\"Not NULL for clientAlias_02 parameter\",manager.getPrivateKey(\"clientAlias_02\")); } "
"public void testCreateDocument1() throws Throwable {   String namespaceURI=\"http://www.ecommerce.org/\";   String malformedName=\"prefix::local\";   Document doc;   DocumentType docType=null;   DOMImplementation domImpl;   doc=(Document)load(\"staffNS\",builder);   domImpl=doc.getImplementation();   boolean success=false;   try {     domImpl.createDocument(namespaceURI,malformedName,docType);   }  catch (  DOMException ex) {     success=(ex.code == DOMException.NAMESPACE_ERR);   }   assertTrue(\"throw_NAMESPACE_ERR\",success); } "
"protected Container createMessageArea(){   JPanel top=new JPanel();   Border topBorder=(Border)DefaultLookup.get(optionPane,this,\"OptionPane.messageAreaBorder\");   if (topBorder != null) {     top.setBorder(topBorder);   }   top.setLayout(new BorderLayout());   Container body=new JPanel(new GridBagLayout());   Container realBody=new JPanel(new BorderLayout());   body.setName(\"OptionPane.body\");   realBody.setName(\"OptionPane.realBody\");   if (getIcon() != null) {     JPanel sep=new JPanel();     sep.setName(\"OptionPane.separator\");     sep.setPreferredSize(new Dimension(15,1));     realBody.add(sep,BorderLayout.BEFORE_LINE_BEGINS);   }   realBody.add(body,BorderLayout.CENTER);   GridBagConstraints cons=new GridBagConstraints();   cons.gridx=cons.gridy=0;   cons.gridwidth=GridBagConstraints.REMAINDER;   cons.gridheight=1;   cons.anchor=DefaultLookup.getInt(optionPane,this,\"OptionPane.messageAnchor\",GridBagConstraints.CENTER);   cons.insets=new Insets(0,0,3,0);   addMessageComponents(body,cons,getMessage(),getMaxCharactersPerLineCount(),false);   top.add(realBody,BorderLayout.CENTER);   addIcon(top);   return top; } "
"public void testSealedObject1() throws Exception {   String secret=\"secret string\";   try {     new SealedObject(secret,null);     fail(\"NullPointerException should be thrown in the case \" + \"of null cipher.\");   }  catch (  NullPointerException e) {   }   KeyGenerator kg=KeyGenerator.getInstance(\"DES\");   Key key=kg.generateKey();   IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});   Cipher cipher=Cipher.getInstance(\"DES/CBC/PKCS5Padding\");   cipher.init(Cipher.ENCRYPT_MODE,key,ips);   SealedObject so=new SealedObject(secret,cipher);   cipher=Cipher.getInstance(\"DES/CBC/NoPadding\");   cipher.init(Cipher.ENCRYPT_MODE,key,ips);   try {     new SealedObject(secret,cipher);     fail(\"IllegalBlockSizeException expected\");   }  catch (  IllegalBlockSizeException e) {   } } "
"protected final void walk(File startDirectory,Collection<T> results) throws IOException {   if (startDirectory == null) {     throw new NullPointerException(\"Start Directory is null\");   }   try {     handleStart(startDirectory,results);     walk(startDirectory,0,results);     handleEnd(results);   }  catch (  CancelException cancel) {     handleCancelled(startDirectory,results,cancel);   } } "
"public String[][] logRecRead(Set fileNames,LogQuery logQuery,boolean sourceData) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {   this.cleaner();   Set fNames=new HashSet();   boolean isFirstFile=true;   for (Iterator it=fileNames.iterator(); it.hasNext(); ) {     String ss=(String)it.next();     fNames.add(ss);     this.logFileName=ss;     if (Debug.messageEnabled()) {       Debug.message(\"File:logRecRead/2: processing file \" + ss + \", sourceData = \"+ sourceData);     }     boolean hdrExist=false;     if (sourceData == true) {       queryChriteria=logQuery;     }     try {       hdrExist=this.getFieldNames(isFirstFile,logQuery);       isFirstFile=false;     }  catch (    IOException e) {       throw e;     } catch (    RuntimeException e) {       throw e;     } catch (    Exception e) {       throw e;     }     if (hdrExist == false) {       return queryResult;     }     if (logQuery != null) {       if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) || (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS)) {         this.maxNoOfRecs=1;       }  else {         this.maxNoOfRecs=logQuery.getNumRecordsWanted();       }     }  else {       this.maxNoOfRecs=1;     }     try {       if (sourceData == true) {         this.getRecordsMulti(true);       }  else {         this.getRecordsMulti(false);       }     }  catch (    IOException e) {       throw e;     } catch (    IllegalArgumentException e) {       throw e;     } catch (    RuntimeException e) {       throw e;     } catch (    Exception e) {       throw e;     }   }   int recSize=listOfValidRecords.size();   if (recSize <= 0) {     return null;   }   if (queryChriteria != null) {     String sortByField=queryChriteria.getSortingField();     if (sortByField != null) {       try {         this.sorter=new LogRecordSorter(sortByField,listOfValidRecords);         queryResult=this.sorter.getSortedRecords();         return (queryResult);       }  catch (      NoSuchFieldException e) {         throw e;       } catch (      IllegalArgumentException e) {         throw e;       } catch (      RuntimeException e) {         throw e;       } catch (      Exception e) {         throw e;       }     }   }   queryResult=new String[recSize][];   for (int i=0; i < recSize; i++) {     queryResult[i]=(String[])listOfValidRecords.get(i);   }   return queryResult; } "
"public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){   int f=foreground.getRGB();   int g=background.getRGB();   java.awt.Canvas canvas=new java.awt.Canvas();   int width=bm.getWidth();   int height=bm.getHeight();   int[] pix=new int[width * height];   byte[][] mt=bm.getArray();   for (int y=0; y < height; ++y) {     byte[] line=mt[y];     for (int x=0; x < width; ++x) {       pix[y * width + x]=line[x] == 0 ? f : g;     }   }   java.awt.Image img=canvas.createImage(new java.awt.image.MemoryImageSource(width,height,pix,0,width));   return img; } "
"public void testIsSearchable(){   try {     assertTrue(rsmd.isSearchable(1));     assertTrue(rsmd.isSearchable(2));     assertTrue(rsmd.isSearchable(3));   }  catch (  SQLException e1) {     fail(\"ResultSetMetaDataTest.isReadOnly\" + e1.getMessage());     e1.printStackTrace();   }   try {     rsmd.isSearchable(0);     fail(\"SQLException is not thrown\");   }  catch (  SQLException e) {   } } "
"private static synchronized String makeDateStringGnuStep(Date date){   return sdfGnuStep.format(date); } "
"public ObjectName(String name) throws MalformedObjectNameException {   construct(name); } "
"public X509Name(boolean reverse,String dirName){   this(reverse,DefaultLookUp,dirName); } "
"@Override public String toString(){   return name; } "
"private static int[] stripLeadingZeroInts(int val[]){   int vlen=val.length;   int keep;   for (keep=0; keep < vlen && val[keep] == 0; keep++)   ;   return java.util.Arrays.copyOfRange(val,keep,vlen); } "
"public boolean isAbsolute(){   return scheme != null; } "
"public ModSet(AttrSet attrSet,int op){   for (int i=0; i < attrSet.size(); i++) {     this.add(op,attrSet.elementAt(i).toLDAPAttribute());   } } "
"public FrameBodyTLEN(){ } "
"public final boolean isUnresolved(){   return holder.isUnresolved(); } "
"public IntIteratorSpliterator(PrimitiveIterator.OfInt iterator,long size,int characteristics){   this.it=iterator;   this.est=size;   this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics; } "
"@SuppressWarnings(\"unused\") public static long parseLong(byte[] bytes){   return parseLong(bytes,0,bytes.length); } "
"public Object put(Object key,Object value){   internalPut((CompositeData)value);   return value; } "
"public com.sun.identity.liberty.ws.idpp.jaxb.LJobTitleElement createLJobTitleElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LJobTitleElementImpl(); } "
"private void fireAdjustmentValueChanged(int id,int type,int value,boolean isAdjusting){   Object[] listeners=listenerList.getListenerList();   AdjustmentEvent e=null;   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == AdjustmentListener.class) {       if (e == null) {         e=new AdjustmentEvent(this,id,type,value,isAdjusting);       }       ((AdjustmentListener)listeners[i + 1]).adjustmentValueChanged(e);     }   } } "
"static void checkTypeRefAndPath(int typeRef,TypePath typePath){   int mask=0; switch (typeRef >>> 24) { case TypeReference.CLASS_TYPE_PARAMETER: case TypeReference.METHOD_TYPE_PARAMETER: case TypeReference.METHOD_FORMAL_PARAMETER:     mask=0xFFFF0000;   break; case TypeReference.FIELD: case TypeReference.METHOD_RETURN: case TypeReference.METHOD_RECEIVER: case TypeReference.LOCAL_VARIABLE: case TypeReference.RESOURCE_VARIABLE: case TypeReference.INSTANCEOF: case TypeReference.NEW: case TypeReference.CONSTRUCTOR_REFERENCE: case TypeReference.METHOD_REFERENCE: mask=0xFF000000; break; case TypeReference.CLASS_EXTENDS: case TypeReference.CLASS_TYPE_PARAMETER_BOUND: case TypeReference.METHOD_TYPE_PARAMETER_BOUND: case TypeReference.THROWS: case TypeReference.EXCEPTION_PARAMETER: mask=0xFFFFFF00; break; case TypeReference.CAST: case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT: case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT: mask=0xFF0000FF; break; default : throw new IllegalArgumentException(\"Invalid type reference sort 0x\" + Integer.toHexString(typeRef >>> 24)); } if ((typeRef & ~mask) != 0) { throw new IllegalArgumentException(\"Invalid type reference 0x\" + Integer.toHexString(typeRef)); } if (typePath != null) { for (int i=0; i < typePath.getLength(); ++i) { int step=typePath.getStep(i); if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) { throw new IllegalArgumentException(\"Invalid type path step \" + i + \" in \"+ typePath); } if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) { throw new IllegalArgumentException(\"Invalid type path step argument for step \" + i + \" in \"+ typePath); } } } } "
"public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {   Object result; switch (t) { case CLASS_STRING:     result=str();   break; case CLASS_NUMBER: result=new Double(num()); break; case CLASS_NODESET: result=iter(); break; case CLASS_BOOLEAN: result=new Boolean(bool()); break; case CLASS_UNKNOWN: result=m_obj; break; default : error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)}); result=null; } return result; } "
"public void endElement(String uri,String localName,String qName) throws SAXException {   if (contentHandler != null) {     contentHandler.endElement(uri,localName,qName);   } } "
"private void processModification(Modification m) throws DirectoryException {   Attribute attr=m.getAttribute(); switch (m.getModificationType().asEnum()) { case ADD:     processAddModification(attr);   break; case DELETE: processDeleteModification(attr); break; case REPLACE: processReplaceModification(attr); break; case INCREMENT: processIncrementModification(attr); break; } } "
"public SAMLv2AuthnAuthorityViewBean(){   super(\"SAMLv2AuthnAuthority\");   setDefaultDisplayURL(DEFAULT_DISPLAY_URL); } "
"public void addAttachment(String attachmentText) throws MessagingException {   MimeBodyPart attachment=new MimeBodyPart();   attachment.setText(attachmentText);   attachments.add(attachment); } "
"public void navigateToPoint(LatLng latLng,float tilt,float bearing,float zoom,boolean animate){   CameraPosition position=new CameraPosition.Builder().target(latLng).zoom(zoom).bearing(bearing).tilt(tilt).build();   changeCameraPosition(position,animate); } "
"public NetObjectList(){   super(); } "
"public boolean boolValue(){   if (type == BOOLEAN)   return boolValue;  else   return longValue != 0; } "
"private void cleanUpInstance(){ synchronized (lock) {     try {       logger.trace(\"Cleaning up instance\");       List<Trigger> storedTriggers=new ArrayList<>();       String[] groupNames=getTriggerGroupNames(null);       for (      String groupName : groupNames) {         String[] triggerNames=getTriggerNames(null,groupName);         for (        String triggerName : triggerNames) {           storedTriggers.add(getTriggerWrapper(groupName,triggerName).getTrigger());         }       }       WaitingTriggers wt=getWaitingTriggers();       TreeSet<Trigger> waitingTriggers=wt.getTriggers();       for (      Trigger t : waitingTriggers) {         storedTriggers.remove(t);       }       AcquiredTriggers at=getAcquiredTriggers(instanceId);       List<Trigger> acquiredTriggers=at.getTriggers();       for (      Trigger t : acquiredTriggers) {         if (hasTriggerMisfired(t)) {           logger.trace(\"Trigger {} has misfired\",t.getName());           processTriggerMisfired(getTriggerWrapper(t.getGroup(),t.getName()));           if (t.getNextFireTime() != null) {             removeAcquiredTrigger(t,instanceId);           }         }  else {           releaseAcquiredTrigger(null,t);         }       }       for (      Trigger t : storedTriggers) {         logger.trace(\"Adding trigger {} waitingTriggers\",t.getName());         addWaitingTrigger(t);       }     }  catch (    JobPersistenceException e) {       logger.warn(\"Error initializing RepoJobStore\",e);     }   } } "
"public PdfCanvas openTag(CanvasTag tag){   if (tag.getRole() == null)   return this;   return beginMarkedContent(tag.getRole(),tag.getProperties()); } "
"public Object clone() throws CloneNotSupportedException {   WalkingIterator clone=(WalkingIterator)super.clone();   if (null != m_firstWalker) {     clone.m_firstWalker=m_firstWalker.cloneDeep(clone,null);   }   return clone; } "
"protected boolean handlingMyLastProtocolMessage(List<ProtocolMessage> protocolMessages,int pointer){   return ((protocolMessages.size() == (pointer + 1)) || (protocolMessages.get(pointer + 1).getMessageIssuer() != tlsContext.getMyConnectionEnd()) || (protocolMessages.get(pointer + 1).getProtocolMessageType() == ProtocolMessageType.APPLICATION_DATA)); } "
"public void w(Object str){   if (logFlag) {     if (logLevel <= android.util.Log.WARN) {       String name=getFunctionName();       if (name != null) {         android.util.Log.w(tag,name + \" - \" + str);       }  else {         android.util.Log.w(tag,str.toString());       }     }   } } "
"public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnRequestType createAuthnRequestType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnRequestTypeImpl(); } "
"@BeforeClass public static void initClass(){   scenario=Scenarios.s13_gitflow();   if (Misc.isDebugMode()) {     System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());   } } "
"public Builder requiredAttributes(final String... attributeNamesOrOIDs){   this.requiredAttributes.addAll(asList(attributeNamesOrOIDs));   return this; } "
"public SQLTransientException(String reason,String sqlState,int vendorCode,Throwable cause){   super(reason,sqlState,vendorCode,cause); } "
"public AtomicReference(){ } "
"@Override public URLConnection openConnection(URL url,Proxy proxy) throws IOException {   if (url == null) {     throw new IllegalArgumentException(\"url == null\");   }   String host=url.getHost();   if (host == null || host.isEmpty() || host.equalsIgnoreCase(\"localhost\")) {     return new FileURLConnection(url);   }   URL ftpURL=new URL(\"ftp\",host,url.getFile());   return (proxy == null) ? ftpURL.openConnection() : ftpURL.openConnection(proxy); } "
"public Builder removeName(String name){   this.names.remove(name);   return this; } "
"public void test_DivideBigDecimalRoundingModeHALF_EVEN(){   String a=\"3736186567876876578956958765675671119238118911893939591735\";   String b=\"74723342238476237823787879183470\";   RoundingMode rm=RoundingMode.HALF_EVEN;   String c=\"50000260373164286401361913\";   BigDecimal aNumber=new BigDecimal(new BigInteger(a));   BigDecimal bNumber=new BigDecimal(new BigInteger(b));   BigDecimal result=aNumber.divide(bNumber,rm);   assertEquals(\"incorrect value\",c,result.toString()); } "
"protected static Collection findIssuerCerts(X509Certificate cert,ExtendedPKIXBuilderParameters pkixParams) throws AnnotatedException {   X509CertStoreSelector certSelect=new X509CertStoreSelector();   Set certs=new HashSet();   try {     certSelect.setSubject(cert.getIssuerX500Principal().getEncoded());   }  catch (  IOException ex) {     throw new AnnotatedException(\"Subject criteria for certificate selector to find issuer certificate could not be set.\",ex);   }   Iterator iter;   try {     List matches=new ArrayList();     matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getCertStores()));     matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getStores()));     matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getAdditionalStores()));     iter=matches.iterator();   }  catch (  AnnotatedException e) {     throw new AnnotatedException(\"Issuer certificate cannot be searched.\",e);   }   X509Certificate issuer=null;   while (iter.hasNext()) {     issuer=(X509Certificate)iter.next();     certs.add(issuer);   }   return certs; } "
"public static String lower(String self){   return self.toLowerCase(); } "
"public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){   super(source,propertyName,oldValue,newValue);   this.index=index; } "
"public LongMap(){   this(32,0.8f); } "
"@Deprecated protected void drawButton(PdfCanvas canvas,float x,float y,float width,float height,String text,PdfFont font,int fontSize){   drawButton(canvas,x,y,width,height,text,font,(float)fontSize); } "
"public static void addErrorMessage(ConfigChangeResult ccr,LocalizableMessage message){   ccr.setResultCode(DirectoryServer.getServerErrorResultCode());   ccr.addMessage(message); } "
"public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode){   super(reason,sqlState,vendorCode); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   ElemTemplateElement templElem=(ElemTemplateElement)xctxt.getNamespaceContext();   StylesheetRoot ss=templElem.getStylesheetRoot();   java.text.DecimalFormat formatter=null;   java.text.DecimalFormatSymbols dfs=null;   double num=getArg0().execute(xctxt).num();   String patternStr=getArg1().execute(xctxt).str();   if (patternStr.indexOf(0x00A4) > 0)   ss.error(XSLTErrorResources.ER_CURRENCY_SIGN_ILLEGAL);   try {     Expression arg2Expr=getArg2();     if (null != arg2Expr) {       String dfName=arg2Expr.execute(xctxt).str();       QName qname=new QName(dfName,xctxt.getNamespaceContext());       dfs=ss.getDecimalFormatComposed(qname);       if (null == dfs) {         warn(xctxt,XSLTErrorResources.WG_NO_DECIMALFORMAT_DECLARATION,new Object[]{dfName});       }  else {         formatter=new java.text.DecimalFormat();         formatter.setDecimalFormatSymbols(dfs);         formatter.applyLocalizedPattern(patternStr);       }     }     if (null == formatter) {       dfs=ss.getDecimalFormatComposed(new QName(\"\"));       if (dfs != null) {         formatter=new java.text.DecimalFormat();         formatter.setDecimalFormatSymbols(dfs);         formatter.applyLocalizedPattern(patternStr);       }  else {         dfs=new java.text.DecimalFormatSymbols(java.util.Locale.US);         dfs.setInfinity(Constants.ATTRVAL_INFINITY);         dfs.setNaN(Constants.ATTRVAL_NAN);         formatter=new java.text.DecimalFormat();         formatter.setDecimalFormatSymbols(dfs);         if (null != patternStr)         formatter.applyLocalizedPattern(patternStr);       }     }     return new XString(formatter.format(num));   }  catch (  Exception iae) {     templElem.error(XSLTErrorResources.ER_MALFORMED_FORMAT_STRING,new Object[]{patternStr});     return XString.EMPTYSTRING;   } } "
"@Override public boolean equals(Object obj){   if (obj == null)   return false;   if (!super.equals(obj))   return false;   DecimalFormat other=(DecimalFormat)obj;   return ((posPrefixPattern == other.posPrefixPattern && positivePrefix.equals(other.positivePrefix)) || (posPrefixPattern != null && posPrefixPattern.equals(other.posPrefixPattern))) && ((posSuffixPattern == other.posSuffixPattern && positiveSuffix.equals(other.positiveSuffix)) || (posSuffixPattern != null && posSuffixPattern.equals(other.posSuffixPattern))) && ((negPrefixPattern == other.negPrefixPattern && negativePrefix.equals(other.negativePrefix)) || (negPrefixPattern != null && negPrefixPattern.equals(other.negPrefixPattern)))&& ((negSuffixPattern == other.negSuffixPattern && negativeSuffix.equals(other.negativeSuffix)) || (negSuffixPattern != null && negSuffixPattern.equals(other.negSuffixPattern)))&& multiplier == other.multiplier && groupingSize == other.groupingSize && decimalSeparatorAlwaysShown == other.decimalSeparatorAlwaysShown && parseBigDecimal == other.parseBigDecimal && useExponentialNotation == other.useExponentialNotation && (!useExponentialNotation || minExponentDigits == other.minExponentDigits) && maximumIntegerDigits == other.maximumIntegerDigits && minimumIntegerDigits == other.minimumIntegerDigits && maximumFractionDigits == other.maximumFractionDigits && minimumFractionDigits == other.minimumFractionDigits && roundingMode == other.roundingMode && symbols.equals(other.symbols); } "
"public boolean isLeftToRight(){   return textLine.isDirectionLTR(); } "
"static void selfInterrupt(){   Thread.currentThread().interrupt(); } "
"public ConfigManagerFatalException(String s){   super(s); } "
"private void testGetProviders(Locale locale){   Locale defaultLocale=Locale.getDefault();   Locale.setDefault(locale);   Provider p=new MyProvider();   try {     Security.addProvider(p);     String filter=\"MyService.MyAlgorithm\";     assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));     filter=\"MyService.MyAlgorithm KeySize:512\";     assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));     filter=\"MyService.MyAlgorithm KeySize:1025\";     assertNull(filter,Security.getProviders(filter));     filter=\"MyService.MyAlgorithm imPLementedIn:softWARE\";     assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));     filter=\"MyService.MyAlgorithm ATTribute:attributeVALUE\";     assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));     filter=\"MyService.MyAlgorithm \\u0130mPLemented\\u0131n:softWARE\";     assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));     filter=\"MyService.NoKeySize KeySize:512\";     assertNull(filter,Security.getProviders(filter));     filter=\"MyService.NoImplementedIn ImplementedIn:Software\";     assertNull(filter,Security.getProviders(filter));     filter=\"ABCService.NoAttribute Attribute:ABC\";     assertNull(filter,Security.getProviders(filter));   }   finally {     Security.removeProvider(p.getName());     Locale.setDefault(defaultLocale);   } } "
"@Override public synchronized long skip(final long length) throws IOException {   final long skip=super.skip(length);   this.count+=skip;   return skip; } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportIssuedTokensElement createMustSupportIssuedTokensElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportIssuedTokensElementImpl(); } "
"public void write(int b) throws IOException {   wbuf[0]=(byte)b;   write(wbuf,0,1); } "
"public void delete() throws IOException {   cache.delete(); } "
"public InvalidAttributeIdentifierException(){   super(); } "
"public static void registerSynchronizationProvider(SynchronizationProvider<SynchronizationProviderCfg> provider){   directoryServer.synchronizationProviders.add(provider);   provider.completeSynchronizationProvider(); } "
"private Set<TaskEntry> createDummyTaskList(){   Set<TaskEntry> list=new HashSet<>();   for (int i=0; i < 10; i++) {     Entry csr=new LinkedHashMapEntry(\"cn=mytask\" + i + \",cn=tasks\");     String p=\"ds-task-\";     String[] attrNames={p + \"id\",p + \"class-name\",p + \"state\",p + \"scheduled-start-time\",p + \"actual-start-time\",p + \"completion-time\",p + \"dependency-id\",p + \"failed-dependency-action\",p + \"log-message\",p + \"notify-on-error\",p + \"notify-on-completion\",p + \"ds-recurring-task-schedule\"};     String[] values={\"A very 29-backup - Sun Mar 29 00:00:00 MET 2009\",\"A long task type\",\"A very long task status\",\"Schedule Start Time\",\"Actual Start Time\",\"Completion Time\",\"Dependency ID\",\"Failed Dependency Action\",\"Log LocalizableMessage.                              Should be pretty long\\n\" + \"Log LocalizableMessage.                              Should be pretty long\\n\" + \"Log LocalizableMessage.                              Should be pretty long\\n\"+ \"Log LocalizableMessage.                              Should be pretty long\\n\"+ \"Log LocalizableMessage.                              Should be pretty long\\n\",\"Notify On Error\",\"Notify On Completion\",\"Recurring Task Schedule\"};     for (int j=0; j < attrNames.length; j++) {       final LinkedAttribute attr=new LinkedAttribute(attrNames[j]);       attr.add(values[j]);       csr.removeAttribute(attr.getAttributeDescription());       csr.addAttribute(attr);     }     try {       list.add(new TaskEntry(Converters.to(csr)));     }  catch (    Throwable t) {       logger.error(LocalizableMessage.raw(\"Error getting entry '\" + csr.getName() + \"': \"+ t,t));     }   }   return list; } "
"protected void firePseudoAttributes(){   if (m_tracer != null) {     try {       m_writer.flush();       StringBuffer sb=new StringBuffer();       int nAttrs=m_attributes.getLength();       if (nAttrs > 0) {         java.io.Writer writer=new ToStream.WritertoStringBuffer(sb);         processAttributes(writer,nAttrs);       }       sb.append('>');       char ch[]=sb.toString().toCharArray();       m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);     }  catch (    IOException ioe) {     } catch (    SAXException se) {     }   } } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String realm=getStringOptionValue(IArgument.REALM_NAME);   String agentName=getStringOptionValue(IArgument.AGENT_NAME);   String outfile=getStringOptionValue(IArgument.OUTPUT_FILE);   boolean includeHashedPassword=isOptionSet(IArgument.AGENT_HASHED_PASSWORD);   boolean inherit=isOptionSet(OPT_INHERIT);   String[] params={realm,agentName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_SHOW_AGENT\",params);     AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENTONLY,realm,null);     if (!amid.isExists()) {       String[] args={realm,agentName,\"agent did not exist\"};       writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_SHOW_AGENT\",args);       Object[] p={agentName};       String msg=MessageFormat.format(getResourceString(\"show-agent-agent-does-not-exist\"),p);       throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);     }     Map values=AgentConfiguration.getAgentAttributes(adminSSOToken,realm,agentName,inherit);     Set passwords=AgentConfiguration.getAttributesSchemaNames(amid,AttributeSchema.Syntax.PASSWORD);     String agentType=AgentConfiguration.getAgentType(amid);     if (AgentConfiguration.AGENT_TYPE_OAUTH2.equals(agentType)) {       includeHashedPassword=false;     }     if ((values != null) && !values.isEmpty()) {       StringBuilder buff=new StringBuilder();       List<String> sortedKeys=new ArrayList<String>(values.keySet());       Collections.sort(sortedKeys);       for (      String attrName : sortedKeys) {         if (includeHashedPassword || !passwords.contains(attrName)) {           Set vals=(Set)values.get(attrName);           if (vals != null) {             if (vals.isEmpty()) {               buff.append(attrName).append(\"=\").append(\"\\n\");             }  else {               for (Iterator j=vals.iterator(); j.hasNext(); ) {                 String val=(String)j.next();                 buff.append(attrName).append(\"=\").append(val).append(\"\\n\");               }             }           }         }       }       if (outfile == null) {         outputWriter.printlnMessage(buff.toString());       }  else {         writeToFile(outfile,buff.toString());         outputWriter.printlnMessage(getResourceString(\"show-agent-to-file\"));       }     }  else {       outputWriter.printlnMessage(getResourceString(\"show-agent-no-attributes\"));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_SHOW_AGENT\",params);   }  catch (  SMSException e) {     String[] args={realm,agentName,e.getMessage()};     debugError(\"ShowAgent.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_SHOW_AGENT\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  IdRepoException e) {     String[] args={realm,agentName,e.getMessage()};     debugError(\"ShowAgent.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_SHOW_AGENT\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={realm,agentName,e.getMessage()};     debugError(\"ShowAgent.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_SHOW_AGENT\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {   DTM dtm=xctxt.getDTM(context);   short nodeType=dtm.getNodeType(context);   if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;   int nodeBit=(m_whatToShow & (0x00000001 << (nodeType - 1))); switch (nodeBit) { case DTMFilter.SHOW_DOCUMENT_FRAGMENT: case DTMFilter.SHOW_DOCUMENT:     return SCORE_OTHER; case DTMFilter.SHOW_COMMENT:   return m_score; case DTMFilter.SHOW_CDATA_SECTION: case DTMFilter.SHOW_TEXT: return m_score; case DTMFilter.SHOW_PROCESSING_INSTRUCTION: return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE; case DTMFilter.SHOW_NAMESPACE: { String ns=dtm.getLocalName(context); return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE; } case DTMFilter.SHOW_ATTRIBUTE: case DTMFilter.SHOW_ELEMENT: { return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE; } default : return SCORE_NONE; } } "
"public static void removeMapEntries(Map map,Set set){   if ((set != null) && !set.isEmpty()) {     for (Iterator iter=set.iterator(); iter.hasNext(); ) {       map.remove(iter.next());     }   } } "
"private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {   int[] leftTopBlack=image.getTopLeftOnBit();   int[] rightBottomBlack=image.getBottomRightOnBit();   if (leftTopBlack == null || rightBottomBlack == null) {     throw NotFoundException.getNotFoundInstance();   }   int moduleSize=moduleSize(leftTopBlack,image);   int top=leftTopBlack[1];   int bottom=rightBottomBlack[1];   int left=leftTopBlack[0];   int right=rightBottomBlack[0];   int matrixWidth=(right - left + 1) / moduleSize;   int matrixHeight=(bottom - top + 1) / moduleSize;   if (matrixWidth <= 0 || matrixHeight <= 0) {     throw NotFoundException.getNotFoundInstance();   }   int nudge=moduleSize / 2;   top+=nudge;   left+=nudge;   BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);   for (int y=0; y < matrixHeight; y++) {     int iOffset=top + y * moduleSize;     for (int x=0; x < matrixWidth; x++) {       if (image.get(left + x * moduleSize,iOffset)) {         bits.set(x,y);       }     }   }   return bits; } "
"public static boolean isBookSearchUrl(String url){   return url.startsWith(\"http://google.com/books\") || url.startsWith(\"http://books.google.\"); } "
"public String put(String url,String json,Map<String,String> headers,final int expectedStatusCode){   HttpPut put=new HttpPut(url);   if (json != null) {     put.setEntity(new StringEntity(json,ContentType.APPLICATION_JSON));   }   setHeaders(put,headers);   return method(put,expectedStatusCode); } "
"public SAXException(Exception e){   this.exception=e; } "
"public RuntimeCryptoException(String message){   super(message); } "
"public static double distanceToRadians(double distance) throws TurfException {   return distanceToRadians(distance,TurfConstants.UNIT_DEFAULT); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   String s1=m_arg0.execute(xctxt).str();   String s2=m_arg1.execute(xctxt).str();   if (s1.length() == 0 && s2.length() == 0)   return XBoolean.S_TRUE;   int index=s1.indexOf(s2);   return (index > -1) ? XBoolean.S_TRUE : XBoolean.S_FALSE; } "
"private static Map<String,MappedClass> generateClassMapping(ClassNode node,Map<String,ClassNode> nodes,Map<String,MappedClass> mappings){   boolean hasParents=!node.name.equals(\"java/lang/Object\");   boolean hasInterfaces=node.interfaces.size() > 0;   if (hasParents) {     boolean parentRenamed=mappings.containsKey(node.superName);     ClassNode parentNode=nodes.get(node.superName);     if (parentNode != null && !parentRenamed) {       boolean conflict=ParentUtils.isLoop(node,nodes,0);       if (conflict) {         parentNode.superName=\"java/lang/Object\";       }  else {         generateClassMapping(parentNode,nodes,mappings);       }     }   }   if (hasInterfaces) {     for (    String interfaze : node.interfaces) {       boolean interfaceRenamed=mappings.containsKey(interfaze);       ClassNode interfaceNode=nodes.get(interfaze);       if (interfaceNode != null && !interfaceRenamed) {         generateClassMapping(interfaceNode,nodes,mappings);       }     }   }   if (!mappings.containsKey(node.name)) {     MappedClass mappedClass=new MappedClass(node,node.name);     for (    FieldNode fn : node.fields) {       mappedClass.addField(new MappedMember(mappedClass,fn,mappedClass.getFields().size(),fn.desc,fn.name));     }     for (    MethodNode mn : node.methods) {       mappedClass.addMethod(new MappedMember(mappedClass,mn,mappedClass.getMethods().size(),mn.desc,mn.name));     }     mappings.put(node.name,mappedClass);   }   return mappings; } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodecommentnodetype.class,args); } "
"public DataServerHandler(Session session,int queueSize,ReplicationServer replicationServer,int rcvWindowSize){   super(session,queueSize,replicationServer,rcvWindowSize); } "
"public boolean isRelationship(){   return type == SchemaFieldType.RELATIONSHIP; } "
"public UserNamePasswordValidationException(String message){   super(message); } "
"public boolean equals(Object obj){   if (!(obj instanceof BasicStroke)) {     return false;   }   BasicStroke bs=(BasicStroke)obj;   if (width != bs.width) {     return false;   }   if (join != bs.join) {     return false;   }   if (cap != bs.cap) {     return false;   }   if (miterlimit != bs.miterlimit) {     return false;   }   if (dash != null) {     if (dash_phase != bs.dash_phase) {       return false;     }     if (!java.util.Arrays.equals(dash,bs.dash)) {       return false;     }   }  else   if (bs.dash != null) {     return false;   }   return true; } "
"public Object clone() throws CloneNotSupportedException {   try {     UnicastRemoteObject cloned=(UnicastRemoteObject)super.clone();     cloned.reexport();     return cloned;   }  catch (  RemoteException e) {     throw new ServerCloneException(\"Clone failed\",e);   } } "
"public INVALID_ACTIVITY(String detailMessage){   this(detailMessage,0,CompletionStatus.COMPLETED_NO); } "
"private ClassDef parse_class() throws SyntaxException {   LineCol lineCol=current.getLineCol();   Set<Modifier> set=new HashSet<>(modifiers);   modifiers.clear();   Set<AST.Anno> annos=new HashSet<>(this.annos);   this.annos.clear();   nextNode(false);   if (current instanceof Element) {     String name=((Element)current).getContent();     if (current.getTokenType() != TokenType.VALID_NAME) {       err.UnexpectedTokenException(\"valid class name\",name,current.getLineCol());       err.debug(\"assume the token is a valid name\");     }     List<VariableDef> params=null;     Set<String> newParamNames=new HashSet<>();     nextNode(true);     if (current instanceof Element) {       String p=((Element)current).getContent(); switch (p) { case \"(\":         nextNode(false);       if (current instanceof ElementStartNode) {         List<Statement> list=parseElemStart((ElementStartNode)current,false,Collections.emptySet(),false);         params=new ArrayList<>();         boolean MustHaveInit=false;         for (        Statement stmt : list) {           if (stmt instanceof AST.Access) {             if (MustHaveInit) {               err.SyntaxException(\"expecting parameter with init value\",stmt.line_col());               err.debug(\"assume it has init value\");             }             AST.Access access=(AST.Access)stmt;             if (access.exp != null) {               err.SyntaxException(\"parameter cannot be \" + access.toString(),access.line_col());               err.debug(\"ignore access.exp\");             }             VariableDef v=new VariableDef(access.name,Collections.emptySet(),Collections.emptySet(),current.getLineCol());             params.add(v);             newParamNames.add(v.getName());           }  else           if (stmt instanceof VariableDef) {             if (((VariableDef)stmt).getInit() == null) {               if (MustHaveInit) {                 err.SyntaxException(\"expecting parameter with init value\",stmt.line_col());                 err.debug(\"assume it has init value\");               }             }  else {               MustHaveInit=true;             }             params.add((VariableDef)stmt);             newParamNames.add(((VariableDef)stmt).getName());           }  else {             err.SyntaxException(\"parameter cannot be \" + stmt.toString(),stmt.line_col());             err.debug(\"ignore this parameter def\");           }         }         nextNode(false);         expecting(\")\",current.previous(),current,err);         nextNode(true);       }  else       if (current instanceof Element) {         expecting(\")\",current.previous(),current,err);         params=Collections.emptyList();         nextNode(true);       }  else {         err.UnexpectedTokenException(current.toString(),current.getLineCol());         err.debug(\"ignore the parameters\");       }     break; case \":\":   break; default : err.UnexpectedTokenException(\"( or :\",p,current.getLineCol()); err.debug(\"ignore the token\"); nextNode(true); } } AST.Invocation invocation=null; List<AST.Access> accesses=new ArrayList<>(); if (current instanceof Element) { expecting(\":\",current.previous(),current,err); nextNode(false); while (true) { if (current.getTokenType() == TokenType.VALID_NAME) { Expression e=get_exp(true); if (e instanceof AST.Access) { accesses.add((AST.Access)e); }  else if (e instanceof AST.Invocation && ((AST.Invocation)e).exp instanceof AST.Access) { if (invocation == null) { invocation=(AST.Invocation)e; }  else { err.SyntaxException(\"Multiple Inheritance is not allowed\",e.line_col()); err.debug(\"ignore the arguments and only record the name\"); accesses.add((AST.Access)((AST.Invocation)e).exp); } }  else { err.SyntaxException(\"super class or super interfaces cannot be \" + e.toString(),e.line_col()); err.debug(\"ignore this inheritance\"); } if (current instanceof EndingNode && ((EndingNode)current).getType() == EndingNode.STRONG) { nextNode(true); }  else { break; } }  else { break; } } } List<Statement> stmts=null; if (current instanceof ElementStartNode) { stmts=parseElemStart((ElementStartNode)current,true,newParamNames,false); } return new ClassDef(name,set,params == null ? Collections.emptyList() : params,invocation,accesses,annos,stmts == null ? Collections.emptyList() : stmts,lineCol); }  else { err.UnexpectedTokenException(\"class name\",current.toString(),current.getLineCol()); err.debug(\"ignore this class definition\"); throw new ParseFail(); } } "
"private void checkInstallStatus() throws InitializationException {   final CurrentInstallStatus installStatus=new CurrentInstallStatus();   if (installStatus.canOverwriteCurrentInstall()) {     if (isInteractive()) {       println(installStatus.getInstallationMsg());       try {         if (!confirmAction(INFO_CLI_DO_YOU_WANT_TO_CONTINUE.get(),true)) {           throw new InitializationException(LocalizableMessage.EMPTY);         }       }  catch (      final ClientException ce) {         logger.error(LocalizableMessage.raw(\"Unexpected error: \" + ce,ce));         throw new InitializationException(LocalizableMessage.EMPTY,ce);       }     }  else {       println(installStatus.getInstallationMsg());     }   }  else   if (installStatus.isInstalled()) {     throw new InitializationException(installStatus.getInstallationMsg());   } } "
"public int compareTo(PlaLineInt p_other){   PlaPointInt other_a=p_other.point_a;   PlaPointInt other_b=p_other.point_b;   int dx1=point_b.v_x - point_a.v_x;   int dy1=point_b.v_y - point_a.v_y;   int dx2=other_b.v_x - other_a.v_x;   int dy2=other_b.v_y - other_a.v_y;   if (dy1 > 0) {     if (dy2 < 0) {       return -1;     }     if (dy2 == 0) {       if (dx2 > 0) {         return 1;       }       return -1;     }   }  else   if (dy1 < 0) {     if (dy2 >= 0) {       return 1;     }   }  else {     if (dx1 > 0) {       if (dy2 != 0 || dx2 < 0) {         return -1;       }       return 0;     }     if (dy2 > 0 || dy2 == 0 && dx2 > 0) {       return 1;     }     if (dy2 < 0) {       return -1;     }     return 0;   }   double determinant=(double)dx2 * dy1 - (double)dy2 * dx1;   return Signum.as_int(determinant); } "
"private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){   int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];   int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];   int index=0;   boolean end=false;   while ((codeIndex < codewords[0]) && !end) {     int code=codewords[codeIndex++];     if (code < TEXT_COMPACTION_MODE_LATCH) {       textCompactionData[index]=code / 30;       textCompactionData[index + 1]=code % 30;       index+=2;     }  else { switch (code) { case TEXT_COMPACTION_MODE_LATCH:         textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;       break; case BYTE_COMPACTION_MODE_LATCH: case BYTE_COMPACTION_MODE_LATCH_6: case NUMERIC_COMPACTION_MODE_LATCH: case BEGIN_MACRO_PDF417_CONTROL_BLOCK: case BEGIN_MACRO_PDF417_OPTIONAL_FIELD: case MACRO_PDF417_TERMINATOR:     codeIndex--;   end=true; break; case MODE_SHIFT_TO_BYTE_COMPACTION_MODE: textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE; code=codewords[codeIndex++]; byteCompactionData[index]=code; index++; break; } } } decodeTextCompaction(textCompactionData,byteCompactionData,index,result); return codeIndex; } "
"static String readOIDLen(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {   int length=1;   boolean enclosingQuote=false;   reader.skipWhitespaces();   reader.mark();   try {     char c=reader.read();     if (c == '\\'') {       enclosingQuote=true;       reader.mark();       c=reader.read();     }     if (isDigit(c)) {       boolean lastWasPeriod=false;       while ((c=reader.read()) != ' ' && c != '{' && (c != '\\'' || !enclosingQuote)) {         if (c == '.') {           if (lastWasPeriod) {             throw DecodeException.error(ERR_ATTR_SYNTAX_OID_CONSECUTIVE_PERIODS1.get(reader.pos() - 1));           }           lastWasPeriod=true;         }  else         if (!isDigit(c)) {           if (c == ')') {             break;           }           throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ILLEGAL_CHARACTER1.get(c,reader.pos() - 1));         }  else {           lastWasPeriod=false;         }         length++;       }       if (length == 0) {         throw DecodeException.error(ERR_ATTR_SYNTAX_OID_NO_VALUE1.get(reader.pos() - 1));       }     }  else     if (isAlpha(c)) {       while ((c=reader.read()) != ' ' && c != ')' && c != '{' && (c != '\\'' || !enclosingQuote)) {         if (length == 0 && !isAlpha(c)) {           throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));         }         if (!isKeyChar(c,allowCompatChars)) {           throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));         }         length++;       }     }  else {       throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));     }     reader.reset();     final String oid=reader.read(length);     reader.mark();     c=reader.read();     if (c == '{') {       reader.mark();       while ((c=reader.read()) != '}') {         if (!isDigit(c)) {           throw DecodeException.error(ERR_ATTR_SYNTAX_OID_ILLEGAL_CHARACTER1.get(reader.getString(),reader.pos() - 1));         }       }     }  else     if (c == '\\'') {       reader.mark();     }  else {       reader.reset();     }     return oid;   }  catch (  final StringIndexOutOfBoundsException e) {     throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());   } } "
"public MimeVersionParser(String mimeVersion){   super(mimeVersion); } "
"public FrameBodyTCMP(byte textEncoding,String text){   super(textEncoding,text); } "
"public static WindowMessage show(String[] p_messages){   return new WindowMessage(p_messages); } "
"public MaterialBarcodeScannerBuilder withText(String text){   mText=text;   return this; } "
"public final void testWriteint04() throws IOException {   OutputStream os=new ByteArrayOutputStream(MY_MESSAGE_LEN);   DigestOutputStream dos=new DigestOutputStream(os,null);   try {     for (int i=0; i < MY_MESSAGE_LEN; i++) {       dos.write(myMessage[i]);     }     fail(\"OutputStream not set. write(int) must not work\");   }  catch (  Exception e) {     return;   } } "
"public Enumeration pathFromAncestorEnumeration(TreeNode ancestor){   return new PathBetweenNodesEnumeration(ancestor,this); } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public void schemaChanged(String serviceName,String version){ } "
"private ConditionResult processSubstring(SearchFilter completeFilter,Entry entry) throws DirectoryException {   if (getAttributeType() == null) {     LocalizableMessage message=ERR_SEARCH_FILTER_SUBSTRING_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());     throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);   }   if (subInitialElement == null && subFinalElement == null && (subAnyElements == null || subAnyElements.isEmpty())) {     LocalizableMessage message=ERR_SEARCH_FILTER_SUBSTRING_NO_SUBSTRING_COMPONENTS.get(entry.getName(),toString(),getAttributeType().getNameOrOID());     throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);   }   Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);   if (isEmpty(attrs)) {     if (logger.isTraceEnabled()) {       logger.trace(\"Returning FALSE for substring component %s in \" + \"filter %s because entry %s didn't have attribute \" + \"type %s\",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());     }     return ConditionResult.FALSE;   }   ConditionResult result=ConditionResult.FALSE;   for (  Attribute a : attrs) { switch (a.matchesSubstring(subInitialElement,subAnyElements,subFinalElement)) { case TRUE:       if (logger.isTraceEnabled()) {         logger.trace(\"Returning TRUE for substring component %s in \" + \"filter %s for entry %s\",this,completeFilter,entry.getName());       }     return ConditionResult.TRUE; case FALSE:   break; case UNDEFINED: if (logger.isTraceEnabled()) {   logger.trace(\"Undefined result encountered for substring \" + \"component %s in filter %s for entry %s\",this,completeFilter,entry.getName()); } result=ConditionResult.UNDEFINED; break; default : } } if (logger.isTraceEnabled()) { logger.trace(\"Returning %s for substring component %s in filter \" + \"%s for entry %s\",result,this,completeFilter,entry.getName()); } return result; } "
"public com.sun.identity.saml2.jaxb.xmlsig.SignatureElement createSignatureElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureElementImpl(); } "
"private Set actionsInSet(String actions){   if (actionSet == null) {     actionSet=Collections.synchronizedSet(new HashSet());   }  else {     return actionSet;   }   if (actions != null) {     StringTokenizer st=new StringTokenizer(actions,\",\");     while (st.hasMoreTokens()) {       String action=(String)st.nextToken();       actionSet.add(action);     }   }   return actionSet; } "
"public SAAJResult(SOAPMessage message){   super(message.getSOAPPart()); } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"private void validateOpenidResponseTypes(ClientRegistration clientRegistration,Set<String> requestedResponseTypes) throws UnsupportedResponseTypeException {   if (requestedResponseTypes.contains(TOKEN) && !requestedResponseTypes.contains(CODE) && !requestedResponseTypes.contains(ID_TOKEN)) {     logger.debug(\"Response type is not supported. OpenId Connect client does not support scope=\\\"token\\\".\");     throw new UnsupportedResponseTypeException(\"Response type is not supported.\",Utils.getRequiredUrlLocation(requestedResponseTypes,clientRegistration));   } } "
"public void reset(){   Cell[] as=cells;   Cell a;   base=identity;   if (as != null) {     for (int i=0; i < as.length; ++i) {       if ((a=as[i]) != null)       a.value=identity;     }   } } "
"public LDAPResult doOperation(ObjectFactory objFactory,AbandonRequest abandonRequest,List<org.opends.server.types.Control> controls) throws LDAPException, IOException {   LDAPResult abandonResponse=objFactory.createLDAPResult();   String abandonIdStr=abandonRequest.getAbandonID();   int abandonId=0;   try {     abandonId=Integer.parseInt(abandonIdStr);   }  catch (  NumberFormatException nfe) {     throw new LDAPException(LDAPResultCode.UNWILLING_TO_PERFORM,LocalizableMessage.raw(nfe.getMessage()));   }   ProtocolOp op=new AbandonRequestProtocolOp(abandonId);   LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);   connection.getLDAPWriter().writeMessage(msg);   return abandonResponse; } "
"public ThreadLocal(){ } "
"public PaddedBufferedBlockCipher(BlockCipher cipher){   this(cipher,new PKCS7Padding()); } "
"public static void main(String[] args){   if (args.length == 1) {     System.out.println(hash(args[0]));   }  else   if (args.length == 2 && args[0].equals(\"-f\")) {     String passwd=readFromPasswordFile(args[1]);     if (passwd != null) {       System.out.println(hash(passwd.trim()));     }   } } "
"@Override protected void installDefaults(){   updateStyle(splitPane);   setOrientation(splitPane.getOrientation());   setContinuousLayout(splitPane.isContinuousLayout());   resetLayoutManager();   if (nonContinuousLayoutDivider == null) {     setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);   }  else {     setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);   }   if (managingFocusForwardTraversalKeys == null) {     managingFocusForwardTraversalKeys=new HashSet<KeyStroke>();     managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));   }   splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);   if (managingFocusBackwardTraversalKeys == null) {     managingFocusBackwardTraversalKeys=new HashSet<KeyStroke>();     managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));   }   splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys); } "
"public static Object checkSession(HttpServletRequest request,HttpServletResponse response,String metaAlias,Map paramsMap) throws SAML2Exception {   String method=\"SAML2Utils.checkSession : \";   Object session=null;   try {     session=SessionManager.getProvider().getSession(request);   }  catch (  SessionException se) {     if (debug.messageEnabled()) {       debug.message(method,se);     }     session=null;   }   String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);   String hostEntity=null;   String hostEntityRole=getHostEntityRole(paramsMap);   if (session == null) {     if (debug.messageEnabled()) {       debug.message(method + \"session is missing.\" + \"redirect to the authentication service\");     }     try {       hostEntity=saml2MetaManager.getEntityByMetaAlias(metaAlias);       redirectAuthentication(request,response,realm,hostEntity,hostEntityRole);     }  catch (    IOException ioe) {       debug.error(\"Unable to redirect to authentication.\");       throw new SAML2Exception(ioe.toString());     }   }   return session; } "
"private static ParsedNamingURL parseURL(String str) throws MalformedURLException {   try {     return intParseURL(str);   }  catch (  URISyntaxException ex) {     MalformedURLException mue=new MalformedURLException(\"invalid URL String: \" + str);     mue.initCause(ex);     int indexSchemeEnd=str.indexOf(':');     int indexAuthorityBegin=str.indexOf(\"//:\");     if (indexAuthorityBegin < 0) {       throw mue;     }     if ((indexAuthorityBegin == 0) || ((indexSchemeEnd > 0) && (indexAuthorityBegin == indexSchemeEnd + 1))) {       int indexHostBegin=indexAuthorityBegin + 2;       String newStr=str.substring(0,indexHostBegin) + \"localhost\" + str.substring(indexHostBegin);       try {         return intParseURL(newStr);       }  catch (      URISyntaxException inte) {         throw mue;       } catch (      MalformedURLException inte) {         throw inte;       }     }     throw mue;   } } "
"public READER(String mimeType){   super(mimeType,\"java.io.Reader\"); } "
"public ArgumentGroup(final LocalizableMessage description,final int priority){   this.description=description;   this.priority=priority; } "
"private TraceSettings(Level level){   this(level,false,false,0,false); } "
"private void removeCOTNameFromConfig(String realm,List configList,String cotName,EntityConfigElement entityConfig,IDFFMetaManager idffMetaMgr) throws IDFFMetaException {   for (Iterator iter=configList.iterator(); iter.hasNext(); ) {     BaseConfigType bConfig=(BaseConfigType)iter.next();     List list=bConfig.getAttribute();     for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {       AttributeType avp=(AttributeType)iter2.next();       if (avp.getName().trim().equalsIgnoreCase(COT_LIST)) {         List avpl=avp.getValue();         if (avpl != null && !avpl.isEmpty() && containsValue(avpl,cotName)) {           avpl.remove(cotName);           idffMetaMgr.setEntityConfig(realm,entityConfig);           break;         }       }     }   } } "
"public SoundException(){   super(); } "
"public int popInt(){   BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();   Integer value=(Integer)wrapper.getValue();   return value.intValue(); } "
"public static <T>SortedSet<T> unmodifiableSortedSet(SortedSet<T> s){   return new UnmodifiableSortedSet<>(s); } "
"public void putAll(Map<? extends K,? extends V> m){   if (m instanceof EnumMap) {     EnumMap<?,?> em=(EnumMap<?,?>)m;     if (em.keyType != keyType) {       if (em.isEmpty())       return;       throw new ClassCastException(em.keyType + \" != \" + keyType);     }     for (int i=0; i < keyUniverse.length; i++) {       Object emValue=em.vals[i];       if (emValue != null) {         if (vals[i] == null)         size++;         vals[i]=emValue;       }     }   }  else {     super.putAll(m);   } } "
"@Inject public CTSNotificationBroker(CTSPersistentStore store,@Named(\"localBroker\") NotificationBroker localBroker,@Named(\"tokenExpirySeconds\") long tokenExpirySeconds){   this.localBroker=localBroker;   this.store=store;   this.tokenExpirySeconds=tokenExpirySeconds;   idGenerator=IdGenerator.DEFAULT;   listener=new SessionNotificationListener();   try {     store.addContinuousQueryListener(listener,getTokenFilter());   }  catch (  CoreTokenException ctE) {     throw new RuntimeException(\"Unable to register session notifications\",ctE);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeelementnodetype.class,args); } "
"static ComputedDayOfField ofWeekOfWeekBasedYearField(WeekFields weekDef){   return new ComputedDayOfField(\"WeekOfWeekBasedYear\",weekDef,WEEKS,IsoFields.WEEK_BASED_YEARS,WEEK_OF_WEEK_BASED_YEAR_RANGE); } "
"public Polyline combine(Polyline p_other){   if (p_other == null)   return this;   if (plaline_len() < 3)   throw new IllegalArgumentException(classname + \"what A\");   if (p_other.plaline_len() < 3)   throw new IllegalArgumentException(classname + \"what B\");   boolean combine_at_start;   boolean combine_other_at_start;   if (corner_first().equals(p_other.corner_first())) {     combine_at_start=true;     combine_other_at_start=true;   }  else   if (corner_first().equals(p_other.corner_last())) {     combine_at_start=true;     combine_other_at_start=false;   }  else   if (corner_last().equals(p_other.corner_first())) {     combine_at_start=false;     combine_other_at_start=true;   }  else   if (corner_last().equals(p_other.corner_last())) {     combine_at_start=false;     combine_other_at_start=false;   }  else {     return this;   }   PlaLineIntAlist lines_list=new PlaLineIntAlist(plaline_len() + p_other.plaline_len());   if (combine_at_start) {     if (combine_other_at_start) {       int from_index=p_other.plaline_len(-1);       for (int index=0; index < p_other.plaline_len(-1); ++index)       lines_list.add(p_other.plaline(from_index--).opposite());     }  else {       for (int index=0; index < p_other.plaline_len(-1); ++index)       lines_list.add(p_other.plaline(index));     }     for (int iindex=1; iindex < plaline_len(); ++iindex)     lines_list.add(plaline(iindex));   }  else {     for (int index=0; index < plaline_len(-1); ++index)     lines_list.add(plaline(index));     if (combine_other_at_start) {       for (int index=1; index < p_other.plaline_len(); ++index)       lines_list.add(p_other.plaline(index));     }  else {       int from_index=p_other.plaline_len(-2);       for (int index=1; index < p_other.plaline_len(); ++index)       lines_list.add(p_other.plaline(from_index--).opposite());     }   }   return new Polyline(lines_list); } "
"public ConnPoolByRoute(final ClientConnectionOperator operator,final HttpParams params){   super();   if (operator == null) {     throw new IllegalArgumentException(\"Connection operator may not be null\");   }   this.operator=operator;   freeConnections=createFreeConnQueue();   waitingThreads=createWaitingThreadQueue();   routeToPool=createRouteToPoolMap();   maxTotalConnections=ConnManagerParams.getMaxTotalConnections(params);   connPerRoute=ConnManagerParams.getMaxConnectionsPerRoute(params); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdataappenddatanomodificationallowederrEE.class,args); } "
"private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {   throw new NotSerializableException(\"Not serializable.\"); } "
"public void actionPerformed(ActionEvent e){   JEditorPane editor=getEditor(e);   if (editor != null) {     StyledEditorKit kit=getStyledEditorKit(editor);     MutableAttributeSet attr=kit.getInputAttributes();     boolean italic=(StyleConstants.isItalic(attr)) ? false : true;     SimpleAttributeSet sas=new SimpleAttributeSet();     StyleConstants.setItalic(sas,italic);     setCharacterAttributes(editor,sas,false);   } } "
"public ExtendedType(int nodetype,String namespace,String localName){   this.nodetype=nodetype;   this.namespace=namespace;   this.localName=localName;   this.hash=nodetype + namespace.hashCode() + localName.hashCode(); } "
"@Override public boolean onCreateOptionsMenu(Menu menu){   menu.add(Menu.NONE,MENU_SETTINGS_ID,Menu.NONE,getString(R.string.settings_label)).setIcon(android.R.drawable.ic_menu_preferences).setAlphabeticShortcut('s');   menu.add(Menu.NONE,MENU_ABOUT_ID,Menu.NONE,getString(R.string.about)).setAlphabeticShortcut('a').setIcon(android.R.drawable.ic_menu_info_details);   return super.onCreateOptionsMenu(menu); } "
"public static int copy(Reader input,Writer output) throws IOException {   char[] buffer=new char[DEFAULT_BUFFER_SIZE];   int count=0;   int n=0;   while (-1 != (n=input.read(buffer))) {     output.write(buffer,0,n);     count+=n;   }   return count; } "
"public void switchStates(){   if (sMario.getJumpTrail().getOpacity() > 0) {     sMario.getJumpTrail().setOpacity(0);     sMario.getJumpEffect().setOpacity(0);     opacity=1;   }   if (opacity > 0) {     float decFactor=(float)(yPos / (opacity * jumpTrailHeightDelta));     sMario.getPowerEffect(MARIO_STATE).setFitHeight(sMario.getPowerEffect(MARIO_STATE).getFitHeight() + decFactor);     sMario.getPowerEffect(MARIO_STATE).setOpacity(opacity);     sMario.getPowerEffect(MARIO_STATE).setTranslateY(sMario.getPowerEffect(MARIO_STATE).getTranslateY() - decFactor);     if (MARIO_STATE > 1 && playerStates.size() > 12 && opacity < 0.5)     removeStates(6);     opacity-=0.016;     if (enableAura)     aura.update(xPos,yPos);   }  else   if (enableAura) {     sMario.removePowerupEffect();     midStateChange=false;     MARIO_STATE++;     return;   }   if (MARIO_STATE > 0) {     if (MARIO_STATE >= 1 && !enableAura) {       spriteFrame.setImage(playerStates.get(0));       setAura();       sMario.addPowerupEffect(xPos - jumpEffectXTH,(float)(191.02 * REL_HEIGHT),MARIO_STATE);     }     return;   }   if (stateFrame++ == 0) {     jumpEffectYTH+=MARIO_SCALE_DIFF;     jumpTrailYTH+=MARIO_SCALE_DIFF;     yPos-=(MARIO_SCALE_DIFF * 1.25);     spriteFrame.setTranslateY(yPos);     sMario.addPowerupEffect(xPos - jumpEffectXTH,(float)(191.02 * REL_HEIGHT),MARIO_STATE);   }  else   if (stateFrame == 6)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12));  else   if (stateFrame == 16)   super.getSpriteFrame().setImage(super.getPlayerStates().get(0));  else   if (stateFrame == 28)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12));  else   if (stateFrame == 38)   super.getSpriteFrame().setImage(super.getPlayerStates().get(0));  else   if (stateFrame == 50)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12));  else   if (stateFrame == 62) {     super.getSpriteFrame().setImage(super.getPlayerStates().get(6));     stateFrame=0;     this.updateSVGArrContent(SVGData_b);     midStateChange=false;     isIdle=false;     sMario.removePowerupEffect();     removeStates(6);     playerStates.remove(6);     MARIO_STATE++;   } } "
"public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"static <T>T find(Class<T> type,String fallbackClassName) throws FactoryConfigurationError {   final String factoryId=type.getName();   dPrint(\"find factoryId =\" + factoryId);   try {     String systemProp=ss.getSystemProperty(factoryId);     if (systemProp != null) {       dPrint(\"found system property, value=\" + systemProp);       return newInstance(type,systemProp,null,true);     }   }  catch (  SecurityException se) {     if (debug)     se.printStackTrace();   }   try {     if (firstTime) { synchronized (cacheProps) {         if (firstTime) {           String configFile=ss.getSystemProperty(\"java.home\") + File.separator + \"lib\"+ File.separator+ \"jaxp.properties\";           File f=new File(configFile);           firstTime=false;           if (ss.doesFileExist(f)) {             dPrint(\"Read properties file \" + f);             cacheProps.load(ss.getFileInputStream(f));           }         }       }     }     final String factoryClassName=cacheProps.getProperty(factoryId);     if (factoryClassName != null) {       dPrint(\"found in $java.home/jaxp.properties, value=\" + factoryClassName);       return newInstance(type,factoryClassName,null,true);     }   }  catch (  Exception ex) {     if (debug)     ex.printStackTrace();   }   T provider=findServiceProvider(type);   if (provider != null) {     return provider;   }   if (fallbackClassName == null) {     throw new FactoryConfigurationError(\"Provider for \" + factoryId + \" cannot be found\");   }   dPrint(\"loaded from fallback value: \" + fallbackClassName);   return newInstance(type,fallbackClassName,null,true); } "
"public static ReferencePropertyMapper reference(final AttributeDescription attribute,final String baseDnTemplate,final AttributeDescription primaryKey,final PropertyMapper mapper){   return new ReferencePropertyMapper(Schema.getDefaultSchema(),attribute,baseDnTemplate,primaryKey,mapper); } "
"public PermissionCollection newPermissionCollection(){   return new PropertyPermissionCollection(); } "
"private static String keyDump(Tree index,ByteSequence key){   StringBuilder buffer=new StringBuilder(128);   buffer.append(\"Index: \").append(index).append(ServerConstants.EOL);   buffer.append(\"Key:\").append(ServerConstants.EOL);   StaticUtils.byteArrayToHexPlusAscii(buffer,key.toByteArray(),6);   return buffer.toString(); } "
"private static void cleanDirectoryOnExit(File directory) throws IOException {   if (!directory.exists()) {     String message=directory + \" does not exist\";     throw new IllegalArgumentException(message);   }   if (!directory.isDirectory()) {     String message=directory + \" is not a directory\";     throw new IllegalArgumentException(message);   }   File[] files=directory.listFiles();   if (files == null) {     throw new IOException(\"Failed to list contents of \" + directory);   }   IOException exception=null;   for (  File file : files) {     try {       forceDeleteOnExit(file);     }  catch (    IOException ioe) {       exception=ioe;     }   }   if (null != exception) {     throw exception;   } } "
"public PlaPoint nearest_end_point(PlaPointInt p_from_point){   PlaPoint p1=corner_first();   PlaPoint p2=corner_last();   PlaPointFloat from_point=p_from_point.to_float();   double d1=from_point.distance(p1.to_float());   double d2=from_point.distance(p2.to_float());   if (d1 < d2)   return p1;  else   return p2; } "
"public ModifyOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN,List<RawModification> rawModifications){   super(clientConnection,operationID,messageID,requestControls);   this.rawEntryDN=rawEntryDN;   this.rawModifications=rawModifications;   entryDN=null;   modifications=null;   responseControls=new ArrayList<>();   cancelRequest=null; } "
"public Resource mapToXACMLResoure(String resourceName,String serviceName) throws XACMLException {   return null; } "
"protected TokenIterator createTokenIterator(HeaderIterator hit){   return new BasicTokenIterator(hit); } "
"public BeanContextServiceAvailableEvent(BeanContextServices bcs,Class sc){   super((BeanContext)bcs);   serviceClass=sc; } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String realm=getStringOptionValue(IArgument.REALM_NAME);   String type=getStringOptionValue(ARGUMENT_ID_TYPE);   String[] params={realm,type};   writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_GET_ALLOWED_OPS\",params);   try {     AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);     IdType idType=convert2IdType(type);     Set ops=amir.getAllowedIdOperations(idType);     String msg=getResourceString(\"allowed-ops-result\");     String[] arg={\"\"};     if ((ops != null) && !ops.isEmpty()) {       for (Iterator i=ops.iterator(); i.hasNext(); ) {         arg[0]=((IdOperation)i.next()).getName();         outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])arg));       }     }  else {       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"get-allowed-ops-no-ops\"),(Object[])params));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_GET_ALLOWED_OPS\",params);   }  catch (  IdRepoException e) {     String[] args={realm,type,e.getMessage()};     debugError(\"GetAllowedIdOperations.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ALLOWED_OPS\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={realm,type,e.getMessage()};     debugError(\"GetAllowedIdOperations.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ALLOWED_OPS\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public char first(){   pos=begin;   return current(); } "
"public Time createTime(Date start,Date stop) throws SdpException {   TimeField timeImpl=new TimeField();   timeImpl.setStart(start);   timeImpl.setStop(stop);   return timeImpl; } "
"public FrameBodyTPE1(){ } "
"public static Calendar fromUnixTime(long unixTime){   return fromUnixTime(unixTime,TimeUnit.SECONDS); } "
"public void insert(final AbstractInsnNode insn){   ++size;   if (first == null) {     first=insn;     last=insn;   }  else {     first.prev=insn;     insn.next=first;   }   first=insn;   cache=null;   insn.index=0; } "
"public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_val\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     $self.insert_val(value);   }   finally {     _servant_postinvoke($so);   } } "
"private void parseSecurityElement(Element securityE) throws SOAPBindingException {   if (securityE == null) {     securityProfileType=ANONYMOUS;     return;   }   String wsseNS=securityE.getNamespaceURI();   if (wsseNS == null) {     securityProfileType=ANONYMOUS;     return;   }   String wsuNS=null;   if (wsseNS.equals(WSSEConstants.NS_WSSE_WSF11)) {     wsfVersion=SOAPBindingConstants.WSF_11_VERSION;     wsuNS=WSSEConstants.NS_WSU_WSF11;   }  else   if (wsseNS.equals(WSSEConstants.NS_WSSE)) {     wsfVersion=SOAPBindingConstants.WSF_10_VERSION;     wsuNS=WSSEConstants.NS_WSU;   }  else {     securityProfileType=ANONYMOUS;     return;   }   NodeList nl=securityE.getElementsByTagNameNS(wsseNS,SAMLConstants.TAG_SECURITYTOKENREFERENCE);   Element securityTokenRefE=null;   String uri=null;   if (nl != null && nl.getLength() > 0) {     securityTokenRefE=(Element)nl.item(0);     List list=XMLUtils.getElementsByTagNameNS1(securityTokenRefE,wsseNS,SAMLConstants.TAG_REFERENCE);     if (!list.isEmpty()) {       Element referenceE=(Element)list.get(0);       uri=XMLUtils.getNodeAttributeValue(referenceE,SAMLConstants.TAG_URI);       if (uri != null && uri.length() > 1 && uri.startsWith(\"#\")) {         uri=uri.substring(1);       }  else {         String msg=Utils.bundle.getString(\"invalidReferenceURI\");         Utils.debug.error(\"Message.parseSecurityElement: \" + msg);         throw new SOAPBindingException(msg);       }       if (Utils.debug.messageEnabled()) {         Utils.debug.message(\"Message.parseSecurityElement: \" + \"SecurityTokenReference Reference URI = \" + uri);       }     }   }   securityProfileType=ANONYMOUS;   securityHeaders=new ArrayList();   nl=securityE.getChildNodes();   int length=nl.getLength();   for (int i=0; i < length; i++) {     Node child=nl.item(i);     if (child.getNodeType() == Node.ELEMENT_NODE) {       String localName=child.getLocalName();       String ns=child.getNamespaceURI();       if (securityProfileType != ANONYMOUS) {         securityHeaders.add(child);         continue;       }       if (SAMLConstants.BINARYSECURITYTOKEN.equals(localName) && wsseNS.equals(ns)) {         Element binarySecurityTokenE=(Element)child;         String valuetype=XMLUtils.getNodeAttributeValue(binarySecurityTokenE,\"ValueType\");         Utils.debug.message(\"ValueType: \" + valuetype);         if ((valuetype != null) && valuetype.endsWith(\"ServiceSessionContext\")) {           securityHeaders.add(child);           continue;         }         if (uri != null) {           String id=XMLUtils.getNodeAttributeValueNS(binarySecurityTokenE,wsuNS,SAMLConstants.TAG_ID);           if (!uri.equals(id)) {             securityHeaders.add(child);             continue;           }         }         try {           binarySecurityToken=new BinarySecurityToken(binarySecurityTokenE);           messageCertificate=(X509Certificate)SecurityUtils.getCertificate(binarySecurityToken);         }  catch (        Exception ex) {           String msg=Utils.bundle.getString(\"cannotProcessBinarySecurityToken\");           Utils.debug.error(\"Message.parseSecurityElement: \" + msg);           throw new SOAPBindingException(msg);         }         if (Utils.debug.messageEnabled()) {           Utils.debug.message(\"Message.parseSecurityElement:\" + \" found binary security token\");         }         securityProfileType=X509_TOKEN;       }  else       if (SAMLConstants.TAG_ASSERTION.equals(localName) && SAMLConstants.assertionSAMLNameSpaceURI.equals(ns)) {         Element assertionE=(Element)child;         if (uri != null) {           String assertionID=XMLUtils.getNodeAttributeValue(assertionE,SAMLConstants.TAG_ASSERTION_ID);           if (!uri.equals(assertionID)) {             securityHeaders.add(child);             continue;           }         }         try {           assertion=new SecurityAssertion(assertionE);         }  catch (        SAMLException ex) {           String msg=Utils.bundle.getString(\"cannotProcessSAMLAssertion\");           Utils.debug.error(\"Message.parseSecurityElement: \" + msg);           throw new SOAPBindingException(msg);         }         if (Utils.debug.messageEnabled()) {           Utils.debug.message(\"Message.parseSecurityElement:\" + \" found security assertion, \" + \"isBearer = \"+ assertion.isBearer());         }         if (assertion.isBearer()) {           securityProfileType=BEARER_TOKEN;         }  else {           securityProfileType=SAML_TOKEN;           messageCertificate=(X509Certificate)SecurityUtils.getCertificate(assertion);         }       }  else {         securityHeaders.add(child);       }     }   }   if (securityHeaders.isEmpty()) {     securityHeaders=null;   } } "
"public void test_getInstanceLjava_lang_StringLjava_lang_String(){   String[] alg={\"\",\"qwertyu\",\"!@#$%^&*()\"};   String[] prv={\"\",null};   String[] prv1={\"1234567890\",\"qwertyu\",\"!@#$%^&*()\"};   try {     AlgorithmParameters ap=AlgorithmParameters.getInstance(\"ABC\",\"MyProvider\");     checkUnititialized(ap);     ap.init(new byte[6]);     checkAP(ap,p);   }  catch (  Exception e) {     fail(\"Unexpected exception\");   }   for (int i=0; i < alg.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],\"MyProvider\");       fail(\"NoSuchAlgorithmException was not thrown for parameter \" + alg[i]);     }  catch (    NoSuchAlgorithmException nsae) {     } catch (    Exception e) {       fail(\"Incorrect exception \" + e + \" was thrown for \"+ alg[i]);     }   }   for (int i=0; i < prv.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(\"ABC\",prv[i]);       fail(\"IllegalArgumentException was not thrown for parameter \" + prv[i]);     }  catch (    IllegalArgumentException iae) {     } catch (    Exception e) {       fail(\"Incorrect exception \" + e + \" was thrown for \"+ prv[i]);     }   }   for (int i=0; i < prv1.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(\"ABC\",prv1[i]);       fail(\"NoSuchProviderException was not thrown for parameter \" + prv1[i]);     }  catch (    NoSuchProviderException nspe) {     } catch (    Exception e) {       fail(\"Incorrect exception \" + e + \" was thrown for \"+ prv1[i]);     }   } } "
"public Bounds(String reason){   super(reason); } "
"public TransformerConfigurationException(String msg){   super(msg); } "
"@Override public void onDrawFrame(GL10 gl10){   GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);   GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);   GLES20.glEnable(GLES20.GL_DEPTH_TEST);   GLES20.glEnable(GLES20.GL_CULL_FACE);   GLES20.glEnable(GLES20.GL_BLEND);   GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);   long currentTimeMillis=System.currentTimeMillis();   updateWithDelta(currentTimeMillis - lastTimeMillis);   lastTimeMillis=currentTimeMillis; } "
"public List<String> fieldPropertyComment(Field field){   String commentType=fieldTypeCardinalityComment(field);   String fieldName=propertyName(field);   return convertToCommentedBlock(fieldComment(String.format(\"@property {%s} %s\",commentType,fieldName),null,field)); } "
"public void testBlob() throws Exception, IOException {   byte[] b=new byte[4];   byte[] b128=new byte[128];   for (int i=0; i < b128.length; i++) {     b128[i]=(byte)i;   }   Blob blob=db.open_blob(dbFile.getPath(),\"B\",\"val\",1,true);   try {     OutputStream os=blob.getOutputStream();     os.write(b128);     os.close();     InputStream is=blob.getInputStream();     is.skip(96);     assertEquals(4,is.read(b));     is.close();   }   finally {     blob.close();   } } "
"@Override public void execute() throws MojoExecutionException, MojoFailureException {   try {     readAcis(getAciDescriptions());   }  catch (  IOException e) {     throw new MojoFailureException(e.getMessage(),e);   }   File table=new File(outputDirectory,\"table-global-acis.xml\");   try {     writeStringToFile(getGlobalAcisTable(),table);   }  catch (  IOException e) {     throw new MojoFailureException(e.getMessage(),e);   } } "
"public PrincipalTokenRestriction(String dn){   this.dn=Misc.canonicalize(dn); } "
"public void mouseExited(MouseEvent event){   boolean shouldHide=true;   if (insideComponent == null) {   }   if (window != null && event.getSource() == window && insideComponent != null) {     Container insideComponentWindow=insideComponent.getTopLevelAncestor();     if (insideComponentWindow != null) {       Point location=event.getPoint();       SwingUtilities.convertPointToScreen(location,window);       location.x-=insideComponentWindow.getX();       location.y-=insideComponentWindow.getY();       location=SwingUtilities.convertPoint(null,location,insideComponent);       if (location.x >= 0 && location.x < insideComponent.getWidth() && location.y >= 0 && location.y < insideComponent.getHeight()) {         shouldHide=false;       }  else {         shouldHide=true;       }     }   }  else   if (event.getSource() == insideComponent && tipWindow != null) {     Window win=SwingUtilities.getWindowAncestor(insideComponent);     if (win != null) {       Point location=SwingUtilities.convertPoint(insideComponent,event.getPoint(),win);       Rectangle bounds=insideComponent.getTopLevelAncestor().getBounds();       location.x+=bounds.x;       location.y+=bounds.y;       Point loc=new Point(0,0);       SwingUtilities.convertPointToScreen(loc,tip);       bounds.x=loc.x;       bounds.y=loc.y;       bounds.width=tip.getWidth();       bounds.height=tip.getHeight();       if (location.x >= bounds.x && location.x < (bounds.x + bounds.width) && location.y >= bounds.y && location.y < (bounds.y + bounds.height)) {         shouldHide=false;       }  else {         shouldHide=true;       }     }   }   if (shouldHide) {     enterTimer.stop();     if (insideComponent != null) {       insideComponent.removeMouseMotionListener(this);     }     insideComponent=null;     toolTipText=null;     mouseEvent=null;     hideTipWindow();     exitTimer.restart();   } } "
"private boolean shouldDrawItemSection(ViewHolder holder,int childIndex,List<AlphabeticalAppsList.AdapterItem> items){   int pos=holder.getPosition();   AlphabeticalAppsList.AdapterItem item=items.get(pos);   if (item.viewType != AllAppsGridAdapter.ICON_VIEW_TYPE) {     return false;   }   return (childIndex == 0) || (items.get(pos - 1).viewType == AllAppsGridAdapter.SECTION_BREAK_VIEW_TYPE); } "
"@After public void clean(){   mute(null);   mute(null);   mute(null); } "
"public void test_ConstructorLjava_lang_StringLjava_util_Map(){   String test=\"Test string\";   try {     AttributedString attrString=new AttributedString(test,new WeakHashMap<AttributedCharacterIterator.Attribute,String>());     AttributedCharacterIterator it=attrString.getIterator();     StringBuffer buf=new StringBuffer();     buf.append(it.first());     char ch;     while ((ch=it.next()) != CharacterIterator.DONE)     buf.append(ch);     assertTrue(\"Wrong string: \" + buf,buf.toString().equals(test));   }  catch (  Exception e) {     fail(\"Unexpected exception \" + e.toString());   }   try {     Map<AttributedCharacterIterator.Attribute,String> whm=new WeakHashMap<AttributedCharacterIterator.Attribute,String>();     whm.put(new TestAttributedCharacterIteratorAttribute(\"test\"),\"value\");     new AttributedString(\"\",whm);     fail(\"Expected IllegalArgumentException was not thrown\");   }  catch (  Exception e) {   } } "
"public DirectColorModel(int bits,int rmask,int gmask,int bmask){   this(bits,rmask,gmask,bmask,0); } "
"public boolean verify(X509Certificate cert,Provider sigProvider) throws NoSuchAlgorithmException, CertificateExpiredException, CertificateNotYetValidException, CMSException {   Time signingTime=getSigningTime();   if (signingTime != null) {     cert.checkValidity(signingTime.getDate());   }   return doVerify(cert.getPublicKey(),sigProvider); } "
"private void backupScreens(BackupDataOutput data) throws IOException {   ContentResolver cr=mContext.getContentResolver();   Cursor cursor=cr.query(LauncherSettings.WorkspaceScreens.CONTENT_URI,SCREEN_PROJECTION,null,null,null);   try {     cursor.moveToPosition(-1);     if (DEBUG)     Log.d(TAG,\"dumping screens after: \" + mLastBackupRestoreTime);     while (cursor.moveToNext()) {       final long id=cursor.getLong(ID_INDEX);       final long updateTime=cursor.getLong(ID_MODIFIED);       BackupProtos.Key key=getKey(BackupProtos.Key.SCREEN,id);       mKeys.add(key);       final String backupKey=keyToBackupKey(key);       if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {         writeRowToBackup(key,packScreen(cursor),data);       }  else {         if (VERBOSE)         Log.v(TAG,\"screen already backup up \" + id);       }     }   }   finally {     cursor.close();   } } "
"@DataProvider(name=\"simpleConnect\") Object[][] createCredentials(){   return new Object[][]{{\"cn=directory manager\",\"password\",false},{\"cn=Privileged User,o=test\",\"password\",true},{\"cn=Privileged User,o=test\",\"wrongPassword\",false},{\"cn=wrong user\",\"password\",false},{\"invalid DN\",\"password\",false},{\"cn=Privileged User,o=test\",null,false},{null,\"password\",false},{null,null,false}}; } "
"public char[] toCharArray(){   Charset utf8=Charset.forName(\"UTF-8\");   CharBuffer charBuffer=utf8.decode(ByteBuffer.wrap(buffer,offset,length));   char[] chars=new char[charBuffer.remaining()];   charBuffer.get(chars);   return chars; } "
"public void test_SSLEngineResultStatus_valueOf(){   String[] str={\"BUFFER_OVERFLOW\",\"BUFFER_UNDERFLOW\",\"CLOSED\",\"OK\"};   String[] str_invalid={\"\",\"OK1\",\"BUFFER_overflow\",\"BUFFER_UND\",\"CLOSED_CLOSED\",\"Bad string for verification valueOf method\"};   SSLEngineResult.Status enS;   for (int i=0; i < str.length; i++) {     try {       enS=SSLEngineResult.Status.valueOf(str[i]);       assertEquals(\"Incorrect Status\",enS.toString(),str[i]);     }  catch (    Exception e) {       fail(\"Unexpected exception \" + e + \" was thrown for \"+ str[i]);     }   }   for (int i=0; i < str_invalid.length; i++) {     try {       enS=SSLEngineResult.Status.valueOf(str_invalid[i]);       fail(\"IllegalArgumentException should be thrown for \" + str_invalid[i]);     }  catch (    IllegalArgumentException iae) {     }   }   try {     enS=SSLEngineResult.Status.valueOf(null);     fail(\"NullPointerException/IllegalArgumentException should be thrown for NULL parameter\");   }  catch (  NullPointerException npe) {   } catch (  IllegalArgumentException iae) {   } } "
"private void createSunServiceIdFiles(File dirHandle,Set sunserviceids) throws SMSException {   createLookupFiles(dirHandle,SMSEntry.ATTR_SERVICE_ID,sunserviceids); } "
"private void collectText(){   if (textNodeCount > 1) {     firstTextNode.setText(textBuffer.toString());   }   textNodeCount=0; } "
"public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){   return getService().dynamicQuery(dynamicQuery); } "
"private AppInfo findApplicationInfoLocked(String packageName,UserHandleCompat user,String className){   for (  AppInfo info : data) {     final ComponentName component=info.intent.getComponent();     if (user.equals(info.user) && packageName.equals(component.getPackageName()) && className.equals(component.getClassName())) {       return info;     }   }   return null; } "
"public AudioStreamChunk(final BigInteger chunkLen){   super(GUID.GUID_AUDIOSTREAM,chunkLen); } "
"public void readSetOf(ASN1SetOf setOf) throws IOException {   if (tag != ASN1Constants.TAG_C_SETOF) {     throw expected(\"setOf\");   }   decodeValueCollection(setOf); } "
"public boolean isSingleValue(){   return isSingleValue; } "
"@Override public void addMimeMapping(String extension,String mimeType){ synchronized (mimeMappings) {     mimeMappings.put(extension.toLowerCase(Locale.ENGLISH),mimeType);   }   fireContainerEvent(\"addMimeMapping\",extension); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedElementsElement createSignedElementsElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedElementsElementImpl(); } "
"protected boolean isJdk13LumberjackAvailable(){   return isLogLibraryAvailable(\"Jdk13Lumberjack\",\"org.apache.commons.logging.impl.Jdk13LumberjackLogger\"); } "
"public String toString(){   if (unparsed != null) {     return unparsed;   }   StringBuilder builder=new StringBuilder();   int size=rdns.size();   if ((size - 1) >= 0) {     builder.append(rdns.get(size - 1));   }   for (int next=size - 2; next >= 0; next--) {     builder.append(',');     builder.append(rdns.get(next));   }   unparsed=builder.toString();   return unparsed; } "
"public static void addExtensionHeader(String headerName,String className){   nameMap.put(headerName.toLowerCase(),className); } "
"public static boolean putFloat(Context context,String key,float value){   SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);   SharedPreferences.Editor editor=settings.edit();   editor.putFloat(key,value);   return editor.commit(); } "
"Properties checkExternalProperties() throws ArgumentException {   if (noPropertiesFileArgument != null && noPropertiesFileArgument.isPresent()) {     return null;   }   if (filePropertiesPathArgument == null) {     return null;   }   String propertiesFilePath;   if (filePropertiesPathArgument.isPresent()) {     propertiesFilePath=filePropertiesPathArgument.getValue();   }  else {     final String userDir=System.getProperty(\"user.home\");     propertiesFilePath=findPropertiesFile(userDir + File.separator + DEFAULT_OPENDJ_CONFIG_DIR);   }   if (propertiesFilePath == null) {     return null;   }   try {     final Properties argumentProperties=new Properties();     final String scriptName=getScriptName();     final Properties p=new Properties();     try (final FileInputStream fis=new FileInputStream(propertiesFilePath)){       p.load(fis);     }      for (final Enumeration<?> e=p.propertyNames(); e.hasMoreElements(); ) {       final String currentPropertyName=(String)e.nextElement();       String propertyName=currentPropertyName;       if (scriptName != null) {         if (currentPropertyName.startsWith(scriptName)) {           propertyName=currentPropertyName.substring(scriptName.length() + 1);         }  else         if (p.containsKey(scriptName + \".\" + currentPropertyName)) {           continue;         }       }       argumentProperties.setProperty(propertyName.toLowerCase(),p.getProperty(currentPropertyName));     }     return argumentProperties;   }  catch (  final Exception e) {     final LocalizableMessage message=ERR_ARGPARSER_CANNOT_READ_PROPERTIES_FILE.get(propertiesFilePath,getExceptionMessage(e));     throw new ArgumentException(message,e);   } } "
"public void put(String name,String supported,String authScheme,String level,boolean isDefault){   SAMLv2AuthContext c=new SAMLv2AuthContext();   c.name=name;   c.supported=supported;   if (authScheme.length() != 0 && authScheme != null) {     int index=authScheme.lastIndexOf(\"=\");     c.value=authScheme.substring(index + 1);     c.key=authScheme.substring(0,index);   }  else {     c.value=\"\";     c.key=\"\";   }   c.level=level;   c.isDefault=isDefault;   collections.put(name,c); } "
"@Override void onShutdown(){   BlockingQueue<Runnable> q=super.getQueue();   boolean keepDelayed=getExecuteExistingDelayedTasksAfterShutdownPolicy();   boolean keepPeriodic=getContinueExistingPeriodicTasksAfterShutdownPolicy();   if (!keepDelayed && !keepPeriodic) {     for (    Object e : q.toArray())     if (e instanceof RunnableScheduledFuture<?>)     ((RunnableScheduledFuture<?>)e).cancel(false);     q.clear();   }  else {     for (    Object e : q.toArray()) {       if (e instanceof RunnableScheduledFuture) {         RunnableScheduledFuture<?> t=(RunnableScheduledFuture<?>)e;         if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) || t.isCancelled()) {           if (q.remove(t))           t.cancel(false);         }       }     }   }   tryTerminate(); } "
"static public void assertEquals(String message,char expected,char actual){   assertEquals(message,new Character(expected),new Character(actual)); } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.SignedEncryptedSupportingTokensElement createSignedEncryptedSupportingTokensElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SignedEncryptedSupportingTokensElementImpl(); } "
"@Override public boolean allowedInBranch(){   return true; } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testNode;   NamedNodeMap attributes;   Attr domesticAttr;   Node s;   doc=(Document)load(\"staff\",false);   addressList=doc.getElementsByTagName(\"address\");   testNode=addressList.item(0);   attributes=testNode.getAttributes();   domesticAttr=(Attr)attributes.getNamedItem(\"domestic\");   s=domesticAttr.getPreviousSibling();   assertNull(\"attrPreviousSiblingNullAssert\",s); } "
"public static ObjectPropertyMapper object(){   return new ObjectPropertyMapper(); } "
"public ByteVector putShort(final int s){   int length=this.length;   if (length + 2 > data.length) {     enlarge(2);   }   byte[] data=this.data;   data[length++]=(byte)(s >>> 8);   data[length++]=(byte)s;   this.length=length;   return this; } "
"public void endPrefixMapping(String prefix) throws SAXException {   if (contentHandler != null) {     contentHandler.endPrefixMapping(prefix);   } } "
"public void purgeConflictsHistorical(PurgeConflictsHistoricalTask task,long endDate) throws DirectoryException {   logger.trace(\"[PURGE] purgeConflictsHistorical \" + \"on domain: \" + getBaseDN() + \"endDate:\"+ new Date(endDate)+ \"lastCSNPurgedFromHist: \"+ lastCSNPurgedFromHist.toStringUI());   String filter=\"(\" + HISTORICAL_ATTRIBUTE_NAME + \">=dummy:\"+ lastCSNPurgedFromHist+ \")\";   int count=0;   boolean finished=false;   ByteString pagingCookie=null;   while (!finished) {     if (task != null) {       task.setProgressStats(lastCSNPurgedFromHist,count);     }     finished=true;     SearchRequest request=Requests.newSearchRequest(getBaseDN(),SearchScope.WHOLE_SUBTREE,filter).addAttribute(USER_AND_REPL_OPERATIONAL_ATTRS).addControl(new PagedResultsControl(false,ConfigConstants.DEFAULT_SIZE_LIMIT,pagingCookie)).setSizeLimit(ConfigConstants.DEFAULT_SIZE_LIMIT + 1);     InternalSearchOperation searchOp=conn.processSearch(request);     for (    Control c : searchOp.getResponseControls()) {       if (c.getOID().equals(OID_PAGED_RESULTS_CONTROL)) {         ByteString newPagingCookie=((PagedResultsControl)c).getCookie();         if (newPagingCookie != null && newPagingCookie.length() > 0 && !newPagingCookie.equals(pagingCookie)) {           pagingCookie=newPagingCookie;           finished=false;         }       }     }     for (    SearchResultEntry entry : searchOp.getSearchEntries()) {       long maxTimeToRun=endDate - TimeThread.getTime();       if (maxTimeToRun < 0) {         throw new DirectoryException(ResultCode.ADMIN_LIMIT_EXCEEDED,LocalizableMessage.raw(\" end date reached\"));       }       EntryHistorical entryHist=EntryHistorical.newInstanceFromEntry(entry);       CSN latestOldCSN=entryHist.getOldestCSN();       entryHist.setPurgeDelay(getHistoricalPurgeDelay());       Attribute attr=entryHist.encodeAndPurge();       if (entryHist.getLastPurgedValuesCount() > 0) {         lastCSNPurgedFromHist=latestOldCSN;         List<Modification> mods=newArrayList(new Modification(ModificationType.REPLACE,attr));         count+=entryHist.getLastPurgedValuesCount();         ModifyOperation newOp=new ModifyOperationBasis(conn,nextOperationID(),nextMessageID(),new ArrayList<Control>(0),entry.getName(),mods);         runAsSynchronizedOperation(newOp);         if (newOp.getResultCode() != ResultCode.SUCCESS) {           logger.error(ERR_CANNOT_ADD_CONFLICT_ATTRIBUTE,newOp,newOp.getResultCode());         }  else         if (task != null) {           task.setProgressStats(lastCSNPurgedFromHist,count);         }       }     }   }   lastCSNPurgedFromHist=new CSN(0,0,0); } "
"public int read() throws IOException {   if (this.closed) {     throw new IOException(\"Attempted read from closed stream.\");   }   if (this.eof) {     return -1;   }   if (this.pos >= this.chunkSize) {     nextChunk();     if (this.eof) {       return -1;     }   }   pos++;   return in.read(); } "
"@Override public void destroySubcontext(Name name) throws NamingException {   getBoundContext().destroySubcontext(parseName(name)); } "
"@Override public void onClick(DialogInterface dialog,int which){   SharedPreferences.Editor editor=mContext.getSharedPreferences(FolderUtils.PREFS,Context.MODE_PRIVATE).edit();   for (  String folderId : mSelectedList) {     editor.remove(FolderUtils.KEY_NAME_PREFIX + folderId);     mContext.deleteDatabase(folderId);   }   editor.commit();   mMode.finish();   refreshList(); } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   ImportEntityModel model=(ImportEntityModel)getModel();   Map data=new HashMap(6);   String realm=(String)getDisplayFieldValue(model.REALM_NAME);   data.put(model.REALM_NAME,realm);   String radioMeta=(String)getDisplayFieldValue(\"radioMeta\");   String meta=(radioMeta.equals(\"url\")) ? (String)getDisplayFieldValue(\"tfMetadataFileURL\") : (String)getDisplayFieldValue(\"tfMetadataFile\");   String radioExtended=(String)getDisplayFieldValue(\"radioExtended\");   String extended=(radioExtended.equals(\"url\")) ? (String)getDisplayFieldValue(\"tfExtendeddataFileURL\") : (String)getDisplayFieldValue(\"tfExtendeddataFile\");   if ((meta == null) || (meta.length() == 0)) {     psModel.setErrorProperty(\"standardFileNameProperty\",true);     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.input.error\",\"import.entity.missing.metadata\");     forwardTo();   }  else {     data.put(ImportEntityModel.STANDARD_META,meta);     if ((extended != null) || (extended.trim().length() > 0)) {       data.put(ImportEntityModel.EXTENDED_META,extended);     }     try {       model.importEntity(data);       StringBuilder buff=new StringBuilder();       data.remove(ImportEntityModel.REALM_NAME);       for (Iterator i=data.keySet().iterator(); i.hasNext(); ) {         String key=(String)i.next();         String value=(String)data.get(key);         if ((value != null) && (value.length() > 0)) {           String val=(String)data.get(key);           if (val.startsWith(\"http\")) {             if (buff.length() > 0) {               buff.append(\", \");             }             buff.append(val);           }  else {             int idx=val.lastIndexOf(\"<!-- \");             if (idx != -1) {               int idx1=val.lastIndexOf(\" -->\");               if (idx1 != -1) {                 val=val.substring(idx + 5,idx1);               }             }             if (buff.length() > 0) {               buff.append(\", \");             }             buff.append(val);           }         }       }       String message=\"\";       if (buff.length() > 0) {         Object[] params={buff.toString()};         message=MessageFormat.format(model.getLocalizedString(\"import.entity.metadata.success\"),params);       }       setPageSessionAttribute(FederationViewBean.MESSAGE_TEXT,message);       FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);       passPgSessionMap(vb);       vb.forwardTo(getRequestContext());     }  catch (    AMConsoleException ame) {       debug.warning(\"ImportEntityViewBean.handleButton1req \",ame);       setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",ame.getMessage());       forwardTo();     }   } } "
"public boolean hasValue(AttributeDescription attributeDescription,ByteString value){   Attribute attr=getAttribute(attributeDescription);   return attr != null && attr.contains(value); } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   try {     System.out.println(\"shootme: got an ACK! Sending  a BYE\");     System.out.println(\"Dialog State = \" + dialog.getState());     Dialog dialog=serverTransaction.getDialog();     SipProvider provider=(SipProvider)requestEvent.getSource();     Request byeRequest=dialog.createRequest(Request.BYE);     ClientTransaction ct=provider.getNewClientTransaction(byeRequest);     dialog.sendRequest(ct);   }  catch (  Exception ex) {     ex.printStackTrace();   } } "
"public static String unescapeUtf8(String v){   try {     byte[] stringBytes=v.getBytes(\"UTF-8\");     byte[] decodedBytes=new byte[stringBytes.length];     int pos=0;     for (int i=0; i < stringBytes.length; i++) {       if (stringBytes[i] == '\\\\' && i + 2 < stringBytes.length && StaticUtils.isHexDigit(stringBytes[i + 1]) && StaticUtils.isHexDigit(stringBytes[i + 2])) {         decodedBytes[pos++]=convertHexEncodedUtf8To16BitChars(stringBytes,i);         i+=2;       }  else {         decodedBytes[pos++]=stringBytes[i];       }     }     return new String(decodedBytes,0,pos,\"UTF-8\");   }  catch (  UnsupportedEncodingException unexpected) {     throw new RuntimeException(\"UTF-8 encoding not supported\",unexpected);   } } "
"public void testCompareToPosPos1(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   byte bBytes[]={10,20,30,40,50,60,70,10,20,30};   int aSign=1;   int bSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   assertEquals(1,aNumber.compareTo(bNumber)); } "
"public static String wrapText(final LocalizableMessage message,final int width,final int indent){   return wrapText(message.toString(),width,indent); } "
"public void addPaymentRecord(Payment payment,Handler<AsyncResult<Void>> resultHandler){   delegate.addPaymentRecord(payment,resultHandler); } "
"public String toString(){   return encryptedString; } "
"public CookieManager(CookieStore store,CookiePolicy cookiePolicy){   this.store=store == null ? new CookieStoreImpl() : store;   policy=cookiePolicy == null ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy; } "
"public TransactionTerminatedEvent(Object source,ServerTransaction serverTransaction){   super(source);   m_serverTransaction=serverTransaction;   m_isServerTransaction=true; } "
"private void appendToList(List<String> list,String[] array){   if (array != null && array.length > 0) {     list.addAll(Arrays.asList(array));   } } "
"public SIPHeader parse() throws ParseException {   SessionExpires se=new SessionExpires();   if (debug)   dbg_enter(\"parse\");   try {     headerName(TokenTypes.SESSIONEXPIRES_TO);     String nextId=lexer.getNextId();     try {       int delta=Integer.parseInt(nextId);       se.setExpires(delta);     }  catch (    NumberFormatException ex) {       throw createParseException(\"bad integer format\");     } catch (    InvalidArgumentException ex) {       throw createParseException(ex.getMessage());     }     this.lexer.SPorHT();     super.parse(se);     return se;   }   finally {     if (debug)     dbg_leave(\"parse\");   } } "
"private final int compareUnexecutedInstructions(UnexecutedInstruction o1,UnexecutedInstruction o2){   Instruction i1=o1.getInstruction();   Instruction i2=o2.getInstruction();   if (i1 == i2)   return 0;   QualifiedClassName thisName=i1.getClassfile().getInternalName();   QualifiedClassName thatName=i2.getClassfile().getInternalName();   boolean thisIsFamiliar=trace.classIsReferencedInFamiliarSourceFile(thisName);   boolean thatIsFamiliar=trace.classIsReferencedInFamiliarSourceFile(thatName);   if (thisIsFamiliar && !thatIsFamiliar)   return -1;  else   if (!thisIsFamiliar && thatIsFamiliar)   return 1;   int diff=o1.getIncoming().size() - o2.getIncoming().size();   if (diff != 0)   return -diff;   int classNameComparison=thisName.compareTo(thatName);   if (classNameComparison != 0)   return classNameComparison;   int methodNameComparison=i1.getMethod().getJavaName().compareTo(i2.getMethod().getJavaName());   if (methodNameComparison != 0)   return methodNameComparison;   return i1.getIndex() - i2.getIndex(); } "
"@Override public boolean ready() throws IOException {   return false; } "
"private void cleanBufferPool(){   ByteBuffer buf;   while ((buf=bufferPool.poll()) != null) {     CryptoInputStream.freeDirectBuffer(buf);   } } "
"@Override public void toString(StringBuilder buffer){   buffer.append(\"UnbindRequest()\"); } "
"private void initialize() throws IOException {   fileLock.writeLock().lock();   try {     close();     fileCreationTime=clock.now();     if (configuration.getRotationFileSizeInByte() == -1) {       fileCreationTime-=fileCreationTime % (1000 * 60);     }     nextRotation=fileCreationTime + configuration.getRotationInterval() * 60 * 1000;     boolean directoryAvailable=false;     String debugDir=debugDirectory.get();     if (debugDir != null && debugDir.trim().length() > 0) {       File dir=new File(debugDir);       if (!dir.exists()) {         directoryAvailable=dir.mkdirs();       }  else       if (dir.isDirectory() && dir.canWrite()) {         directoryAvailable=true;       }     }     if (!directoryAvailable) {       ResourceBundle bundle=Locale.getInstallResourceBundle(\"amUtilMsgs\");       throw new IOException(bundle.getString(\"com.iplanet.services.debug.nodir\") + \" Current Debug File : \" + this);     }     String debugFilePath=debugDirectory.get() + File.separator + wrapFilename(debugName);     try {       this.currentFile=new File(debugFilePath);       this.debugWriter=new PrintWriter(new FileWriter(currentFile,true),true);       debugWriter=new PrintWriter(new FileWriter(debugFilePath,true),true);     }  catch (    IOException ioex) {       close();       ResourceBundle bundle=Locale.getInstallResourceBundle(\"amUtilMsgs\");       throw new IOException(bundle.getString(\"com.iplanet.services.debug.nofile\") + \" Current Debug File : \" + this,ioex);     }   }   finally {     fileLock.writeLock().unlock();   } } "
"public boolean isEmailEnabled(){   return emailEnabled; } "
"public static boolean needSetLBCookieAndRedirect(HttpServletRequest request,HttpServletResponse response,boolean isIDP){   if (!requireAddCookie(request)) {     return false;   }   if (debug.messageEnabled()) {     debug.message(\"FSUtils.needSetLBCookieAndRedirect:\" + \" lbCookie not set.\");   }   setlbCookie(request,response);   if (!requireRedirect(request)) {     return false;   }   String queryString=request.getQueryString();   StringBuilder reqURLSB=new StringBuilder();   reqURLSB.append(request.getRequestURL().toString()).append(\"?redirected=1\");   if (queryString != null) {     reqURLSB.append(\"&\").append(queryString);   }   try {     String reqMethod=request.getMethod();     if (reqMethod.equals(\"POST\")) {       String samlMessageName=null;       String samlMessage=null;       if (isIDP) {         samlMessageName=IFSConstants.SAML_REQUEST;         samlMessage=request.getParameter(samlMessageName);       }  else {         samlMessageName=IFSConstants.SAML_RESPONSE;         samlMessage=request.getParameter(samlMessageName);         if (samlMessage == null) {           samlMessageName=IFSConstants.SAML_ART;           samlMessage=request.getParameter(samlMessageName);         }       }       if (samlMessage == null) {         return false;       }       String relayState=request.getParameter(IFSConstants.RELAY_STATE);       FSUtils.postToTarget(request,response,samlMessageName,samlMessage,IFSConstants.RELAY_STATE,relayState,reqURLSB.toString());     }  else     if (reqMethod.equals(\"GET\")) {       response.sendRedirect(reqURLSB.toString());     }  else {       return false;     }     return true;   }  catch (  IOException ioe) {     debug.error(\"FSUtils.needSetLBCookieAndRedirect: \",ioe);   } catch (  SAML2Exception saml2E) {     debug.error(\"FSUtils.needSetLBCookieAndRedirect: \",saml2E);   }   return false; } "
"public int next(){   final int startNode=_startNode;   if (startNode == NULL) {     return NULL;   }   if (_includeSelf && (_currentNode + 1) == startNode)   return returnNode(makeNodeHandle(++_currentNode));   int node=_currentNode;   int type;   if (startNode == ROOTNODE) {     int eType;     do {       node++;       eType=_exptype2(node);       if (NULL == eType) {         _currentNode=NULL;         return END;       }     }  while (eType == TEXT_NODE || (type=m_extendedTypes[eType].getNodeType()) == ATTRIBUTE_NODE || type == NAMESPACE_NODE);   }  else {     do {       node++;       type=_type2(node);       if (NULL == type || !isDescendant(node)) {         _currentNode=NULL;         return END;       }     }  while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);   }   _currentNode=node;   return returnNode(makeNodeHandle(node)); } "
"public static void main(final String[] args){   DOMTestCase.doMain(domimplementationfeaturecore.class,args); } "
"@Override public void removeInitParameter(String name){   parametersLock.writeLock().lock();   try {     parameters.remove(name);   }   finally {     parametersLock.writeLock().unlock();   }   fireContainerEvent(\"removeInitParameter\",name); } "
"public void updateUserAttribute(SSOToken token,Set members,String staticGroupDN,boolean toAdd) throws AMException {   if (debug.messageEnabled()) {     debug.message(\"DirectoryServicesImpl.updateUserAttribute(): \" + \"groupDN:\" + staticGroupDN + \", toAdd: \"+ toAdd+ \" members: \"+ members);   }   Attr attr=new Attr(STATIC_GROUP_DN_ATTRIBUTE,staticGroupDN);   Iterator itr=members.iterator();   while (itr.hasNext()) {     String userDN=(String)itr.next();     try {       PersistentObject po=UMSObject.getObjectHandle(token,new Guid(userDN));       if (toAdd) {         po.modify(attr,ModificationType.ADD);       }  else {         po.modify(attr,ModificationType.DELETE);       }       po.save();     }  catch (    UMSException e) {       debug.error(\"DirectoryServicesImpl.updateUserAttribute(): \" + \"Failed while trying to set the static groupDN \" + staticGroupDN + \" for user: \"+ userDN,e);       throw new AMException(token,\"351\",e);     }   } } "
"public void recordAbstractMethodsForOverrideCheck_interface(SInterfaceDef i,List<SMethodDef> abstractMethods,List<SMethodDef> visitedMethods,Set<SInterfaceDef> visitedType) throws SyntaxException {   if (visitedType.add(i)) {     for (    SMethodDef m : i.methods()) {       if (m.modifiers().contains(SModifier.ABSTRACT)) {         if (null == findMethodWithSameSignature(m,visitedMethods,true)) {           abstractMethods.add(m);         }       }       visitedMethods.add(m);     }     for (    SInterfaceDef ii : i.superInterfaces()) {       recordAbstractMethodsForOverrideCheck_interface(ii,abstractMethods,visitedMethods,visitedType);     }   } } "
"protected void paint(SynthContext context,Graphics g){   JToolTip tip=(JToolTip)context.getComponent();   Insets insets=tip.getInsets();   View v=(View)tip.getClientProperty(BasicHTML.propertyKey);   if (v != null) {     Rectangle paintTextR=new Rectangle(insets.left,insets.top,tip.getWidth() - (insets.left + insets.right),tip.getHeight() - (insets.top + insets.bottom));     v.paint(g,paintTextR);   }  else {     g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));     g.setFont(style.getFont(context));     context.getStyle().getGraphicsUtils(context).paintText(context,g,tip.getTipText(),insets.left,insets.top,-1);   } } "
"private static void initialize(){   if (!initialized) {     try {       String adminDN=(String)AccessController.doPrivileged(new AdminDNAction());       String adminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());       SSOTokenManager mgr=SSOTokenManager.getInstance();       ServiceConfigManager scm=new ServiceConfigManager(SERVICE_NAME,mgr.createSSOToken(new AuthPrincipal(adminDN),adminPassword));       if (!addedListener) {         addedListener=true;         scm.addListener(new AdminInterfaceUtils());       }       ServiceConfig globalConfig=scm.getGlobalConfig(null);       ServiceConfig templatesConfig=globalConfig.getSubConfig(TEMPLATES);       ServiceConfig structTemplateSubConfig=templatesConfig.getSubConfig(STRUCTURE_TEMPLATES);       ServiceConfig groupContConfig=structTemplateSubConfig.getSubConfig(GCCREATE_ATTR_NAME);       ServiceConfig peopleContConfig=structTemplateSubConfig.getSubConfig(PCCREATE_ATTR_NAME);       ServiceConfig orgAdminConfig=structTemplateSubConfig.getSubConfig(ORG_ADMIN_ATTR_NAME);       ServiceConfig helpDeskAdminConfig=structTemplateSubConfig.getSubConfig(HELP_DESK_ADMIN_ATTR_NAME);       ServiceConfig policyAdminConfig=structTemplateSubConfig.getSubConfig(POLICY_ADMIN_ATTR_NAME);       defaultGCCreateDuringOrgConfig=getConfigAttributeValue(groupContConfig,defaultGCCreateDuringOrgConfig);       defaultPCCreateDuringOrgConfig=getConfigAttributeValue(peopleContConfig,defaultPCCreateDuringOrgConfig);       defaultORGADMIN=getConfigAttributeValue(orgAdminConfig,defaultORGADMIN);       defaultHELP_DESK_ADMIN=getConfigAttributeValue(helpDeskAdminConfig,defaultHELP_DESK_ADMIN);       defaultPOLICY_ADMIN=getConfigAttributeValue(policyAdminConfig,defaultPOLICY_ADMIN);       ServiceSchemaManager sm=new ServiceSchemaManager(CONSOLE_SERVICE_NAME,mgr.createSSOToken(new AuthPrincipal(adminDN),adminPassword));       if (!addedListener) {         addedListener=true;         sm.addListener(new AdminInterfaceUtils());       }       ServiceSchema schema=sm.getGlobalSchema();       defaultAC=getAttributeValue(schema,AC_ATTR_NAME,defaultAC);       defaultGC=getAttributeValue(schema,GC_ATTR_NAME,defaultGC);       defaultPC=getAttributeValue(schema,PC_ATTR_NAME,defaultPC);     }  catch (    Exception e) {       debug.warning(\"AdminInterfaceUtils: Unable to get \" + \"default People, Groups, Org Admin Role, \" + \"Help Desk Admin Role, Policy Admin Role and \"+ \"Agents containers from SM\",e);     }     if (debug.messageEnabled()) {       debug.message(\"AdminInterfaceUtils: Defaults container: \" + defaultPC + \", \"+ defaultGC+ \", \"+ defaultAC+ \", \"+ defaultPCCreateDuringOrgConfig+ \", \"+ defaultGCCreateDuringOrgConfig+ \", \"+ defaultORGADMIN+ \", \"+ defaultHELP_DESK_ADMIN+ \", \"+ defaultPOLICY_ADMIN);     }     initialized=true;   } } "
"public DocumentFragment rtree(XPathContext support){   DocumentFragment docFrag=null;   int result=rtf();   if (DTM.NULL == result) {     DTM frag=support.createDocumentFragment();     frag.appendTextChild(str());     docFrag=(DocumentFragment)frag.getNode(frag.getDocument());   }  else {     DTM frag=support.getDTM(result);     docFrag=(DocumentFragment)frag.getNode(frag.getDocument());   }   return docFrag; } "
"public void editingCanceled(ChangeEvent e){   getHandler().editingCanceled(e); } "
"private static void createRealmReadOnlyPolicy(PolicyManager policyManager,String orgDN,String orgID){   String classMethod=\"UpgradeUtils:createRealmReadOnlyPolicy\";   try {     String policyName=orgID + \"^^\" + REALM_READ_ONLY;     Policy realmPolicy=new Policy(policyName,null,false,true);     String serviceName=DELEGATION_SERVICE;     String resourceName=\"sms://*\" + orgDN + \"/\"+ REALM_SERVICE;     Rule rule=getRule(serviceName,resourceName);     if (rule != null) {       realmPolicy.addRule(rule);     }     String policyAdminRoleUniversalID=getUniversalID(orgDN,ORG_POLICY_ADMIN_ROLE);     Subject subject=getSubject(policyManager,policyAdminRoleUniversalID);     if (subject != null) {       realmPolicy.addSubject(DELEGATION_SUBJECT,subject,false);     }     policyManager.addPolicy(realmPolicy);   }  catch (  Exception e) {     debug.error(classMethod + \"Error creating realm read only policy\",e);   } } "
"@Override public void onWZAudioPaused(boolean paused){   mPaused=paused;   setVisibility(paused ? View.GONE : View.VISIBLE); } "
"public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint,TextDirectionHeuristic textDir){   return isBoring(layoutContext,text,paint,textDir,null); } "
"public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,char[] match){   int length=offset + match.length;   if (length > text.offset + text.count)   return false;   char[] textArray=text.array;   for (int i=offset, j=0; i < length; i++, j++) {     char c1=textArray[i];     char c2=match[j];     if (ignoreCase) {       c1=Character.toUpperCase(c1);       c2=Character.toUpperCase(c2);     }     if (c1 != c2)     return false;   }   return true; } "
"public int signum(){   return this.signum; } "
"public BasicTextPaneUI(){   super(); } "
"void addResourcePrefixes(String serviceTypeName,Set resourcePrefixes) throws PolicyException {   ServiceConfig resources=getResourcesServiceConfig(true);   if (resources == null) {     return;   }   ServiceConfig leafConfig=null;   try {     leafConfig=resources.getSubConfig(serviceTypeName);   }  catch (  SMSException e1) {     throw new PolicyException(e1);   } catch (  SSOException e1) {     throw (new PolicyException(ResBundleUtils.rbName,\"invalid_sso_token\",null,null));   }   if (leafConfig == null) {     try {       Map newAttrs=new HashMap();       Set newSet=new HashSet();       Map prefixMap=addResourcePrefixes(resourcePrefixes,new HashMap());       newSet.clear();       newSet.add(resourcePrefixesToXml(prefixMap));       newAttrs.put(RESOURCE_PREFIXES,newSet);       resources.addSubConfig(serviceTypeName,PolicyManager.RESOURCES_POLICY_ID,0,newAttrs);     }  catch (    SMSException e2) {       throw new PolicyException(e2);     } catch (    SSOException e) {       throw (new PolicyException(ResBundleUtils.rbName,\"invalid_sso_token\",null,null));     }     return;   }   Map existingAttrs=null;   existingAttrs=leafConfig.getAttributes();   if ((existingAttrs == null) || (!existingAttrs.containsKey(RESOURCE_PREFIXES))) {     try {       Set newSet=new HashSet();       Map prefixMap=addResourcePrefixes(resourcePrefixes,new HashMap());       newSet.clear();       newSet.add(resourcePrefixesToXml(prefixMap));       leafConfig.addAttribute(RESOURCE_PREFIXES,newSet);     }  catch (    SMSException e4) {       throw new PolicyException(e4);     } catch (    SSOException e) {       throw (new PolicyException(ResBundleUtils.rbName,\"invalid_sso_token\",null,null));     }     return;   }   Set existingRes=(Set)existingAttrs.get(RESOURCE_PREFIXES);   try {     Map newAttrs=new HashMap();     Map prefixMap=null;     if ((existingRes != null) && (!existingRes.isEmpty())) {       String prefixXml=(String)(existingRes.iterator().next());       prefixMap=xmlToResourcePrefixes(prefixXml);     }  else {       prefixMap=new HashMap();     }     prefixMap=addResourcePrefixes(resourcePrefixes,prefixMap);     Set newSet=new HashSet(1);     newSet.add(resourcePrefixesToXml(prefixMap));     newAttrs.put(RESOURCE_PREFIXES,newSet);     leafConfig.setAttributes(newAttrs);   }  catch (  SMSException e5) {     throw new PolicyException(e5);   } catch (  SSOException e) {     throw (new PolicyException(ResBundleUtils.rbName,\"invalid_sso_token\",null,null));   } } "
"SSOTokenImpl(Session session){   this.session=session;   ldapConnect=false; } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509SKI createX509DataTypeX509SKI(byte[] value) throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509SKIImpl(value); } "
"private PromptTrustManager(){ } "
"public Engine(String service){   this.serviceName=service; } "
"public static String dateToString(final Date date){   return dateToString(date,UTC_DATE_FORMAT,UTC_TIME_ZONE); } "
"public Boolean isConfigExportSharePasswordEnabled(){   return configExportSharePassword; } "
"private int indexOf(Object x){   if (x != null) {     if (x instanceof ScheduledFutureTask) {       int i=((ScheduledFutureTask)x).heapIndex;       if (i >= 0 && i < size && queue[i] == x)       return i;     }  else {       for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;     }   }   return -1; } "
"public SystemConfigurationException(String errorCode,Object[] args){   super(BUNDLE_NAME,errorCode,args); } "
"static TargAttrFilterList decode(int mask,String expression) throws AciException {   LinkedHashMap<AttributeType,SearchFilter> attrFilterList=new LinkedHashMap<>();   String[] subExpressions=expression.split(filterListSeperator,-1);   for (  String subs : subExpressions) {     Pattern pattern=Pattern.compile(attributeFilter);     Matcher matcher=pattern.matcher(subs);     if (!matcher.find() || matcher.groupCount() != expectedGroupCount) {       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_FILTER_LIST_FORMAT.get(expression);       throw new AciException(message);     }     String attributeName=matcher.group(attributePos).toLowerCase();     int semicolon=attributeName.indexOf(';');     if (semicolon != -1) {       attributeName=attributeName.substring(0,semicolon);     }     String filterString=matcher.group(filterPos);     AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attributeName);     SearchFilter filter;     try {       filter=SearchFilter.createFilterFromString(filterString);       attrFilterList.put(attrType,filter);     }  catch (    DirectoryException ex) {       LocalizableMessage er=ex.getMessageObject();       LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_FILTER_LISTS_FILTER.get(filterString,er);       throw new AciException(message);     }     verifyFilterComponents(filter,attrType);   }   return new TargAttrFilterList(mask,attrFilterList); } "
"@Override public int hashCode(){   int hash=5;   hash=59 * hash + Objects.hashCode(this.name);   hash=59 * hash + Objects.hashCode(this.description);   return hash; } "
"public static final void clearLoggingBehaviors(){ synchronized (loggingBehaviors) {     loggingBehaviors.clear();   } } "
"public synchronized void write(byte b[],int off,int len) throws IOException {   if (len >= buf.length) {     flushBuffer();     out.write(b,off,len);     return;   }   if (len > buf.length - count) {     flushBuffer();   }   System.arraycopy(b,off,buf,count,len);   count+=len; } "
"protected char charAt(String value,int index){   if (index < 0 || index >= value.length()) {     return Character.MIN_VALUE;   }   return value.charAt(index); } "
"public AMPreCallBackException(SSOToken token,String errorCode){   super(token,errorCode); } "
"@Override public String toString(){   return filename; } "
"private boolean isSchemaConfigAttribute(Attribute attribute){   AttributeType attrType=attribute.getAttributeDescription().getAttributeType();   return attrType.hasName(ATTR_SCHEMA_ENTRY_DN) || attrType.hasName(ATTR_BACKEND_ENABLED) || attrType.hasName(ATTR_BACKEND_CLASS)|| attrType.hasName(ATTR_BACKEND_ID)|| attrType.hasName(ATTR_BACKEND_BASE_DN)|| attrType.hasName(ATTR_BACKEND_WRITABILITY_MODE)|| attrType.hasName(ATTR_SCHEMA_SHOW_ALL_ATTRIBUTES)|| attrType.hasName(ATTR_COMMON_NAME)|| attrType.hasName(OP_ATTR_CREATORS_NAME_LC)|| attrType.hasName(OP_ATTR_CREATE_TIMESTAMP_LC)|| attrType.hasName(OP_ATTR_MODIFIERS_NAME_LC)|| attrType.hasName(OP_ATTR_MODIFY_TIMESTAMP_LC); } "
"static void clear(){   federationCache.clear();   configCache.clear(); } "
"public void runTest() throws Throwable {   Document doc;   Document newDoc;   DocumentType docType=null;   DOMImplementation domImpl;   Element element;   Element elementTest;   Element elementDoc;   Attr attribute;   Node setNode;   Node appendedChild;   NodeList elementList;   boolean hasAttributes;   doc=(Document)load(\"staffNS\",false);   domImpl=doc.getImplementation();   newDoc=domImpl.createDocument(\"http://www.w3.org/DOM/Test\",\"test\",docType);   element=newDoc.createElementNS(\"http://www.w3.org/DOM/Test\",\"dom:elem\");   attribute=newDoc.createAttribute(\"attr\");   setNode=element.setAttributeNode(attribute);   elementDoc=newDoc.getDocumentElement();   appendedChild=elementDoc.appendChild(element);   elementList=newDoc.getElementsByTagNameNS(\"http://www.w3.org/DOM/Test\",\"elem\");   elementTest=(Element)elementList.item(0);   hasAttributes=elementTest.hasAttributes();   assertTrue(\"nodehasattributes04\",hasAttributes); } "
"public static boolean isAMSDKConfigured(String realm){   if (ServiceManager.isCoexistenceMode()) {     return (true);   }   realm=DNUtils.normalizeDN(realm);   Boolean answer=(Boolean)amsdkConfiguredRealms.get(realm);   if (answer == null) {     try {       SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());       OrganizationConfigManagerImpl ocm=OrganizationConfigManagerImpl.getInstance(token,realm);       String orgname=getAmsdkdn(token,ocm);       answer=Boolean.valueOf(orgname != null);     }  catch (    SSOException ssoe) {       answer=Boolean.FALSE;     } catch (    SMSException smse) {       answer=Boolean.FALSE;     }     amsdkConfiguredRealms.put(realm,answer);   }   return (answer.booleanValue()); } "
"@Override public FilterDef findFilterDef(String filterName){ synchronized (filterDefs) {     return (filterDefs.get(filterName));   } } "
"private <M extends Configuration>void deregisterDelayedDeleteListener(DN baseDN,ConfigurationDeleteListener<M> listener) throws ConfigException {   DN parentDN=baseDN.parent();   int delayWrappers=0;   while (parentDN != null) {     if (!configRepository.hasEntry(parentDN)) {       parentDN=parentDN.parent();       delayWrappers++;     }  else {       for (      ConfigAddListener l : configRepository.getAddListeners(parentDN)) {         if (l instanceof DelayedConfigAddListener) {           DelayedConfigAddListener delayListener=(DelayedConfigAddListener)l;           ConfigAddListener wrappedListener;           int i=delayWrappers;           for (; i > 0; i--) {             wrappedListener=delayListener.getDelayedAddListener();             if (wrappedListener instanceof DelayedConfigAddListener) {               delayListener=(DelayedConfigAddListener)l;             }  else {               break;             }           }           if (i > 0) {             continue;           }           ConfigDeleteListener delayedListener=delayListener.getDelayedDeleteListener();           if (delayedListener instanceof ConfigDeleteListenerAdaptor) {             ConfigDeleteListenerAdaptor<?> adaptor=(ConfigDeleteListenerAdaptor<?>)delayedListener;             ServerManagedObjectDeleteListener<?> l2=adaptor.getServerManagedObjectDeleteListener();             if (l2 instanceof ServerManagedObjectDeleteListenerAdaptor<?>) {               ServerManagedObjectDeleteListenerAdaptor<?> adaptor2=(ServerManagedObjectDeleteListenerAdaptor<?>)l2;               if (adaptor2.getConfigurationDeleteListener() == listener) {                 configRepository.deregisterAddListener(parentDN,l);               }             }           }         }       }       return;     }   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeattributenodetype.class,args); } "
"public void testGcdFirstZero(){   byte aBytes[]={0};   byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};   int aSign=1;   int bSign=1;   byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.gcd(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public void toString(StringBuilder buffer){   buffer.append(\"EntryEncodeConfig(excludeDN=\");   buffer.append(excludeDN);   buffer.append(\", compressAttrDescriptions=\");   buffer.append(compressAttrDescriptions);   buffer.append(\", compressObjectClassSets=\");   buffer.append(compressObjectClassSets);   buffer.append(\")\"); } "
"@Override public void refresh(){   TraceAngleRestriction snap_angle=i_board.get_routing_board().brd_rules.get_trace_snap_angle();   if (snap_angle.is_limit_45())   snap_angle_45_button.setSelected(true);  else   snap_angle_none_button.setSelected(true);   if (i_board.itera_settings.is_stitch_route())   stitch_button.setSelected(true);  else   dynamic_button.setSelected(true);   if (i_board.itera_settings.get_manual_rule_selection()) {     manual_button.setSelected(true);     manual_rule_window.setVisible(true);   }  else {     automatic_button.setSelected(true);   }   shove_check.setSelected(i_board.itera_settings.is_push_enabled());   drag_component_check.setSelected(i_board.itera_settings.get_drag_components_enabled());   via_snap_to_smd_center_check.setSelected(i_board.itera_settings.is_via_snap_to_smd_center());   ignore_conduction_check.setSelected(i_board.get_routing_board().brd_rules.get_ignore_conduction());   hilight_routing_obstacle_check.setSelected(i_board.itera_settings.is_hilight_routing_obstacle());   neckdown_check.setSelected(i_board.itera_settings.is_automatic_neckdown());   BrdOutline outline=i_board.get_routing_board().get_outline();   if (outline != null) {     outline_keepout_check.setSelected(outline.keepout_outside_outline_generated());   }   double edge_to_turn_dist=i_board.get_routing_board().brd_rules.get_pin_edge_to_turn_dist();   edge_to_turn_dist=i_board.coordinate_transform.board_to_user(edge_to_turn_dist);   edge_to_turn_dist_field.setValue(edge_to_turn_dist);   restrict_pin_exit_directions_check.setSelected(edge_to_turn_dist > 0);   int min_move_slider_value=i_board.itera_settings.trace_pullt_min_move / c_accuracy_scale_factor;   min_move_slider_value=Math.min(min_move_slider_value,c_accuracy_max_slider_value);   pullt_min_move_slider.setValue(min_move_slider_value);   manual_rule_window.refresh(); } "
"public boolean delete(){   return deleteStrategy.deleteQuietly(new File(path)); } "
"public void disableVertexAttribute(String name){   int location=fetchAttributeLocation(name);   if (location == -1)   return;   GLES20.glDisableVertexAttribArray(location); } "
"public static TestSSLContext create(TestKeyStore client,TestKeyStore server){   String provider=StandardNames.JSSE_PROVIDER_NAME;   return create(client,server,provider,provider); } "
"public <M extends Configuration>void registerAddListener(InstantiableRelationDefinition<?,M> d,ServerManagedObjectAddListener<M> listener) throws ConfigException {   validateRelationDefinition(d);   DN baseDN=DNBuilder.create(path,d);   ConfigAddListener adaptor=new ConfigAddListenerAdaptor<>(serverContext,path,d,listener);   registerAddListener(baseDN,adaptor); } "
"public int read() throws IOException { synchronized (lock) {     ensureOpen();     if (next >= length)     return -1;     return str.charAt(next++);   } } "
"public ClearPasswordStorageSchemeTestCase(){   super(\"cn=Clear,cn=Password Storage Schemes,cn=config\"); } "
"public static ComponentUI createUI(JComponent x){   return new SynthSplitPaneUI(); } "
"public boolean isDataFlavorSupported(DataFlavor df){   return getDropTargetContext().isDataFlavorSupported(df); } "
"public EntityException(String msg,String errorCode,Object[] args){   super(msg);   this.localizedMsg=msg;   this.errorCode=errorCode;   this.args=args; } "
"public void runTest() throws Throwable {   Document doc;   int nodeType;   doc=(Document)load(\"hc_staff\",false);   nodeType=(int)doc.getNodeType();   assertEquals(\"nodeDocumentNodeTypeAssert1\",9,nodeType); } "
"public void runTest() throws Throwable {   String namespaceURI=\"http://www.wedding.com/\";   String qualifiedName;   Document doc;   Attr newAttr;   java.util.List illegalQNames=new java.util.ArrayList();   illegalQNames.add(\"person:{\");   illegalQNames.add(\"person:}\");   illegalQNames.add(\"person:~\");   illegalQNames.add(\"person:'\");   illegalQNames.add(\"person:!\");   illegalQNames.add(\"person:@\");   illegalQNames.add(\"person:#\");   illegalQNames.add(\"person:$\");   illegalQNames.add(\"person:%\");   illegalQNames.add(\"person:^\");   illegalQNames.add(\"person:&\");   illegalQNames.add(\"person:*\");   illegalQNames.add(\"person:(\");   illegalQNames.add(\"person:)\");   illegalQNames.add(\"person:+\");   illegalQNames.add(\"person:=\");   illegalQNames.add(\"person:[\");   illegalQNames.add(\"person:]\");   illegalQNames.add(\"person:\\\\\");   illegalQNames.add(\"person:/\");   illegalQNames.add(\"person:;\");   illegalQNames.add(\"person:`\");   illegalQNames.add(\"person:<\");   illegalQNames.add(\"person:>\");   illegalQNames.add(\"person:,\");   illegalQNames.add(\"person:a \");   illegalQNames.add(\"person:\\\"\");   doc=(Document)load(\"staffNS\",false);   for (int indexN10090=0; indexN10090 < illegalQNames.size(); indexN10090++) {     qualifiedName=(String)illegalQNames.get(indexN10090); {       boolean success=false;       try {         newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);       }  catch (      DOMException ex) {         success=(ex.code == DOMException.INVALID_CHARACTER_ERR);       }       assertTrue(\"throw_INVALID_CHARACTER_ERR\",success);     }   } } "
"public static double content(Pnt[] simplex){   Pnt[] matrix=new Pnt[simplex.length];   for (int i=0; i < matrix.length; i++)   matrix[i]=simplex[i].extend(1);   int fact=1;   for (int i=1; i < matrix.length; i++)   fact=fact * i;   return determinant(matrix) / fact; } "
"public boolean isNodeChild(TreeNode aNode){   boolean retval;   if (aNode == null) {     retval=false;   }  else {     if (getChildCount() == 0) {       retval=false;     }  else {       retval=(aNode.getParent() == this);     }   }   return retval; } "
"public void triplet(Object obj1,Object obj2,int x){   Object localObj; synchronized (obj1) { synchronized (obj1) {       if (x == 0) { synchronized (obj1) {           localObj=obj2;         }       }  else {         localObj=obj1;       }     }   }   doNothing(localObj); } "
"public FramedAppleTalkNetworkAttribute(byte[] octets){   super(octets);   networkNumber=OctetUtils.toIntVal(octets); } "
"private void dispatchCallbackInvoke(TransactInfo transactInfo,String paramMarshalling){   mJsBridge.dispatchClientCallback(transactInfo,paramMarshalling); } "
"private void retrieveFailedOperationElements(ModifyOperation modifyOperation){   assertTrue(modifyOperation.getProcessingStartTime() > 0);   assertTrue(modifyOperation.getProcessingStopTime() >= modifyOperation.getProcessingStartTime());   assertTrue(modifyOperation.getProcessingTime() >= 0); } "
"public long position(Blob pattern,long start) throws SerialException, SQLException {   isValid();   return position(pattern.getBytes(1,(int)(pattern.length())),start); } "
"public synchronized void disableAllObjectNames(){   RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),\"disableAllObjectNames\");   selectedNames=new Vector<ObjectName>();   deselectedNames=null;   RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),\"disableAllObjectNames\");   return; } "
"public static long decodeResponseValue(ByteString responseValue) throws DecodeException {   ASN1Reader reader=ASN1.getReader(responseValue);   try {     return reader.readInteger();   }  catch (  Exception e) {     return 0;   } } "
"public synchronized T unpush(){   T content=null;   if (first != null) {     Entry element=first;     first=first.getNext();     content=element.getContent();     if (first == null) {       last=null;     }  else {       first.setPrevious(null);     }     size--;     element.invalidate();   }   return content; } "
"public static StorageStatus working(){   return WORKING; } "
"public TagField createField(Artwork artwork) throws FieldDataInvalidException {   throw new FieldDataInvalidException(\"Not supported\"); } "
"public boolean isFullyQualified(){   return fqdn; } "
"private void recordScreenView(){   String screenName=getCurrentImageId() + \"-\" + getCurrentImageTitle();   mFirebaseAnalytics.setCurrentScreen(this,screenName,null); } "
"boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n,Comparator<? super K> cmp){   if (n == null)   return false;   if (hi == null)   return true;   K k=n.key;   if (k == null)   return true;   int c=cpr(cmp,k,hi);   if (c > 0 || (c == 0 && !hiInclusive))   return false;   return true; } "
"static boolean debugEnabled(){   return (DEBUG_METHOD_HANDLE_NAMES | DUMP_CLASS_FILES | TRACE_INTERPRETER| TRACE_METHOD_LINKAGE); } "
"public void requestSecondsUntilPasswordResetLockout(){   operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT); } "
"protected int askPort(LocalizableMessage prompt,int defaultValue,LocalizedLogger logger){   while (true) {     try {       int port=readPort(prompt,defaultValue);       if (port != -1) {         return port;       }     }  catch (    ClientException ce) {       logger.warn(LocalizableMessage.raw(\"Error reading input: \" + ce,ce));     }   } } "
"Parsed toUnresolved(){   return currentParsed(); } "
"public Set<String> names(){   TreeSet<String> result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);   for (int i=0, size=size(); i < size; i++) {     result.add(name(i));   }   return Collections.unmodifiableSet(result); } "
"public void paintText(SynthContext ss,Graphics g,String text,int x,int y,int mnemonicIndex){   if (text != null) {     JComponent c=ss.getComponent();     FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);     y+=fm.getAscent();     SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,x,y);   } } "
"public final void append(char[] chars,int start,int length){   int strlen=length;   if (0 == strlen)   return;   int copyfrom=start;   char[] chunk=m_array[m_lastChunk];   int available=m_chunkSize - m_firstFree;   while (strlen > 0) {     if (available > strlen)     available=strlen;     System.arraycopy(chars,copyfrom,m_array[m_lastChunk],m_firstFree,available);     strlen-=available;     copyfrom+=available;     if (strlen > 0) {       int i=m_array.length;       if (m_lastChunk + 1 == i) {         char[][] newarray=new char[i + 16][];         System.arraycopy(m_array,0,newarray,0,i);         m_array=newarray;       }       chunk=m_array[++m_lastChunk];       if (chunk == null) {         if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {           m_innerFSB=new FastStringBuffer(this);         }         chunk=m_array[m_lastChunk]=new char[m_chunkSize];       }       available=m_chunkSize;       m_firstFree=0;     }   }   m_firstFree+=available; } "
"public void appendPath(String p_addToPath) throws MalformedURIException {   if (p_addToPath == null || p_addToPath.trim().length() == 0) {     return;   }   if (!isURIString(p_addToPath)) {     throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));   }   if (m_path == null || m_path.trim().length() == 0) {     if (p_addToPath.startsWith(\"/\")) {       m_path=p_addToPath;     }  else {       m_path=\"/\" + p_addToPath;     }   }  else   if (m_path.endsWith(\"/\")) {     if (p_addToPath.startsWith(\"/\")) {       m_path=m_path.concat(p_addToPath.substring(1));     }  else {       m_path=m_path.concat(p_addToPath);     }   }  else {     if (p_addToPath.startsWith(\"/\")) {       m_path=m_path.concat(p_addToPath);     }  else {       m_path=m_path.concat(\"/\" + p_addToPath);     }   } } "
"public boolean isLong(STypeDef requiredType,NumberLiteral literal,LineCol lineCol) throws SyntaxException {   return (requiredType == null || requiredType instanceof LongTypeDef || (requiredType instanceof SClassDef) && requiredType.isAssignableFrom(getTypeWithName(\"java.lang.Long\",lineCol))) && !literal.literal().contains(\".\"); } "
"public DatatypeConfigurationException(Throwable cause){   super(cause); } "
"public SendNotificationException(Throwable t){   super(t.getMessage()); } "
"private void failIfDeleted(){   if (isDeleted()) {     throw new IllegalStateException(\"Operation failed: element is deleted\");   } } "
"public boolean hasReceiverTypeDispatch(){   return MethodHandleNatives.refKindDoesDispatch(getReferenceKind()); } "
"public boolean equals(Object obj){   if (obj instanceof FontKey) {     FontKey font=(FontKey)obj;     return (size == font.size) && (style == font.style) && (family == font.family);   }   return false; } "
"@Override public void shutdown(){   super.shutdown();   clearRemoteLSHandlers(); } "
"public boolean equals(Object obj){   if (this == obj) {     return true;   }   if (obj instanceof ECFieldF2m) {     ECFieldF2m o=(ECFieldF2m)obj;     if (this.m == o.m) {       if (this.rp == null) {         if (o.rp == null) {           return true;         }       }  else {         return Arrays.equals(this.ks,o.ks);       }     }   }   return false; } "
"private String readInputUntil(char... symbols){   String s=\"\";   while (!accept(symbols)) {     s+=(char)data[index];     skip();   }   return s; } "
"public static ArrayList<String> matches(String text,int results){   ArrayList<String> urls=new ArrayList<String>();   String[] splitString=(text.split(\" \"));   for (  String string : splitString) {     try {       URL item=new URL(string);       urls.add(item.toString());     }  catch (    Exception e) {     }     if (results == FIRST && urls.size() > 0)     break;   }   return urls; } "
"public static void main(final String[] args){   DOMTestCase.doMain(importNode01.class,args); } "
"public UpgradeParameters isIgnoreErrors(boolean ignore){   ignoreErrors=ignore;   return this; } "
"public AgeFileFilter(File cutoffReference,boolean acceptOlder){   this(cutoffReference.lastModified(),acceptOlder); } "
"private void raiseErrorEvent(int dialogTimeoutError,SIPClientTransaction clientTransaction){   SIPDialogErrorEvent newErrorEvent;   Iterator<SIPDialogEventListener> listenerIterator;   SIPDialogEventListener nextListener;   newErrorEvent=new SIPDialogErrorEvent(this,dialogTimeoutError);   newErrorEvent.setClientTransaction(clientTransaction); synchronized (eventListeners) {     listenerIterator=eventListeners.iterator();     while (listenerIterator.hasNext()) {       nextListener=(SIPDialogEventListener)listenerIterator.next();       nextListener.dialogErrorEvent(newErrorEvent);     }   }   eventListeners.clear();   if (dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_SENT_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_ACK_NOT_RECEIVED_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.EARLY_STATE_TIMEOUT && dialogTimeoutError != SIPDialogErrorEvent.DIALOG_REINVITE_TIMEOUT) {     delete();   }   stopTimer(); } "
"public String toString(){   return getName(); } "
"public FrameBodyTSRC(){ } "
"@Override public void stop(int svc){   try {     if (impl != null && impl.stop(svc)) {       impl.setChannel(null);       impl=null;       channel=null;     }   }  catch (  Exception x) {     log.error(sm.getString(\"McastService.stopFail\",Integer.valueOf(svc)),x);   } } "
"public OIDCIdTokenConfigBuilder customAuthenticationContextMapperClass(String customAuthenticationContextMapperClass){   this.customAuthenticationContextMapper=customAuthenticationContextMapperClass;   return this; } "
"private int useCount(){   return m_useCount2; } "
"protected boolean isServiced(String name) throws Exception {   String[] params={name};   String[] signature={\"java.lang.String\"};   Boolean result=(Boolean)mBeanServer.invoke(oname,\"isServiced\",params,signature);   return result.booleanValue(); } "
"public void actionPerformed(ActionEvent e){   JTextComponent target=getTextComponent(e);   if (target != null) {     int selectedIndex;     Rectangle visible=new Rectangle();     target.computeVisibleRect(visible);     if (left) {       visible.x=Math.max(0,visible.x - visible.width);     }  else {       visible.x+=visible.width;     }     selectedIndex=target.getCaretPosition();     if (selectedIndex != -1) {       if (left) {         selectedIndex=target.viewToModel(new Point(visible.x,visible.y));       }  else {         selectedIndex=target.viewToModel(new Point(visible.x + visible.width - 1,visible.y + visible.height - 1));       }       Document doc=target.getDocument();       if ((selectedIndex != 0) && (selectedIndex > (doc.getLength() - 1))) {         selectedIndex=doc.getLength() - 1;       }  else       if (selectedIndex < 0) {         selectedIndex=0;       }       if (select)       target.moveCaretPosition(selectedIndex);  else       target.setCaretPosition(selectedIndex);     }   } } "
"public boolean isReverse(){   return true; } "
"public static char[] convertFromUtf32ToCharArray(int codePoint){   if (codePoint < 0x10000) {     return new char[]{(char)codePoint};   }   codePoint-=0x10000;   return new char[]{(char)(codePoint / 0x400 + 0xd800),(char)(codePoint % 0x400 + 0xdc00)}; } "
"protected void shutdown(){   alert[0]=0;   alert[1]=0;   recordProtocol=null; } "
"@Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){   delegate.dump(prefix,fd,writer,args); } "
"public PWResetServlet(){   super(); } "
"private void finalizeAdditions(boolean addHomeScreenShortcuts){   finalizeWorkFolder();   if (addHomeScreenShortcuts && !mHomescreenApps.isEmpty()) {     mModel.addAndBindAddedWorkspaceItems(mContext,mHomescreenApps);   } } "
"@Override protected Object createSsoServerInstanceMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){   if (server != null)   instanceGroup=new SsoServerInstanceImpl(this,server);  else   instanceGroup=new SsoServerInstanceImpl(this);   return instanceGroup; } "
"public CropImageFilter(int x,int y,int w,int h){   cropX=x;   cropY=y;   cropW=w;   cropH=h; } "
"public static void createAgentGroup(SSOToken ssoToken,String realm,String agentGroupName,String agentType,Map attrValues,String serverURL,String agentURL) throws IdRepoException, SSOException, SMSException, MalformedURLException, ConfigurationException {   if ((serverURL == null) || (serverURL.trim().length() == 0)) {     throw new ConfigurationException(\"create.agent.invalid.server.url\",null);   }   FQDNUrl urlAgent=null;   if ((agentURL != null) && (agentURL.trim().length() > 0)) {     urlAgent=new FQDNUrl(agentURL);   }   createAgentGroupEx(ssoToken,realm,agentGroupName,agentType,attrValues,new FQDNUrl(serverURL),urlAgent); } "
"public CaretPolicy(){ } "
"public static void error(Level level,String msgid,String data[]){   error(level,msgid,data,null,null); } "
"public Hashtable<String,Object> toHash(){   final Hashtable<String,Object> values=new Hashtable();   for (int i=0; i < this.columnsValues.size(); i++) {     final JKTableColumnValue value=this.columnsValues.get(i);     values.put(getColumn(i).getName(),value);   }   return values; } "
"public static boolean equal(Object a,Object b){   return a == b || (a != null && a.equals(b)); } "
"public boolean hasTag(){   if (parameters == null)   return false;   return hasParameter(ParameterNames.TAG); } "
"public FrameBodyTSOA(){ } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testNode;   NamedNodeMap attributes;   Attr streetAttr;   String strong1;   String strong2;   doc=(Document)load(\"hc_staff\",false);   addressList=doc.getElementsByTagName(\"acronym\");   testNode=addressList.item(1);   attributes=testNode.getAttributes();   streetAttr=(Attr)attributes.getNamedItem(\"class\");   strong1=streetAttr.getNodeName();   strong2=streetAttr.getName();   assertEqualsAutoCase(\"attribute\",\"nodeName\",\"class\",strong1);   assertEqualsAutoCase(\"attribute\",\"name\",\"class\",strong2); } "
"public void testSetBitPositiveInside1(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=20;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.setBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public void serializeDOM3(Node node) throws IOException {   try {     DOM3TreeWalker walker=new DOM3TreeWalker(fSerializationHandler,fErrorHandler,fSerializerFilter,fNewLine);     walker.traverse(node);   }  catch (  org.xml.sax.SAXException se) {     throw new WrappedRuntimeException(se);   } } "
"public String toBASE64EncodedString() throws FSMsgException {   if ((providerId == null) || (providerId.length() == 0)) {     FSUtils.debug.error(\"FSFederationTerminationNotification.\" + \"toURLEncodedQueryString: providerId is null in the \" + \"request with requestId:\"+ requestID);     String[] args={requestID};     throw new FSMsgException(\"nullProviderIdWRequestId\",args);   }   if ((requestID == null) || (requestID.length() == 0)) {     requestID=SAMLUtils.generateID();     if (requestID == null) {       FSUtils.debug.error(\"FSFederationTerminationNotification.\" + \"toURLEncodedQueryString: couldn't generate \" + \"RequestID.\");       throw new FSMsgException(\"errorGenerateID\",null);     }   }   return Base64.encode(this.toXMLString().getBytes()); } "
"public void testUnsupportedCallbackException06(){   myCallback c=new myCallback();   assertNotNull(\"Callback object is null\",c);   UnsupportedCallbackException ucE;   for (int i=0; i < msgs.length; i++) {     ucE=new UnsupportedCallbackException(c,msgs[i]);     assertEquals(\"getMessage() must return: \".concat(msgs[i]),ucE.getMessage(),msgs[i]);     assertEquals(\"Incorrect callback object was returned\",c,ucE.getCallback());   } } "
"public static boolean isIgnoredProfile(String realm){   return IGNORE_PROFILE.equalsIgnoreCase(getProfileAttribute(realm)); } "
"public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {   int blockSize=cipher.getBlockSize();   int resultLen=0;   if (forEncryption) {     if (bufOff == blockSize) {       if ((outOff + 2 * blockSize) > out.length) {         reset();         throw new OutputLengthException(\"output buffer too short\");       }       resultLen=cipher.processBlock(buf,0,out,outOff);       bufOff=0;     }     padding.addPadding(buf,bufOff);     resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);     reset();   }  else {     if (bufOff == blockSize) {       resultLen=cipher.processBlock(buf,0,buf,0);       bufOff=0;     }  else {       reset();       throw new DataLengthException(\"last block incomplete in decryption\");     }     try {       resultLen-=padding.padCount(buf);       System.arraycopy(buf,0,out,outOff,resultLen);     }   finally {       reset();     }   }   return resultLen; } "
"public Obligation createObligation(){   Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST);   if (obj == null) {     return new ObligationImpl();   }  else {     return (Obligation)obj;   } } "
"private void removeStates(int count){   for (int i=0; i < count; i++)   playerStates.remove(0); } "
"public boolean duringEveryday(OmniDate userDefinedValue){   if (userDefinedValue.afterEveryday(new OmniDate(startTime)) && userDefinedValue.beforeEveryday(new OmniDate(endTime))) {     return true;   }   return false; } "
"public void testIntValuePositive2(){   byte aBytes[]={12,56,100};   int resInt=800868;   int aNumber=new BigInteger(aBytes).intValue();   assertTrue(aNumber == resInt); } "
"@Override protected final ShapeTile[] calculate_tree_shapes(AwtreeShapeSearch p_search_tree){   return new ShapeTile[0]; } "
"private boolean copyResource(Hashtable<String,Integer> errorList,String source,String dest){   if (debug > 1)   log(\"Copy: \" + source + \" To: \"+ dest);   WebResource sourceResource=resources.getResource(source);   if (sourceResource.isDirectory()) {     if (!resources.mkdir(dest)) {       WebResource destResource=resources.getResource(dest);       if (!destResource.isDirectory()) {         errorList.put(dest,Integer.valueOf(WebdavStatus.SC_CONFLICT));         return false;       }     }     String[] entries=resources.list(source);     for (    String entry : entries) {       String childDest=dest;       if (!childDest.equals(\"/\")) {         childDest+=\"/\";       }       childDest+=entry;       String childSrc=source;       if (!childSrc.equals(\"/\")) {         childSrc+=\"/\";       }       childSrc+=entry;       copyResource(errorList,childSrc,childDest);     }   }  else   if (sourceResource.isFile()) {     WebResource destResource=resources.getResource(dest);     if (!destResource.exists() && !destResource.getWebappPath().endsWith(\"/\")) {       int lastSlash=destResource.getWebappPath().lastIndexOf('/');       if (lastSlash > 0) {         String parent=destResource.getWebappPath().substring(0,lastSlash);         WebResource parentResource=resources.getResource(parent);         if (!parentResource.isDirectory()) {           errorList.put(source,Integer.valueOf(WebdavStatus.SC_CONFLICT));           return false;         }       }     }     try (InputStream is=sourceResource.getInputStream()){       if (!resources.write(dest,is,false)) {         errorList.put(source,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));         return false;       }     }  catch (    IOException e) {       log(sm.getString(\"webdavservlet.inputstreamclosefail\",source),e);     }   }  else {     errorList.put(source,Integer.valueOf(WebdavStatus.SC_INTERNAL_SERVER_ERROR));     return false;   }   return true; } "
"public PdfSignature(){   super(new PdfDictionary());   put(PdfName.Type,PdfName.Sig); } "
"public int countUndos(UndoOwner[] owners){   if (owners == null) {     return mUndos.size();   }   int count=0;   int i=0;   while ((i=findNextState(mUndos,owners,i)) >= 0) {     count++;     i++;   }   return count; } "
"public SignatureVisitor visitClassBound(){   return this; } "
"private final void dispatachChars(Node node) throws org.xml.sax.SAXException {   if (fSerializer != null) {     this.fSerializer.characters(node);   }  else {     String data=((Text)node).getData();     this.fSerializer.characters(data.toCharArray(),0,data.length());   } } "
"public void play(URL url){   AudioClip clip=getAudioClip(url);   if (clip != null) {     clip.play();   } } "
"protected void fireAncestorAdded(JComponent source,int id,Container ancestor,Container ancestorParent){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == AncestorListener.class) {       AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);       ((AncestorListener)listeners[i + 1]).ancestorAdded(ancestorEvent);     }   } } "
"public PdfLayerMembership(PdfDictionary membershipDictionary){   super(membershipDictionary);   ensureObjectIsAddedToDocument(membershipDictionary);   if (!PdfName.OCMD.equals(membershipDictionary.getAsName(PdfName.Type)))   throw new IllegalArgumentException(\"Invalid membershipDictionary.\"); } "
"@SuppressWarnings(\"unchecked\") @Override public PdfName copyTo(PdfDocument document){   return (PdfName)super.copyTo(document,true); } "
"@Override public CancelResult cancelOperation(int messageID,CancelRequest cancelRequest){   Operation op=operationsInProgress.get(messageID);   if (op != null) {     return op.cancel(cancelRequest);   }   for (  PersistentSearch ps : getPersistentSearches()) {     if (ps.getMessageID() == messageID) {       return ps.cancel();     }   }   return new CancelResult(ResultCode.NO_SUCH_OPERATION,null); } "
"public static String removeLeft(final String value,final String prefix,final boolean caseSensitive){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   validate(prefix,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   if (caseSensitive) {     return value.startsWith(prefix) ? value.substring(prefix.length()) : value;   }   return value.toLowerCase().startsWith(prefix.toLowerCase()) ? value.substring(prefix.length()) : value; } "
"public DragSourceEvent(DragSourceContext dsc){   super(dsc);   locationSpecified=false;   this.x=0;   this.y=0; } "
"public com.sun.identity.liberty.ws.idpp.jaxb.AltLOElement createAltLOElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltLOElementImpl(); } "
"public String toLDAPDate(Calendar calendar){   return GeneralizedTime.valueOf(calendar).toString(); } "
"public OpenSSOUserSubject(){   super(); } "
"public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {   checkNotNull(e);   long nanos=unit.toNanos(timeout);   final ReentrantLock lock=this.lock;   lock.lockInterruptibly();   try {     while (count == items.length) {       if (nanos <= 0)       return false;       nanos=notFull.awaitNanos(nanos);     }     enqueue(e);     return true;   }   finally {     lock.unlock();   } } "
"public void run(){   while (this.isRunning) {     Socket newsock=null;     try { synchronized (this) {         while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {           try {             this.wait();             if (!this.isRunning)             return;           }  catch (          InterruptedException ex) {             break;           }         }         this.nConnections++;       }       if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {         logger.logDebug(\" waiting to accept new connection!\");       }       newsock=sock.accept();       if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {         logger.logDebug(\"Accepting new connection!\");       }     }  catch (    SocketException ex) {       if (this.isRunning) {         logger.logError(\"Fatal - SocketException occured while Accepting connection\",ex);         this.isRunning=false;         break;       }     } catch (    SSLException ex) {       this.isRunning=false;       logger.logError(\"Fatal - SSSLException occured while Accepting connection\",ex);       break;     } catch (    IOException ex) {       logger.logError(\"Problem Accepting Connection\",ex);       continue;     } catch (    Exception ex) {       logger.logError(\"Unexpected Exception!\",ex);       continue;     }     if (isRunning) {       try {         TLSMessageChannel newChannel=new TLSMessageChannel(newsock,sipStack,this,\"TLSMessageChannelThread-\" + nConnections);         if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))         logger.logDebug(Thread.currentThread() + \" adding incoming channel \" + newChannel.getKey());         if (newChannel.isHandshakeCompleted()) {           incomingMessageChannels.put(newChannel.getKey(),newChannel);         }       }  catch (      Exception ex) {         logger.logError(\"A problem occured while Accepting connection\",ex);       }     }   } } "
"public final void testRSAMultiPrimePrivateCrtKeySpec04(){   try {     new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);     fail(\"Expected NPE not thrown\");   }  catch (  NullPointerException e) {   } } "
"private void doPostModify(PluginOperation modifyOperation,Entry oldEntry,Entry newEntry,List<Modification> modifications){   if (hasGroupMembershipUpdateControl(modifyOperation)) {     return;   }   lock.readLock().lock();   try {     if (!groupInstances.containsKey(oldEntry.getName())) {       return;     }   }   finally {     lock.readLock().unlock();   }   lock.writeLock().lock();   try {     Group<?> group=groupInstances.get(oldEntry.getName());     if (group != null) {       if (!oldEntry.getName().equals(newEntry.getName()) || !group.mayAlterMemberList() || updatesObjectClass(modifications)) {         groupInstances.remove(oldEntry.getName());         createAndRegisterGroup(newEntry);       }  else {         group.updateMembers(modifications);       }     }   }  catch (  UnsupportedOperationException|DirectoryException e) {     logger.traceException(e);   }  finally {     lock.writeLock().unlock();   } } "
"public GenericPrincipal(String name,String password,List<String> roles){   this(name,password,roles,null); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdataindexsizeerrinsertdataoffsetgreater.class,args); } "
"public FlacStreamReader(RandomAccessFile raf){   this.raf=raf; } "
"public RepoSearchResults(Set results,int errorCode,Map map,IdType type){   searchResults=results;   this.errorCode=errorCode;   resultsMap=map;   searchType=type; } "
"private void prepareDirectory(String path){   File dir=new File(path);   if (!dir.exists()) {     if (!dir.mkdirs()) {       Log.e(TAG,\"ERROR: Creation of directory \" + path + \" failed, check does Android Manifest have permission to write to external storage.\");     }   }  else {     Log.i(TAG,\"Created directory \" + path);   } } "
"public void testConstrStringWithExponentWithoutPoint5(){   String a=\"238768787678287E214\";   int aScale=-214;   BigInteger bA=new BigInteger(\"238768787678287\");   BigDecimal aNumber=new BigDecimal(a);   assertEquals(\"incorrect value\",bA,aNumber.unscaledValue());   assertEquals(\"incorrect scale\",aScale,aNumber.scale()); } "
"public DefaultTextField(Border border){   setBorder(border); } "
"public SoftReferenceEntryCache(){   super();   dnMap=new ConcurrentHashMap<>();   idMap=new ConcurrentHashMap<>();   setExcludeFilters(new HashSet<SearchFilter>());   setIncludeFilters(new HashSet<SearchFilter>());   referenceQueue=new ReferenceQueue<>(); } "
"public FrameBodyXSOA(){ } "
"public SecurityTokenManagerClient(String url,Object credential) throws SecurityTokenException {   try {     ssoToken=SessionManager.getProvider().getSessionID(credential);     String[] urls={url};     stub=new SOAPClient(urls);     stub.send(\"initialization\",ssoToken,null,ssoToken);     useLocal=false;   }  catch (  Exception e) {     if (SecurityTokenManager.debug.warningEnabled()) {       SecurityTokenManager.debug.warning(\"STMC() Exception\",e);     }     throw (new SecurityTokenException(e.getMessage()));   } } "
"public static void sendResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String cachedResID) throws SAML2Exception {   String classMethod=\"IDPSSOUtil.sendResponse: \";   ArrayList cacheList=(ArrayList)IDPCache.responseCache.remove(cachedResID);   if ((cacheList != null) && (cacheList.size() == 9)) {     String acsBinding=(String)cacheList.get(0);     String spEntityID=(String)cacheList.get(1);     String idpEntityID=(String)cacheList.get(2);     String idpMetaAlias=(String)cacheList.get(3);     String realm=(String)cacheList.get(4);     String relayState=(String)cacheList.get(5);     String acsURL=(String)cacheList.get(6);     Response res=(Response)cacheList.get(7);     Object session=cacheList.get(8);     sendResponse(request,response,out,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,session);   }  else {     SAML2Utils.debug.error(classMethod + \"unable to get response information from cache.\");     throw new SAML2Exception(SAML2Utils.bundle.getString(\"UnableToGetResponseInfoFromCache\"));   } } "
"public void testNegPosFirstLonger(){   byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};   byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   int aSign=-1;   int bSign=1;   byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.and(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public double[] board_to_dsn(PlaVectorInt p_vector){   double[] result=new double[2];   PlaPointFloat v=p_vector.to_float();   result[0]=board_to_dsn(v.v_x);   result[1]=board_to_dsn(v.v_y);   return result; } "
"protected byte[] engineDigest(){   byte[] hash=new byte[DIGEST_LENGTH];   processDigest(hash,0);   return hash; } "
"public static boolean isXMLName(String name){   if (name.length() > 0 && !isNameStartChar(name.charAt(0))) {     return false;   }   for (int i=1; i < name.length(); i++) {     if (!isNameChar(name.charAt(i))) {       return false;     }   }   return true; } "
"public static TextHitInfo afterOffset(int offset){   return new TextHitInfo(offset,true); } "
"private TemplateEntry buildBranchEntry(boolean generateBranches){   final TemplateEntry entry=new TemplateEntry(this);   final List<TemplateLine> lines=new ArrayList<>(rdnLines);   lines.addAll(extraLines);   for (  final TemplateLine line : lines) {     line.generateLine(entry);   }   for (int i=0; i < subordinateTemplates.size(); i++) {     subordinateTemplates.get(i).reset(entry.getDN(),numEntriesPerTemplate.get(i));   }   if (!generateBranches) {     return null;   }   return entry; } "
"private boolean matchesField(Format.Field attribute,int field){   if (this.attribute != null) {     return this.attribute.equals(attribute);   }   return (field == this.field); } "
"public Elevation(){   super(); } "
"public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {   if (jpeg == null || exifOutFileName == null) {     throw new IllegalArgumentException(NULL_ARGUMENT_STRING);   }   OutputStream s=null;   try {     s=getExifWriterStream(exifOutFileName);     s.write(jpeg,0,jpeg.length);     s.flush();   }  catch (  IOException e) {     closeSilently(s);     throw e;   }   s.close(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodesetprefix08.class,args); } "
"public SessionInfo makeSessionInfo(InternalSession internalSession,SessionID sid) throws SessionException {   SessionInfo info=internalSession.toSessionInfo();   TokenRestriction restriction=internalSession.getRestrictionForToken(sid);   if (restriction != null) {     try {       info.getProperties().put(TOKEN_RESTRICTION_PROP,TokenRestrictionFactory.marshal(restriction));     }  catch (    Exception e) {       throw new SessionException(e);     }   }  else   if (!sid.equals(internalSession.getID())) {     throw new IllegalArgumentException(\"Session id mismatch\");   }   info.setSessionID(sid.toString());   return info; } "
"public boolean equals(Object object){   return (super.equals(object) && object instanceof PrinterMoreInfo); } "
"public static TestSuite suite() throws Exception {   Class testClass=ClassLoader.getSystemClassLoader().loadClass(\"org.w3c.domts.level3.core.alltests\");   Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});   DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());   Object test=testConstructor.newInstance(new Object[]{factory});   return new JUnitTestSuiteAdapter((DOMTestSuite)test); } "
"private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {   RetryPolicy retryPolicy=request.getRetryPolicy();   int oldTimeout=request.getTimeoutMs();   try {     retryPolicy.retry(exception);   }  catch (  VolleyError e) {     request.addMarker(String.format(\"%s-timeout-giveup [timeout=%s]\",logPrefix,oldTimeout));     throw e;   }   request.addMarker(String.format(\"%s-retry [timeout=%s]\",logPrefix,oldTimeout)); } "
"public UniqueCharactersPasswordValidator(){   super(); } "
"public void testAlgorithmParameterGenerator03() throws NoSuchAlgorithmException, NoSuchProviderException {   if (!DSASupported) {     fail(validAlgName + \" algorithm is not supported\");     return;   }   String provider=null;   for (int i=0; i < algs.length; i++) {     try {       AlgorithmParameterGenerator.getInstance(algs[i],provider);       fail(\"IllegalArgumentException must be thrown when provider is null\");     }  catch (    IllegalArgumentException e) {     }     try {       AlgorithmParameterGenerator.getInstance(algs[i],\"\");       fail(\"IllegalArgumentException must be thrown when provider is empty\");     }  catch (    IllegalArgumentException e) {     }   } } "
"public void _read(InputStream input){   value=input.read_double(); } "
"public Bitmap put(String key,Bitmap value){   return cache.put(key,value); } "
"public Name child(final String name){   return new Name(this,name); } "
"public void testFloatValueNegativeInfinity2(){   byte[] a={0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};   int aSign=-1;   float aNumber=new BigInteger(aSign,a).floatValue();   assertTrue(aNumber == Float.NEGATIVE_INFINITY); } "
"public static StreetViewFragment newInstance(@NonNull Detail detail,@NonNull Point revealCenter,int revealWidth){   StreetViewFragment fragment=new StreetViewFragment();   Bundle args=new Bundle();   args.putParcelable(IntentKeys.DETAIL,detail);   args.putParcelable(REVEAL_CENTER,revealCenter);   args.putInt(REVEAL_WIDTH,revealWidth);   fragment.setArguments(args);   return fragment; } "
"public static Map<String,MappedClass> fillInTheGaps(Map<String,MappedClass> mappedClasses,MappingMode mode){   for (  String originalName : mappedClasses.keySet()) {     mappedClasses=fillGap(mappedClasses.get(originalName),mappedClasses,mode);   }   return mappedClasses; } "
"public Map<String,List<FileItem>> parseParameterMap(HttpServletRequest request) throws FileUploadException {   return parseParameterMap(new ServletRequestContext(request)); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String serverName=getStringOptionValue(IArgument.SERVER_NAME);   String datafile=getStringOptionValue(IArgument.DATA_FILE);   List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);   if ((datafile == null) && (attrValues == null)) {     throw new CLIException(getResourceString(\"missing-attributevalues\"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());   }   Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);   String serverconfigxml=CLIUtil.getFileContent(getCommandManager(),getStringOptionValue(SERVER_CONFIG_XML_FILE));   String[] params={serverName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_CREATE_SERVER\",params);     if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {       ServerConfiguration.createServerInstance(adminSSOToken,serverName,attributeValues,serverconfigxml);       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"create-server-config-succeeded\"),(Object[])params));     }  else {       outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"create-server-config-already-exists\"),(Object[])params));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_CREATE_SERVER\",params);   }  catch (  UnknownPropertyNameException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_CREATE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  ConfigurationException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_CREATE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  IOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_CREATE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_CREATE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_CREATE_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"protected OptionList createOptionList(Set values){   OptionList optList=new OptionList();   if ((values != null) && !values.isEmpty()) {     Set amIdentity=(values.iterator().next() instanceof String) ? getAMIdentity((IdentitySubjectModel)getModel(),values) : values;     Map entries=new HashMap(values.size() * 2);     for (Iterator iter=amIdentity.iterator(); iter.hasNext(); ) {       AMIdentity identity=(AMIdentity)iter.next();       entries.put(IdUtils.getUniversalId(identity),PolicyUtils.getDNDisplayString(identity.getName()));     }     optList=createOptionList(entries);   }   return optList; } "
"public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){   return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8)); } "
"public TransformerFactoryConfigurationError(){   this.exception=null; } "
"public void addSubject(String subjectName,Subject subject,boolean exclusive) throws NameAlreadyExistsException {   if (subjectName == null) {     subjectName=\"Subject:\" + ServiceTypeManager.generateRandomName();   }   if (users.containsKey(subjectName)) {     String[] objs={subjectName};     throw (new NameAlreadyExistsException(ResBundleUtils.rbName,\"name_already_present\",objs,subjectName,PolicyException.USER_COLLECTION));   }   users.put(subjectName,new QualifiedSubject(subject,exclusive)); } "
"private void indentSmart() throws IOException {   if (!indented) {     indent();     indented=true;   } } "
"public static final String createMessage(String msgKey,Object args[]){   return createMsg(XSLTBundle,msgKey,args); } "
"@Override public boolean onOptionsItemSelected(MenuItem item){   if (item.getItemId() == android.R.id.home) {     super.onBackPressed();     return true;   }   return super.onOptionsItemSelected(item); } "
"@Override public NamingEnumeration<NameClassPair> list(String name) throws NamingException {   if (log.isDebugEnabled()) {     log.debug(sm.getString(\"selectorContext.methodUsingString\",\"list\",name));   }   return getBoundContext().list(parseName(name)); } "
"public AccessibleRelationSet(AccessibleRelation[] relations){   if (relations.length != 0) {     this.relations=new Vector(relations.length);     for (int i=0; i < relations.length; i++) {       add(relations[i]);     }   } } "
"public void parse(final SetCookie cookie,final String value) throws MalformedCookieException {   if (cookie == null) {     throw new IllegalArgumentException(\"Cookie may not be null\");   }   if (value == null) {     throw new MalformedCookieException(\"Missing value for version attribute\");   }   int version=-1;   try {     version=Integer.parseInt(value);   }  catch (  NumberFormatException e) {     version=-1;   }   if (version < 0) {     throw new MalformedCookieException(\"Invalid cookie version.\");   }   cookie.setVersion(version); } "
"public void validate(){ } "
"public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){   if (cv != null) {     cv.visit(version,access,name,signature,superName,interfaces);   } } "
"private static LSException createLSException(short code,Throwable cause){   LSException lse=new LSException(code,cause != null ? cause.getMessage() : null);   if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {     try {       ThrowableMethods.fgThrowableInitCauseMethod.invoke(lse,new Object[]{cause});     }  catch (    Exception e) {     }   }   return lse; } "
"public void generate_snapshot(){   undo_list.generate_snapshot(); } "
"public void destroy(){ } "
"@Inject public NotificationsWebSocket(NotificationBroker broker){   Reject.ifNull(broker,\"Broker must not be null\");   this.broker=broker; } "
"public boolean is_inside(PlaPointInt begin,PlaPointInt end,double margin){   if (is_nan || begin.is_nan || end.is_nan)   return false;   double d_begin_this=begin.distance_square(this);   double d_end_this=end.distance_square(this);   double d_begin_end=begin.distance_square(end);   if (d_begin_end >= d_begin_this + margin) {     if (d_begin_end >= d_end_this + margin) {       return true;     }  else {       return false;     }   }  else {     if (d_begin_end >= d_end_this + margin) {       return false;     }  else {       return false;     }   } } "
"public JDesktopIcon(JInternalFrame f){   setVisible(false);   setInternalFrame(f);   updateUI(); } "
"public int hashCode(){   int hash=0;   if (subject != null) {     hash=hash + this.subject.hashCode();   }   if (codesource != null) {     hash=hash + this.codesource.hashCode();   }   if (protectionDomain != null) {     hash=hash + this.protectionDomain.hashCode();   }   if (serviceName != null) {     hash=hash + this.serviceName.hashCode();   }   if (resourceName != null) {     hash=hash + this.resourceName.hashCode();   }   if (actions != null) {     Set actionSet=actionsInSet(actions);     hash=hash + actionSet.hashCode();   }   if (envParams != null) {     hash=hash + this.envParams.hashCode();   }   if (debug.messageEnabled()) {     debug.message(\"ISPermission::hashCode::\" + hash);   }   return hash; } "
"private ResultCode runUpdateStateEntry(DN serverStateEntryDN){   LDAPAttribute attr=new LDAPAttribute(REPLICATION_STATE,state.toASN1ArrayList());   RawModification mod=new LDAPModification(ModificationType.REPLACE,attr);   ModifyOperationBasis op=new ModifyOperationBasis(getRootConnection(),nextOperationID(),nextMessageID(),null,ByteString.valueOfUtf8(serverStateEntryDN.toString()),Collections.singletonList(mod));   op.setInternalOperation(true);   op.setSynchronizationOperation(true);   op.setDontSynchronize(true);   op.run();   final ResultCode resultCode=op.getResultCode();   if (resultCode != ResultCode.SUCCESS && !(resultCode == ResultCode.NO_SUCH_OBJECT && serverStateEntryDN.equals(baseDN))) {     logger.error(DEBUG_ERROR_UPDATING_RUV,resultCode.getName(),op,op.getErrorMessage(),serverStateEntryDN);   }   return resultCode; } "
"void repaintNewCaret(){   if (component != null) {     TextUI mapper=component.getUI();     Document doc=component.getDocument();     if ((mapper != null) && (doc != null)) {       Rectangle newLoc;       try {         newLoc=mapper.modelToView(component,this.dot,this.dotBias);       }  catch (      BadLocationException e) {         newLoc=null;       }       if (newLoc != null) {         adjustVisibility(newLoc);         if (getMagicCaretPosition() == null) {           setMagicCaretPosition(new Point(newLoc.x,newLoc.y));         }       }       damage(newLoc);     }   } } "
"public void printStackTrace(){   super.printStackTrace();   if (cause != null) {     cause.printStackTrace();   } } "
"public int lowestLayer(){   int count=getComponentCount();   if (count > 0)   return getLayer(getComponent(count - 1));   return 0; } "
"public CertificatePolicies(){ } "
"public void initialize(KeyProvider keyprovider) throws EncryptionException {   if (keyprovider == null) {     EncryptionUtils.debug.error(\"AMSignatureProvider.initialize: \" + \"keyprovider is null\");     throw new EncryptionException(EncryptionUtils.bundle.getString(\"nullValues\"));   }   this.keyProvider=keyprovider; } "
"public static String toCamelCase(final String value){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   String str=toStudlyCase(value);   return str.substring(0,1).toLowerCase() + str.substring(1); } "
"public FrameBodyTEXT(byte textEncoding,String text){   super(textEncoding,text); } "
"public ConfiguredReplication configureReplication(ConnectionWrapper conn,Map<DN,Set<HostPort>> replicationServers,int replicationPort,boolean useSecureReplication,Set<Integer> usedReplicationServerIds,Set<Integer> usedReplicaServerIds) throws ApplicationException {   boolean synchProviderCreated;   boolean synchProviderEnabled;   boolean replicationServerCreated;   boolean secureReplicationEnabled;   try {     RootCfgClient root=conn.getRootConfiguration();     ReplicationSynchronizationProviderCfgClient sync=null;     try {       sync=(ReplicationSynchronizationProviderCfgClient)root.getSynchronizationProvider(\"Multimaster Synchronization\");     }  catch (    ManagedObjectNotFoundException monfe) {     }     if (sync == null) {       ReplicationSynchronizationProviderCfgDefn provider=ReplicationSynchronizationProviderCfgDefn.getInstance();       sync=root.createSynchronizationProvider(provider,\"Multimaster Synchronization\",new ArrayList<PropertyException>());       sync.setJavaClass(org.opends.server.replication.plugin.MultimasterReplication.class.getName());       sync.setEnabled(Boolean.TRUE);       synchProviderCreated=true;       synchProviderEnabled=false;     }  else {       synchProviderCreated=false;       if (!sync.isEnabled()) {         sync.setEnabled(Boolean.TRUE);         synchProviderEnabled=true;       }  else {         synchProviderEnabled=false;       }     }     sync.commit();     ReplicationServerCfgClient replicationServer;     if (!sync.hasReplicationServer()) {       if (useSecureReplication) {         CryptoManagerCfgClient crypto=root.getCryptoManager();         if (!crypto.isSSLEncryption()) {           crypto.setSSLEncryption(true);           crypto.commit();           secureReplicationEnabled=true;         }  else {           secureReplicationEnabled=false;         }       }  else {         secureReplicationEnabled=false;       }       int id=getReplicationId(usedReplicationServerIds);       usedReplicationServerIds.add(id);       replicationServer=sync.createReplicationServer(ReplicationServerCfgDefn.getInstance(),new ArrayList<PropertyException>());       replicationServer.setReplicationServerId(id);       replicationServer.setReplicationPort(replicationPort);       replicationServerCreated=true;     }  else {       secureReplicationEnabled=false;       replicationServer=sync.getReplicationServer();       usedReplicationServerIds.add(replicationServer.getReplicationServerId());       replicationServerCreated=false;     }     Set<String> servers=replicationServer.getReplicationServer();     if (servers == null) {       servers=new HashSet<>();     }     Set<String> oldServers=new HashSet<>(servers);     for (    Set<HostPort> rs : replicationServers.values()) {       servers.addAll(toLowerCaseStrings(rs));     }     replicationServer.setReplicationServer(servers);     replicationServer.commit();     Set<String> newReplicationServers=intersect(servers,oldServers);     String[] domainNames=sync.listReplicationDomains();     if (domainNames == null) {       domainNames=new String[]{};     }     Set<ConfiguredDomain> domainsConf=new HashSet<>();     ReplicationDomainCfgClient[] domains=new ReplicationDomainCfgClient[domainNames.length];     for (int i=0; i < domains.length; i++) {       domains[i]=sync.getReplicationDomain(domainNames[i]);     }     for (    DN dn : replicationServers.keySet()) {       ReplicationDomainCfgClient domain=null;       boolean isCreated;       String domainName=null;       for (int i=0; i < domains.length && domain == null; i++) {         if (dn.equals(domains[i].getBaseDN())) {           domain=domains[i];           domainName=domainNames[i];         }       }       if (domain == null) {         int replicaServerId=getReplicationId(usedReplicaServerIds);         usedReplicaServerIds.add(replicaServerId);         domainName=getDomainName(domainNames,dn);         domain=sync.createReplicationDomain(ReplicationDomainCfgDefn.getInstance(),domainName,new ArrayList<PropertyException>());         domain.setServerId(replicaServerId);         domain.setBaseDN(dn);         isCreated=true;       }  else {         isCreated=false;       }       oldServers=domain.getReplicationServer();       if (oldServers == null) {         oldServers=new TreeSet<>();       }       servers=toLowerCaseStrings(replicationServers.get(dn));       domain.setReplicationServer(servers);       usedReplicaServerIds.add(domain.getServerId());       domain.commit();       Set<String> addedServers=intersect(servers,oldServers);       domainsConf.add(new ConfiguredDomain(domainName,isCreated,addedServers));     }     return new ConfiguredReplication(synchProviderCreated,synchProviderEnabled,replicationServerCreated,secureReplicationEnabled,newReplicationServers,domainsConf);   }  catch (  Throwable t) {     throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,INFO_ERROR_CONFIGURING_REMOTE_GENERIC.get(conn.getHostPort(),t),t);   } } "
"protected Expression notequals(int opPos) throws TransformerException {   return compileOperation(new NotEquals(),opPos); } "
"private void updateConfigEntryWithAttribute(String entryDn,String attributeName,Syntax syntax,Object... values) throws DirectoryException, ConfigException {   org.forgerock.opendj.ldap.Entry configEntry=configHandler.getEntry(DN.valueOf(entryDn));   final org.forgerock.opendj.ldap.Entry newEntry=putAttribute(configEntry,attributeName,syntax,values);   configHandler.replaceEntry(configEntry,newEntry); } "
"public void treeCollapsed(TreeExpansionEvent e){   fireVisibleDataPropertyChange();   TreePath path=e.getPath();   if (path != null) {     AccessibleJTreeNode node=new AccessibleJTreeNode(JTree.this,path,null);     PropertyChangeEvent pce=new PropertyChangeEvent(node,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.EXPANDED,AccessibleState.COLLAPSED);     firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);   } } "
"void notExcessiveNesting(){ synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) { synchronized (this) {                                                                 }                                                               }                                                             }                                                           }                                                         }                                                       }                                                     }                                                   }                                                 }                                               }                                             }                                           }                                         }                                       }                                     }                                   }                                 }                               }                             }                           }                         }                       }                     }                   }                 }               }             }           }         }       }     }   } } "
"public ConcurrentSkipListMap(Comparator<? super K> comparator){   this.comparator=comparator;   initialize(); } "
"public com.sun.identity.saml2.jaxb.entityconfig.AuthnAuthorityConfigElement createAuthnAuthorityConfigElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.entityconfig.impl.AuthnAuthorityConfigElementImpl(); } "
"public void initObjectGraph(Object module){   mObjectGraph=module != null ? ObjectGraph.create(module) : null; } "
"public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){   if (iv == null) {     throw new IllegalArgumentException(\"iv == null\");   }   if (iv.length < 8) {     throw new IllegalArgumentException(\"iv.length < 8\");   }   this.effectiveKeyBits=effectiveKeyBits;   this.iv=new byte[8];   System.arraycopy(iv,0,this.iv,0,8); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_namednodemapsetnameditemreturnvalue.class,args); } "
"public void logEvent(String eventName,Bundle parameters){   logEvent(eventName,null,parameters,false); } "
"public void start() throws IOException {   this.isRunning=true;   Thread thread=new Thread(this);   thread.setDaemon(true);   thread.setName(\"MessageProcessorThread-UDP-\" + getIpAddress().getHostAddress() + '/'+ getPort());   thread.setPriority(sipStack.getThreadPriority());   thread.start(); } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.SingleSignOutSubscriptionEndpointElement createSingleSignOutSubscriptionEndpointElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SingleSignOutSubscriptionEndpointElementImpl(); } "
"public static double distance(Point point1,Point point2,String units) throws TurfException {   double degrees2radians=Math.PI / 180;   Position coordinates1=point1.getCoordinates();   Position coordinates2=point2.getCoordinates();   double dLat=degrees2radians * (coordinates2.getLatitude() - coordinates1.getLatitude());   double dLon=degrees2radians * (coordinates2.getLongitude() - coordinates1.getLongitude());   double lat1=degrees2radians * coordinates1.getLatitude();   double lat2=degrees2radians * coordinates2.getLatitude();   double a=Math.pow(Math.sin(dLat / 2),2) + Math.pow(Math.sin(dLon / 2),2) * Math.cos(lat1) * Math.cos(lat2);   return TurfHelpers.radiansToDistance(2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a)),units); } "
"public String toString(){   ensureCache();   return textLine.toString(); } "
"public final void automaticallyReleaseConnectionToPool(){   automaticallyReleaseConnectionToPool=true;   if (connection != null && connectionReleased) {     client.getConnectionPool().recycle(connection);     connection=null;   } } "
"private int epochMonthToEpochDay(int epochMonth){   return hijrahEpochMonthStartDays[epochMonth]; } "
"public void addChangeListener(ChangeListener l){   listenerList.add(ChangeListener.class,l); } "
"public Class<?> loadTagFile() throws JasperException {   try {     if (ctxt.isRemoved()) {       throw new FileNotFoundException(jspUri);     }     if (options.getDevelopment() || firstTime) { synchronized (this) {         firstTime=false;         ctxt.compile();       }     }  else {       if (compileException != null) {         throw compileException;       }     }     if (reload) {       tagHandlerClass=ctxt.load();       reload=false;     }   }  catch (  FileNotFoundException ex) {     throw new JasperException(ex);   }   return tagHandlerClass; } "
"private void createLayout(){   setBackground(ColorAndFontConstants.greyBackground);   GridBagConstraints gbc=new GridBagConstraints();   gbc.anchor=GridBagConstraints.WEST;   gbc.gridx=0;   gbc.gridy=0;   gbc.gridwidth=1;   gbc.weightx=1.0;   gbc.fill=GridBagConstraints.BOTH;   addErrorPane(gbc);   gbc.insets=new Insets(10,0,0,0);   gbc.gridx=0;   gbc.gridy++;   gbc.weightx=1.0;   gbc.weighty=1.0;   gbc.fill=GridBagConstraints.BOTH;   gbc.gridwidth=7;   add(createSplitPane(),gbc); } "
"protected Attribute(final String type){   this.type=type; } "
"private void registerAuth(ConnectionWrapper conn){   LDAPURL url=makeLDAPUrl(conn);   try {     registerAuth(url,conn.getBindDn(),conn.getBindPassword(),false);   }  catch (  LdapException x) {     throw new RuntimeException(\"Bug\");   } } "
"public static void error(Level level,String msgid,String data[],Object session){   if (logger != null) {     try {       logger.error(level,msgid,data,session);     }  catch (    LogException le) {       COTUtils.debug.error(\"LogUtil.error: Couldn't write log:\",le);     }   } } "
"public SIPRequest createRequest(SipUri requestURI,Via via,CSeq cseq,From from,To to){   SIPRequest newRequest=new SIPRequest();   String method=cseq.getMethod();   newRequest.setMethod(method);   newRequest.setRequestURI(requestURI);   this.setBranch(via,method);   newRequest.setHeader(via);   newRequest.setHeader(cseq);   newRequest.setHeader(from);   newRequest.setHeader(to);   newRequest.setHeader(getCallId());   try {     newRequest.attachHeader(new MaxForwards(70),false);   }  catch (  Exception d) {   }   if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {     newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());   }   return newRequest; } "
"public static boolean isUrl(String url){   Pattern pattern=Pattern.compile(\"^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\\\/])+$\");   return pattern.matcher(url).matches(); } "
"@Override public Class<?> resolve(String alias){   return ALIASES.get(alias); } "
"public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {   final String resultNS;   NamespaceAlias na=new NamespaceAlias(handler.nextUid());   setPropertiesFromAttributes(handler,rawName,attributes,na);   String prefix=na.getStylesheetPrefix();   if (prefix.equals(\"#default\")) {     prefix=\"\";     na.setStylesheetPrefix(prefix);   }   String stylesheetNS=handler.getNamespaceForPrefix(prefix);   na.setStylesheetNamespace(stylesheetNS);   prefix=na.getResultPrefix();   if (prefix.equals(\"#default\")) {     prefix=\"\";     na.setResultPrefix(prefix);     resultNS=handler.getNamespaceForPrefix(prefix);     if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX_FOR_DEFAULT,null,null);   }  else {     resultNS=handler.getNamespaceForPrefix(prefix);     if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX,new Object[]{prefix},null);   }   na.setResultNamespace(resultNS);   handler.getStylesheet().setNamespaceAlias(na);   handler.getStylesheet().appendChild(na); } "
"void shutdown(){   if (shutdown.compareAndSet(false,true)) {     log.close();     DirectoryServer.deregisterMonitorProvider(dbMonitor);   } } "
"public final void pushNamespaceContextNull(){   m_prefixResolvers.push(null); } "
"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {   ServiceConfig sc=getServerConfig(ssoToken,instanceName);   if (sc != null) {     Map map=sc.getAttributes();     map.remove(ATTR_PARENT_SITE_ID);     Set newSet=getPropertiesSet(upgradedValues);     map.put(ATTR_SERVER_CONFIG,newSet);     sc.setAttributes(map);   }  else {     throw new ConfigurationException(\"Unable to upgrade server \" + \"default properties: no properties found!\");   } } "
"public void doPostConfiguration(ServletContext servletCtx,SSOToken adminSSOToken){   setXSLFiles(servletCtx);   setAuthModules(adminSSOToken);   setSAMLSiteID(adminSSOToken); } "
"private URLConnection connectURL(String strURL){   URLConnection conn=null;   try {     URL inputURL=new URL(strURL);     conn=inputURL.openConnection();   }  catch (  MalformedURLException e) {     System.out.println(\"Please input a valid URL\");   } catch (  IOException ioe) {     System.out.println(\"Can not connect to the URL\");   }   return conn; } "
"public final void addElements(int value,int numberOfElements){   if ((m_firstFree + numberOfElements) >= m_mapSize) {     m_mapSize+=(m_blocksize + numberOfElements);     int newMap[]=new int[m_mapSize];     System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);     m_map=newMap;   }   for (int i=0; i < numberOfElements; i++) {     m_map[m_firstFree]=value;     m_firstFree++;   } } "
"@Override public boolean hasMembers(){   return membership.hasMembers(); } "
"@Override public void write(char cbuf[],int off,int len) throws IOException {   ensureOpen();   if (bufferSize == 0) {     initOut();     out.write(cbuf,off,len);     return;   }   if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {     throw new IndexOutOfBoundsException();   }  else   if (len == 0) {     return;   }   if (len >= bufferSize) {     if (autoFlush)     flushBuffer();  else     bufferOverflow();     initOut();     out.write(cbuf,off,len);     return;   }   int b=off, t=off + len;   while (b < t) {     int d=min(bufferSize - nextChar,t - b);     System.arraycopy(cbuf,b,cb,nextChar,d);     b+=d;     nextChar+=d;     if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer();  else     bufferOverflow();   } } "
"public MonitorConfigManager(ServerContext serverContext){   this.serverContext=serverContext;   monitors=new ConcurrentHashMap<>(); } "
"public SQLFeatureNotSupportedException(String reason,String SQLState,Throwable cause){   super(reason,SQLState,cause); } "
"public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){   removeIconsForPkg(packageName,user);   try {     PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);     long userSerial=mUserManager.getSerialNumberForUser(user);     for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) {       addIconToDBAndMemCache(app,info,userSerial);     }   }  catch (  NameNotFoundException e) {     Log.d(TAG,\"Package not found\",e);     return;   } } "
"public void deleteIDRepos(String realmName,Set names) throws AMConsoleException {   String[] params=new String[2];   params[0]=realmName;   String curName=\"\";   try {     ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,getUserSSOToken());     ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realmName,null);     for (Iterator iter=names.iterator(); iter.hasNext(); ) {       String name=(String)iter.next();       curName=name;       params[1]=name;       logEvent(\"ATTEMPT_DELETE_ID_REPO\",params);       cfg.removeSubConfig(name);       logEvent(\"SUCCEED_DELETE_ID_REPO\",params);     }   }  catch (  SMSException e) {     String strError=getErrorString(e);     String[] paramsEx={realmName,curName,strError};     logEvent(\"SMS_EXCEPTION_DELETE_ID_REPO\",paramsEx);     throw new AMConsoleException(strError);   } catch (  SSOException e) {     String strError=getErrorString(e);     String[] paramsEx={realmName,curName,strError};     logEvent(\"SSO_EXCEPTION_DELETE_ID_REPO\",paramsEx);     throw new AMConsoleException(strError);   } } "
"public MemoryUserDatabase(){   this(null); } "
"boolean doesOccur(QName refName){   return m_refs.contains(refName); } "
"public void comment(char[] ch,int start,int length) throws SAXException {   if (m_firstTagNotEmitted) {     flush();   }   m_handler.comment(ch,start,length); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodereplacechildnodeancestor.class,args); } "
"int peekChar(){   return peekChar(0); } "
"public String toString(){   return \"[My test Certificate, type: \" + getType() + \"]\"; } "
"public void appendCell(long value){   appendCell(String.valueOf(value)); } "
"public static void write(OutputStream out,NSObject root) throws IOException {   int minVersion=getMinimumRequiredVersion(root);   if (minVersion > VERSION_00) {     String versionString=((minVersion == VERSION_10) ? \"v1.0\" : ((minVersion == VERSION_15) ? \"v1.5\" : ((minVersion == VERSION_20) ? \"v2.0\" : \"v0.0\")));     throw new IOException(\"The given property list structure cannot be saved. \" + \"The required version of the binary format (\" + versionString + \") is not yet supported.\");   }   BinaryPropertyListWriter w=new BinaryPropertyListWriter(out,minVersion);   w.write(root); } "
"public boolean start_write(File p_file){   try {     file_writer=new FileWriter(p_file);   }  catch (  IOException e) {     System.out.println(\"unable to create logfile\");     return false;   }   write_enabled=true;   return true; } "
"public static boolean isNameStart(int c){   return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0; } "
"protected void updateLeadIndex(){   if (leadPath != null) {     if (selection == null) {       leadPath=null;       leadIndex=leadRow=-1;     }  else {       leadRow=leadIndex=-1;       for (int counter=selection.length - 1; counter >= 0; counter--) {         if (selection[counter] == leadPath) {           leadIndex=counter;           break;         }       }     }   }  else {     leadIndex=-1;   } } "
"public final void testGetPrimeExponentP(){   RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);   assertTrue(BigInteger.ONE.equals(ks.getPrimeExponentP())); } "
"public ServerException(final Throwable cause){   this(cause.getMessage()); } "
"protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){   ButtonModel model=menuItem.getModel();   FontMetrics fm=SwingUtilities2.getFontMetrics(menuItem,g);   int mnemIndex=menuItem.getDisplayedMnemonicIndex();   if (!model.isEnabled()) {     if (UIManager.get(\"MenuItem.disabledForeground\") instanceof Color) {       g.setColor(UIManager.getColor(\"MenuItem.disabledForeground\"));       SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());     }  else {       g.setColor(menuItem.getBackground().brighter());       SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());       g.setColor(menuItem.getBackground().darker());       SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);     }   }  else {     if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {       g.setColor(selectionForeground);     }     SwingUtilities2.drawStringUnderlineCharAt(menuItem,g,text,mnemIndex,textRect.x,textRect.y + fm.getAscent());   } } "
"public FrameBodyTDRC(FrameBodyTRDA body){   originalID=ID3v23Frames.FRAME_ID_V3_TRDA;   date=body.getText();   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);   setObjectValue(DataTypes.OBJ_TEXT,getFormattedText()); } "
"public static long parseLong(byte[] bytes,int startIndex,int endIndex){   long l=0;   for (int i=startIndex; i < endIndex; i++) {     l<<=8;     l|=bytes[i] & 0xFF;   }   return l; } "
"void doPreOperation(PreOperationAddOperation addOperation){   final CSN csn=generateCSN(addOperation);   final String entryUUID=getEntryUUID(addOperation);   final AddContext ctx=new AddContext(csn,entryUUID,findEntryUUID(DirectoryServer.getParentDNInSuffix(addOperation.getEntryDN())));   addOperation.setAttachment(SYNCHROCONTEXT,ctx); } "
"void assignService(String serviceName) throws SMSException {   try {     if (ServiceManager.isCoexistenceMode() && (parentOrgName.startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX))) {       return;     }     if (!getAssignedServices().contains(serviceName)) {       parentOrg.registerService(serviceName,false,false);     }   }  catch (  AMException ame) {     if (debug.messageEnabled()) {       debug.message(\"OrgConfigViaAMSDK::assignService\" + \": failed with AMException\",ame);     }     throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));   } catch (  SSOException ssoe) {     throw (new SMSException(bundle.getString(\"sms-INVALID_SSO_TOKEN\"),ssoe,\"sms-INVALID_SSO_TOKEN\"));   } } "
"public void printlnMessage(String str){   buff.append(str).append(\"\\n\"); } "
"public XMLStreamException(Throwable th){   super(th);   nested=th; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Element testAddress;   String attrValue;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"address\");   testAddress=(Element)elementList.item(2);   attrValue=testAddress.getAttribute(\"street\");   assertEquals(\"attrValue\",\"No\",attrValue); } "
"public final PlaSide side_of(PlaPoint p_point){   PlaSide result=p_point.side_of(this);   return result.negate(); } "
"@Advice.OnMethodEnter public static long enter(){   final long startTime=System.currentTimeMillis();   return startTime; } "
"private ComparableTimSort(Object[] a,Object[] work,int workBase,int workLen){   this.a=a;   int len=a.length;   int tlen=(len < 2 * INITIAL_TMP_STORAGE_LENGTH) ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH;   if (work == null || workLen < tlen || workBase + tlen > work.length) {     tmp=new Object[tlen];     tmpBase=0;     tmpLen=tlen;   }  else {     tmp=work;     tmpBase=workBase;     tmpLen=workLen;   }   int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 24 : 49);   runBase=new int[stackLen];   runLen=new int[stackLen]; } "
"public boolean update(Long dataFilterID,String dataFilterName,String dataFilterDisplayName,Long filterOnDataTypeID,Long compareWithDataTypeID){   if (dataFilterID == null) {     throw new IllegalArgumentException(\"primary key null.\");   }   ContentValues args=new ContentValues();   if (dataFilterName != null) {     args.put(KEY_DATAFILTERNAME,dataFilterName);   }   if (dataFilterDisplayName != null) {     args.put(KEY_DATAFILTERDISPLAYNAME,dataFilterDisplayName);   }   if (filterOnDataTypeID != null) {     args.put(KEY_FILTERONDATATYPEID,filterOnDataTypeID);   }   if (compareWithDataTypeID != null) {     args.put(KEY_COMPAREWITHDATATYPEID,compareWithDataTypeID);   }   if (args.size() > 0) {     return database.update(DATABASE_TABLE,args,KEY_DATAFILTERID + \"=\" + dataFilterID,null) > 0;   }   return false; } "
"public static String collapseWhitespace(final String value){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   return value.trim().replaceAll(\"\\\\s\\\\s+\",\" \"); } "
"public void println(){   newLine(); } "
"public static void bindContext(Object obj,Context context,Object token){   if (ContextAccessController.checkSecurityToken(obj,token)) {     objectBindings.put(obj,context);   } } "
"public Set search3(String tokenID,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder,Set excludes) throws SMSException, SSOException, RemoteException {   initialize();   if (debug.messageEnabled()) {     debug.message(\"SMSJAXRPCObjectImpl::search dn: \" + startDN + \" filter: \"+ filter+ \" excludes: \"+ excludes);   }   Iterator i=SMSEntry.search(getToken(tokenID),startDN,filter,numOfEntries,timeLimit,sortResults,ascendingOrder,excludes);   Set<String> result=new HashSet<String>();   while (i.hasNext()) {     SMSDataEntry e=(SMSDataEntry)i.next();     try {       result.add(e.toJSONString());     }  catch (    JSONException ex) {       debug.error(\"SMSJAXRPCObjectImpl::problem performing search dn: \" + startDN + \" filter: \"+ filter+ \" excludes: \"+ excludes,ex);     }   }   return result; } "
"public static BooleanArgument startTLSArgument() throws ArgumentException {   return BooleanArgument.builder(OPTION_LONG_START_TLS).shortIdentifier(OPTION_SHORT_START_TLS).description(INFO_DESCRIPTION_START_TLS.get()).buildArgument(); } "
"public RAck(){   super(NAME); } "
"public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {   if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length); } "
"public StepPattern(int whatToShow,int axis,int axisForPredicate){   super(whatToShow);   m_axis=axis; } "
"public final void lazySet(int newValue){   unsafe.putOrderedInt(this,valueOffset,newValue); } "
"public TransformerFactoryConfigurationError(Exception e,String msg){   super(msg);   this.exception=e; } "
"private boolean nodeModelContains(DefaultMutableTreeNode node,String text){   @SuppressWarnings(\"unchecked\") Enumeration<DefaultMutableTreeNode> e=node.children();   while (e.hasMoreElements()) {     DefaultMutableTreeNode dmtn=e.nextElement();     if (dmtn.isLeaf() && dmtn.toString().toLowerCase().contains(text)) {       return true;     }   }   return false; } "
"public void invalidateLayout(Container target){ } "
"public static NewSuffixOptions createImportFromLDIF(List<String> baseDNs,List<String> ldifPaths,String rejectedFile,String skippedFile){   NewSuffixOptions ops=new NewSuffixOptions(baseDNs);   ops.type=Type.IMPORT_FROM_LDIF_FILE;   ops.ldifPaths.addAll(ldifPaths);   ops.rejectedFile=rejectedFile;   ops.skippedFile=skippedFile;   return ops; } "
"@Override public void close(){   promise.cancel(true); } "
"private void loadClass(String name,WebappClassLoader cl) throws Exception {   try (InputStream is=cl.getResourceAsStream(\"org/apache/tomcat/unittest/\" + name + \".class\")){     byte[] classBytes=new byte[2048];     int offset=0;     int read=is.read(classBytes,offset,classBytes.length - offset);     while (read > -1) {       offset+=read;       if (offset == classBytes.length) {         byte[] tmp=new byte[classBytes.length * 2];         System.arraycopy(classBytes,0,tmp,0,classBytes.length);         classBytes=tmp;       }       read=is.read(classBytes,offset,classBytes.length - offset);     }     Class<?> lpClass=cl.doDefineClass(\"org.apache.tomcat.unittest.\" + name,classBytes,0,offset,cl.getClass().getProtectionDomain());     Object obj=lpClass.newInstance();     obj.toString();   }  } "
"@Override public void addContainerListener(ContainerListener listener){   listeners.add(listener); } "
"public float popFloat(){   BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();   Float value=(Float)wrapper.getValue();   return value.floatValue(); } "
"public AuthorizationIdentityResponseControl(DN authorizationDN){   super(OID_AUTHZID_RESPONSE,false);   if (authorizationDN == null) {     this.authorizationID=\"dn:\";   }  else {     this.authorizationID=\"dn:\" + authorizationDN;   } } "
"public static <T>List<T> nCopies(int n,T o){   if (n < 0)   throw new IllegalArgumentException(\"List length = \" + n);   return new CopiesList<>(n,o); } "
"public boolean equals(Object obj){   if (obj == this)   return true;   if ((obj == null) || (obj.getClass() != getClass()))   return false;   BasicPermission bp=(BasicPermission)obj;   return getName().equals(bp.getName()); } "
"LEAuthLevelCondition(Debug debug,CoreWrapper authUtils){   super(debug,authUtils); } "
"public BucketItem(final String n,final String p,final String taken,int i){   super(n,p,taken,0);   id=i; } "
"public void parse(String filename,List<LocalizableMessage> warnings) throws IOException, InitializationException, MakeLDIFException {   templatePath=null;   File f=getFile(filename);   if (f == null || !f.exists()) {     LocalizableMessage message=ERR_MAKELDIF_COULD_NOT_FIND_TEMPLATE_FILE.get(filename);     throw new IOException(message.toString());   }   templatePath=f.getParentFile().getAbsolutePath();   List<String> fileLines=readLines(f);   String[] lines=fileLines.toArray(new String[fileLines.size()]);   parse(lines,warnings); } "
"public static boolean isBridge(int mod){   return (mod & ACC_BRIDGE) != 0; } "
"public final void testGetEncoded02() throws IOException {   boolean performed=false;   for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {     try {       EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);       byte[] refEnc=EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0],false);       byte[] actEnc=epki.getEncoded();       assertTrue(Arrays.equals(refEnc,actEnc));       performed=true;     }  catch (    NoSuchAlgorithmException allowedFailure) {     }   }   assertTrue(\"Test not performed\",performed); } "
"private boolean fractionalFilterOperation(PreOperationModifyDNOperation modifyDNOperation,boolean performFiltering){   if (performFiltering && modifyDNOperation.deleteOldRDN()) {     return true;   }   Entry concernedEntry=modifyDNOperation.getOriginalEntry();   Set<AttributeType> fractionalConcernedAttributes=createFractionalConcernedAttrList(fractionalConfig,concernedEntry.getObjectClasses().keySet());   boolean fractionalExclusive=fractionalConfig.isFractionalExclusive();   if (fractionalExclusive && fractionalConcernedAttributes.isEmpty()) {     return false;   }   boolean inconsistentOperation=false;   RDN rdn=modifyDNOperation.getEntryDN().rdn();   RDN newRdn=modifyDNOperation.getNewRDN();   for (  AVA ava : rdn) {     AttributeType attributeType=ava.getAttributeType();     boolean foundAttribute=fractionalConcernedAttributes.contains(attributeType);     if (canRemoveAttribute(fractionalExclusive,foundAttribute) && !newRdn.hasAttributeType(attributeType) && !modifyDNOperation.deleteOldRDN()) {       Modification modification=new Modification(ModificationType.DELETE,Attributes.empty(attributeType));       modifyDNOperation.addModification(modification);       inconsistentOperation=true;     }   }   return inconsistentOperation; } "
"private void writeErrorContents(ServerDescriptor desc){   for (  Exception ex : desc.getExceptions()) {     LocalizableMessage errorMsg=ex instanceof AdminException ? ((AdminException)ex).getMessageObject() : LocalizableMessage.raw(ex.getMessage());     if (errorMsg != null) {       println();       println(errorMsg);     }   } } "
"public void windowOpened(WindowEvent e){ } "
"public DERUTCTime(Date time){   SimpleDateFormat dateF=new SimpleDateFormat(\"yyMMddHHmmss'Z'\");   dateF.setTimeZone(new SimpleTimeZone(0,\"Z\"));   this.time=Strings.toByteArray(dateF.format(time)); } "
"public synchronized void startPreview(){   OpenCamera theCamera=camera;   if (theCamera != null && !previewing) {     theCamera.getCamera().startPreview();     previewing=true;     autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());   } } "
"public NightModeHelper(Activity activity,int theme){   int currentMode=(activity.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);   mPrefs=PreferenceManager.getDefaultSharedPreferences(activity);   init(activity,theme,mPrefs.getInt(PREF_KEY,currentMode)); } "
"public void loadConfig(String configUrl){   this.configUrl=configUrl;   downloadConfig(configUrl); } "
"public void replaceResponseProvider(String responseProviderName,ResponseProvider responseProvider) throws NameNotFoundException {   if (!providers.containsKey(responseProviderName)) {     String[] objs={responseProviderName};     throw (new NameNotFoundException(ResBundleUtils.rbName,\"name_not_present\",objs,responseProviderName,PolicyException.RESPONSE_PROVIDER_COLLECTION));   }   providers.put(responseProviderName,responseProvider); } "
"public Instant minusMillis(long millisToSubtract){   if (millisToSubtract == Long.MIN_VALUE) {     return plusMillis(Long.MAX_VALUE).plusMillis(1);   }   return plusMillis(-millisToSubtract); } "
"@Override public void closeJDBCConn(){   if (conn != null) {     try {       System.out.println(\"StreamingQuoteDAOModeFull.closeJDBCConn(): Closing JDBC connection for Streaming Quote...\");       conn.close();     }  catch (    SQLException e) {       System.out.println(\"StreamingQuoteDAOModeFull.closeJDBCConn(): SQLException on conn close\");       e.printStackTrace();     }   }  else {     System.out.println(\"StreamingQuoteDAOModeFull.closeJDBCConn(): WARNING: DB connection already null\");   } } "
"public int compare(Object o1,Object o2){   AttributeSchema attr1=(AttributeSchema)o1;   AttributeSchema attr2=(AttributeSchema)o2;   String key1=attr1.getI18NKey();   String key2=attr2.getI18NKey();   if (key1 != null && key2 != null) {     if (collator != null) {       return collator.compare(key1,key2);     }  else {       return key1.compareTo(key2);     }   }   return -1; } "
"@Override public FileVisitResult visitFileFailed(T file,IOException exc) throws IOException {   Objects.requireNonNull(file);   throw exc; } "
"public static void ungzip(String srcFile,String destDir) throws IOException {   String tempDestFileName=srcFile.substring(0,srcFile.lastIndexOf(\".\"));   tempDestFileName=tempDestFileName.substring(srcFile.lastIndexOf(FILE_SEPARATOR) + 1);   File bdbDir=new File(destDir);   if (!bdbDir.exists()) {     bdbDir.mkdir();     byte[] buffer=new byte[BUFFER_SIZE];     GZIPInputStream gzin=new GZIPInputStream(new FileInputStream(srcFile));     FileOutputStream fout=new FileOutputStream(new File(destDir,tempDestFileName));     int byteRead=0;     while ((byteRead=gzin.read(buffer)) != -1) {       fout.write(buffer,0,byteRead);     }     gzin.close();     fout.close();   } } "
"public FacebookGraphObjectException(){   super(); } "
"public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {   if ((providerId == null) || (providerId.length() == 0)) {     FSUtils.debug.error(\"FSNameRegistrationRequest.toXMLString: \" + \"providerId is null in the request with requestId:\" + requestID);     String[] args={requestID};     throw new FSMsgException(\"nullProviderIdWRequestId\",args);   }   if ((requestID == null) || (requestID.length() == 0)) {     requestID=SAMLUtils.generateID();     if (requestID == null) {       FSUtils.debug.error(\"FSNameRegistrationRequest.toXMLString: \" + \"couldn't generate RequestID.\");       throw new FSMsgException(\"errorGenerateID\",null);     }   }   StringBuffer xml=new StringBuffer(1000);   if (includeHeader) {     xml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"\").append(IFSConstants.DEFAULT_ENCODING).append(\"\\\" ?>\\n\");   }   String prefix=\"\";   String uri=\"\";   String uriSAML=\"\";   if (includeNS) {     prefix=IFSConstants.LIB_PREFIX;   }   if (declareNS) {     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {       uri=IFSConstants.LIB_12_NAMESPACE_STRING;     }  else {       uri=IFSConstants.LIB_NAMESPACE_STRING;     }     uriSAML=IFSConstants.assertionDeclareStr;   }   String instantString=DateUtils.toUTCDateFormat(issueInstant);   if (requestID != null) {     xml.append(\"<\").append(prefix).append(\"RegisterNameIdentifierRequest\").append(uri).append(uriSAML);     if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {       xml.append(\" id=\\\"\").append(id).append(\"\\\" \");     }     xml.append(\" RequestID=\\\"\").append(requestID).append(\"\\\" \").append(\" MajorVersion=\\\"\").append(majorVersion).append(\"\\\" \").append(\" MinorVersion=\\\"\").append(minorVersion).append(\"\\\" \").append(\" IssueInstant=\\\"\").append(instantString).append(\"\\\"\").append(\">\");     if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {       Iterator i=respondWiths.iterator();       while (i.hasNext()) {         xml.append(\"<\").append(prefix).append(\"RespondWith>\").append((String)i.next()).append(\"</\").append(prefix).append(\"RespondWith>\");       }     }     if (signed) {       if (signatureString != null) {         xml.append(signatureString);       }  else       if (signature != null) {         signatureString=XMLUtils.print(signature);         xml.append(signatureString);       }     }     xml.append(\"<\").append(prefix).append(\"ProviderID\").append(\">\").append(providerId).append(\"</\").append(prefix).append(\"ProviderID\").append(\">\");     if (idpProvidedNameIdentifier != null && idpProvidedNameIdentifier.getName().length() != 0) {       xml.append(idpProvidedNameIdentifier.toXMLString());     }     if (spProvidedNameIdentifier != null && spProvidedNameIdentifier.getName().length() != 0) {       xml.append(spProvidedNameIdentifier.toXMLString());     }     if (oldProvidedNameIdentifier != null && oldProvidedNameIdentifier.getName().length() != 0) {       xml.append(oldProvidedNameIdentifier.toXMLString());     }     if (relayState != null) {       xml.append(\"<\").append(prefix).append(\"RelayState\").append(\">\").append(relayState).append(\"</\").append(prefix).append(\"RelayState\").append(\">\");     }     xml.append(\"</\").append(prefix).append(\"RegisterNameIdentifierRequest>\");   }  else {     FSUtils.debug.error(\"FSNameRegistrationRequest.toString: \" + \"requestID is null \");     throw new FSMsgException(\"nullRequestID\",null);   }   return xml.toString(); } "
"public static String extractKeywords(String url){   if (StringUtils.isEmpty(url)) {     return null;   }   for (  KeywordMatcher matcher : SEARCH_ENGINES) {     String keywords=matcher.matchKeywords(url);     if (keywords != null) {       return keywords.replace(\"+\",\" \");     }   }   return null; } "
"public String addListener(ServiceListener listener){   try {     validateSCM();     return (scm.addListener(token,listener));   }  catch (  Exception e) {     SMSEntry.debug.error(\"ServiceConfigManager:addListener exception\" + \" Service Name: \" + serviceName,e);   }   return (null); } "
"public String isRelation(ObjectName objectName) throws IllegalArgumentException {   if (objectName == null) {     String excMsg=\"Invalid parameter.\";     throw new IllegalArgumentException(excMsg);   }   RELATION_LOGGER.entering(RelationService.class.getName(),\"isRelation\",objectName);   String result=null; synchronized (myRelMBeanObjName2RelIdMap) {     String relId=myRelMBeanObjName2RelIdMap.get(objectName);     if (relId != null) {       result=relId;     }   }   return result; } "
"public static CommandResult execCommand(String command,boolean isRoot){   return execCommand(new String[]{command},isRoot,true); } "
"public void removeConnector(String name) throws Exception {   ObjectName oname=new ObjectName(name);   Service service=getService(oname);   String port=oname.getKeyProperty(\"port\");   Connector conns[]=service.findConnectors();   for (int i=0; i < conns.length; i++) {     String connAddress=String.valueOf(conns[i].getProperty(\"address\"));     String connPort=\"\" + conns[i].getPort();     if ((connAddress == null) && port.equals(connPort)) {       service.removeConnector(conns[i]);       conns[i].destroy();       break;     }     if (port.equals(connPort)) {       service.removeConnector(conns[i]);       conns[i].destroy();       break;     }   } } "
"public boolean isSupported(String feature,String version){   return false; } "
"public int hashCode(){   return getKey().hashCode(); } "
"public DSAPrivateKeySpec(BigInteger x,BigInteger p,BigInteger q,BigInteger g){   this.x=x;   this.p=p;   this.q=q;   this.g=g; } "
"public void authenticateUser(String user,String password) throws LDAPUtilException {   if (password == null) {     throw new LDAPUtilException(\"PwdInvalid\",ResultCode.INVALID_CREDENTIALS,null);   }   userId=user;   userPassword=password;   boolean shouldRetry=false;   do {     try {       searchForUser();       if (screenState == ModuleState.SERVER_DOWN || screenState == ModuleState.USER_NOT_FOUND) {         return;       }       authenticate();       shouldRetry=false;     }  catch (    LDAPUtilException e) {       if (ResultCode.UNWILLING_TO_PERFORM.equals(e.getResultCode())) {         if (!shouldRetry) {           Object[] errMsg=e.getMessageArgs();           debug.error(\"Retying user authentication due to err(\" + ResultCode.UNWILLING_TO_PERFORM + \") '\"+ errMsg[0]+ \"'\");           shouldRetry=true;         }  else {           shouldRetry=false;           throw e;         }       }  else {         throw e;       }     }   }  while (shouldRetry); } "
"public boolean canCreateApplication(String realm){   return isPolicyAdmin(); } "
"@Override public void allIdentitiesChanged(){ } "
"public void testConstructorSignBytesPositive6(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};   int aSign=1;   byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};   BigInteger aNumber=new BigInteger(aSign,aBytes);   byte resBytes[]=new byte[rBytes.length];   resBytes=aNumber.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,aNumber.signum()); } "
"private void reloadObjectClassesMap(Mappings mappings,Mappings newMappings){   for (  Entry<Map<ObjectClass,String>,Integer> entry : mappings.ocEncodeMap.entrySet()) {     Map<ObjectClass,String> ocMap=entry.getKey();     Integer id=entry.getValue();     loadObjectClassesToMaps(id,ocMap.values(),newMappings,false);   } } "
"private void mergeParameters(){   Map<String,String> mergedParams=new HashMap<>();   String names[]=findParameters();   for (int i=0; i < names.length; i++) {     mergedParams.put(names[i],findParameter(names[i]));   }   ApplicationParameter params[]=findApplicationParameters();   for (int i=0; i < params.length; i++) {     if (params[i].getOverride()) {       if (mergedParams.get(params[i].getName()) == null) {         mergedParams.put(params[i].getName(),params[i].getValue());       }     }  else {       mergedParams.put(params[i].getName(),params[i].getValue());     }   }   ServletContext sc=getServletContext();   for (  Map.Entry<String,String> entry : mergedParams.entrySet()) {     sc.setInitParameter(entry.getKey(),entry.getValue());   } } "
"public boolean removeElement(Object obj){   return false; } "
"public final void testF4Value(){   assertEquals(65537,RSAKeyGenParameterSpec.F4.intValue()); } "
"private boolean evalDNPattern(AciEvalContext evalCtx,LDAPURL url){   PatternDN pattern;   try {     pattern=PatternDN.decode(url.getRawBaseDN());   }  catch (  DirectoryException ex) {     return false;   }   return pattern.matchesDN(evalCtx.getClientDN()); } "
"public PdfADocument(PdfReader reader,PdfWriter writer,StampingProperties properties){   super(reader,writer,properties);   byte[] existingXmpMetadata=getXmpMetadata();   if (existingXmpMetadata == null) {     throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);   }   XMPMeta meta;   try {     meta=XMPMetaFactory.parseFromBuffer(existingXmpMetadata);   }  catch (  XMPException exc) {     throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);   }   PdfAConformanceLevel conformanceLevel=PdfAConformanceLevel.getConformanceLevel(meta);   if (conformanceLevel == null) {     throw new PdfAConformanceException(PdfAConformanceException.DocumentToReadFromShallBeAPdfAConformantFileWithValidXmpMetadata);   }   setChecker(conformanceLevel); } "
"public void updateUI(){   setUI((RootPaneUI)UIManager.getUI(this)); } "
"public boolean breaksFlow(){   return breakTag; } "
"public SQLSyntaxErrorException(Throwable cause){   super(cause); } "
"private void parsedExpsNotEmpty(Node tokenNode) throws UnexpectedTokenException {   if (parsedExps.empty()) {     err.UnexpectedTokenException(tokenNode.toString(),tokenNode.getLineCol());     throw new ParseFail();   } } "
"public void println(){   newline(); } "
"private final void computeObjectClassesAndAttributes(){   if (!ldapError && (objectClasses == null || userAttributes == null || operationalAttributes == null)) {     objectClasses=new HashMap<>();     userAttributes=new HashMap<>();     operationalAttributes=new HashMap<>();     for (    RawAttribute a : rawAttributes) {       try {         Attribute attr=a.toAttribute();         AttributeDescription attrDesc=attr.getAttributeDescription();         AttributeType attrType=attrDesc.getAttributeType();         if (attrType.isNoUserModification() && !isInternalOperation() && !isSynchronizationOperation()) {           throw new LDAPException(LDAPResultCode.UNWILLING_TO_PERFORM,ERR_ADD_ATTR_IS_NO_USER_MOD.get(entryDN,attrDesc));         }         boolean hasBinaryOption=attrDesc.hasOption(\"binary\");         if (attrType.getSyntax().isBEREncodingRequired()) {           if (!hasBinaryOption) {             AttributeBuilder builder=new AttributeBuilder(attr);             builder.setOption(\"binary\");             attr=builder.toAttribute();           }         }  else         if (hasBinaryOption) {           throw new LDAPException(LDAPResultCode.UNDEFINED_ATTRIBUTE_TYPE,ERR_ADD_ATTR_IS_INVALID_OPTION.get(entryDN,attrDesc));         }         if (attrType.isObjectClass()) {           for (          ByteString os : a.getValues()) {             String ocName=os.toString();             objectClasses.put(getSchema().getObjectClass(ocName),ocName);           }         }  else         if (attrType.isOperational()) {           List<Attribute> attrs=operationalAttributes.get(attrType);           if (attrs == null) {             attrs=new ArrayList<>(1);             operationalAttributes.put(attrType,attrs);           }           attrs.add(attr);         }  else {           List<Attribute> attrs=userAttributes.get(attrType);           if (attrs == null) {             attrs=newArrayList(attr);             userAttributes.put(attrType,attrs);           }  else {             boolean attributeSeen=false;             for (int i=0; i < attrs.size(); i++) {               Attribute ea=attrs.get(i);               if (ea.getAttributeDescription().equals(attrDesc)) {                 AttributeBuilder builder=new AttributeBuilder(ea);                 builder.addAll(attr);                 attrs.set(i,builder.toAttribute());                 attributeSeen=true;               }             }             if (!attributeSeen) {               attrs.add(attr);             }           }         }       }  catch (      LDAPException le) {         setResultCode(ResultCode.valueOf(le.getResultCode()));         appendErrorMessage(le.getMessageObject());         objectClasses=null;         userAttributes=null;         operationalAttributes=null;         ldapError=true;         return;       }     }   } } "
"public static ReferencePropertyMapper reference(final String attribute,final String baseDnTemplate,final String primaryKey,final PropertyMapper mapper){   return reference(AttributeDescription.valueOf(attribute),baseDnTemplate,AttributeDescription.valueOf(primaryKey),mapper); } "
"public synchronized boolean isConsumer(ImageConsumer ic){   return ics.contains(ic); } "
"public NoSuchFieldError(String s){   super(s); } "
"ObjectStreamField(Field field,boolean unshared,boolean showType){   this.field=field;   this.unshared=unshared;   name=field.getName();   Class<?> ftype=field.getType();   type=(showType || ftype.isPrimitive()) ? ftype : Object.class;   signature=getClassSignature(ftype).intern(); } "
"private ConditionResult processAND(SearchFilter completeFilter,Entry entry,int depth) throws DirectoryException {   if (filterComponents == null) {     LocalizableMessage message=ERR_SEARCH_FILTER_COMPOUND_COMPONENTS_NULL.get(entry.getName(),completeFilter,filterType);     throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);   }  else   if (filterComponents.isEmpty()) {     if (logger.isTraceEnabled()) {       logger.trace(\"Returning TRUE for LDAP TRUE \" + \"filter (&)\");     }     return ConditionResult.TRUE;   }  else {     if (depth >= MAX_NESTED_FILTER_DEPTH) {       LocalizableMessage message=ERR_SEARCH_FILTER_NESTED_TOO_DEEP.get(entry.getName(),completeFilter);       throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);     }     for (    SearchFilter f : filterComponents) {       ConditionResult result=f.matchesEntryInternal(completeFilter,entry,depth + 1); switch (result) { case TRUE:         break; case FALSE:       if (logger.isTraceEnabled()) {         logger.trace(\"Returning FALSE for AND component %s in \" + \"filter %s for entry %s\",f,completeFilter,entry.getName());       }     return result; case UNDEFINED:   if (logger.isTraceEnabled()) {     logger.trace(\"Undefined result for AND component %s in filter \" + \"%s for entry %s\",f,completeFilter,entry.getName());   } return result; default : LocalizableMessage message=ERR_SEARCH_FILTER_INVALID_RESULT_TYPE.get(entry.getName(),completeFilter,result); throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message); } } if (logger.isTraceEnabled()) { logger.trace(\"Returning TRUE for AND component %s in filter %s \" + \"for entry %s\",this,completeFilter,entry.getName()); } return ConditionResult.TRUE; } } "
"@Inject public PasswordCredentialsGrantTypeHandler(ClientAuthenticator clientAuthenticator,List<PasswordCredentialsRequestValidator> requestValidators,ResourceOwnerAuthenticator resourceOwnerAuthenticator,OAuth2ProviderSettingsFactory providerSettingsFactory,OAuth2UrisFactory urisFactory,TokenStore tokenStore){   super(providerSettingsFactory,urisFactory,clientAuthenticator);   this.requestValidators=requestValidators;   this.resourceOwnerAuthenticator=resourceOwnerAuthenticator;   this.tokenStore=tokenStore; } "
"public boolean exists(String pid){   logger.debug(\"Config exists call for {}\",pid);   boolean exists=false;   if (isReady(0) && requireRepository) {     String id=pidToId(pid);     try {       ReadRequest readRequest=Requests.newReadRequest(id);       ResourceResponse existing=repo.read(readRequest);       exists=(existing != null);     }  catch (    NotFoundException ex) {       exists=false;     } catch (    ResourceException ex) {       throw new RuntimeException(\"Failed to check if configuration exists in repository: \" + ex.getMessage(),ex);     }   }   if (!exists) {     exists=tempStore.containsKey(pid);     if (exists) {       logger.debug(\"Entry exists in temporary store for '{}'\",pid);     }   }  else {     logger.debug(\"Entry exists for '{}'\",pid);   }   if (!exists) {     logger.debug(\"Entry does not exist for '{}'\",pid);   }   return exists; } "
"private boolean needsRenaming(String name){   return name.contains(shellPkg); } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentgetelementsbytagnameNS01.class,args); } "
"public static int sizeOfInt(){   return 4; } "
"private boolean preventHorizontalAction(final SwipeOpenViewHolder holder,final float translationX){   if (translationX > 0f && ((!isRtl && holder.getStartHiddenViewSize() == 0f) ^ (isRtl && holder.getEndHiddenViewSize() == 0f))) {     return true;   }  else   if (translationX < 0f && ((!isRtl && holder.getEndHiddenViewSize() == 0f) ^ (isRtl && holder.getStartHiddenViewSize() == 0f))) {     return true;   }   return false; } "
"public boolean responseIsString(String oid){   return stringResponses.contains(oid); } "
"private HttpServletRequest _getHttpServletRequest(){   return (HttpServletRequest)super.getRequest(); } "
"private void updateFont(Font font){   StyledDocument doc=(StyledDocument)getComponent().getDocument();   Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);   if (style == null) {     return;   }   if (font == null) {     style.removeAttribute(StyleConstants.FontFamily);     style.removeAttribute(StyleConstants.FontSize);     style.removeAttribute(StyleConstants.Bold);     style.removeAttribute(StyleConstants.Italic);   }  else {     StyleConstants.setFontFamily(style,font.getName());     StyleConstants.setFontSize(style,font.getSize());     StyleConstants.setBold(style,font.isBold());     StyleConstants.setItalic(style,font.isItalic());   } } "
"protected TreeExpansionListener createTreeExpansionListener(){   return getHandler(); } "
"public final int hashCode(){   return super.hashCode(); } "
"public UmaPendingRequest readPendingRequest(String id) throws ResourceException {   try {     return store.read(id);   }  catch (  NotFoundException e) {     throw new org.forgerock.json.resource.NotFoundException(\"Pending request, \" + id + \", not found\",e);   } catch (  ServerException e) {     throw new InternalServerErrorException(\"Failed to read pending request, \" + id,e);   } } "
"@Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {   boolean debug=log.isDebugEnabled();   if (debug) {     if (saxLog.isDebugEnabled()) {       saxLog.debug(\"endElement(\" + namespaceURI + \",\"+ localName+ \",\"+ qName+ \")\");     }     log.debug(\"  match='\" + match + \"'\");     log.debug(\"  bodyText='\" + bodyText + \"'\");   }   bodyText=updateBodyText(bodyText);   String name=localName;   if ((name == null) || (name.length() < 1)) {     name=qName;   }   List<Rule> rules=matches.pop();   if ((rules != null) && (rules.size() > 0)) {     String bodyText=this.bodyText.toString();     for (int i=0; i < rules.size(); i++) {       try {         Rule rule=rules.get(i);         if (debug) {           log.debug(\"  Fire body() for \" + rule);         }         rule.body(namespaceURI,name,bodyText);       }  catch (      Exception e) {         log.error(\"Body event threw exception\",e);         throw createSAXException(e);       } catch (      Error e) {         log.error(\"Body event threw error\",e);         throw e;       }     }   }  else {     if (debug) {       log.debug(\"  No rules found matching '\" + match + \"'.\");     }     if (rulesValidation) {       log.warn(\"  No rules found matching '\" + match + \"'.\");     }   }   bodyText=bodyTexts.pop();   if (rules != null) {     for (int i=0; i < rules.size(); i++) {       int j=(rules.size() - i) - 1;       try {         Rule rule=rules.get(j);         if (debug) {           log.debug(\"  Fire end() for \" + rule);         }         rule.end(namespaceURI,name);       }  catch (      Exception e) {         log.error(\"End event threw exception\",e);         throw createSAXException(e);       } catch (      Error e) {         log.error(\"End event threw error\",e);         throw e;       }     }   }   int slash=match.lastIndexOf('/');   if (slash >= 0) {     match=match.substring(0,slash);   }  else {     match=\"\";   } } "
"public AddOperationWrapper(AddOperation add){   super(add); } "
"String[] toCommandLineArgumentsStatus(String configurationFile,ConnectionParameters connParams){   return new String[]{\"status\",\"--no-prompt\",\"--configFile\",configurationFile,\"--hostname\",connParams.getHostName(),\"--port\",s(connParams.getAdminPort()),\"--adminUID\",connParams.getAdminUid(),\"--adminPassword\",connParams.getAdminPassword(),\"--script-friendly\",\"--noPropertiesFile\"}; } "
"public boolean removeLDIFFiles(){   return removeLDIFFilesArg.isPresent(); } "
"@Override public void connectionClosed(final ConnectionEvent event){   final PooledConnection pc=(PooledConnection)event.getSource();   if (!validatingSet.contains(pc)) {     final PooledConnectionAndInfo pci=pcMap.get(pc);     if (pci == null) {       throw new IllegalStateException(NO_KEY_MESSAGE);     }     try {       _pool.returnObject(pci);     }  catch (    final Exception e) {       System.err.println(\"CLOSING DOWN CONNECTION AS IT COULD \" + \"NOT BE RETURNED TO THE POOL\");       pc.removeConnectionEventListener(this);       try {         doDestroyObject(pci);       }  catch (      final Exception e2) {         System.err.println(\"EXCEPTION WHILE DESTROYING OBJECT \" + pci);         e2.printStackTrace();       }     }   } } "
"@Override public void add(int field,int amount){   if (amount == 0) {     return;   }   if (field < 0 || field >= ZONE_OFFSET) {     throw new IllegalArgumentException();   }   complete();   if (field == YEAR) {     int year=internalGet(YEAR);     if (internalGetEra() == CE) {       year+=amount;       if (year > 0) {         set(YEAR,year);       }  else {         set(YEAR,1 - year);         set(ERA,BCE);       }     }  else {       year-=amount;       if (year > 0) {         set(YEAR,year);       }  else {         set(YEAR,1 - year);         set(ERA,CE);       }     }     pinDayOfMonth();   }  else   if (field == MONTH) {     int month=internalGet(MONTH) + amount;     int year=internalGet(YEAR);     int y_amount;     if (month >= 0) {       y_amount=month / 12;     }  else {       y_amount=(month + 1) / 12 - 1;     }     if (y_amount != 0) {       if (internalGetEra() == CE) {         year+=y_amount;         if (year > 0) {           set(YEAR,year);         }  else {           set(YEAR,1 - year);           set(ERA,BCE);         }       }  else {         year-=y_amount;         if (year > 0) {           set(YEAR,year);         }  else {           set(YEAR,1 - year);           set(ERA,CE);         }       }     }     if (month >= 0) {       set(MONTH,month % 12);     }  else {       month%=12;       if (month < 0) {         month+=12;       }       set(MONTH,JANUARY + month);     }     pinDayOfMonth();   }  else   if (field == ERA) {     int era=internalGet(ERA) + amount;     if (era < 0) {       era=0;     }     if (era > 1) {       era=1;     }     set(ERA,era);   }  else {     long delta=amount;     long timeOfDay=0; switch (field) { case HOUR: case HOUR_OF_DAY:       delta*=60 * 60 * 1000;     break; case MINUTE:   delta*=60 * 1000; break; case SECOND: delta*=1000; break; case MILLISECOND: break; case WEEK_OF_YEAR: case WEEK_OF_MONTH: case DAY_OF_WEEK_IN_MONTH: delta*=7; break; case DAY_OF_MONTH: case DAY_OF_YEAR: case DAY_OF_WEEK: break; case AM_PM: delta=amount / 2; timeOfDay=12 * (amount % 2); break; } if (field >= HOUR) { setTimeInMillis(time + delta); return; } long fd=getCurrentFixedDate(); timeOfDay+=internalGet(HOUR_OF_DAY); timeOfDay*=60; timeOfDay+=internalGet(MINUTE); timeOfDay*=60; timeOfDay+=internalGet(SECOND); timeOfDay*=1000; timeOfDay+=internalGet(MILLISECOND); if (timeOfDay >= ONE_DAY) { fd++; timeOfDay-=ONE_DAY; }  else if (timeOfDay < 0) { fd--; timeOfDay+=ONE_DAY; } fd+=delta; int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET); setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset); zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET); if (zoneOffset != 0) { setTimeInMillis(time + zoneOffset); long fd2=getCurrentFixedDate(); if (fd2 != fd) { setTimeInMillis(time - zoneOffset); } } } } "
"public int currentSegment(double[] coords){   if (isDone()) {     throw new NoSuchElementException(\"quad iterator iterator out of bounds\");   }   int type;   if (index == 0) {     coords[0]=quad.getX1();     coords[1]=quad.getY1();     type=SEG_MOVETO;   }  else {     coords[0]=quad.getCtrlX();     coords[1]=quad.getCtrlY();     coords[2]=quad.getX2();     coords[3]=quad.getY2();     type=SEG_QUADTO;   }   if (affine != null) {     affine.transform(coords,0,coords,0,index == 0 ? 1 : 2);   }   return type; } "
"public void append(NSString s){   append(s.getContent()); } "
"public void acquireProbabilities(final String string){   if (string.length() < 2) {     return;   }   for (int i=2; i < string.length(); ++i) {     final char previousChar=string.charAt(i - 2);     final char currentChar=string.charAt(i - 1);     final char nextChar=string.charAt(i);     final String key=previousChar + \"\" + currentChar;     if (!sequences.contains(key)) {       sequences.add(key);     }     HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key);     if (probabilities == null) {       probabilities=new HashMap<>();       sequenceProbabilities.put(key,probabilities);     }     int existingValue=probabilities.getOrDefault(nextChar,0);     ++existingValue;     probabilities.put(nextChar,existingValue);   } } "
"public boolean isPrivate(){   return this.backend != null && this.backend.isPrivateBackend(); } "
"public void paint(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).paint(a,b);   } } "
"public static String toString(Pnt[] matrix){   StringBuilder buf=new StringBuilder(\"{\");   for (  Pnt row : matrix)   buf.append(\" \" + row);   buf.append(\" }\");   return buf.toString(); } "
"public void testFlipBitException(){   byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=-7;   BigInteger aNumber=new BigInteger(aSign,aBytes);   try {     aNumber.flipBit(number);     fail(\"ArithmeticException has not been caught\");   }  catch (  ArithmeticException e) {   } } "
"public StateRouteSupport(PlaPointInt p_start_corner,int p_layer,int[] p_pen_half_width_arr,boolean[] p_layer_active_arr,NetNosList p_net_no_arr,int p_clearance_class,RuleViaInfoList p_via_rule,boolean p_push_enabled,BrdItem p_start_item,Set<BrdItem> p_target_set,RoutingBoard p_board,boolean p_is_stitch_mode,boolean p_via_snap_to_smd_center,IteraSettings p_itera_settings){   r_board=p_board;   itera_settings=p_itera_settings;   layer_active_no=p_layer;   if (p_push_enabled) {     max_shove_trace_recursion_depth=20;     max_shove_via_recursion_depth=8;     max_spring_over_recursion_depth=5;   }  else {     max_shove_trace_recursion_depth=0;     max_shove_via_recursion_depth=0;     max_spring_over_recursion_depth=0;   }   prev_corner=p_start_corner;   net_nos=p_net_no_arr;   pen_half_width_arr=p_pen_half_width_arr;   layer_active_arr=p_layer_active_arr;   clearance_class=p_clearance_class;   via_rule=p_via_rule;   start_item=p_start_item;   target_set=p_target_set;   is_stitch_mode=p_is_stitch_mode;   via_snap_to_smd_center=p_via_snap_to_smd_center;   calculate_target_points_and_areas();   swap_pin_infos=calculate_swap_pin_infos(); } "
"public byte[] toBytes(){   byte[] output=new byte[32];   do {     for (int i=0; i < 9; i++) {       if ((i & 1) == 1) {         while (c[i] < 0) {           c[i]+=0x2000000;           c[i + 1]--;         }       }  else {         while (c[i] < 0) {           c[i]+=0x4000000;           c[i + 1]--;         }       }     }     while (c[9] < 0) {       c[9]+=0x2000000;       c[0]-=19;     }   }  while (c[0] < 0);   c[1]<<=2;   c[2]<<=3;   c[3]<<=5;   c[4]<<=6;   c[6]<<=1;   c[7]<<=3;   c[8]<<=4;   c[9]<<=6;   output[0]=0;   output[16]=0;   bytesFromCoefficients(output,0,0);   bytesFromCoefficients(output,1,3);   bytesFromCoefficients(output,2,6);   bytesFromCoefficients(output,3,9);   bytesFromCoefficients(output,4,12);   bytesFromCoefficients(output,5,16);   bytesFromCoefficients(output,6,19);   bytesFromCoefficients(output,7,22);   bytesFromCoefficients(output,8,25);   bytesFromCoefficients(output,9,28);   return output; } "
"public void deleteParm(String name){   parameters.delete(name); } "
"public static List<String> readLines(File file) throws IOException {   return readLines(file,Charset.defaultCharset()); } "
"public void addLogEntry(String logEnry){   mLogcatData.add(logEnry);   addFilterLogcatEntry(logEnry);   notifyDataSetChanged(); } "
"public boolean occupy_next_element(){   if (destination_door != null)   return false;   MazeListElement list_element=null;   MazeSearchElement curr_door_section=null;   boolean next_element_found=false;   while (!maze_expansion_list.isEmpty()) {     if (art_engine.is_stop_requested())     return false;     Iterator<MazeListElement> iter=maze_expansion_list.iterator();     list_element=iter.next();     int curr_section_no=list_element.section_no_of_door;     curr_door_section=list_element.door.get_maze_search_element(curr_section_no);     iter.remove();     if (!curr_door_section.is_occupied) {       next_element_found=true;       break;     }   }   if (!next_element_found)   return false;   curr_door_section.backtrack_door=list_element.backtrack_door;   curr_door_section.section_no_of_backtrack_door=list_element.section_no_of_backtrack_door;   curr_door_section.room_ripped=list_element.room_ripped;   curr_door_section.adjustment=list_element.adjustment;   if (list_element.door instanceof ExpandDrillPage) {     expand_to_drills_of_page(list_element);     return true;   }   if (list_element.door instanceof ExpandDoorItem) {     ExpandDoorItem curr_door=(ExpandDoorItem)list_element.door;     if (curr_door.is_destination_door()) {       destination_door=curr_door;       section_no_of_destination_door=list_element.section_no_of_door;       return false;     }   }   if (art_ctrl.is_fanout && list_element.door instanceof ExpandDrill && list_element.backtrack_door instanceof ExpandDrill) {     destination_door=list_element.door;     section_no_of_destination_door=list_element.section_no_of_door;     return false;   }   if (art_ctrl.vias_allowed && list_element.door instanceof ExpandDrill && !(list_element.backtrack_door instanceof ExpandDrill)) {     expand_to_other_layers(list_element);   }   if (list_element.next_room != null) {     if (!expand_to_room_doors(list_element)) {       return true;     }   }   curr_door_section.is_occupied=true;   return true; } "
"public MetadataDescriptor(final ContainerType type,final String propName,final int propType,final int stream,final int language){   assert type != null;   type.assertConstraints(propName,new byte[0],propType,stream,language);   this.containerType=type;   this.name=propName;   this.descriptorType=propType;   this.streamNumber=stream;   this.languageIndex=language; } "
"public void deleteBackend(String backendName) throws ApplicationException {   try {     DN dn=DN.valueOf(\"ds-cfg-backend-id\" + \"=\" + backendName + \",cn=Backends,cn=config\");     Utilities.deleteConfigSubtree(DirectoryServer.getConfigurationHandler(),dn);   }  catch (  OpenDsException|ConfigException ode) {     throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,ode.getMessageObject(),ode);   } } "
"public static FSLogoutNotification parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException {   try {     FSLogoutNotification retLogoutNotification=new FSLogoutNotification();     String requestID=request.getParameter(\"RequestID\");     if (requestID != null) {       retLogoutNotification.requestID=requestID;     }  else {       String[] args={IFSConstants.REQUEST_ID};       throw new FSMsgException(\"missingAttribute\",args);     }     try {       retLogoutNotification.majorVersion=Integer.parseInt(request.getParameter(IFSConstants.MAJOR_VERSION));       FSUtils.debug.message(\"Majorversion : \" + retLogoutNotification.majorVersion);       retLogoutNotification.minorVersion=Integer.parseInt(request.getParameter(IFSConstants.MINOR_VERSION));       FSUtils.debug.message(\"Minorversion : \" + retLogoutNotification.minorVersion);     }  catch (    NumberFormatException ex) {       FSUtils.debug.message(\"FSLogoutNotification. \" + \"parseURLEncodedRequest:Major/Minor version problem\");       throw new FSMsgException(\"invalidNumber\",null);     }     String instantString=request.getParameter(IFSConstants.ISSUE_INSTANT);     if (instantString == null || instantString.length() == 0) {       String[] args={IFSConstants.ISSUE_INSTANT};       throw new FSMsgException(\"missingAttribute\",args);     }     try {       retLogoutNotification.issueInstant=DateUtils.stringToDate(instantString);     }  catch (    ParseException e) {       throw new FSMsgException(\"parseError\",null);     }     String notAfter=request.getParameter(IFSConstants.NOT_ON_OR_AFTER);     if (notAfter != null && notAfter.length() != 0) {       try {         retLogoutNotification.notOnOrAfter=DateUtils.stringToDate(notAfter);       }  catch (      ParseException pe) {         FSUtils.debug.message(\"FSLogoutNotification.parseURLEncoded\" + \"Request: parsing exception\",pe);       }     }     String providerId=request.getParameter(IFSConstants.PROVIDER_ID);     if (providerId != null) {       retLogoutNotification.providerId=providerId;     }  else {       throw new FSMsgException(\"missingElement\",null);     }     String sessionIndex=request.getParameter(IFSConstants.SESSION_INDEX);     if (sessionIndex != null) {       retLogoutNotification.sessionIndex=sessionIndex;     }     String relayState=request.getParameter(IFSConstants.RELAY_STATE);     if (relayState != null) {       retLogoutNotification.relayState=relayState;     }     String nameFormat=request.getParameter(IFSConstants.NAME_FORMAT);     String nameQualifier=request.getParameter(IFSConstants.NAME_QUALIFIER);     String name=request.getParameter(IFSConstants.NAME);     if (name == null) {       name=request.getParameter(IFSConstants.NAME_IDENTIFIER);     }     if (name == null) {       throw new FSMsgException(\"missingElement\",null);     }     retLogoutNotification.nameIdentifier=new NameIdentifier(name,nameQualifier,nameFormat);     FSUtils.debug.message(\"Returning Logout Object\");     return retLogoutNotification;   }  catch (  Exception e) {     throw new FSMsgException(\"parseError\",null);   } } "
"public void test_write$BII_7() throws IOException, NoSuchAlgorithmException {   Support_OutputStream sos=new Support_OutputStream(MY_MESSAGE_LEN);   MessageDigest md=MessageDigest.getInstance(algorithmName[0]);   DigestOutputStream dos=new DigestOutputStream(sos,md);   dos.write(myMessage,0,MY_MESSAGE_LEN);   try {     dos.write(myMessage,0,MY_MESSAGE_LEN);     fail(\"Test 1: IOException expected.\");   }  catch (  IOException e) {   } } "
"public static FontProgram createType1Font(String metricsPath,String binaryPath,boolean cached) throws java.io.IOException {   return createType1Font(metricsPath,binaryPath,null,null,cached); } "
"private void initConnection() throws CoreTokenException {   if (connection == null || !factory.isValid(connection)) {     try {       connection=factory.create();       query.setConnection(connection);     }  catch (    DataLayerException e) {       throw new CoreTokenException(\"Failed to init connection to data layer\",e);     }   } } "
"private boolean compareAndIncrementWorkerCount(int expect){   return ctl.compareAndSet(expect,expect + 1); } "
"public PdfLayer(String name,PdfDocument document){   this(document);   setName(name);   document.getCatalog().getOCProperties(true).registerLayer(this); } "
"public static DragSourceMotionListener add(DragSourceMotionListener a,DragSourceMotionListener b){   return (DragSourceMotionListener)addInternal(a,b); } "
"public void runTest() throws Throwable {   Document doc;   NamedNodeMap attributes;   Node element;   Attr attribute;   NodeList elementList;   String attrName;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagNameNS(\"http://www.nist.gov\",\"address\");   element=elementList.item(1);   attributes=element.getAttributes();   attribute=(Attr)attributes.getNamedItemNS(\"http://www.nist.gov\",\"domestic\");   attrName=attribute.getNodeName();   assertEquals(\"namednodemapgetnameditemns02\",\"emp:domestic\",attrName); } "
"protected String encodeBody(){   return encodeBody(new StringBuilder()).toString(); } "
"public AuthSPrincipal(String name){   if (name == null) {     throw new NullPointerException();   }   this.name=name; } "
"public FilterExprIteratorSimple(){   super(null); } "
"public String endTblDataActionDefaultHrefDisplay(ChildContentDisplayEvent event){   String lbl=(String)tblModel.getValue(TBL_DATA_ACTION_DEFAULT_LABEL);   return ((lbl != null) && (lbl.length() > 0)) ? event.getContent() : \"\"; } "
"public String toStringImpl(){   return new StringBuilder().append(compression).toString(); } "
"public com.sun.identity.liberty.ws.common.jaxb.secext.ReferenceType createReferenceType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.ReferenceTypeImpl(); } "
"public static long[] copyOf(long[] original,int newLength){   long[] copy=new long[newLength];   System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));   return copy; } "
"void appendAttribute(int namespaceIndex,int localNameIndex,int prefixIndex,boolean isID,int m_char_current_start,int contentLength){   int w0=ATTRIBUTE_NODE | namespaceIndex << 16;   int w1=currentParent;   int w2=0;   int w3=localNameIndex | prefixIndex << 16;   System.out.println(\"set w3=\" + w3 + \" \"+ (w3 >> 16)+ \"/\"+ (w3 & 0xffff));   int ourslot=appendNode(w0,w1,w2,w3);   previousSibling=ourslot;   w0=TEXT_NODE;   w1=ourslot;   w2=m_char_current_start;   w3=contentLength;   appendNode(w0,w1,w2,w3);   previousSiblingWasParent=true;   return; } "
"public void addAll(AccessibleState[] states){   if (states.length != 0) {     if (this.states == null) {       this.states=new Vector(states.length);     }     for (int i=0; i < states.length; i++) {       if (!this.states.contains(states[i])) {         this.states.addElement(states[i]);       }     }   } } "
"public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {   long count=0;   int n=0;   while (EOF != (n=input.read(buffer))) {     output.write(buffer,0,n);     count+=n;   }   return count; } "
"public void clear(){   int oldSize=size();   super.clear();   if (oldSize > 0 && getComponent() != null) {     getComponent().componentInputMapChanged(this);   } } "
"public static void restart(String className,LocalizableMessage reason){   restart(className,reason,directoryServer.environmentConfig); } "
"public static void writeBody(PrintWriter writer,Object[] args,int mode){   if (mode == 0) {     writer.print(MessageFormat.format(Constants.BODY_HEADER_SECTION,args));   } } "
"public static boolean removeFromCache(String key,DiskCache diskCache){   File file=diskCache.getFile(key);   return file != null && file.exists() && file.delete(); } "
"private Object applyGlobalDecorations(final ExtractedObject extracted) throws HeapException {   if (extracted.object == null) {     return null;   }   Object decorated=extracted.object;   if (decorated instanceof Decorator) {     return decorated;   }   ExtractedObject deco=extract(GLOBAL_DECORATOR_HEAP_KEY);   if (deco.object != null) {     Decorator globalDecorator=(Decorator)deco.object;     decorated=globalDecorator.decorate(decorated,null,extracted.context);   }   return decorated; } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   logger.info(\"shootme: got an ACK! \");   logger.info(\"Dialog = \" + requestEvent.getDialog());   logger.info(\"Dialog State = \" + requestEvent.getDialog().getState());   this.ackSeen=true; } "
"public FacebookGraphObjectException(String message,Throwable throwable){   super(message,throwable); } "
"private void readVersion() throws IOException, ClassFormatException {   Utility.skipFully(dataInputStream,4); } "
"static boolean arrayGettersSafe(Class<?> subclass,Class<?> immutableClass){   if (subclass == immutableClass)   return true; synchronized (arrayGettersSafeMap) {     Boolean safe=arrayGettersSafeMap.get(subclass);     if (safe == null) {       try {         ArrayGettersSafeAction action=new ArrayGettersSafeAction(subclass,immutableClass);         safe=AccessController.doPrivileged(action);       }  catch (      Exception e) {         safe=false;       }       arrayGettersSafeMap.put(subclass,safe);     }     return safe;   } } "
"@ApiOperation(value=\"create document\",notes=\"This method creates a document\",response=Document.class) @ApiModelRequest(model=Document.class,required=false,modelName=\"Document\") public Document create(Request request,Response response){   String database=request.getHeader(Constants.Url.DATABASE,\"No database provided\");   String table=request.getHeader(Constants.Url.TABLE,\"No table provided\");   String data=request.getBody().toString(ContentType.CHARSET);   if (data == null || data.isEmpty()) {     throw new BadRequestException(\"No document data provided\");   }   try {     Document saved=documentService.create(database,table,data);     response.setResponseCreated();     TokenResolver resolver=HyperExpress.bind(Constants.Url.DOCUMENT_ID,saved.getUuid().toString());     String locationPattern=request.getNamedUrl(HttpMethod.GET,Constants.Routes.DOCUMENT);     response.addLocationHeader(LOCATION_BUILDER.build(locationPattern,resolver));     return new LinkableDocument(saved);   }  catch (  IndexParseException e) {     ServiceUtils.setBadRequestExceptionToResponse(e,response);     return null;   } } "
"public BufferedImageFilter(BufferedImageOp op){   super();   if (op == null) {     throw new NullPointerException(\"Operation cannot be null\");   }   bufferedImageOp=op; } "
"public static int v(String tag,Object... msg){   return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1; } "
"@DataProvider(name=\"stateMachineStatusAnalyzerTestProvider\") public Object[][] stateMachineStatusAnalyzerTestProvider() throws Exception {   return new Object[][]{{1},{10},{50},{120}}; } "
"protected void clearAllData(SSOTokenID tokenID){   boolean removed=false;   String key=tokenID.toString(); synchronized (mapTokenIDs) {     removed=(mapTokenIDs.remove(key) != null);   } } "
"BaseRole(java.security.Principal p,String guid) throws UMSException {   super(); } "
"public static boolean isSPProfileBindingSupported(String realm,String spEntityID,String profile,String binding){   if ((saml2MetaManager == null) || (realm == null) || (spEntityID == null)|| (profile == null)|| (binding == null)) {     return false;   }   try {     SPSSODescriptorElement spDescriptor=saml2MetaManager.getSPSSODescriptor(realm,spEntityID);     List services=null;     if (SAML2Constants.ACS_SERVICE.equals(profile)) {       services=spDescriptor.getAssertionConsumerService();     }  else     if (SAML2Constants.SLO_SERVICE.equals(profile)) {       services=spDescriptor.getSingleLogoutService();     }  else     if (SAML2Constants.MNI_SERVICE.equals(profile)) {       services=spDescriptor.getManageNameIDService();     }     if ((services != null) && (!services.isEmpty())) {       Iterator iter=services.iterator();       while (iter.hasNext()) {         EndpointType endpoint=(EndpointType)iter.next();         if (binding.equals(endpoint.getBinding())) {           return true;         }       }     }   }  catch (  SAML2MetaException me) {     debug.error(\"SAML2Utils.isSPProfileBindingSupported:\",me);   }   return false; } "
"protected String parseName(String name) throws NamingException {   if ((!initialContext) && (name.startsWith(prefix))) {     return (name.substring(prefixLength));   }  else {     if (initialContext) {       return (name);     }  else {       throw new NamingException(sm.getString(\"selectorContext.noJavaUrl\"));     }   } } "
"public boolean isSessionEncrypted(){   final Session session=connectedRS.get().session;   return session != null ? session.isEncrypted() : false; } "
"public static boolean isPublic(int mod){   return (mod & ACC_PUBLIC) != 0; } "
"int divideOneWord(int divisor,MutableBigInteger quotient){   long divisorLong=divisor & LONG_MASK;   if (intLen == 1) {     long dividendValue=value[offset] & LONG_MASK;     int q=(int)(dividendValue / divisorLong);     int r=(int)(dividendValue - q * divisorLong);     quotient.value[0]=q;     quotient.intLen=(q == 0) ? 0 : 1;     quotient.offset=0;     return r;   }   if (quotient.value.length < intLen)   quotient.value=new int[intLen];   quotient.offset=0;   quotient.intLen=intLen;   int shift=Integer.numberOfLeadingZeros(divisor);   int rem=value[offset];   long remLong=rem & LONG_MASK;   if (remLong < divisorLong) {     quotient.value[0]=0;   }  else {     quotient.value[0]=(int)(remLong / divisorLong);     rem=(int)(remLong - (quotient.value[0] * divisorLong));     remLong=rem & LONG_MASK;   }   int xlen=intLen;   while (--xlen > 0) {     long dividendEstimate=(remLong << 32) | (value[offset + intLen - xlen] & LONG_MASK);     int q;     if (dividendEstimate >= 0) {       q=(int)(dividendEstimate / divisorLong);       rem=(int)(dividendEstimate - q * divisorLong);     }  else {       long tmp=divWord(dividendEstimate,divisor);       q=(int)(tmp & LONG_MASK);       rem=(int)(tmp >>> 32);     }     quotient.value[intLen - xlen]=q;     remLong=rem & LONG_MASK;   }   quotient.normalize();   if (shift > 0)   return rem % divisor;  else   return rem; } "
"public Tasker addUITask(Task task){   tasks.add(task);   task.setRunType(THREAD_TYPE.UI);   lastAddedTask=task;   return this; } "
"public NameIDMappingRequest createNameIDMappingRequest(){   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_REQ);   if (obj == null) {     return new NameIDMappingRequestImpl();   }  else {     return (NameIDMappingRequest)obj;   } } "
"public static long parseLong(byte[] bytes,int startIndex,int endIndex){   long l=0;   for (int i=startIndex; i < endIndex; i++) {     l<<=8;     l|=bytes[i] & 0xFF;   }   return l; } "
"public void test_MultipleUpdatesInOneTables() throws SQLException {   int id=1;   String field=\"field3\";   String selectQuery=\"SELECT * FROM \" + DatabaseCreator.TEST_TABLE1 + \" WHERE id=\"+ id;   Statement statement=conn.createStatement();   ResultSet result=statement.executeQuery(selectQuery);   assertTrue(\"There is no records with id = \" + id,result.next());   result.close();   for (int i=0; i < numThreads; i++) {     threadPool.runTask(createTask7(id,field));   }   threadPool.join();   double expectedVal=id + numThreads;   result=statement.executeQuery(selectQuery);   assertTrue(\"There is no records with id = \" + id,result.next());   result.close(); } "
"public void lockSwipe(String... id){   setLockSwipe(true,id); } "
"private void displayInformationMessage(LocalizableMessage msg,LocalizableMessage title){   Utilities.displayInformationMessage(parent,msg,title);   toFront(); } "
"public void testGetPrefix1() throws Throwable {   Document doc;   Node createdNode;   String prefix;   doc=(Document)load(\"staffNS\",builder);   createdNode=doc.createElement(\"test:employee\");   prefix=createdNode.getPrefix();   assertNull(\"throw_Null\",prefix); } "
"public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"static <T>PropertyEditorModification<T> createRemoveModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> removedValues,SortedSet<T> originalValues){   return new PropertyEditorModification<>(propertyDefinition,Type.REMOVE,removedValues,originalValues); } "
"public ProductService retrieveProductPrice(String productId,Handler<AsyncResult<JsonObject>> resultHandler){   delegate.retrieveProductPrice(productId,resultHandler);   return this; } "
"public void testSecretKeyFactory10() throws InvalidKeyException, InvalidKeySpecException {   if (!DEFSupported) {     fail(NotSupportMsg);     return;   }   byte[] bb=new byte[24];   KeySpec ks=(defaultAlgorithm.equals(defaultAlgorithm2) ? (KeySpec)new DESKeySpec(bb) : (KeySpec)new DESedeKeySpec(bb));   KeySpec rks=null;   SecretKeySpec secKeySpec=new SecretKeySpec(bb,defaultAlgorithm);   SecretKey secKey=null;   SecretKeyFactory[] skF=createSKFac();   assertNotNull(\"SecretKeyFactory object were not created\",skF);   for (int i=0; i < skF.length; i++) {     try {       skF[i].generateSecret(null);       fail(\"generateSecret(null): InvalidKeySpecException must be thrown\");     }  catch (    InvalidKeySpecException e) {     }     secKey=skF[i].generateSecret(ks);     try {       skF[i].getKeySpec(null,null);       fail(\"getKeySpec(null,null): InvalidKeySpecException must be thrown\");     }  catch (    InvalidKeySpecException e) {     }     try {       skF[i].getKeySpec(null,ks.getClass());       fail(\"getKeySpec(null, Class): InvalidKeySpecException must be thrown\");     }  catch (    InvalidKeySpecException e) {     }     try {       skF[i].getKeySpec(secKey,null);       fail(\"getKeySpec(secKey, null): NullPointerException or InvalidKeySpecException must be thrown\");     }  catch (    InvalidKeySpecException e) {     } catch (    NullPointerException e) {     }     try {       Class c;       if (defaultAlgorithm.equals(defaultAlgorithm2)) {         c=DESedeKeySpec.class;       }  else {         c=DESKeySpec.class;       }       skF[i].getKeySpec(secKeySpec,c);       fail(\"getKeySpec(secKey, Class): InvalidKeySpecException must be thrown\");     }  catch (    InvalidKeySpecException e) {     }     rks=skF[i].getKeySpec(secKeySpec,ks.getClass());     if (defaultAlgorithm.equals(defaultAlgorithm1)) {       assertTrue(\"Incorrect getKeySpec() result 1\",rks instanceof DESedeKeySpec);     }  else {       assertTrue(\"Incorrect getKeySpec() result 1\",rks instanceof DESKeySpec);     }     rks=skF[i].getKeySpec(secKey,ks.getClass());     if (defaultAlgorithm.equals(defaultAlgorithm1)) {       assertTrue(\"Incorrect getKeySpec() result 2\",rks instanceof DESedeKeySpec);     }  else {       assertTrue(\"Incorrect getKeySpec() result 2\",rks instanceof DESKeySpec);     }   } } "
"public static PermissiveModifyRequestControl newControl(final boolean isCritical){   return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE; } "
"public void calculateMinMax(DataSet dataSet){   if (dataSet.getMaxY() > maxY) {     maxY=dataSet.getMaxY();   }   if (dataSet.getMinY() < minY) {     minY=dataSet.getMinY();   }   if (dataSet.getMaxX() > maxX) {     maxX=dataSet.getMaxX();   }   if (dataSet.getMinX() < minX) {     minX=dataSet.getMinX();   }   if (viewportRect.isEmpty()) {     constrainViewportRect(maxX - visibleXRange,minY,maxX,maxY);   } } "
"private final void internalMapWrapper(ContextVersion contextVersion,CharChunk path,MappingData mappingData) throws IOException {   int pathOffset=path.getOffset();   int pathEnd=path.getEnd();   boolean noServletPath=false;   int length=contextVersion.path.length();   if (length == (pathEnd - pathOffset)) {     noServletPath=true;   }   int servletPath=pathOffset + length;   path.setOffset(servletPath);   MappedWrapper[] exactWrappers=contextVersion.exactWrappers;   internalMapExactWrapper(exactWrappers,path,mappingData);   boolean checkJspWelcomeFiles=false;   MappedWrapper[] wildcardWrappers=contextVersion.wildcardWrappers;   if (mappingData.wrapper == null) {     internalMapWildcardWrapper(wildcardWrappers,contextVersion.nesting,path,mappingData);     if (mappingData.wrapper != null && mappingData.jspWildCard) {       char[] buf=path.getBuffer();       if (buf[pathEnd - 1] == '/') {         mappingData.wrapper=null;         checkJspWelcomeFiles=true;       }  else {         mappingData.wrapperPath.setChars(buf,path.getStart(),path.getLength());         mappingData.pathInfo.recycle();       }     }   }   if (mappingData.wrapper == null && noServletPath && contextVersion.object.getMapperContextRootRedirectEnabled()) {     path.append('/');     pathEnd=path.getEnd();     mappingData.redirectPath.setChars(path.getBuffer(),pathOffset,pathEnd - pathOffset);     path.setEnd(pathEnd - 1);     return;   }   MappedWrapper[] extensionWrappers=contextVersion.extensionWrappers;   if (mappingData.wrapper == null && !checkJspWelcomeFiles) {     internalMapExtensionWrapper(extensionWrappers,path,mappingData,true);   }   if (mappingData.wrapper == null) {     boolean checkWelcomeFiles=checkJspWelcomeFiles;     if (!checkWelcomeFiles) {       char[] buf=path.getBuffer();       checkWelcomeFiles=(buf[pathEnd - 1] == '/');     }     if (checkWelcomeFiles) {       for (int i=0; (i < contextVersion.welcomeResources.length) && (mappingData.wrapper == null); i++) {         path.setOffset(pathOffset);         path.setEnd(pathEnd);         path.append(contextVersion.welcomeResources[i],0,contextVersion.welcomeResources[i].length());         path.setOffset(servletPath);         internalMapExactWrapper(exactWrappers,path,mappingData);         if (mappingData.wrapper == null) {           internalMapWildcardWrapper(wildcardWrappers,contextVersion.nesting,path,mappingData);         }         if (mappingData.wrapper == null && contextVersion.resources != null) {           String pathStr=path.toString();           WebResource file=contextVersion.resources.getResource(pathStr);           if (file != null && file.isFile()) {             internalMapExtensionWrapper(extensionWrappers,path,mappingData,true);             if (mappingData.wrapper == null && contextVersion.defaultWrapper != null) {               mappingData.wrapper=contextVersion.defaultWrapper.object;               mappingData.requestPath.setChars(path.getBuffer(),path.getStart(),path.getLength());               mappingData.wrapperPath.setChars(path.getBuffer(),path.getStart(),path.getLength());               mappingData.requestPath.setString(pathStr);               mappingData.wrapperPath.setString(pathStr);             }           }         }       }       path.setOffset(servletPath);       path.setEnd(pathEnd);     }   }   if (mappingData.wrapper == null) {     boolean checkWelcomeFiles=checkJspWelcomeFiles;     if (!checkWelcomeFiles) {       char[] buf=path.getBuffer();       checkWelcomeFiles=(buf[pathEnd - 1] == '/');     }     if (checkWelcomeFiles) {       for (int i=0; (i < contextVersion.welcomeResources.length) && (mappingData.wrapper == null); i++) {         path.setOffset(pathOffset);         path.setEnd(pathEnd);         path.append(contextVersion.welcomeResources[i],0,contextVersion.welcomeResources[i].length());         path.setOffset(servletPath);         internalMapExtensionWrapper(extensionWrappers,path,mappingData,false);       }       path.setOffset(servletPath);       path.setEnd(pathEnd);     }   }   if (mappingData.wrapper == null && !checkJspWelcomeFiles) {     if (contextVersion.defaultWrapper != null) {       mappingData.wrapper=contextVersion.defaultWrapper.object;       mappingData.requestPath.setChars(path.getBuffer(),path.getStart(),path.getLength());       mappingData.wrapperPath.setChars(path.getBuffer(),path.getStart(),path.getLength());       mappingData.matchType=MappingMatch.DEFAULT;     }     char[] buf=path.getBuffer();     if (contextVersion.resources != null && buf[pathEnd - 1] != '/') {       String pathStr=path.toString();       WebResource file;       if (pathStr.length() == 0) {         file=contextVersion.resources.getResource(\"/\");       }  else {         file=contextVersion.resources.getResource(pathStr);       }       if (file != null && file.isDirectory() && contextVersion.object.getMapperDirectoryRedirectEnabled()) {         path.setOffset(pathOffset);         path.append('/');         mappingData.redirectPath.setChars(path.getBuffer(),path.getStart(),path.getLength());       }  else {         mappingData.requestPath.setString(pathStr);         mappingData.wrapperPath.setString(pathStr);       }     }   }   path.setOffset(pathOffset);   path.setEnd(pathEnd); } "
"public void runTest() throws Throwable {   Document doc;   NodeList nameList;   Node child;   Node lastChild;   String data;   int nodeType;   doc=(Document)load(\"staff\",false);   nameList=doc.getElementsByTagName(\"name\");   child=nameList.item(1);   lastChild=child.getLastChild();   nodeType=(int)lastChild.getNodeType();   assertEquals(\"isCDATA\",4,nodeType);   data=((CharacterData)lastChild).getData();   assertEquals(\"data\",\"This is an adjacent CDATASection with a reference to a tab &tab;\",data); } "
"public InputStreamReader(InputStream in,CharsetDecoder dec){   super(in);   if (dec == null)   throw new NullPointerException(\"charset decoder\");   sd=StreamDecoder.forInputStreamReader(in,this,dec); } "
"public static ComponentUI createUI(JComponent c){   throw new Error(\"ComponentUI.createUI not implemented.\"); } "
"public Object encode(Object pObject) throws EncoderException {   if (pObject == null) {     return null;   }  else   if (pObject instanceof String) {     return encode((String)pObject);   }  else {     throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be encoded using Q codec\");   } } "
"public boolean isServiceVisible(String serviceName){   return !CollectionUtils.isEmpty(hiddenServices) && !hiddenServices.contains(serviceName); } "
"public boolean checkError(){   OutputStream delegate=out;   if (delegate == null) {     return ioError;   }   flush();   return ioError || delegate.checkError(); } "
"public static ByteBuffer toBuffer(String spacedHex){   return ByteBuffer.wrap(toByteArray(spacedHex)); } "
"public TriggerWrapper block(){   if (state != Trigger.STATE_COMPLETE) {     previous_state=state;     state=Trigger.STATE_BLOCKED;   }   return this; } "
"public void prepend(String s){   content=s + content; } "
"public static FilterRule createRule(String ruleText){   ruleText=StringUtils.trim(ruleText);   if (StringUtils.isBlank(ruleText) || StringUtils.length(ruleText) < MIN_RULE_LENGTH || StringUtils.startsWith(ruleText,COMMENT) || StringUtils.startsWith(ruleText,META_START) || StringUtils.contains(ruleText,MASK_OBSOLETE_SCRIPT_INJECTION) || StringUtils.contains(ruleText,MASK_OBSOLETE_STYLE_INJECTION)) {     return null;   }   try {     if (StringUtils.startsWith(ruleText,MASK_WHITE_LIST)) {       return new UrlFilterRule(ruleText);     }     if (StringUtils.contains(ruleText,MASK_CONTENT_RULE)) {       return new ContentFilterRule(ruleText);     }     if (StringUtils.contains(ruleText,MASK_CSS_RULE) || StringUtils.contains(ruleText,MASK_CSS_EXCEPTION_RULE) || StringUtils.contains(ruleText,MASK_CSS_INJECT_RULE)|| StringUtils.contains(ruleText,MASK_CSS_INJECT_EXCEPTION_RULE)) {       return new CssFilterRule(ruleText);     }     if (StringUtils.contains(ruleText,MASK_SCRIPT_RULE)) {       return new ScriptFilterRule(ruleText);     }     return new UrlFilterRule(ruleText);   }  catch (  Exception ex) {     LoggerFactory.getLogger(FilterRule.class).warn(\"Error creating filter rule {}:\\r\\n{}\",ruleText,ex);     return null;   } } "
"public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){   Rect rect=getFramingRectInPreview();   if (rect == null) {     return null;   }   return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false); } "
"@Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){   return fooPersistence.countWithDynamicQuery(dynamicQuery,projection); } "
"private String toDefinitionClassName(String configClassName){   int finalDot=configClassName.lastIndexOf('.');   return configClassName.substring(0,finalDot - 6) + \"meta.\" + configClassName.substring(finalDot + 1)+ \"Defn\"; } "
"public String toXMLString() throws SAML2Exception {   return toXMLString(true,false); } "
"public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {   forwardToProperties(event); } "
"boolean isCurrentConfigurationValid(){   return AMSetupServlet.isCurrentConfigurationValid(); } "
"private V doPut(K kkey,V value,boolean onlyIfAbsent){   Comparable<? super K> key=comparable(kkey);   for (; ; ) {     Node<K,V> b=findPredecessor(key);     Node<K,V> n=b.next;     for (; ; ) {       if (n != null) {         Node<K,V> f=n.next;         if (n != b.next)         break;         Object v=n.value;         if (v == null) {           n.helpDelete(b,f);           break;         }         if (v == n || b.value == null)         break;         int c=key.compareTo(n.key);         if (c > 0) {           b=n;           n=f;           continue;         }         if (c == 0) {           if (onlyIfAbsent || n.casValue(v,value))           return (V)v;  else           break;         }       }       Node<K,V> z=new Node<K,V>(kkey,value,n);       if (!b.casNext(n,z))       break;       int level=randomLevel();       if (level > 0)       insertIndex(z,level);       return null;     }   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node child;   String childName;   String childValue;   int commentCount=0;   int childType;   NamedNodeMap attributes;   doc=(Document)load(\"hc_staff\",false);   elementList=doc.getChildNodes();   for (int indexN1005E=0; indexN1005E < elementList.getLength(); indexN1005E++) {     child=(Node)elementList.item(indexN1005E);     childType=(int)child.getNodeType();     if (equals(8,childType)) {       childName=child.getNodeName();       assertEquals(\"nodeName\",\"#comment\",childName);       childValue=child.getNodeValue();       assertEquals(\"nodeValue\",\" This is comment number 1.\",childValue);       attributes=child.getAttributes();       assertNull(\"attributes\",attributes);       commentCount+=1;     }   }   assertTrue(\"atMostOneComment\",(commentCount < 2)); } "
"protected void prepareForUIInstall(){   drawingCache=new Hashtable<TreePath,Boolean>(7);   leftToRight=BasicGraphicsUtils.isLeftToRight(tree);   stopEditingInCompleteEditing=true;   lastSelectedRow=-1;   leadRow=-1;   preferredSize=new Dimension();   largeModel=tree.isLargeModel();   if (getRowHeight() <= 0)   largeModel=false;   setModel(tree.getModel()); } "
"@Bean public JwtAccessTokenConverter jwtAccessTokenConverter(){   JwtAccessTokenConverter converter=new JwtAccessTokenConverter();   KeyPair keyPair=new KeyStoreKeyFactory(new ClassPathResource(\"keystore.jks\"),\"password\".toCharArray()).getKeyPair(\"selfsigned\");   converter.setKeyPair(keyPair);   return converter; } "
"void doSomeSweeping(boolean tryHarder){   int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;   Node o, p;   final Node sweeper=this.sweeper;   boolean passedGo;   if (sweeper == null) {     o=null;     p=head;     passedGo=true;   }  else {     o=sweeper;     p=o.next;     passedGo=false;   }   for (; probes > 0; probes--) {     if (p == null) {       if (passedGo)       break;       o=null;       p=head;       passedGo=true;     }     final Itr it=p.get();     final Node next=p.next;     if (it == null || it.isDetached()) {       probes=LONG_SWEEP_PROBES;       p.clear();       p.next=null;       if (o == null) {         head=next;         if (next == null) {           itrs=null;           return;         }       }  else       o.next=next;     }  else {       o=p;     }     p=next;   }   this.sweeper=(p == null) ? null : o; } "
"@Override public void close() throws IOException {   try {     super.close();   }   finally {     if (closeBranch) {       branch.close();     }   } } "
"public boolean isDataFlavorSupported(DataFlavor flavor){   DataFlavor[] flavors=getTransferDataFlavors();   for (int i=0; i < flavors.length; i++) {     if (flavors[i].equals(flavor)) {       return true;     }   }   return false; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hasAttributeNS01.class,args); } "
"public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {   OAuthUtil.debugMessage(\"OAuth2PostAuthnPlugin:onLoginSuccess called\"); } "
"public void unlock(){   if (poolProperties.getUseLock() || this.poolProperties.isPoolSweeperEnabled()) {     lock.writeLock().unlock();   } } "
"private void authzIDCheck(final AuthorizeCallback callback){   final String authzid=callback.getAuthorizationID();   final String lowerAuthzID=toLowerCase(authzid);   String idStr;   callback.setAuthorized(true);   if (lowerAuthzID.startsWith(\"u:\")) {     idStr=authzid.substring(2);   }  else {     idStr=authzid;   }   if (idStr.length() == 0) {     authzEntry=null;   }  else {     try {       authzEntry=identityMapper.getEntryForID(idStr);       if (authzEntry == null) {         setCallbackMsg(ERR_SASL_AUTHZID_NO_MAPPED_ENTRY.get(authzid));         callback.setAuthorized(false);         return;       }     }  catch (    final DirectoryException e) {       logger.traceException(e);       setCallbackMsg(ERR_SASL_AUTHZID_NO_MAPPED_ENTRY.get(authzid));       callback.setAuthorized(false);       return;     }   }   if (authzEntry == null || !authzEntry.getName().equals(authEntry.getName())) {     final AuthenticationInfo authInfo=new AuthenticationInfo(authEntry,DirectoryServer.isRootDN(authEntry.getName()));     if (!hasPrivilege(authInfo)) {       callback.setAuthorized(false);     }  else {       callback.setAuthorized(hasPermission(authInfo));     }   } } "
"public boolean isAuthnContextMatching(List requestedACClassRefs,String acClassRef,String comparison,String realm,String hostEntityID){   Map authRefMap=getAuthRefMap(realm,hostEntityID);   return SAML2Utils.isAuthnContextMatching(requestedACClassRefs,acClassRef,comparison,authRefMap); } "
"public Set<String> stringPropertyNames(){   Hashtable<String,String> h=new Hashtable<>();   enumerateStringProperties(h);   return h.keySet(); } "
"public boolean reset(){   boolean wasReset=false;   if (super.reset()) {     resetToStream();     wasReset=true;   }   return wasReset; } "
"@Override public void showProgress(){   if (mShotRecycler.getVisibility() == View.VISIBLE && mBrowseAdapter.getItemCount() > 0) {     mSwipeRefreshLayout.setRefreshing(true);   }  else {     mRecyclerProgress.setVisibility(View.VISIBLE);   } } "
"public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {   return exp1.apply(name) || exp2.apply(name); } "
"private static boolean isURIString(String p_uric){   if (p_uric == null) {     return false;   }   int end=p_uric.length();   char testChar='\\0';   for (int i=0; i < end; i++) {     testChar=p_uric.charAt(i);     if (testChar == '%') {       if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {         return false;       }  else {         i+=2;         continue;       }     }     if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {       continue;     }  else {       return false;     }   }   return true; } "
"public void handleTblCharsetAliasButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {   setSubmitCycle(true);   CCActionTable table=(CCActionTable)getChild(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);   table.restoreStateData();   CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);   Integer[] selected=tblModel.getSelectedRows();   if ((selected != null) && (selected.length > 0)) {     OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS);     tblValues.removeAll(selected);     setPageSessionAttribute(SMG11NModelImpl.ATTRIBUTE_NAME_CHARSET_ALIAS,tblValues);     populateCharsetAliasTable(tblValues);   }   forwardTo(); } "
"public static boolean isPattern(String pattern){   return pattern.indexOf('*') != -1 || pattern.indexOf('?') != -1; } "
"private static void addStatusCodeMap(int nKey,String strVal){   mapStatusCodes.put(Integer.valueOf(nKey),strVal); } "
"public ReplicationBroker(ReplicationDomain replicationDomain,ServerState state,ReplicationDomainCfg config,ReplSessionSecurity replSessionSecurity){   this.domain=replicationDomain;   this.state=state;   this.config=config;   this.replSessionSecurity=replSessionSecurity;   this.rcvWindow=getMaxRcvWindow();   this.halfRcvWindow=rcvWindow / 2;   this.shutdown=true;   this.monitor=replicationDomain != null ? new ReplicationMonitor(replicationDomain) : null;   registerReplicationMonitor(); } "
"public boolean is_stitch_route(){   return is_stitch_route; } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.AttributeExtensibleString createAttributeExtensibleString() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AttributeExtensibleStringImpl(); } "
"public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_string\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.insert_string(value);   }   finally {     _servant_postinvoke($so);   } } "
"@DataProvider(name=\"invalidData\") public Object[][] createInvalidData(){   return new Object[][]{{\"=\"},{\"==\"},{\"===\"},{\"A\"},{\"AA\"},{\"AAA\"},{\"AA`=\"},{\"AA~=\"},{\"AA!=\"},{\"AA@=\"},{\"AA#=\"},{\"AA$=\"},{\"AA%=\"},{\"AA^=\"},{\"AA*=\"},{\"AA(=\"},{\"AA)=\"},{\"AA_=\"},{\"AA-=\"},{\"AA{=\"},{\"AA}=\"},{\"AA|=\"},{\"AA[=\"},{\"AA]=\"},{\"AA\\\\=\"},{\"AA;=\"},{\"AA'=\"},{\"AA\\\"=\"},{\"AA:=\"},{\"AA,=\"},{\"AA.=\"},{\"AA<=\"},{\"AA>=\"},{\"AA?=\"},{\"AA;=\"}}; } "
"public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){   IngredientsFragment fragment=new IngredientsFragment();   fragment.recipe=recipe;   Bundle args=new Bundle();   args.putInt(ARG_SECTION_NUMBER,sectionNumber);   fragment.setArguments(args);   return fragment; } "
"private boolean isAttributeDN(AttributeType attribute){   return SYNTAX_DN_OID.equals(attribute.getSyntax().getOID()); } "
"@Nullable private P retrievePresenterFromExistingLoader(PresenterRetainLoader loader,Class<? extends P> presenterClazz){   Object presenter=loader.getPresenter();   if (presenterClazz.isInstance(presenter)) {     return presenterClazz.cast(presenter);   }  else {     return null;   } } "
"protected void registerLayer(PdfLayer layer){   if (layer == null)   throw new IllegalArgumentException(\"layer argument is null\");   layers.add(layer); } "
"@Override public void sendAttributeChangeNotification(AttributeChangeNotification notification) throws MBeanException, RuntimeOperationsException {   if (notification == null)   throw new RuntimeOperationsException(new IllegalArgumentException(\"Notification is null\"),\"Notification is null\");   if (attributeBroadcaster == null)   return;   if (log.isDebugEnabled())   log.debug(\"AttributeChangeNotification \" + notification);   attributeBroadcaster.sendNotification(notification); } "
"public void invalidate(){   if (session != null)   session.invalidate(); } "
"public void finishedPaintingChildren(JSplitPane a,Graphics b){   for (int i=0; i < uis.size(); i++) {     ((SplitPaneUI)(uis.elementAt(i))).finishedPaintingChildren(a,b);   } } "
"public void visitAttribute(Attribute attr){   if (cv != null) {     cv.visitAttribute(attr);   } } "
"public SessionNameField sessionNameField() throws ParseException {   try {     this.lexer.match('s');     this.lexer.SPorHT();     this.lexer.match('=');     this.lexer.SPorHT();     SessionNameField sessionNameField=new SessionNameField();     String rest=lexer.getRest();     sessionNameField.setSessionName(rest == null ? \"\" : rest.trim());     return sessionNameField;   }  catch (  Exception e) {     throw lexer.createParseException();   } } "
"public Process start() throws IOException {   String[] cmdArray=command.toArray(new String[command.size()]);   String[] envArray=new String[environment.size()];   int i=0;   for (  Map.Entry<String,String> entry : environment.entrySet()) {     envArray[i++]=entry.getKey() + \"=\" + entry.getValue();   }   return ProcessManager.getInstance().exec(cmdArray,envArray,directory,redirectErrorStream); } "
"public static boolean isSupplemental(int c){   return (c >= 0x10000 && c <= 0x10FFFF); } "
"public AlignmentAction(String nm,int a){   super(nm);   this.a=a; } "
"protected String[] parseUserPatternString(String userPatternString){   if (userPatternString != null) {     ArrayList<String> pathList=new ArrayList<>();     int startParenLoc=userPatternString.indexOf('(');     if (startParenLoc == -1) {       return new String[]{userPatternString};     }     int startingPoint=0;     while (startParenLoc > -1) {       int endParenLoc=0;       while ((userPatternString.charAt(startParenLoc + 1) == '|') || (startParenLoc != 0 && userPatternString.charAt(startParenLoc - 1) == '\\\\')) {         startParenLoc=userPatternString.indexOf('(',startParenLoc + 1);       }       endParenLoc=userPatternString.indexOf(')',startParenLoc + 1);       while (userPatternString.charAt(endParenLoc - 1) == '\\\\') {         endParenLoc=userPatternString.indexOf(')',endParenLoc + 1);       }       String nextPathPart=userPatternString.substring(startParenLoc + 1,endParenLoc);       pathList.add(nextPathPart);       startingPoint=endParenLoc + 1;       startParenLoc=userPatternString.indexOf('(',startingPoint);     }     return pathList.toArray(new String[]{});   }   return null; } "
"public PolicyError(short __reason){   super();   reason=__reason; } "
"public FSSignatureException(String s){   super(s); } "
"public UncheckedIOException(String message,IOException cause){   super(message,Objects.requireNonNull(cause)); } "
"public boolean isAfter(LocalTime other){   return compareTo(other) > 0; } "
"@Override public void flush(){   Cell[] row=null;   if (!rows.isEmpty()) {     row=rows.get(rows.size() - 1);   }   document.add(this);   if (row != null) {     lastAddedRow=row;   } } "
"public void test_parseLjava_io_File() throws IOException {   File f=Support_Resources.resourceToTempFile(\"/simple.xml\");   try {     Document d=db.parse(f);     assertNotNull(d);     assertEquals(2,d.getChildNodes().getLength());     assertEquals(\"#comment\",d.getChildNodes().item(0).getNodeName());     assertEquals(\"breakfast_menu\",d.getChildNodes().item(1).getNodeName());   }  catch (  IOException ioe) {     fail(\"Unexpected IOException \" + ioe.toString());   } catch (  SAXException sax) {     fail(\"Unexpected SAXException \" + sax.toString());   }   try {     db.parse((File)null);     fail(\"Expected IllegalArgumentException was not thrown\");   }  catch (  IllegalArgumentException iae) {   } catch (  IOException ioe) {     fail(\"Unexpected IOException \" + ioe.toString());   } catch (  SAXException sax) {     fail(\"Unexpected SAXException \" + sax.toString());   }   try {     db.parse(new File(\"_\"));     fail(\"Expected IOException was not thrown\");   }  catch (  IOException ioe) {   } catch (  SAXException sax) {     fail(\"Unexpected SAXException \" + sax.toString());   }   f=Support_Resources.resourceToTempFile(\"/wrong.xml\");   try {     db.parse(f);     fail(\"Expected SAXException was not thrown\");   }  catch (  IOException ioe) {     fail(\"Unexpected IOException \" + ioe.toString());   } catch (  SAXException sax) {   } } "
"public void testToPlainStringNegNegExp(){   String a=\"-123809648392384754573567356745735.63567890295784902768787678287E-100\";   BigDecimal aNumber=new BigDecimal(a);   String result=\"-0.000000000000000000000000000000000000000000000000000000000000000000012380964839238475457356735674573563567890295784902768787678287\";   assertTrue(\"incorrect value\",aNumber.toPlainString().equals(result)); } "
"public static boolean isVoid(String desc){   return desc.endsWith(\"V\"); } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) private <T>void modifyPropertyValues(ManagedObject<?> mo,PropertyDefinition<T> pd,Map<PropertyDefinition,Set> changes,ModificationType modType,String s) throws ArgumentException {   Set<T> values=changes.get(pd);   if (values == null) {     values=mo.getPropertyValues(pd);   }   if (s == null || s.length() == 0) {     values.clear();   }  else {     T value;     try {       value=pd.decodeValue(s);     }  catch (    PropertyException e) {       throw ArgumentExceptionFactory.adaptPropertyException(e,mo.getManagedObjectDefinition());     } switch (modType) { case ADD:       values.add(value);     break; case REMOVE:   if (!values.remove(value)) {     throw ArgumentExceptionFactory.unknownValueForMultiValuedProperty(s,pd.getName());   } break; case SET: values=new TreeSet<>(pd); values.add(value); break; } } changes.put(pd,values); } "
"public ObjectReader(SocketChannel channel){   this(channel.socket()); } "
"public void stopThread(){   runStatus=false; } "
"public CircularRedirectException(String message){   super(message); } "
"public String toString(){   StringBuffer str=new StringBuffer(200);   str=str.append(\"(\").append(getClass().getName()).append(\"\\n\");   String actions=getActions();   if (subject != null) {     str=str.append(subject.toString()).append(\"\\n\");   }   if (codesource != null) {     str=str.append(codesource.toString()).append(\"\\n\");   }   if ((serviceName != null) && (serviceName.length() != 0)) {     str=str.append(\"serviceName=\").append(serviceName).append(\"\\n\");   }   if ((resourceName != null) && (resourceName.length() != 0)) {     str=str.append(\"resourceName=\").append(resourceName).append(\"\\n\");   }   if ((actions != null) && (actions.length() != 0)) {     str=str.append(\"actions=\").append(actions).append(\"\\n\");   }   if ((envParams != null) && !(envParams.isEmpty())) {     str=str.append(\"envParams=\").append(envParams.values()).append(\"\\n\");   }   str.append(\")\");   return str.toString(); } "
"@Override public void lifecycleEvent(LifecycleEvent event){   if (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) { synchronized (lock) {       init();       for (      String msg : initInfoLogMessages) {         log.info(msg);       }       initInfoLogMessages.clear();       if (aprAvailable) {         try {           initializeSSL();         }  catch (        Throwable t) {           t=ExceptionUtils.unwrapInvocationTargetException(t);           ExceptionUtils.handleThrowable(t);           log.error(sm.getString(\"aprListener.sslInit\"),t);         }       }       if (!(null == FIPSMode || \"off\".equalsIgnoreCase(FIPSMode)) && !isFIPSModeActive()) {         Error e=new Error(sm.getString(\"aprListener.initializeFIPSFailed\"));         log.fatal(e.getMessage(),e);         throw e;       }     }   }  else   if (Lifecycle.AFTER_DESTROY_EVENT.equals(event.getType())) { synchronized (lock) {       if (!aprAvailable) {         return;       }       try {         terminateAPR();       }  catch (      Throwable t) {         t=ExceptionUtils.unwrapInvocationTargetException(t);         ExceptionUtils.handleThrowable(t);         log.info(sm.getString(\"aprListener.aprDestroy\"));       }     }   } } "
"public static void deregisterShutdownListener(ServerShutdownListener listener){   DirectoryServer.deregisterShutdownListener(listener); } "
"public String toString(){   int tabCount=getTabCount();   StringBuilder buffer=new StringBuilder(\"[ \");   for (int counter=0; counter < tabCount; counter++) {     if (counter > 0)     buffer.append(\" - \");     buffer.append(getTab(counter).toString());   }   buffer.append(\" ]\");   return buffer.toString(); } "
"public boolean visitUnaryOperation(ExpressionOwner owner,UnaryOperation op){   return true; } "
"static void putCircleOfTrust(String realm,String name,CircleOfTrustDescriptor cotDescriptor){   String classMethod=\"CircleOfTrustCache:putCircleOfTrust\";   String cacheKey=buildCacheKey(realm,name);   if (debug.messageEnabled()) {     debug.message(classMethod + \": cacheKey = \" + cacheKey);   }   cotCache.put(cacheKey,cotDescriptor); } "
"public int layer_count(){   return layer_visibility_arr.length; } "
"@NonNull public final Agera compose(@NonNull Function<? super Agera,? extends Agera> composer){   return as(composer); } "
"private String fileToString(File file) throws IOException {   InputStream in=new BufferedInputStream(new FileInputStream(file),1024);   Reader reader;   in.mark(3);   int byte1=in.read();   int byte2=in.read();   if (byte1 == 0xFF && byte2 == 0xFE) {     reader=new InputStreamReader(in,\"UTF-16LE\");   }  else   if (byte1 == 0xFF && byte2 == 0xFF) {     reader=new InputStreamReader(in,\"UTF-16BE\");   }  else {     int byte3=in.read();     if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF) {       reader=new InputStreamReader(in,\"UTF-8\");     }  else {       in.reset();       reader=new InputStreamReader(in);     }   }   StringWriter out=new StringWriter();   char[] buffer=new char[1024];   int count;   while ((count=reader.read(buffer)) != -1) {     out.write(buffer,0,count);   }   in.close();   return out.toString(); } "
"@Override public void onItemsChanged(RecyclerView recyclerView){   isNotifyDataSetChanged=true; } "
"public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {   String newDN=super.renameEntry(token,objectType,entryDN,newName,deleteOldName);   String oldDN=LDAPUtils.formatToRFC(entryDN);   CacheBlock cb=(CacheBlock)sdkCache.remove(oldDN);   newDN=LDAPUtils.formatToRFC(newDN);   sdkCache.put(newDN,cb);   return newDN; } "
"public final void testGetAlgParameters01() throws IOException {   boolean performed=false;   for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {     try {       EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]));       AlgorithmParameters apar=epki.getAlgParameters();       if (apar == null) {         continue;       }       assertTrue(Arrays.equals(EncryptedPrivateKeyInfoData.getParametersEncoding(EncryptedPrivateKeyInfoData.algName0[i][0]),apar.getEncoded()));       performed=true;     }  catch (    NoSuchAlgorithmException allowedFailure) {     }   }   assertTrue(\"Test not performed\",performed); } "
"protected final void assertNotAborted() throws InterruptedIOException {   if (aborted) {     throw new InterruptedIOException(\"Connection has been shut down.\");   } } "
"public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {   super(fromCertificate(certificate)); } "
"private void unRegisterAuth(LDAPURL ldapUrl) throws LdapException {   String key=makeKeyFromLDAPUrl(ldapUrl);   authTable.remove(key);   notifyListeners(); } "
"ID2Entry(TreeName name,DataConfig dataConfig) throws StorageRuntimeException {   super(name);   this.dataConfig=dataConfig; } "
"private DeferredFileOutputStream(int threshold,File outputFile,String prefix,String suffix,File directory){   super(threshold);   this.outputFile=outputFile;   memoryOutputStream=new ByteArrayOutputStream();   currentOutputStream=memoryOutputStream;   this.prefix=prefix;   this.suffix=suffix;   this.directory=directory; } "
"public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {   boolean forwarded=false;   submitCycle=true;   try {     ResponseProvider provider=createResponseProvider();     if (provider != null) {       CachedPolicy cachedPolicy=getCachedPolicy();       Policy policy=cachedPolicy.getPolicy();       String name=(String)propertySheetModel.getValue(RESPONSEPROVIDER_NAME);       policy.addResponseProvider(name,provider);       backTrail();       forwardToPolicyViewBean();       forwarded=true;     }   }  catch (  NameAlreadyExistsException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",getModel().getErrorString(e));   } catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }   if (!forwarded) {     forwardTo();   } } "
"public String debugOperationAttemptAsPrincipal(String resource,String operation,Context context,String realm,Debug debug){   init();   Reject.ifNull(resource,operation,context,debug);   final String principalName=PrincipalRestUtils.getPrincipalNameFromServerContext(context);   StringBuilder sb=new StringBuilder();   sb.append(resource).append(\" :: \").append(operation.toUpperCase());   sb.append(\" attempted by \");   sb.append(principalName == null ? \"[unknown]\" : principalName);   if (realm != null) {     sb.append(\" in realm \").append(realm);   }   debug.message(sb.toString());   return principalName; } "
"@Override public String toString(){   return content; } "
"static boolean isSelectionStarted(Spannable buffer){   DragState[] ds;   ds=buffer.getSpans(0,buffer.length(),DragState.class);   return ds.length > 0 && ds[0].mIsSelectionStarted; } "
"private HttpResponse processResponse(ByteBuffer response,AsyncChannelWrapper channel,long timeout) throws InterruptedException, ExecutionException, DeploymentException, EOFException, TimeoutException {   Map<String,List<String>> headers=new CaseInsensitiveKeyMap<>();   int status=0;   boolean readStatus=false;   boolean readHeaders=false;   String line=null;   while (!readHeaders) {     response.clear();     Future<Integer> read=channel.read(response);     Integer bytesRead=read.get(timeout,TimeUnit.MILLISECONDS);     if (bytesRead.intValue() == -1) {       throw new EOFException();     }     response.flip();     while (response.hasRemaining() && !readHeaders) {       if (line == null) {         line=readLine(response);       }  else {         line+=readLine(response);       }       if (\"\\r\\n\".equals(line)) {         readHeaders=true;       }  else       if (line.endsWith(\"\\r\\n\")) {         if (readStatus) {           parseHeaders(line,headers);         }  else {           status=parseStatus(line);           readStatus=true;         }         line=null;       }     }   }   return new HttpResponse(status,new WsHandshakeResponse(headers)); } "
"public boolean beginTfGroupFilterDisplay(ChildDisplayEvent event){   return !is2dot2Agent() && !isAgentAuthenticator(); } "
"public void stopHandler(){   if (logger.isTraceEnabled()) {     debugInfo(\"stop\");   }   DirectoryServer.deregisterMonitorProvider(this); } "
"public DelegatingPreparedStatement(final DelegatingConnection<?> c,final PreparedStatement s){   super(c,s); } "
"public LDAPPostReadRequestControl(boolean isCritical,Set<String> rawAttributes){   super(OID_LDAP_READENTRY_POSTREAD,isCritical);   if (rawAttributes == null) {     this.rawAttributes=new LinkedHashSet<>(0);   }  else {     this.rawAttributes=rawAttributes;   }   requestedAttributes=null; } "
"public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {   if (bufOff + outOff > out.length) {     throw new DataLengthException(\"output buffer to small in doFinal\");   }   int blockSize=cipher.getBlockSize();   int len=bufOff - blockSize;   byte[] block=new byte[blockSize];   if (forEncryption) {     cipher.processBlock(buf,0,block,0);     if (bufOff < blockSize) {       throw new DataLengthException(\"need at least one block of input for CTS\");     }     for (int i=bufOff; i != buf.length; i++) {       buf[i]=block[i - blockSize];     }     for (int i=blockSize; i != bufOff; i++) {       buf[i]^=block[i - blockSize];     }     if (cipher instanceof CBCBlockCipher) {       BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();       c.processBlock(buf,blockSize,out,outOff);     }  else {       cipher.processBlock(buf,blockSize,out,outOff);     }     System.arraycopy(block,0,out,outOff + blockSize,len);   }  else {     byte[] lastBlock=new byte[blockSize];     if (cipher instanceof CBCBlockCipher) {       BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();       c.processBlock(buf,0,block,0);     }  else {       cipher.processBlock(buf,0,block,0);     }     for (int i=blockSize; i != bufOff; i++) {       lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);     }     System.arraycopy(buf,blockSize,block,0,len);     cipher.processBlock(block,0,out,outOff);     System.arraycopy(lastBlock,0,out,outOff + blockSize,len);   }   int offset=bufOff;   reset();   return offset; } "
"public final void toString(StringBuilder builder){   builder.append(getName()); } "
"public ProviderDoesNotExistException(String message,Throwable cause){   super(message,cause); } "
"public void throwException(){   mv.visitInsn(Opcodes.ATHROW); } "
"protected boolean checkCollision(){   if (xPos > WIDTH + 500 || xPos < 0)   return true;   Shape intersection;   intersection=SVGPath.intersect(spriteBounds,stageFloorBase.getSpriteBoundsArray()[Mario.collidingZone]);   if (intersection.getBoundsInParent().getWidth() != -1) {     main.Main.fireballHit.play();     return true;   }   for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {     Enemy e=SpriteHandler.getEnemyCast().get(i);     if (e.getSpriteBoundsArray()[5] != null) {       intersection=SVGPath.intersect(spriteBounds,e.getSpriteBoundsArray()[5]);       if (intersection.getBoundsInParent().getWidth() != -1) {         main.Main.fireballIncinerate.play();         e.fireballHit();         Main.updateScore(1000);         return true;       }     }   }   for (  StageBlock block : SpriteHandler.getStageElements()) {     intersection=SVGPath.intersect(spriteBounds,block.getSpriteBounds());     if (intersection.getBoundsInParent().getWidth() != -1) {       main.Main.fireballHit.play();       return true;     }   }   return false; } "
"private void close(){   Window window=getWindow();   if (window != null) {     window.dispatchEvent(new WindowEvent(window,WindowEvent.WINDOW_CLOSING));   } } "
"public void addOperand(PdfLayer layer){   getPdfObject().add(layer.getPdfObject());   getPdfObject().setModified(); } "
"public ReferredByHeader createReferredByHeader(Address address){   if (address == null)   throw new NullPointerException(\"null address!\");   ReferredBy referredBy=new ReferredBy();   referredBy.setAddress(address);   return referredBy; } "
"public FileSystemNotFoundException(){ } "
"public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute){   boolean was_added;   int index;   if (localName == null || uri == null || uri.length() == 0)   index=m_attributes.getIndex(rawName);  else {     index=m_attributes.getIndex(uri,localName);   }   if (index >= 0) {     m_attributes.setValue(index,value);     was_added=false;   }  else {     m_attributes.addAttribute(uri,localName,rawName,type,value);     was_added=true;   }   return was_added; } "
"public static void copyAndFilterScripts(ResourceBundle bundle,Properties lookupProp) throws IOException {   String currentOS=determineOS();   String fromFilePattern=lookupProp.getProperty(currentOS + FROM_FILE);   String toFilePattern=lookupProp.getProperty(currentOS + TO_FILE);   String tempFromDir=lookupProp.getProperty(currentOS + FROM_DIR);   String tempToDir=lookupProp.getProperty(currentOS + TO_DIR);   File fromDir=new File(tempFromDir);   File toDir=new File(tempToDir);   if (toDir.isAbsolute()) {     toDir=new File(toDir.getName());   }   Properties tokens=SetupUtils.getTokens(bundle,lookupProp);   LinkedList fromFilesList=new LinkedList();   LinkedList toFilesList=new LinkedList();   SetupUtils.getFiles(fromDir,toDir,fromFilePattern,toFilePattern,fromFilesList,toFilesList);   ListIterator srcIter=fromFilesList.listIterator();   ListIterator destIter=toFilesList.listIterator();   while ((srcIter.hasNext()) && (destIter.hasNext())) {     File srcFile=(File)srcIter.next();     File destFile=(File)destIter.next();     CopyUtils.copyFile(srcFile,destFile,tokens,true,false);   }   if (!currentOS.equals(WINDOWS)) {     Process proc=Runtime.getRuntime().exec(\"/bin/chmod -R +x \" + toDir.getName());     try {       if (proc.waitFor() != 0) {         System.out.println(bundle.getString(\"message.info.\" + \"permission.scripts\"));       }     }  catch (    InterruptedException ex) {       System.out.println(bundle.getString(\"message.info.\" + \"permission.scripts\"));     }   }   System.out.println(bundle.getString(\"message.info.success\") + \" \" + (new File(\".\")).getCanonicalPath()+ FILE_SEPARATOR+ toDir.getName()); } "
"public LongMap(int initialCapacity){   this(initialCapacity,0.8f); } "
"public void start(){   flushThread.start();   startListenService(); } "
"@Override public long skip(long n) throws IOException {   int charWidth=(fEncoding >= 4) ? 2 : 1;   long bytesSkipped=fInputStream.skip(n << charWidth);   if ((bytesSkipped & (charWidth | 1)) == 0)   return bytesSkipped >> charWidth;   return (bytesSkipped >> charWidth) + 1; } "
"public ContentModel(int type,Object content,ContentModel next){   this.type=type;   this.content=content;   this.next=next; } "
"public DigestOutputStream(OutputStream stream,MessageDigest digest){   super(stream);   setMessageDigest(digest); } "
"public LDAPPostReadResponseControl(SearchResultEntry searchEntry){   this(false,searchEntry); } "
"public String findGroup(String groupname){   UserDatabase database=(UserDatabase)this.resource;   Group group=database.findGroup(groupname);   if (group == null) {     return (null);   }   try {     ObjectName oname=MBeanUtils.createObjectName(managedGroup.getDomain(),group);     return (oname.toString());   }  catch (  MalformedObjectNameException e) {     IllegalArgumentException iae=new IllegalArgumentException(\"Cannot create object name for group [\" + groupname + \"]\");     iae.initCause(e);     throw iae;   } } "
"public static StringArgument hostNameArgument(final String defaultHostName,final LocalizableMessage description) throws ArgumentException {   return StringArgument.builder(OPTION_LONG_HOST).shortIdentifier(OPTION_SHORT_HOST).description(description != null ? description : INFO_ARGUMENT_DESCRIPTION_HOST_NAME.get()).defaultValue(defaultHostName).valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildArgument(); } "
"@Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){   Object[] finderArgs=new Object[]{uuid,groupId};   Object result=null;   if (retrieveFromCache) {     result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);   }   if (result instanceof Foo) {     Foo foo=(Foo)result;     if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {       result=null;     }   }   if (result == null) {     StringBundler query=new StringBundler(4);     query.append(_SQL_SELECT_FOO_WHERE);     boolean bindUuid=false;     if (uuid == null) {       query.append(_FINDER_COLUMN_UUID_G_UUID_1);     }  else     if (uuid.equals(StringPool.BLANK)) {       query.append(_FINDER_COLUMN_UUID_G_UUID_3);     }  else {       bindUuid=true;       query.append(_FINDER_COLUMN_UUID_G_UUID_2);     }     query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);     String sql=query.toString();     Session session=null;     try {       session=openSession();       Query q=session.createQuery(sql);       QueryPos qPos=QueryPos.getInstance(q);       if (bindUuid) {         qPos.add(uuid);       }       qPos.add(groupId);       List<Foo> list=q.list();       if (list.isEmpty()) {         finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);       }  else {         Foo foo=list.get(0);         result=foo;         cacheResult(foo);         if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {           finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);         }       }     }  catch (    Exception e) {       finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);       throw processException(e);     }  finally {       closeSession(session);     }   }   if (result instanceof List<?>) {     return null;   }  else {     return (Foo)result;   } } "
"public void addStyleSheet(StyleSheet ss){ synchronized (this) {     if (linkedStyleSheets == null) {       linkedStyleSheets=new Vector<StyleSheet>();     }     if (!linkedStyleSheets.contains(ss)) {       int index=0;       if (ss instanceof javax.swing.plaf.UIResource && linkedStyleSheets.size() > 1) {         index=linkedStyleSheets.size() - 1;       }       linkedStyleSheets.insertElementAt(ss,index);       linkStyleSheetAt(ss,index);     }   } } "
"public static String normalizeDigestName(String algo){   if (fixNames.containsKey(algo))   return fixNames.get(algo);   return algo; } "
"public void completeBranchInitialization(Map<String,Template> templates) throws MakeLDIFException {   if (subordinateTemplateNames == null) {     subordinateTemplateNames=new String[0];     subordinateTemplates=new Template[0];   }  else {     subordinateTemplates=new Template[subordinateTemplateNames.length];     for (int i=0; i < subordinateTemplates.length; i++) {       subordinateTemplates[i]=templates.get(toLowerCase(subordinateTemplateNames[i]));       if (subordinateTemplates[i] == null) {         throw new MakeLDIFException(ERR_MAKELDIF_UNDEFINED_BRANCH_SUBORDINATE.get(branchDN,subordinateTemplateNames[i]));       }     }   } } "
"public void startPreview(){   if (camera != null && !previewing) {     camera.startPreview();     previewing=true;   } } "
"@Override public Geometry deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {   JsonObject jsonObject=(JsonObject)json;   String geometryType=jsonObject.get(\"type\").getAsString();   if (geometryType.equals(\"Point\")) {     JsonArray coordinates=jsonObject.getAsJsonArray(\"coordinates\");     return Point.fromCoordinates(Position.fromCoordinates(coordinates.get(0).getAsDouble(),coordinates.get(1).getAsDouble()));   }  else {     throw new JsonParseException(\"Unexpected geometry found: \" + geometryType);   } } "
"private static Status destroyTokenAndGenerateStatus(String sessionIndex,Object session,HttpServletRequest request,HttpServletResponse response,boolean cleanUp) throws SAML2Exception {   Status status=null;   if (session != null) {     try {       if (cleanUp) {         MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);       }       if (debug.messageEnabled()) {         debug.message(\"IDPLogoutUtil.destroyTAGR: \" + \"Local session destroyed.\");       }       status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,\"\");     }  catch (    Exception e) {       debug.error(\"IDPLogoutUtil.destroyTAGR: \",e);       status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,\"\");     }   }  else {     if (debug.messageEnabled()) {       debug.message(\"IDPLogoutUtil.destroyTAGR: \" + \"No such session with index \" + sessionIndex + \" exists.\");     }     status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,\"\");   }   return status; } "
"public DHGenParameterSpec(int primeSize,int exponentSize){   this.primeSize=primeSize;   this.exponentSize=exponentSize; } "
"private StringBuffer format(BigInteger number,StringBuffer result,FieldPosition fieldPosition){   fieldPosition.setBeginIndex(0);   fieldPosition.setEndIndex(0);   return format(number,result,fieldPosition.getFieldDelegate(),false); } "
"private void addEntries(String... dns) throws Exception {   for (  String dn : dns) {     addEntry(dn);   } } "
"public NotYetConnectedException(){ } "
"public SkidGUI(){   initialize(); } "
"public boolean isRange(int start,int end,boolean value){   if (end < start) {     throw new IllegalArgumentException();   }   if (end == start) {     return true;   }   end--;   int firstInt=start / 32;   int lastInt=end / 32;   for (int i=firstInt; i <= lastInt; i++) {     int firstBit=i > firstInt ? 0 : start & 0x1F;     int lastBit=i < lastInt ? 31 : end & 0x1F;     int mask;     if (firstBit == 0 && lastBit == 31) {       mask=-1;     }  else {       mask=0;       for (int j=firstBit; j <= lastBit; j++) {         mask|=1 << j;       }     }     if ((bits[i] & mask) != (value ? mask : 0)) {       return false;     }   }   return true; } "
"public MonitorMsg createGlobalTopologyMonitorMsg(int sender,int destination) throws InterruptedException {   return createGlobalTopologyMonitorMsg(sender,destination,domainMonitor.recomputeMonitorData()); } "
"@TargetApi(19) public static boolean hasTranslucentStatusBar(@Nullable final Activity activity){   if (null == activity) {     return false;   }   if (Build.VERSION.SDK_INT >= 19) {     return ((activity.getWindow().getAttributes().flags & LayoutParams.FLAG_TRANSLUCENT_STATUS) == LayoutParams.FLAG_TRANSLUCENT_STATUS);   }  else {     return false;   } } "
"private boolean isClosed(){   return buf == null; } "
"public synchronized void addHeader(String name,String value){   String nameLower=name.toLowerCase(Locale.ENGLISH);   List<String> headerValueList=headerNameToValueListMap.get(nameLower);   if (null == headerValueList) {     headerValueList=new ArrayList<>();     headerNameToValueListMap.put(nameLower,headerValueList);   }   headerValueList.add(value); } "
"private void parseClassDefInfo(SClassDef sClassDef,AST.Invocation superWithInvocation,List<AST.Access> superWithoutInvocation,List<Import> imports,LineCol lineCol) throws SyntaxException {   Iterator<AST.Access> superWithoutInvocationAccess;   if (superWithInvocation == null) {     if (superWithoutInvocation.isEmpty()) {       sClassDef.setParent((SClassDef)getTypeWithName(\"java.lang.Object\",lineCol));       superWithoutInvocationAccess=null;     }  else {       superWithoutInvocationAccess=superWithoutInvocation.iterator();       AST.Access mightBeClassAccess=superWithoutInvocationAccess.next();       STypeDef tmp=getTypeWithAccess(mightBeClassAccess,imports);       if (tmp instanceof SClassDef) {         sClassDef.setParent((SClassDef)tmp);       }  else       if (tmp instanceof SInterfaceDef) {         sClassDef.superInterfaces().add((SInterfaceDef)tmp);         sClassDef.setParent((SClassDef)getTypeWithName(\"java.lang.Object\",lineCol));       }  else {         err.SyntaxException(mightBeClassAccess.toString() + \" is not class or interface\",mightBeClassAccess.line_col());         return;       }     }   }  else {     if (!(superWithInvocation.exp instanceof AST.Access)) {       throw new LtBug(\"classDef.superWithInvocation.exp should always be AST.Access\");     }     AST.Access access=(AST.Access)superWithInvocation.exp;     STypeDef tmp=getTypeWithAccess(access,imports);     if (tmp instanceof SClassDef) {       sClassDef.setParent((SClassDef)tmp);     }  else {       err.SyntaxException(access.toString() + \" is not class or interface\",access.line_col());       return;     }     superWithoutInvocationAccess=superWithoutInvocation.iterator();   }   while (superWithoutInvocationAccess != null && superWithoutInvocationAccess.hasNext()) {     AST.Access interfaceAccess=superWithoutInvocationAccess.next();     STypeDef tmp=getTypeWithAccess(interfaceAccess,imports);     if (tmp instanceof SInterfaceDef) {       sClassDef.superInterfaces().add((SInterfaceDef)tmp);     }  else {       err.SyntaxException(interfaceAccess.toString() + \" is not interface\",interfaceAccess.line_col());       return;     }   } } "
"@Override public String toString(){   StringBuilder buffer=new StringBuilder();   buffer.append(super.toString());   buffer.append(\"(\");   if (fileFilters != null) {     for (int i=0; i < fileFilters.size(); i++) {       if (i > 0) {         buffer.append(\",\");       }       Object filter=fileFilters.get(i);       buffer.append(filter == null ? \"null\" : filter.toString());     }   }   buffer.append(\")\");   return buffer.toString(); } "
"@Override public void initParams(final HttpServletRequest request,final IConfiguration configuration,final Object... params) throws ConnectorException {   super.initParams(request,configuration,params);   this.ckFinderFuncNum=request.getParameter(\"CKFinderFuncNum\");   this.ckEditorFuncNum=request.getParameter(\"CKEditorFuncNum\");   this.responseType=request.getParameter(\"response_type\");   this.langCode=request.getParameter(\"langCode\");   if (this.errorCode == Constants.Errors.CKFINDER_CONNECTOR_ERROR_NONE) {     this.uploaded=uploadFile(request);   } } "
"private boolean containsFault(SOAPMessage msg){   try {     SOAPPart sp=msg.getSOAPPart();     SOAPEnvelope se=sp.getEnvelope();     SOAPBody sb=se.getBody();     return (sb.hasFault());   }  catch (  Exception e) {     if (SAMLUtils.debug.messageEnabled()) {       SAMLUtils.debug.message(\"Error in containFault!\");     }     return false;   } } "
"private void initialize() throws ChangelogException {   final ReplicationDomainDB domainDB=changelogDB.getReplicationDomainDB();   initializeLastAliveCSNs(domainDB);   initializeNextChangeCursor(domainDB);   initializeOfflineReplicas(); } "
"public GZIPInputStream(InputStream in) throws IOException {   this(in,512); } "
"public ShapeTileBox nearest_part(ShapeTileBox p_from_box){   int ll_x;   if (p_from_box.box_ll.v_x >= box_ll.v_x) {     ll_x=p_from_box.box_ll.v_x;   }  else   if (p_from_box.box_ur.v_x >= box_ll.v_x) {     ll_x=box_ll.v_x;   }  else {     ll_x=p_from_box.box_ur.v_x;   }   int ur_x;   if (p_from_box.box_ur.v_x <= box_ur.v_x) {     ur_x=p_from_box.box_ur.v_x;   }  else   if (p_from_box.box_ll.v_x <= box_ur.v_x) {     ur_x=box_ur.v_x;   }  else {     ur_x=p_from_box.box_ll.v_x;   }   int ll_y;   if (p_from_box.box_ll.v_y >= box_ll.v_y) {     ll_y=p_from_box.box_ll.v_y;   }  else   if (p_from_box.box_ur.v_y >= box_ll.v_y) {     ll_y=box_ll.v_y;   }  else {     ll_y=p_from_box.box_ur.v_y;   }   int ur_y;   if (p_from_box.box_ur.v_y <= box_ur.v_y) {     ur_y=p_from_box.box_ur.v_y;   }  else   if (p_from_box.box_ll.v_y <= box_ur.v_y) {     ur_y=box_ur.v_y;   }  else {     ur_y=p_from_box.box_ll.v_y;   }   return new ShapeTileBox(ll_x,ll_y,ur_x,ur_y); } "
"public ResultImpl(Element element) throws XACMLException {   processElement(element);   makeImmutable(); } "
"public boolean isCanceled(){   return isCanceled; } "
"public boolean isCompletelyDirty(JComponent aComponent){   RepaintManager delegate=getDelegate(aComponent);   if (delegate != null) {     return delegate.isCompletelyDirty(aComponent);   }   Rectangle r;   r=getDirtyRegion(aComponent);   if (r.width == Integer.MAX_VALUE && r.height == Integer.MAX_VALUE)   return true;  else   return false; } "
"private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   String providerAlias=request.getParameter(IFSConstants.META_ALIAS);   if (providerAlias == null || providerAlias.length() < 1) {     FSUtils.debug.error(\"Unable to retrieve alias, Hosted Provider. \" + \"Cannot process request\");     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(\"aliasNotFound\"));     return;   }   if (metaManager == null) {     FSUtils.debug.error(\"Cannot retrieve hosted descriptor. \" + \"Cannot process request\");     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));     return;   }   ProviderDescriptorType hostedProviderDesc=null;   BaseConfigType hostedConfig=null;   String hostedRole=null;   String hostedEntityId=null;   String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);   try {     hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);     hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);     if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {       hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);       hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);     }  else     if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {       hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);       hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);     }     if (hostedProviderDesc == null) {       throw new IDFFMetaException((String)null);     }   }  catch (  IDFFMetaException eam) {     FSUtils.debug.error(\"Unable to find Hosted Provider. not process request\",eam);     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));     return;   }   boolean isIDP=false;   if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {     isIDP=true;   }   if (FSUtils.needSetLBCookieAndRedirect(request,response,isIDP)) {     return;   }   this.request=request;   setRegistrationURL(hostedConfig,providerAlias);   doRegistrationInitiation(request,response,hostedProviderDesc,hostedConfig,hostedEntityId,hostedRole,providerAlias); } "
"public X500Principal(InputStream in){   if (in == null) {     throw new NullPointerException(\"in == null\");   }   try {     dn=(Name)Name.ASN1.decode(in);   }  catch (  IOException e) {     throw incorrectInputEncoding(e);   } } "
"public boolean isSecure(){   return false; } "
"protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units){   this(type,minimum,maximum,precision,updatePeriod,initialValue,units,\"\",\"\",\"\"); } "
"public final void endDocument() throws org.xml.sax.SAXException {   flushPending();   if (m_doIndent && !m_isprevtext) {     try {       outputLineSep();     }  catch (    IOException e) {       throw new SAXException(e);     }   }   flushWriter();   if (m_tracer != null)   super.fireEndDoc(); } "
"public JarInputStream(InputStream in) throws IOException {   this(in,true); } "
"public static <E extends Exception>void throwFirstFrom(List<? extends E> exceptions) throws E {   if (!exceptions.isEmpty()) {     throw exceptions.get(0);   } } "
"public FrameBodyWCOM(){ } "
"public boolean equals(Object other){   if (this == other)   return true;   if (other instanceof Address) {     final Address o=(Address)other;     return this.getURI().equals(o.getURI());   }   return false; } "
"@Override public void mark(int readlimit){ } "
"@Inject public AuthorizationService(List<AuthorizeRequestValidator> requestValidators,ResourceOwnerSessionValidator resourceOwnerSessionValidator,OAuth2ProviderSettingsFactory providerSettingsFactory,ResourceOwnerConsentVerifier consentVerifier,ClientRegistrationStore clientRegistrationStore,AuthorizationTokenIssuer tokenIssuer,ClientAuthenticationFailureFactory failureFactory,CsrfProtection csrfProtection){   this.requestValidators=requestValidators;   this.resourceOwnerSessionValidator=resourceOwnerSessionValidator;   this.providerSettingsFactory=providerSettingsFactory;   this.consentVerifier=consentVerifier;   this.clientRegistrationStore=clientRegistrationStore;   this.tokenIssuer=tokenIssuer;   this.failureFactory=failureFactory;   this.csrfProtection=csrfProtection; } "
"public void initialize(Map configParams) throws PolicyException { } "
"public void testUnmappableForLength(){   assertNotNull(CoderResult.unmappableForLength(Integer.MAX_VALUE));   assertNotNull(CoderResult.unmappableForLength(1));   assertSame(CoderResult.unmappableForLength(1),CoderResult.unmappableForLength(1));   assertNotSame(CoderResult.unmappableForLength(2),CoderResult.unmappableForLength(1));   try {     CoderResult.unmappableForLength(-1);     fail(\"Should throw IllegalArgumentException\");   }  catch (  IllegalArgumentException ex) {   }   try {     CoderResult.unmappableForLength(0);     fail(\"Should throw IllegalArgumentException\");   }  catch (  IllegalArgumentException ex) {   } } "
"public LDAPAttribute(String attributeType,String value){   this.attributeType=attributeType;   values=newArrayList(ByteString.valueOfUtf8(value)); } "
"public void testDivideRoundHalfUpPos1(){   String a=\"92948782094488478231212478987482988798104576347813847567949855464535634534563456\";   int aScale=-24;   String b=\"74723342238476237823754692930187879183479\";   int bScale=13;   String c=\"1.2439055763572051712242335979928354832010167729111113605E+76\";   int resScale=-21;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",resScale,result.scale()); } "
"public static String toPem(Object object) throws Exception {   StringWriter sw=new StringWriter();   PEMWriter pw=new PEMWriter(sw);   pw.writeObject(object);   pw.flush();   return sw.toString(); } "
"boolean validateAttributes(SSOToken ssoToken,Map<String,Set<String>> attributeSet,boolean encodePassword,String orgName) throws SMSException {   return validateAttributes(ssoToken,attributeSet,encodePassword,orgName,false); } "
"public void testDisableExternalParameterEntities() throws Exception {   String xml=\"<!DOCTYPE foo [\" + \"  <!ENTITY % bar SYSTEM \\\"/no-such-document.xml\\\">\" + \"  %bar;\"+ \"]>\"+ \"<foo/>\";   testDisableExternalEntities(\"http://xml.org/sax/features/external-parameter-entities\",xml); } "
"public DeviceGray(){   this(0f); } "
"@Override public int read() throws IOException {   if (closed) {     return -1;   }   byte[] b=new byte[1];   if (read(b,0,1) == 0) {     throw new IOException();   }   return b[0]; } "
"public void warning(String msg){   if (debugLevel > Debug.ERROR) {     formatAndWrite(\"WARNING: \",msg,null);   } } "
"public LockableFileWriter(File file,Charset encoding) throws IOException {   this(file,encoding,false,null); } "
"@Override public String toString(){   String s=null;   try {     JSONObject jo=toJSONObject();     s=(jo == null) ? super.toString() : jo.toString(2);   }  catch (  JSONException e) {     PolicyConstants.DEBUG.error(\"NotCondition.toString()\",e);   }   return s; } "
"@DataProvider(name=\"stringValues\") public Object[][] createStringValues(){   return new Object[][]{{\"\\\"\\\"\",true},{\"\\\"escaped\\\"\\\"dquotes\\\"\",true},{\"\\\"valid Unicode \\u00D6\\u00C4\\\"\",true},{\"\\\"only one \\\" \\\"\",false},{\"invalid without dquotes\",false},{\"\\\"missing end\",false},{\"\\\"valid string\\\" with extra trailing characters\",false}}; } "
"public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_short\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     $self.insert_short(value);   }   finally {     _servant_postinvoke($so);   } } "
"public StringHashMap(String identifier,AbstractTagFrameBody frameBody,int size){   super(identifier,frameBody,size);   if (identifier.equals(DataTypes.OBJ_LANGUAGE)) {     valueToKey=Languages.getInstanceOf().getValueToIdMap();     keyToValue=Languages.getInstanceOf().getIdToValueMap();   }  else {     throw new IllegalArgumentException(\"Hashmap identifier not defined in this class: \" + identifier);   } } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   EntitiesModel model=(EntitiesModel)getModel();   AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);   String universalId=(String)getPageSessionAttribute(UNIVERSAL_ID);   try {     Map oldValues=model.getAttributeValues(universalId,false);     Map values=prop.getAttributeValues(oldValues,true,model);     String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);     model.modifyEntity(curRealm,universalId,values);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"message.updated\");   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }   forwardTo(); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ObjectType createObjectType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ObjectTypeImpl(); } "
"public Cursor fetch(Long ruleID){   if (ruleID == null) {     throw new IllegalArgumentException(\"primary key null.\");   }   Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_RULEID + \"=\" + ruleID,null,null,null,null,null);   if (mCursor != null) {     mCursor.moveToFirst();   }   return mCursor; } "
"public OutputStream _request(String operation,boolean responseExpected){   throw new org.omg.CORBA.NO_IMPLEMENT(reason); } "
"private synchronized void writeObject(ObjectOutputStream oos) throws IOException {   oos.defaultWriteObject();   serialize(oos,(Collection)bcsListeners); } "
"@Override @Deprecated public boolean awaitTermination(long l,TimeUnit timeUnit) throws InterruptedException {   throw new UnsupportedOperationException(); } "
"public static double[] copyOf(double[] original,int newLength){   double[] copy=new double[newLength];   System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));   return copy; } "
"public MediaSize(int x,int y,int units){   super(x,y,units);   if (x > y) {     throw new IllegalArgumentException(\"X dimension > Y dimension\");   }   sizeVector.add(this); } "
"private void createEntity(SSOToken token,PersistentObject parentObj,int objectType,Map attributes,String profileName) throws UMSException, AMEntryExistsException, AMException {   String orgDN=getOrganizationDN(internalToken,parentObj.getDN());   AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);   makeNamingFirst(attrSet,getNamingAttribute(objectType),profileName);   String ctName=getCreationTemplateName(objectType);   if (ctName == null) {     ctName=\"BasicUser\";   }   TemplateManager tempMgr=TemplateManager.getTemplateManager();   CreationTemplate creationTemp=tempMgr.getCreationTemplate(ctName,new Guid(orgDN),TemplateManager.SCOPE_ANCESTORS);   attrSet=combineOCs(creationTemp,attrSet);   PersistentObject user=new PersistentObject(creationTemp,attrSet);   try {     parentObj.addChild(user);   }  catch (  AccessRightsException e) {     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.createEntity():\" + \" Insufficient Access rights to create entity\",e);     }     throw new AMException(token,\"460\");   } catch (  EntryAlreadyExistsException ee) {     if (ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {       complianceImpl.checkIfDeletedUser(token,user.getDN());     }     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.createEntity() Entity \" + \"already exists: \",ee);     }     throw new AMEntryExistsException(token,\"462\",ee);   } catch (  UMSException ue) {     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.createEntity(): Internal \" + \"Error occurred. Unable to create User Entry\",ue);     }     processInternalException(token,ue,\"324\");   } } "
"public DocumentName(String documentName,Locale locale){   super(documentName,locale); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namespaceURI04.class,args); } "
"private void maybeCompileToBytecode(MethodHandle invoker){   final int EAGER_COMPILE_ARITY_LIMIT=10;   if (targetType == targetType.erase() && targetType.parameterCount() < EAGER_COMPILE_ARITY_LIMIT) {     invoker.form.compileToBytecode();   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(prefix07.class,args); } "
"public static MethodNode generateGetter(String methodName,String fieldName,String className,String fieldDesc){   MethodNode methodNode=new MethodNode(ACC_PUBLIC,methodName,\"()\" + fieldDesc,null,null);   methodNode.instructions.insert(new VarInsnNode(ALOAD,0));   methodNode.instructions.insert(new FieldInsnNode(GETFIELD,className,fieldName,fieldDesc));   methodNode.instructions.insert(new InsnNode(Type.getType(fieldDesc).getOpcode(IRETURN)));   return methodNode; } "
"public boolean addAll(RoleList roleList) throws IndexOutOfBoundsException {   if (roleList == null) {     return true;   }   return (super.addAll(roleList)); } "
"public void handleButton1Request(RequestInvocationEvent event){   String name=(String)getDisplayFieldValue(CONFIG_NAME);   acModel=(AuthConfigurationModel)getModel();   try {     acModel.createAuthConfiguration(name);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"authentication.configuration.created\");     setPageSessionAttribute(AuthConfigurationModelImpl.CONFIG_NAME,name);     AuthConfigViewBean vb=(AuthConfigViewBean)getViewBean(AuthConfigViewBean.class);     unlockPageTrailForSwapping();     passPgSessionMap(vb);     vb.forwardTo(getRequestContext());   }  catch (  AMConsoleException amc) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",amc.getMessage());     forwardTo();   } } "
"public PdfResources(PdfDictionary pdfObject){   super(pdfObject);   buildResources(pdfObject); } "
"public static byte[] asUnsignedByteArray(BigInteger value){   byte[] bytes=value.toByteArray();   if (bytes[0] == 0) {     byte[] tmp=new byte[bytes.length - 1];     System.arraycopy(bytes,1,tmp,0,tmp.length);     return tmp;   }   return bytes; } "
"public ReplyMessageAttribute(String message){   super(OctetUtils.toOctets(AttributeType.REPLY_MESSAGE,message));   this.msg=new String(super.getOctets(),2,super.getOctets().length - 2); } "
"public BufferIterator littleEndianIterator(){   return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN); } "
"@Override public void write(int b) throws IOException {   throw exception; } "
"private void fixDown(int k){   int j;   while ((j=k << 1) <= size && j > 0) {     if (j < size && queue[j].nextExecutionTime > queue[j + 1].nextExecutionTime)     j++;     if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime)     break;     TimerTask tmp=queue[j];     queue[j]=queue[k];     queue[k]=tmp;     k=j;   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodetextnodename.class,args); } "
"private byte[] calculateCMSKeyChecksum(byte[] key){   byte[] result=new byte[8];   sha1.update(key,0,key.length);   sha1.doFinal(digest,0);   System.arraycopy(digest,0,result,0,8);   return result; } "
"public SpeechConfiguration(String audioFormat){   this.audioFormat=audioFormat; } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   acks++;   if (acks == 5) {     try {       System.out.println(\"shootme: got an ACK! \");       System.out.println(\"Dialog State = \" + dialog.getState());       SipProvider provider=(SipProvider)requestEvent.getSource();       Request messageRequest=dialog.createRequest(Request.MESSAGE);       CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);       ClientTransaction ct=provider.getNewClientTransaction(messageRequest);       cseq.setSeqNumber(1);       ct.sendRequest();     }  catch (    Exception ex) {       ex.printStackTrace();     }   } } "
"public int previousNode(){   if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE,null));   if ((m_next - 1) > 0) {     m_next--;     return this.elementAt(m_next);   }  else   return DTM.NULL; } "
"public boolean isStatusAttribute(){   return (isStatusAttribute); } "
"private boolean verifySyntax(Entry entry,Operation operation,DN clientDN) throws DirectoryException {   if (entry.hasOperationalAttribute(aciType)) {     if (!operation.getClientConnection().hasPrivilege(Privilege.MODIFY_ACL,operation)) {       logger.debug(INFO_ACI_ADD_FAILED_PRIVILEGE,entry.getName(),clientDN);       return false;     }     List<Attribute> attributeList=entry.getOperationalAttribute(AttributeDescription.create(aciType));     for (    Attribute attribute : attributeList) {       for (      ByteString value : attribute) {         try {           Aci.decode(value,entry.getName());         }  catch (        AciException ex) {           throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,WARN_ACI_ADD_FAILED_DECODE.get(entry.getName(),ex.getMessage()));         }       }     }   }   return true; } "
"public void processData() throws CannotReadException {   while (dataBuffer.hasRemaining()) {     byte next=dataBuffer.get();     if (next != (byte)'e') {       continue;     }     ByteBuffer tempBuffer=dataBuffer.slice();     if ((tempBuffer.get() == (byte)'s') & (tempBuffer.get() == (byte)'d') & (tempBuffer.get() == (byte)'s')) {       dataBuffer.position(dataBuffer.position() - 1 - Mp4BoxHeader.OFFSET_LENGTH);       return;     }   } } "
"public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,com.liferay.portal.kernel.dao.orm.Projection projection){   return getService().dynamicQueryCount(dynamicQuery,projection); } "
"public static DynamicMBean createMBean(ContextResource resource) throws Exception {   String mname=createManagedName(resource);   ManagedBean managed=registry.findManagedBean(mname);   if (managed == null) {     Exception e=new Exception(\"ManagedBean is not found with \" + mname);     throw new MBeanException(e);   }   String domain=managed.getDomain();   if (domain == null)   domain=mserver.getDefaultDomain();   DynamicMBean mbean=managed.createMBean(resource);   ObjectName oname=createObjectName(domain,resource);   if (mserver.isRegistered(oname)) {     mserver.unregisterMBean(oname);   }   mserver.registerMBean(mbean,oname);   return (mbean); } "
"public boolean hasMember(Guid guid) throws UMSException {   if (getPrincipal() == null) {     throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_PRINCIPAL));   }   PersistentObject object=UMSObject.getObject(getPrincipal(),guid);   Attr attr=object.getAttribute(MEMBER_ATTR_NAME);   if (attr == null) {     if (debug.messageEnabled()) {       debug.message(\"AssignableDynamicGroup.hasMember: no \" + \"attribute \" + MEMBER_ATTR_NAME + \" in \"+ guid.getDn());     }     return false;   }   String normalized=getGuid().getDn();   String[] members=attr.getStringValues();   for (int i=0; i < members.length; i++) {     String target=members[i];     if (debug.messageEnabled()) {       debug.message(\"AssignableDynamicGroup.hasMember: comparing \" + normalized + \" to \"+ target);     }     if (Guid.equals(normalized,target)) {       return true;     }   }   return false; } "
"public static long readUint32(DataInput di) throws IOException {   final byte[] buf8={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};   di.readFully(buf8,4,4);   final long l=ByteBuffer.wrap(buf8).getLong();   return l; } "
"public static EditStatus newInstance(String token){   EditStatus fragment=new EditStatus();   Bundle args=new Bundle();   args.putString(ARG_TOKEN,token);   fragment.setArguments(args);   return fragment; } "
"public UnsupportedOperationException(String message,Throwable cause){   super(message,cause); } "
"public static boolean disjoint(Collection<?> c1,Collection<?> c2){   if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {     Collection<?> tmp=c1;     c1=c2;     c2=tmp;   }   Iterator<?> it=c1.iterator();   while (it.hasNext()) {     if (c2.contains(it.next())) {       return false;     }   }   return true; } "
"public static boolean hasDescriptor(LocalizableMessage msg,LocalizableMessageDescriptor.Arg0 desc){   return msg.ordinal() == desc.ordinal() && msg.resourceName().equals(desc.resourceName()); } "
"public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType.OAEPparams createEncryptionMethodTypeOAEPparams(byte[] value) throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.OAEPparamsImpl(value); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   XObject left=m_left.execute(xctxt,true);   XObject right=m_right.execute(xctxt,true);   XObject result=operate(left,right);   left.detach();   right.detach();   return result; } "
"@Override public String toString(){   return \"FastDateFormat[\" + printer.getPattern() + \",\"+ printer.getLocale()+ \",\"+ printer.getTimeZone().getID()+ \"]\"; } "
"void clear() throws ChangelogException {   log.clear();   replicationEnv.resetGenerationId(baseDN);   csnLimits=new CSNLimits(null,null); } "
"public ApplicationTrustManager createCopy(){   ApplicationTrustManager copy=new ApplicationTrustManager(keystore);   copy.lastRefusedAuthType=lastRefusedAuthType;   copy.lastRefusedChain=lastRefusedChain;   copy.lastRefusedCause=lastRefusedCause;   copy.acceptedChains.addAll(acceptedChains);   copy.acceptedAuthTypes.addAll(acceptedAuthTypes);   copy.acceptedHosts.addAll(acceptedHosts);   copy.host=host;   return copy; } "
"public boolean validate(String value,String rule){   return validate(value); } "
"private byte[][] minMaxIPs(byte[] ip1,byte[] subnetmask1,byte[] ip2,byte[] subnetmask2){   int ipLength=ip1.length;   byte[] min1=new byte[ipLength];   byte[] max1=new byte[ipLength];   byte[] min2=new byte[ipLength];   byte[] max2=new byte[ipLength];   for (int i=0; i < ipLength; i++) {     min1[i]=(byte)(ip1[i] & subnetmask1[i]);     max1[i]=(byte)(ip1[i] & subnetmask1[i] | ~subnetmask1[i]);     min2[i]=(byte)(ip2[i] & subnetmask2[i]);     max2[i]=(byte)(ip2[i] & subnetmask2[i] | ~subnetmask2[i]);   }   return new byte[][]{min1,max1,min2,max2}; } "
"@Before public void init() throws IOException {   repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();   git=new Git(repository);   versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);   unchecked(null); } "
"private static boolean isPrimitive(String description){   String x=asmTrim(description);   if (x.length() == 0) {     return true;   }  else   if (x.equals(\"Z\") || x.equals(\"J\") || x.equals(\"I\")|| x.equals(\"F\")|| x.equals(\"D\")|| x.equals(\"C\")|| x.equals(\"T\")|| x.equals(\"G\")) {     return true;   }   return false; } "
"public static NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {   return selectNodeIterator(contextNode,str,contextNode); } "
"public com.sun.identity.saml2.jaxb.metadata.SPSSODescriptorElement createSPSSODescriptorElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.SPSSODescriptorElementImpl(); } "
"public final void testRSAMultiPrimePrivateCrtKeySpec11(){   try {     new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,new RSAOtherPrimeInfo[0]);     fail(\"Expected IAE not thrown\");   }  catch (  IllegalArgumentException e) {   } } "
"public String toXMLString(){   return \"<\" + REMOVE_LISTENER + \" \"+ SERVICE_NAME+ \"=\\\"\"+ serviceName+ \"\\\" \"+ NOTIFICATION_URL+ \"=\\\"\"+ notificationURL+ \"\\\"/>\"+ CRLF; } "
"private int doRecvAndUnwrap() throws IOException {   while (true) {     if (recvWrappedLength < 0) {       while (recvWrappedLengthBuffer.hasRemaining()) {         final int read=channel.read(recvWrappedLengthBuffer);         if (read <= 0) {           return read;         }       }       recvWrappedLengthBuffer.flip();       recvWrappedLength=recvWrappedLengthBuffer.getInt();       recvWrappedLengthBuffer.clear();       if (recvWrappedLength > recvWrappedBufferMaximumSize) {         throw new IOException(\"Client sent a SASL packet specifying a length \" + recvWrappedLength + \" which exceeds the negotiated limit of \"+ recvWrappedBufferMaximumSize);       }       if (recvWrappedLength < 0) {         throw new IOException(\"Client sent a SASL packet specifying a negative length \" + recvWrappedLength);       }       recvWrappedBuffer.clear();       recvWrappedBuffer.limit(recvWrappedLength);     }     while (recvWrappedBuffer.hasRemaining()) {       final int read=channel.read(recvWrappedBuffer);       if (read <= 0) {         return read;       }     }     recvWrappedBuffer.flip();     final byte[] unwrappedDataBytes=saslContext.unwrap(recvWrappedBuffer.array(),0,recvWrappedLength);     recvWrappedLength=-1;     if (unwrappedDataBytes.length > 0) {       recvUnwrappedBuffer=ByteBuffer.wrap(unwrappedDataBytes);       return recvUnwrappedBuffer.remaining();     }   } } "
"public static int countByUuid(java.lang.String uuid){   return getPersistence().countByUuid(uuid); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrparentnodenull.class,args); } "
"public static List<String> doc(ProtoElement element){   if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {     return ImmutableList.<String>of();   }   return new GoContextCommon().getCommentLines(DocumentationUtil.getScopedDescription(element)); } "
"public com.sun.identity.saml2.jaxb.metadata.EncryptionMethodElement createEncryptionMethodElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.EncryptionMethodElementImpl(); } "
"@Override protected void reducePermits(int reduction){   super.reducePermits(reduction); } "
"private boolean isVLVAttrs(String name){   for (int i=0; i < vlvAttrNames.length; i++) {     if (name.equalsIgnoreCase(vlvAttrNames[i])) {       return true;     }   }   return false; } "
"public RealmTest(){   super(\"CLI\"); } "
"public Object put(Object key,Object value){   if (value == null) {     throw new NullPointerException();   }   rwlock.writeLock().lock();   try {     Entry tab[]=table;     int hash=key.hashCode();     int index=(hash & 0x7FFFFFFF) % tab.length;     for (Entry e=tab[index]; e != null; e=e.next) {       if ((e.hash == hash) && e.key.equals(key)) {         Object old=e.value;         e.value=value;         lruTracker.replaceLast(e);         return old;       }     }     if (count >= threshold && count != maxSize) {       modCount++;       rehash();       tab=table;       index=(hash & 0x7FFFFFFF) % tab.length;     }     Entry e=null;     if (count == maxSize) {       e=lruTracker.getFirst();       adjustEntry(e.key);       lruTracker.replaceLast(e);       e.changeValues(hash,key,value,tab[index]);     }  else {       modCount++;       count++;       e=new Entry(hash,key,value,tab[index]);       lruTracker.addLast(e);     }     tab[index]=e;   }   finally {     rwlock.writeLock().unlock();   }   return null; } "
"public static boolean containsAll(final String value,final String[] needles,final boolean caseSensitive){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   return Arrays.stream(needles).allMatch(null); } "
"private void createNamingContext() throws NamingException {   if (container instanceof Server) {     compCtx=namingContext;     envCtx=namingContext;   }  else {     compCtx=namingContext.createSubcontext(\"comp\");     envCtx=compCtx.createSubcontext(\"env\");   }   int i;   if (log.isDebugEnabled())   log.debug(\"Creating JNDI naming context\");   if (namingResources == null) {     namingResources=new NamingResourcesImpl();     namingResources.setContainer(container);   }   ContextResourceLink[] resourceLinks=namingResources.findResourceLinks();   for (i=0; i < resourceLinks.length; i++) {     addResourceLink(resourceLinks[i]);   }   ContextResource[] resources=namingResources.findResources();   for (i=0; i < resources.length; i++) {     addResource(resources[i]);   }   ContextResourceEnvRef[] resourceEnvRefs=namingResources.findResourceEnvRefs();   for (i=0; i < resourceEnvRefs.length; i++) {     addResourceEnvRef(resourceEnvRefs[i]);   }   ContextEnvironment[] contextEnvironments=namingResources.findEnvironments();   for (i=0; i < contextEnvironments.length; i++) {     addEnvironment(contextEnvironments[i]);   }   ContextEjb[] ejbs=namingResources.findEjbs();   for (i=0; i < ejbs.length; i++) {     addEjb(ejbs[i]);   }   ContextService[] services=namingResources.findServices();   for (i=0; i < services.length; i++) {     addService(services[i]);   }   if (container instanceof Context) {     try {       Reference ref=new TransactionRef();       compCtx.bind(\"UserTransaction\",ref);       ContextTransaction transaction=namingResources.getTransaction();       if (transaction != null) {         Iterator<String> params=transaction.listProperties();         while (params.hasNext()) {           String paramName=params.next();           String paramValue=(String)transaction.getProperty(paramName);           StringRefAddr refAddr=new StringRefAddr(paramName,paramValue);           ref.add(refAddr);         }       }     }  catch (    NameAlreadyBoundException e) {     } catch (    NamingException e) {       log.error(sm.getString(\"naming.bindFailed\",e));     }   }   if (container instanceof Context) {     try {       compCtx.bind(\"Resources\",((Context)container).getResources());     }  catch (    NamingException e) {       log.error(sm.getString(\"naming.bindFailed\",e));     }   } } "
"public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public ListIterator<HDR> listIterator(){   return hlist.listIterator(0); } "
"ShapePolygonDivisionPoint(ArrayList<PlaPointInt> corners,int p_concave_corner_no){   PlaPointFloat concave_corner=corners.get(p_concave_corner_no).to_float();   PlaPointFloat before_concave_corner;   if (p_concave_corner_no != 0)   before_concave_corner=corners.get(p_concave_corner_no - 1).to_float();  else   before_concave_corner=corners.get(corners.size() - 1).to_float();   PlaPointFloat after_concave_corner;   if (p_concave_corner_no == corners.size() - 1)   after_concave_corner=corners.get(0).to_float();  else   after_concave_corner=corners.get(p_concave_corner_no + 1).to_float();   boolean search_right=before_concave_corner.v_y > concave_corner.v_y || concave_corner.v_y > after_concave_corner.v_y;   boolean search_left=before_concave_corner.v_y < concave_corner.v_y || concave_corner.v_y < after_concave_corner.v_y;   boolean search_up=before_concave_corner.v_x < concave_corner.v_x || concave_corner.v_x < after_concave_corner.v_x;   boolean search_down=before_concave_corner.v_x > concave_corner.v_x || concave_corner.v_x > after_concave_corner.v_x;   double min_projection_dist=Integer.MAX_VALUE;   PlaPointFloat min_projection=null;   int corner_no_after_min_projection=0;   int corner_no_after_curr_projection=(p_concave_corner_no + 2) % corners.size();   PlaPointInt corner_before_curr_projection;   if (corner_no_after_curr_projection != 0)   corner_before_curr_projection=corners.get(corner_no_after_curr_projection - 1);  else   corner_before_curr_projection=corners.get(corners.size() - 1);   PlaPointFloat corner_before_projection_approx=corner_before_curr_projection.to_float();   double curr_dist;   int loop_end=corners.size() - 2;   for (int i=0; i < loop_end; ++i) {     PlaPointInt corner_after_curr_projection=corners.get(corner_no_after_curr_projection);     PlaPointFloat corner_after_projection_approx=corner_after_curr_projection.to_float();     if (corner_before_projection_approx.v_y != corner_after_projection_approx.v_y) {       double min_y;       double max_y;       if (corner_after_projection_approx.v_y > corner_before_projection_approx.v_y) {         min_y=corner_before_projection_approx.v_y;         max_y=corner_after_projection_approx.v_y;       }  else {         min_y=corner_after_projection_approx.v_y;         max_y=corner_before_projection_approx.v_y;       }       if (concave_corner.v_y >= min_y && concave_corner.v_y <= max_y) {         PlaLineInt curr_line=new PlaLineInt(corner_before_curr_projection,corner_after_curr_projection);         double x_intersect=curr_line.function_in_y_value_approx(concave_corner.v_y);         curr_dist=Math.abs(x_intersect - concave_corner.v_x);         boolean projection_ok=curr_dist < min_projection_dist && (search_right && x_intersect > concave_corner.v_x && concave_corner.v_y <= corner_after_projection_approx.v_y || search_left && x_intersect < concave_corner.v_x && concave_corner.v_y >= corner_after_projection_approx.v_y);         if (projection_ok) {           min_projection_dist=curr_dist;           corner_no_after_min_projection=corner_no_after_curr_projection;           min_projection=new PlaPointFloat(x_intersect,concave_corner.v_y);         }       }     }     if (corner_before_projection_approx.v_x != corner_after_projection_approx.v_x) {       double min_x;       double max_x;       if (corner_after_projection_approx.v_x > corner_before_projection_approx.v_x) {         min_x=corner_before_projection_approx.v_x;         max_x=corner_after_projection_approx.v_x;       }  else {         min_x=corner_after_projection_approx.v_x;         max_x=corner_before_projection_approx.v_x;       }       if (concave_corner.v_x >= min_x && concave_corner.v_x <= max_x) {         PlaLineInt curr_line=new PlaLineInt(corner_before_curr_projection,corner_after_curr_projection);         double y_intersect=curr_line.function_value_approx(concave_corner.v_x);         curr_dist=Math.abs(y_intersect - concave_corner.v_y);         boolean projection_ok=curr_dist < min_projection_dist && (search_up && y_intersect > concave_corner.v_y && concave_corner.v_x >= corner_after_projection_approx.v_x || search_down && y_intersect < concave_corner.v_y && concave_corner.v_x <= corner_after_projection_approx.v_x);         if (projection_ok) {           min_projection_dist=curr_dist;           corner_no_after_min_projection=corner_no_after_curr_projection;           min_projection=new PlaPointFloat(concave_corner.v_x,y_intersect);         }       }     }     corner_before_curr_projection=corner_after_curr_projection;     corner_before_projection_approx=corner_after_projection_approx;     if (corner_no_after_curr_projection == corners.size() - 1) {       corner_no_after_curr_projection=0;     }  else {       ++corner_no_after_curr_projection;     }   }   if (min_projection_dist == Integer.MAX_VALUE) {     System.out.println(\"PolygonShape.DivisionPoint: projection not found\");   }   projection=min_projection;   corner_no_after_projection=corner_no_after_min_projection; } "
"public boolean equals(Object object){   if (!(object instanceof Attribute)) {     return false;   }   Attribute val=(Attribute)object;   if (value == null) {     if (val.getValue() == null) {       return name.equals(val.getName());     }  else {       return false;     }   }   return ((name.equals(val.getName())) && (value.equals(val.getValue()))); } "
"@Override public boolean accept(File file){   if (file.isDirectory()) {     File[] files=file.listFiles();     return files == null || files.length == 0;   }  else {     return file.length() == 0;   } } "
"public Set createDynamicGroups(Map dynamicGroups) throws AMException, SSOException {   Iterator iter=dynamicGroups.keySet().iterator();   Set groups=new HashSet();   while (iter.hasNext()) {     String groupName=(String)iter.next();     String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + \"=\" + groupName+ \",\"+ super.entryDN;     Map attributes=(Map)dynamicGroups.get(groupName);     AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);     groupImpl.setAttributes(attributes);     groupImpl.create();     groups.add(groupImpl);   }   return groups; } "
"public boolean isMustBePresent(){   return mustBePresent; } "
"public void forwardTo(RequestContext requestContext){   loginDebug.message(\"In forwardTo()\");   SSOToken ssoToken=null;   if (requestContext != null) {     request=requestContext.getRequest();     response=requestContext.getResponse();   }   response.setHeader(\"Pragma\",\"no-cache\");   response.setHeader(\"Expires\",\"0\");   if (AuthClientUtils.isVersionHeaderEnabled()) {     response.setHeader(\"X-DSAMEVersion\",AuthClientUtils.getDSAMEVersion());   }   reqDataHash=AuthUtils.parseRequestParameters(request);   client_type=AuthUtils.getClientType(request);   response.setHeader(\"AM_CLIENT_TYPE\",client_type);   if (loginDebug.messageEnabled()) {     loginDebug.message(\"Client Type is: \" + client_type);     loginDebug.message(\"Request method is : \" + request.getMethod());   }   if (request.getMethod().equalsIgnoreCase(\"POST\")) {     isPost=true;   }   SessionID sessionID=null;   InternalSession intSession=null;   try {     boolean isBackPost=false;     sessionID=AuthUtils.getSessionIDFromRequest(request);     ssoToken=AuthUtils.getExistingValidSSOToken(sessionID);     if ((ssoToken == null) && (sessionID != null) && (sessionID.toString().length() != 0)) {       if (AuthUtils.isTimedOut(sessionID)) {         clearCookie(request);         errorCode=AMAuthErrorCode.AUTH_TIMEOUT;         ErrorMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_MESSAGE);         errorTemplate=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_TEMPLATE);         ISLocaleContext localeContext=new ISLocaleContext();         localeContext.setLocale(request);         java.util.Locale locale=localeContext.getLocale();         rb=rbCache.getResBundle(bundleName,locale);         super.forwardTo(requestContext);         return;       }     }     forceAuth=AuthUtils.forceAuthFlagExists(reqDataHash);     if (ssoToken != null) {       if (AuthUtils.newSessionArgExists(reqDataHash)) {         SSOTokenManager.getInstance().destroyToken(ssoToken);       }  else {         loginDebug.message(\"Old Session is Active.\");         newOrgExist=checkNewOrg(ssoToken);         if (newOrg) {           sessionID=new SessionID();         }         if (!newOrgExist) {           if (isPost) {             isBackPost=canGetOrigCredentials(ssoToken);           }           if (forceAuth) {             sessionUpgrade=true;           }  else {             sessionUpgrade=AuthUtils.checkSessionUpgrade(ssoToken,reqDataHash);           }           if (loginDebug.messageEnabled()) {             loginDebug.message(\"Session Upgrade = \" + sessionUpgrade);           }         }       }     }     if (\"true\".equals(request.getParameter(\"new_org\"))) {       ssoToken=AuthUtils.getExistingValidSSOToken(new SessionID(request));       handleNewOrgResponse(ssoToken);       if (logIntoDiffOrg) {         newOrgExist=true;       }  else {         ac=AuthUtils.getAuthContext(request,response,sessionID,sessionUpgrade,isBackPost);         clearCookieAndDestroySession(ac);       }     }     if ((ssoToken != null) && !sessionUpgrade && !newOrgExist) {       try {         loginDebug.message(\"Session is Valid / already \" + \"authenticated\");         bValidSession=true;         if (request != null) {           redirect_url=AuthUtils.getValidGotoURL(request,ssoToken.getProperty(\"Organization\"));           if ((redirect_url == null) || (redirect_url.length() == 0)) {             redirect_url=ssoToken.getProperty(ISAuthConstants.SUCCESS_URL);           }         }         if (redirect_url == null) {           ResultVal=rb.getString(\"authentication.already.login\");         }         LoginSuccess=true;         boolean doForward=AuthUtils.forwardSuccessExists(request);         if (doForward || (redirect_url != null && (redirect_url.startsWith(SSO_REDIRECT) || redirect_url.startsWith(SSO_POST)))) {           if (loginDebug.messageEnabled()) {             loginDebug.message(\"LoginViewBean.forwardRequest=true\");             loginDebug.message(\"LoginViewBean.forwardTo():Forward URL before appending cookie is \" + redirect_url);             loginDebug.message(\"LoginViewBean.forwardTo():Final Forward URL is \" + redirect_url);           }           RequestDispatcher dispatcher=request.getRequestDispatcher(redirect_url);           request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);           dispatcher.forward(request,response);         }  else {           response.sendRedirect(redirect_url);         }         return;       }  catch (      Exception er) {         if (loginDebug.messageEnabled()) {           loginDebug.message(\"Session getState exception: \",er);         }         setErrorMessage(er);       }     }     ac=AuthUtils.getAuthContext(request,response,sessionID,sessionUpgrade,isBackPost);     if (sessionID != null) {       intSession=AuthD.getSession(sessionID);     }     if ((intSession != null) && (intSession.isTimedOut())) {       loginDebug.message(\"Session timeout TRUE\");       if (sessionUpgrade) {         try {           redirect_url=getPrevSuccessURLAndSetCookie();           clearGlobals();           response.sendRedirect(redirect_url);           return;         }  catch (        Exception e) {           loginDebug.message(\"Error redirecting :\",e);         }       }  else {         if (CookieUtils.getCookieValueFromReq(request,AuthUtils.getCookieName()) != null) {           clearCookie(AuthUtils.getCookieName());         }         if (CookieUtils.getCookieValueFromReq(request,AuthUtils.getAuthCookieName()) != null) {           clearCookie(AuthUtils.getAuthCookieName());         }         loginURL=intSession.getProperty(ISAuthConstants.FULL_LOGIN_URL);         errorTemplate=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_TEMPLATE);         errorCode=AMAuthErrorCode.AUTH_TIMEOUT;         ErrorMessage=AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_TIMEOUT,AuthUtils.ERROR_MESSAGE);       }     }     java.util.Locale locale=com.sun.identity.shared.locale.Locale.getLocale(AuthUtils.getLocale(ac));     fallbackLocale=locale;     rb=rbCache.getResBundle(bundleName,locale);     if (loginDebug.messageEnabled()) {       loginDebug.message(\"ac = \" + ac);       loginDebug.message(\"JSPLocale = \" + locale);     }     if (sessionUpgrade) {       ac.getLoginState().setForceAuth(forceAuth);     }     if (!AuthUtils.getInetDomainStatus(ac)) {       if ((errorTemplate == null) || (errorTemplate.length() == 0)) {         setErrorMessage(null);       }     }     if (!isBackPost) {       loginURL=AuthUtils.getLoginURL(ac);     }     String cookieless=(String)request.getAttribute(\"displayCookieError\");     if (cookieless != null && cookieless.equals(\"true\")) {       ErrorMessage=rb.getString(\"nocookiesupport\");       errorTemplate=\"Message.jsp\";     }     if (AuthUtils.isNewRequest(ac)) {       loginDebug.message(\"New AuthContext created\");       if (AuthUtils.isCookieSupported(ac)) {         if (AuthUtils.persistAMCookie(reqDataHash)) {           enableCookieTimeToLive();         }         setCookie();         setlbCookie();       }     }  else {       if (AuthUtils.isCookieSet(ac)) {         if (AuthUtils.checkForCookies(request,ac)) {           loginDebug.message(\"Client support cookie\");           AuthUtils.setCookieSupported(ac,true);         }  else {           loginDebug.message(\"Client do not support cookie\");           AuthUtils.setCookieSupported(ac,false);         }       }     }   }  catch (  Exception e) {     ISLocaleContext localeContext=new ISLocaleContext();     localeContext.setLocale(request);     fallbackLocale=localeContext.getLocale();     rb=rbCache.getResBundle(bundleName,fallbackLocale);     if (loginDebug.messageEnabled()) {       loginDebug.message(\"JSPLocale = \" + fallbackLocale);     }     setErrorMessage(e);     jsp_page=errorTemplate;     if (requestContext == null) {       return;     }     super.forwardTo(requestContext);     return;   }   if (errorTemplate == null || errorTemplate.isEmpty()) {     processLogin();     if (requestContext == null) {       clearGlobals();       return;     }   }   if ((redirect_url != null) && (redirect_url.length() != 0)) {     boolean doForward=AuthUtils.isForwardSuccess(ac,request);     try {       if (doForward && new URI(redirect_url).isAbsolute()) {         doForward=false;       }     }  catch (    URISyntaxException e) {       loginDebug.warning(\"LoginViewBean.forwardTo(): redirect_url {} was not valid\",redirect_url,e);     }     if (AuthUtils.isGenericHTMLClient(client_type) || doForward) {       try {         if (loginDebug.messageEnabled()) {           loginDebug.message(\"Send Redirect to \" + redirect_url);         }         InternalSession oldSession=AuthUtils.getOldSession(ac);         if (ac.getStatus() == AuthContext.Status.FAILED) {           loginDebug.message(\"forwardTo(): Auth failed - Destroy Session!\");           if (AuthUtils.isSessionUpgrade(ac)) {             clearCookieAndDestroySession(ac);             loginDebug.message(\"forwardTo(): Session upgrade - \" + \"Restoring original Session!\");             if (oldSession != null) {               ac.getLoginState().setSession(oldSession);             }           }  else {             clearCookieAndDestroySession(ac);             if (oldSession != null) {               loginDebug.message(\"Destroy existing/old valid session\");               AuthD authD=AuthD.getAuth();               authD.destroySession(oldSession.getID());             }           }           loginDebug.message(\"Login failure, current session destroyed!\");         }  else         if (ac.getStatus() == AuthContext.Status.SUCCESS) {           response.setHeader(\"X-AuthErrorCode\",\"0\");           if (ac.getLoginState().getForceFlag()) {             if (loginDebug.messageEnabled()) {               loginDebug.message(\"Forced Auth Succeed.\" + \"Restoring updated session\");             }             clearCookieAndDestroySession(ac);             ac.getLoginState().setSession(oldSession);           }  else {             if (AuthUtils.isCookieSupported(ac)) {               setCookie();               clearCookie(AuthUtils.getAuthCookieName());             }             if (SystemProperties.getAsBoolean(Constants.DESTROY_SESSION_AFTER_UPGRADE) && oldSession != null) {               loginDebug.message(\"Destroy existing/old valid session\");               AuthD authD=AuthD.getAuth();               authD.destroySession(oldSession.getID());             }           }         }         Cookie appendCookie=AuthUtils.getCookieString(ac,null);         clearGlobals();         if (doForward || redirect_url.startsWith(SSO_REDIRECT) || redirect_url.startsWith(SSO_POST)) {           if (loginDebug.messageEnabled()) {             loginDebug.message(\"LoginViewBean.forwardRequest=true\");             loginDebug.message(\"LoginViewBean.forwardTo():\" + \"Forward URL before appending cookie is \" + redirect_url);           }           if (redirect_url.contains(\"?\")) {             redirect_url+=\"&\" + appendCookie.getName() + \"=\";           }  else {             redirect_url+=\"?\" + appendCookie.getName() + \"=\";           }           String cookieValue=appendCookie.getValue();           if (cookieValue != null) {             redirect_url+=URLEncDec.encode(cookieValue);           }           if (loginDebug.messageEnabled()) {             loginDebug.message(\"LoginViewBean.forwardTo(): Final Forward URL is \" + redirect_url);           }           RequestDispatcher dispatcher=request.getRequestDispatcher(redirect_url);           request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);           dispatcher.forward(request,response);         }  else {           response.sendRedirect(redirect_url);         }         forward=false;         return;       }  catch (      IOException e) {         loginDebug.error(\"LoginViewBean.forwardTo(): There was an IOException doing the forward/redirect\",e);         ResultVal=rb.getString(\"redirect.error\");       } catch (      Exception e) {         loginDebug.error(\"LoginViewBean.forwardTo(): There was an Exception doing the forward/redirect\",e);         setErrorMessage(e);         redirect_url=null;       }     }   }   if (forward) {     forward=false;     super.forwardTo(requestContext);   }   clearGlobals(); } "
"public boolean addFaultyMember(FaultyMember mbr){   if (this.faultyMembers == null)   this.faultyMembers=new ArrayList<>();   if (!faultyMembers.contains(mbr))   return faultyMembers.add(mbr);  else   return false; } "
"public INV_OBJREF(String s,int minor,CompletionStatus completed){   super(s,minor,completed); } "
"static Map<String,List<String>> unmodifiableCopyOfExtraProperties(final Map<String,List<String>> extraProperties){   if (extraProperties == null || extraProperties.isEmpty()) {     return Collections.emptyMap();   }   final Map<String,List<String>> tmp=new LinkedHashMap<>(extraProperties.size());   for (  final Map.Entry<String,List<String>> e : extraProperties.entrySet()) {     tmp.put(e.getKey(),unmodifiableCopyOfList(e.getValue()));   }   return Collections.unmodifiableMap(tmp); } "
"public LegacyServer(String svr){   StringTokenizer st=new StringTokenizer(svr,\"|\");   String name=st.nextToken();   String id=st.nextToken();   sites=new HashSet();   while (st.hasMoreTokens()) {     sites.add(st.nextToken());   } } "
"protected boolean filter(String name,boolean isClassName){   if (name == null)   return false;   char ch;   if (name.startsWith(\"javax\")) {     if (name.length() == 5) {       return false;     }     ch=name.charAt(5);     if (isClassName && ch == '.') {       if (name.startsWith(\"servlet.jsp.jstl.\",6)) {         return false;       }       if (name.startsWith(\"el.\",6) || name.startsWith(\"servlet.\",6) || name.startsWith(\"websocket.\",6)|| name.startsWith(\"security.auth.message.\",6)) {         return true;       }     }  else     if (!isClassName && ch == '/') {       if (name.startsWith(\"servlet/jsp/jstl/\",6)) {         return false;       }       if (name.startsWith(\"el/\",6) || name.startsWith(\"servlet/\",6) || name.startsWith(\"websocket/\",6)|| name.startsWith(\"security/auth/message/\",6)) {         return true;       }     }   }  else   if (name.startsWith(\"org\")) {     if (name.length() == 3) {       return false;     }     ch=name.charAt(3);     if (isClassName && ch == '.') {       if (name.startsWith(\"apache.\",4)) {         if (name.startsWith(\"tomcat.jdbc.\",11)) {           return false;         }         if (name.startsWith(\"el.\",11) || name.startsWith(\"catalina.\",11) || name.startsWith(\"jasper.\",11)|| name.startsWith(\"juli.\",11)|| name.startsWith(\"tomcat.\",11)|| name.startsWith(\"naming.\",11)|| name.startsWith(\"coyote.\",11)) {           return true;         }       }     }  else     if (!isClassName && ch == '/') {       if (name.startsWith(\"apache/\",4)) {         if (name.startsWith(\"tomcat/jdbc/\",11)) {           return false;         }         if (name.startsWith(\"el/\",11) || name.startsWith(\"catalina/\",11) || name.startsWith(\"jasper/\",11)|| name.startsWith(\"juli/\",11)|| name.startsWith(\"tomcat/\",11)|| name.startsWith(\"naming/\",11)|| name.startsWith(\"coyote/\",11)) {           return true;         }       }     }   }   return false; } "
"public static void fill(double[] array,int start,int end,double value){   Arrays.checkStartAndEnd(array.length,start,end);   for (int i=start; i < end; i++) {     array[i]=value;   } } "
"protected ListSelectionModel createSelectionModel(){   return new DefaultListSelectionModel(); } "
"public void mult(int scalar){   for (int i=0; i < 10; i++) {     c[i]*=scalar;   }   reduceCoefficients(); } "
"private void readNameFiles() throws IOException {   File f=getFile(FIRST_NAME_FILE);   List<String> nameList=readLines(f);   firstNames=new String[nameList.size()];   nameList.toArray(firstNames);   f=getFile(LAST_NAME_FILE);   nameList=readLines(f);   lastNames=new String[nameList.size()];   nameList.toArray(lastNames); } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentcreateelementNS06.class,args); } "
"@Override public com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return _fooLocalService.addFoo(foo); } "
"public Headers readHeaders() throws IOException {   Headers.Builder headers=new Headers.Builder();   for (String line; (line=source.readUtf8LineStrict()).length() != 0; ) {     Internal.instance.addLenient(headers,line);   }   return headers.build(); } "
"public void close() throws IOException { } "
"@Override public boolean hasRole(Wrapper wrapper,Principal principal,String role){   if (wrapper != null) {     String realRole=wrapper.findSecurityReference(role);     if (realRole != null)     role=realRole;   }   if (principal instanceof GenericPrincipal) {     GenericPrincipal gp=(GenericPrincipal)principal;     if (gp.getUserPrincipal() instanceof User) {       principal=gp.getUserPrincipal();     }   }   if (!(principal instanceof User)) {     return super.hasRole(null,principal,role);   }   if (\"*\".equals(role)) {     return true;   }  else   if (role == null) {     return false;   }   User user=(User)principal;   Role dbrole=database.findRole(role);   if (dbrole == null) {     return false;   }   if (user.isInRole(dbrole)) {     return true;   }   Iterator<Group> groups=user.getGroups();   while (groups.hasNext()) {     Group group=groups.next();     if (group.isInRole(dbrole)) {       return true;     }   }   return false; } "
"protected AbstractConfigListenerAdaptor(){ } "
"private Header createDigestHeader(final Credentials credentials,final String digest) throws AuthenticationException {   CharArrayBuffer buffer=new CharArrayBuffer(128);   if (isProxy()) {     buffer.append(AUTH.PROXY_AUTH_RESP);   }  else {     buffer.append(AUTH.WWW_AUTH_RESP);   }   buffer.append(\": Digest \");   String uri=getParameter(\"uri\");   String realm=getParameter(\"realm\");   String nonce=getParameter(\"nonce\");   String opaque=getParameter(\"opaque\");   String response=digest;   String algorithm=getParameter(\"algorithm\");   String uname=credentials.getUserPrincipal().getName();   List<BasicNameValuePair> params=new ArrayList<BasicNameValuePair>(20);   params.add(new BasicNameValuePair(\"username\",uname));   params.add(new BasicNameValuePair(\"realm\",realm));   params.add(new BasicNameValuePair(\"nonce\",nonce));   params.add(new BasicNameValuePair(\"uri\",uri));   params.add(new BasicNameValuePair(\"response\",response));   if (qopVariant != QOP_MISSING) {     params.add(new BasicNameValuePair(\"qop\",getQopVariantString()));     params.add(new BasicNameValuePair(\"nc\",NC));     params.add(new BasicNameValuePair(\"cnonce\",getCnonce()));   }   if (algorithm != null) {     params.add(new BasicNameValuePair(\"algorithm\",algorithm));   }   if (opaque != null) {     params.add(new BasicNameValuePair(\"opaque\",opaque));   }   for (int i=0; i < params.size(); i++) {     BasicNameValuePair param=params.get(i);     if (i > 0) {       buffer.append(\", \");     }     boolean noQuotes=\"nc\".equals(param.getName()) || \"qop\".equals(param.getName());     BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);   }   return new BufferedHeader(buffer); } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"public boolean isExplicitPolicyRequired(){   return explicitPolicyRequired; } "
"public void startPrefixMapping(String prefix,String uri) throws SAXException { } "
"private boolean saveTemporaryFile(final String path,final FileItem item) throws Exception {   File file=new File(path,this.newFileName);   AfterFileUploadEventArgs args=new AfterFileUploadEventArgs();   args.setCurrentFolder(this.currentFolder);   args.setFile(file);   args.setFileContent(item.get());   if (!ImageUtils.isImage(file)) {     item.write(file);     if (configuration.getEvents() != null) {       configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);     }     return true;   }  else   if (ImageUtils.checkImageSize(item.getInputStream(),this.configuration)) {     ImageUtils.createTmpThumb(item.getInputStream(),file,getFileItemName(item),this.configuration);     if (configuration.getEvents() != null) {       configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);     }     return true;   }  else   if (configuration.checkSizeAfterScaling()) {     ImageUtils.createTmpThumb(item.getInputStream(),file,getFileItemName(item),this.configuration);     if (FileUtils.checkFileSize(configuration.getTypes().get(this.type),file.length())) {       if (configuration.getEvents() != null) {         configuration.getEvents().run(EventTypes.AfterFileUpload,args,configuration);       }       return true;     }  else {       file.delete();       this.errorCode=Constants.Errors.CKFINDER_CONNECTOR_ERROR_UPLOADED_TOO_BIG;       return false;     }   }   return false; } "
"public boolean isTokenValid(SSOToken token){   return manager.isValidToken(token); } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentcreateattributeNS04.class,args); } "
"public void close_output(){   if (file_writer != null) {     try {       file_writer.close();     }  catch (    IOException e) {       System.out.println(\"unable to close logfile\");     }   }   write_enabled=false; } "
"@Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){   templateValue.getValue().append(nextValue++);   return TagResult.SUCCESS_RESULT; } "
"public void useAuthzid(boolean v){   this.useAuthzid=v; } "
"static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {   StringBuilder sb=new StringBuilder(msg.length());   if (encoding == null) {     encoding=DEFAULT_ENCODING;   }  else   if (!DEFAULT_ENCODING.equals(encoding)) {     CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());     if (eci != null) {       encodingECI(eci.getValue(),sb);     }   }   int len=msg.length();   int p=0;   int textSubMode=SUBMODE_ALPHA;   if (compaction == Compaction.TEXT) {     encodeText(msg,p,len,sb,textSubMode);   }  else   if (compaction == Compaction.BYTE) {     byte[] bytes=msg.getBytes(encoding);     encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);   }  else   if (compaction == Compaction.NUMERIC) {     sb.append((char)LATCH_TO_NUMERIC);     encodeNumeric(msg,p,len,sb);   }  else {     int encodingMode=TEXT_COMPACTION;     while (p < len) {       int n=determineConsecutiveDigitCount(msg,p);       if (n >= 13) {         sb.append((char)LATCH_TO_NUMERIC);         encodingMode=NUMERIC_COMPACTION;         textSubMode=SUBMODE_ALPHA;         encodeNumeric(msg,p,n,sb);         p+=n;       }  else {         int t=determineConsecutiveTextCount(msg,p);         if (t >= 5 || n == len) {           if (encodingMode != TEXT_COMPACTION) {             sb.append((char)LATCH_TO_TEXT);             encodingMode=TEXT_COMPACTION;             textSubMode=SUBMODE_ALPHA;           }           textSubMode=encodeText(msg,p,t,sb,textSubMode);           p+=t;         }  else {           int b=determineConsecutiveBinaryCount(msg,p,encoding);           if (b == 0) {             b=1;           }           byte[] bytes=msg.substring(p,p + b).getBytes(encoding);           if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {             encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);           }  else {             encodeBinary(bytes,0,bytes.length,encodingMode,sb);             encodingMode=BYTE_COMPACTION;             textSubMode=SUBMODE_ALPHA;           }           p+=b;         }       }     }   }   return sb.toString(); } "
"public boolean containsAttributes(AttributeSet attrs){   boolean result=true;   Enumeration names=attrs.getAttributeNames();   while (result && names.hasMoreElements()) {     Object name=names.nextElement();     result=attrs.getAttribute(name).equals(getAttribute(name));   }   return result; } "
"public static WindowMessage show(String p_message){   String[] message_arr=new String[1];   message_arr[0]=p_message;   return new WindowMessage(message_arr); } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentcreateprocessinginstruction.class,args); } "
"public static ImageTypeSpecifier createGrayscale(int bits,int dataType,boolean isSigned){   return new ImageTypeSpecifier.Grayscale(bits,dataType,isSigned,false,false); } "
"public static void init(Context context){   if (cameraManager == null) {     cameraManager=new CameraManager(context);   } } "
"public void clearAccessibleSelection(){   int childCount=getAccessibleChildrenCount();   for (int i=0; i < childCount; i++) {     removeAccessibleSelection(i);   } } "
"public void createEntityConfig(String realm,EntityConfigElement entityConfig) throws IDFFMetaException {   String classMethod=\"IDFFMetaManager.createEntityConfig:\";   String entityID=null;   if (entityConfig == null) {     LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_CONFIG,null);     throw new IDFFMetaException(\"nullEntityConfig\",null);   }  else {     entityID=entityConfig.getEntityID();     if (entityID == null) {       LogUtil.error(Level.INFO,LogUtil.NULL_ENTITY_ID,null);       debug.error(classMethod + \"entity ID is null\");       throw new IDFFMetaException(\"nullEntityID\",null);     }   }   if ((realm == null) || (realm.length() == 0)) {     realm=ROOT_REALM;   }   String[] args={entityID,realm};   try {     Map attrs=IDFFMetaUtils.convertJAXBToAttrMap(IDFF_ENTITY_CONFIG_ATTR,entityConfig);     Map origAttrs=idffMetaConfigInstance.getConfiguration(realm,entityID);     if (origAttrs == null) {       if (debug.messageEnabled()) {         debug.message(classMethod + \"Entity Descriptor for\" + entityID+ \" does not exist\");       }       LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_NOT_FOUND,args);       throw new IDFFMetaException(\"noEntityDescriptor\",args);     }     Set origValues=(Set)origAttrs.get(IDFF_ENTITY_CONFIG_ATTR);     if (!origValues.isEmpty()) {       if (debug.messageEnabled()) {         debug.message(classMethod + \"Entity Config exists. \" + \"Use setEntityConfig to set the configuration\");       }       LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,args);       throw new IDFFMetaException(\"entityConfigExists\",args);     }     if (debug.messageEnabled()) {       debug.message(classMethod + \"Entity Config Attrs :\" + attrs);     }     idffMetaConfigInstance.setConfiguration(realm,entityID,attrs);     addEntityToCOT(realm,entityID);     LogUtil.access(Level.INFO,LogUtil.CREATE_ENTITY_CONFIG_SUCCEEDED,args);   }  catch (  ConfigurationException ce) {     debug.error(classMethod + \"Cannot create entity config\",ce);     LogUtil.error(Level.INFO,LogUtil.CREATE_ENTITY_CONFIG_FAILED,args);     throw new IDFFMetaException(ce);   } catch (  UnsupportedOperationException uoe) {     debug.error(classMethod + \"Unsupported operation\");     LogUtil.error(Level.INFO,LogUtil.UNSUPPORTED_OPERATION,args);     throw new IDFFMetaException(uoe);   } catch (  JAXBException jaxbe) {     debug.error(classMethod,jaxbe);     LogUtil.error(Level.INFO,LogUtil.INVALID_ENTITY_CONFIG,args);     throw new IDFFMetaException(\"invalidEntityConfig\",args);   } } "
"public com.sun.identity.liberty.ws.meta.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.meta.jaxb.impl.StatusTypeImpl(); } "
"public Object clone(){   try {     return new Role(name,objectNameList);   }  catch (  IllegalArgumentException exc) {     return null;   } } "
"public SystemConfigurationException(String message){   super(message); } "
"public ChangelogException(LocalizableMessage message){   super(message); } "
"public void addSigners(SignerInformationStore signerStore){   Iterator it=signerStore.getSigners().iterator();   while (it.hasNext()) {     _signers.add(it.next());   } } "
"protected Shape adjustAllocation(Shape a){   if (a != null) {     Rectangle bounds=a.getBounds();     int vspan=(int)getPreferredSpan(Y_AXIS);     int hspan=(int)getPreferredSpan(X_AXIS);     if (bounds.height != vspan) {       int slop=bounds.height - vspan;       bounds.y+=slop / 2;       bounds.height-=slop;     }     Component c=getContainer();     if (c instanceof JTextField) {       JTextField field=(JTextField)c;       BoundedRangeModel vis=field.getHorizontalVisibility();       int max=Math.max(hspan,bounds.width);       int value=vis.getValue();       int extent=Math.min(max,bounds.width - 1);       if ((value + extent) > max) {         value=max - extent;       }       vis.setRangeProperties(value,extent,vis.getMinimum(),max,false);       if (hspan < bounds.width) {         int slop=bounds.width - 1 - hspan;         int align=((JTextField)c).getHorizontalAlignment();         if (Utilities.isLeftToRight(c)) {           if (align == LEADING) {             align=LEFT;           }  else           if (align == TRAILING) {             align=RIGHT;           }         }  else {           if (align == LEADING) {             align=RIGHT;           }  else           if (align == TRAILING) {             align=LEFT;           }         } switch (align) { case SwingConstants.CENTER:           bounds.x+=slop / 2;         bounds.width-=slop;       break; case SwingConstants.RIGHT:     bounds.x+=slop;   bounds.width-=slop; break; } }  else { bounds.width=hspan; bounds.x-=vis.getValue(); } } return bounds; } return null; } "
"protected void registerListeners(){   component.addMouseListener(this);   component.addMouseMotionListener(this); } "
"public RegexFileFilter(String pattern){   if (pattern == null) {     throw new IllegalArgumentException(\"Pattern is missing\");   }   this.pattern=Pattern.compile(pattern); } "
"public void testRadix24Neg(){   String value=\"-287628a88gmn3451b8ijk00865c67e8d7ff20\";   int radix=24;   BigInteger aNumber=new BigInteger(value,radix);   String result=aNumber.toString(radix);   assertTrue(result.equals(value)); } "
"public void testSetBitPositiveOutside2(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=223;   byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.setBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"private void iconify(){   Frame frame=getFrame();   if (frame != null) {     frame.setExtendedState(state | Frame.ICONIFIED);   } } "
"public int length(){   return count; } "
"int readCorner4(int numRows,int numColumns){   int currentByte=0;   if (readModule(numRows - 3,0,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(numRows - 2,0,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(numRows - 1,0,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 2,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(0,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(1,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(2,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   currentByte<<=1;   if (readModule(3,numColumns - 1,numRows,numColumns)) {     currentByte|=1;   }   return currentByte; } "
"public void testCompareToEqualPos(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   int aSign=1;   int bSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   assertEquals(0,aNumber.compareTo(bNumber)); } "
"public Map<String,Set<String>> marshalToAttributeMap(){   Map<String,Object> preMap=toJson().asMap();   Map<String,Set<String>> finalMap=MapMarshallUtils.toSmsMap(preMap);   Object attributesObject=preMap.get(ATTRIBUTE_MAP);   if (attributesObject instanceof Map) {     finalMap.remove(ATTRIBUTE_MAP);     Set<String> attributeValues=new LinkedHashSet<>();     finalMap.put(ATTRIBUTE_MAP,attributeValues);     for (    Map.Entry<String,String> entry : ((Map<String,String>)attributesObject).entrySet()) {       attributeValues.add(entry.getKey() + EQUALS + entry.getValue());     }   }  else {     throw new IllegalStateException(\"Type corresponding to \" + ATTRIBUTE_MAP + \" key unexpected. Type: \"+ (attributesObject != null ? attributesObject.getClass().getName() : \" null\"));   }   return finalMap; } "
"public String toHexPlusAsciiString(int indent){   StringBuilder builder=new StringBuilder();   StringBuilder indentBuf=new StringBuilder(indent);   for (int i=0; i < indent; i++) {     indentBuf.append(' ');   }   int pos=0;   while (length - pos >= 16) {     StringBuilder asciiBuf=new StringBuilder(17);     byte currentByte=buffer[offset + pos];     builder.append(indentBuf);     builder.append(byteToHex(currentByte));     asciiBuf.append(byteToASCII(currentByte));     pos++;     for (int i=1; i < 16; i++, pos++) {       currentByte=buffer[offset + pos];       builder.append(' ');       builder.append(byteToHex(currentByte));       asciiBuf.append(byteToASCII(currentByte));       if (i == 7) {         builder.append(\"  \");         asciiBuf.append(' ');       }     }     builder.append(\"  \");     builder.append(asciiBuf);     builder.append(EOL);   }   int remaining=length - pos;   if (remaining > 0) {     StringBuilder asciiBuf=new StringBuilder(remaining + 1);     byte currentByte=buffer[offset + pos];     builder.append(indentBuf);     builder.append(byteToHex(currentByte));     asciiBuf.append(byteToASCII(currentByte));     pos++;     for (int i=1; i < 16; i++, pos++) {       builder.append(' ');       if (i < remaining) {         currentByte=buffer[offset + pos];         builder.append(byteToHex(currentByte));         asciiBuf.append(byteToASCII(currentByte));       }  else {         builder.append(\"  \");       }       if (i == 7) {         builder.append(\"  \");         if (i < remaining) {           asciiBuf.append(' ');         }       }     }     builder.append(\"  \");     builder.append(asciiBuf);     builder.append(EOL);   }   return builder.toString(); } "
"@Override public void flush() throws IOException {   out.flush(); } "
"private void printServletEnvironment(HttpServletRequest req) throws IOException {   log.trace(\"ServletRequest Properties\");   Enumeration<String> attrs=req.getAttributeNames();   while (attrs.hasMoreElements()) {     String attr=attrs.nextElement();     log.trace(\"Request Attribute: \" + attr + \": [ \"+ req.getAttribute(attr)+ \"]\");   }   log.trace(\"Character Encoding: [\" + req.getCharacterEncoding() + \"]\");   log.trace(\"Content Length: [\" + req.getContentLengthLong() + \"]\");   log.trace(\"Content Type: [\" + req.getContentType() + \"]\");   Enumeration<Locale> locales=req.getLocales();   while (locales.hasMoreElements()) {     Locale locale=locales.nextElement();     log.trace(\"Locale: [\" + locale + \"]\");   }   Enumeration<String> params=req.getParameterNames();   while (params.hasMoreElements()) {     String param=params.nextElement();     for (    String value : req.getParameterValues(param)) {       log.trace(\"Request Parameter: \" + param + \":  [\"+ value+ \"]\");     }   }   log.trace(\"Protocol: [\" + req.getProtocol() + \"]\");   log.trace(\"Remote Address: [\" + req.getRemoteAddr() + \"]\");   log.trace(\"Remote Host: [\" + req.getRemoteHost() + \"]\");   log.trace(\"Scheme: [\" + req.getScheme() + \"]\");   log.trace(\"Secure: [\" + req.isSecure() + \"]\");   log.trace(\"Server Name: [\" + req.getServerName() + \"]\");   log.trace(\"Server Port: [\" + req.getServerPort() + \"]\");   log.trace(\"HttpServletRequest Properties\");   log.trace(\"Auth Type: [\" + req.getAuthType() + \"]\");   log.trace(\"Context Path: [\" + req.getContextPath() + \"]\");   Cookie cookies[]=req.getCookies();   if (cookies != null) {     for (    Cookie cookie : cookies) {       log.trace(\"Cookie: \" + cookie.getName() + \": [\"+ cookie.getValue()+ \"]\");     }   }   Enumeration<String> headers=req.getHeaderNames();   while (headers.hasMoreElements()) {     String header=headers.nextElement();     log.trace(\"HTTP Header: \" + header + \": [\"+ req.getHeader(header)+ \"]\");   }   log.trace(\"Method: [\" + req.getMethod() + \"]\");   log.trace(\"Path Info: [\" + req.getPathInfo() + \"]\");   log.trace(\"Path Translated: [\" + req.getPathTranslated() + \"]\");   log.trace(\"Query String: [\" + req.getQueryString() + \"]\");   log.trace(\"Remote User: [\" + req.getRemoteUser() + \"]\");   log.trace(\"Requested Session ID: [\" + req.getRequestedSessionId() + \"]\");   log.trace(\"Requested Session ID From Cookie: [\" + req.isRequestedSessionIdFromCookie() + \"]\");   log.trace(\"Requested Session ID From URL: [\" + req.isRequestedSessionIdFromURL() + \"]\");   log.trace(\"Requested Session ID Valid: [\" + req.isRequestedSessionIdValid() + \"]\");   log.trace(\"Request URI: [\" + req.getRequestURI() + \"]\");   log.trace(\"Servlet Path: [\" + req.getServletPath() + \"]\");   log.trace(\"User Principal: [\" + req.getUserPrincipal() + \"]\");   HttpSession session=req.getSession(false);   if (session != null) {     log.trace(\"HttpSession Properties\");     log.trace(\"ID: [\" + session.getId() + \"]\");     log.trace(\"Creation Time: [\" + new Date(session.getCreationTime()) + \"]\");     log.trace(\"Last Accessed Time: [\" + new Date(session.getLastAccessedTime()) + \"]\");     log.trace(\"Max Inactive Interval: [\" + session.getMaxInactiveInterval() + \"]\");     attrs=session.getAttributeNames();     while (attrs.hasMoreElements()) {       String attr=attrs.nextElement();       log.trace(\"Session Attribute: \" + attr + \": [\"+ session.getAttribute(attr)+ \"]\");     }   }   log.trace(\"ServletConfig Properties\");   log.trace(\"Servlet Name: [\" + getServletConfig().getServletName() + \"]\");   params=getServletConfig().getInitParameterNames();   while (params.hasMoreElements()) {     String param=params.nextElement();     String value=getServletConfig().getInitParameter(param);     log.trace(\"Servlet Init Param: \" + param + \": [\"+ value+ \"]\");   }   log.trace(\"ServletContext Properties\");   log.trace(\"Major Version: [\" + getServletContext().getMajorVersion() + \"]\");   log.trace(\"Minor Version: [\" + getServletContext().getMinorVersion() + \"]\");   log.trace(\"Real Path for '/': [\" + getServletContext().getRealPath(\"/\") + \"]\");   log.trace(\"Server Info: [\" + getServletContext().getServerInfo() + \"]\");   log.trace(\"ServletContext Initialization Parameters\");   params=getServletContext().getInitParameterNames();   while (params.hasMoreElements()) {     String param=params.nextElement();     String value=getServletContext().getInitParameter(param);     log.trace(\"Servlet Context Init Param: \" + param + \": [\"+ value+ \"]\");   }   log.trace(\"ServletContext Attributes\");   attrs=getServletContext().getAttributeNames();   while (attrs.hasMoreElements()) {     String attr=attrs.nextElement();     log.trace(\"Servlet Context Attribute: \" + attr + \": [\"+ getServletContext().getAttribute(attr)+ \"]\");   } } "
"public static BindRule decode(String input) throws AciException {   if (input == null || input.length() == 0) {     return null;   }   String bindruleStr=input.trim();   char firstChar=bindruleStr.charAt(0);   char[] bindruleArray=bindruleStr.toCharArray();   if (firstChar == '(') {     BindRule bindrule_1=null;     int currentPos;     int numOpen=0;     int numClose=0;     for (currentPos=0; currentPos < bindruleArray.length; currentPos++) {       if (bindruleArray[currentPos] == '(') {         numOpen++;       }  else       if (bindruleArray[currentPos] == ')') {         numClose++;       }       if (numClose == numOpen) {         String bindruleStr1=bindruleStr.substring(1,currentPos);         bindrule_1=BindRule.decode(bindruleStr1);         break;       }     }     if (numOpen > numClose) {       throw new AciException(WARN_ACI_SYNTAX_BIND_RULE_MISSING_CLOSE_PAREN.get(input));     }     if (currentPos < bindruleArray.length - 1) {       String remainingBindruleStr=bindruleStr.substring(currentPos + 1);       return createBindRule(bindrule_1,remainingBindruleStr);     }     return bindrule_1;   }  else {     StringBuilder b=new StringBuilder(bindruleStr);     boolean negate=determineNegation(b);     bindruleStr=b.toString();     Pattern bindrulePattern=Pattern.compile(bindruleRegex);     Matcher bindruleMatcher=bindrulePattern.matcher(bindruleStr);     int bindruleEndIndex;     if (bindruleMatcher.find()) {       bindruleEndIndex=bindruleMatcher.end();       BindRule bindrule_1=parseAndCreateBindrule(bindruleMatcher);       bindrule_1.setNegate(negate);       if (bindruleEndIndex < bindruleStr.length()) {         String remainingBindruleStr=bindruleStr.substring(bindruleEndIndex);         return createBindRule(bindrule_1,remainingBindruleStr);       }  else {         return bindrule_1;       }     }  else {       throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_SYNTAX.get(input));     }   } } "
"public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f,boolean asInline){   document.checkIsoConformance(currentGs,IsoKey.GRAPHIC_STATE_ONLY,null);   if (image.getOriginalType() == ImageType.WMF) {     WmfImageHelper wmf=new WmfImageHelper(image);     PdfXObject xObject=wmf.createPdfForm(document);     addXObject(xObject,a,b,c,d,e,f);     return xObject;   }  else {     PdfImageXObject imageXObject=new PdfImageXObject(image);     if (asInline && image.canImageBeInline()) {       addInlineImage(imageXObject,a,b,c,d,e,f);       return null;     }  else {       addImage(imageXObject,a,b,c,d,e,f);       return imageXObject;     }   } } "
"protected ItemListener createItemListener(){   return getHandler(); } "
"public void handleTblDSAttributeMapListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {   try {     Map values=getValues();     onBeforeSaveProfile(values);     setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);     WSPPServiceDSAttributeMapListAddViewBean vb=(WSPPServiceDSAttributeMapListAddViewBean)getViewBean(WSPPServiceDSAttributeMapListAddViewBean.class);     unlockPageTrail();     passPgSessionMap(vb);     vb.forwardTo(getRequestContext());   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     forwardTo();   } } "
"public StateInteractive mouse_dragged(PlaPointFloat p_point){   return this; } "
"private <R extends Response>Promise<R,ResourceException> evaluateOnFailure(final Context context,final Request request,final ResourceException error){   if (onFailure != null) {     ScriptEntry scriptEntry=onFailure.getRight();     if (!scriptEntry.isActive()) {       return new ServiceUnavailableException(\"Failed to execute inactive script: \" + onFailure.getRight().getName()).asPromise();     }     Script script=populateScript(scriptEntry,context,request);     script.put(\"exception\",error.includeCauseInJsonValue().toJsonValue().asMap());     try {       evalScript(script,onFailure.getLeft(),onFailure.getRight().getName());     }  catch (    ResourceException e) {       return e.asPromise();     }   }   return error.asPromise(); } "
"public boolean isSubjectExclusive(String subjectName) throws NameNotFoundException {   if (!users.containsKey(subjectName)) {     String[] objs={subjectName};     throw (new NameNotFoundException(ResBundleUtils.rbName,\"name_not_present\",objs,subjectName,PolicyException.USER_COLLECTION));   }  else {     return ((QualifiedSubject)users.get(subjectName)).isExclusive();   } } "
"public void sendTopoInfoToAll(){   enqueueTopoInfoToAllExcept(null); } "
"IndexQueryFactoryImpl(ReadableTransaction txn,AttributeIndex attributeIndex){   this.txn=txn;   this.attributeIndex=attributeIndex; } "
"public String encode(String value) throws EncoderException {   if (value == null) {     return null;   }   return encode(value,getDefaultCharset()); } "
"@Override public void schemaChanged(String serviceName,String version){ } "
"public void select(int selectionStart,int selectionEnd){   int docLength=getDocument().getLength();   if (selectionStart < 0) {     selectionStart=0;   }   if (selectionStart > docLength) {     selectionStart=docLength;   }   if (selectionEnd > docLength) {     selectionEnd=docLength;   }   if (selectionEnd < selectionStart) {     selectionEnd=selectionStart;   }   setCaretPosition(selectionStart);   moveCaretPosition(selectionEnd); } "
"@Descriptor(\"Display help messages\") public String help(){   return \"mockservice\\t Start new service\"; } "
"public CopyOnWriteArraySet(){   al=new CopyOnWriteArrayList<E>(); } "
"@Override public boolean equals(Object o){   rwlock.readLock().lock();   try {     if (o == this) {       return true;     }     if (!(o instanceof Map)) {       return false;     }     Map t=(Map)o;     if (t.size() != size()) {       return false;     }     for (Iterator i=entrySet().iterator(); i.hasNext(); ) {       Entry e=(Entry)i.next();       Object key=e.getKey();       Object value=e.getValue();       if (value == null) {         if (!(t.get(key) == null && t.containsKey(key))) {           return false;         }       }  else {         if (!value.equals(t.get(key))) {           return false;         }       }     }     return true;   }   finally {     rwlock.readLock().unlock();   } } "
"private byte[] performUpdate(byte[] data,BidiMap map) throws TokenStrategyFailedException {   try {     return blobUtils.fromUTF8(applyReplacement(map,blobUtils.toUTF8(data)));   }  catch (  UnsupportedEncodingException e) {     throw new TokenStrategyFailedException(e);   } } "
"private static LDAPFilter createFilter(JAXBElement<?> xmlElement) throws LDAPException, IOException {   String filterName=xmlElement.getName().getLocalPart(); switch (filterName) { case \"and\":     return createANDFilter((FilterSet)xmlElement.getValue()); case \"or\":   return createORFilter((FilterSet)xmlElement.getValue()); case \"not\": return createNOTFilter((Filter)xmlElement.getValue()); case \"equalityMatch\": return createEqualityFilter((AttributeValueAssertion)xmlElement.getValue()); case \"substrings\": return createSubstringFilter((SubstringFilter)xmlElement.getValue()); case \"greaterOrEqual\": return createGreaterOrEqualFilter((AttributeValueAssertion)xmlElement.getValue()); case \"lessOrEqual\": return createLessOrEqualFilter((AttributeValueAssertion)xmlElement.getValue()); case \"present\": return createPresentFilter((AttributeDescription)xmlElement.getValue()); case \"approxMatch\": return createApproximateFilter((AttributeValueAssertion)xmlElement.getValue()); case \"extensibleMatch\": return createExtensibleFilter((MatchingRuleAssertion)xmlElement.getValue()); default : return null; } } "
"public boolean isRelative(){   return isRel; } "
"public MetadataDescriptor(final ContainerType type,final String propName,final int propType){   this(type,propName,propType,0,0); } "
"private void initializeDsApplIfOpsTable(){   Set connectionHandlers=this.monitor.getConnectionHandlers();   for (Iterator iter=connectionHandlers.iterator(); iter.hasNext(); ) {     ObjectName name=(ObjectName)iter.next();     addRowInDsApplIfOpsTable(name);   } } "
"protected static boolean isUnderRootSuffix(String objDN){   if ((objDN == null) || (objDN.length() == 0)) {     return true;   }   DN rootDN=DN.valueOf(rootSuffix);   DN objectDN=DN.valueOf(objDN);   return rootDN.equals(objectDN) || rootDN.equals(objectDN.parent()); } "
"public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return getService().deleteFoo(foo); } "
"public boolean searchRecurringTasks(SearchOperation searchOperation) throws DirectoryException {   SearchFilter filter=searchOperation.getFilter();   schedulerLock.lock();   try {     for (    RecurringTask rt : recurringTasks.values()) {       DN recurringTaskEntryDN=rt.getRecurringTaskEntryDN();       DNLock lock=readLockEntry(recurringTaskEntryDN);       try {         Entry e=rt.getRecurringTaskEntry().duplicate(true);         if (filter.matchesEntry(e) && !searchOperation.returnEntry(e,null)) {           return false;         }       }   finally {         lock.unlock();       }     }     return true;   }   finally {     schedulerLock.unlock();   } } "
"public void appendHeading(LocalizableMessage value){   header.add(value);   if (header.size() > width) {     width=header.size();     columnWidths.add(value.length());   }  else   if (columnWidths.get(header.size() - 1) < value.length()) {     columnWidths.set(header.size() - 1,value.length());   } } "
"public void testConstrCharIntIntMathContextException2(){   char value[]={'-','1','2','3','8','0',',','4','7','3','8','E','-','4','2','3'};   int offset=3;   int len=120;   int precision=4;   RoundingMode rm=RoundingMode.CEILING;   MathContext mc=new MathContext(precision,rm);   try {     new BigDecimal(value,offset,len,mc);     fail(\"NumberFormatException has not been thrown\");   }  catch (  NumberFormatException e) {   } } "
"public void printAVPairs(Map avPairs,int indentLevel){   Set set=avPairs.keySet();   Iterator itr=set.iterator();   Object objAttribute;   Object objValue;   while (itr.hasNext()) {     objAttribute=itr.next();     objValue=avPairs.get(objAttribute);     printIndent(indentLevel);     writer.println(objAttribute.toString() + \" = \" + objValue.toString());   }   writer.flush(); } "
"public SAML2InvalidNameIDPolicyException(String message){   super(message); } "
"protected void doOptions(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {   Method[] methods=getAllDeclaredMethods(this.getClass());   boolean ALLOW_GET=false;   boolean ALLOW_HEAD=false;   boolean ALLOW_POST=false;   boolean ALLOW_PUT=false;   boolean ALLOW_DELETE=false;   boolean ALLOW_TRACE=true;   boolean ALLOW_OPTIONS=true;   for (int i=0; i < methods.length; i++) {     Method m=methods[i];     if (m.getName().equals(\"doGet\")) {       ALLOW_GET=true;       ALLOW_HEAD=true;     }     if (m.getName().equals(\"doPost\"))     ALLOW_POST=true;     if (m.getName().equals(\"doPut\"))     ALLOW_PUT=true;     if (m.getName().equals(\"doDelete\"))     ALLOW_DELETE=true;   }   String allow=null;   if (ALLOW_GET)   allow=METHOD_GET;   if (ALLOW_HEAD)   if (allow == null)   allow=METHOD_HEAD;  else   allow+=\", \" + METHOD_HEAD;   if (ALLOW_POST)   if (allow == null)   allow=METHOD_POST;  else   allow+=\", \" + METHOD_POST;   if (ALLOW_PUT)   if (allow == null)   allow=METHOD_PUT;  else   allow+=\", \" + METHOD_PUT;   if (ALLOW_DELETE)   if (allow == null)   allow=METHOD_DELETE;  else   allow+=\", \" + METHOD_DELETE;   if (ALLOW_TRACE)   if (allow == null)   allow=METHOD_TRACE;  else   allow+=\", \" + METHOD_TRACE;   if (ALLOW_OPTIONS)   if (allow == null)   allow=METHOD_OPTIONS;  else   allow+=\", \" + METHOD_OPTIONS;   resp.setHeader(\"Allow\",allow); } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.AutomaticPseudonymsElement createAutomaticPseudonymsElement(boolean value) throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AutomaticPseudonymsElementImpl(value); } "
"public TagField createField(Artwork artwork) throws FieldDataInvalidException {   if (artwork.isLinked()) {     return new MetadataBlockDataPicture(Utils.getDefaultBytes(artwork.getImageUrl(),TextEncoding.CHARSET_ISO_8859_1),artwork.getPictureType(),MetadataBlockDataPicture.IMAGE_IS_URL,\"\",0,0,0,0);   }  else {     if (!artwork.setImageFromData()) {       throw new FieldDataInvalidException(\"Unable to createField buffered image from the image\");     }     return new MetadataBlockDataPicture(artwork.getBinaryData(),artwork.getPictureType(),artwork.getMimeType(),artwork.getDescription(),artwork.getWidth(),artwork.getHeight(),0,0);   } } "
"public Location toLocation(World world){   return new Location(world,x,y,z); } "
"public DateTimeFormatter withDecimalStyle(DecimalStyle decimalStyle){   if (this.decimalStyle.equals(decimalStyle)) {     return this;   }   return new DateTimeFormatter(printerParser,locale,decimalStyle,resolverStyle,resolverFields,chrono,zone); } "
"private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){   log.debug(\"Initializing Metrics registries\");   servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);   servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);   log.debug(\"Registering Metrics Filter\");   FilterRegistration.Dynamic metricsFilter=servletContext.addFilter(\"webappMetricsFilter\",new InstrumentedFilter());   metricsFilter.addMappingForUrlPatterns(disps,true,\"/*\");   metricsFilter.setAsyncSupported(true);   log.debug(\"Registering Metrics Servlet\");   ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet(\"metricsServlet\",new MetricsServlet());   metricsAdminServlet.addMapping(\"/management/jhipster/metrics/*\");   metricsAdminServlet.setAsyncSupported(true);   metricsAdminServlet.setLoadOnStartup(2); } "
"public JColorChooser(){   this(Color.white); } "
"public void callEvent(Event event){   if (event.isAsynchronous()) {     if (Thread.holdsLock(this)) {       throw new IllegalStateException(event.getEventName() + \" cannot be triggered asynchronously from inside synchronized code.\");     }     if (server.isPrimaryThread()) {       throw new IllegalStateException(event.getEventName() + \" cannot be triggered asynchronously from primary server thread.\");     }     fireEvent(event);   }  else { synchronized (this) {       fireEvent(event);     }   } } "
"public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){   return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator); } "
"@Override public void createDaysStreamingQuoteTable(String date){   if (conn != null) {     Statement stmt;     try {       stmt=conn.createStatement();       quoteTable=ZStreamingConfig.getStreamingQuoteTbNameAppendFormat(date);       String sql=\"CREATE TABLE \" + quoteTable + \" \"+ \"(Time time NOT NULL, \"+ \" InstrumentToken varchar(32) NOT NULL, \"+ \" LastTradedPrice DECIMAL(20,4) NOT NULL, \"+ \" LastTradedQty BIGINT NOT NULL, \"+ \" AvgTradedPrice DECIMAL(20,4) NOT NULL, \"+ \" Volume BIGINT NOT NULL, \"+ \" BuyQty BIGINT NOT NULL, \"+ \" SellQty BIGINT NOT NULL, \"+ \" OpenPrice DECIMAL(20,4) NOT NULL, \"+ \" HighPrice DECIMAL(20,4) NOT NULL, \"+ \" LowPrice DECIMAL(20,4) NOT NULL, \"+ \" ClosePrice DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid1Qty BIGINT NOT NULL, \"+ \" MarketDepthBid1Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid1Orders INTEGER NOT NULL, \"+ \" MarketDepthBid2Qty BIGINT NOT NULL, \"+ \" MarketDepthBid2Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid2Orders INTEGER NOT NULL, \"+ \" MarketDepthBid3Qty BIGINT NOT NULL, \"+ \" MarketDepthBid3Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid3Orders INTEGER NOT NULL, \"+ \" MarketDepthBid4Qty BIGINT NOT NULL, \"+ \" MarketDepthBid4Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid4Orders INTEGER NOT NULL, \"+ \" MarketDepthBid5Qty BIGINT NOT NULL, \"+ \" MarketDepthBid5Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthBid5Orders INTEGER NOT NULL, \"+ \" MarketDepthOffer1Qty BIGINT NOT NULL, \"+ \" MarketDepthOffer1Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthOffer1Orders INTEGER NOT NULL, \"+ \" MarketDepthOffer2Qty BIGINT NOT NULL, \"+ \" MarketDepthOffer2Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthOffer2Orders INTEGER NOT NULL, \"+ \" MarketDepthOffer3Qty BIGINT NOT NULL, \"+ \" MarketDepthOffer3Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthOffer3Orders INTEGER NOT NULL, \"+ \" MarketDepthOffer4Qty BIGINT NOT NULL, \"+ \" MarketDepthOffer4Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthOffer4Orders INTEGER NOT NULL, \"+ \" MarketDepthOffer5Qty BIGINT NOT NULL, \"+ \" MarketDepthOffer5Price DECIMAL(20,4) NOT NULL, \"+ \" MarketDepthOffer5Orders INTEGER NOT NULL, \"+ \" PRIMARY KEY (InstrumentToken, Time)) \"+ \" ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\";       stmt.executeUpdate(sql);       System.out.println(\"StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): SQL table for Streaming quote created, table name: [\" + quoteTable + \"]\");     }  catch (    SQLException e) {       System.out.println(\"StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): ERROR: SQLException on creating Table, cause: \" + e.getMessage());     }   }  else {     System.out.println(\"StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): ERROR: DB conn is null !!!\");   } } "
"public static AttributeSet synchronizedView(AttributeSet attributeSet){   if (attributeSet == null) {     throw new NullPointerException();   }   return new SynchronizedAttributeSet(attributeSet); } "
"public static boolean isHasSdcard(){   String status=Environment.getExternalStorageState();   if (status.equals(Environment.MEDIA_MOUNTED)) {     return true;   }  else {     return false;   } } "
"public void removeQValue(){   super.removeParameter(ParameterNames.Q); } "
"private int convertLocationToColumn(int x,int y){   if (cellWidth > 0) {     if (layoutOrientation == JList.VERTICAL) {       return 0;     }     Insets insets=list.getInsets();     int col;     if (isLeftToRight) {       col=(x - insets.left) / cellWidth;     }  else {       col=(list.getWidth() - x - insets.right- 1) / cellWidth;     }     if (col < 0) {       return 0;     }  else     if (col >= columnCount) {       return columnCount - 1;     }     return col;   }   return 0; } "
"public void parseForClass(GenericDeclaration genericDecl,String signature){   setInput(genericDecl,signature);   if (!eof) {     parseClassSignature();   }  else {     if (genericDecl instanceof Class) {       Class c=(Class)genericDecl;       this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;       this.superclassType=c.getSuperclass();       Class<?>[] interfaces=c.getInterfaces();       if (interfaces.length == 0) {         this.interfaceTypes=ListOfTypes.EMPTY;       }  else {         this.interfaceTypes=new ListOfTypes(interfaces);       }     }  else {       this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;       this.superclassType=Object.class;       this.interfaceTypes=ListOfTypes.EMPTY;     }   } } "
"public boolean contains(JComponent a,int b,int c){   boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);   for (int i=1; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);   }   return returnValue; } "
"protected boolean isWFXMLChar(String chardata,Character refInvalidChar){   if (chardata == null || (chardata.length() == 0)) {     return true;   }   char[] dataarray=chardata.toCharArray();   int datalength=dataarray.length;   if (fIsXMLVersion11) {     int i=0;     while (i < datalength) {       if (XML11Char.isXML11Invalid(dataarray[i++])) {         char ch=dataarray[i - 1];         if (XMLChar.isHighSurrogate(ch) && i < datalength) {           char ch2=dataarray[i++];           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {             continue;           }         }         refInvalidChar=new Character(ch);         return false;       }     }   }  else {     int i=0;     while (i < datalength) {       if (XMLChar.isInvalid(dataarray[i++])) {         char ch=dataarray[i - 1];         if (XMLChar.isHighSurrogate(ch) && i < datalength) {           char ch2=dataarray[i++];           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {             continue;           }         }         refInvalidChar=new Character(ch);         return false;       }     }   }   return true; } "
"public void testCase2(){   byte aBytes[]={1,2,3,4,5,6,7,1,2,3};   byte bBytes[]={10,20,30,40,50,60,70,10,20,30};   int aSign=1;   int bSign=1;   byte rBytes[]={-10,-19,-28,-37,-46,-55,-64,-10,-19,-27};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.subtract(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(-1,result.signum()); } "
"public String toXMLString() throws SAML2Exception {   return xmlString; } "
"public Door(final TreeSpecies species,boolean isHingeRight){   this(getWoodDoorOfSpecies(species),isHingeRight); } "
"public final boolean isEnabled(AvroParser.Feature f){   return (_avroParserFeatures & f.getMask()) != 0; } "
"public DATA_CONVERSION(int minor,CompletionStatus completed){   this(\"\",minor,completed); } "
"private void upgradePrivilege(PrivilegeManager privilegeManager,Privilege privilege,String resourceTypeUUID) throws UpgradeException {   try {     UpgradeProgress.reportStart(AUDIT_MODIFIED_POLICY_UUID_START,privilege.getName());     if (privilege != null) {       privilege.setResourceTypeUuid(resourceTypeUUID);       privilegeManager.modify(privilege);     }     UpgradeProgress.reportEnd(AUDIT_UPGRADE_SUCCESS);   }  catch (  EntitlementException ee) {     UpgradeProgress.reportEnd(AUDIT_UPGRADE_FAIL);     throw new UpgradeException(\"Failed to add resource type uuid to privilege \" + privilege.getName(),ee);   } } "
"public void test_setStartRuleIIII(){   SimpleTimeZone st=new SimpleTimeZone(1000,\"Test_TZ\");   st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,0);   st.setEndRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,0);   assertTrue(\"StartRule improperly set1\",st.useDaylightTime());   assertTrue(\"StartRule improperly set2\",st.inDaylightTime((new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime())));   assertTrue(\"StartRule improperly set3\",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));   try {     st.setStartRule(12,-1,Calendar.SUNDAY,0);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setStartRule(Calendar.NOVEMBER,10,Calendar.SUNDAY,0);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setStartRule(Calendar.NOVEMBER,-1,8,0);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   }   try {     st.setStartRule(Calendar.NOVEMBER,-1,Calendar.SUNDAY,-10);     fail(\"IllegalArgumentException is not thrown.\");   }  catch (  IllegalArgumentException iae) {   } } "
"public boolean equals(Object o){   if (o instanceof ISSecurityPermission) {     ISSecurityPermission p=(ISSecurityPermission)o;     if (p.hashCode() == hashCode) {       return true;     }   }   return false; } "
"public void test_getTrustManagers(){   try {     TrustManagerFactory trustMF=TrustManagerFactory.getInstance(getDefaultAlgorithm());     KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());     ks.load(null,null);     trustMF.init(ks);     TrustManager[] tm=trustMF.getTrustManagers();     assertNotNull(\"Result has not be null\",tm);     assertTrue(\"Length of result TrustManager array should not be 0\",(tm.length > 0));   }  catch (  Exception ex) {     fail(\"Unexpected exception \" + ex.toString());   } } "
"public boolean release(DTM dtm,boolean shouldHardDelete){   if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {     return false;   }   return m_dtmManager.release(dtm,shouldHardDelete); } "
"public ByteHolder(){ } "
"public com.sun.identity.liberty.ws.idpp.jaxb.LPostalAddressElement createLPostalAddressElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LPostalAddressElementImpl(); } "
"public void beginDisplay(DisplayEvent event) throws ModelControlException {   IdentitySubjectModel subjectModel=getSubjectModel();   PolicyModel model=(PolicyModel)getModel();   super.beginDisplay(event);   CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);   Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);   OptionList entityTypes=createOptionList(supportedEntityTypes);   entityTypes.add(0,\"policy.subject.select.identity.type\",\"\");   menu.setOptions(entityTypes);   menu.setValue(\"\");   CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);   child.restoreStateData();   OptionList selected=addRemoveModel.getSelectedOptionList();   OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));   child.resetStateData();   addRemoveModel.setAvailableOptionList(possible); } "
"public boolean isLogEnabled(){   return logStatus; } "
"public com.sun.identity.liberty.ws.interaction.jaxb.RedirectRequestType createRedirectRequestType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.interaction.jaxb.impl.RedirectRequestTypeImpl(); } "
"@Override public boolean isNew(){   if (!isValidInternal())   throw new IllegalStateException(sm.getString(\"standardSession.isNew.ise\"));   return (this.isNew); } "
"public synchronized void reload() throws ConfigException {   ensureInitialized();   loader=null;   jarFiles=new HashSet<>();   initialize0(); } "
"public void registerTo(RootCfg rootConfiguration) throws ConfigException {   auhtzFilterManager.registerTo(rootConfiguration);   rootConfiguration.addHTTPEndpointAddListener(this);   rootConfiguration.addHTTPEndpointDeleteListener(this);   for (  String endpointName : rootConfiguration.listHTTPEndpoints()) {     final HTTPEndpointCfg configuration=rootConfiguration.getHTTPEndpoint(endpointName);     configuration.addChangeListener(this);     if (configuration.isEnabled()) {       final ConfigChangeResult result=applyConfigurationAdd(configuration);       if (!result.getResultCode().equals(ResultCode.SUCCESS)) {         LOGGER.error(result.getMessages().get(0));       }     }   } } "
"public static SearchResultEntry newSearchResultEntry(final String... ldifLines){   return newSearchResultEntry(new LinkedHashMapEntry(ldifLines)); } "
"private TemplateEntry buildTemplateEntry(){   templateFile.nextFirstAndLastNames();   final TemplateEntry templateEntry=new TemplateEntry(this,parentDN);   for (  final TemplateLine line : templateLines) {     line.generateLine(templateEntry);   }   for (int i=0; i < subTemplates.size(); i++) {     subTemplates.get(i).reset(templateEntry.getDN(),numEntriesPerTemplate.get(i));   }   return templateEntry; } "
"public SSOTokenIDImpl(com.iplanet.dpro.session.SessionID sid){   SSOSessionID=sid;   hashCode=SSOSessionID.hashCode(); } "
"public void clear(){ synchronized (names) {     names.clear();   } } "
"public ManagedObjectSet(final ScriptRegistry scriptRegistry,final CryptoService cryptoService,final AtomicReference<RouteService> syncRoute,IDMConnectionFactory connectionFactory,JsonValue config) throws JsonValueException, ScriptException {   this(scriptRegistry,cryptoService,syncRoute,connectionFactory,config,new RouterActivityLogger(connectionFactory)); } "
"public boolean isSslEncryption(){   return sslEncryption; } "
"public Object newInstance(Class javaContentInterface) throws JAXBException {   if (javaContentInterface == null) {     throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));   }   try {     Class c=gi.getDefaultImplementation(javaContentInterface);     if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));     return c.newInstance();   }  catch (  Exception e) {     throw new JAXBException(e);   } } "
"public static String defaultPolicyAdminRoleCreateDuringOrgConfig(){   initialize();   return (defaultPOLICY_ADMIN); } "
"public boolean containsAttribute(Object name,Object value){   return value.equals(getAttribute(name)); } "
"@Override public int hashCode(){   int hash=LangUtils.HASH_SEED;   hash=LangUtils.hashCode(hash,this.defaultPort);   hash=LangUtils.hashCode(hash,this.name);   hash=LangUtils.hashCode(hash,this.layered);   hash=LangUtils.hashCode(hash,this.socketFactory);   return hash; } "
"public StringBuilder encodeBody(StringBuilder encoding){   return encoding.append(token); } "
"public LastCookieVirtualProvider(ReplicationServer replicationServer){   this.replicationServer=replicationServer; } "
"boolean isSynchProviderCreated(){   return synchProviderCreated; } "
"public Period minusYears(long yearsToSubtract){   return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract)); } "
"@Override public Object clone(){   Rule answer=null;   try {     answer=(Rule)super.clone();   }  catch (  CloneNotSupportedException se) {     answer=new Rule();   }   answer.ruleName=ruleName;   answer.serviceTypeName=serviceTypeName;   answer.applicationName=applicationName;   answer.serviceType=serviceType;   answer.resourceNames=new HashSet();   if (resourceNames != null) {     answer.resourceNames.addAll(resourceNames);   }   answer.actions=new HashMap();   Iterator items=actions.keySet().iterator();   while (items.hasNext()) {     Object o=items.next();     Set set=(Set)actions.get(o);     HashSet aSet=new HashSet();     aSet.addAll(set);     answer.actions.put(o,aSet);   }   return (answer); } "
"protected void initializeStartingState(){   for (int i=0; i < mElements.size(); i++) {     PaperOnboardingPage PaperOnboardingPage=mElements.get(i);     ViewGroup bottomBarIconElement=createPagerIconElement(PaperOnboardingPage.getBottomBarIconRes(),i == 0);     mPagerIconsContainer.addView(bottomBarIconElement);   }   PaperOnboardingPage activeElement=getActiveElement();   ViewGroup initialContentText=createContentTextView(activeElement);   mContentTextContainer.addView(initialContentText);   ImageView initContentIcon=createContentIconView(activeElement);   mContentIconContainer.addView(initContentIcon);   mRootLayout.setBackgroundColor(activeElement.getBgColor()); } "
"protected StringBuffer applyRules(final Calendar calendar,final StringBuffer buf){   return printer.applyRules(calendar,buf); } "
"public void testToString(){   SecretKey sk=new tmpSecretKey();   KeyStore.SecretKeyEntry ske=new KeyStore.SecretKeyEntry(sk);   assertNotNull(\"toString() returns null string\",ske.toString()); } "
"public void testCase15(){   byte aBytes[]={1,2,3,4,5,6,7};   byte bBytes[]={1,2,3,4,5,6,7};   byte rBytes[]={0};   int aSign=-1;   int bSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.add(bNumber);   byte resBytes[]=new byte[rBytes.length];   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",0,result.signum()); } "
"public int hashCode(){   return selectedRoleDNs.hashCode(); } "
"public static void deregisterTrustManagerProvider(DN providerDN){   directoryServer.trustManagerProviders.remove(providerDN); } "
"@Override public boolean equals(Object other){   if (other == this) {     return true;   }   if (other instanceof ZoneOffsetTransition) {     ZoneOffsetTransition d=(ZoneOffsetTransition)other;     return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);   }   return false; } "
"PasswordModifyExtendedRequestImpl(){ } "
"public static void fill(char[] a,char val){   for (int i=0, len=a.length; i < len; i++)   a[i]=val; } "
"static MethodType makeImpl(Class<?> rtype,Class<?>[] ptypes,boolean trusted){   MethodType mt=internTable.get(new MethodType(ptypes,rtype));   if (mt != null)   return mt;   if (ptypes.length == 0) {     ptypes=NO_PTYPES;     trusted=true;   }   mt=new MethodType(rtype,ptypes,trusted);   mt.form=MethodTypeForm.findForm(mt);   return internTable.add(mt); } "
"@Override public int lengthOfYear(){   return (isLeapYear() ? 366 : 365); } "
"protected void onConnected(){ } "
"public boolean pop_snapshot(){   return undo_items.pop_snapshot(); } "
"Set findRemovableAciList(Set aciList) throws AMException, SSOException {   Set resultSet=new HashSet();   if (aciList == null) {     return resultSet;   }   Iterator iter=aciList.iterator();   while (iter.hasNext()) {     String aci=(String)iter.next();     Set objs=dsServices.search(token,AMStoreConnection.getAMSdkBaseDN(),\"(&\" + AMSearchFilterManager.getGlobalSearchFilter(AMObject.GROUP) + \"(iplanet-am-role-aci-list=\"+ aci+ \"))\",AMConstants.SCOPE_SUB);     if (objs.size() < 2) {       resultSet.add(aci);     }   }   return resultSet; } "
"public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_float\",_opsClass);   DynEnumOperations $self=(DynEnumOperations)$so.servant;   try {     $self.insert_float(value);   }   finally {     _servant_postinvoke($so);   } } "
"@Override public String toString(){   if (className != null) {     return className + \".\" + super.toString();   }  else {     return super.toString();   } } "
"public String toString(){   if (assertionE != null) {     return XMLUtils.print(SAMLUtils.getCanonicalElement(assertionE));   }   StringBuffer buffer=new StringBuffer();   String assertionString=assertion.toString(true,true);   if (removeCarriageReturns) {     assertionString=assertionString.replaceAll(\"\\r\\n\",\"\\n\");   }   buffer.append(\"<wst:RequestedSecurityToken>\").append(assertionString).append(\"</wst:RequestedSecurityToken>\");   return buffer.toString(); } "
"@Override public String toStringImpl(){   return \"*******\"; } "
"Object findNextMatch(String substring){   int max=list.size();   if (max == 0) {     return null;   }   int counter=index;   do {     Object value=list.get(counter);     String string=value.toString();     if (string != null && string.startsWith(substring)) {       return value;     }     counter=(counter + 1) % max;   }  while (counter != index);   return null; } "
"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {   s.writeInt(size());   Enumeration<String> comps=getAll();   while (comps.hasMoreElements()) {     s.writeObject(comps.nextElement());   } } "
"public static void writeSwappedShort(byte[] data,int offset,short value){   data[offset + 0]=(byte)((value >> 0) & 0xff);   data[offset + 1]=(byte)((value >> 8) & 0xff); } "
"public PdfCanvas beginMarkedContent(PdfName tag){   return beginMarkedContent(tag,null); } "
"public PagedResultsControl(boolean isCritical,int size,ByteString cookie){   super(OID_PAGED_RESULTS_CONTROL,isCritical);   this.size=size;   if (cookie == null) {     this.cookie=ByteString.empty();   }  else {     this.cookie=cookie;   } } "
"private static Set<AttributeType> createFractionalConcernedAttrList(FractionalConfig fractionalConfig,Set<ObjectClass> entryObjectClasses){   Set<String> fractionalConcernedAttributes=new HashSet<>();   Set<String> fractionalAllClassesAttributes=fractionalConfig.getFractionalAllClassesAttributes();   Map<String,Set<String>> fractionalSpecificClassesAttributes=fractionalConfig.getFractionalSpecificClassesAttributes();   Set<String> fractionalClasses=fractionalSpecificClassesAttributes.keySet();   for (  ObjectClass entryObjectClass : entryObjectClasses) {     for (    String fractionalClass : fractionalClasses) {       if (entryObjectClass.hasNameOrOID(fractionalClass.toLowerCase())) {         fractionalConcernedAttributes.addAll(fractionalSpecificClassesAttributes.get(fractionalClass));       }     }   }   fractionalConcernedAttributes.addAll(fractionalAllClassesAttributes);   Set<AttributeType> results=new HashSet<>();   for (  String attrName : fractionalConcernedAttributes) {     results.add(DirectoryServer.getSchema().getAttributeType(attrName));   }   return results; } "
"@DataProvider public Object[][] relativeTimeValues(){   return new Object[][]{{\"1s\",true},{\"1s0d\",false},{\"-1d\",true},{\"2h\",true},{\"+2w\",true},{\"0\",true},{\"0s\",true},{\"0d\",true},{\"xyz\",false},{\"12w-2d\",false},{\"1s2s\",false},{\"1d4s5d\",false}}; } "
"public MockConstraint(boolean allowAdds,boolean allowModifies,boolean allowDeletes){   this.allowAdds=allowAdds;   this.allowModifies=allowModifies;   this.allowDeletes=allowDeletes; } "
"private static void toUNIXMode(StringBuilder buffer,FilePermission p){   byte modeByte=0x00;   if (p.isOwnerReadable()) {     modeByte|=0x04;   }   if (p.isOwnerWritable()) {     modeByte|=0x02;   }   if (p.isOwnerExecutable()) {     modeByte|=0x01;   }   buffer.append(modeByte);   modeByte=0x00;   if (p.isGroupReadable()) {     modeByte|=0x04;   }   if (p.isGroupWritable()) {     modeByte|=0x02;   }   if (p.isGroupExecutable()) {     modeByte|=0x01;   }   buffer.append(modeByte);   modeByte=0x00;   if (p.isOtherReadable()) {     modeByte|=0x04;   }   if (p.isOtherWritable()) {     modeByte|=0x02;   }   if (p.isOtherExecutable()) {     modeByte|=0x01;   }   buffer.append(modeByte); } "
"public static BigInteger CRT(List<BigInteger> congs,List<BigInteger> moduli){   BigInteger[] cs=ArrayConverter.convertListToArray(congs);   BigInteger[] ms=ArrayConverter.convertListToArray(moduli);   return CRT(cs,ms); } "
"boolean inSameSubroutine(final Label block){   if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {     return false;   }   for (int i=0; i < srcAndRefPositions.length; ++i) {     if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {       return true;     }   }   return false; } "
"public static void createService(String xml,NewServiceWrapper newServiceModifications,SSOToken adminToken) throws UpgradeException {   createService(xml,adminToken);   for (  Map.Entry<String,ServiceSchemaModificationWrapper> schemaMods : newServiceModifications.getModifiedSchemaMap().entrySet()) {     final ServiceSchemaModificationWrapper ssmWrapper=schemaMods.getValue();     if (ssmWrapper != null && ssmWrapper.hasBeenModified()) {       modifyAttributesInExistingSchema(newServiceModifications.getServiceName(),schemaMods.getKey(),ssmWrapper,getServiceSchema(ssmWrapper.getServiceName(),null,schemaMods.getKey(),adminToken),adminToken);     }   } } "
"public void detach(){   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_DETACH_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null)); } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testNode;   NamedNodeMap attributes;   Attr domesticAttr;   Node s;   doc=(Document)load(\"hc_staff\",false);   addressList=doc.getElementsByTagName(\"acronym\");   testNode=addressList.item(0);   attributes=testNode.getAttributes();   domesticAttr=(Attr)attributes.getNamedItem(\"title\");   s=domesticAttr.getNextSibling();   assertNull(\"attrNextSiblingNullAssert\",s); } "
"private Policy(String policyName,int priority) throws InvalidNameException {   validateName(policyName);   this.policyName=policyName;   this.priority=priority; } "
"public ConsonantVowelNameGenerator(final ConsonantVowelNameGeneratorBuilder builder){   final int totalConsonants=builder.getConsonants().size();   final int totalVowels=builder.getVowels().size();   consonants=builder.getConsonants().toArray(new String[totalConsonants]);   vowels=builder.getVowels().toArray(new String[totalVowels]); } "
"public ByteStringBuilder trimToSize(){   if (buffer.length > length) {     final byte[] newBuffer=new byte[length];     System.arraycopy(buffer,0,newBuffer,0,length);     buffer=newBuffer;   }   return this; } "
"static ByteString dnToDNKey(DN dn,int prefixRDNs){   return dn.localName(dn.size() - prefixRDNs).toNormalizedByteString(); } "
"public boolean isEnabledAt(int index){   return pages.get(index).isEnabled(); } "
"public void actionPerformed(ActionEvent e){   JTextComponent target=getTextComponent(e);   if (target != null) {     target.cut();   } } "
"@Override public Position deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {   JsonArray rawCoordinates=json.getAsJsonArray();   double longitude=rawCoordinates.get(0).getAsDouble();   double latitude=rawCoordinates.get(1).getAsDouble();   if (rawCoordinates.size() > 2) {     double altitude=rawCoordinates.get(2).getAsDouble();     return Position.fromCoordinates(longitude,latitude,altitude);   }   return Position.fromCoordinates(longitude,latitude); } "
"public void addFile(String filename){ synchronized (files) {     if (!files.contains(filename)) {       files.add(filename);     }   } } "
"public SecurityTokenManager(java.lang.Object credential) throws SecurityTokenException {   if (providerClass == null || providerClass.trim().length() == 0) {     debug.error(\"Con: Security Token Provider class is not defined\");     throw new SecurityTokenException(bundle.getString(\"noProvider\"));   }   try {     provider=(SecurityTokenProvider)Class.forName(providerClass).newInstance();   }  catch (  Exception e) {     debug.message(\"Con: Unable to get instance of Token Provider\",e);     throw new SecurityTokenException(bundle.getString(\"noProviderInstance\"));   }   XMLSignatureManager manager=null;   try {     manager=XMLSignatureManager.getInstance();   }  catch (  Exception e) {     debug.message(\"Con: Unable to get instance of XMLSigManager\",e);   }   provider.initialize(credential,manager); } "
"public HttpRequestExecutor(){   super(); } "
"public boolean remove(NetClass p_net_class){   return class_list.remove(p_net_class); } "
"public static void checkState(boolean expression){   if (!expression) {     throw new IllegalStateException();   } } "
"public UCSReader(InputStream inputStream,int size,short encoding){   fInputStream=inputStream;   fBuffer=new byte[size];   fEncoding=encoding; } "
"public void popSAXLocator(){   m_saxLocations.pop(); } "
"private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){   return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes); } "
"public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {   if (currentStream == null) {     currentStream=in;     sData=null;     sDataObjectCount=0;   }  else   if (currentStream != in) {     currentStream=in;     sData=null;     sDataObjectCount=0;   }   try {     if (sData != null) {       if (sDataObjectCount != sData.size()) {         return getCertificate();       }  else {         sData=null;         sDataObjectCount=0;         return null;       }     }     PushbackInputStream pis=new PushbackInputStream(in);     int tag=pis.read();     if (tag == -1) {       return null;     }     pis.unread(tag);     if (tag != 0x30) {       return readPEMCertificate(pis);     }  else {       return readDERCertificate(new ASN1InputStream(pis));     }   }  catch (  Exception e) {     throw new ExCertificateException(e);   } } "
"PreparedStatement resolveQuery(QueryInfo info,Connection con,Map<String,Object> params) throws SQLException, ResourceException {   String queryStr=info.getQueryString();   List<String> tokenNames=info.getTokenNames();   Map<String,Integer> listReplacements=new HashMap<String,Integer>();   for (  String tokenName : tokenNames) {     String[] tokenParts=tokenName.split(\":\",2);     if (PREFIX_LIST.equals(tokenParts[0]) && params.containsKey(tokenParts[1])) {       listReplacements.put(tokenName,((String)params.get(tokenParts[1])).split(\",\").length);     }   }   if (listReplacements.size() > 0) {     TokenHandler tokenHandler=new TokenHandler();     queryStr=tokenHandler.replaceListTokens(queryStr,listReplacements,\"?\");   }   PreparedStatement statement=getPreparedStatement(con,queryStr);   int count=1;   for (  String tokenName : tokenNames) {     String[] tokenParts=tokenName.split(\":\",2);     if (tokenParts.length == 1) {       Object objValue=params.get(tokenName);       String value=null;       if (objValue != null) {         value=trimValue(objValue);       }  else {         throw new BadRequestException(\"Missing entry in params passed to query for token \" + tokenName);       }       statement.setString(count,value);       count++;     }  else {       Object objValue=params.get(tokenParts[1]);       if (objValue == null) {         throw new BadRequestException(\"Missing entry in params passed to query for token \" + tokenName);       }       if (PREFIX_INT.equals(tokenParts[0])) {         Integer int_value=null;         if (objValue != null) {           int_value=Integer.parseInt(objValue.toString());         }         statement.setInt(count,int_value);         count++;       }  else       if (PREFIX_LIST.equals(tokenParts[0])) {         if (objValue != null) {           for (          String list_value : objValue.toString().split(\",\")) {             if (list_value != null && list_value.startsWith(\"'\") && list_value.endsWith(\"'\")) {               list_value=list_value.substring(1,list_value.length() - 1);             }             statement.setString(count,trimValue(list_value));             count++;           }         }  else {           statement.setString(count,null);           count++;         }       }     }   }   logger.debug(\"Prepared statement: {}\",statement);   return statement; } "
"private void push(final ClassWriter cw,final String desc){   int type=type(cw,desc);   if (type != 0) {     push(type);     if (type == LONG || type == DOUBLE) {       push(TOP);     }   } } "
"public void add(final NioChannel socket,final int interestOps){   PollerEvent r=eventCache.pop();   if (r == null)   r=new PollerEvent(socket,null,interestOps);  else   r.reset(socket,null,interestOps);   addEvent(r);   if (close) {     NioEndpoint.NioSocketWrapper ka=(NioEndpoint.NioSocketWrapper)socket.getAttachment();     processSocket(ka,SocketEvent.STOP,false);   } } "
"@Override public Promise<QueryResponse,ResourceException> handleQuery(final Context context,final QueryRequest request,final QueryResourceHandler handler){   final int requestPageSize=request.getPageSize();   final String pagedResultsCookie=request.getPagedResultsCookie();   final boolean pagedResultsRequested=requestPageSize > 0;   final int firstResultIndex;   if (pagedResultsRequested) {     if (StringUtils.isNotEmpty(pagedResultsCookie)) {       try {         firstResultIndex=Integer.parseInt(pagedResultsCookie);       }  catch (      final NumberFormatException e) {         return new BadRequestException(\"Invalid paged results cookie\").asPromise();       }     }  else {       firstResultIndex=Math.max(0,request.getPagedResultsOffset());     }   }  else {     firstResultIndex=0;   }   request.setPagedResultsOffset(firstResultIndex);   try {     List<ResourceResponse> results=query(request);     for (    ResourceResponse result : results) {       handler.handleResource(result);     }     final String nextCookie;     final int resultCount;     if (pagedResultsRequested) { switch (request.getTotalPagedResultsPolicy()) { case ESTIMATE: case EXACT:         final String countQueryId=request.getQueryId() + \"-count\";       if (queries.queryIdExists(countQueryId)) {         QueryRequest countRequest=Requests.copyOfQueryRequest(request);         countRequest.setQueryId(countQueryId);         countRequest.setPageSize(0);         countRequest.setPagedResultsOffset(0);         countRequest.setPagedResultsCookie(null);         List<ResourceResponse> countResult=query(countRequest);         if (countResult != null && !countResult.isEmpty()) {           resultCount=countResult.get(0).getContent().get(\"total\").asInteger();         }  else {           logger.debug(\"Count query {} failed.\",countQueryId);           resultCount=NO_COUNT;         }       }  else {         logger.debug(\"No count query found with id {}\",countQueryId);         resultCount=NO_COUNT;       }     break; case NONE: default :   resultCount=NO_COUNT; break; } if (results.size() < requestPageSize) { nextCookie=null; }  else { final int remainingResults=resultCount - (firstResultIndex + results.size()); if (remainingResults == 0) { nextCookie=null; }  else { nextCookie=String.valueOf(firstResultIndex + requestPageSize); } } }  else { resultCount=NO_COUNT; nextCookie=null; } if (resultCount == NO_COUNT) { return newQueryResponse(nextCookie).asPromise(); }  else { return newQueryResponse(nextCookie,EXACT,resultCount).asPromise(); } }  catch (ResourceException e) { return e.asPromise(); } } "
"public void replaceReferral(String name,Referral referral) throws NameNotFoundException {   referrals.replaceReferral(name,referral); } "
"public void createStructure(){   MP3File.getStructureFormatter().openHeadingElement(TYPE_TAG,getIdentifier());   MP3File.getStructureFormatter().addElement(TYPE_TITLE,this.title);   MP3File.getStructureFormatter().addElement(TYPE_ARTIST,this.artist);   MP3File.getStructureFormatter().addElement(TYPE_ALBUM,this.album);   MP3File.getStructureFormatter().addElement(TYPE_YEAR,this.year);   MP3File.getStructureFormatter().addElement(TYPE_COMMENT,this.comment);   MP3File.getStructureFormatter().addElement(TYPE_GENRE,this.genre);   MP3File.getStructureFormatter().closeHeadingElement(TYPE_TAG); } "
"public static void closeAndDeleteLogFile(){   if (logFile != null) {     fileHandler.close();     logFile.delete();   } } "
"public static boolean deleteDir(File dir){   return deleteDir(dir,true); } "
"void parseInvalidTag() throws IOException {   while (true) {     skipSpace(); switch (ch) { case '>': case -1:       ch=readCh();     return; case '<':   return; default : ch=readCh(); } } } "
"private void addLinesForAttributes(List<StringBuilder> ldifLines,Map<AttributeType,List<Attribute>> attributes){   for (  List<Attribute> attrList : attributes.values()) {     for (    Attribute a : attrList) {       String attrName=a.getAttributeDescription().toString();       for (      ByteString v : a) {         StringBuilder attrLine=new StringBuilder(attrName);         appendLDIFSeparatorAndValue(attrLine,v);         ldifLines.add(attrLine);       }     }   } } "
"private static List<ResourceResponse> makeResourceResponses(String raw){   List<ResourceResponse> responses=new ArrayList<>();   for (  String item : raw.split(\",\")) {     String name;     String place;     if (item.contains(\"->\")) {       String[] part=item.split(\"->\");       name=part[0];       place=part[1];     }  else {       name=item;       place=\"\";     }     if (\"NULL\".equalsIgnoreCase(name)) {       name=null;     }     if (\"NULL\".equalsIgnoreCase(place)) {       place=null;     }     JsonValue value=JsonValueBuilder.jsonValue().put(\"name\",name).put(\"place\",place).build();     responses.add(Responses.newResourceResponse(name,null,value));   }   return responses; } "
"public void testDoubleValueNegMaxValue(){   byte[] a={0,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};   int aSign=-1;   double aNumber=new BigInteger(aSign,a).doubleValue();   assertTrue(aNumber == -Double.MAX_VALUE); } "
"public void testRead2() throws Exception {   byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};   TestInputStream tis=new TestInputStream(data);   CipherInputStream cis=new CipherInputStream(tis,new NullCipher());   int expected=data.length;   byte[] result=new byte[expected];   int ind=0;   int got=cis.read(result);   while (true) {     for (int j=0; j < got - ind; j++) {       if (result[j] != data[ind + j]) {         fail(\"read(byte[] b) returned incorrect data.\");       }     }     if (got == expected) {       break;     }  else     if (got > expected) {       fail(\"The data returned by read(byte[] b) \" + \"is larger than expected.\");     }  else {       ind=got;       got+=cis.read(result);     }   }   if (cis.read(result) != -1) {     fail(\"read(byte[] b) should return -1 \" + \"at the end of the stream.\");   } } "
"public void addRole(String user,String role){   List<String> roles=userRoles.get(user);   if (roles == null) {     roles=new ArrayList<>();     userRoles.put(user,roles);   }   roles.add(role); } "
"public void processedPasswordChange(Long eventTime,String userDN) throws AMAuthCallBackException {   Map eventParams=new HashMap();   eventParams.put(AMAuthCallBack.TIME_KEY,eventTime);   eventParams.put(AMAuthCallBack.REALM_KEY,theRealm);   eventParams.put(AMAuthCallBack.USER_KEY,userDN);   processedEvent(AMAuthCallBack.PASSWORD_CHANGE,eventParams); } "
"public static final ParsedQuery createTestParsedQuery(){   Query query=createTestQuery();   WhereClause whereClause=new WhereClause(query.getWhere());   return new ParsedQuery(query,whereClause,createTestIndexOneField()); } "
"protected void fireEditingCanceled(){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == CellEditorListener.class) {       if (changeEvent == null)       changeEvent=new ChangeEvent(this);       ((CellEditorListener)listeners[i + 1]).editingCanceled(changeEvent);     }   } } "
"public MemoryNotificationInfo(String poolName,MemoryUsage usage,long count){   if (poolName == null) {     throw new NullPointerException(\"Null poolName\");   }   if (usage == null) {     throw new NullPointerException(\"Null usage\");   }   this.poolName=poolName;   this.usage=usage;   this.count=count; } "
"public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestType createRequestType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestTypeImpl(); } "
"public From(To to){   super(NAME);   address=to.address;   parameters=to.parameters; } "
"public com.sun.identity.saml2.jaxb.metadata.CompanyElement createCompanyElement(java.lang.String value) throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.CompanyElementImpl(value); } "
"public StatusDetailImpl() throws XACMLException {   String xmlString=\"<xacml-context:StatusDetail xmlns:xacml-context=\" + \"\\\"urn:oasis:names:tc:xacml:2.0:context:schema:cd:04\\\"/>\";   element=new StatusDetailImpl(xmlString).getElement(); } "
"@Override public void onTokenRefresh(){   String refreshedToken=FirebaseInstanceId.getInstance().getToken();   Log.d(TAG,\"Refreshed token: \" + refreshedToken);   sendRegistrationToServer(refreshedToken); } "
"public void endElement(String uri,String localName,String qName) throws SAXException {   if (documentHandler != null)   documentHandler.endElement(qName); } "
"@Override public void readObjectData(ObjectInputStream stream) throws ClassNotFoundException, IOException {   doReadObject((ObjectInput)stream); } "
"public void testJarVerificationModifiedEntry() throws IOException {   Support_Resources.copyFile(resources,null,integrateJar);   File f=new File(resources,integrateJar);   JarFile jarFile=new JarFile(f);   ZipEntry zipEntry=jarFile.getJarEntry(integrateJarEntry);   zipEntry.setSize(zipEntry.getSize() + 1);   jarFile.getInputStream(zipEntry).skip(Long.MAX_VALUE);   jarFile=new JarFile(f);   zipEntry=jarFile.getJarEntry(integrateJarEntry);   zipEntry.setSize(zipEntry.getSize() - 1);   try {     jarFile.getInputStream(zipEntry).read(new byte[5000],0,5000);     fail(\"SecurityException expected\");   }  catch (  SecurityException e) {   } } "
"private boolean split_wtrace(LinkedList<BrdTracep> clean_list,int seg_index,PlaSegmentInt curr_segment,AwtreeFindEntry overlap_tentry,BrdTracep found_trace){   PlaSegmentInt found_line_segment=found_trace.polyline.segment_get(overlap_tentry.shape_index_in_object + 1);   ArrayList<PlaLineInt> intersecting_lines=found_line_segment.intersection(curr_segment);   if (intersecting_lines.size() < 1)   return false;   boolean other_split=split_wtrace_other(found_trace,clean_list,intersecting_lines,overlap_tentry);   intersecting_lines=curr_segment.intersection(found_line_segment);   boolean own_split=split_wtrace_own(seg_index,clean_list,intersecting_lines);   if (other_split || own_split)   remove_if_cycle(clean_list);   return own_split; } "
"public void runTest() throws Throwable {   Document doc;   Document anotherDoc;   DocumentType docType;   Node node;   doc=(Document)load(\"staffNS\",true);   anotherDoc=(Document)load(\"staffNS\",true);   docType=anotherDoc.getDoctype(); {     boolean success=false;     try {       node=doc.importNode(docType,false);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NOT_SUPPORTED_ERR);     }     assertTrue(\"throw_NOT_SUPPORTED_ERR\",success);   } } "
"public void validateAttributeQuery(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {   AttributeQueryUtil.verifyAttrQuerySignature(attrQuery,attrAuthorityEntityID,realm);   ; } "
"public long readLock(){   long s=state, next;   return ((whead == wtail && (s & ABITS) < RFULL && U.compareAndSwapLong(this,STATE,s,next=s + RUNIT)) ? next : acquireRead(false,0L)); } "
"@Override public boolean equals(Object o){   if (!(o instanceof PrivilegeSubject)) {     return false;   }   PrivilegeSubject sbj=(PrivilegeSubject)o;   if ((state == null) && (sbj.state == null)) {     return true;   }   if ((state == null) && (sbj.state != null)) {     return false;   }   if ((state != null) && (sbj.state == null)) {     return false;   }   return state.equals(sbj.state); } "
"public void removeMembers(String universalId,Set names) throws AMConsoleException {   if ((names == null) || names.isEmpty()) {     throw new AMConsoleException(\"entities.members.remove.no.selection.message\");   }   SSOToken ssoToken=getUserSSOToken();   String currentId=\"\";   try {     AMIdentity amid=IdUtils.getIdentity(ssoToken,universalId);     String[] params=new String[2];     params[0]=universalId;     for (Iterator iter=names.iterator(); iter.hasNext(); ) {       String id=(String)iter.next();       AMIdentity amidentity=IdUtils.getIdentity(ssoToken,id);       currentId=id;       params[1]=id;       logEvent(\"ATTEMPT_REMOVE_IDENTITY_MEMBER\",params);       amid.removeMember(amidentity);       logEvent(\"SUCCEED_REMOVE_IDENTITY_MEMBER\",params);     }   }  catch (  SSOException e) {     String[] paramsEx={universalId,currentId,getErrorString(e)};     logEvent(\"SSO_EXCEPTION_REMOVE_IDENTITY_MEMBER\",paramsEx);     debug.warning(\"EntitiesModelImpl.removeMembers\",e);     throw new AMConsoleException(getErrorString(e));   } catch (  IdRepoException e) {     String[] paramsEx={universalId,currentId,getErrorString(e)};     logEvent(\"IDM_EXCEPTION_REMOVE_IDENTITY_MEMBER\",paramsEx);     debug.warning(\"EntitiesModelImpl.removeMembers\",e);     throw new AMConsoleException(getErrorString(e));   } } "
"public StringBuffer insert(int index,double d){   return insert(index,Double.toString(d)); } "
"protected int countSteps(LocPathIterator lpi){   if (lpi instanceof WalkingIterator) {     WalkingIterator wi=(WalkingIterator)lpi;     AxesWalker aw=wi.getFirstWalker();     int count=0;     while (null != aw) {       count++;       aw=aw.getNextWalker();     }     return count;   }  else   return 1; } "
"public DataStoreTest(){   super(\"CLI\"); } "
"public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestAbstractType createRequestAbstractType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestAbstractTypeImpl(); } "
"public DeflaterInputStream(InputStream in,Deflater defl){   this(in,defl,512); } "
"private void updatePacketRecvAddress(DatagramPacket packet){   packet.setAddress(connectedAddress);   packet.setPort(connectedPort); } "
"public Conditions createConditions(){   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITIONS);   if (obj == null) {     return new ConditionsImpl();   }  else {     return (Conditions)obj;   } } "
"public static Rule createAGetPostRule(String ruleName,String ruleUrl) throws PolicyException {   Map<String,Set<String>> actionValues=new HashMap<String,Set<String>>();   Set<String> set=new HashSet<String>();   set.add(ALLOW_DECISION);   actionValues.put(GET_ACTION,set);   set=new HashSet<String>();   set.add(ALLOW_DECISION);   actionValues.put(POST_ACTION,set);   return new Rule(ruleName,IPLANETAMWEBAGENTSERVICE,ruleUrl,actionValues); } "
"public V remove(Object key){   return doRemove(key,null); } "
"private MutableBigInteger divideLongMagnitude(long ldivisor,MutableBigInteger quotient){   MutableBigInteger rem=new MutableBigInteger(new int[intLen + 1]);   System.arraycopy(value,offset,rem.value,1,intLen);   rem.intLen=intLen;   rem.offset=1;   int nlen=rem.intLen;   int limit=nlen - 2 + 1;   if (quotient.value.length < limit) {     quotient.value=new int[limit];     quotient.offset=0;   }   quotient.intLen=limit;   int[] q=quotient.value;   int shift=Long.numberOfLeadingZeros(ldivisor);   if (shift > 0) {     ldivisor<<=shift;     rem.leftShift(shift);   }   if (rem.intLen == nlen) {     rem.offset=0;     rem.value[0]=0;     rem.intLen++;   }   int dh=(int)(ldivisor >>> 32);   long dhLong=dh & LONG_MASK;   int dl=(int)(ldivisor & LONG_MASK);   for (int j=0; j < limit; j++) {     int qhat=0;     int qrem=0;     boolean skipCorrection=false;     int nh=rem.value[j + rem.offset];     int nh2=nh + 0x80000000;     int nm=rem.value[j + 1 + rem.offset];     if (nh == dh) {       qhat=~0;       qrem=nh + nm;       skipCorrection=qrem + 0x80000000 < nh2;     }  else {       long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);       if (nChunk >= 0) {         qhat=(int)(nChunk / dhLong);         qrem=(int)(nChunk - (qhat * dhLong));       }  else {         long tmp=divWord(nChunk,dh);         qhat=(int)(tmp & LONG_MASK);         qrem=(int)(tmp >>> 32);       }     }     if (qhat == 0)     continue;     if (!skipCorrection) {       long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;       long rs=((qrem & LONG_MASK) << 32) | nl;       long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);       if (unsignedLongCompare(estProduct,rs)) {         qhat--;         qrem=(int)((qrem & LONG_MASK) + dhLong);         if ((qrem & LONG_MASK) >= dhLong) {           estProduct-=(dl & LONG_MASK);           rs=((qrem & LONG_MASK) << 32) | nl;           if (unsignedLongCompare(estProduct,rs))           qhat--;         }       }     }     rem.value[j + rem.offset]=0;     int borrow=mulsubLong(rem.value,dh,dl,qhat,j + rem.offset);     if (borrow + 0x80000000 > nh2) {       divaddLong(dh,dl,rem.value,j + 1 + rem.offset);       qhat--;     }     q[j]=qhat;   }   if (shift > 0)   rem.rightShift(shift);   quotient.normalize();   rem.normalize();   return rem; } "
"@Override public void toString(StringBuilder buffer,int indent){   StringBuilder indentBuf=new StringBuilder(indent);   for (int i=0; i < indent; i++) {     indentBuf.append(' ');   }   for (  StringBuilder b : toLDIF()) {     buffer.append(indentBuf);     buffer.append(b);     buffer.append(EOL);   } } "
"public AttributeBuilder(AttributeDescription attributeDescription){   this.attributeDescription=checkNotNull(attributeDescription); } "
"public AccountService deleteAccount(String id,Handler<AsyncResult<Void>> resultHandler){   delegate.deleteAccount(id,resultHandler);   return this; } "
"public void test_removeHandshakeCompletedListener() throws IOException {   SSLSocket ssl=getSSLSocket();   HandshakeCompletedListener ls=new HandshakeCL();   try {     ssl.removeHandshakeCompletedListener(null);     fail();   }  catch (  IllegalArgumentException expected) {   }   try {     ssl.removeHandshakeCompletedListener(ls);   }  catch (  IllegalArgumentException expected) {   }   ssl.addHandshakeCompletedListener(ls);   ssl.removeHandshakeCompletedListener(ls);   ssl.close(); } "
"private static void redirectAuthentication(HttpServletRequest request,HttpServletResponse response,IDPAuthnContextInfo info,IDPSSOFederateRequest data,boolean isSessionUpgrade) throws SAML2Exception, IOException {   String classMethod=\"UtilProxySAMLAuthenticator.redirectAuthentication: \";   String authService=IDPSSOUtil.getAuthenticationServiceURL(data.getRealm(),data.getIdpEntityID(),request);   StringBuilder appliRootUrl=getAppliRootUrl(request);   boolean forward;   StringBuffer newURL;   if (FSUtils.isSameContainer(request,authService)) {     forward=true;     String relativePath=getRelativePath(authService,appliRootUrl.toString());     newURL=new StringBuffer(relativePath).append(\"&forward=true\");   }  else {     forward=false;     newURL=new StringBuffer(authService);   }   if (data.getSpEntityID() != null) {     if (newURL.indexOf(\"?\") == -1) {       newURL.append(\"?\");     }  else {       newURL.append(\"&\");     }     newURL.append(SAML2Constants.SPENTITYID).append(\"=\").append(URLEncDec.encode(data.getSpEntityID()));   }   Set<String> authnTypeAndValues=info.getAuthnTypeAndValues();   if (CollectionUtils.isNotEmpty(authnTypeAndValues)) {     boolean isFirst=true;     StringBuilder authSB=new StringBuilder();     for (    String authnTypeAndValue : authnTypeAndValues) {       int index=authnTypeAndValue.indexOf(\"=\");       if (index != -1) {         if (isFirst) {           isFirst=false;         }  else {           authSB.append(\"&\");         }         authSB.append(authnTypeAndValue.substring(0,index + 1)).append(URLEncDec.encode(authnTypeAndValue.substring(index + 1)));       }     }     if (newURL.indexOf(\"?\") == -1) {       newURL.append(\"?\");     }  else {       newURL.append(\"&\");     }     newURL.append(authSB.toString());     SAML2Utils.debug.message(\"{} authString= {}\",classMethod,authSB.toString());   }   if (newURL.indexOf(\"?\") == -1) {     if (isSessionUpgrade) {       newURL.append(\"?ForceAuth=true&goto=\");     }  else {       newURL.append(\"?goto=\");     }   }  else {     if (isSessionUpgrade) {       newURL.append(\"&ForceAuth=true\");     }     newURL.append(\"&goto=\");   }   StringBuffer gotoURL;   if (forward) {     gotoURL=new StringBuffer(getRelativePath(request.getRequestURI(),request.getContextPath()));   }  else {     String rpUrl=IDPSSOUtil.getAttributeValueFromIDPSSOConfig(data.getRealm(),data.getIdpEntityID(),SAML2Constants.RP_URL);     if (StringUtils.isNotEmpty(rpUrl)) {       gotoURL=new StringBuffer(rpUrl);       gotoURL.append(getRelativePath(request.getRequestURI(),request.getContextPath()));     }  else {       gotoURL=request.getRequestURL();     }   }   gotoURL.append(\"?ReqID=\").append(data.getAuthnRequest().getID()).append('&').append(INDEX).append('=').append(data.getAuthnRequest().getAssertionConsumerServiceIndex()).append('&').append(ACS_URL).append('=').append(URLEncDec.encode(data.getAuthnRequest().getAssertionConsumerServiceURL())).append('&').append(SP_ENTITY_ID).append('=').append(URLEncDec.encode(data.getAuthnRequest().getIssuer().getValue())).append('&').append(BINDING).append('=').append(URLEncDec.encode(data.getAuthnRequest().getProtocolBinding()));   newURL.append(URLEncDec.encode(gotoURL.toString()));   SAML2Utils.debug.message(\"{} New URL for authentication: {}\",classMethod,newURL.toString());   if (forward) {     newURL.append('&').append(SystemPropertiesManager.get(Constants.AM_AUTH_COOKIE_NAME,\"AMAuthCookie\"));     newURL.append('=');     SAML2Utils.debug.message(\"{} Forward to \",classMethod,newURL.toString());     try {       request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);       request.getRequestDispatcher(newURL.toString()).forward(request,response);     }  catch (    ServletException se) {       SAML2Utils.debug.error(\"{} Exception Bad Forward URL: {}\",classMethod,newURL.toString());     }   }  else {     response.sendRedirect(newURL.toString());   } } "
"protected void output(char[] chars,int start,int length) throws IOException {   if (!replaceEntities) {     super.output(chars,start,length);     return;   }   int last=start;   length+=start;   for (int counter=start; counter < length; counter++) { switch (chars[counter]) { case '<':       if (counter > last) {         super.output(chars,last,counter - last);       }     last=counter + 1;   output(\"&lt;\"); break; case '>': if (counter > last) { super.output(chars,last,counter - last); } last=counter + 1; output(\"&gt;\"); break; case '&': if (counter > last) { super.output(chars,last,counter - last); } last=counter + 1; output(\"&amp;\"); break; case '\"': if (counter > last) { super.output(chars,last,counter - last); } last=counter + 1; output(\"&quot;\"); break; case '\\n': case '\\t': case '\\r': break; default : if (chars[counter] < ' ' || chars[counter] > 127) { if (counter > last) { super.output(chars,last,counter - last); } last=counter + 1; output(\"&#\"); output(String.valueOf((int)chars[counter])); output(\";\"); } break; } } if (last < length) { super.output(chars,last,length - last); } } "
"protected void finalize(){ synchronized (debugMap) {     debugMap.remove(debugName);   } synchronized (this) {     if (debugFile == null) {       return;     }     debugLevel=Debug.OFF;     debugFile.flush();     debugFile.close();     debugFile=null;   } } "
"private PositiveIntegerValidator(){ } "
"private XMPNode find(List list,String expr){   if (list != null) {     for (Iterator it=list.iterator(); it.hasNext(); ) {       XMPNode child=(XMPNode)it.next();       if (child.getName().equals(expr)) {         return child;       }     }   }   return null; } "
"public String toXML(){   if (xmlForm == null) {     StringBuilder xmlsb=new StringBuilder(1000);     xmlsb.append(\"<\").append(RESOURCE_RESULT).append(\" \").append(RESOURCE_NAME).append(\"=\\\"\").append(XMLUtils.escapeSpecialCharacters(resourceName)).append(\"\\\">\").append(PolicyUtils.CRLF);     if (policyDecision != null) {       xmlsb.append(policyDecision.toXML());     }     Iterator rrIter=resourceResults.iterator();     while (rrIter.hasNext()) {       ResourceResult rr=(ResourceResult)rrIter.next();       xmlsb.append(rr.toXML());     }     xmlsb.append(\"</\").append(RESOURCE_RESULT).append(\">\").append(PolicyUtils.CRLF);     xmlForm=xmlsb.toString();   }   return xmlForm; } "
"public boolean isAuthnContextMatching(List requestedACClassRefs,String acClassRef,String comparison,String realm,String idpEntityID){   Map acClassRefLevelMap=null;   if (IDPCache.classRefLevelHash != null) {     acClassRefLevelMap=(Map)IDPCache.classRefLevelHash.get(idpEntityID + \"|\" + realm);   }   if (acClassRefLevelMap == null || acClassRefLevelMap.isEmpty()) {     updateAuthnContextMapping(realm,idpEntityID);     acClassRefLevelMap=(Map)IDPCache.classRefLevelHash.get(idpEntityID + \"|\" + realm);     if (acClassRefLevelMap == null) {       acClassRefLevelMap=new HashMap();     }   }   return SAML2Utils.isAuthnContextMatching(requestedACClassRefs,acClassRef,comparison,acClassRefLevelMap); } "
"public Binding(String name,Object obj){   super(name,null);   this.boundObj=obj; } "
"public static <V>int distinctList(List<V> sourceList){   if (isEmpty(sourceList)) {     return 0;   }   int sourceCount=sourceList.size();   int sourceListSize=sourceList.size();   for (int i=0; i < sourceListSize; i++) {     for (int j=(i + 1); j < sourceListSize; j++) {       if (sourceList.get(i).equals(sourceList.get(j))) {         sourceList.remove(j);         sourceListSize=sourceList.size();         j--;       }     }   }   return sourceCount - sourceList.size(); } "
"private static void enumerateBindings(NamingEnumeration<?> bindings,Properties properties) throws NamingException {   boolean syncProviderObj=false;   try {     Binding bd=null;     Object elementObj=null;     String element=null;     while (bindings.hasMore()) {       bd=(Binding)bindings.next();       element=bd.getName();       elementObj=bd.getObject();       if (!(ic.lookup(element) instanceof Context)) {         if (ic.lookup(element) instanceof SyncProvider) {           syncProviderObj=true;         }       }       if (syncProviderObj) {         SyncProvider sync=(SyncProvider)elementObj;         properties.put(SyncFactory.ROWSET_SYNC_PROVIDER,sync.getProviderID());         syncProviderObj=false;       }     }   }  catch (  javax.naming.NotContextException e) {     bindings.next();     enumerateBindings(bindings,properties);   } } "
"public void visitLineNumber(int line,Label start){   if (mv != null) {     mv.visitLineNumber(line,start);   } } "
"protected void applicationAnnotationsConfig(){   long t1=System.currentTimeMillis();   WebAnnotationSet.loadApplicationAnnotations(context);   long t2=System.currentTimeMillis();   if (context instanceof StandardContext) {     ((StandardContext)context).setStartupTime(t2 - t1 + ((StandardContext)context).getStartupTime());   } } "
"public void putProperty(String key,String value){   internalPutProperty(key,value); } "
"public CMapToUnicode(){   byteMappings=new HashMap<>(); } "
"public void testDivideRoundHalfEvenPos1(){   String a=\"92948782094488478231212478987482988798104576347813847567949855464535634534563456\";   int aScale=-24;   String b=\"74723342238476237823754692930187879183479\";   int bScale=13;   String c=\"1.2439055763572051712242335979928354832010167729111113605E+76\";   int resScale=-21;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",resScale,result.scale()); } "
"protected void installComboBoxModelListeners(ComboBoxModel model){   if (model != null && (listDataListener=createListDataListener()) != null) {     model.addListDataListener(listDataListener);   } } "
"public IdentityHashMap(){   this(DEFAULT_MAX_SIZE); } "
"public boolean hasAgeStart(){   return fieldSetFlags()[0]; } "
"public BERSet(ASN1Encodable[] a){   super(a,false); } "
"public void drawLine(SynthContext context,Object paintKey,Graphics g,int x1,int y1,int x2,int y2){   g.drawLine(x1,y1,x2,y2); } "
"public float transformAngle(float angle){   float ta=scalingY < 0 ? -angle : angle;   return (float)(scalingX < 0 ? Math.PI - ta : ta); } "
"static private RowSetFactory loadViaServiceLoader() throws SQLException {   RowSetFactory theFactory=null;   try {     trace(\"***in loadViaServiceLoader():\");     for (    RowSetFactory factory : ServiceLoader.load(javax.sql.rowset.RowSetFactory.class)) {       trace(\" Loading done by the java.util.ServiceLoader :\" + factory.getClass().getName());       theFactory=factory;       break;     }   }  catch (  ServiceConfigurationError e) {     throw new SQLException(\"RowSetFactory: Error locating RowSetFactory using Service \" + \"Loader API: \" + e,e);   }   return theFactory; } "
"public static long parseUnsignedInt(byte[] bytes,int startIndex,int endIndex){   long l=0;   for (int i=startIndex; i < endIndex; i++) {     l<<=8;     l|=bytes[i] & 0xFF;   }   l&=0xFFFFFFFFL;   return l; } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   logger.info(\"shootme: got an ACK! \");   logger.info(\"Dialog = \" + requestEvent.getDialog());   logger.info(\"Dialog State = \" + requestEvent.getDialog().getState());   this.ackSeen=true; } "
"@Override public void removeValve(Valve valve){   Valve current;   if (first == valve) {     first=first.getNext();     current=null;   }  else {     current=first;   }   while (current != null) {     if (current.getNext() == valve) {       current.setNext(valve.getNext());       break;     }     current=current.getNext();   }   if (first == basic)   first=null;   if (valve instanceof Contained)   ((Contained)valve).setContainer(null);   if (valve instanceof Lifecycle) {     if (getState().isAvailable()) {       try {         ((Lifecycle)valve).stop();       }  catch (      LifecycleException e) {         log.error(\"StandardPipeline.removeValve: stop: \",e);       }     }     try {       ((Lifecycle)valve).destroy();     }  catch (    LifecycleException e) {       log.error(\"StandardPipeline.removeValve: destroy: \",e);     }   }   container.fireContainerEvent(Container.REMOVE_VALVE_EVENT,valve); } "
"public SessionNotificationParser(Document xmlDoc){   document=xmlDoc; } "
"public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {   returnToHomePage(); } "
"public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){   Request request=requestEvent.getRequest();   try {     logger.info(\"shootme:  got a bye sending OK.\");     logger.info(\"shootme:  dialog = \" + requestEvent.getDialog());     logger.info(\"shootme:  dialogState = \" + requestEvent.getDialog().getState());     Response response=messageFactory.createResponse(200,request);     if (serverTransactionId != null) {       serverTransactionId.sendResponse(response);     }     logger.info(\"shootme:  dialogState = \" + requestEvent.getDialog().getState());     this.byeSeen=true;   }  catch (  Exception ex) {     ex.printStackTrace();     System.exit(0);   } } "
"public void execute(TransformerImpl transformer) throws TransformerException {   transformer.pushCurrentTemplateRuleIsNull(true);   try {     transformSelectedNodes(transformer);   }   finally {     transformer.popCurrentTemplateRuleIsNull();   } } "
"public void rewind(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     $self.rewind();   }   finally {     _servant_postinvoke($so);   } } "
"@DataProvider(name=\"createModifyData\") public Object[][] createModifyData(){   CSN csn1=new CSN(1,0,1);   CSN csn2=new CSN(TimeThread.getTime(),123,45);   Modification mod1=new Modification(REPLACE,Attributes.create(\"description\",\"new value\"));   List<Modification> mods1=newArrayList(mod1);   Modification mod2=new Modification(DELETE,Attributes.empty(\"description\"));   List<Modification> mods2=newArrayList(mod1,mod2);   AttributeBuilder builder=new AttributeBuilder(getDescriptionAttributeType());   builder.add(\"string\");   builder.add(\"value\");   builder.add(\"again\");   List<Modification> mods3=newArrayList(new Modification(ADD,builder.toAttribute()));   List<Modification> mods4=new ArrayList<>();   for (int i=0; i < 10; i++) {     Attribute attr=Attributes.create(\"description\",\"string\" + i);     mods4.add(new Modification(ADD,attr));   }   Modification mod5=new Modification(REPLACE,Attributes.create(\"namingcontexts\",\"o=test\"));   List<Modification> mods5=newArrayList(mod5);   Attribute eattr1=Attributes.create(\"description\",\"eav description\");   Attribute eattr2=Attributes.create(\"namingcontexts\",\"eav naming contexts\");   List<Attribute> entryAttrList=newArrayList(eattr1,eattr2);   return new Object[][]{{csn1,\"dc=test\",mods1,false,AssuredMode.SAFE_DATA_MODE,(byte)0,null},{csn2,\"dc=cn2\",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)1,entryAttrList},{csn2,\"dc=test with a much longer dn in case this would \" + \"make a difference\",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,\"dc=test, cn=with a, o=more complex, ou=dn\",mods1,false,AssuredMode.SAFE_READ_MODE,(byte)5,entryAttrList},{csn2,\"cn=use\\\\, backslash\",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,\"dc=test with several mod\",mods2,false,AssuredMode.SAFE_DATA_MODE,(byte)16,entryAttrList},{csn2,\"dc=test with several values\",mods3,false,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,\"dc=test with long mod\",mods4,true,AssuredMode.SAFE_READ_MODE,(byte)120,entryAttrList},{csn2,\"dc=testDsaOperation\",mods5,true,AssuredMode.SAFE_DATA_MODE,(byte)99,null}}; } "
"public FrameBodyWOAF(){ } "
"public static EntryChangeNotificationResponseControl newControl(final PersistentSearchChangeType type,final DN previousName,final long changeNumber){   return new EntryChangeNotificationResponseControl(false,type,previousName,changeNumber); } "
"public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){   return getPersistence().findByUuid_C(uuid,companyId); } "
"Script(ClassLoader classLoader,Class<?> scriptClass,Method scriptMethod){   this.classLoader=classLoader;   this.scriptClass=scriptClass;   this.scriptMethod=scriptMethod; } "
"public static HTMLRenderedFragment newInstance(String serialized){   HTMLRenderedFragment fragment=new HTMLRenderedFragment();   Bundle args=new Bundle();   args.putString(SERIALIZED,serialized);   fragment.setArguments(args);   return fragment; } "
"public CharVector(int capacity){   if (capacity > 0) {     blockSize=capacity;   }  else {     blockSize=DEFAULT_BLOCK_SIZE;   }   array=new char[blockSize];   n=0; } "
"@Override public void recycle(){   contentLength=-1;   remaining=0; } "
"public FrameBodyEncrypted(String identifier){   this.identifier=identifier; } "
"final Node succ(Node p){   Node next=p.next;   return (p == next) ? head : next; } "
"protected void time(Calendar calendar) throws ParseException {   try {     String s=lexer.number();     int hour=Integer.parseInt(s);     calendar.set(Calendar.HOUR_OF_DAY,hour);     lexer.match(':');     s=lexer.number();     int min=Integer.parseInt(s);     calendar.set(Calendar.MINUTE,min);     lexer.match(':');     s=lexer.number();     int sec=Integer.parseInt(s);     calendar.set(Calendar.SECOND,sec);   }  catch (  Exception ex) {     throw createParseException(\"error processing time \");   } } "
"public void offSwitcher(){   this.on=false; } "
"private void sweep(){   for (Node p=head, s, n; p != null && (s=p.next) != null; ) {     if (!s.isMatched())     p=s;  else     if ((n=s.next) == null)     break;  else     if (s == n)     p=head;  else     p.casNext(s,n);   } } "
"public void resetToPreferredSizes(){   SplitPaneUI ui=getUI();   if (ui != null) {     ui.resetToPreferredSizes(this);   } } "
"public void handleDeleteTPButtonRequest(RequestInvocationEvent event) throws ModelControlException {   CCActionTable tbl=(CCActionTable)getChild(SAML_TABLE);   tbl.restoreStateData();   CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SAML_TABLE);   Integer[] selected=tblModel.getSelectedRows();   List currentList=(List)getPageSessionAttribute(SAML_TABLE_ATTRIBUTE);   Set selectedSet=new HashSet();   for (int i=0; i < selected.length; i++) {     selectedSet.add(currentList.get(selected[i].intValue()));   }   try {     FSSAMLServiceModel model=(FSSAMLServiceModel)getSAMLModel();     model.deleteTrustPartners(selectedSet);     if (selected.length == 1) {       setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"saml.message.trusted.partner.deleted\");     }  else {       setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"saml.message.trusted.partner.deleted.pural\");     }   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }   forwardTo(); } "
"public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){   if (api < Opcodes.ASM5) {     throw new RuntimeException();   }   if (mv != null) {     return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);   }   return null; } "
"public Axial(PdfColorSpace cs,float x0,float y0,float[] color0,float x1,float y1,float[] color1,boolean[] extend){   this(cs,x0,y0,color0,x1,y1,color1);   if (extend == null || extend.length != 2)   throw new IllegalArgumentException(\"extend\");   setExtend(extend[0],extend[1]); } "
"public void fireVisibleDataPropertyChange(){   firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true)); } "
"protected TableColumnModel createDefaultColumnModel(){   return new DefaultTableColumnModel(); } "
"void old(){   mYoung=false; } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   FSAuthDomainsModel model=(FSAuthDomainsModel)getModel();   String name=(String)getDisplayFieldValue(model.TF_NAME);   AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);   try {     String realm=model.getRealm(name);     Map values=ps.getAttributeValues(model.getDataMap(),false,model);     model.setAttributeValues(realm,name,values);     SerializedField szCache=(SerializedField)getChild(SZ_CACHE);     FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);     CCAddRemove addRemoveList=(CCAddRemove)getChild(ADD_REMOVE_PROVIDERS);     addRemoveList.restoreStateData();     CCAddRemoveModel addRemoveModel=(CCAddRemoveModel)addRemoveList.getModel();     List list=new ArrayList(getSelectedValues(addRemoveModel));     model.addProviders(realm,name,list);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"authentication.domain.updated\");     forwardTo();   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     forwardTo();   } } "
"public long insert(Long ruleID,Long eventAttributeID,Long externalAttributeID,Long dataFilterID,Long parentRuleFilterID,String ruleFilterData){   if (ruleID == null || eventAttributeID == null || externalAttributeID == null || dataFilterID == null || parentRuleFilterID == null || ruleFilterData == null) {     throw new IllegalArgumentException(\"insert parameter null.\");   }   ContentValues initialValues=new ContentValues();   initialValues.put(KEY_RULEID,ruleID);   initialValues.put(KEY_EVENTATTRIBUTEID,eventAttributeID);   initialValues.put(KEY_EXTERNALATTRIBUTEID,externalAttributeID);   initialValues.put(KEY_DATAFILTERID,dataFilterID);   initialValues.put(KEY_PARENTRULEFILTERID,parentRuleFilterID);   initialValues.put(KEY_RULEFILTERDATA,ruleFilterData);   return database.insert(DATABASE_TABLE,null,initialValues); } "
"public void testGetMGFParameters(){   String mdName=\"SHA-1\";   String mgfName=\"MGF1\";   AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;   PSource pSrc=PSource.PSpecified.DEFAULT;   OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);   assertTrue(\"The returned value does not equal to the \" + \"value specified in the constructor.\",ps.getMGFParameters() == mgfSpec); } "
"protected void paintBorder(Graphics g){   if (isBorderPainted()) {     super.paintBorder(g);   } } "
"private Attribute[] mapToAttributes(Map<String,Set<String>> map){   Attribute[] result=new Attribute[map.size()];   int index=0;   for (  Map.Entry<String,Set<String>> entry : map.entrySet()) {     result[index]=new Attribute();     result[index].setName(entry.getKey());     result[index].setValues(entry.getValue().toArray(new String[0]));     index++;   }   return result; } "
"public long tryConvertToWriteLock(long stamp){   long a=stamp & ABITS, m, s, next;   while (((s=state) & SBITS) == (stamp & SBITS)) {     if ((m=s & ABITS) == 0L) {       if (a != 0L)       break;       if (U.compareAndSwapLong(this,STATE,s,next=s + WBIT))       return next;     }  else     if (m == WBIT) {       if (a != m)       break;       return stamp;     }  else     if (m == RUNIT && a != 0L) {       if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT + WBIT))       return next;     }  else     break;   }   return 0L; } "
"public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_wchar\",_opsClass);   DynEnumOperations $self=(DynEnumOperations)$so.servant;   try {     $self.insert_wchar(value);   }   finally {     _servant_postinvoke($so);   } } "
"public Assertion(org.w3c.dom.Element assertionElement) throws SAMLException {   parseAssertionElement(assertionElement); } "
"private boolean defineEntity(String name,char value){   StringBuffer sb=new StringBuffer(\"&\");   sb.append(name);   sb.append(';');   String entityString=sb.toString();   boolean extra=defineChar2StringMapping(entityString,value);   return extra; } "
"private void mergeResources(PdfDictionary result,PdfDictionary source){   for (  PdfName name : resourceNames) {     PdfDictionary dic=source.getAsDictionary(name);     PdfDictionary res=result.getAsDictionary(name);     if (res == null) {       res=new PdfDictionary();     }     if (dic != null) {       res.mergeDifferent(dic);       result.put(name,res);     }   } } "
"int[] decodeEnd(BitArray row) throws NotFoundException {   row.reverse();   try {     int endStart=skipWhiteSpace(row);     int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);     validateQuietZone(row,endPattern[0]);     int temp=endPattern[0];     endPattern[0]=row.getSize() - endPattern[1];     endPattern[1]=row.getSize() - temp;     return endPattern;   }   finally {     row.reverse();   } } "
"private CharSequence insertGrouping(CharSequence s){   StringBuilder result=new StringBuilder(s.length() + s.length() / 3);   int digitsLength=s.length();   int i=0;   if (s.charAt(0) == '-') {     --digitsLength;     ++i;     result.append('-');   }   int headLength=digitsLength % 3;   if (headLength == 0) {     headLength=3;   }   result.append(s,i,i + headLength);   i+=headLength;   for (; i < s.length(); i+=3) {     result.append(localeData.groupingSeparator);     result.append(s,i,i + 3);   }   return result; } "
"public Object newInstance(Class javaContentInterface) throws JAXBException {   if (javaContentInterface == null) {     throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));   }   try {     Class c=gi.getDefaultImplementation(javaContentInterface);     if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));     return c.newInstance();   }  catch (  Exception e) {     throw new JAXBException(e);   } } "
"public Object processDSTRequest(Object request,Message requestMsg,Message responseMsg) throws SOAPFaultException, DSTException {   IDPPUtils.debug.message(\"PPRequestHandler:processRequest:Init\");   try {     IDPPServiceManager serviceManager=IDPPServiceManager.getInstance();     String providerID=serviceManager.getProviderID();     ProviderHeader ph=new ProviderHeader(providerID);     responseMsg.setProviderHeader(ph);     if (serviceManager.isServiceInstanceUpdateEnabled()) {       ServiceInstanceUpdateHeader siuHeader=getServiceInstanceUpdateHeader();       responseMsg.setServiceInstanceUpdateHeader(siuHeader);     }     if (request instanceof QueryElement) {       QueryElement query=(QueryElement)request;       Document doc=IDPPUtils.getDocumentBuilder().newDocument();       IDPPUtils.getMarshaller().setProperty(\"com.sun.xml.bind.namespacePrefixMapper\",new NamespacePrefixMapperImpl());       IDPPUtils.getMarshaller().marshal(query,doc);       return processQueryRequest(query,providerID,requestMsg,doc);     }  else     if (request instanceof ModifyElement) {       ModifyElement modify=(ModifyElement)request;       Document doc=IDPPUtils.getDocumentBuilder().newDocument();       IDPPUtils.getMarshaller().setProperty(\"com.sun.xml.bind.namespacePrefixMapper\",new NamespacePrefixMapperImpl());       IDPPUtils.getMarshaller().marshal(modify,doc);       return processModifyRequest(modify,providerID,requestMsg,doc);     }  else {       IDPPUtils.debug.error(\"PPRequestHandler:processRequest:invalid\" + \" Request.\");       throw new DSTException(IDPPUtils.bundle.getString(\"invalidRequest\"));     }   }  catch (  IDPPException ie) {     IDPPUtils.debug.error(\"PPRequestHandler:processRequest fail\",ie);     throw new DSTException(ie);   } catch (  JAXBException je) {     IDPPUtils.debug.error(\"PPRequestHandler:processRequest fail\",je);     throw new DSTException(IDPPUtils.bundle.getString(\"jaxbFailure\"));   } catch (  SOAPBindingException sbe) {     IDPPUtils.debug.error(\"PPRequestHandler:processRequest fail\",sbe);     throw new DSTException(sbe);   } } "
"public PdfPage addPage(int index,PdfPage page){   checkClosingStatus();   checkAndAddPage(index,page);   currentPage=page;   dispatchEvent(new PdfDocumentEvent(PdfDocumentEvent.INSERT_PAGE,page));   return currentPage; } "
"public long checkValidValue(long value,TemporalField field){   if (isValidValue(value) == false) {     throw new DateTimeException(genInvalidFieldMessage(field,value));   }   return value; } "
"public void notationDecl(String name,String publicId,String systemId){ } "
"private Map createSSOMap(String authLevel,String metaAlias,boolean isFedCookiePresent,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws FSPreLoginException {   try {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSPreLogin::createSSOMap called with authLevel =\" + authLevel + \" metaAlias =\"+ metaAlias);     }     if (!isFedCookiePresent) {       String actionOnNoFedCookie=httpRequest.getParameter(IFSConstants.ACTION_ON_NO_FED_COOKIE);       if (actionOnNoFedCookie != null && actionOnNoFedCookie.equals(IFSConstants.LOCAL_LOGIN)) {         FSUtils.forwardRequest(httpRequest,httpResponse,getLoginURL(false,metaAlias,httpRequest));         return null;       }     }     Map headerMap=setHeaderMap(httpRequest);     FSLoginHelper loginHelper=new FSLoginHelper(httpRequest);     String targetURL=httpRequest.getParameter(IFSConstants.GOTOKEY);     if (targetURL == null || targetURL.length() <= 0) {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSPreLogin::createSSOMap.\" + \"no goto in queryString.Assinging targetURL = \" + homePage);       }       targetURL=homePage;     }     Map retMap=loginHelper.createAuthnRequest(headerMap,targetURL,authLevel,metaAlias,null,isFedCookiePresent);     String requestID=null;     String responseData=(String)retMap.get(IFSConstants.RESPONSE_DATA_KEY);     if (responseData != null && responseData.length() != 0) {       return retMap;     }     requestID=(String)retMap.get(IFSConstants.AUTH_REQUEST_ID);     String URL=(String)retMap.get(IFSConstants.URL_KEY);     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSPreLogin::createSSOMap requestID\" + requestID + \" URL \"+ URL);     }     if (requestID != null && URL == null) {       String queryString=getQueryString(true,metaAlias,httpRequest);       String returnURL=new StringBuffer().append(commonLoginPage).append(IFSConstants.QUESTION_MARK).append(queryString).append(IFSConstants.AMPERSAND).append(IFSConstants.AUTH_REQUEST_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND).append(IFSConstants.META_ALIAS).append(IFSConstants.EQUAL_TO).append(httpRequest.getParameter(IFSConstants.META_ALIAS)).toString();       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSPreLogin::createSSOMap framedlogin url \" + returnURL);       }       retMap.put(IFSConstants.URL_KEY,returnURL);     }     return retMap;   }  catch (  FSLoginHelperException exp) {     FSUtils.debug.error(\"FSPreLogin::setMetaInfo.\" + \" FSLoginHelperException Exception caught. \",exp);     throw new FSPreLoginException(\"FSPreLogin::FSLoginHelperException\");   } } "
"public Process executeAsync(final CommandLine command) throws IOException {   return executeAsync(command,(Map<String,String>)null); } "
"public synchronized <T>void sendEvent(T event){   RXBusEventIsNullException.checkEvent(event);   SerializedSubject subject=getSubject(event.getClass(),false);   if (subject != null)   subject.onNext(event); } "
"private static int checkTypeVariableSignature(final String signature,int pos){   pos=checkChar('T',signature,pos);   pos=checkIdentifier(signature,pos);   return checkChar(';',signature,pos); } "
"public ResponseSet process(PLLAuditor auditor,List<Request> requests,HttpServletRequest servletRequest,HttpServletResponse servletResponse,ServletContext servletContext){   if (Debug.messageEnabled()) {     Debug.message(\"LogService.process() called :requests are\");     for (    Request req : requests) {       Debug.message(\"xml = \" + req.getContent());     }   }   ResponseSet rset=new ResponseSet(LOG_SERVICE);   for (  Request req : requests) {     String xmlRequestString=req.getContent();     Response res;     if ((xmlRequestString == null) || xmlRequestString.equals(\"null\")) {       Debug.error(\"Received a null log request\");       res=new Response(\"NULL_LOG_REQUEST\");       rset.addResponse(res);     }  else {       int l=xmlRequestString.length();       int sidi=xmlRequestString.indexOf(\"sid=\");       int sidj=xmlRequestString.indexOf(\"</log\");       loggedBySid=xmlRequestString.substring((sidi + 5),(sidj - 2));       try {         InetAddress remoteClient=SessionUtils.getClientAddress(servletRequest);         SSOToken ssoToken=RestrictedTokenHelper.resolveRestrictedToken(loggedBySid,remoteClient);         SSOTokenManager ssom=SSOTokenManager.getInstance();         if (!ssom.isValidToken(ssoToken)) {           String loggedByID=ssoToken.getPrincipal().getName();           Debug.error(\"LogService::process(): access denied for\" + \" user :\" + loggedByID);           res=new Response(\"UNAUTHORIZED\");           rset.addResponse(res);           return rset;         }       }  catch (      SSOException e) {         Debug.error(\"LogService::process(): SSOException\",e);         res=new Response(\"UNAUTHORIZED\");         rset.addResponse(res);         return rset;       } catch (      Exception e) {         Debug.error(\"LogService::process(): \",e);         res=new Response(\"ERROR\");         rset.addResponse(res);       }       try {         ByteArrayInputStream bin=new ByteArrayInputStream(xmlRequestString.getBytes(\"UTF-8\"));         LogOperation op=(LogOperation)parser.parse(bin);         res=op.execute(auditEventPublisher,auditEventFactory);       }  catch (      Exception e) {         Debug.error(\"LogService::process():\",e);         res=new Response(\"ERROR\");         if (MonitoringUtil.isRunning()) {           SsoServerLoggingSvcImpl slsi=Agent.getLoggingSvcMBean();           SsoServerLoggingHdlrEntryImpl slei=slsi.getHandler(SsoServerLoggingSvcImpl.REMOTE_HANDLER_NAME);           slei.incHandlerFailureCount(1);         }       }       rset.addResponse(res);     }   }   return rset; } "
"public static void createChildren(DefaultMutableTreeNode parent,Object children){   if (children instanceof Vector) {     Vector<?> childVector=(Vector)children;     for (int counter=0, maxCounter=childVector.size(); counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childVector.elementAt(counter),childVector.elementAt(counter)));   }  else   if (children instanceof Hashtable) {     Hashtable<?,?> childHT=(Hashtable)children;     Enumeration<?> keys=childHT.keys();     Object aKey;     while (keys.hasMoreElements()) {       aKey=keys.nextElement();       parent.add(new DynamicUtilTreeNode(aKey,childHT.get(aKey)));     }   }  else   if (children instanceof Object[]) {     Object[] childArray=(Object[])children;     for (int counter=0, maxCounter=childArray.length; counter < maxCounter; counter++)     parent.add(new DynamicUtilTreeNode(childArray[counter],childArray[counter]));   } } "
"protected void paint(SynthContext context,Graphics g){ } "
"public static boolean verifyRequestIssuer(String realm,String hostEntity,Issuer reqIssuer,String requestId) throws SAML2Exception {   boolean issuerValid=isSourceSiteValid(reqIssuer,realm,hostEntity);   if (!issuerValid) {     if (debug.messageEnabled()) {       debug.message(\"SAML2Utils \" + \"Issuer in Request is not valid.\");     }     String[] data={hostEntity,realm,requestId};     LogUtil.error(Level.INFO,LogUtil.INVALID_ISSUER_REQUEST,data,null);     throw new SAML2Exception(bundle.getString(\"invalidIssuerInRequest\"));   }   return issuerValid; } "
"public String toString(){   StringBuffer buf=new StringBuffer();   buf.append(\"--------------------------------------\");   buf.append(\"Got Federation Exception\\n\");   String msg=getMessage();   if (msg != null && msg.length() > 0) {     buf.append(\"Message: \").append(getMessage());   }   if (rootCause != null) {     buf.append(\"\\nLower level exception: \");     buf.append(getRootCause());   }   return buf.toString(); } "
"void recycle(){   wrapper=null;   request.recycle();   for (int i=0; i <= lastActiveFilter; i++) {     activeFilters[i].recycle();   }   lastValid=0;   pos=0;   lastActiveFilter=-1;   parsingHeader=true;   swallowInput=true;   headerParsePos=HeaderParsePosition.HEADER_START;   parsingRequestLine=true;   parsingRequestLinePhase=0;   parsingRequestLineEol=false;   parsingRequestLineStart=0;   parsingRequestLineQPos=-1;   headerData.recycle(); } "
"private boolean isNavigationKey(KeyEvent event){   InputMap inputMap=tree.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);   KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);   return inputMap != null && inputMap.get(key) != null; } "
"private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){   StringBuilder tmp=new StringBuilder(count);   int submode=initialSubmode;   int idx=0;   while (true) {     char ch=msg.charAt(startpos + idx); switch (submode) { case SUBMODE_ALPHA:       if (isAlphaUpper(ch)) {         if (ch == ' ') {           tmp.append((char)26);         }  else {           tmp.append((char)(ch - 65));         }       }  else {         if (isAlphaLower(ch)) {           submode=SUBMODE_LOWER;           tmp.append((char)27);           continue;         }  else         if (isMixed(ch)) {           submode=SUBMODE_MIXED;           tmp.append((char)28);           continue;         }  else {           tmp.append((char)29);           tmp.append((char)PUNCTUATION[ch]);           break;         }       }     break; case SUBMODE_LOWER:   if (isAlphaLower(ch)) {     if (ch == ' ') {       tmp.append((char)26);     }  else {       tmp.append((char)(ch - 97));     }   }  else {     if (isAlphaUpper(ch)) {       tmp.append((char)27);       tmp.append((char)(ch - 65));       break;     }  else     if (isMixed(ch)) {       submode=SUBMODE_MIXED;       tmp.append((char)28);       continue;     }  else {       tmp.append((char)29);       tmp.append((char)PUNCTUATION[ch]);       break;     }   } break; case SUBMODE_MIXED: if (isMixed(ch)) { tmp.append((char)MIXED[ch]); }  else { if (isAlphaUpper(ch)) {   submode=SUBMODE_ALPHA;   tmp.append((char)28);   continue; }  else if (isAlphaLower(ch)) {   submode=SUBMODE_LOWER;   tmp.append((char)27);   continue; }  else {   if (startpos + idx + 1 < count) {     char next=msg.charAt(startpos + idx + 1);     if (isPunctuation(next)) {       submode=SUBMODE_PUNCTUATION;       tmp.append((char)25);       continue;     }   }   tmp.append((char)29);   tmp.append((char)PUNCTUATION[ch]); } } break; default : if (isPunctuation(ch)) { tmp.append((char)PUNCTUATION[ch]); }  else { submode=SUBMODE_ALPHA; tmp.append((char)29); continue; } } idx++; if (idx >= count) { break; } } char h=0; int len=tmp.length(); for (int i=0; i < len; i++) { boolean odd=(i % 2) != 0; if (odd) { h=(char)((h * 30) + tmp.charAt(i)); sb.append(h); }  else { h=tmp.charAt(i); } } if ((len % 2) != 0) { sb.append((char)((h * 30) + 29)); } return submode; } "
"public DefaultTableModel(Vector columnNames,int rowCount){   setDataVector(newVector(rowCount),columnNames); } "
"public void testValueOfNegScaleNeg(){   long a=-98374823947823578L;   int scale=-12;   BigDecimal aNumber=BigDecimal.valueOf(a,scale);   String result=\"-9.8374823947823578E+28\";   assertTrue(\"incorrect value\",aNumber.toString().equals(result)); } "
"public void assignService(String universalId,String serviceName,Map values) throws AMConsoleException {   try {     String[] params={universalId,serviceName};     logEvent(\"ATTEMPT_IDENTITY_ASSIGN_SERVICE\",params);     AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);     amid.assignService(serviceName,values);     logEvent(\"SUCCEED_IDENTITY_ASSIGN_SERVICE\",params);   }  catch (  SSOException e) {     String[] paramsEx={universalId,serviceName,getErrorString(e)};     logEvent(\"SSO_EXCEPTION_IDENTITY_ASSIGN_SERVICE\",paramsEx);     debug.warning(\"EntitiesModelImpl.assignService\",e);     throw new AMConsoleException(getErrorString(e));   } catch (  IdRepoException e) {     debug.error(\"EntitiesModelImpl.assignService\",e);     String[] paramsEx={universalId,serviceName,getErrorString(e)};     logEvent(\"IDM_EXCEPTION_IDENTITY_ASSIGN_SERVICE\",paramsEx);     debug.warning(\"EntitiesModelImpl.assignService\",e);     throw new AMConsoleException(getErrorString(e));   } } "
"public static void decode(ByteBuffer data,int length,StringBuilder target) throws HpackException {   assert data.remaining() >= length;   int treePos=0;   boolean eosBits=true;   for (int i=0; i < length; ++i) {     byte b=data.get();     int bitPos=7;     while (bitPos >= 0) {       int val=DECODING_TABLE[treePos];       if (((1 << bitPos) & b) == 0) {         eosBits=false;         if ((val & LOW_TERMINAL_BIT) == 0) {           treePos=val & LOW_MASK;         }  else {           target.append((char)(val & LOW_MASK));           treePos=0;           eosBits=true;         }       }  else {         if ((val & HIGH_TERMINAL_BIT) == 0) {           treePos=(val >> 16) & LOW_MASK;         }  else {           target.append((char)((val >> 16) & LOW_MASK));           treePos=0;           eosBits=true;         }       }       bitPos--;     }   }   if (!eosBits) {     throw new HpackException(sm.getString(\"hpackhuffman.huffmanEncodedHpackValueDidNotEndWithEOS\"));   } } "
"void addNameToNameTree(String key,PdfObject value,PdfName treeType){   getNameTree(treeType).addEntry(key,value); } "
"public int indexOfIdenticalObject(Object obj){   NSObject nso=NSObject.wrap(obj);   for (int i=0; i < array.length; i++) {     if (array[i] == nso) {       return i;     }   }   return -1; } "
"private static int stopWindowsService(OutputStream outStream,OutputStream errStream){   NullOutputStream.wrapOrNullStream(outStream);   PrintStream err=NullOutputStream.wrapOrNullStream(errStream);   JDKLogging.disableLogging();   String serviceName=ConfigureWindowsService.getServiceName();   if (serviceName == null) {     printWrappedText(err,ERR_WINDOWS_SERVICE_NOT_FOUND.get());     return SERVICE_NOT_FOUND;   }   String[] cmd;   if (hasUAC()) {     cmd=new String[]{ConfigureWindowsService.getLauncherBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,ConfigureWindowsService.getLauncherAdministratorBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,\"net\",\"stop\",serviceName};   }  else {     cmd=new String[]{\"net\",\"stop\",serviceName};   }   try { switch (Runtime.getRuntime().exec(cmd).waitFor()) { case 0:       return SERVICE_STOP_SUCCESSFUL; case 2:     return SERVICE_STOP_SUCCESSFUL; default :   return SERVICE_STOP_ERROR; } }  catch (Throwable t) { printWrappedText(err,ERR_WINDOWS_SERVICE_STOP_ERROR.get()); printWrappedText(err,\"Exception:\" + t); return SERVICE_STOP_ERROR; } } "
"public void deleteArtworkField() throws KeyNotFoundException {   throw new UnsupportedOperationException(ErrorMessage.GENERIC_NOT_SUPPORTED.getMsg()); } "
"@DataProvider(name=\"dataForAttributeDescriptions\") public Object[][] dataForAttributeDescriptions(){   return new Object[][]{{\"cn\"},{\"CN\"},{\"objectClass\"},{\"cn;foo\"},{\"cn;FOO\"},{\"cn;bar\"},{\"cn;BAR\"},{\"cn;foo;bar\"},{\"cn;FOO;bar\"}}; } "
"public DefaultSignedAttributeTableGenerator(AttributeTable attributeTable){   if (attributeTable != null) {     table=attributeTable.toHashtable();   }  else {     table=new Hashtable();   } } "
"private boolean flagPoleHit(){   Shape intersection=SVGPath.intersect(spriteBoundsArray[5],SpriteHandler.getCurrentCast().get(2).getSpriteBounds());   return intersection.getBoundsInParent().getWidth() != -1; } "
"static MatchingRuleImpl collationLessThanOrEqualMatchingRule(Locale locale){   return new CollationLessThanOrEqualToMatchingRuleImpl(locale); } "
"public MaterialBarcodeScannerBuilder withFlashLightEnabledByDefault(){   mFlashEnabledByDefault=true;   return this; } "
"public static BlockMultiPlaceEvent callBlockMultiPlaceEvent(World world,EntityHuman who,EnumHand hand,List<BlockState> blockStates,int clickedX,int clickedY,int clickedZ){   CraftWorld craftWorld=world.getWorld();   CraftServer craftServer=world.getServer();   Player player=(Player)who.getBukkitEntity();   Block blockClicked=craftWorld.getBlockAt(clickedX,clickedY,clickedZ);   boolean canBuild=true;   for (int i=0; i < blockStates.size(); i++) {     if (!canBuild(craftWorld,player,blockStates.get(i).getX(),blockStates.get(i).getZ())) {       canBuild=false;       break;     }   }   org.bukkit.inventory.ItemStack item;   if (hand == EnumHand.MAIN_HAND) {     item=player.getInventory().getItemInMainHand();   }  else {     item=player.getInventory().getItemInOffHand();   }   BlockMultiPlaceEvent event=new BlockMultiPlaceEvent(blockStates,blockClicked,item,player,canBuild);   craftServer.getPluginManager().callEvent(event);   return event; } "
"public static int sizeOfChar(){   return 2; } "
"public static void fill(double[] array,double value){   for (int i=0; i < array.length; i++) {     array[i]=value;   } } "
"public BigInteger calculateAgreement(CipherParameters pubKey){   DHPublicKeyParameters pub=(DHPublicKeyParameters)pubKey;   if (!pub.getParameters().equals(dhParams)) {     throw new IllegalArgumentException(\"Diffie-Hellman public key has wrong parameters.\");   }   return pub.getY().modPow(key.getX(),dhParams.getP()); } "
"public ProfileDataException(String s){   super(s); } "
"public void next(){   index++; } "
"static void useMatchedValuesRequestControl(Connection connection) throws LdapException {   if (isSupported(MatchedValuesRequestControl.OID)) {     final String dn=\"uid=bjensen,ou=People,dc=example,dc=com\";     final SearchRequest request=Requests.newSearchRequest(dn,SearchScope.BASE_OBJECT,\"(objectclass=*)\",\"cn\").addControl(MatchedValuesRequestControl.newControl(true,\"(cn=Babs Jensen)\"));     final SearchResultEntry entry=connection.searchSingleEntry(request);     System.out.println(\"Reading entry with matched values request.\");     final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);     try {       writer.writeEntry(entry);       writer.close();     }  catch (    final IOException e) {       System.err.println(e.getMessage());       System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());     }   }  else {     System.err.println(\"MatchedValuesRequestControl not supported.\");   } } "
"public void test_read$BII_Exception() throws IOException {   DigestInputStream is=new DigestInputStream(inStream,digest);   byte[] buf=null;   try {     is.read(buf,-1,0);     fail(\"Test 1: NullPointerException expected.\");   }  catch (  NullPointerException e) {   }   buf=new byte[1000];   try {     is.read(buf,-1,0);     fail(\"Test 2: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     is.read(buf,0,-1);     fail(\"Test 3: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     is.read(buf,-1,-1);     fail(\"Test 4: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     is.read(buf,0,1001);     fail(\"Test 5: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     is.read(buf,1001,0);     fail(\"Test 6: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     is.read(buf,500,501);     fail(\"Test 7: IndexOutOfBoundsException expected.\");   }  catch (  IndexOutOfBoundsException e) {   }   is.close();   Support_ASimpleInputStream sis=new Support_ASimpleInputStream(true);   is=new DigestInputStream(sis,digest);   try {     is.read(buf,0,100);     fail(\"Test 9: IOException expected.\");   }  catch (  IOException e) {   }   sis.throwExceptionOnNextUse=false;   is.close(); } "
"public Text createTextNode(String data){   error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);   return null; } "
"private void updateNodeSizes(boolean updateAll){   int aY, counter, maxCounter;   TreeStateNode node;   updateNodeSizes=false;   for (aY=counter=0, maxCounter=visibleNodes.size(); counter < maxCounter; counter++) {     node=(TreeStateNode)visibleNodes.elementAt(counter);     node.setYOrigin(aY);     if (updateAll || !node.hasValidSize())     node.updatePreferredSize(counter);     aY+=node.getPreferredHeight();   } } "
"public DoubleArraySpliterator(double[] array,int additionalCharacteristics){   this(array,0,array.length,additionalCharacteristics); } "
"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {   int expectedModCount=modCount;   s.defaultWriteObject();   s.writeInt(size);   for (int i=0; i < size; i++) {     s.writeObject(elementData[i]);   }   if (modCount != expectedModCount) {     throw new ConcurrentModificationException();   } } "
"public void put(String key,Object value){   this.data.put(key,value); } "
"public String toStringImpl(){   return ip.toString(); } "
"public CertificateNotYetValidException(String message){   super(message); } "
"@Override public void connect(SocketAddress endpoint) throws IOException {   super.connect(endpoint);   init(); } "
"public void testConstrCharIntIntMathContext(){   char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};   int offset=3;   int len=12;   int precision=4;   RoundingMode rm=RoundingMode.CEILING;   MathContext mc=new MathContext(precision,rm);   BigDecimal result=new BigDecimal(value,offset,len,mc);   String res=\"3.805E-40\";   int resScale=43;   assertEquals(\"incorrect value\",res,result.toString());   assertEquals(\"incorrect scale\",resScale,result.scale());   try {     new BigDecimal(new char[]{},0,0,MathContext.DECIMAL32);     fail(\"NumberFormatException has not been thrown\");   }  catch (  NumberFormatException e) {   } } "
"public com.sun.identity.liberty.ws.common.jaxb.security.ValidityRestrictionConditionElement createValidityRestrictionConditionElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ValidityRestrictionConditionElementImpl(); } "
"@Override public boolean accept(File file){   String name=file.getName();   for (  String wildcard : wildcards) {     if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {       return true;     }   }   return false; } "
"public void clear(){   list.clear(); } "
"private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){   if (source == null) {     throw new NullPointerException(\"Source array was null.\");   }   if (destination == null) {     throw new NullPointerException(\"Destination array was null.\");   }   if (srcOffset < 0 || srcOffset + 3 >= source.length) {     throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and still process four bytes.\",source.length,srcOffset));   }   if (destOffset < 0 || destOffset + 2 >= destination.length) {     throw new IllegalArgumentException(String.format(\"Destination array with length %d cannot have offset of %d and still store three bytes.\",destination.length,destOffset));   }   byte[] DECODABET=getDecodabet(options);   if (source[srcOffset + 2] == EQUALS_SIGN) {     int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);     destination[destOffset]=(byte)(outBuff >>> 16);     return 1;   }  else   if (source[srcOffset + 3] == EQUALS_SIGN) {     int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);     destination[destOffset]=(byte)(outBuff >>> 16);     destination[destOffset + 1]=(byte)(outBuff >>> 8);     return 2;   }  else {     int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));     destination[destOffset]=(byte)(outBuff >> 16);     destination[destOffset + 1]=(byte)(outBuff >> 8);     destination[destOffset + 2]=(byte)(outBuff);     return 3;   } } "
"synchronized public void addDTM(DTM dtm,int id){   addDTM(dtm,id,0); } "
"public boolean visitStep(ExpressionOwner owner,NodeTest step){   return true; } "
"private Template templateWithNoAttribute(){   Template template=mock(Template.class);   when(template.hasAttribute(any(AttributeType.class))).thenReturn(false);   return template; } "
"public boolean isTypesOnly(){   return typesOnly; } "
"public boolean isAnyPolicyInhibited(){   return anyPolicyInhibited; } "
"public static String encodeFromFile(String filename) throws java.io.IOException {   String encodedData=null;   B64InputStream bis=null;   try {     java.io.File file=new java.io.File(filename);     byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];     int length=0;     int numBytes=0;     bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);     while ((numBytes=bis.read(buffer,length,4096)) >= 0) {       length+=numBytes;     }     encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);   }  catch (  java.io.IOException e) {     throw e;   }  finally {     try {       bis.close();     }  catch (    Exception e) {     }   }   return encodedData; } "
"ForkJoinWorkerThread(ForkJoinPool pool,ThreadGroup threadGroup,AccessControlContext acc){   super(threadGroup,null,\"aForkJoinWorkerThread\");   U.putOrderedObject(this,INHERITEDACCESSCONTROLCONTEXT,acc);   eraseThreadLocals();   this.pool=pool;   this.workQueue=pool.registerWorker(this); } "
"@Descriptor(\"Exit from the console.\") public void exit(){   System.exit(0); } "
"public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){   openFileChooser(uploadMsg,acceptType); } "
"private static void createDecryptMethod(MethodNode mn,boolean isStatic){   if (isStatic) {     mn.visitCode();     mn.visitInsn(Opcodes.ICONST_0);     mn.visitVarInsn(Opcodes.ISTORE,3);     mn.visitInsn(Opcodes.ICONST_0);     mn.visitVarInsn(Opcodes.ISTORE,4);     Label lbl0=new Label();     mn.visitJumpInsn(Opcodes.GOTO,lbl0);     Label lbl1=new Label();     mn.visitLabel(lbl1);     mn.visitFrame(Opcodes.F_APPEND,2,new Object[]{Opcodes.INTEGER,Opcodes.INTEGER},0,null);     mn.visitVarInsn(Opcodes.ALOAD,0);     mn.visitVarInsn(Opcodes.ILOAD,4);     mn.visitInsn(Opcodes.CALOAD);     mn.visitVarInsn(Opcodes.ISTORE,5);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitVarInsn(Opcodes.ILOAD,3);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\"java/lang/String\",\"length\",\"()I\",false);     mn.visitInsn(Opcodes.IREM);     mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\"java/lang/String\",\"charAt\",\"(I)C\",false);     mn.visitVarInsn(Opcodes.ISTORE,6);     mn.visitVarInsn(Opcodes.ILOAD,5);     mn.visitVarInsn(Opcodes.ILOAD,2);     mn.visitInsn(Opcodes.IADD);     mn.visitVarInsn(Opcodes.ILOAD,6);     mn.visitInsn(Opcodes.ISUB);     mn.visitInsn(Opcodes.I2C);     mn.visitVarInsn(Opcodes.ISTORE,7);     mn.visitVarInsn(Opcodes.ALOAD,0);     mn.visitVarInsn(Opcodes.ILOAD,4);     mn.visitVarInsn(Opcodes.ILOAD,7);     mn.visitInsn(Opcodes.CASTORE);     mn.visitIincInsn(3,1);     mn.visitIincInsn(4,1);     mn.visitLabel(lbl0);     mn.visitFrame(Opcodes.F_SAME,0,null,0,null);     mn.visitVarInsn(Opcodes.ILOAD,4);     mn.visitVarInsn(Opcodes.ALOAD,0);     mn.visitInsn(Opcodes.ARRAYLENGTH);     mn.visitJumpInsn(Opcodes.IF_ICMPLT,lbl1);     mn.visitTypeInsn(Opcodes.NEW,\"java/lang/String\");     mn.visitInsn(Opcodes.DUP);     mn.visitVarInsn(Opcodes.ALOAD,0);     mn.visitMethodInsn(Opcodes.INVOKESPECIAL,\"java/lang/String\",\"<init>\",\"([C)V\",false);     mn.visitInsn(Opcodes.ARETURN);     mn.visitMaxs(3,8);     mn.visitEnd();   }  else {     mn.visitCode();     mn.visitInsn(Opcodes.ICONST_0);     mn.visitVarInsn(Opcodes.ISTORE,4);     mn.visitInsn(Opcodes.ICONST_0);     mn.visitVarInsn(Opcodes.ISTORE,5);     Label l0=new Label();     mn.visitJumpInsn(Opcodes.GOTO,l0);     Label l1=new Label();     mn.visitLabel(l1);     mn.visitFrame(Opcodes.F_APPEND,2,new Object[]{Opcodes.INTEGER,Opcodes.INTEGER},0,null);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitVarInsn(Opcodes.ILOAD,5);     mn.visitInsn(Opcodes.CALOAD);     mn.visitVarInsn(Opcodes.ISTORE,6);     mn.visitVarInsn(Opcodes.ALOAD,2);     mn.visitVarInsn(Opcodes.ILOAD,4);     mn.visitVarInsn(Opcodes.ALOAD,2);     mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\"java/lang/String\",\"length\",\"()I\",false);     mn.visitInsn(Opcodes.IREM);     mn.visitMethodInsn(Opcodes.INVOKEVIRTUAL,\"java/lang/String\",\"charAt\",\"(I)C\",false);     mn.visitVarInsn(Opcodes.ISTORE,7);     mn.visitVarInsn(Opcodes.ILOAD,6);     mn.visitVarInsn(Opcodes.ILOAD,3);     mn.visitInsn(Opcodes.IADD);     mn.visitVarInsn(Opcodes.ILOAD,7);     mn.visitInsn(Opcodes.ISUB);     mn.visitInsn(Opcodes.I2C);     mn.visitVarInsn(Opcodes.ISTORE,8);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitVarInsn(Opcodes.ILOAD,5);     mn.visitVarInsn(Opcodes.ILOAD,8);     mn.visitInsn(Opcodes.CASTORE);     mn.visitIincInsn(4,1);     mn.visitIincInsn(5,1);     mn.visitLabel(l0);     mn.visitFrame(Opcodes.F_SAME,0,null,0,null);     mn.visitVarInsn(Opcodes.ILOAD,5);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitInsn(Opcodes.ARRAYLENGTH);     mn.visitJumpInsn(Opcodes.IF_ICMPLT,l1);     mn.visitTypeInsn(Opcodes.NEW,\"java/lang/String\");     mn.visitInsn(Opcodes.DUP);     mn.visitVarInsn(Opcodes.ALOAD,1);     mn.visitMethodInsn(Opcodes.INVOKESPECIAL,\"java/lang/String\",\"<init>\",\"([C)V\",false);     mn.visitInsn(Opcodes.ARETURN);     mn.visitMaxs(3,9);     mn.visitEnd();   } } "
"public DSTQueryResponse query(DSTQuery query) throws DSTException, InteractionRedirectException {   DSTUtils.debug.message(\"DSTClient:query:Init\");   if (query == null) {     DSTUtils.debug.message(\"DSTClient:query:null value\");     throw new DSTException(DSTUtils.bundle.getString(\"nullInputParams\"));   }   List request=new ArrayList();   request.add(DSTUtils.parseXML(query.toString(true,true)));   List response=sendMessage(request);   Element queryResponse=(Element)response.get(0);   return new DSTQueryResponse(queryResponse); } "
"public void testBusy_timeout() throws Exception, SQLException {   int counter=0;   ThreadPool threadPool=new ThreadPool(numThreads);   ResultSet userTabs=conn.getMetaData().getTables(null,null,null,null);   while (userTabs.next()) {     String tableName=userTabs.getString(\"TABLE_NAME\");     if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {       statement.execute(DatabaseCreator.DROP_TABLE1);     }   }   db.exec(DatabaseCreator.CREATE_TABLE3,null);   db.exec(DatabaseCreator.CREATE_TABLE1,null);   try {     conn.setAutoCommit(false);     db.busy_handler(null);     db.busy_timeout(0);     int id1=numOfRecords - 3;     threadPool.runTask(createTask2(id1,dbFile.getPath(),tracker));     int id2=numOfRecords + 3;     threadPool.runTask(createTask1(id2,dbFile.getPath(),tracker));     int oldID=5;     int newID=100;     threadPool.runTask(createTask3(oldID,dbFile.getPath(),newID,tracker));     threadPool.join();     List<String> errors=tracker.getErrors();     assertTrue(\"No error occurred on DB but should have\",errors.size() > 0);     assertEquals(errors.get(0),db.error_string(Constants.SQLITE_LOCKED));     assertEquals(errors.get(0),\"database is locked\");     db.exec(\"delete from \" + DatabaseCreator.TEST_TABLE1 + \" where 1\",null);     db.exec(\"delete from \" + DatabaseCreator.TEST_TABLE3 + \" where 1\",null);     db.busy_timeout(10000);     db.busy_handler(null);     tracker.reset();     threadPool=new ThreadPool(numThreads);     threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));     threadPool.runTask(createTask2(id2,dbFile.getPath(),tracker));     threadPool.join();     errors=tracker.getErrors();     if (errors.size() > 0) {       fail(\"busy timeout should prevent from lock exception!\");       for (      String s : errors) {         System.out.println(\"Round 2 Error\" + s);       }     }  else {     }   }   finally {     conn.setAutoCommit(true);     db.exec(DatabaseCreator.DROP_TABLE1,null);     db.exec(DatabaseCreator.DROP_TABLE3,null);   } } "
"public void run(){   try {     ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();     while (true) {       EventWrapper eventWrapper=null;       LinkedList eventsToDeliver; synchronized (this.eventMutex) {         while (pendingEvents.isEmpty()) {           if (this.isStopped) {             if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))             logger.logDebug(\"Stopped event scanner!!\");             return;           }           try {             threadHandle.ping();             eventMutex.wait(threadHandle.getPingIntervalInMillisecs());           }  catch (          InterruptedException ex) {             if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG))             logger.logDebug(\"Interrupted!\");             return;           }         }         eventsToDeliver=pendingEvents;         pendingEvents=new LinkedList();       }       ListIterator iterator=eventsToDeliver.listIterator();       while (iterator.hasNext()) {         eventWrapper=(EventWrapper)iterator.next();         if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {           logger.logDebug(\"Processing \" + eventWrapper + \"nevents \"+ eventsToDeliver.size());         }         try {           deliverEvent(eventWrapper);         }  catch (        Exception e) {           if (logger.isLoggingEnabled()) {             logger.logError(\"Unexpected exception caught while delivering event -- carrying on bravely\",e);           }         }       }     }   }   finally {     if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {       if (!this.isStopped) {         logger.logFatalError(\"Event scanner exited abnormally\");       }     }   } } "
"protected void registerChildren(){   super.registerChildren();   registerChild(PW_QUESTION_TITLE,StaticTextField.class);   registerChild(BUTTON_OK,Button.class);   registerChild(BUTTON_PREVIOUS,Button.class);   registerChild(PASSWORD_RESET_TILEDVIEW,PWResetQuestionTiledView.class); } "
"public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){   ReferenceQueue rq=new ReferenceQueue();   bool=new Boolean(true);   try {     WeakReference wr=new WeakReference(bool,rq);     assertTrue(\"Initialization failed.\",((Boolean)wr.get()).booleanValue());   }  catch (  Exception e) {     fail(\"Exception during test : \" + e.getMessage());   }   assertTrue(\"should always pass\",bool.booleanValue());   boolean exception=false;   try {     new WeakReference(bool,null);   }  catch (  NullPointerException e) {     exception=true;   }   assertTrue(\"Should not throw NullPointerException\",!exception); } "
"public MediaFieldParser(String mediaField){   lexer=new Lexer(\"charLexer\",mediaField); } "
"public ValidationResult isLocalHost(String host,Map props,IStateAccess state){   ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;   LocalizedMessage returnMessage=null;   try {     if ((host != null) && (host.length() > 0)) {       StringTokenizer st=new StringTokenizer(host,\".\");       String hostname=st.nextToken();       if (hostname != null) {         String localHost=InetAddress.getLocalHost().getHostName();         if (hostname.equals(localHost)) {           validRes=ValidationResultStatus.STATUS_SUCCESS;         }       }     }   }  catch (  Exception ex) {     Debug.log(\"NetworkValidator.isLocalHost(...) threw exception : \" + ex);   }   if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {     returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_LOCAL_HOST,new Object[]{host});   }   Debug.log(\"NetworkValidator : Is Host : \" + host + \" local ?  \"+ validRes.isSuccessful());   return new ValidationResult(validRes,null,returnMessage); } "
"void installBorder(JRootPane root){   int style=root.getWindowDecorationStyle();   if (style == JRootPane.NONE) {     LookAndFeel.uninstallBorder(root);   }  else {     LookAndFeel.installBorder(root,borderKeys[style]);   } } "
"public static String[] chars(final String value){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   return value.split(\"\"); } "
"public void add(int field,int amount){   if (amount == 0) {     return;   }   if (field < 0 || field >= ZONE_OFFSET) {     throw new IllegalArgumentException();   }   complete();   if (field == YEAR) {     LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();     d.addYear(amount);     pinDayOfMonth(d);     set(ERA,getEraIndex(d));     set(YEAR,d.getYear());     set(MONTH,d.getMonth() - 1);     set(DAY_OF_MONTH,d.getDayOfMonth());   }  else   if (field == MONTH) {     LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();     d.addMonth(amount);     pinDayOfMonth(d);     set(ERA,getEraIndex(d));     set(YEAR,d.getYear());     set(MONTH,d.getMonth() - 1);     set(DAY_OF_MONTH,d.getDayOfMonth());   }  else   if (field == ERA) {     int era=internalGet(ERA) + amount;     if (era < 0) {       era=0;     }  else     if (era > eras.length - 1) {       era=eras.length - 1;     }     set(ERA,era);   }  else {     long delta=amount;     long timeOfDay=0; switch (field) { case HOUR: case HOUR_OF_DAY:       delta*=60 * 60 * 1000;     break; case MINUTE:   delta*=60 * 1000; break; case SECOND: delta*=1000; break; case MILLISECOND: break; case WEEK_OF_YEAR: case WEEK_OF_MONTH: case DAY_OF_WEEK_IN_MONTH: delta*=7; break; case DAY_OF_MONTH: case DAY_OF_YEAR: case DAY_OF_WEEK: break; case AM_PM: delta=amount / 2; timeOfDay=12 * (amount % 2); break; } if (field >= HOUR) { setTimeInMillis(time + delta); return; } long fd=cachedFixedDate; timeOfDay+=internalGet(HOUR_OF_DAY); timeOfDay*=60; timeOfDay+=internalGet(MINUTE); timeOfDay*=60; timeOfDay+=internalGet(SECOND); timeOfDay*=1000; timeOfDay+=internalGet(MILLISECOND); if (timeOfDay >= ONE_DAY) { fd++; timeOfDay-=ONE_DAY; }  else if (timeOfDay < 0) { fd--; timeOfDay+=ONE_DAY; } fd+=delta; int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET); setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset); zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET); if (zoneOffset != 0) { setTimeInMillis(time + zoneOffset); long fd2=cachedFixedDate; if (fd2 != fd) { setTimeInMillis(time - zoneOffset); } } } } "
"public void readConfiguration() throws IOException, SecurityException {   checkPermission();   String cname=System.getProperty(\"java.util.logging.config.class\");   if (cname != null) {     try {       try {         Class<?> clz=ClassLoader.getSystemClassLoader().loadClass(cname);         clz.newInstance();         return;       }  catch (      ClassNotFoundException ex) {         Class<?> clz=Thread.currentThread().getContextClassLoader().loadClass(cname);         clz.newInstance();         return;       }     }  catch (    Exception ex) {       System.err.println(\"Logging configuration class \\\"\" + cname + \"\\\" failed\");       System.err.println(\"\" + ex);     }   }   String fname=System.getProperty(\"java.util.logging.config.file\");   if (fname == null) {     fname=System.getProperty(\"java.home\");     if (fname == null) {       throw new Error(\"Can't find java.home ??\");     }     File f=new File(fname,\"lib\");     f=new File(f,\"logging.properties\");     fname=f.getCanonicalPath();   }   try (final InputStream in=new FileInputStream(fname)){     final BufferedInputStream bin=new BufferedInputStream(in);     readConfiguration(bin);   }  } "
"public ShortLookupTable(int offset,short data[]){   super(offset,data.length);   numComponents=1;   numEntries=data.length;   this.data=new short[1][];   this.data[0]=data; } "
"private void updateRingColor(float interpolatedTime,Ring ring){   if (interpolatedTime > COLOR_START_DELAY_OFFSET) {     ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));   } } "
"public boolean isPureJAASModulePresent(final String configName,final Configuration configuration) throws AuthLoginException {   if (enforceJAASThread) {     return true;   }   if (null == configuration) {     return true;   }   final AppConfigurationEntry[] entries=configuration.getAppConfigurationEntry(configName);   if (entries == null) {     throw new AuthLoginException(\"amAuth\",AMAuthErrorCode.AUTH_CONFIG_NOT_FOUND,null);   }   for (  AppConfigurationEntry entry : entries) {     String className=entry.getLoginModuleName();     if (debug.messageEnabled()) {       debug.message(\"config entry: \" + className);     }     if (isPureJAASModule(className)) {       return true;     }  else     if (!isISModule(className)) {       categoriseModuleClassFromClassname(className);       if (isPureJAASModule(className)) {         return true;       }     }   }   return false; } "
"public SessionTracker(Context context,Session.StatusCallback callback,Session session,boolean startTracking){   this.callback=new CallbackWrapper(callback);   this.session=session;   this.receiver=new ActiveSessionBroadcastReceiver();   this.broadcastManager=LocalBroadcastManager.getInstance(context);   if (startTracking) {     startTracking();   } } "
"public static String composeStructFieldPath(String fieldNS,String fieldName) throws XMPException {   assertFieldNS(fieldNS);   assertFieldName(fieldName);   XMPPath fieldPath=XMPPathParser.expandXPath(fieldNS,fieldName);   if (fieldPath.size() != 2) {     throw new XMPException(\"The field name must be simple\",XMPError.BADXPATH);   }   return '/' + fieldPath.getSegment(XMPPath.STEP_ROOT_PROP).getName(); } "
"public void addCharOption(LocalizableMessage c,LocalizableMessage description,MenuResult<T> result){   addCharOption(c,description,new ResultCallback<T>(result)); } "
"public Pattern delimiter(){   return delimPattern; } "
"public NullLocationException(){   super(); } "
"public SessionName createSessionName(String name){   SessionNameField sessionNameImpl=new SessionNameField();   try {     sessionNameImpl.setValue(name);   }  catch (  SdpException s) {     s.printStackTrace();   }   return sessionNameImpl; } "
"public double noise(double x,double y,double z,double frequency,double amplitude){   return noise(x,y,z,frequency,amplitude,false); } "
"private boolean unixCryptPasswordMatches(ByteSequence plaintextPassword,ByteSequence storedPassword){   byte[] plaintextPasswordBytes=null;   ByteString userPWDigestBytes;   try {     plaintextPasswordBytes=plaintextPassword.toByteArray();     byte[] salt=storedPassword.copyTo(new byte[2]);     userPWDigestBytes=ByteString.wrap(crypt.crypt(plaintextPasswordBytes,salt));   }  catch (  Exception e) {     return false;   }  finally {     if (plaintextPasswordBytes != null) {       Arrays.fill(plaintextPasswordBytes,(byte)0);     }   }   return userPWDigestBytes.equals(storedPassword); } "
"public void testHasFeatureCore() throws Throwable {   Document doc;   DOMImplementation domImpl;   boolean state;   doc=(Document)load(\"staff\",builder);   domImpl=doc.getImplementation();   state=domImpl.hasFeature(\"core\",\"2.0\");   assertTrue(\"domimplementationFeaturecoreAssert\",state); } "
"public void putNameAndTypeDef(STypeDef type,LineCol lineCol) throws SyntaxException {   if (types.containsKey(type.fullName())) {     err.SyntaxException(\"duplicate type names \" + type.fullName(),lineCol);   }  else {     types.put(type.fullName(),type);   } } "
"public SQLDataException(String reason){   super(reason,null,0); } "
"private PlaPointFloat right_turn_next_corner(PlaPointFloat p_from_corner,double p_dist,PlaPointFloat p_to_corner,PlaPointFloat p_next_corner){   PlaPointFloat curr_tangential_point=p_from_corner.left_tangential_point(p_to_corner,p_dist);   if (curr_tangential_point == null) {     System.out.println(\"LocateFoundConnectionAlgo.right_turn_next_corner: left tangential point is null\");     return p_from_corner;   }   PlaSegmentFloat first_line=new PlaSegmentFloat(p_from_corner,curr_tangential_point);   curr_tangential_point=p_to_corner.right_tangential_point(p_next_corner,2 * p_dist + c_tolerance);   if (curr_tangential_point == null) {     System.out.println(\"LocateFoundConnectionAlgo.right_turn_next_corner: right tangential point is null\");     return p_from_corner;   }   PlaSegmentFloat second_line=new PlaSegmentFloat(p_to_corner,curr_tangential_point);   second_line=second_line.translate(p_dist);   return first_line.intersection(second_line); } "
"Reaper(){   super(\"File Reaper\");   setPriority(Thread.MAX_PRIORITY);   setDaemon(true); } "
"public void test_setII(){   Calendar cal=Calendar.getInstance(TimeZone.getTimeZone(\"EST\"));   cal.clear();   cal.set(Calendar.YEAR,2002);   assertTrue(\"Incorrect result 0: \" + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.MONTH,Calendar.MARCH);   assertTrue(\"Incorrect result 0a: \" + cal.getTime(),cal.getTime().getTime() == 1014958800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,24);   assertTrue(\"Incorrect result 0b: \" + cal.getTime(),cal.getTime().getTime() == 1011848400000L);   cal.set(Calendar.MONTH,Calendar.OCTOBER);   cal.set(Calendar.DATE,31);   cal.set(Calendar.MONTH,Calendar.NOVEMBER);   cal.set(Calendar.DATE,26);   assertTrue(\"Incorrect month: \" + cal.get(Calendar.MONTH),cal.get(Calendar.MONTH) == Calendar.NOVEMBER);   int dow=cal.get(Calendar.DAY_OF_WEEK);   cal.set(Calendar.DATE,27);   assertTrue(\"Incorrect DAY_OF_WEEK: \" + cal.get(Calendar.DAY_OF_WEEK) + \" expected: \"+ dow,cal.get(Calendar.DAY_OF_WEEK) != dow);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 0c1: \" + cal.getTime().getTime(),cal.getTime().getTime() == 1010379600000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);   assertTrue(\"Incorrect result 0c2: \" + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);   assertTrue(\"Incorrect result 0c3: \" + cal.getTime(),cal.getTime().getTime() == 1010034000000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_MONTH,2);   assertTrue(\"Incorrect result 0d: \" + cal.getTime(),cal.getTime().getTime() == 1010293200000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);   assertTrue(\"Incorrect result 0e: \" + cal.getTime(),cal.getTime().getTime() == 1010898000000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,11);   assertTrue(\"Incorrect result 0f: \" + cal.getTime(),cal.getTime().getTime() == 1015736400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,24);   cal.set(Calendar.WEEK_OF_YEAR,11);   assertTrue(\"Incorrect result 0g: \" + cal.getTime(),cal.getTime().getTime() == 1011848400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.get(Calendar.WEEK_OF_YEAR);   cal.set(Calendar.WEEK_OF_YEAR,11);   assertTrue(\"Incorrect result 0h: \" + cal.getTime(),cal.getTime().getTime() == 1015909200000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,170);   cal.set(Calendar.WEEK_OF_YEAR,11);   cal.set(Calendar.MONTH,Calendar.JANUARY);   cal.set(Calendar.DATE,5);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 1: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,11);   cal.set(Calendar.MONTH,Calendar.JANUARY);   cal.set(Calendar.DATE,5);   cal.set(Calendar.DAY_OF_YEAR,170);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 1a: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DATE,11);   cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);   assertTrue(\"Incorrect result 1b: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);   assertEquals(\"Incorrect result 1b: \" + cal.getTime(),1015304400000L,cal.getTime().getTime());   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);   cal.set(Calendar.WEEK_OF_MONTH,3);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DATE,5);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 2: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DATE,5);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 3: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);   cal.set(Calendar.WEEK_OF_MONTH,3);   cal.set(Calendar.DATE,25);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   assertTrue(\"Incorrect result 4: \" + cal.getTime(),cal.getTime().getTime() == 1010984400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,11);   cal.set(Calendar.DATE,25);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   cal.set(Calendar.MONTH,Calendar.JANUARY);   assertTrue(\"Incorrect result 5: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DATE,11);   cal.set(Calendar.MONTH,Calendar.MARCH);   assertTrue(\"Incorrect result 5a: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DATE,11);   cal.set(Calendar.WEEK_OF_MONTH,1);   cal.set(Calendar.MONTH,Calendar.MARCH);   assertTrue(\"Incorrect result 5b: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DATE,5);   cal.set(Calendar.WEEK_OF_MONTH,3);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   cal.set(Calendar.MONTH,Calendar.MARCH);   assertTrue(\"Incorrect result 5c: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DATE,11);   assertTrue(\"Incorrect result 6: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,12);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   cal.set(Calendar.DATE,14);   assertTrue(\"Incorrect result 7: \" + cal.getTime(),cal.getTime().getTime() == 1010984400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,70);   cal.set(Calendar.MONTH,Calendar.JANUARY);   assertTrue(\"Incorrect result 8: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,170);   cal.set(Calendar.DATE,11);   cal.set(Calendar.MONTH,Calendar.MARCH);   assertTrue(\"Incorrect result 8a: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,15);   cal.set(Calendar.DAY_OF_YEAR,70);   cal.set(Calendar.MONTH,Calendar.JANUARY);   assertTrue(\"Incorrect result 8b: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,70);   cal.set(Calendar.DATE,14);   assertTrue(\"Incorrect result 9: \" + cal.getTime(),cal.getTime().getTime() == 1010984400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_YEAR,15);   cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);   cal.set(Calendar.DATE,14);   assertTrue(\"Incorrect result 9a: \" + cal.getTime(),cal.getTime().getTime() == 1010984400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);   cal.set(Calendar.DATE,14);   cal.set(Calendar.WEEK_OF_YEAR,11);   assertTrue(\"Incorrect result 9b: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,14);   cal.set(Calendar.WEEK_OF_YEAR,11);   assertTrue(\"Incorrect result 9c: \" + cal.getTime(),cal.getTime().getTime() == 1010984400000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.WEEK_OF_MONTH,1);   cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DATE,11);   assertTrue(\"Incorrect result 9d: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,70);   cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);   assertTrue(\"Incorrect result 10: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,11);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);   assertTrue(\"Incorrect result 11: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,11);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.WEEK_OF_YEAR,15);   assertTrue(\"Incorrect result 12: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DATE,11);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.WEEK_OF_MONTH,1);   assertTrue(\"Incorrect result 13: \" + cal.getTime(),cal.getTime().getTime() == 1015822800000L);   cal.clear();   cal.set(Calendar.YEAR,2002);   cal.set(Calendar.DAY_OF_YEAR,111);   cal.get(Calendar.YEAR);   cal.set(Calendar.MONTH,Calendar.MARCH);   cal.set(Calendar.AM_PM,Calendar.AM);   assertTrue(\"Incorrect result 14: \" + cal.getTime(),cal.getTime().getTime() == 1016686800000L);   int hour=cal.get(Calendar.HOUR);   cal.set(Calendar.HOUR,hour);   cal.set(Calendar.AM_PM,Calendar.PM);   assertEquals(\"AM_PM not changed\",Calendar.PM,cal.get(Calendar.AM_PM));   cal.set(Calendar.AM_PM,Calendar.AM);   assertEquals(\"AM_PM was changed 1\",Calendar.AM,cal.get(Calendar.AM_PM));   int hourOfDay=cal.get(Calendar.HOUR_OF_DAY);   hour=cal.get(Calendar.HOUR);   cal.set(Calendar.AM_PM,Calendar.PM);   assertEquals(\"AM_PM was changed 2\",Calendar.PM,cal.get(Calendar.AM_PM));   assertEquals(hour,cal.get(Calendar.HOUR));   assertEquals(hourOfDay + 12,cal.get(Calendar.HOUR_OF_DAY));   cal=Calendar.getInstance();   int oldValue=cal.get(Calendar.AM_PM);   int newValue=(oldValue == Calendar.AM) ? Calendar.PM : Calendar.AM;   cal.set(Calendar.AM_PM,newValue);   newValue=cal.get(Calendar.AM_PM);   assertTrue(newValue != oldValue); } "
"public static String formatDate(Date d){   if (d == null) {     return \"\";   }   return new SimpleDateFormat(DATE_FORMAT).format(d); } "
"private StringBuilder encodeProduct(StringBuilder tokens){   ListIterator it=productTokens.listIterator();   while (it.hasNext()) {     tokens.append((String)it.next());   }   return tokens; } "
"static void signAssertion(String realm,String idpEntityID,Assertion assertion) throws SAML2Exception {   String classMethod=\"IDPSSOUtil.signAssertion: \";   KeyProvider kp=KeyUtil.getKeyProviderInstance();   if (kp == null) {     SAML2Utils.debug.error(classMethod + \"Unable to get a key provider instance.\");     throw new SAML2Exception(SAML2Utils.bundle.getString(\"nullKeyProvider\"));   }   String idpSignCertAlias=SAML2Utils.getSigningCertAlias(realm,idpEntityID,SAML2Constants.IDP_ROLE);   if (idpSignCertAlias == null) {     SAML2Utils.debug.error(classMethod + \"Unable to get the hosted IDP signing certificate alias.\");     throw new SAML2Exception(SAML2Utils.bundle.getString(\"missingSigningCertAlias\"));   }   String encryptedKeyPass=SAML2Utils.getSigningCertEncryptedKeyPass(realm,idpEntityID,SAML2Constants.IDP_ROLE);   PrivateKey key;   if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {     key=kp.getPrivateKey(idpSignCertAlias);   }  else {     key=kp.getPrivateKey(idpSignCertAlias,encryptedKeyPass);   }   assertion.sign(key,kp.getX509Certificate(idpSignCertAlias)); } "
"private boolean continueLine(String line){   int slashCount=0;   int index=line.length() - 1;   while ((index >= 0) && (line.charAt(index--) == '\\\\')) {     slashCount++;   }   return (slashCount % 2 == 1); } "
"public boolean contains(BrdViaInfo p_via_info){   for (  BrdViaInfo curr_info : this.vinfo_list) {     if (p_via_info == curr_info) {       return true;     }   }   return false; } "
"public boolean offer(E e,long timeout,TimeUnit unit){   return offer(e); } "
"static String[] splitNameAndValue(String selector){   int eq=selector.indexOf('=');   int pos=1;   if (selector.charAt(pos) == '?') {     pos++;   }   String name=selector.substring(pos,eq);   pos=eq + 1;   char quote=selector.charAt(pos);   pos++;   int end=selector.length() - 2;   StringBuffer value=new StringBuffer(end - eq);   while (pos < end) {     value.append(selector.charAt(pos));     pos++;     if (selector.charAt(pos) == quote) {       pos++;     }   }   return new String[]{name,value.toString()}; } "
"public boolean checkIfReloadConfig() throws Exception {   File cfgFile;   try {     cfgFile=new File(FileUtils.getFullPath(xmlFilePath));   }  catch (  Exception e) {     if (this.debug) {       throw e;     }     return false;   }   return (cfgFile.lastModified() > this.lastCfgModificationDate); } "
"@Override public synchronized void backgroundProcess(){   if (getState().isAvailable() && getEnabled() && writer != null && buffered) {     writer.flush();   } } "
"protected void fireActionPerformed(ActionEvent e){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == ActionListener.class) {       ((ActionListener)listeners[i + 1]).actionPerformed(e);     }   } } "
"public boolean isValid(File file){   try {     validateRootDirectory(file);     return true;   }  catch (  IllegalArgumentException e) {     return false;   } } "
"private static <T>void displayPropertySyntax(ConsoleApplication app,PropertyDefinition<T> d){   PropertyDefinitionUsageBuilder b=new PropertyDefinitionUsageBuilder(true);   TableBuilder builder=new TableBuilder();   builder.startRow();   builder.appendCell(INFO_EDITOR_HEADING_SYNTAX.get());   builder.appendCell(b.getUsage(d));   TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());   printer.setDisplayHeadings(false);   printer.setIndentWidth(4);   printer.setColumnWidth(1,0);   builder.print(printer); } "
"public PluginResult.PostOperation invokePostOperationDeletePlugins(PostOperationDeleteOperation deleteOperation){   PluginResult.PostOperation result=null;   PluginResult.PostOperation finalResult=null;   ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(deleteOperation);   for (  DirectoryServerPlugin p : postOperationDeletePlugins) {     if (isInternalOperation(deleteOperation,p) || isSkipped(skippedPlugins,p)) {       continue;     }     try {       result=p.doPostOperation(deleteOperation);     }  catch (    Exception e) {       logException(deleteOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);     }     if (result == null) {       logNullResult(deleteOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);     }  else     if (!result.continueProcessing()) {       finalResult=result;     }   }   if (result == null) {     finalResult=PluginResult.PostOperation.continueOperationProcessing();   }  else   if (finalResult == null) {     finalResult=result;   }   return finalResult; } "
"public static void i(String tag,String msg,Object... args){   if (sLevel > LEVEL_INFO) {     return;   }   if (args.length > 0) {     msg=String.format(msg,args);   }   Log.i(tag,msg); } "
"public static ItemStack deserialize(Map<String,Object> args){   Material type=Material.getMaterial((String)args.get(\"type\"));   short damage=0;   int amount=1;   if (args.containsKey(\"damage\")) {     damage=((Number)args.get(\"damage\")).shortValue();   }   if (args.containsKey(\"amount\")) {     amount=((Number)args.get(\"amount\")).intValue();   }   ItemStack result=new ItemStack(type,amount,damage);   if (args.containsKey(\"enchantments\")) {     Object raw=args.get(\"enchantments\");     if (raw instanceof Map) {       Map<?,?> map=(Map<?,?>)raw;       for (      Map.Entry<?,?> entry : map.entrySet()) {         Enchantment enchantment=Enchantment.getByName(entry.getKey().toString());         if ((enchantment != null) && (entry.getValue() instanceof Integer)) {           result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue());         }       }     }   }  else   if (args.containsKey(\"meta\")) {     Object raw=args.get(\"meta\");     if (raw instanceof ItemMeta) {       result.setItemMeta((ItemMeta)raw);     }   }   return result; } "
"OpenAMClientRegistration(AMIdentity amIdentity,PEMDecoder pemDecoder,OpenIdResolverService resolverService,OAuth2ProviderSettings providerSettings,ClientAuthenticationFailureFactory failureFactory) throws InvalidClientException {   this.amIdentity=amIdentity;   this.pemDecoder=pemDecoder;   this.resolverService=resolverService;   this.providerSettings=providerSettings;   try {     this.digest=MessageDigest.getInstance(\"SHA-256\");   }  catch (  NoSuchAlgorithmException e) {     throw failureFactory.getException(\"SHA-256 algorithm MessageDigest not available\");   } } "
"@Override public void removeNotificationListener(NotificationListener listener,NotificationFilter filter,Object object) throws ListenerNotFoundException {   broadcaster.removeNotificationListener(listener,filter,object); } "
"public static void callMethod(final Object obj,final String methodName,final Object... args) throws InvocationTargetException {   callMethod(obj,methodName,false,args); } "
"public final void testIsRevocationEnabled() throws Exception {   Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();   if (taSet == null) {     fail(getName() + \": not performed (could not create test TrustAnchor set)\");   }   PKIXParameters p=new PKIXParameters(taSet);   assertTrue(p.isRevocationEnabled());   CertificateFactory cf=CertificateFactory.getInstance(\"X.509\");   TestUtils.initCertPathSSCertChain();   Set<TrustAnchor> taSet2=Collections.singleton(new TrustAnchor(TestUtils.rootCertificateSS,null));   p=new PKIXParameters(taSet2);   assertTrue(p.isRevocationEnabled());   p.setRevocationEnabled(false);   assertFalse(p.isRevocationEnabled()); } "
"protected void diagnoseMultistepList(int matchCount,int lengthToTest,boolean isGlobal){   if (matchCount > 0) {     System.err.print(\"Found multistep matches: \" + matchCount + \", \"+ lengthToTest+ \" length\");     if (isGlobal)     System.err.println(\" (global)\");  else     System.err.println();   } } "
"public void sendEmail(String from,String to,String subject,String message,Map<String,String> options) throws NoEmailSentException {   if (to == null) {     if (debug.messageEnabled()) {       debug.message(\"DefaultEmailGatewayImpl::sendEmail to header is empty\");     }     return;   }   try {     setOptions(options);     String tos[]=new String[]{to};     AMSendMail sendMail=new AMSendMail();     if (smtpHostName == null || smtpHostPort == null || smtpUserName == null || smtpUserPassword == null || smtpSSLEnabled == null) {       sendMail.postMail(tos,subject,message,from);       OAuthUtil.debugWarning(\"DefaultEmailGatewayImpl.sendEmail() :\" + \"sending email using the defaults localhost and port 25\");     }  else {       sendMail.postMail(tos,subject,message,from,\"UTF-8\",smtpHostName,smtpHostPort,smtpUserName,smtpUserPassword,sslEnabled);     }     OAuthUtil.debugMessage(\"DefaultEmailGatewayImpl.sendEmail() : \" + \"email sent to : \" + to + \".\");   }  catch (  Exception ex) {     debug.error(\"DefaultEmailGatewayImpl.sendEmail() : \" + \"Exception in sending email : \",ex);     throw new NoEmailSentException(ex);   } } "
"private String findAlias(String varName){   if (aliases == null)   return varName;   String alias=aliases.get(varName);   if (alias == null) {     return varName;   }   return alias; } "
"private void execute(final HttpServletRequest request,final HttpServletResponse response,final IConfiguration configuration,final ServletContext sc,final Object... params) throws ConnectorException {   Command com;   try {     com=command.getClass().newInstance();   }  catch (  IllegalAccessException e1) {     throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);   } catch (  InstantiationException e1) {     throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);   }   if (com == null) {     throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_INVALID_COMMAND);   }   com.runCommand(request,response,configuration,params); } "
"public boolean removeAudienceRestrictionCondition(String audience){   Iterator it=_arcs.iterator();   while (it.hasNext()) {     AudienceRestrictionCondition arc=(AudienceRestrictionCondition)it.next();     if (arc.containsAudience(audience)) {       return arc.removeAudience(audience);     }   }   return false; } "
"private static void initializeInstalledLAFs(Properties swingProps){   String ilafsString=swingProps.getProperty(installedLAFsKey);   if (ilafsString == null) {     return;   }   Vector<String> lafs=new Vector<String>();   StringTokenizer st=new StringTokenizer(ilafsString,\",\",false);   while (st.hasMoreTokens()) {     lafs.addElement(st.nextToken());   }   Vector<LookAndFeelInfo> ilafs=new Vector<LookAndFeelInfo>(lafs.size());   for (  String laf : lafs) {     String name=swingProps.getProperty(makeInstalledLAFKey(laf,\"name\"),laf);     String cls=swingProps.getProperty(makeInstalledLAFKey(laf,\"class\"));     if (cls != null) {       ilafs.addElement(new LookAndFeelInfo(name,cls));     }   }   LookAndFeelInfo[] installedLAFs=new LookAndFeelInfo[ilafs.size()];   for (int i=0; i < ilafs.size(); i++) {     installedLAFs[i]=ilafs.elementAt(i);   }   getLAFState().installedLAFs=installedLAFs; } "
"public void removeObserver(final FileAlterationObserver observer){   if (observer != null) {     while (observers.remove(observer)) {     }   } } "
"public static Response parseXML(InputStream is) throws SAMLException {   Document doc=XMLUtils.toDOMDocument(is,SAMLUtils.debug);   Element root=doc.getDocumentElement();   return new Response(root); } "
"@Override public void sendError(int status,String message) throws IOException {   if (isCommitted()) {     throw new IllegalStateException(sm.getString(\"coyoteResponse.sendError.ise\"));   }   if (included) {     return;   }   setError();   getCoyoteResponse().setStatus(status);   getCoyoteResponse().setMessage(message);   resetBuffer();   setSuspended(true); } "
"public void paintFileChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public Name addAll(int posn,Name n) throws InvalidNameException {   if (n instanceof CompoundName) {     impl.addAll(posn,n.getAll());     return this;   }  else {     throw new InvalidNameException(\"Not a compound name: \" + n.toString());   } } "
"public SelfIteratorNoPredicate() throws javax.xml.transform.TransformerException {   super(null); } "
"protected void loadChildren(ViewFactory f){   Document doc=getDocument();   int offs0=getStartOffset();   int offs1=getEndOffset();   append(createZone(offs0,offs1));   handleInsert(offs0,offs1 - offs0); } "
"public TransformerFactoryConfigurationError(String msg){   super(msg);   this.exception=null; } "
"protected Set<String> policiesEligibleForUpgrade(String appName,String realm) throws UpgradeException {   try {     return DataStore.getInstance().search(getAdminSubject(),realm,MessageFormat.format(POLICY_SEARCH,appName),0,false,false);   }  catch (  EntitlementException ee) {     throw new UpgradeException(\"Policy search failed for application \" + appName + \" in realm \"+ realm,ee);   } } "
"public DefaultTreeModel(TreeNode root,boolean asksAllowsChildren){   super();   this.root=root;   this.asksAllowsChildren=asksAllowsChildren; } "
"public void runTest() throws Throwable {   Document doc;   Document ownerDocument;   doc=(Document)load(\"hc_staff\",false);   ownerDocument=doc.getOwnerDocument();   assertNull(\"nodeGetOwnerDocumentNullAssert1\",ownerDocument); } "
"public boolean containsValue(long val){   for (  NSObject o : dict.values()) {     if (o.getClass().equals(NSNumber.class)) {       NSNumber num=(NSNumber)o;       if (num.isInteger() && num.intValue() == val)       return true;     }   }   return false; } "
"public TaskClientException(Throwable cause){   super(cause); } "
"private void buildPutField(MethodVisitor methodVisitor,CodeInfo info,Ins.PutField putField){   buildValueAccess(methodVisitor,info,putField.obj(),true);   buildValueAccess(methodVisitor,info,putField.value(),true);   methodVisitor.visitFieldInsn(Opcodes.PUTFIELD,typeToInternalName(putField.field().declaringType()),putField.field().name(),typeToDesc(putField.field().type()));   info.pop(2); } "
"private void determineCrossSize(int flexDirection,int widthMeasureSpec,int heightMeasureSpec,int paddingAlongCrossAxis){   int mode;   int size; switch (flexDirection) { case FLEX_DIRECTION_ROW: case FLEX_DIRECTION_ROW_REVERSE:     mode=MeasureSpec.getMode(heightMeasureSpec);   size=MeasureSpec.getSize(heightMeasureSpec); break; case FLEX_DIRECTION_COLUMN: case FLEX_DIRECTION_COLUMN_REVERSE: mode=MeasureSpec.getMode(widthMeasureSpec); size=MeasureSpec.getSize(widthMeasureSpec); break; default : throw new IllegalArgumentException(\"Invalid flex direction: \" + flexDirection); } if (mode == MeasureSpec.EXACTLY) { int totalCrossSize=getSumOfCrossSize() + paddingAlongCrossAxis; if (mFlexLines.size() == 1) { mFlexLines.get(0).mCrossSize=size - paddingAlongCrossAxis; }  else if (mFlexLines.size() >= 2 && totalCrossSize < size) { switch (mAlignContent) { case ALIGN_CONTENT_STRETCH: { float freeSpaceUnit=(size - totalCrossSize) / (float)mFlexLines.size(); float accumulatedError=0; for (int i=0, flexLinesSize=mFlexLines.size(); i < flexLinesSize; i++) { FlexLine flexLine=mFlexLines.get(i); float newCrossSizeAsFloat=flexLine.mCrossSize + freeSpaceUnit; if (i == mFlexLines.size() - 1) { newCrossSizeAsFloat+=accumulatedError; accumulatedError=0; } int newCrossSize=Math.round(newCrossSizeAsFloat); accumulatedError+=(newCrossSizeAsFloat - newCrossSize); if (accumulatedError > 1) { newCrossSize+=1; accumulatedError-=1; }  else if (accumulatedError < -1) { newCrossSize-=1; accumulatedError+=1; } flexLine.mCrossSize=newCrossSize; } break; } case ALIGN_CONTENT_SPACE_AROUND: { int spaceTopAndBottom=size - totalCrossSize; int numberOfSpaces=mFlexLines.size() * 2; spaceTopAndBottom=spaceTopAndBottom / numberOfSpaces; List<FlexLine> newFlexLines=new ArrayList<>(); FlexLine dummySpaceFlexLine=new FlexLine(); dummySpaceFlexLine.mCrossSize=spaceTopAndBottom; for (FlexLine flexLine : mFlexLines) { newFlexLines.add(dummySpaceFlexLine); newFlexLines.add(flexLine); newFlexLines.add(dummySpaceFlexLine); } mFlexLines=newFlexLines; break; } case ALIGN_CONTENT_SPACE_BETWEEN: { float spaceBetweenFlexLine=size - totalCrossSize; int numberOfSpaces=mFlexLines.size() - 1; spaceBetweenFlexLine=spaceBetweenFlexLine / (float)numberOfSpaces; float accumulatedError=0; List<FlexLine> newFlexLines=new ArrayList<>(); for (int i=0, flexLineSize=mFlexLines.size(); i < flexLineSize; i++) { FlexLine flexLine=mFlexLines.get(i); newFlexLines.add(flexLine); if (i != mFlexLines.size() - 1) { FlexLine dummySpaceFlexLine=new FlexLine(); if (i == mFlexLines.size() - 2) { dummySpaceFlexLine.mCrossSize=Math.round(spaceBetweenFlexLine + accumulatedError); accumulatedError=0; }  else { dummySpaceFlexLine.mCrossSize=Math.round(spaceBetweenFlexLine); } accumulatedError+=(spaceBetweenFlexLine - dummySpaceFlexLine.mCrossSize); if (accumulatedError > 1) { dummySpaceFlexLine.mCrossSize+=1; accumulatedError-=1; }  else if (accumulatedError < -1) { dummySpaceFlexLine.mCrossSize-=1; accumulatedError+=1; } newFlexLines.add(dummySpaceFlexLine); } } mFlexLines=newFlexLines; break; } case ALIGN_CONTENT_CENTER: { int spaceAboveAndBottom=size - totalCrossSize; spaceAboveAndBottom=spaceAboveAndBottom / 2; List<FlexLine> newFlexLines=new ArrayList<>(); FlexLine dummySpaceFlexLine=new FlexLine(); dummySpaceFlexLine.mCrossSize=spaceAboveAndBottom; for (int i=0, flexLineSize=mFlexLines.size(); i < flexLineSize; i++) { if (i == 0) { newFlexLines.add(dummySpaceFlexLine); } FlexLine flexLine=mFlexLines.get(i); newFlexLines.add(flexLine); if (i == mFlexLines.size() - 1) { newFlexLines.add(dummySpaceFlexLine); } } mFlexLines=newFlexLines; break; } case ALIGN_CONTENT_FLEX_END: { int spaceTop=size - totalCrossSize; FlexLine dummySpaceFlexLine=new FlexLine(); dummySpaceFlexLine.mCrossSize=spaceTop; mFlexLines.add(0,dummySpaceFlexLine); break; } } } } } "
"public SaltedSHA1FieldStorageScheme() throws Exception {   super(SHA1_LENGTH,ALGORITHM_SHA_1); } "
"public static final boolean isMultipartContent(HttpServletRequest request){   if (!POST_METHOD.equalsIgnoreCase(request.getMethod())) {     return false;   }   return FileUploadBase.isMultipartContent(new ServletRequestContext(request)); } "
"private static void registerVariants(){   for (  String name : calendarProperties.stringPropertyNames()) {     if (name.startsWith(PROP_PREFIX)) {       String id=name.substring(PROP_PREFIX.length());       if (id.indexOf('.') >= 0) {         continue;       }       if (id.equals(INSTANCE.getId())) {         continue;       }       try {         HijrahChronology chrono=new HijrahChronology(id);         AbstractChronology.registerChrono(chrono);       }  catch (      DateTimeException ex) {         PlatformLogger logger=PlatformLogger.getLogger(\"java.time.chrono\");         logger.severe(\"Unable to initialize Hijrah calendar: \" + id,ex);       }     }   } } "
"@Override public void forceResort(){   updateDataArray();   fireTableDataChanged(); } "
"public static ComponentUI createUI(JComponent c){   return new SynthMenuItemUI(); } "
"public boolean equals(Timestamp theTimestamp){   if (theTimestamp == null) {     return false;   }   return (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos()); } "
"public AssertionManagerClient(String[] urls) throws SAMLException {   try {     stub=new SOAPClient(urls);     useLocal=false;   }  catch (  Exception e) {     if (SAMLUtils.debug.warningEnabled()) {       SAMLUtils.debug.warning(\"AssertionManagerClient() Exception\",e);     }     throw (new SAMLException(e.getMessage()));   } } "
"public ModifyCommonMsg(OperationContext ctx,DN dn){   super(ctx,dn); } "
"public PdfObject fillDictionary(){   PdfArray gr=new PdfArray();   for (  PdfLayer layer : layers) {     if (layer.getTitle() == null)     gr.add(layer.getIndirectReference());   }   getPdfObject().put(PdfName.OCGs,gr);   PdfArray rbGroups=null;   PdfDictionary d=getPdfObject().getAsDictionary(PdfName.D);   if (d != null)   rbGroups=d.getAsArray(PdfName.RBGroups);   d=new PdfDictionary();   if (rbGroups != null)   d.put(PdfName.RBGroups,rbGroups);   getPdfObject().put(PdfName.D,d);   List<PdfLayer> docOrder=new ArrayList<>(layers);   for (int i=0; i < docOrder.size(); i++) {     PdfLayer layer=docOrder.get(i);     if (layer.getParent() != null) {       docOrder.remove(layer);       i--;     }   }   PdfArray order=new PdfArray();   for (  Object element : docOrder) {     PdfLayer layer=(PdfLayer)element;     getOCGOrder(order,layer);   }   d.put(PdfName.Order,order);   PdfArray off=new PdfArray();   for (  Object element : layers) {     PdfLayer layer=(PdfLayer)element;     if (layer.getTitle() == null && !layer.isOn())     off.add(layer.getIndirectReference());   }   if (off.size() > 0)   d.put(PdfName.OFF,off);  else   d.remove(PdfName.OFF);   PdfArray locked=new PdfArray();   for (  PdfLayer layer : layers) {     if (layer.getTitle() == null && layer.isLocked())     locked.add(layer.getIndirectReference());   }   if (locked.size() > 0)   d.put(PdfName.Locked,locked);  else   d.remove(PdfName.Locked);   d.remove(PdfName.AS);   addASEvent(PdfName.View,PdfName.Zoom);   addASEvent(PdfName.View,PdfName.View);   addASEvent(PdfName.Print,PdfName.Print);   addASEvent(PdfName.Export,PdfName.Export);   return getPdfObject(); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   Subject adminSubject=SubjectUtils.createSubject(adminSSOToken);   String realm=getStringOptionValue(IArgument.REALM_NAME);   InputStream xacmlInputStream=getXacmlInputStream(realm);   logStart(realm);   if (!XACMLUtils.hasPermission(realm,adminSSOToken,\"MODIFY\")) {     String errorMessage=MessageFormat.format(getResourceString(\"permission-denied\"),\"create-xacml\",getAdminID());     CLIException clie=new CLIException(errorMessage,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);     logException(realm,clie);     throw clie;   }   List<ImportStep> importSteps;   try {     PrivilegeValidator privilegeValidator=new PrivilegeValidator(new RealmValidator(new OrganizationConfigManager(adminSSOToken,realm)));     ApplicationServiceFactory factory=InjectorHolder.getInstance(ApplicationServiceFactory.class);     ResourceTypeService service=InjectorHolder.getInstance(ResourceTypeService.class);     XACMLExportImport xacmlExportImport=new XACMLExportImport(new XACMLExportImport.PrivilegeManagerFactory(),new XACMLReaderWriter(),privilegeValidator,new SearchFilterFactory(),PrivilegeManager.debug,factory,service);     importSteps=xacmlExportImport.importXacml(realm,xacmlInputStream,adminSubject,isDryRun());   }  catch (  EntitlementException e) {     debugError(\"CreateXACML.handleRequest\",e);     logException(realm,e);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     debugError(\"CreateXACML.handleRequest\",e);     logException(realm,e);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   }   if (importSteps.isEmpty()) {     String message=getResourceString(\"no-policies-provided\");     logNothingToImport(realm,message);     getOutputWriter().printlnMessage(message);   }  else {     logSuccess(realm);     if (isDryRun()) {       outputDryRunResults(importSteps);     }  else {       getOutputWriter().printlnMessage(MessageFormat.format(getResourceString(\"create-policy-in-realm-succeed\"),realm));     }   } } "
"public TypeConstraintException(String message){   this(message,null,null); } "
"public boolean isAnonymous(){   if (keyExchange == KEY_EXCHANGE_DH_anon || keyExchange == KEY_EXCHANGE_DH_anon_EXPORT || keyExchange == KEY_EXCHANGE_ECDH_anon) {     return true;   }   return false; } "
"@Modified void modified(ComponentContext compContext) throws Exception {   logger.debug(\"Reconfiguring the JDBC Repository Service with configuration {}\",compContext.getProperties());   try {     JsonValue newConfig=enhancedConfig.getConfigurationAsJson(compContext);     if (hasConfigChanged(config,newConfig)) {       DataSourceService oldDataSourceService=configuredDataSourceService.getAndSet(initDataSourceService(newConfig,compContext.getBundleContext()));       oldDataSourceService.shutdown();       logger.info(\"Reconfigured the JDBC Repository Service {}\",compContext.getProperties());     }   }  catch (  Exception ex) {     logger.warn(\"Configuration invalid, can not reconfigure the JDBC Repository Service.\",ex);     throw ex;   } } "
"@Deprecated public boolean removeAttribute(Attribute attribute,List<ByteString> missingValues){   return removeAttribute(attribute,(Collection<ByteString>)missingValues); } "
"private NodeImpl shallowCopy(short operation,Node node){ switch (node.getNodeType()) { case Node.ATTRIBUTE_NODE:     AttrImpl attr=(AttrImpl)node;   AttrImpl attrCopy; if (attr.namespaceAware) {   attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());   attrCopy.setPrefix(attr.getPrefix()); }  else {   attrCopy=createAttribute(attr.getName()); } attrCopy.setNodeValue(attr.getValue()); return attrCopy; case Node.CDATA_SECTION_NODE: return createCDATASection(((CharacterData)node).getData()); case Node.COMMENT_NODE: return createComment(((Comment)node).getData()); case Node.DOCUMENT_FRAGMENT_NODE: return createDocumentFragment(); case Node.DOCUMENT_NODE: case Node.DOCUMENT_TYPE_NODE: throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Cannot copy node of type \" + node.getNodeType()); case Node.ELEMENT_NODE: ElementImpl element=(ElementImpl)node; ElementImpl elementCopy; if (element.namespaceAware) { elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName()); elementCopy.setPrefix(element.getPrefix()); }  else { elementCopy=createElement(element.getTagName()); } NamedNodeMap attributes=element.getAttributes(); for (int i=0; i < attributes.getLength(); i++) { AttrImpl elementAttr=(AttrImpl)attributes.item(i); AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr); notifyUserDataHandlers(operation,elementAttr,elementAttrCopy); if (elementAttr.namespaceAware) { elementCopy.setAttributeNodeNS(elementAttrCopy); }  else { elementCopy.setAttributeNode(elementAttrCopy); } } return elementCopy; case Node.ENTITY_NODE: case Node.NOTATION_NODE: throw new UnsupportedOperationException(); case Node.ENTITY_REFERENCE_NODE: return createEntityReference(node.getNodeName()); case Node.PROCESSING_INSTRUCTION_NODE: ProcessingInstruction pi=(ProcessingInstruction)node; return createProcessingInstruction(pi.getTarget(),pi.getData()); case Node.TEXT_NODE: return createTextNode(((Text)node).getData()); default : throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Unsupported node type \" + node.getNodeType()); } } "
"private void doSignal(Node first){   do {     if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;     first.nextWaiter=null;   }  while (!transferForSignal(first) && (first=firstWaiter) != null); } "
"public static String urlEncode(String text){   try {     return URLEncoder.encode(text,\"utf-8\");   }  catch (  Exception ex) {     LOG.warn(\"Error encoding \" + text,ex);   }   return text; } "
"public void store() throws IdRepoException, SSOException {   IdServices idServices=IdServicesFactory.getDataStoreServices();   if (modMap != null && !modMap.isEmpty()) {     idServices.setAttributes(token,type,name,modMap,false,orgName,univDN,true);     modMap.clear();   }   if (binaryModMap != null && !binaryModMap.isEmpty()) {     idServices.setAttributes(token,type,name,binaryModMap,false,orgName,univDN,false);     binaryModMap.clear();   } } "
"public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {   checkState();   return OpenSslNative.updateByteArray(context,input,inputOffset,inputLen,output,outputOffset,output.length - outputOffset); } "
"@Override public boolean equals(Object obj){   if (obj == null) {     return false;   }   if (getClass() != obj.getClass()) {     return false;   }   final Database other=(Database)obj;   if (!Objects.equals(this.name,other.name)) {     return false;   }   if (!Objects.equals(this.description,other.description)) {     return false;   }   return true; } "
"@Override public void processExtendedOperation(ExtendedOperation operation){   int idToCancel;   ByteString requestValue=operation.getRequestValue();   if (requestValue == null) {     operation.setResultCode(ResultCode.PROTOCOL_ERROR);     operation.appendErrorMessage(ERR_EXTOP_CANCEL_NO_REQUEST_VALUE.get());     return;   }   try {     ASN1Reader reader=ASN1.getReader(requestValue);     reader.readStartSequence();     idToCancel=(int)reader.readInteger();     reader.readEndSequence();   }  catch (  Exception e) {     logger.traceException(e);     operation.setResultCode(ResultCode.PROTOCOL_ERROR);     LocalizableMessage message=ERR_EXTOP_CANCEL_CANNOT_DECODE_REQUEST_VALUE.get(getExceptionMessage(e));     operation.appendErrorMessage(message);     return;   }   LocalizableMessage cancelReason=INFO_EXTOP_CANCEL_REASON.get(operation.getMessageID());   CancelRequest cancelRequest=new CancelRequest(true,cancelReason);   ClientConnection clientConnection=operation.getClientConnection();   CancelResult cancelResult=clientConnection.cancelOperation(idToCancel,cancelRequest);   ResultCode resultCode=cancelResult.getResultCode();   operation.setResultCode(resultCode == ResultCode.CANCELLED ? ResultCode.SUCCESS : resultCode);   operation.appendErrorMessage(cancelResult.getResponseMessage()); } "
"public void testConnect_ClosedChannelException() throws IOException {   assertFalse(this.channel1.isConnected());   this.channel1.close();   assertFalse(this.channel1.isOpen());   try {     this.channel1.connect(localAddr1);     fail(\"Should throw ClosedChannelException.\");   }  catch (  ClosedChannelException e) {   } } "
"public static double distanceToRadians(double distance,String units) throws TurfException {   Double factor=factors.get(units);   if (factor == null) {     throw new TurfException(\"Invalid unit.\");   }   return distance / factor; } "
"public Modification elementAt(int index){   return modifications.get(index); } "
"public void transform(float[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts){   double M00, M01, M02, M10, M11, M12; switch (state) { default :     stateError();   return; case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE): M00=m00; M01=m01; M02=m02; M10=m10; M11=m11; M12=m12; while (--numPts >= 0) { double x=srcPts[srcOff++]; double y=srcPts[srcOff++]; dstPts[dstOff++]=M00 * x + M01 * y + M02; dstPts[dstOff++]=M10 * x + M11 * y + M12; } return; case (APPLY_SHEAR | APPLY_SCALE): M00=m00; M01=m01; M10=m10; M11=m11; while (--numPts >= 0) { double x=srcPts[srcOff++]; double y=srcPts[srcOff++]; dstPts[dstOff++]=M00 * x + M01 * y; dstPts[dstOff++]=M10 * x + M11 * y; } return; case (APPLY_SHEAR | APPLY_TRANSLATE): M01=m01; M02=m02; M10=m10; M12=m12; while (--numPts >= 0) { double x=srcPts[srcOff++]; dstPts[dstOff++]=M01 * srcPts[srcOff++] + M02; dstPts[dstOff++]=M10 * x + M12; } return; case (APPLY_SHEAR): M01=m01; M10=m10; while (--numPts >= 0) { double x=srcPts[srcOff++]; dstPts[dstOff++]=M01 * srcPts[srcOff++]; dstPts[dstOff++]=M10 * x; } return; case (APPLY_SCALE | APPLY_TRANSLATE): M00=m00; M02=m02; M11=m11; M12=m12; while (--numPts >= 0) { dstPts[dstOff++]=M00 * srcPts[srcOff++] + M02; dstPts[dstOff++]=M11 * srcPts[srcOff++] + M12; } return; case (APPLY_SCALE): M00=m00; M11=m11; while (--numPts >= 0) { dstPts[dstOff++]=M00 * srcPts[srcOff++]; dstPts[dstOff++]=M11 * srcPts[srcOff++]; } return; case (APPLY_TRANSLATE): M02=m02; M12=m12; while (--numPts >= 0) { dstPts[dstOff++]=srcPts[srcOff++] + M02; dstPts[dstOff++]=srcPts[srcOff++] + M12; } return; case (APPLY_IDENTITY): while (--numPts >= 0) { dstPts[dstOff++]=srcPts[srcOff++]; dstPts[dstOff++]=srcPts[srcOff++]; } return; } } "
"public FrameBodyTMCL(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {   BitMatrix bitMatrix=image.getBlackMatrix();   List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);   if (barcodeCoordinates.isEmpty()) {     bitMatrix=bitMatrix.clone();     bitMatrix.rotate180();     barcodeCoordinates=detect(multiple,bitMatrix);   }   return new PDF417DetectorResult(bitMatrix,barcodeCoordinates); } "
"static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException {   ElemTemplateElement t=varElem.getFirstChildElem();   if (null != t && null == t.getNextSiblingElem()) {     int etype=t.getXSLToken();     if (Constants.ELEMNAME_VALUEOF == etype) {       ElemValueOf valueof=(ElemValueOf)t;       if (valueof.getDisableOutputEscaping() == false && valueof.getDOMBackPointer() == null) {         varElem.m_firstChild=null;         return new XPath(new XRTreeFragSelectWrapper(valueof.getSelect().getExpression()));       }     }  else     if (Constants.ELEMNAME_TEXTLITERALRESULT == etype) {       ElemTextLiteral lit=(ElemTextLiteral)t;       if (lit.getDisableOutputEscaping() == false && lit.getDOMBackPointer() == null) {         String str=lit.getNodeValue();         XString xstr=new XString(str);         varElem.m_firstChild=null;         return new XPath(new XRTreeFragSelectWrapper(xstr));       }     }   }   return null; } "
"Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){   this.node=node;   this.down=down;   this.right=right; } "
"public XPathType(String expression,Filter filter){   if (expression == null) {     throw new NullPointerException(\"expression cannot be null\");   }   if (filter == null) {     throw new NullPointerException(\"filter cannot be null\");   }   this.expression=expression;   this.filter=filter;   this.nsMap=Collections.emptyMap(); } "
"public Entity defEntity(String name,int type,int ch){   char data[]={(char)ch};   return defineEntity(name,type,data); } "
"protected <T>Handler<AsyncResult<T>> rawResultHandler(RoutingContext context){   return null; } "
"@Post public Representation importXACML(Representation entity){   boolean dryRun=\"true\".equalsIgnoreCase(getQuery().getFirstValue(\"dryrun\"));   List<ImportStep> steps;   try {     if (!checkPermission(\"MODIFY\")) {       throw new ResourceException(new Status(FORBIDDEN));     }     String realm=RestletRealmRouter.getRealmFromRequest(getRequest());     steps=importExport.importXacml(realm,entity.getStream(),getAdminToken(),dryRun);     if (steps.isEmpty()) {       throw new ResourceException(new Status(BAD_REQUEST,\"No policies found in XACML document\",null,null));     }     List<Map<String,String>> result=new ArrayList<>();     for (    ImportStep step : steps) {       Map<String,String> stepResult=new HashMap<>();       stepResult.put(\"status\",String.valueOf(step.getDiffStatus().getCode()));       stepResult.put(\"name\",step.getName());       stepResult.put(\"type\",step.getType());       result.add(stepResult);     }     getResponse().setStatus(Status.SUCCESS_OK);     return jacksonRepresentationFactory.create(result);   }  catch (  EntitlementException e) {     debug.warning(\"Importing XACML to policies failed\",e);     throw new ResourceException(new Status(BAD_REQUEST,e,e.getLocalizedMessage(getRequestLocale()),null,null));   } catch (  IOException e) {     debug.warning(\"Reading XACML import failed\",e);     throw new ResourceException(new Status(BAD_REQUEST,e,e.getLocalizedMessage(),null,null));   } } "
"protected Expression lte(int opPos) throws TransformerException {   return compileOperation(new Lte(),opPos); } "
"private void writeDataToFile(File file) throws FileNotFoundException, IOException {   FileOutputStream fos=new FileOutputStream(file);   try {     fos.write(CONTENT_AS_BYTES);   }   finally {     fos.close();   } } "
"public static void clear(String realmName){   if (classRefSchemesHash != null && !classRefSchemesHash.isEmpty()) {     classRefSchemesHash.clear();   }   if (classRefLevelHash != null && !classRefLevelHash.isEmpty()) {     classRefLevelHash.clear();   }   if (defaultClassRefHash != null && !defaultClassRefHash.isEmpty()) {     defaultClassRefHash.clear();   }   formatAttributeHash.clear(); } "
"protected void fireEditingStopped(){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == CellEditorListener.class) {       if (changeEvent == null)       changeEvent=new ChangeEvent(this);       ((CellEditorListener)listeners[i + 1]).editingStopped(changeEvent);     }   } } "
"@Override public List<ImageConfiguration> customizeConfig(List<ImageConfiguration> configs){   platformMode=clusterAccess.resolvePlatformMode(mode,log);   if (platformMode == PlatformMode.openshift) {     log.info(\"Using [[B]]OpenShift[[B]] build with strategy [[B]]%s[[B]]\",buildStrategy.getLabel());   }  else {     log.info(\"Building Docker image in [[B]]Kubernetes[[B]] mode\");   }   try {     return GeneratorManager.generate(configs,extractGeneratorConfig(),project,session,goalFinder,\"fabric8:build\",log,platformMode,buildStrategy,useProjectClasspath);   }  catch (  MojoExecutionException e) {     throw new IllegalArgumentException(\"Cannot extract generator config: \" + e,e);   } } "
"private int yearLength(int year){   return isLeapYear(year) ? 366 : 365; } "
"public FrameBodyTBPM(byte textEncoding,String text){   super(textEncoding,text); } "
"protected int[] calculateCurrentCenterCoordinatesOfPagerElement(int activeElementIndex){   int y=(int)(mPagerIconsContainer.getY() + mPagerIconsContainer.getHeight() / 2);   if (activeElementIndex >= mPagerIconsContainer.getChildCount())   return new int[]{mRootLayout.getWidth() / 2,y};   View pagerElem=mPagerIconsContainer.getChildAt(activeElementIndex);   int x=(int)(mPagerIconsContainer.getX() + pagerElem.getX() + pagerElem.getWidth() / 2);   return new int[]{x,y}; } "
"static void appendBytes(String content,Mode mode,BitVector bits,String encoding) throws WriterException {   if (mode.equals(Mode.NUMERIC)) {     appendNumericBytes(content,bits);   }  else   if (mode.equals(Mode.ALPHANUMERIC)) {     appendAlphanumericBytes(content,bits);   }  else   if (mode.equals(Mode.BYTE)) {     append8BitBytes(content,bits,encoding);   }  else   if (mode.equals(Mode.KANJI)) {     appendKanjiBytes(content,bits);   }  else {     throw new WriterException(\"Invalid mode: \" + mode);   } } "
"public long toDays(){   return seconds / SECONDS_PER_DAY; } "
"public ByteArrayOutputStream(){   this(32); } "
"public com.sun.identity.liberty.ws.soapbinding.jaxb.ProviderElement createProviderElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ProviderElementImpl(); } "
"public void printStackTrace(PrintStream ps){   ps.println(fetchStackTrace()); } "
"public Reference(String className,RefAddr addr,String factory,String factoryLocation){   this(className,addr);   classFactory=factory;   classFactoryLocation=factoryLocation; } "
"protected void alert(byte level,byte description){   if (logger != null) {     logger.println(\"SSLRecordProtocol.allert: \" + level + \" \"+ description);   }   alertProtocol.alert(level,description); } "
"private void addField(MappedClass clazz,String[] parts){   String newName=parts[1];   String original=parts[3];   String desc=fixDesc(parts[0]);   MappedMember mm=new MappedMember(clazz,null,-1,desc,original);   mm.setNewName(newName);   clazz.addField(mm); } "
"@Inject public OpenAMResourceSetStore(@Assisted String realm,OAuth2UrisFactory oauth2UrisFactory,TokenIdGenerator idGenerator,@DataLayer(ConnectionType.RESOURCE_SETS) TokenDataStore delegate){   this.realm=realm;   this.oauth2UrisFactory=oauth2UrisFactory;   this.delegate=delegate;   this.idGenerator=idGenerator; } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodehasattributes03.class,args); } "
"protected static final int compare(ByteChunk name,byte[] compareTo){   int result=0;   byte[] b=name.getBuffer();   int start=name.getStart();   int end=name.getEnd();   int len=compareTo.length;   if ((end - start) < len) {     len=end - start;   }   for (int i=0; (i < len) && (result == 0); i++) {     if (b[i + start] > compareTo[i]) {       result=1;     }  else     if (b[i + start] < compareTo[i]) {       result=-1;     }   }   if (result == 0) {     if (compareTo.length > (end - start)) {       result=-1;     }  else     if (compareTo.length < (end - start)) {       result=1;     }   }   return result; } "
"@Override public void reset() throws IOException {   fInputStream.reset(); } "
"boolean contains_all_corners(DsnStructureOutlineShape p_other_shape){   if (convex_shapes == null) {     return false;   }   int corner_count=p_other_shape.shape.border_line_count();   for (int index=0; index < corner_count; ++index) {     PlaPointInt curr_corner=p_other_shape.shape.corner(index);     boolean is_contained=false;     for (int jndex=0; jndex < convex_shapes.length; ++jndex) {       if (!convex_shapes[jndex].contains(curr_corner))       continue;       is_contained=true;       break;     }     if (!is_contained)     return false;   }   return true; } "
"public final void testGetModulus(){   RSAPrivateKeySpec rpks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));   assertEquals(1234567890L,rpks.getModulus().longValue()); } "
"public static int mainRestoreDB(String[] args){   return mainRestoreDB(args,true,System.out,System.err); } "
"private static float[] RGBtoHSL(float[] rgb,float[] hsl){   if (hsl == null) {     hsl=new float[3];   }   float max=max(rgb[0],rgb[1],rgb[2]);   float min=min(rgb[0],rgb[1],rgb[2]);   float summa=max + min;   float saturation=max - min;   if (saturation > 0.0f) {     saturation/=(summa > 1.0f) ? 2.0f - summa : summa;   }   hsl[0]=getHue(rgb[0],rgb[1],rgb[2],max,min);   hsl[1]=saturation;   hsl[2]=summa / 2.0f;   return hsl; } "
"public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,double identity){   this.function=accumulatorFunction;   base=this.identity=Double.doubleToRawLongBits(identity); } "
"private static void clearStack(int depth){   int a=0;   int b=0;   int c=0;   int d=0;   int e=0;   int f=0;   int g=0;   int h=0;   int i=0;   int j=0;   if (depth > 0) {     clearStack(depth - 1);   } } "
"public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){   AttributeTable newTable=new AttributeTable(attributes);   newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));   return newTable; } "
"public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){   this.statusCode=statusCode;   this.data=data;   this.headers=headers;   this.notModified=notModified;   this.networkTimeMs=networkTimeMs; } "
"public void addClickingListener(OnWheelClickedListener listener){   clickingListeners.add(listener); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdatareplacedataexceedslengthofarg.class,args); } "
"public com.sun.identity.liberty.ws.meta.jaxb.IDPDescriptorType createIDPDescriptorType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.meta.jaxb.impl.IDPDescriptorTypeImpl(); } "
"AttributeListAdapter(){ } "
"private void saveSubjects() throws PolicyException, SSOException {   if (realmSubjects != null) {     pm.saveRealmSubjects(realmSubjects);   } } "
"public static final boolean isLoggingBehaviorEnabled(LoggingBehavior behavior){ synchronized (loggingBehaviors) {     return Settings.isDebugEnabled() && loggingBehaviors.contains(behavior);   } } "
"public Label mark(){   Label label=new Label();   mv.visitLabel(label);   return label; } "
"public IllegalTransactionStateException(String message,Reason reason){   super(message);   this.reason=reason; } "
"public void treeNodesChanged(TreeModelEvent e){   fireVisibleDataPropertyChange(); } "
"public synchronized void push(final String dn,final String element) throws IOException {   Cursor cursor=queueDatabase.openCursor(null,null);   try {     DatabaseEntry foundChange=new DatabaseEntry();     final DatabaseEntry key=new DatabaseEntry(dn.getBytes(\"UTF-8\"));     final DatabaseEntry data=new DatabaseEntry(element.getBytes(\"UTF-8\"));     OperationStatus retVal=cursor.getSearchKey(key,foundChange,LockMode.DEFAULT);     if (OperationStatus.SUCCESS.equals(retVal)) {       cursor.putCurrent(data);       opsCounter++;     }  else     if (OperationStatus.NOTFOUND.equals(retVal)) {       queueDatabase.put(null,key,data);       opsCounter++;     }     if (opsCounter >= cacheSize) {       queueDatabase.sync();       opsCounter=0;     }   }  catch (  IOException willNeverOccur) {     willNeverOccur.printStackTrace();     throw willNeverOccur;   }  finally {     cursor.close();   } } "
"protected void pathWasCollapsed(TreePath path){   if (tree != null) {     tree.fireTreeCollapsed(path);   } } "
"protected boolean pageUp(TextView widget,Spannable buffer){   return false; } "
"public void handleButton2Request(RequestInvocationEvent event){   populateValues=true;   forwardTo(); } "
"public void refresh(){   redisConnection.expire(key,getMaxInactiveInterval()); } "
"@BeforeClass public static void init(){   nonGitDirectory=Files.createTempDir();   if (Misc.isDebugMode()) {     System.out.println(\"directory created under: \" + nonGitDirectory);   } } "
"public void testSetBitPositiveInside3(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=45;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.setBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {   int start=position;   StringBuilder result=null;   if (returnText && text != null) {     result=new StringBuilder();     result.append(text);   }   search:   while (true) {     if (position + delimiter.length > limit) {       if (start < position && returnText) {         if (result == null) {           result=new StringBuilder();         }         result.append(buffer,start,position - start);       }       if (!fillBuffer(delimiter.length)) {         checkRelaxed(UNEXPECTED_EOF);         type=COMMENT;         return null;       }       start=position;     }     for (int i=0; i < delimiter.length; i++) {       if (buffer[position + i] != delimiter[i]) {         position++;         continue search;       }     }     break;   }   int end=position;   position+=delimiter.length;   if (!returnText) {     return null;   }  else   if (result == null) {     return stringPool.get(buffer,start,end - start);   }  else {     result.append(buffer,start,end - start);     return result.toString();   } } "
"@Override public void addChild(WXComponent child){   addChild(child,-1); } "
"protected static void writeContext(PrintWriter writer,ObjectName objectName,MBeanServer mBeanServer,int mode) throws Exception {   if (mode == 0) {     String webModuleName=objectName.getKeyProperty(\"name\");     String name=webModuleName;     if (name == null) {       return;     }     String hostName=null;     String contextName=null;     if (name.startsWith(\"//\")) {       name=name.substring(2);     }     int slash=name.indexOf('/');     if (slash != -1) {       hostName=name.substring(0,slash);       contextName=name.substring(slash);     }  else {       return;     }     ObjectName queryManager=new ObjectName(objectName.getDomain() + \":type=Manager,context=\" + contextName+ \",host=\"+ hostName+ \",*\");     Set<ObjectName> managersON=mBeanServer.queryNames(queryManager,null);     ObjectName managerON=null;     Iterator<ObjectName> iterator2=managersON.iterator();     while (iterator2.hasNext()) {       managerON=iterator2.next();     }     ObjectName queryJspMonitor=new ObjectName(objectName.getDomain() + \":type=JspMonitor,WebModule=\" + webModuleName+ \",*\");     Set<ObjectName> jspMonitorONs=mBeanServer.queryNames(queryJspMonitor,null);     if (contextName.equals(\"/\")) {       contextName=\"\";     }     writer.print(\"<h1>\");     writer.print(filter(name));     writer.print(\"</h1>\");     writer.print(\"</a>\");     writer.print(\"<p>\");     Object startTime=mBeanServer.getAttribute(objectName,\"startTime\");     writer.print(\" Start time: \" + new Date(((Long)startTime).longValue()));     writer.print(\" Startup time: \");     writer.print(formatTime(mBeanServer.getAttribute(objectName,\"startupTime\"),false));     writer.print(\" TLD scan time: \");     writer.print(formatTime(mBeanServer.getAttribute(objectName,\"tldScanTime\"),false));     if (managerON != null) {       writeManager(writer,managerON,mBeanServer,mode);     }     if (jspMonitorONs != null) {       writeJspMonitor(writer,jspMonitorONs,mBeanServer,mode);     }     writer.print(\"</p>\");     String onStr=objectName.getDomain() + \":j2eeType=Servlet,WebModule=\" + webModuleName+ \",*\";     ObjectName servletObjectName=new ObjectName(onStr);     Set<ObjectInstance> set=mBeanServer.queryMBeans(servletObjectName,null);     Iterator<ObjectInstance> iterator=set.iterator();     while (iterator.hasNext()) {       ObjectInstance oi=iterator.next();       writeWrapper(writer,oi.getObjectName(),mBeanServer,mode);     }   }  else   if (mode == 1) {   } } "
"public void test_addSubjectAlternativeNameLintLbyte_array2() throws Exception {   GeneralName san0=new GeneralName(new OtherName(\"1.2.3.4.5\",new byte[]{1,2,0,1}));   GeneralName san1=new GeneralName(1,\"rfc@822.Name\");   GeneralName san2=new GeneralName(2,\"dNSName\");   GeneralNames sans1=new GeneralNames();   sans1.addName(san0);   sans1.addName(san1);   sans1.addName(san2);   X509CertSelector selector=new X509CertSelector();   selector.addSubjectAlternativeName(0,san0.getEncodedName());   selector.addSubjectAlternativeName(1,san1.getEncodedName());   selector.addSubjectAlternativeName(2,san2.getEncodedName());   GeneralNames sans2=new GeneralNames();   sans2.addName(san0);   TestCert cert1=new TestCert(sans1);   TestCert cert2=new TestCert(sans2);   assertTrue(selector.match(cert1));   assertFalse(selector.match(cert2));   selector.setSubjectAlternativeNames(null);   GeneralName name=new GeneralName(new Name(\"O=Android\"));   try {     selector.addSubjectAlternativeName(0,name.getEncodedName());   }  catch (  IOException e) {   } } "
"public static Certificate readCertificate(String certString) throws Exception {   StringReader sr=new StringReader(certString);   PEMReader pw=new PEMReader(sr);   Object object=pw.readObject();   if (object instanceof X509Certificate) {     return (X509Certificate)object;   }  else {     throw ResourceException.newResourceException(ResourceException.BAD_REQUEST,\"Unsupported certificate format\");   } } "
"public XMLString toLowerCase(){   return new XString(str().toLowerCase()); } "
"public static boolean isOpenIdConnectFragmentErrorType(Set<String> requestedResponseTypes){   return requestedResponseTypes.contains(ID_TOKEN) || requestedResponseTypes.contains(TOKEN); } "
"public Marshaller createMarshaller() throws JAXBException {   return new MarshallerImpl(this); } "
"public static void main(final String[] args){   DOMTestCase.doMain(isSupported07.class,args); } "
"private static ClassLoader createSystemClassLoader(){   String classPath=System.getProperty(\"java.class.path\",\".\");   return new PathClassLoader(classPath,BootClassLoader.getInstance(),false); } "
"ConnectionImpl(final PooledConnectionImpl pooledConnection,final Connection connection,final boolean accessToUnderlyingConnectionAllowed){   super(connection);   this.pooledConnection=pooledConnection;   this.accessToUnderlyingConnectionAllowed=accessToUnderlyingConnectionAllowed; } "
"public boolean isExpired(){   return expired; } "
"public int rtf(XPathContext support){   int result=rtf();   if (DTM.NULL == result) {     DTM frag=support.createDocumentFragment();     frag.appendTextChild(str());     result=frag.getDocument();   }   return result; } "
"public void close() throws IOException {   guard.close(); synchronized (this) {     if (channel != null && channel.isOpen()) {       channel.close();       channel=null;     }     IoUtils.close(fd);   } } "
"public StatusCode createStatusCode(Element elem) throws XACMLException {   Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_CODE,elem);   if (object == null) {     return new StatusCodeImpl(elem);   }  else {     return (StatusCode)object;   } } "
"public static void embedTypeInfo(ErrorCorrectionLevel ecLevel,int maskPattern,ByteMatrix matrix) throws WriterException {   BitVector typeInfoBits=new BitVector();   makeTypeInfoBits(ecLevel,maskPattern,typeInfoBits);   for (int i=0; i < typeInfoBits.size(); ++i) {     int bit=typeInfoBits.at(typeInfoBits.size() - 1 - i);     int x1=TYPE_INFO_COORDINATES[i][0];     int y1=TYPE_INFO_COORDINATES[i][1];     matrix.set(x1,y1,bit);     if (i < 8) {       int x2=matrix.getWidth() - i - 1;       int y2=8;       matrix.set(x2,y2,bit);     }  else {       int x2=8;       int y2=matrix.getHeight() - 7 + (i - 8);       matrix.set(x2,y2,bit);     }   } } "
"public static WindowListener remove(WindowListener l,WindowListener oldl){   return (WindowListener)removeInternal(l,oldl); } "
"public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){   super(cause);   this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties); } "
"public JMXProviderException(){ } "
"public void resume(){   try {     protocolHandler.resume();   }  catch (  Exception e) {     log.error(sm.getString(\"coyoteConnector.protocolHandlerResumeFailed\"),e);   } } "
"private static int upperIndex(int ch){   int index=-1;   if (ch >= 0xdf) {     if (ch <= 0x587) { switch (ch) { case 0xdf:         return 0; case 0x149:       return 1; case 0x1f0:     return 2; case 0x390:   return 3; case 0x3b0: return 4; case 0x587: return 5; } }  else if (ch >= 0x1e96) { if (ch <= 0x1e9a) { index=6 + ch - 0x1e96; }  else if (ch >= 0x1f50 && ch <= 0x1ffc) { index=upperValues2[ch - 0x1f50]; if (index == 0) { index=-1; } }  else if (ch >= 0xfb00) { if (ch <= 0xfb06) { index=90 + ch - 0xfb00; }  else if (ch >= 0xfb13 && ch <= 0xfb17) { index=97 + ch - 0xfb13; } } } } return index; } "
"public static void removeByUuid_C(java.lang.String uuid,long companyId){   getPersistence().removeByUuid_C(uuid,companyId); } "
"public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {   String formattedMsg=XSLMessages.createWarning(msg,args);   ErrorListener errHandler=xctxt.getErrorListener();   TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());   if (null != errHandler)   errHandler.warning(spe);  else   System.out.println(formattedMsg); } "
"final int fullyRelease(Node node){   boolean failed=true;   try {     int savedState=getState();     if (release(savedState)) {       failed=false;       return savedState;     }  else {       throw new IllegalMonitorStateException();     }   }   finally {     if (failed)     node.waitStatus=Node.CANCELLED;   } } "
"public void documentRelease(){ } "
"public LogConfigurationException(Throwable cause){   super(cause); } "
"public String toString(){   return omniAreaOpenTag + latitudeOpenTag + latitude+ latitudeCloseTag+ longitudeOpenTag+ longitude+ longitudeCloseTag+ userInputOpenTag+ userInput+ userInputCloseTag+ proximityDistanceOpenTag+ proximityDistance+ proximityDistanceCloseTag+ omniAreaCloseTag; } "
"public void execute(String command,InputStream istream,String contentType,long contentLength) throws BuildException {   URLConnection conn=null;   InputStreamReader reader=null;   try {     conn=(new URL(url + command)).openConnection();     HttpURLConnection hconn=(HttpURLConnection)conn;     hconn.setAllowUserInteraction(false);     hconn.setDoInput(true);     hconn.setUseCaches(false);     if (istream != null) {       hconn.setDoOutput(true);       hconn.setRequestMethod(\"PUT\");       if (contentType != null) {         hconn.setRequestProperty(\"Content-Type\",contentType);       }       if (contentLength >= 0) {         hconn.setRequestProperty(\"Content-Length\",\"\" + contentLength);         hconn.setFixedLengthStreamingMode(contentLength);       }     }  else {       hconn.setDoOutput(false);       hconn.setRequestMethod(\"GET\");     }     hconn.setRequestProperty(\"User-Agent\",\"Catalina-Ant-Task/1.0\");     String input=username + \":\" + password;     String output=Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1));     hconn.setRequestProperty(\"Authorization\",\"Basic \" + output);     hconn.connect();     if (istream != null) {       try (BufferedOutputStream ostream=new BufferedOutputStream(hconn.getOutputStream(),1024)){         byte buffer[]=new byte[1024];         while (true) {           int n=istream.read(buffer);           if (n < 0) {             break;           }           ostream.write(buffer,0,n);         }         ostream.flush();       }   finally {         try {           istream.close();         }  catch (        Exception e) {         }       }     }     reader=new InputStreamReader(hconn.getInputStream(),CHARSET);     StringBuilder buff=new StringBuilder();     String error=null;     int msgPriority=Project.MSG_INFO;     boolean first=true;     while (true) {       int ch=reader.read();       if (ch < 0) {         break;       }  else       if ((ch == '\\r') || (ch == '\\n')) {         if (buff.length() > 0) {           String line=buff.toString();           buff.setLength(0);           if (!ignoreResponseConstraint && first) {             if (!line.startsWith(\"OK -\")) {               error=line;               msgPriority=Project.MSG_ERR;             }             first=false;           }           handleOutput(line,msgPriority);         }       }  else {         buff.append((char)ch);       }     }     if (buff.length() > 0) {       handleOutput(buff.toString(),msgPriority);     }     if (error != null && isFailOnError()) {       throw new BuildException(error);     }   }  catch (  Exception e) {     if (isFailOnError()) {       throw new BuildException(e);     }  else {       handleErrorOutput(e.getMessage());     }   }  finally {     closeRedirector();     if (reader != null) {       try {         reader.close();       }  catch (      IOException ioe) {       }       reader=null;     }     if (istream != null) {       try {         istream.close();       }  catch (      IOException ioe) {       }     }   } } "
"private void encryptBuffer(ByteBuffer out) throws IOException {   int inputSize=inBuffer.remaining();   try {     int n=cipher.update(inBuffer,out);     if (n < inputSize) {       cipher.doFinal(inBuffer,out);       cipherReset=true;     }   }  catch (  ShortBufferException e) {     throw new IOException(e);   } catch (  BadPaddingException e) {     throw new IOException(e);   } catch (  IllegalBlockSizeException e) {     throw new IOException(e);   } } "
"public boolean isLeaf(){   TreeModel model=getModel();   return (model != null) ? model.isLeaf(this.getUserObject()) : true; } "
"public long tryReadLock(){   for (; ; ) {     long s, m, next;     if ((m=(s=state) & ABITS) == WBIT)     return 0L;  else     if (m < RFULL) {       if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))       return next;     }  else     if ((next=tryIncReaderOverflow(s)) != 0L)     return next;   } } "
"public void init(boolean forEncryption,CipherParameters param){   if (param instanceof ParametersWithRandom) {     ParametersWithRandom rParam=(ParametersWithRandom)param;     key=(RSAKeyParameters)rParam.getParameters();   }  else {     key=(RSAKeyParameters)param;   }   this.forEncryption=forEncryption; } "
"boolean containsKey(final String key){   return properties.containsKey(key); } "
"public static String signatureAlgorithm(String algorithm){   int index=algorithm.indexOf('_');   if (index == -1) {     return algorithm;   }   return algorithm.substring(index + 1,algorithm.length()); } "
"@Override public void replaceSelection(String content){   replaceSelection(content,true); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementcreatenewattribute.class,args); } "
"public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_wstring\",_opsClass);   DynValueOperations $self=(DynValueOperations)$so.servant;   try {     $self.insert_wstring(value);   }   finally {     _servant_postinvoke($so);   } } "
"@Inject AMSetupManager(ServletContext servletContext){   this.servletContext=servletContext; } "
"public Editor edit() throws IOException {   return DiskLruCache.this.edit(key,sequenceNumber); } "
"public boolean isMutable(){   return isMutable; } "
"public static void main(final String[] args){   DOMTestCase.doMain(createElementNS02.class,args); } "
"public void auditAccessSuccess(){   if (!accessAttemptAudited) {     auditAccessAttempt();   }   if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {     final long endTime=currentTimeMillis();     final long elapsedTime=endTime - startTime;     AuditEvent auditEvent=auditEventFactory.accessEvent(realm).forHttpServletRequest(httpServletRequest).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component).response(SUCCESSFUL,\"\",elapsedTime,MILLISECONDS).userId(userId).request(PLL,method).trackingId(trackingId).toEvent();     auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);     reset();   } } "
"public static void geojsonType(GeoJSON value,String type,String name) throws TurfException {   if (TextUtils.isEmpty(type) || TextUtils.isEmpty(name)) {     throw new TurfException(\"Type and name required\");   }   if (value == null || !value.getType().equals(type)) {     throw new TurfException(\"Invalid input to \" + name + \": must be a \"+ type+ \", given \"+ value.getType());   } } "
"Object processENUM_OR_PQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {   Object objToReturn=null;   if (getSupportsAVT()) {     try {       AVT avt=new AVT(handler,uri,name,rawName,value,owner);       if (!avt.isSimple())       return avt;  else       objToReturn=avt;     }  catch (    TransformerException te) {       throw new org.xml.sax.SAXException(te);     }   }   int key=this.getEnum(value);   if (key != StringToIntTable.INVALID_KEY) {     if (objToReturn == null)     objToReturn=new Integer(key);   }  else {     try {       QName qname=new QName(value,handler,true);       if (objToReturn == null)       objToReturn=qname;       if (qname.getPrefix() == null) {         StringBuffer enumNamesList=getListOfEnums();         enumNamesList.append(\" <qname-but-not-ncname>\");         handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);         return null;       }     }  catch (    IllegalArgumentException ie) {       StringBuffer enumNamesList=getListOfEnums();       enumNamesList.append(\" <qname-but-not-ncname>\");       handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},ie);       return null;     } catch (    RuntimeException re) {       StringBuffer enumNamesList=getListOfEnums();       enumNamesList.append(\" <qname-but-not-ncname>\");       handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},re);       return null;     }   }   return objToReturn; } "
"Object stringToValue(String text,Format f) throws ParseException {   if (f == null) {     return text;   }   Object value=f.parseObject(text);   return convertValueToValueClass(value,getValueClass()); } "
"public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {   return parse(readAll(is)); } "
"public char first(){   pos=offset;   if (count != 0) {     return array[pos];   }   return DONE; } "
"public static void main(final String[] args){   getAmountAsString(515); } "
"@Override public boolean matchFilter(Filter filter,DataType userDefinedValue) throws IllegalArgumentException {   throw new IllegalArgumentException(\"Matching filter not found for the datatype \" + userDefinedValue.getClass().toString() + \". \"); } "
"private static AddRequestProtocolOp readAddRequest(ASN1Reader reader) throws LDAPException {   try {     reader.readStartSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   ByteString dn;   try {     dn=reader.readOctetString();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_DN.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   ArrayList<RawAttribute> attributes;   try {     reader.readStartSequence();     attributes=new ArrayList<>();     while (reader.hasNextElement()) {       attributes.add(LDAPAttribute.decode(reader));     }     reader.readEndSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_ATTRS.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   try {     reader.readEndSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_ADD_REQUEST_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   return new AddRequestProtocolOp(dn,attributes); } "
"@Override public Promise<ResourceResponse,ResourceException> filterUpdate(Context context,UpdateRequest request,RequestHandler next){   final String resource=ServerContextUtils.getResourceId(request,context);   final String action=ServerContextUtils.getUpdateString(request);   logAccess(resource,action,context);   return next.handleUpdate(context,request); } "
"public static FSAuthnResponse parseAuthnResponseXML(String xml) throws SAMLException, FSMsgException {   FSUtils.debug.message(\"FSAuthnResponse.parseAuthnResponseXML: Called\");   Element root;   Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);   if (doc == null) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSAuthnResponse.parseXML:Error \" + \"while parsing input xml string\");     }     throw new FSMsgException(\"parseError\",null);   }   root=doc.getDocumentElement();   return new FSAuthnResponse(root); } "
"private void siftDown(int k,RunnableScheduledFuture<?> key){   int half=size >>> 1;   while (k < half) {     int child=(k << 1) + 1;     RunnableScheduledFuture<?> c=queue[child];     int right=child + 1;     if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];     if (key.compareTo(c) <= 0)     break;     queue[k]=c;     setIndex(c,k);     k=child;   }   queue[k]=key;   setIndex(key,k); } "
"private ReplicationBroker[] createReplicationBrokers1And2() throws Exception {   return new ReplicationBroker[]{openReplicationSession(TEST_ROOT_DN,1,100,replicationServerPort,1000),openReplicationSession(TEST_ROOT_DN,2,100,replicationServerPort,1000)}; } "
"public static GenericExtendedResult copyOfGenericExtendedResult(final GenericExtendedResult result){   return new GenericExtendedResultImpl(result); } "
"public GroupMBean() throws MBeanException, RuntimeOperationsException {   super(); } "
"private boolean prepare(JComponent c,Container root,boolean isPaint,int x,int y,int w,int h){   if (bsg != null) {     bsg.dispose();     bsg=null;   }   bufferStrategy=null;   if (root != null) {     boolean contentsLost=false;     BufferInfo bufferInfo=getBufferInfo(root);     if (bufferInfo == null) {       contentsLost=true;       bufferInfo=new BufferInfo(root);       bufferInfos.add(bufferInfo);       if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {         LOGGER.finer(\"prepare: new BufferInfo: \" + root);       }     }     this.bufferInfo=bufferInfo;     if (!bufferInfo.hasBufferStrategyChanged()) {       bufferStrategy=bufferInfo.getBufferStrategy(true);       if (bufferStrategy != null) {         bsg=bufferStrategy.getDrawGraphics();         if (bufferStrategy.contentsRestored()) {           contentsLost=true;           if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {             LOGGER.finer(\"prepare: contents restored in prepare\");           }         }       }  else {         return false;       }       if (bufferInfo.getContentsLostDuringExpose()) {         contentsLost=true;         bufferInfo.setContentsLostDuringExpose(false);         if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {           LOGGER.finer(\"prepare: contents lost on expose\");         }       }       if (isPaint && c == rootJ && x == 0 && y == 0 && c.getWidth() == w && c.getHeight() == h) {         bufferInfo.setInSync(true);       }  else       if (contentsLost) {         bufferInfo.setInSync(false);         if (!isRepaintingRoot()) {           repaintRoot(rootJ);         }  else {           resetDoubleBufferPerWindow();         }       }       return (bufferInfos != null);     }   }   return false; } "
"public void testWildcardsDoesNotNeedTwoDots() throws Exception {   String cert=\"-----BEGIN CERTIFICATE-----\\n\" + \"MIIBjDCCATagAwIBAgIJAOVulXCSu6HuMA0GCSqGSIb3DQEBBQUAMBAxDjAMBgNV\\n\" + \"BAMUBSouY29tMCAXDTEwMTIyMDE2NDkzOFoYDzIxMTAxMTI2MTY0OTM4WjAQMQ4w\\n\"+ \"DAYDVQQDFAUqLmNvbTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDJd8xqni+h7Iaz\\n\"+ \"ypItivs9kPuiJUqVz+SuJ1C05SFc3PmlRCvwSIfhyD67fHcbMdl+A/LrIjhhKZJe\\n\"+ \"1joO0+pFAgMBAAGjcTBvMB0GA1UdDgQWBBS4Iuzf5w8JdCp+EtBfdFNudf6+YzBA\\n\"+ \"BgNVHSMEOTA3gBS4Iuzf5w8JdCp+EtBfdFNudf6+Y6EUpBIwEDEOMAwGA1UEAxQF\\n\"+ \"Ki5jb22CCQDlbpVwkruh7jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EA\\n\"+ \"U6LFxmZr31lFyis2/T68PpjAppc0DpNQuA2m/Y7oTHBDi55Fw6HVHCw3lucuWZ5d\\n\"+ \"qUYo4ES548JdpQtcLrW2sA==\\n\"+ \"-----END CERTIFICATE-----\";   CertificateFactory cf=CertificateFactory.getInstance(\"X.509\");   InputStream in=new ByteArrayInputStream(cert.getBytes(\"UTF-8\"));   X509Certificate x509=(X509Certificate)cf.generateCertificate(in);   mySSLSession session=new mySSLSession(new X509Certificate[]{x509});   HostnameVerifier verifier=HttpsURLConnection.getDefaultHostnameVerifier();   assertTrue(verifier.verify(\"google.com\",session)); } "
"protected void lastResortExceptionHandling(Throwable originalException,Throwable defaultHandlingException){   try {     this.logger.error(\"Error while trying to use the default exception \" + \"handling : \" + defaultHandlingException.getMessage() + \".\\n\"+ \"The original exception was : \"+ SpincastStatics.getStackTrace(originalException));   }  catch (  Throwable ex3) {   }   throw new RuntimeException(\"An error occured.\"); } "
"public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {   if (logger.isLoggingEnabled())   logger.logException(ex);   if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(ContentLength.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug(\"Encountered bad message \\n\" + message);     String msgString=sipMessage.toString();     if (!msgString.startsWith(\"SIP/\") && !msgString.startsWith(\"ACK \")) {       String badReqRes=createBadReqRes(msgString,ex);       if (badReqRes != null) {         if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {           logger.logDebug(\"Sending automatic 400 Bad Request:\");           logger.logDebug(badReqRes);         }         try {           this.sendMessage(badReqRes.getBytes(),this.getPeerInetAddress(),this.getPeerPort(),false);         }  catch (        IOException e) {           logger.logException(e);         }       }  else {         if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {           logger.logDebug(\"Could not formulate automatic 400 Bad Request\");         }       }     }     throw ex;   }  else {     sipMessage.addUnparsed(header);   } } "
"private void buildInfo(){   Object lock=lock();   try {     Document doc=getDocument();     Element root=doc.getDefaultRootElement();     rootElementInfo=new ElementInfo(root);     rootElementInfo.validate();   }   finally {     unlock(lock);   } } "
"protected void tearDown(){ } "
"public void submitRequirements(Callback[] info){   submitRequirements(info,null,null); } "
"public RestEndpointServlet(){   this.restletXACMLServiceServlet=new RestletServiceServlet(this,XACMLServiceEndpointApplication.class,\"xacmlRestletServiceServlet\");   this.restletOAuth2ServiceServlet=new RestletServiceServlet(this,OAuth2ServiceEndpointApplication.class,\"oauth2RestletServiceServlet\");   this.restletUMAServiceServlet=new RestletServiceServlet(this,UMAServiceEndpointApplication.class,\"umaRestletServiceServlet\");   this.authenticationFilter=InjectorHolder.getInstance(Key.get(Filter.class,Names.named(\"AuthenticationFilter\")));   this.restletXACMLHttpServlet=new HttpServletWrapper(this,new HttpFrameworkServlet(new RestletAuthnHttpApplication())); } "
"public List<String> defaultComments(ProtoElement element){   if (!element.hasAttribute(ElementDocumentationAttribute.KEY)) {     return ImmutableList.<String>of(\"\");   }   return pythonCommon.convertToCommentedBlock(getSphinxifiedScopedDescription(element)); } "
"public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {   if (documentHandler != null)   documentHandler.ignorableWhitespace(ch,start,length); } "
"public void passPgSessionMapEx(ViewBean other){   Map attributes=getPageSessionAttributes();   for (Iterator i=retainPageSessionsBtwTabs.iterator(); i.hasNext(); ) {     String key=(String)i.next();     other.setPageSessionAttribute(key,(Serializable)attributes.get(key));   }   other.setPageSessionAttribute(getTrackingTabIDName(),(Serializable)attributes.get(getTrackingTabIDName())); } "
"private boolean isCauseRecordDuplicatedException(Throwable ex,int maxLevels){   return isCauseException(ex,ORecordDuplicatedException.class,maxLevels); } "
"public void update(Graphics g){   paint(g); } "
"public int read(byte[] b) throws IOException {   return read(b,0,b.length); } "
"public void mergeObjects(GenericObjectList mergeList){   Iterator<GenericObject> it1=this.listIterator();   Iterator<GenericObject> it2=mergeList.listIterator();   while (it1.hasNext()) {     GenericObject outerObj=(GenericObject)it1.next();     while (it2.hasNext()) {       Object innerObj=it2.next();       outerObj.merge(innerObj);     }   } } "
"public static boolean isFloat(final String txt){   try {     Float.parseFloat(txt);     return true;   }  catch (  final Exception e) {     return false;   } } "
"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {   s.defaultReadObject();   count.set(0);   last=head=new Node<E>(null);   for (; ; ) {     @SuppressWarnings(\"unchecked\") E item=(E)s.readObject();     if (item == null)     break;     add(item);   } } "
"public static int hash32(final byte[] data,int length,int seed){   final int m=0x5bd1e995;   final int r=24;   int h=seed ^ length;   int length4=length / 4;   for (int i=0; i < length4; i++) {     final int i4=i * 4;     int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);     k*=m;     k^=k >>> r;     k*=m;     h*=m;     h^=k;   } switch (length % 4) { case 3:     h^=(data[(length & ~3) + 2] & 0xff) << 16; case 2:   h^=(data[(length & ~3) + 1] & 0xff) << 8; case 1: h^=(data[length & ~3] & 0xff); h*=m; } h^=h >>> 13; h*=m; h^=h >>> 15; return h; } "
"protected String nullsToBlanks(String s){   return nullsToString(s,\"\"); } "
"public void testHeaderParams3(){   try {     Header h=tiHeaderFactory.createHeader(\"From\",\"tel:07077004201;tag=gc2zbu\");     System.err.println(h);     assertTrue(h instanceof FromHeader);     FromHeader c=(FromHeader)h;     URI u=c.getAddress().getURI();     assertTrue(u instanceof TelURL);     assertFalse(\"URI must have no params\",((TelURL)u).getParameterNames().hasNext());     assertNotNull(\"Parameter 'tag' must be assigned to the header\",c.getTag());   }  catch (  ParseException e) {     e.printStackTrace();     fail(e.getMessage());   }  finally {     logTestCompleted(\"testHeaderParams3()\");   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodehasattributes04.class,args); } "
"private Thread fullGetFirstQueuedThread(){   Node h, s;   Thread st;   if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;   Node t=tail;   Thread firstThread=null;   while (t != null && t != head) {     Thread tt=t.thread;     if (tt != null)     firstThread=tt;     t=t.prev;   }   return firstThread; } "
"ApplicationFilterConfig(Context context,FilterDef filterDef) throws ClassCastException, ClassNotFoundException, IllegalAccessException, InstantiationException, ServletException, InvocationTargetException, NamingException {   super();   this.context=context;   this.filterDef=filterDef;   if (filterDef.getFilter() == null) {     getFilter();   }  else {     this.filter=filterDef.getFilter();     getInstanceManager().newInstance(filter);     initFilter();   } } "
"private static void addAttribute(MutableAttributeSet to,Object key,Object value){   Object attr=to.getAttribute(key);   if (attr == null || attr == SimpleAttributeSet.EMPTY) {     to.addAttribute(key,value);   }  else {     if (attr instanceof MutableAttributeSet && value instanceof AttributeSet) {       ((MutableAttributeSet)attr).addAttributes((AttributeSet)value);     }   } } "
"public boolean isRichText(){   return getFieldFlag(FF_RICH_TEXT); } "
"void invoke(@NonNull EventBus bus,@NonNull Object event){   try {     Object subscriber=mSubscriber.get();     if (subscriber != null) {       mMethod.invoke(subscriber,event);     }   }  catch (  InvocationTargetException e) {   } catch (  Throwable e) {     e.printStackTrace();   } } "
"public short compareDocumentPosition(Node other) throws DOMException {   return 0; } "
"protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){   long preferred=0;   int n=getViewCount();   for (int i=0; i < n; i++) {     View v=getView(i);     spans[i]=(int)v.getPreferredSpan(axis);     preferred+=spans[i];   }   long desiredAdjustment=targetSpan - preferred;   float adjustmentFactor=0.0f;   int[] diffs=null;   if (desiredAdjustment != 0) {     long totalSpan=0;     diffs=new int[n];     for (int i=0; i < n; i++) {       View v=getView(i);       int tmp;       if (desiredAdjustment < 0) {         tmp=(int)v.getMinimumSpan(axis);         diffs[i]=spans[i] - tmp;       }  else {         tmp=(int)v.getMaximumSpan(axis);         diffs[i]=tmp - spans[i];       }       totalSpan+=tmp;     }     float maximumAdjustment=Math.abs(totalSpan - preferred);     adjustmentFactor=desiredAdjustment / maximumAdjustment;     adjustmentFactor=Math.min(adjustmentFactor,1.0f);     adjustmentFactor=Math.max(adjustmentFactor,-1.0f);   }   int totalOffset=0;   for (int i=0; i < n; i++) {     offsets[i]=totalOffset;     if (desiredAdjustment != 0) {       float adjF=adjustmentFactor * diffs[i];       spans[i]+=Math.round(adjF);     }     totalOffset=(int)Math.min((long)totalOffset + (long)spans[i],Integer.MAX_VALUE);   } } "
"protected StackFrame newFrame(final Frame<?> src,AbstractInsnNode ain){   return new StackFrame(src,ain); } "
"public String inverseSearchGlobal(List<String> parts){   if (parts.size() == 0) {     return null;   }   InverseStore store=inverseSearch.get(parts.get(parts.size() - 1));   if (store == null)   return null;   for (int k=parts.size() - 2; k >= 0; --k) {     String part=parts.get(k);     int idx=store.part.indexOf(part);     if (idx < 0) {       if (store.isSimilar(part))       return null;       return store.getDefaultName();     }     store=(InverseStore)store.follow.get(idx);   }   return store.getDefaultName(); } "
"public String entryTypeName(Field field){   Type items=getApiaryConfig().getType(field.getTypeUrl());   return String.format(\"%s.Entry<%s, %s>\",getTypeName(\"java.util.Map\"),typeName(items,getField(items,\"key\")),typeName(items,getField(items,\"value\"))); } "
"public boolean isObsolete(){   return obsolete; } "
"public boolean is_mirror_top_bottom(){   return !mirror_top_bottom; } "
"@Override public void onItemRangeMoved(T sender,int fromPosition,int toPosition,int itemCount){   for (int i=0; i < itemCount; ++i) {     this.adapter.notifyItemMoved(fromPosition + i,toPosition + i);   } } "
"public void delete(String tokenId,ResultHandler<String,?> handler) throws CoreTokenException {   delete(tokenId,null,handler); } "
"boolean isLiteral(int index){   if (isValidMask() && index < string.length()) {     return literalMask.get(index);   }   return false; } "
"public void testMac03() throws NoSuchAlgorithmException, NoSuchProviderException {   if (!DEFSupported) {     fail(NotSupportedMsg);     return;   }   String provider=null;   for (int i=0; i < validValues.length; i++) {     try {       Mac.getInstance(validValues[i],provider);       fail(\"IllegalArgumentException must be thrown when provider is null\");     }  catch (    IllegalArgumentException e) {     }     try {       Mac.getInstance(validValues[i],\"\");       fail(\"IllegalArgumentException must be thrown when provider is empty\");     }  catch (    IllegalArgumentException e) {     }     for (int j=1; j < invalidValues.length; j++) {       try {         Mac.getInstance(validValues[i],invalidValues[j]);         fail(\"NoSuchProviderException must be thrown (algorithm: \".concat(validValues[i]).concat(\" provider: \").concat(invalidValues[j]).concat(\")\"));       }  catch (      NoSuchProviderException e) {       }     }   } } "
"public String execute(Locale locale,Map params) throws WorkflowException {   validateParameters(params);   String metadataFile=getString(params,ParameterKeys.P_META_DATA);   boolean hasMetaData=(metadataFile != null) && (metadataFile.trim().length() > 0);   String metadata=null;   String extendedData=null;   if (hasMetaData) {     String extendedDataFile=getString(params,ParameterKeys.P_EXTENDED_DATA);     metadata=getContent(metadataFile,locale);     extendedData=getContent(extendedDataFile,locale);   }  else {     String entityId=getString(params,ParameterKeys.P_ENTITY_ID);     String metaAlias=generateMetaAliasForIDP(getString(params,ParameterKeys.P_REALM));     Map map=new HashMap();     map.put(MetaTemplateParameters.P_IDP,metaAlias);     map.put(MetaTemplateParameters.P_IDP_E_CERT,getString(params,ParameterKeys.P_IDP_E_CERT));     map.put(MetaTemplateParameters.P_IDP_S_CERT,getString(params,ParameterKeys.P_IDP_S_CERT));     try {       metadata=CreateSAML2HostedProviderTemplate.buildMetaDataTemplate(entityId,map,getRequestURL(params));       extendedData=CreateSAML2HostedProviderTemplate.createExtendedDataTemplate(entityId,map,getRequestURL(params));     }  catch (    SAML2MetaException e) {       return e.getMessage();     }   }   String[] results=ImportSAML2MetaData.importData(null,metadata,extendedData);   String realm=results[0];   String entityId=results[1];   String cot=getString(params,ParameterKeys.P_COT);   if ((cot != null) && (cot.length() > 0)) {     try {       AddProviderToCOT.addToCOT(realm,cot,entityId);     }  catch (    COTException e) {       throw new WorkflowException(e.getMessage());     }   }   try {     List attrMapping=getAttributeMapping(params);     if (!attrMapping.isEmpty()) {       SAML2MetaManager manager=new SAML2MetaManager();       EntityConfigElement config=manager.getEntityConfig(realm,entityId);       IDPSSOConfigElement ssoConfig=manager.getIDPSSOConfig(realm,entityId);       Map attribConfig=SAML2MetaUtils.getAttributes(ssoConfig);       List mappedAttributes=(List)attribConfig.get(SAML2Constants.ATTRIBUTE_MAP);       mappedAttributes.addAll(attrMapping);       manager.setEntityConfig(realm,config);     }   }  catch (  SAML2MetaException e) {     throw new WorkflowException(e.getMessage());   }   try {     return getMessage(\"idp.configured\",locale) + \"|||realm=\" + realm+ \"&entityId=\"+ URLEncoder.encode(entityId,\"UTF-8\");   }  catch (  UnsupportedEncodingException e) {     throw new WorkflowException(e.getMessage());   } } "
"public void addCookie(Cookie cookie){   if (this._getHttpServletResponse() != null) {     this._getHttpServletResponse().addCookie(cookie);     internalCookies.add(new RemoteCookie(cookie));   }  else {     internalCookies.add(new RemoteCookie(cookie));   } } "
"public com.sun.identity.liberty.ws.idpp.jaxb.ModifyType createModifyType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyTypeImpl(); } "
"public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader){   if (signed && (xmlString != null)) {     return xmlString;   }   StringBuffer xml=new StringBuffer(300);   if (includeHeader) {     xml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"\").append(SAMLConstants.DEFAULT_ENCODING).append(\"\\\" ?>\\n\");   }   String prefix=\"\";   String libprefix=\"\";   String uri=\"\";   String liburi=\"\";   String uriXSI=\"\";   if (includeNS) {     prefix=SAMLConstants.PROTOCOL_PREFIX;     libprefix=IFSConstants.LIB_PREFIX;   }   if (declareNS) {     uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;     if (minorVersion == IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {       liburi=IFSConstants.LIB_12_NAMESPACE_STRING;     }  else {       liburi=IFSConstants.LIB_NAMESPACE_STRING;     }     uriXSI=IFSConstants.XSI_NAMESPACE_STRING;   }   String instantString=DateUtils.toUTCDateFormat(issueInstant);   xml.append(\"<\").append(prefix).append(\"Request\").append(uri).append(\" \").append(liburi).append(\" \").append(uriXSI);   if (minorVersion == IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {     if (id != null && !(id.length() == 0)) {       xml.append(\" id=\\\"\").append(id).append(\"\\\"\");     }   }   xml.append(\" RequestID=\\\"\").append(requestID).append(\"\\\"\").append(\" MajorVersion=\\\"\").append(majorVersion).append(\"\\\"\").append(\" MinorVersion=\\\"\").append(minorVersion).append(\"\\\"\").append(\" IssueInstant=\\\"\").append(instantString).append(\"\\\"\");   if (minorVersion == IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {     xml.append(\" xsi:type\").append(\"=\\\"\").append(libprefix).append(\"SignedSAMLRequestType\").append(\"\\\"\");   }   xml.append(\">\");   if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {     Iterator i=respondWiths.iterator();     String respondWith=null;     while (i.hasNext()) {       respondWith=(String)i.next();       xml.append(\"<\").append(prefix).append(\"RespondWith>\");       if (respondWith.startsWith(SAMLConstants.ASSERTION_PREFIX)) {         xml.append(respondWith);       }  else {         try {           xml.append(checkAndGetRespondWith(respondWith));         }  catch (        SAMLException e) {           FSUtils.debug.error(\"Request.toString: \",e);           xml.append(respondWith);         }       }       xml.append(\"</\").append(prefix).append(\"RespondWith>\");     }   }   if (signed) {     if (signatureString != null) {       xml.append(signatureString);     }  else     if (signature != null) {       signatureString=XMLUtils.print(signature);       xml.append(signatureString);     }   }   Iterator j; switch (contentType) { case AUTHENTICATION_QUERY:     xml.append(((AuthenticationQuery)query).toString(includeNS,false));   break; case AUTHORIZATION_DECISION_QUERY: xml.append(((AuthorizationDecisionQuery)query).toString(includeNS,false)); break; case ATTRIBUTE_QUERY: xml.append(((AttributeQuery)query).toString(includeNS,false)); break; case ASSERTION_ID_REFERENCE: j=assertionIDRefs.iterator(); while (j.hasNext()) { xml.append(((AssertionIDReference)j.next()).toString(true,true)); } break; case ASSERTION_ARTIFACT: j=artifacts.iterator(); while (j.hasNext()) { xml.append(((AssertionArtifact)j.next()).toString(includeNS,false)); } break; default : break; } xml.append(\"</\").append(prefix).append(\"Request>\"); return xml.toString(); } "
"public boolean hasNavigtionBar(){   return mHasNavigationBar; } "
"public static String generateID(){   if (random == null) {     return null;   }   byte bytes[]=new byte[IFSConstants.ID_LENGTH];   random.nextBytes(bytes);   String encodedID=FSID_PREFIX + SAMLUtils.byteArrayToHexString(bytes);   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"FSUtils.generateID: generated id is \" + encodedID);   }   return encodedID; } "
"public String encodedQuery(){   if (queryNamesAndValues == null)   return null;   int queryStart=url.indexOf('?') + 1;   int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),\"#\");   return url.substring(queryStart,queryEnd); } "
"public BatchUpdateException(Throwable cause){   this(null,cause); } "
"public InputSource(String systemId){   setSystemId(systemId); } "
"public com.sun.identity.liberty.ws.disco.jaxb.ServiceTypeElement createServiceTypeElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb.impl.ServiceTypeElementImpl(); } "
"public BuilderImage<T> size(Size size){   this.config.setSize(size);   return this; } "
"private boolean isRecordFileExist(){   String fileName=null;   fileName=mService.getRecordingNameWithPath();   File recordingFileToSave=new File(fileName + FmRecorder.RECORDING_FILE_EXTENSION);   return recordingFileToSave.exists(); } "
"public DefaultComboBoxModel(){   objects=new Vector<E>(); } "
"private void generatePatternBitmap(){   if (getBounds().width() <= 0 || getBounds().height() <= 0) {     return;   }   mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);   final Canvas canvas=new Canvas(mBitmap);   final Rect r=new Rect();   boolean verticalStartWhite=true;   for (int i=0; i <= numRectanglesVertical; i++) {     boolean isWhite=verticalStartWhite;     for (int j=0; j <= numRectanglesHorizontal; j++) {       r.top=i * mRectangleSize;       r.left=j * mRectangleSize;       r.bottom=r.top + mRectangleSize;       r.right=r.left + mRectangleSize;       canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);       isWhite=!isWhite;     }     verticalStartWhite=!verticalStartWhite;   } } "
"public Builder removeAllNames(){   this.names.clear();   return this; } "
"public void cleanup(PdfCanvas cb){   int k=savedStates.size();   while (k-- > 0)   cb.restoreState(); } "
"public AESCipher(boolean forEncryption,byte[] key,byte[] iv){   BlockCipher aes=new AESFastEngine();   BlockCipher cbc=new CBCBlockCipher(aes);   bp=new PaddedBufferedBlockCipher(cbc);   KeyParameter kp=new KeyParameter(key);   ParametersWithIV piv=new ParametersWithIV(kp,iv);   bp.init(forEncryption,piv); } "
"public boolean before(Date when){   return getMillisOf(this) < getMillisOf(when); } "
"public void testIsParityAdjusted(){   try {     DESKeySpec.isParityAdjusted(null,1);     fail(\"Should raise an InvalidKeyException \" + \"in case of null byte array.\");   }  catch (  NullPointerException e) {     fail(\"Unexpected NullPointerException was thrown.\");   } catch (  InvalidKeyException e) {   }   byte[] key={1,2,3,4,5,6,7,8};   try {     DESKeySpec.isParityAdjusted(key,1);     fail(\"Should raise an InvalidKeyException \" + \"in case of short byte array.\");   }  catch (  NullPointerException e) {     fail(\"Unexpected NullPointerException was thrown.\");   } catch (  InvalidKeyException e) {   }   byte[] key_not_pa={1,2,3,4,5,6,7,8};   try {     assertFalse(\"Method returns true when false is expected.\",DESKeySpec.isParityAdjusted(key_not_pa,0));   }  catch (  NullPointerException e) {     fail(\"Unexpected NullPointerException was thrown.\");   } catch (  InvalidKeyException e) {     fail(\"Unexpected InvalidKeyException was thrown.\");   }   byte[] key_pa={(byte)128,(byte)131,(byte)133,(byte)134,(byte)137,(byte)138,(byte)140,(byte)143};   try {     assertTrue(\"Method returns false when true is expected.\",DESKeySpec.isParityAdjusted(key_pa,0));   }  catch (  NullPointerException e) {     fail(\"Unexpected NullPointerException was thrown.\");   } catch (  InvalidKeyException e) {     fail(\"Unexpected InvalidKeyException was thrown.\");   } } "
"public FrameBodyTDOR(byte textEncoding,String text){   super(textEncoding,text); } "
"protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){   return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f; } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(\"MessageDestination[\");   sb.append(\"name=\");   sb.append(getName());   if (link != null) {     sb.append(\", link=\");     sb.append(link);   }   if (getType() != null) {     sb.append(\", type=\");     sb.append(getType());   }   if (usage != null) {     sb.append(\", usage=\");     sb.append(usage);   }   if (getDescription() != null) {     sb.append(\", description=\");     sb.append(getDescription());   }   sb.append(\"]\");   return (sb.toString()); } "
"private NSObject parseDateString(){   String numericalString=parseString();   if (numericalString.length() > 4 && numericalString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {     try {       return new NSDate(numericalString);     }  catch (    Exception ex) {     }   }   return new NSString(numericalString); } "
"public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   doGetPost(request,response); } "
"public void warn(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {   String fmsg=XSLMessages.createXPATHWarning(msg,args);   ErrorListener ehandler=xctxt.getErrorListener();   if (null != ehandler) {     ehandler.warning(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));   } } "
"@Override public void removeAttributeChangeNotificationListener(NotificationListener listener,String name) throws ListenerNotFoundException {   if (listener == null)   throw new IllegalArgumentException(\"Listener is null\");   if (attributeBroadcaster != null) {     attributeBroadcaster.removeNotificationListener(listener);   } } "
"private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){   float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;   int norm=distance(topLeft,topRight);   float cos=(topRight.getX() - topLeft.getX()) / norm;   float sin=(topRight.getY() - topLeft.getY()) / norm;   ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);   corr=distance(bottomLeft,topLeft) / (float)dimensionRight;   norm=distance(bottomRight,topRight);   cos=(topRight.getX() - bottomRight.getX()) / norm;   sin=(topRight.getY() - bottomRight.getY()) / norm;   ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);   if (!isValid(c1)) {     if (isValid(c2)) {       return c2;     }     return null;   }   if (!isValid(c2)) {     return c1;   }   int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());   int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());   if (l1 <= l2) {     return c1;   }   return c2; } "
"public static long lowerHexToUnsignedLong(String lowerHex){   int length=lowerHex.length();   if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex);   int i=length > 16 ? length - 16 : 0;   long result=0;   for (; i < length; i++) {     char c=lowerHex.charAt(i);     result<<=4;     if (c >= '0' && c <= '9') {       result|=c - '0';     }  else     if (c >= 'a' && c <= 'f') {       result|=c - 'a' + 10;     }  else {       throw isntLowerHexLong(lowerHex);     }   }   return result; } "
"public static void main(String args[]) throws Exception {   McastService service=new McastService();   java.util.Properties p=new java.util.Properties();   p.setProperty(\"mcastPort\",\"5555\");   p.setProperty(\"mcastAddress\",\"224.10.10.10\");   p.setProperty(\"mcastClusterDomain\",\"catalina\");   p.setProperty(\"bindAddress\",\"localhost\");   p.setProperty(\"memberDropTime\",\"3000\");   p.setProperty(\"mcastFrequency\",\"500\");   p.setProperty(\"tcpListenPort\",\"4000\");   p.setProperty(\"tcpListenHost\",\"127.0.0.1\");   p.setProperty(\"tcpSecurePort\",\"4100\");   p.setProperty(\"udpListenPort\",\"4200\");   service.setProperties(p);   service.start();   Thread.sleep(60 * 1000 * 60); } "
"public boolean isAlreadyConnectedToDS(DataServerHandler dsHandler){   if (connectedDSs.containsKey(dsHandler.getServerId())) {     logger.error(ERR_DUPLICATE_SERVER_ID,localReplicationServer.getMonitorInstanceName(),connectedDSs.get(dsHandler.getServerId()),dsHandler,dsHandler.getServerId());     return true;   }   return false; } "
"private void initializeScheme(String p_uriSpec) throws MalformedURIException {   int uriSpecLen=p_uriSpec.length();   int index=0;   String scheme=null;   char testChar='\\0';   while (index < uriSpecLen) {     testChar=p_uriSpec.charAt(index);     if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {       break;     }     index++;   }   scheme=p_uriSpec.substring(0,index);   if (scheme.length() == 0) {     throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_INURI,null));   }  else {     setScheme(scheme);   } } "
"public SQLNonTransientException(String reason,String sqlState){   super(reason,sqlState,0); } "
"public void removeElementAt(int i){   if (null == m_map)   return;   if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i);  else   m_map[i]=DTM.NULL; } "
"public static void main(final String[] args){   DOMTestCase.doMain(entitygetentityname.class,args); } "
"public void removePropertyChangeListener(PropertyChangeListener listener){   support.removePropertyChangeListener(listener); } "
"protected boolean isRepaintingRoot(){   return isRepaintingRoot; } "
"public void updateUI(){   setUI((PanelUI)UIManager.getUI(this)); } "
"private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {   if (GraphicsEnvironment.isHeadless()) {     throw new HeadlessException();   }   s.defaultReadObject(); } "
"public Resource createResource(){   Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE);   if (obj == null) {     return new ResourceImpl();   }  else {     return (Resource)obj;   } } "
"public void runTest() throws Throwable {   Document doc;   DocumentType docTypeNull=null;   Document docImp;   DOMImplementation domImpl;   DocumentType docType;   NamedNodeMap nodeMap;   Notation notation1;   Notation notation2;   Notation notationImp1;   Notation notationImp2;   Notation notationImpNew1;   Notation notationImpNew2;   String publicId1;   String publicId1Imp;   String publicId1NewImp;   String publicId2Imp;   String publicId2NewImp;   String systemId1Imp;   String systemId1NewImp;   String systemId2;   String systemId2Imp;   String systemId2NewImp;   doc=(Document)load(\"staffNS\",true);   domImpl=doc.getImplementation();   docType=doc.getDoctype();   docImp=domImpl.createDocument(\"http://www.w3.org/DOM/Test\",\"a:b\",docTypeNull);   nodeMap=docType.getNotations();   assertNotNull(\"notationsNotNull\",nodeMap);   notation1=(Notation)nodeMap.getNamedItem(\"notation1\");   notation2=(Notation)nodeMap.getNamedItem(\"notation2\");   notationImp1=(Notation)doc.importNode(notation1,true);   notationImp2=(Notation)doc.importNode(notation2,false);   notationImpNew1=(Notation)docImp.importNode(notation1,false);   notationImpNew2=(Notation)docImp.importNode(notation2,true);   publicId1=notation1.getPublicId();   publicId1Imp=notation1.getPublicId();   publicId1NewImp=notation1.getPublicId();   systemId1Imp=notation1.getSystemId();   systemId1NewImp=notation1.getSystemId();   publicId2Imp=notation2.getPublicId();   publicId2NewImp=notation2.getPublicId();   systemId2=notation2.getSystemId();   systemId2Imp=notation2.getSystemId();   systemId2NewImp=notation2.getSystemId();   assertEquals(\"documentimportnode22_N1PID\",publicId1,publicId1Imp);   assertEquals(\"documentimportnode22_N1NPID\",publicId1,publicId1NewImp);   assertNull(\"documentimportnode22_N1SID\",systemId1Imp);   assertNull(\"documentimportnode22_N1NSID\",systemId1NewImp);   assertEquals(\"documentimportnode22_N2SID\",systemId2,systemId2Imp);   assertEquals(\"documentimportnode22_N2NSID\",systemId2,systemId2NewImp);   assertNull(\"documentimportnode22_N2PID\",publicId2Imp);   assertNull(\"documentimportnode22_N2NPID\",publicId2Imp); } "
"protected void adjustForGravity(GridBagConstraints constraints,Rectangle r){   AdjustForGravity(constraints,r); } "
"public String nextLine(){   if (hasNextPattern == linePattern())   return getCachedResult();   clearCaches();   String result=findWithinHorizon(linePattern,0);   if (result == null)   throw new NoSuchElementException(\"No line found\");   MatchResult mr=this.match();   String lineSep=mr.group(1);   if (lineSep != null)   result=result.substring(0,result.length() - lineSep.length());   if (result == null)   throw new NoSuchElementException();  else   return result; } "
"public JPanel(){   this(true); } "
"public BarcodeQRCode(String content){   this(content,null); } "
"private void write(byte[] buffer,int offset,int byteCount) throws IOException {   Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);   if (streaming) {     while (byteCount > 0) {       int bytesWritten=IoBridge.sendto(fd,buffer,offset,byteCount,0,null,0);       byteCount-=bytesWritten;       offset+=bytesWritten;     }   }  else {     IoBridge.sendto(fd,buffer,offset,byteCount,0,null,port);   } } "
"protected void paintComponent(Graphics g){   if (ui != null) {     super.paintComponent(g);   }  else   if (isOpaque()) {     g.setColor(getBackground());     g.fillRect(0,0,getWidth(),getHeight());   } } "
"private Set<Integer> computeDSsConnectedTo(int rsId,int dsServerId){   final Set<Integer> connectedDSs=new HashSet<>();   if (rsServerId == rsId) {     connectedDSs.add(dsServerId);   }   for (  DSInfo dsInfo : replicaInfos.values()) {     if (dsInfo.getRsId() == rsId) {       connectedDSs.add(dsInfo.getDsId());     }   }   return connectedDSs; } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testNode;   NamedNodeMap attributes;   Attr streetAttr;   boolean state;   doc=(Document)load(\"staff\",true);   addressList=doc.getElementsByTagName(\"address\");   testNode=addressList.item(2);   ((Element)testNode).removeAttribute(\"street\");   attributes=testNode.getAttributes();   streetAttr=(Attr)attributes.getNamedItem(\"street\");   assertNotNull(\"streetAttrNotNull\",streetAttr);   state=streetAttr.getSpecified();   assertFalse(\"attrSpecifiedValueRemoveAssert\",state); } "
"@Override public void firePropertyChange(String propertyName,float oldValue,float newValue){ } "
"public boolean startsWith(Name n){   if (n instanceof CompositeName) {     return (impl.startsWith(n.size(),n.getAll()));   }  else {     return false;   } } "
"@Override public MapboxGeocoding build() throws ServicesException {   validateAccessToken(accessToken);   return new MapboxGeocoding(this); } "
"public StateInteractive mouse_moved(){   PlaPointFloat mouse_position=i_brd.coordinate_transform.board_to_user(i_brd.get_current_mouse_position());   i_brd.screen_messages.set_mouse_position(mouse_position);   return this; } "
"public void removeUser(){   this.authority.removeUserInfo(); } "
"private Response processRequest(Request req,PLLAuditor auditor) throws PolicyEvaluationException {   String content=req.getContent();   if (debug.messageEnabled()) {     debug.message(\"PolicyRequestHandler.processRequest(): content is \" + content);   }   PolicyService psReq=PolicyService.parseXML(content);   if (debug.messageEnabled()) {     debug.message(\"PolicyRequestHandler.processRequest(): \" + \"policy service object:\" + psReq.toXMLString());   }   PolicyService psRes=processPolicyServiceRequest(psReq,auditor);   if (debug.messageEnabled()) {     debug.message(\"PolicyRequestHandler.processRequest(): \" + \"get response from policy framework: \\n\" + psRes.toXMLString());   }   return new Response(psRes.toXMLString()); } "
"protected void deployWAR(ContextName cn,File war){   File xml=new File(host.getAppBaseFile(),cn.getBaseName() + \"/\" + Constants.ApplicationContextXml);   File warTracker=new File(host.getAppBaseFile(),cn.getBaseName() + \"/\" + Constants.WarTracker);   boolean xmlInWar=false;   try (JarFile jar=new JarFile(war)){     JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);     if (entry != null) {       xmlInWar=true;     }   }  catch (  IOException e) {   }   boolean useXml=false;   if (xml.exists() && unpackWARs && (!warTracker.exists() || warTracker.lastModified() == war.lastModified())) {     useXml=true;   }   Context context=null;   try {     if (deployXML && useXml && !copyXML) { synchronized (digesterLock) {         try {           context=(Context)digester.parse(xml);         }  catch (        Exception e) {           log.error(sm.getString(\"hostConfig.deployDescriptor.error\",war.getAbsolutePath()),e);         }  finally {           digester.reset();           if (context == null) {             context=new FailedContext();           }         }       }       context.setConfigFile(xml.toURI().toURL());     }  else     if (deployXML && xmlInWar) { synchronized (digesterLock) {         try (JarFile jar=new JarFile(war)){           JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);           try (InputStream istream=jar.getInputStream(entry)){             context=(Context)digester.parse(istream);           }          }  catch (        Exception e) {           log.error(sm.getString(\"hostConfig.deployDescriptor.error\",war.getAbsolutePath()),e);         }  finally {           digester.reset();           if (context == null) {             context=new FailedContext();           }           context.setConfigFile(UriUtil.buildJarUrl(war,Constants.ApplicationContextXml));         }       }     }  else     if (!deployXML && xmlInWar) {       log.error(sm.getString(\"hostConfig.deployDescriptor.blocked\",cn.getPath(),Constants.ApplicationContextXml,new File(host.getConfigBaseFile(),cn.getBaseName() + \".xml\")));     }  else {       context=(Context)Class.forName(contextClass).newInstance();     }   }  catch (  Throwable t) {     ExceptionUtils.handleThrowable(t);     log.error(sm.getString(\"hostConfig.deployWar.error\",war.getAbsolutePath()),t);   }  finally {     if (context == null) {       context=new FailedContext();     }   }   boolean copyThisXml=false;   if (deployXML) {     if (host instanceof StandardHost) {       copyThisXml=((StandardHost)host).isCopyXML();     }     if (!copyThisXml && context instanceof StandardContext) {       copyThisXml=((StandardContext)context).getCopyXML();     }     if (xmlInWar && copyThisXml) {       xml=new File(host.getConfigBaseFile(),cn.getBaseName() + \".xml\");       try (JarFile jar=new JarFile(war)){         JarEntry entry=jar.getJarEntry(Constants.ApplicationContextXml);         try (InputStream istream=jar.getInputStream(entry);FileOutputStream fos=new FileOutputStream(xml);BufferedOutputStream ostream=new BufferedOutputStream(fos,1024)){           byte buffer[]=new byte[1024];           while (true) {             int n=istream.read(buffer);             if (n < 0) {               break;             }             ostream.write(buffer,0,n);           }           ostream.flush();         }        }  catch (      IOException e) {       }     }   }   DeployedApplication deployedApp=new DeployedApplication(cn.getName(),xml.exists() && deployXML && copyThisXml);   long startTime=0;   if (log.isInfoEnabled()) {     startTime=System.currentTimeMillis();     log.info(sm.getString(\"hostConfig.deployWar\",war.getAbsolutePath()));   }   try {     deployedApp.redeployResources.put(war.getAbsolutePath(),Long.valueOf(war.lastModified()));     if (deployXML && xml.exists() && copyThisXml) {       deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(xml.lastModified()));     }  else {       deployedApp.redeployResources.put((new File(host.getConfigBaseFile(),cn.getBaseName() + \".xml\")).getAbsolutePath(),Long.valueOf(0));     }     Class<?> clazz=Class.forName(host.getConfigClass());     LifecycleListener listener=(LifecycleListener)clazz.newInstance();     context.addLifecycleListener(listener);     context.setName(cn.getName());     context.setPath(cn.getPath());     context.setWebappVersion(cn.getVersion());     context.setDocBase(cn.getBaseName() + \".war\");     host.addChild(context);   }  catch (  Throwable t) {     ExceptionUtils.handleThrowable(t);     log.error(sm.getString(\"hostConfig.deployWar.error\",war.getAbsolutePath()),t);   }  finally {     boolean unpackWAR=unpackWARs;     if (unpackWAR && context instanceof StandardContext) {       unpackWAR=((StandardContext)context).getUnpackWAR();     }     if (unpackWAR && context.getDocBase() != null) {       File docBase=new File(host.getAppBaseFile(),cn.getBaseName());       deployedApp.redeployResources.put(docBase.getAbsolutePath(),Long.valueOf(docBase.lastModified()));       addWatchedResources(deployedApp,docBase.getAbsolutePath(),context);       if (deployXML && !copyThisXml && (xmlInWar || xml.exists())) {         deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(xml.lastModified()));       }     }  else {       addWatchedResources(deployedApp,null,context);     }     addGlobalRedeployResources(deployedApp);   }   deployed.put(cn.getName(),deployedApp);   if (log.isInfoEnabled()) {     log.info(sm.getString(\"hostConfig.deployWar.finished\",war.getAbsolutePath(),Long.valueOf(System.currentTimeMillis() - startTime)));   } } "
"private boolean isLocked(String path,String ifHeader){   LockInfo lock=resourceLocks.get(path);   Enumeration<String> tokenList=null;   if ((lock != null) && (lock.hasExpired())) {     resourceLocks.remove(path);   }  else   if (lock != null) {     tokenList=lock.tokens.elements();     boolean tokenMatch=false;     while (tokenList.hasMoreElements()) {       String token=tokenList.nextElement();       if (ifHeader.indexOf(token) != -1) {         tokenMatch=true;         break;       }     }     if (!tokenMatch)     return true;   }   Enumeration<LockInfo> collectionLocksList=collectionLocks.elements();   while (collectionLocksList.hasMoreElements()) {     lock=collectionLocksList.nextElement();     if (lock.hasExpired()) {       collectionLocks.removeElement(lock);     }  else     if (path.startsWith(lock.path)) {       tokenList=lock.tokens.elements();       boolean tokenMatch=false;       while (tokenList.hasMoreElements()) {         String token=tokenList.nextElement();         if (ifHeader.indexOf(token) != -1) {           tokenMatch=true;           break;         }       }       if (!tokenMatch)       return true;     }   }   return false; } "
"@Override public void startPrefixMapping(String prefix,String namespaceURI) throws SAXException {   if (saxLog.isDebugEnabled()) {     saxLog.debug(\"startPrefixMapping(\" + prefix + \",\"+ namespaceURI+ \")\");   }   ArrayStack<String> stack=namespaces.get(prefix);   if (stack == null) {     stack=new ArrayStack<>();     namespaces.put(prefix,stack);   }   stack.push(namespaceURI); } "
"private Object executeMethod(final Method method,final ApplicationContext context,final Object[] params) throws PrivilegedActionException, IllegalAccessException, InvocationTargetException {   if (SecurityUtil.isPackageProtectionEnabled()) {     return AccessController.doPrivileged(new PrivilegedExecuteMethod(method,context,params));   }  else {     return method.invoke(context,params);   } } "
"private void replace(MethodNode method){   StackFrame[] frames=StackUtil.getFrames(method);   AbstractInsnNode ain=method.instructions.getFirst();   List<String> strings=new ArrayList<String>();   List<Integer> argSizes=new ArrayList<Integer>();   List<Integer> indecies=new ArrayList<Integer>();   while (ain != null) {     if (ain.getOpcode() == Opcodes.INVOKESTATIC) {       String desc=((MethodInsnNode)ain).desc;       if (isDashDesc(desc)) {         int opIndex=OpUtils.getIndex(ain);         Type t=Type.getMethodType(desc);         MethodInsnNode min=(MethodInsnNode)ain;         ClassNode owner=getNodes().get(min.owner);         Object[] args=new Object[t.getArgumentTypes().length];         if (opIndex < 0 || opIndex >= frames.length || args.length <= 1) {           ain=ain.getNext();           continue;         }         StackFrame frame=frames[opIndex];         if (frame == null) {           ain=ain.getNext();           continue;         }         if (frame.getStackSize() < args.length) {           ain=ain.getNext();           continue;         }         boolean failed=false;         for (int i=0; i < args.length; i++) {           InsnValue val=(InsnValue)frame.getStack(frame.getStackSize() - i - 1);           if (val.getValue() == null) {             failed=true;             break;           }           args[args.length - i - 1]=val.getValue();         }         if (failed) {           ain=ain.getNext();           continue;         }         Object o=Sandbox.getIsolatedReturn(owner,min,args);         if (o != null) {           strings.add(o.toString());           argSizes.add(args.length);           indecies.add(opIndex);         }       }     }     ain=ain.getNext();   }   ain=method.instructions.getFirst();   int offset=0;   while (ain != null) {     if (ain.getOpcode() == Opcodes.INVOKESTATIC) {       MethodInsnNode min=(MethodInsnNode)ain;       if (isDashDesc(min.desc)) {         int opIndex=OpUtils.getIndex(ain);         if (indecies.size() > 0 && indecies.get(0) + offset == opIndex) {           indecies.remove(0);           int args=argSizes.remove(0);           String string=strings.remove(0);           for (int i=0; i < args; i++) {             method.instructions.insertBefore(min,new InsnNode(Opcodes.POP));             offset++;           }           LdcInsnNode ldc=new LdcInsnNode(string);           method.instructions.set(ain,ldc);           ain=ldc;         }       }     }     ain=ain.getNext();   } } "
"private static void addTestUser() throws Exception {   TestCaseUtils.addEntry(\"dn: uid=test.user,o=test\",\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: test.user\",\"givenName: Test\",\"sn: User\",\"cn: Test User\",\"ds-privilege-name: bypass-acl\",\"userPassword: password\"); } "
"private void checkPostsDisplayOnRecyclerView(List<Shot> shotsToCheck,int position){   int columnCount=5;   int size=shotsToCheck.size() + position;   int pos=0;   for (int i=position; i < size; i++) {     checkItemAtPosition(i,shotsToCheck.get(pos));     if (((i + 1) % columnCount) == 0) {       int nextRowStart=i + columnCount;       int nextRowEnd=nextRowStart - columnCount + 1;       for (int n=nextRowStart; n >= nextRowEnd; n--) {         checkItemAtPosition(n,shotsToCheck.get(n - position));       }       i=i + columnCount;     }     pos++;   } } "
"private static String which(String classname,ClassLoader loader){   String classnameAsResource=classname.replace('.','/') + \".class\";   if (loader == null)   loader=ClassLoader.getSystemClassLoader();   URL it=ss.getResourceAsURL(loader,classnameAsResource);   if (it != null) {     return it.toString();   }  else {     return null;   } } "
"private static int cleanupService(String serviceName,PrintStream out,PrintStream err){   String[] cmd;   if (hasUAC()) {     cmd=new String[]{getLauncherBinaryFullPath(),LAUNCHER_OPTION,getLauncherAdministratorBinaryFullPath(),LAUNCHER_OPTION,getBinaryFullPath(),\"cleanup\",serviceName,DEBUG_OPTION};   }  else {     cmd=new String[]{getBinaryFullPath(),\"cleanup\",serviceName,DEBUG_OPTION};   }   try {     int resultCode=Runtime.getRuntime().exec(cmd).waitFor(); switch (resultCode) { case 0:       printWrappedText(out,INFO_WINDOWS_SERVICE_CLEANUP_SUCCESS.get(serviceName));     return SERVICE_CLEANUP_SUCCESS; case 1:   printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_NOT_FOUND.get(serviceName)); return SERVICE_NOT_FOUND; case 2: printWrappedText(out,WARN_WINDOWS_SERVICE_CLEANUP_MARKED_FOR_DELETION.get(serviceName)); return SERVICE_CLEANUP_MARKED_FOR_DELETION; case 3: printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName)); return SERVICE_CLEANUP_ERROR; default : printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName)); return SERVICE_CLEANUP_ERROR; } }  catch (Throwable t) { err.println(ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName)); printWrappedText(err,\"Exception:\" + t); return SERVICE_CLEANUP_ERROR; } } "
"public void nodesWereInserted(TreeNode node,int[] childIndices){   if (listenerList != null && node != null && childIndices != null && childIndices.length > 0) {     int cCount=childIndices.length;     Object[] newChildren=new Object[cCount];     for (int counter=0; counter < cCount; counter++)     newChildren[counter]=node.getChildAt(childIndices[counter]);     fireTreeNodesInserted(this,getPathToRoot(node),childIndices,newChildren);   } } "
"public boolean isNotifyListeners(){   return notifyListeners; } "
"public ValidationException(Throwable t){   super(t); } "
"@SuppressWarnings(\"unused\") static <T>Promise<List<T>> promiseList(Class<T> componentType){   return new BasePromise<>(); } "
"public boolean isFlavorRemoteObjectType(){   return isRepresentationClassRemote() && isRepresentationClassSerializable() && isMimeTypeEqual(javaRemoteObjectMimeType); } "
"public static GUID parseGUID(final String guid) throws GUIDFormatException {   if (guid == null) {     throw new GUIDFormatException(\"null\");   }   if (!GUID_PATTERN.matcher(guid).matches()) {     throw new GUIDFormatException(\"Invalid guidData format.\");   }   final int[] bytes=new int[GUID_LENGTH];   final int[] arrayIndices={3,2,1,0,5,4,7,6,8,9,10,11,12,13,14,15};   int arrayPointer=0;   for (int i=0; i < guid.length(); i++) {     if (guid.charAt(i) == '-') {       continue;     }     bytes[arrayIndices[arrayPointer++]]=Integer.parseInt(guid.substring(i,i + 2),16);     i++;   }   return new GUID(bytes); } "
"public com.sun.identity.saml2.jaxb.metadata.IDPSSODescriptorElement createIDPSSODescriptorElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.IDPSSODescriptorElementImpl(); } "
"static void checkDesc(final String desc,final boolean canBeVoid){   int end=checkDesc(desc,0,canBeVoid);   if (end != desc.length()) {     throw new IllegalArgumentException(\"Invalid descriptor: \" + desc);   } } "
"public boolean isCachedMemory(){   return true; } "
"public JButton(String text,Icon icon){   setModel(new DefaultButtonModel());   init(text,icon); } "
"public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {   return decodeToObject(encodedObject,NO_OPTIONS,null); } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementhasattribute02.class,args); } "
"public boolean enabled(){   return this.enabled && !this.loading; } "
"private void checkDSSentAndAcked(FakeReplicationDomain fakeRd,int nPacket){   fakeRd.newSafeReadAssertions().sentUpdates(nPacket).acknowledgedUpdates(nPacket).runAsserts(); } "
"public synchronized void sendMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {   if (message == null || receiverAddress == null)   throw new IllegalArgumentException(\"Null argument\");   if (peerPortAdvertisedInHeaders <= 0) {     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"receiver port = \" + receiverPort + \" for this channel \"+ this+ \" key \"+ key);     }     if (receiverPort <= 0) {       this.peerPortAdvertisedInHeaders=5060;     }  else {       this.peerPortAdvertisedInHeaders=receiverPort;     }     if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {       logger.logDebug(\"2.Storing peerPortAdvertisedInHeaders = \" + peerPortAdvertisedInHeaders + \" for this channel \"+ this+ \" key \"+ key);     }   }   Socket sock=null;   IOException problem=null;   try {     sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),receiverAddress,receiverPort,\"TCP\",message,retry,this);   }  catch (  IOException any) {     problem=any;     logger.logWarning(\"Failed to connect \" + this.peerAddress + \":\"+ receiverPort+ \" but trying the advertised port=\"+ this.peerPortAdvertisedInHeaders+ \" if it's different than the port we just failed on\");     logger.logError(\"Error is \",any);   }   if (sock == null) {     if (peerAddressAdvertisedInHeaders != null && peerPortAdvertisedInHeaders > 0) {       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"Couldn't connect to receiverAddress = \" + receiverAddress + \" receiverPort = \"+ receiverPort+ \" key = \"+ key+ \" retrying on peerPortAdvertisedInHeaders \"+ peerPortAdvertisedInHeaders);       }       InetAddress address=InetAddress.getByName(peerAddressAdvertisedInHeaders);       sock=this.sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),address,this.peerPortAdvertisedInHeaders,\"TCP\",message,retry,this);       this.peerPort=this.peerPortAdvertisedInHeaders;       this.peerAddress=address;       this.key=MessageChannel.getKey(peerAddress,peerPort,\"TCP\");       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"retry suceeded to peerAddress = \" + peerAddress + \" peerPort = \"+ peerPort+ \" key = \"+ key);       }     }  else {       throw problem;     }   }   if (sock != mySock && sock != null) {     if (mySock != null) {       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"Old socket different than new socket on channel \" + key);         logger.logStackTrace();         logger.logWarning(\"Old socket local ip address \" + mySock.getLocalSocketAddress());         logger.logWarning(\"Old socket remote ip address \" + mySock.getRemoteSocketAddress());         logger.logWarning(\"New socket local ip address \" + sock.getLocalSocketAddress());         logger.logWarning(\"New socket remote ip address \" + sock.getRemoteSocketAddress());       }       close(false,false);     }     if (problem == null) {       if (mySock != null) {         if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {           logger.logWarning(\"There was no exception for the retry mechanism so creating a new thread based on the new socket for incoming \" + key);         }       }       mySock=sock;       this.myClientInputStream=mySock.getInputStream();       this.myClientOutputStream=mySock.getOutputStream();       Thread mythread=new Thread(this);       mythread.setDaemon(true);       mythread.setName(\"TCPMessageChannelThread\");       mythread.start();     }  else {       if (logger.isLoggingEnabled(LogWriter.TRACE_WARN)) {         logger.logWarning(\"There was an exception for the retry mechanism so not creating a new thread based on the new socket for incoming \" + key);       }       mySock=sock;     }   } } "
"void addOrReplaceDecls(XMLNSDecl newDecl){   int n=m_prefixTable.size();   for (int i=n - 1; i >= 0; i--) {     XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);     if (decl.getPrefix().equals(newDecl.getPrefix())) {       return;     }   }   m_prefixTable.add(newDecl); } "
"public SaltedSHA1PasswordStorageSchemeTestCase(){   super(\"cn=Salted SHA-1,cn=Password Storage Schemes,cn=config\"); } "
"public static int calculateG(int baseG,int level){ switch (level) { case 0:     return 238; case 1:   return baseG; case 2: return (int)(baseG * (35 + 59 + 104) / (32f + 35 + 59+ 104)); case 3: return (int)(baseG * (59 + 104) / (32f + 35 + 59+ 104)); case 4: return (int)(baseG * (104) / (32f + 35 + 59+ 104)); default : return 238; } } "
"private void clearComposeState(){   m_composeState=null; } "
"public void visitInsn(int opcode){   if (mv != null) {     mv.visitInsn(opcode);   } } "
"Iter(){   while ((next=findFirst()) != null) {     Object x=next.value;     if (x != null && x != next) {       @SuppressWarnings(\"unchecked\") V vv=(V)x;       nextValue=vv;       break;     }   } } "
"public static GenericIntermediateResponse newGenericIntermediateResponse(){   return new GenericIntermediateResponseImpl(); } "
"public void test_applyLocalizedPatternLjava_lang_String(){   DecimalFormat format=new DecimalFormat();   try {     format.applyLocalizedPattern(\"#.#\");     assertEquals(\"Wrong pattern 1\",\"#0.#\",format.toLocalizedPattern());     format.applyLocalizedPattern(\"#.\");     assertEquals(\"Wrong pattern 2\",\"#0.\",format.toLocalizedPattern());     format.applyLocalizedPattern(\"#\");     assertEquals(\"Wrong pattern 3\",\"#\",format.toLocalizedPattern());     format.applyLocalizedPattern(\".#\");     assertEquals(\"Wrong pattern 4\",\"#.0\",format.toLocalizedPattern());     try {       format.applyLocalizedPattern(\"'#,#:#0.0#;(#)\");       fail(\"Expected IllegalArgumentException was not thrown\");     }  catch (    IllegalArgumentException e) {     }     try {       format.applyLocalizedPattern((String)null);       fail(\"Expected NullPointerException was not thrown\");     }  catch (    NullPointerException e) {     }   }  catch (  Exception e) {     fail(\"Unexpected exception \" + e.toString());   } } "
"public SecurityVerifyHeader createSecurityVerifyHeader(){   SecurityVerify secVerify=new SecurityVerify();   return secVerify; } "
"public CMapContentParser(PdfTokenizer tokeniser){   this.tokeniser=tokeniser; } "
"public int compare(File file1,File file2){   return caseSensitivity.checkCompareTo(file1.getPath(),file2.getPath()); } "
"public Mp4TagCoverField(){   super(Mp4FieldKey.ARTWORK.getFieldName()); } "
"@Override public ConnectionChangeRecordWriter writeChangeRecord(final ModifyDNRequest change) throws LdapException {   Reject.ifNull(change);   connection.modifyDN(change);   return this; } "
"private void unparkSuccessor(Node node){   int ws=node.waitStatus;   if (ws < 0)   compareAndSetWaitStatus(node,ws,0);   Node s=node.next;   if (s == null || s.waitStatus > 0) {     s=null;     for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;   }   if (s != null)   LockSupport.unpark(s.thread); } "
"public void addListener(AMClientDataListener cdl){ synchronized (listeners) {     if (!listeners.contains(cdl)) {       listeners.add(cdl);     }   } } "
"public Identity(String name,IdentityScope scope) throws KeyManagementException {   this(name);   if (scope != null) {     scope.addIdentity(this);   }   this.scope=scope; } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentimportnode03.class,args); } "
"public Task cancelTask(String taskID){   schedulerLock.lock();   try {     Task t=tasks.get(taskID);     if (t == null) {       return null;     }     if (TaskState.isPending(t.getTaskState())) {       pendingTasks.remove(t);       t.setTaskState(TaskState.CANCELED_BEFORE_STARTING);       addCompletedTask(t);       writeState();     }     return t;   }   finally {     schedulerLock.unlock();   } } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   logger.info(\"Got an INVITE  \" + request);   try {     if (!challenged) {       challenged=true;       ChallengeTest.assertNull(requestEvent.getServerTransaction());       Response challenge=protocolObjects.messageFactory.createResponse(401,request);       ToHeader toHeader=(ToHeader)challenge.getHeader(ToHeader.NAME);       toHeader.setTag(\"challenge\");       sipProvider.sendResponse(challenge);       return;     }     logger.info(\"shootme: got an Invite sending OK\");     Response response=protocolObjects.messageFactory.createResponse(180,request);     ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     Address address=protocolObjects.addressFactory.createAddress(\"Shootme <sip:\" + myAddress + \":\"+ myPort+ \">\");     ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);     response.addHeader(contactHeader);     ServerTransaction st=requestEvent.getServerTransaction();     if (st == null) {       st=sipProvider.getNewServerTransaction(request);       logger.info(\"Server transaction created!\" + request);       logger.info(\"Dialog = \" + st.getDialog());       if (st.getDialog().getApplicationData() == null) {         st.getDialog().setApplicationData(new ApplicationData());       }     }  else {       logger.info(\"This is a RE INVITE \");       ChallengeTest.assertSame(\"Dialog mismatch \",st.getDialog(),this.dialog);     }     logger.info(\"got a server tranasaction \" + st);     byte[] content=request.getRawContent();     if (content != null) {       logger.info(\" content = \" + new String(content));       ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader(\"application\",\"sdp\");       logger.info(\"response = \" + response);       response.setContent(content,contentTypeHeader);     }     dialog=st.getDialog();     if (dialog != null) {       logger.info(\"Dialog \" + dialog);       logger.info(\"Dialog state \" + dialog.getState());     }     st.sendResponse(response);     response=protocolObjects.messageFactory.createResponse(200,request);     toHeader=(ToHeader)response.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     response.addHeader(contactHeader);     st.sendResponse(response);     logger.info(\"TxState after sendResponse = \" + st.getState());   }  catch (  Exception ex) {     String s=\"unexpected exception\";     logger.error(s,ex);     ChallengeTest.fail(s);   } } "
"static void removeAllDisallowedControls(DN targetDN,Operation operation) throws DirectoryException {   for (Iterator<Control> iter=operation.getRequestControls().iterator(); iter.hasNext(); ) {     final Control control=iter.next();     if (isProxyAuthzControl(control.getOID())) {       continue;     }     if (!getAccessControlHandler().isAllowed(targetDN,operation,control)) {       if (control.isCritical()) {         throw new DirectoryException(ResultCode.UNAVAILABLE_CRITICAL_EXTENSION,ERR_CONTROL_INSUFFICIENT_ACCESS_RIGHTS.get(control.getOID()));       }       iter.remove();     }   } } "
"protected void installListeners(){   propertyChangeListener=createPropertyChangeListener();   spinner.addPropertyChangeListener(propertyChangeListener);   if (DefaultLookup.getBoolean(spinner,this,\"Spinner.disableOnBoundaryValues\",false)) {     spinner.addChangeListener(getHandler());   }   JComponent editor=spinner.getEditor();   if (editor != null && editor instanceof JSpinner.DefaultEditor) {     JTextField tf=((JSpinner.DefaultEditor)editor).getTextField();     if (tf != null) {       tf.addFocusListener(nextButtonHandler);       tf.addFocusListener(previousButtonHandler);     }   } } "
"public void endNamespaceDecls(){   if (!decls.isEmpty()) {     for (Iterator itr=decls.entrySet().iterator(); itr.hasNext(); ) {       Map.Entry e=(Map.Entry)itr.next();       String prefix=(String)e.getKey();       String uri=(String)e.getValue();       if (!uri.equals(nss.getURI(prefix)))       nss.declarePrefix(prefix,uri);     }     decls.clear();     reverseDecls.clear();   }   inCollectingMode=false; } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"public FieldDataInvalidException(){ } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_namednodemapchildnoderange.class,args); } "
"public static Bitmap snapShotWithStatusBar(Activity activity){   View view=activity.getWindow().getDecorView();   view.setDrawingCacheEnabled(true);   view.buildDrawingCache();   Bitmap bmp=view.getDrawingCache();   int width=getScreenWidth(activity);   int height=getScreenHeight(activity);   Bitmap bp=null;   bp=Bitmap.createBitmap(bmp,0,0,width,height);   view.destroyDrawingCache();   return bp; } "
"public boolean equals(Object o){   if (o == null) {     return false;   }   if (this == o) {     return true;   }   if (!(o instanceof HOTPPrincipal)) {     return false;   }   HOTPPrincipal that=(HOTPPrincipal)o;   if (this.getName().equals(that.getName())) {     return true;   }   return false; } "
"public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireKeyIdentifierReferenceElement createRequireKeyIdentifierReferenceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireKeyIdentifierReferenceElementImpl(); } "
"@Override protected void onDestroy(){   super.onDestroy();   Hermes.disconnect(this); } "
"public void deleteArtworkField() throws KeyNotFoundException {   this.deleteField(FieldKey.COVER_ART); } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   try {     System.out.println(\"shootme: got an ACK! \");     System.out.println(\"Dialog State = \" + dialog.getState());     SipProvider provider=(SipProvider)requestEvent.getSource();     if (!callerSendsBye) {       Request byeRequest=dialog.createRequest(Request.BYE);       ClientTransaction ct=provider.getNewClientTransaction(byeRequest);       dialog.sendRequest(ct);     }   }  catch (  Exception ex) {     ex.printStackTrace();   } } "
"private static Entry createChangelogEntry(final DN baseDN,final long changeNumber,final String cookie,final LDAPUpdateMsg msg,final String ldifChanges,final String changeType,final String changeInitiatorsName) throws DirectoryException {   final CSN csn=msg.getCSN();   String dnString;   if (changeNumber > 0) {     dnString=\"changeNumber=\" + changeNumber + \",\"+ DN_EXTERNAL_CHANGELOG_ROOT;   }  else {     dnString=\"replicationCSN=\" + csn + \",\"+ baseDN+ \",\"+ DN_EXTERNAL_CHANGELOG_ROOT;   }   final Map<AttributeType,List<Attribute>> userAttrs=new LinkedHashMap<>();   final Map<AttributeType,List<Attribute>> opAttrs=new LinkedHashMap<>();   addAttributeByType(ATTR_SUBSCHEMA_SUBENTRY_LC,DN_DEFAULT_SCHEMA_ROOT,userAttrs,opAttrs);   addAttributeByType(\"numSubordinates\",\"0\",userAttrs,opAttrs);   addAttributeByType(\"hasSubordinates\",\"false\",userAttrs,opAttrs);   addAttributeByType(\"entryDN\",dnString,userAttrs,opAttrs);   if (changeNumber > 0) {     addAttributeByType(\"changeNumber\",String.valueOf(changeNumber),userAttrs,opAttrs);   }   SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);   dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));   final String format=dateFormat.format(new Date(csn.getTime()));   addAttributeByType(\"changeTime\",format,userAttrs,opAttrs);   addAttributeByType(\"changeType\",changeType,userAttrs,opAttrs);   addAttributeByType(\"targetDN\",msg.getDN().toString(),userAttrs,opAttrs);   addAttributeByType(\"replicationCSN\",csn.toString(),userAttrs,opAttrs);   addAttributeByType(\"replicaIdentifier\",Integer.toString(csn.getServerId()),userAttrs,opAttrs);   if (ldifChanges != null) {     addAttributeByType(\"changes\",ldifChanges,userAttrs,opAttrs);   }   if (changeInitiatorsName != null) {     addAttributeByType(\"changeInitiatorsName\",changeInitiatorsName,userAttrs,opAttrs);   }   final String targetUUID=msg.getEntryUUID();   if (targetUUID != null) {     addAttributeByType(\"targetEntryUUID\",targetUUID,userAttrs,opAttrs);   }   final String cookie2=cookie != null ? cookie : \"\";   addAttributeByType(\"changeLogCookie\",cookie2,userAttrs,opAttrs);   final List<RawAttribute> includedAttributes=msg.getEclIncludes();   if (includedAttributes != null && !includedAttributes.isEmpty()) {     final StringBuilder builder=new StringBuilder(256);     for (    final RawAttribute includedAttribute : includedAttributes) {       final String name=includedAttribute.getAttributeType();       for (      final ByteString value : includedAttribute.getValues()) {         builder.append(name);         appendLDIFSeparatorAndValue(builder,value);         builder.append('\\n');       }     }     final String includedAttributesLDIF=builder.toString();     addAttributeByType(\"includedAttributes\",includedAttributesLDIF,userAttrs,opAttrs);   }   return new Entry(DN.valueOf(dnString),CHANGELOG_ENTRY_OBJECT_CLASSES,userAttrs,opAttrs); } "
"public static void write_scope(gui.varie.IndentFileWriter p_file,DsnParserInfo p_parser_info,freert.spectra.DsnIdentifier p_identifier_type,boolean p_reduced) throws java.io.IOException {   p_file.start_scope();   p_file.write(\"parser\");   if (!p_reduced) {     p_file.new_line();     p_file.write(\"(string_quote \");     p_file.write(p_parser_info.string_quote);     p_file.write(\")\");     p_file.new_line();     p_file.write(\"(space_in_quoted_tokens on)\");   }   if (p_parser_info.host_cad != null) {     p_file.new_line();     p_file.write(\"(host_cad \");     p_identifier_type.write(p_parser_info.host_cad,p_file);     p_file.write(\")\");   }   if (p_parser_info.host_version != null) {     p_file.new_line();     p_file.write(\"(host_version \");     p_identifier_type.write(p_parser_info.host_version,p_file);     p_file.write(\")\");   }   if (p_parser_info.constants != null) {     for (    String[] curr_constant : p_parser_info.constants) {       p_file.new_line();       p_file.write(\"(constant \");       for (int i=0; i < curr_constant.length; ++i) {         p_identifier_type.write(curr_constant[i],p_file);         p_file.write(\" \");       }       p_file.write(\")\");     }   }   if (p_parser_info.write_resolution != null) {     p_file.new_line();     p_file.write(\"(write_resolution \");     p_file.write(p_parser_info.write_resolution.char_name.substring(0,1));     p_file.write(\" \");     Integer positive_int=p_parser_info.write_resolution.positive_int;     p_file.write(positive_int.toString());     p_file.write(\")\");   }   if (!p_reduced) {     p_file.new_line();     p_file.write(\"(generated_by_freeroute)\");   }   p_file.end_scope(); } "
"CancelExtendedRequestImpl(final int requestID){   this.requestID=requestID; } "
"static <T>PropertyEditorModification<T> createAddModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> addedValues,SortedSet<T> originalValues){   return new PropertyEditorModification<>(propertyDefinition,Type.ADD,addedValues,originalValues); } "
"public synchronized int hashCode(){   int h=0;   if (count == 0 || loadFactor < 0)   return h;   loadFactor=-loadFactor;   Entry<?,?>[] tab=table;   for (  Entry<?,?> entry : tab) {     while (entry != null) {       h+=entry.hashCode();       entry=entry.next;     }   }   loadFactor=-loadFactor;   return h; } "
"public Set searchGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {   String filter=\"(|\" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ \")\";   return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level); } "
"public static String stackTraceToSingleLineString(Throwable t){   return com.forgerock.opendj.util.StaticUtils.stackTraceToSingleLineString(t,DynamicConstants.DEBUG_BUILD); } "
"private String enhanceMessage(String message){   StackTraceElement[] stackTrace=new Exception().getStackTrace();   StackTraceElement elem=stackTrace[3];   String className=elem.getClassName();   String methodName=elem.getMethodName();   String fileName=elem.getFileName();   int lineNumber=elem.getLineNumber();   String newMessage=className + \".\" + methodName+ \"(\"+ fileName+ \":\"+ lineNumber+ \") [\"+ message+ \"]\";   return newMessage; } "
"private static int handleDpadHorizontal(int iconIdx,int cntX,int cntY,int[][] matrix,int increment){   if (matrix == null) {     throw new IllegalStateException(\"Dpad navigation requires a matrix.\");   }   int newIconIndex=NOOP;   int xPos=-1;   int yPos=-1;   for (int i=0; i < cntX; i++) {     for (int j=0; j < cntY; j++) {       if (matrix[i][j] == iconIdx) {         xPos=i;         yPos=j;       }     }   }   if (DEBUG) {     Log.v(TAG,String.format(\"\\thandleDpadHorizontal: \\t[x, y]=[%d, %d] iconIndex=%d\",xPos,yPos,iconIdx));   }   for (int i=xPos + increment; 0 <= i && i < cntX; i=i + increment) {     if ((newIconIndex=inspectMatrix(i,yPos,cntX,cntY,matrix)) != NOOP) {       return newIconIndex;     }   }   int nextYPos1;   int nextYPos2;   int i=-1;   for (int coeff=1; coeff < cntY; coeff++) {     nextYPos1=yPos + coeff * increment;     nextYPos2=yPos - coeff * increment;     for (i=xPos + increment * coeff; 0 <= i && i < cntX; i=i + increment) {       if ((newIconIndex=inspectMatrix(i,nextYPos1,cntX,cntY,matrix)) != NOOP) {         return newIconIndex;       }       if ((newIconIndex=inspectMatrix(i,nextYPos2,cntX,cntY,matrix)) != NOOP) {         return newIconIndex;       }     }   }   return newIconIndex; } "
"public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException { } "
"private void parseMajorVersion(String version) throws FSMsgException {   try {     majorVersion=Integer.parseInt(version);   }  catch (  NumberFormatException e) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSNameIdentifierMappingRequest.\" + \"parseMajorVersion: invalid MajorVersion: \" + version,e);     }     throw new FSMsgException(\"wrongInput\",null);   }   if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {     if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSNameIdentifierMappingRequest.\" + \"parseMajorVersion: MajorVersion is too high\");       }       throw new FSMsgException(\"requestVersionTooHigh\",null);     }  else {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSNameIdentifierMappingRequest.\" + \"parseMajorVersion: MajorVersion is too low\");       }       throw new FSMsgException(\"requestVersionTooLow\",null);     }   } } "
"public DERSequence(ASN1Encodable obj){   super(obj); } "
"public InvalidFormatException(String rbName,String errCode,Object[] args,String name,int type){   super(rbName,errCode,args,null);   fillInStackTrace();   this.name=name;   this.type=type; } "
"public XMLEncoder(OutputStream out,String charset,boolean declaration,int indentation){   if (out == null) {     throw new IllegalArgumentException(\"the output stream cannot be null\");   }   if (indentation < 0) {     throw new IllegalArgumentException(\"the indentation must be >= 0\");   }   Charset cs=Charset.forName(charset);   this.encoder=cs.newEncoder();   this.charset=charset;   this.declaration=declaration;   this.indentation=indentation;   this.out=new OutputStreamWriter(out,cs.newEncoder());   valueToExpression=new IdentityHashMap<>();   targetToStatementList=new IdentityHashMap<>();   nameGenerator=new NameGenerator(); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformsElement createTransformsElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformsElementImpl(); } "
"public static void main(String[] args){   final int exitCode=configMain(args,System.out,System.err);   if (exitCode != SUCCESS) {     System.exit(filterExitCode(exitCode));   } } "
"public static Object convertElementToJAXB(Element element) throws JAXBException {   Unmarshaller u=jc.createUnmarshaller();   return u.unmarshal(element); } "
"public NSString(String string){   content=string; } "
"public static String unescapeSom(String s){   int idx=s.indexOf('\\\\');   if (idx < 0)   return s;   StringBuilder sb=new StringBuilder();   int last=0;   while (idx >= 0) {     sb.append(s.substring(last,idx));     last=idx + 1;     idx=s.indexOf('\\\\',idx + 1);   }   sb.append(s.substring(last));   return sb.toString(); } "
"public void visit(String name,Object value){   if (av != null) {     av.visit(name,value);   } } "
"public static long givePower(ICapabilityProvider provider,EnumFacing side,long power,boolean simulated){   return isTeslaConsumer(provider,side) ? getTeslaConsumer(provider,side).givePower(power,simulated) : 0; } "
"public Rational(Rational r){   mNumerator=r.mNumerator;   mDenominator=r.mDenominator; } "
"public DTMIterator cloneWithReset() throws CloneNotSupportedException {   DescendantIterator clone=(DescendantIterator)super.cloneWithReset();   clone.m_traverser=m_traverser;   clone.resetProximityPositions();   return clone; } "
"public void afterPropertiesSet(){ } "
"private static void disableConsoleLogging(final Logger logger){   if (!\"true\".equalsIgnoreCase(System.getenv(\"OPENDJ_LOG_TO_STDOUT\"))) {     logger.setUseParentHandlers(false);   } } "
"public int nextSpanTransition(int start,int limit,Class kind){   if (mSpanCount == 0)   return limit;   if (kind == null) {     kind=Object.class;   }   return nextSpanTransitionRec(start,limit,kind,treeRoot()); } "
"private void add(SessionID sessionID){   remoteSessionSet.add(sessionID); } "
"public void checkOverride_interface(SMethodDef method,SInterfaceDef sInterfaceDef,Set<STypeDef> visitedTypes) throws SyntaxException {   if (visitedTypes.contains(sInterfaceDef))   return;   visitedTypes.add(sInterfaceDef);   SMethodDef methodInSuper=findMethodWithSameSignature(method,sInterfaceDef.methods(),false);   if (methodInSuper == null) {     for (    SInterfaceDef i : sInterfaceDef.superInterfaces()) {       checkOverride_interface(method,i,visitedTypes);     }   }  else {     checkFinalAndOverride(method,methodInSuper);   } } "
"public static BooleanArgument noPropertiesFileArgument() throws ArgumentException {   return BooleanArgument.builder(OPTION_LONG_NO_PROP_FILE).description(INFO_DESCRIPTION_NO_PROP_FILE.get()).buildArgument(); } "
"public void addCompleteIndex(String index){   Reject.ifNull(index);   completeList.add(index); } "
"public static ArgumentException unknownTypeForCategory(String typeName,String categoryName){   LocalizableMessage msg=ERR_DSCFG_ERROR_CATEGORY_TYPE_UNRECOGNIZED.get(typeName,categoryName);   return new ArgumentException(msg); } "
"public static void addServersToSite(SSOToken ssoToken,String siteName,Collection serverInstanceNames) throws SMSException, SSOException, ConfigurationException {   String siteId=getSiteId(ssoToken,siteName);   if (siteId != null) {     for (Iterator i=serverInstanceNames.iterator(); i.hasNext(); ) {       String svr=(String)i.next();       ServerConfiguration.addToSite(ssoToken,svr,siteName);     }   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testAddress;   NamedNodeMap attributes;   Attr attribute;   String attributeName;   java.util.Collection actual=new java.util.ArrayList();   java.util.Collection htmlExpected=new java.util.ArrayList();   htmlExpected.add(\"title\");   java.util.Collection expected=new java.util.ArrayList();   expected.add(\"title\");   expected.add(\"dir\");   doc=(Document)load(\"hc_staff\",false);   addressList=doc.getElementsByTagName(\"acronym\");   testAddress=addressList.item(0);   attributes=testAddress.getAttributes();   for (int indexN1006B=0; indexN1006B < attributes.getLength(); indexN1006B++) {     attribute=(Attr)attributes.item(indexN1006B);     attributeName=attribute.getNodeName();     actual.add(attributeName);   }   if ((\"text/html\".equals(getContentType()))) {     assertEqualsIgnoreCase(\"htmlAttributeNames\",htmlExpected,actual);   }  else {     assertEqualsIgnoreCase(\"attributeNames\",expected,actual);   } } "
"public void sign(PrivateKey privateKey,X509Certificate cert) throws SAML2Exception {   Element signatureEle=SigManager.getSigInstance().sign(toXMLString(true,true),getID(),privateKey,cert);   signatureString=XMLUtils.print(signatureEle);   signedXMLString=XMLUtils.print(signatureEle.getOwnerDocument().getDocumentElement(),\"UTF-8\");   isSigned=true;   makeImmutable(); } "
"public boolean isExpired(){   return isExpired; } "
"public ServiceNotFoundException(String s){   super(s); } "
"public void handleTblDataActionHrefRequest(RequestInvocationEvent event){   String idRepoName=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));   String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);   try {     IDRepoModel model=(IDRepoModel)getModel();     setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_NAME,idRepoName);     setPageSessionAttribute(IDRepoOpViewBeanBase.IDREPO_TYPE,model.getIDRepoType(curRealm,idRepoName));     IDRepoEditViewBean vb=(IDRepoEditViewBean)getViewBean(IDRepoEditViewBean.class);     unlockPageTrail();     passPgSessionMap(vb);     vb.forwardTo(getRequestContext());   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     forwardTo();   } } "
"public static void registerBaseDN(DN baseDN,Backend<?> backend,boolean isPrivate) throws DirectoryException {   ifNull(baseDN,backend); synchronized (directoryServer) {     List<LocalizableMessage> warnings=directoryServer.baseDnRegistry.registerBaseDN(baseDN,backend,isPrivate);     for (    LocalizableMessage warning : warnings) {       logger.error(warning);     }     if (!baseDN.equals(DN.valueOf(\"cn=config\"))) {       createWorkflow(baseDN,backend);     }   } } "
"private String formatQuoteToCSV(OHLCquote quote){   String csvData=null;   CsvMapper mapper=new CsvMapper();   CsvSchema schema=mapper.schemaFor(OHLCquote.class).withHeader().withColumnSeparator(',');   try {     csvData=mapper.writer(schema).writeValueAsString(quote);   }  catch (  JsonProcessingException e) {     System.out.println(\"TimeRangeOHLCActionHandler.formatQuoteToCSV(): ERROR: JsonProcessingException on quote\");     e.printStackTrace();   }   return csvData; } "
"public void runTest() throws Throwable {   Document doc;   NodeList acronymList;   Node testNode;   NamedNodeMap attributes;   Attr titleAttr;   String value;   Text textNode;   Node retval;   Node firstChild;   Node lastChild;   Node refChild=null;   doc=(Document)load(\"hc_staff\",true);   acronymList=doc.getElementsByTagName(\"acronym\");   testNode=acronymList.item(3);   attributes=testNode.getAttributes();   titleAttr=(Attr)attributes.getNamedItem(\"title\");   textNode=doc.createTextNode(\"terday\");   retval=titleAttr.insertBefore(textNode,refChild);   value=titleAttr.getValue();   assertEquals(\"attrValue\",\"Yesterday\",value);   value=titleAttr.getNodeValue();   assertEquals(\"attrNodeValue\",\"Yesterday\",value);   value=retval.getNodeValue();   assertEquals(\"retvalValue\",\"terday\",value);   firstChild=titleAttr.getFirstChild();   value=firstChild.getNodeValue();   assertEquals(\"firstChildValue\",\"Yes\",value);   lastChild=titleAttr.getLastChild();   value=lastChild.getNodeValue();   assertEquals(\"lastChildValue\",\"terday\",value); } "
"private static void addAttrLevelRightsInfo(AciLDAPOperationContainer container,int mask,AttributeType aType,Entry retEntry,String rightStr){   if (hasAttrMask(mask,ACL_RIGHTS_INFO)) {     String typeStr=aclRightsInfoAttrLogsStr + \";\" + rightStr+ \";\"+ aType.getNameOrOID();     AttributeType attributeType=DirectoryServer.getSchema().getAttributeType(typeStr);     Attribute attr=Attributes.create(attributeType,container.getEvalSummary());     if (!retEntry.hasAttribute(attributeType)) {       retEntry.addAttribute(attr,null);     }   } } "
"private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){   int i;   if (av == null) { switch (b[v] & 0xFF) { case 'e':       return v + 5; case '@':     return readAnnotationValues(v + 3,buf,true,null); case '[':   return readAnnotationValues(v + 1,buf,false,null); default : return v + 3; } } switch (b[v++] & 0xFF) { case 'I': case 'J': case 'F': case 'D': av.visit(name,readConst(readUnsignedShort(v),buf)); v+=2; break; case 'B': av.visit(name,(byte)readInt(items[readUnsignedShort(v)])); v+=2; break; case 'Z': av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE); v+=2; break; case 'S': av.visit(name,(short)readInt(items[readUnsignedShort(v)])); v+=2; break; case 'C': av.visit(name,(char)readInt(items[readUnsignedShort(v)])); v+=2; break; case 's': av.visit(name,readUTF8(v,buf)); v+=2; break; case 'e': av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf)); v+=4; break; case 'c': av.visit(name,Type.getType(readUTF8(v,buf))); v+=2; break; case '@': v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf))); break; case '[': int size=readUnsignedShort(v); v+=2; if (size == 0) { return readAnnotationValues(v - 2,buf,false,av.visitArray(name)); } switch (this.b[v++] & 0xFF) { case 'B': byte[] bv=new byte[size]; for (i=0; i < size; i++) { bv[i]=(byte)readInt(items[readUnsignedShort(v)]); v+=3; } av.visit(name,bv); --v; break; case 'Z': boolean[] zv=new boolean[size]; for (i=0; i < size; i++) { zv[i]=readInt(items[readUnsignedShort(v)]) != 0; v+=3; } av.visit(name,zv); --v; break; case 'S': short[] sv=new short[size]; for (i=0; i < size; i++) { sv[i]=(short)readInt(items[readUnsignedShort(v)]); v+=3; } av.visit(name,sv); --v; break; case 'C': char[] cv=new char[size]; for (i=0; i < size; i++) { cv[i]=(char)readInt(items[readUnsignedShort(v)]); v+=3; } av.visit(name,cv); --v; break; case 'I': int[] iv=new int[size]; for (i=0; i < size; i++) { iv[i]=readInt(items[readUnsignedShort(v)]); v+=3; } av.visit(name,iv); --v; break; case 'J': long[] lv=new long[size]; for (i=0; i < size; i++) { lv[i]=readLong(items[readUnsignedShort(v)]); v+=3; } av.visit(name,lv); --v; break; case 'F': float[] fv=new float[size]; for (i=0; i < size; i++) { fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)])); v+=3; } av.visit(name,fv); --v; break; case 'D': double[] dv=new double[size]; for (i=0; i < size; i++) { dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)])); v+=3; } av.visit(name,dv); --v; break; default : v=readAnnotationValues(v - 3,buf,false,av.visitArray(name)); } } return v; } "
"public void testPosZero(){   String numA=\"27384627835298756289327365\";   String numB=\"0\";   String res=\"27384627835298756289327365\";   BigInteger aNumber=new BigInteger(numA);   BigInteger bNumber=new BigInteger(numB);   BigInteger result=aNumber.xor(bNumber);   assertTrue(res.equals(result.toString())); } "
"@Override public synchronized void write(byte[] b,int off,int len) throws IOException {   super.write(b,off,len);   this.branch.write(b,off,len); } "
"public InputStream newInputStream(int index) throws IOException { synchronized (DiskLruCache.this) {     if (entry.currentEditor != this) {       throw new IllegalStateException();     }     if (!entry.readable) {       return null;     }     try {       return new FileInputStream(entry.getCleanFile(index));     }  catch (    FileNotFoundException e) {       return null;     }   } } "
"public AttributeFieldParser(String attributeField){   this.lexer=new Lexer(\"charLexer\",attributeField); } "
"public String str(){   return (null != m_obj) ? ((String)m_obj) : \"\"; } "
"public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {   return getPersistence().findByField2_Last(field2,orderByComparator); } "
"public void test_readResolve(){   MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute(\"test\");   try {     mac1.readResolve();     fail(\"InvalidObjectException has not been thrown\");   }  catch (  InvalidObjectException e) {   }   ObjectOutputStream out=null;   ObjectInputStream in=null;   try {     ByteArrayOutputStream bytes=new ByteArrayOutputStream();     out=new ObjectOutputStream(bytes);     AttributedCharacterIterator.Attribute attr1, attr2;     attr1=AttributedCharacterIterator.Attribute.LANGUAGE;     out.writeObject(attr1);     in=new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));     try {       attr2=(AttributedCharacterIterator.Attribute)in.readObject();       assertSame(\"resolved incorrectly\",attr1,attr2);     }  catch (    IllegalArgumentException e) {       fail(\"Unexpected IllegalArgumentException: \" + e);     }   }  catch (  IOException e) {     fail(\"unexpected IOException\" + e);   } catch (  ClassNotFoundException e) {     fail(\"unexpected ClassNotFoundException\" + e);   }  finally {     try {       if (out != null)       out.close();       if (in != null)       in.close();     }  catch (    IOException e) {     }   } } "
"public BeanContextServiceRevokedEvent(BeanContextServices bcs,Class sc,boolean invalidate){   super((BeanContext)bcs);   serviceClass=sc;   invalidateRefs=invalidate; } "
"protected boolean updateChildren(DocumentEvent.ElementChange ec,DocumentEvent e,ViewFactory f){   return false; } "
"@Override public void initialize(MessagePolicy requestPolicy,MessagePolicy responsePolicy,CallbackHandler handler,Map<String,Object> options) throws AuthenticationException {   final JsonValue properties=new JsonValue(options);   String clientAuthOnlyStr=IdentityServer.getInstance().getProperty(\"openidm.auth.clientauthonlyports\");   if (clientAuthOnlyStr != null) {     String[] split=clientAuthOnlyStr.split(\",\");     for (    String entry : split) {       clientAuthOnly.add(Integer.valueOf(entry));     }   }   logger.info(\"Authentication disabled on ports: {}\",clientAuthOnly);   allowedAuthenticationIdPatterns=properties.get(ALLOWED_AUTHENTICATION_ID_PATTERNS).defaultTo(new ArrayList<String>()).asList(String.class); } "
"public void test_toString(){   MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute(null);   assertEquals(\"Unexpected class representation string\",mac1.toString(),getClass().getName() + \"$MockAttributedCharacterIteratorAttribute(null)\");   TestAttributedCharacterIteratorAttribute mac2=new TestAttributedCharacterIteratorAttribute(\"test1\");   assertEquals(\"Unexpected class representation string\",mac2.toString(),getClass().getName() + \"$TestAttributedCharacterIteratorAttribute(test1)\"); } "
"public FrameBodyTIT1(byte textEncoding,String text){   super(textEncoding,text); } "
"public void clear(){ synchronized (lock) {     items.clear();   }   itemPositionChangeChecked=new SparseBooleanArray(items.size());   notifyDataSetChanged(); } "
"public static Document sign(String realm,EntityDescriptorElement descriptor) throws JAXBException, SAML2MetaException {   if (descriptor == null) {     throw new SAML2MetaException(\"Unable to sign null descriptor\");   }   SAML2MetaManager metaManager=new SAML2MetaManager();   EntityConfigElement cfgElem=metaManager.getEntityConfig(realm,descriptor.getEntityID());   boolean isHosted;   if (cfgElem == null) {     isHosted=false;   }  else {     isHosted=cfgElem.isHosted();   }   String signingCert=getRealmSetting(METADATA_SIGNING_KEY,realm);   if (signingCert == null) {     return null;   }   initializeKeyStore();   String xmlstr=SAML2MetaUtils.convertJAXBToString(descriptor);   xmlstr=formatBase64BinaryElement(xmlstr);   Document doc=XMLUtils.toDOMDocument(xmlstr,debug);   NodeList childNodes=doc.getDocumentElement().getChildNodes();   for (int i=0; i < childNodes.getLength(); i++) {     Node node=childNodes.item(i);     if (node.getLocalName() != null && node.getLocalName().equals(\"Signature\") && node.getNamespaceURI().equals(NS_XMLSIG)) {       if (isHosted) {         node.getParentNode().removeChild(node);         break;       }  else {         return doc;       }     }   }   String descriptorId=SAMLUtils.generateID();   doc.getDocumentElement().setAttribute(ATTR_ID,descriptorId);   XMLSignatureManager sigManager=XMLSignatureManager.getInstance();   try {     String xpath=\"//*[local-name()=\\\"\" + TAG_ENTITY_DESCRIPTOR + \"\\\" and namespace-uri()=\\\"\"+ NS_META+ \"\\\"]/*[1]\";     sigManager.signXMLUsingKeyPass(doc,signingCert,getRealmSetting(METADATA_SIGNING_KEY_PASS,realm),null,SAML2Constants.ID,descriptorId,true,xpath);   }  catch (  XMLSignatureException xmlse) {     if (debug.messageEnabled()) {       debug.message(\"SAML2MetaSecurityUtils.sign:\",xmlse);     }   }   return doc; } "
"public com.sun.identity.liberty.ws.disco.jaxb.DescriptionType createDescriptionType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.disco.jaxb.impl.DescriptionTypeImpl(); } "
"public FSLogoutStatus processHttpSingleLogoutRequest(HttpServletRequest request,HttpServletResponse response,Object ssoToken){   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"Entered FSPrelogoutHandler::\" + \"processSingleLogoutRequest HTTP Redirect\");   }   this.request=request;   this.locale=FSServiceUtils.getLocale(request);   setLogoutURL();   this.response=response;   this.ssoToken=ssoToken;   FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);   FSSession session=sMgr.getSession(ssoToken);   String sessionIndex=session.getSessionIndex();   try {     if (session != null && session.getOneTime()) {       this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);       FSUtils.debug.message(\"FSPH:processSingleLogout: Onetime case\");     }  else {       this.userID=FSLogoutUtil.getUserFromRequest(reqLogout,realm,hostedEntityId,hostedRole,hostedConfig,metaAlias);     }   }  catch (  SessionException se) {     FSUtils.debug.error(\"processSingleLogoutRequest\",se);     this.userID=null;   }   if (userID == null) {     FSUtils.debug.message(\"FSPrelogoutHandler::User Not found\");     FSLogoutUtil.returnToSource(response,remoteDescriptor,IFSConstants.SAML_RESPONDER,COMMON_ERROR_URL,reqLogout.getMinorVersion(),hostedConfig,hostedEntityId,userID);     return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);   }   String acceptString=request.getHeader(\"Accept\");   if ((acceptString != null) && (acceptString.indexOf(\"text/vnd.wap.wml\") != -1)) {     isWMLAgent=true;   }   String relayState=reqLogout.getRelayState();   FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityID,metaAlias,session);   FSUtils.debug.message(\"FSPrelogoutHandler::calling getCurrentProvider\");   boolean bHasAnyOtherProvider=false;   HashMap providerMap=new HashMap();   FSSessionPartner sessionPartner=null;   providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken);   if (providerMap != null) {     sessionPartner=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);     sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);     if (sessionPartner != null) {       bHasAnyOtherProvider=true;       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"bHasAnyOtherProvider = \" + bHasAnyOtherProvider);       }       currentEntityId=sessionPartner.getPartner();     }   }   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"bHasAnyOtherProvider other than source : \" + bHasAnyOtherProvider);   }   FSUtils.debug.message(\"FSPreLogout::creating FSSingleLogoutHandler\");   FSSingleLogoutHandler handlerObj=new FSSingleLogoutHandler();   handlerObj.setHostedDescriptor(hostedDescriptor);   handlerObj.setHostedDescriptorConfig(hostedConfig);   handlerObj.setRealm(realm);   handlerObj.setHostedEntityId(hostedEntityId);   handlerObj.setHostedProviderRole(hostedRole);   handlerObj.setMetaAlias(metaAlias);   handlerObj.setSingleLogoutProtocol(IFSConstants.LOGOUT_SP_REDIRECT_PROFILE);   return handlerObj.processHttpSingleLogoutRequest(response,request,reqLogout,sessionPartner,userID,ssoToken,remoteEntityID,sessionIndex,isWMLAgent,relayState,(hostedRole.equals(IFSConstants.SP) ? IFSConstants.IDP : IFSConstants.SP)); } "
"public CertificateNotYetValidException(){   super(); } "
"public double generate(double xin,double yin,double zin){   final double s=(xin + yin + zin) * F3;   final int i=fastfloor(xin + s);   final int j=fastfloor(yin + s);   final int k=fastfloor(zin + s);   final double t=(i + j + k) * G3;   final double X0=i - t;   final double Y0=j - t;   final double Z0=k - t;   final double x0=xin - X0;   final double y0=yin - Y0;   final double z0=zin - Z0;   final int i1, j1, k1;   final int i2, j2, k2;   if (x0 >= y0) {     if (y0 >= z0) {       i1=1;       j1=0;       k1=0;       i2=1;       j2=1;       k2=0;     }  else     if (x0 >= z0) {       i1=1;       j1=0;       k1=0;       i2=1;       j2=0;       k2=1;     }  else {       i1=0;       j1=0;       k1=1;       i2=1;       j2=0;       k2=1;     }   }  else {     if (y0 < z0) {       i1=0;       j1=0;       k1=1;       i2=0;       j2=1;       k2=1;     }  else     if (x0 < z0) {       i1=0;       j1=1;       k1=0;       i2=0;       j2=1;       k2=1;     }  else {       i1=0;       j1=1;       k1=0;       i2=1;       j2=1;       k2=0;     }   }   final double x1=x0 - i1 + G3;   final double y1=y0 - j1 + G3;   final double z1=z0 - k1 + G3;   final double x2=x0 - i2 + 2.0 * G3;   final double y2=y0 - j2 + 2.0 * G3;   final double z2=z0 - k2 + 2.0 * G3;   final double x3=x0 - 1.0 + 3.0 * G3;   final double y3=y0 - 1.0 + 3.0 * G3;   final double z3=z0 - 1.0 + 3.0 * G3;   final int ii=i & 255;   final int jj=j & 255;   final int kk=k & 255;   double n=0.0;   double contrib=0.6 - x0 * x0 - y0 * y0 - z0 * z0;   if (contrib >= 0) {     int gi0=permMod12[ii + perm[jj + perm[kk]]];     contrib*=contrib;     n+=contrib * contrib * dot(GRAD_3[gi0],x0,y0,z0);   }   contrib=0.6 - x1 * x1 - y1 * y1 - z1 * z1;   if (contrib >= 0) {     int gi1=permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]];     contrib*=contrib;     n+=contrib * contrib * dot(GRAD_3[gi1],x1,y1,z1);   }   contrib=0.6 - x2 * x2 - y2 * y2 - z2 * z2;   if (contrib >= 0) {     int gi2=permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]];     contrib*=contrib;     n+=contrib * contrib * dot(GRAD_3[gi2],x2,y2,z2);   }   contrib=0.6 - x3 * x3 - y3 * y3 - z3 * z3;   if (contrib >= 0) {     int gi3=permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]];     contrib*=contrib;     n+=contrib * contrib * dot(GRAD_3[gi3],x3,y3,z3);   }   return 32.0 * n; } "
"public boolean validateServiceAttributes(SSOToken token,String validatorClass,Set values) throws SMSException, SSOException {   try {     Object[] objs={token.getTokenID().toString(),validatorClass,values};     Boolean b=(Boolean)client.send(client.encodeMessage(\"validateServiceAttributes\",objs),null,null);     return b.booleanValue();   }  catch (  SSOException e) {     throw e;   } catch (  SMSException smse) {     throw smse;   } catch (  Exception re) {     debug.error(\"SMSJAXRPCObjectvalidateServiceAttributes\",re);     throw new SMSException(re,\"sms-JAXRPC-attribute-values-validation-failed\");   } } "
"@Override public void onBackPressed(){   super.onBackPressed(); } "
"public SOAPException(String reason){   super(reason);   this.cause=null; } "
"public void deinstall(JEditorPane c){   c.removeCaretListener(inputAttributeUpdater);   c.removePropertyChangeListener(inputAttributeUpdater);   currentRun=null;   currentParagraph=null; } "
"public void clear(){   column=new String[0];   types=null;   rows=new Vector();   ncolumns=nrows=0;   atmaxrows=false; } "
"public FilterAttributeBuilder or(){   return new FilterAttributeBuilder(tokenFilter,Type.OR); } "
"public static List<Foo> findByUuid_C(java.lang.String uuid,long companyId){   return getPersistence().findByUuid_C(uuid,companyId); } "
"public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {   debug.message(\"FirstTimeLogin.onLoginFailure: called\"); } "
"@Override public void removeAll(){   for (  Foo foo : findAll()) {     remove(foo);   } } "
"private void handleResponseException(RadiusProcessingException rre,RadiusRequestContext reqCtx){   final StringBuilder sb=new StringBuilder(\"Failed to process a radius request for RADIUS client '\").append(reqCtx.getClientName()).append(\"'.\");   LOG.error(sb.toString());   if (rre.getNature() == RadiusProcessingExceptionNature.TEMPORARY_FAILURE) {     sendAccessReject(reqCtx);   }   final RadiusProcessingExceptionNature nature=rre.getNature(); switch (nature) { case CATASTROPHIC:     LOG.error(\"Catestrophic error processing a RADIUS request.\",rre);   eventBus.post(new PacketDroppedSilentlyEvent()); break; case INVALID_RESPONSE: LOG.error(\"Failed to handle request. This request will be ignored.\",rre); eventBus.post(new PacketDroppedSilentlyEvent()); break; case TEMPORARY_FAILURE: final String errStr=\"Failed to handle request. This request could be retried, but that is\" + \" currently not implemented.\"; LOG.error(errStr,rre); break; default : break; } } "
"public static void main(final String[] args){   DOMTestCase.doMain(elementsetattributenodens02.class,args); } "
"int expressionCount(){   return names.length - arity; } "
"public boolean shouldImportRequestObjectParamElementType(Field field){   return true; } "
"private void putForCreate(K key,V value) throws java.io.StreamCorruptedException {   Object k=maskNull(key);   Object[] tab=table;   int len=tab.length;   int i=hash(k,len);   Object item;   while ((item=tab[i]) != null) {     if (item == k)     throw new java.io.StreamCorruptedException();     i=nextKeyIndex(i,len);   }   tab[i]=k;   tab[i + 1]=value; } "
"public boolean isSecure(){   return false; } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentgetelementbyid01.class,args); } "
"public static final long bytesToLong(byte[] value){   int result=0;   int shift=0;   for (int i=value.length - 1; i >= 0; i--) {     result+=(value[i] & 0xFF) << shift;     shift+=8;   }   return result; } "
"protected void tearDown(){   objArray=null;   objArray2=null;   hm=null; } "
"public boolean isServerTransaction(){   return m_isServerTransaction; } "
"public boolean handleFederationTermination(HttpServletRequest request,HttpServletResponse response,Object ssoToken){   FSUtils.debug.message(\"Entered FSFedTerminationHandler::handleFederationTermination\");   this.request=request;   this.locale=FSServiceUtils.getLocale(request);   this.response=response;   this.ssoToken=ssoToken;   setTerminationURL();   if (managerInst == null) {     FSUtils.debug.error(\"FSSPFedTerminationHandler \" + \"Account Manager instance is null\");     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSSPFedTerminationHandler::handleFederationTermination\" + \"failed to get Account Manager instance\");     }     FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);     return false;   }   try {     this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);   }  catch (  SessionException e) {     FSUtils.debug.error(\"FSFedTerminationHandler::handleFederationTermination:\",e);     LogUtil.error(Level.INFO,LogUtil.USER_NOT_FOUND,null,ssoToken);     return false;   }   boolean bStatus=updateAccountInformation(null);   FSUtils.debug.message(\"After updateAccountInformation\");   if (!bStatus) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSSPFedTerminationHandler::handleFederationTermination \" + \"Federation Termination failed locally. Cannot update \" + \"account\");     }     String[] data={userID};     LogUtil.error(Level.INFO,LogUtil.TERMINATION_FAILED,data,ssoToken);     FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);     return false;   }   FSUtils.debug.message(\"Status of local update true\");   String[] data={userID};   LogUtil.access(Level.INFO,LogUtil.TERMINATION_SUCCESS,data,ssoToken);   resetFederateCookie();   boolean bRemoteStatus=doFederationTermination(request,response,acctInfo);   return bRemoteStatus; } "
"public static StringArgument trustStorePathArgument() throws ArgumentException {   return trustStorePathArgument(null); } "
"public UnmarshalException(String s){   super(s); } "
"private SearchTemplate toSearchTemplate(AttrSet t){   Attr nameAttr=t.getAttribute(TEMPLATE_NAME);   String name=null;   if (nameAttr != null) {     name=nameAttr.getValue();   }   Attr filterAttr=t.getAttribute(SCHEMA2_SEARCH_FILTER);   if (filterAttr == null) {     filterAttr=t.getAttribute(TEMPLATE_SEARCH_FILTER);   }   String filter=null;   if (filterAttr != null) {     filter=filterAttr.getValue();   }   AttrSet attrSet=decodeAttr(t.getAttribute(TEMPLATE_ATTRS),\"=\");   SearchTemplate template=new SearchTemplate();   template=new SearchTemplate(name,attrSet,filter);   return template; } "
"public Cursor fetch(Long dataTypeID){   if (dataTypeID == null) {     throw new IllegalArgumentException(\"primary key null.\");   }   Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_DATATYPEID + \"=\" + dataTypeID,null,null,null,null,null);   if (mCursor != null) {     mCursor.moveToFirst();   }   return mCursor; } "
"public void append(byte b){   ensureCapacity(length + 1);   buffer[length++]=b; } "
"public boolean validate(String value,String rule){   return (value.equalsIgnoreCase(rule)); } "
"public void draw(Graphics2D g){   g.setStroke(new BasicStroke((float)thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER));   g.setColor(new Color(colorR & 0xFF,colorG & 0xFF,colorB & 0xFF,colorA & 0xFF));   if (x1 == x2 && y1 == y2) {     Arc2D arc=new Arc2D.Double(x1,y1,0,0,0d,360d,Arc2D.OPEN);     g.draw(arc);   }  else   if (type == 1 || type == 2) {     Line2D line=new Line2D.Double(x1,y1,x2,y2);     g.draw(line);   }  else   if (type == 3 || type == 4) {     double x1=this.x1, x2=this.x2, y1=this.y1, y2=this.y2;     if (x1 > x2) {       x1=this.x2;       x2=this.x1;     }     if (y1 > y2) {       y1=this.y2;       y2=this.y1;     }     if (type == 3) {       Rectangle2D rect=new Rectangle2D.Double(x1,y1,x2 - x1,y2 - y1);       g.draw(rect);     }  else     if (type == 4) {       Arc2D arc=new Arc2D.Double(x1,y1,x2 - x1,y2 - y1,0d,360d,Arc2D.OPEN);       g.draw(arc);     }   } } "
"protected Signature(String algorithm){   this.algorithm=algorithm; } "
"public void clearCachedState(){   _autoCommitCached=null;   _readOnlyCached=null;   if (_conn instanceof DelegatingConnection) {     ((DelegatingConnection<?>)_conn).clearCachedState();   } } "
"public void reset() throws IOException {   stream.reset();   framePos=markpos;   pushBackLen=markPushBackLen;   if (pushBackLen > 0) {     if (pushBackBuffer == null) {       pushBackBuffer=new byte[frameSize - 1];     }     System.arraycopy(markPushBackBuffer,0,pushBackBuffer,0,pushBackLen);   } } "
"public static PdfAction createGoToR(String filename,int pageNum,boolean newWindow){   return createGoToR(new PdfStringFS(filename),PdfExplicitDestination.createFitH(pageNum,10000),newWindow); } "
"private org.opends.server.types.Control checkAuthzControl(LDAPConnection connection,String authorizationID) throws LDAPConnectionException {   LinkedHashSet<String> attributes=new LinkedHashSet<>(1);   attributes.add(SchemaConstants.NO_ATTRIBUTES);   ArrayList<org.opends.server.types.Control> controls=new ArrayList<>(1);   org.opends.server.types.Control proxyAuthzControl=new ProxiedAuthV2Control(true,ByteString.valueOfUtf8(authorizationID));   controls.add(proxyAuthzControl);   try {     SearchRequestProtocolOp protocolOp=new SearchRequestProtocolOp(ByteString.empty(),SearchScope.BASE_OBJECT,DereferenceAliasesPolicy.NEVER,0,0,true,LDAPFilter.objectClassPresent(),attributes);     byte opType;     LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),protocolOp,controls);     connection.getLDAPWriter().writeMessage(msg);     do {       LDAPMessage responseMessage=connection.getLDAPReader().readMessage();       opType=responseMessage.getProtocolOpType(); switch (opType) { case LDAPConstants.OP_TYPE_SEARCH_RESULT_DONE: switch (responseMessage.getSearchResultDoneProtocolOp().getResultCode()) { default :           LocalizableMessage m=INFO_RESULT_AUTHORIZATION_DENIED.get();         throw new LDAPConnectionException(m,CLIENT_SIDE_CONNECT_ERROR,null); case LDAPResultCode.SUCCESS:       return proxyAuthzControl;   } } }  while (true); }  catch (LDAPException|IOException ie) { LocalizableMessage m=INFO_RESULT_CLIENT_SIDE_ENCODING_ERROR.get(); throw new LDAPConnectionException(m,CLIENT_SIDE_CONNECT_ERROR,null,ie); } } "
"public synchronized void reset() throws IOException {   throw new IOException(\"mark/reset not supported\"); } "
"public void dumpEntries(Writer writer) throws IOException {   dumpEntries(writer,blamer.getResourceEntries()); } "
"public ResourceSetLabel read(String realm,String username,String id) throws ResourceException {   try (Connection connection=getConnection()){     SearchResultEntry entry=connection.searchSingleEntry(LDAPRequests.newSingleEntrySearchRequest(getLabelDn(realm,username,id)));     Set<String> resourceSets=new HashSet<>();     final Attribute resourceSetAttribute=entry.getAttribute(RESOURCE_SET_ATTR);     if (resourceSetAttribute != null) {       for (      ByteString resourceSetId : resourceSetAttribute) {         resourceSets.add(resourceSetId.toString());       }     }     return getResourceSetLabel(entry,resourceSets);   }  catch (  LdapException e) {     final ResultCode resultCode=e.getResult().getResultCode();     if (resultCode.equals(ResultCode.NO_SUCH_OBJECT)) {       throw new NotFoundException();     }     throw new InternalServerErrorException(\"Could not read\",e);   } } "
"public Cell clone(boolean includeContent){   Cell newCell=new Cell(rowspan,colspan);   newCell.row=row;   newCell.col=col;   newCell.properties=new HashMap<>(properties);   if (includeContent) {     newCell.childElements=new ArrayList<>(childElements);   }   return newCell; } "
"public ID3v24Frame(AbstractID3v2Frame frame) throws InvalidFrameException {   if ((frame instanceof ID3v24Frame)) {     throw new UnsupportedOperationException(\"Copy Constructor not called. Please type cast the argument\");   }   if (frame instanceof ID3v23Frame) {     statusFlags=new StatusFlags((ID3v23Frame.StatusFlags)frame.getStatusFlags());     encodingFlags=new EncodingFlags(frame.getEncodingFlags().getFlags());   }  else {     statusFlags=new StatusFlags();     encodingFlags=new EncodingFlags();   }   if (frame instanceof ID3v23Frame) {     createV24FrameFromV23Frame((ID3v23Frame)frame);   }  else   if (frame instanceof ID3v22Frame) {     ID3v23Frame v23Frame=new ID3v23Frame(frame);     createV24FrameFromV23Frame(v23Frame);   }   this.frameBody.setHeader(this); } "
"public void paste(int startIndex){   AccessibleEditableText at=getEditorAccessibleEditableText();   if (at != null) {     at.paste(startIndex);   } } "
"public boolean implies(Permission permission){ synchronized (this) {     Permission p=permsMap.get(permission);     if (p == null) {       for (      Permission p_ : permsMap.values()) {         if (p_.implies(permission))         return true;       }       return false;     }  else {       return true;     }   } } "
"public static Option file(Path value){   return new FileOption(value); } "
"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){ } "
"public boolean isMutable(){   return mutable; } "
"private static void swap(Object[] x,int a,int b){   Object t=x[a];   x[a]=x[b];   x[b]=t; } "
"public void runTest() throws Throwable {   Document doc;   DocumentType docTypeNull=null;   Document docImp;   DOMImplementation domImpl;   DocumentType docType;   NamedNodeMap nodeMap;   Entity entity2;   Entity entity6;   Entity entityImp2;   Entity entityImp6;   String nodeName;   String systemId;   String notationName;   String nodeNameImp;   String systemIdImp;   String notationNameImp;   doc=(Document)load(\"staffNS\",true);   domImpl=doc.getImplementation();   docType=doc.getDoctype();   docImp=domImpl.createDocument(\"http://www.w3.org/DOM/Test\",\"a:b\",docTypeNull);   nodeMap=docType.getEntities();   assertNotNull(\"entitiesNotNull\",nodeMap);   entity2=(Entity)nodeMap.getNamedItem(\"ent2\");   entity6=(Entity)nodeMap.getNamedItem(\"ent6\");   entityImp2=(Entity)docImp.importNode(entity2,false);   entityImp6=(Entity)docImp.importNode(entity6,true);   nodeName=entity2.getNodeName();   nodeNameImp=entityImp2.getNodeName();   assertEquals(\"documentimportnode19_Ent2NodeName\",nodeName,nodeNameImp);   nodeName=entity6.getNodeName();   nodeNameImp=entityImp6.getNodeName();   assertEquals(\"documentimportnode19_Ent6NodeName\",nodeName,nodeNameImp);   systemId=entity2.getSystemId();   systemIdImp=entityImp2.getSystemId();   assertEquals(\"documentimportnode19_Ent2SystemId\",systemId,systemIdImp);   systemId=entity6.getSystemId();   systemIdImp=entityImp6.getSystemId();   assertEquals(\"documentimportnode19_Ent6SystemId\",systemId,systemIdImp);   notationName=entity2.getNotationName();   notationNameImp=entityImp2.getNotationName();   assertEquals(\"documentimportnode19_Ent2NotationName\",notationName,notationNameImp);   notationName=entity6.getNotationName();   notationNameImp=entityImp6.getNotationName();   assertEquals(\"documentimportnode19_Ent6NotationName\",notationName,notationNameImp); } "
"public UMSException(String message,Throwable rootCause){   super(message);   xcptMessage=message;   this.rootCause=rootCause; } "
"protected void clearCoRoutine(SAXException ex){   if (null != ex)   m_transformer.setExceptionThrown(ex);   if (m_dtm instanceof SAX2DTM) {     if (DEBUG)     System.err.println(\"In clearCoRoutine...\");     try {       SAX2DTM sax2dtm=((SAX2DTM)m_dtm);       if (null != m_contentHandler && m_contentHandler instanceof IncrementalSAXSource_Filter) {         IncrementalSAXSource_Filter sp=(IncrementalSAXSource_Filter)m_contentHandler;         sp.deliverMoreNodes(false);       }       sax2dtm.clearCoRoutine(true);       m_contentHandler=null;       m_dtdHandler=null;       m_entityResolver=null;       m_errorHandler=null;       m_lexicalHandler=null;     }  catch (    Throwable throwable) {       throwable.printStackTrace();     }     if (DEBUG)     System.err.println(\"...exiting clearCoRoutine\");   } } "
"public void addInternalFrameListener(InternalFrameListener l){   listenerList.add(InternalFrameListener.class,l);   enableEvents(0); } "
"public boolean isAllOpAttributes(){   return allOpAttributes; } "
"void addActiveFilter(InputFilter filter){   if (lastActiveFilter == -1) {     filter.setBuffer(inputStreamInputBuffer);   }  else {     for (int i=0; i <= lastActiveFilter; i++) {       if (activeFilters[i] == filter)       return;     }     filter.setBuffer(activeFilters[lastActiveFilter]);   }   activeFilters[++lastActiveFilter]=filter;   filter.setRequest(request); } "
"public ResourceSetRegistrationExceptionFilter(Restlet next,JacksonRepresentationFactory jacksonRepresentationFactory){   this.jacksonRepresentationFactory=jacksonRepresentationFactory;   setNext(next); } "
"public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {   this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment); } "
"public int hashCode(){   return impl.hashCode(); } "
"public void authenticate(String name,String password) throws IOException, NoSuchAlgorithmException, RejectException, ChallengeException {   AccessRequest req=createAccessRequest();   req.addAttribute(new UserNameAttribute(name));   req.addAttribute(new UserPasswordAttribute(req.getAuthenticator(),secret,password));   req.addAttribute(new NASIPAddressAttribute(InetAddress.getLocalHost()));   req.addAttribute(new NASPortAttribute(socket.getLocalPort()));   sendPacket(req); } "
"private ObjectClass(final String name){   this.oid=toOID(name);   this.names=Collections.singletonList(name);   this.isObsolete=false;   this.superiorClassOIDs=Collections.singleton(TOP_OBJECTCLASS_NAME);   this.objectClassType=ObjectClassType.ABSTRACT;   this.requiredAttributeOIDs=Collections.emptySet();   this.optionalAttributeOIDs=Collections.emptySet();   this.isExtensibleObject=oid.equals(EXTENSIBLE_OBJECT_OBJECTCLASS_OID);   this.isPlaceHolder=true; } "
"public String displayStructureAsXML(){   createXMLStructureFormatter();   tagFormatter.openHeadingElement(\"file\",this.getFile().getAbsolutePath());   if (this.getID3v1Tag() != null) {     this.getID3v1Tag().createStructure();   }   if (this.getID3v2Tag() != null) {     this.getID3v2Tag().createStructure();   }   tagFormatter.closeHeadingElement(\"file\");   return tagFormatter.toString(); } "
"public void test_ConstructorILjava_lang_String(){   SimpleTimeZone st=new SimpleTimeZone(1000,\"TEST\");   assertEquals(\"Incorrect TZ constructed\",\"TEST\",st.getID());   assertTrue(\"Incorrect TZ constructed: \" + \"returned wrong offset\",st.getRawOffset() == 1000);   assertTrue(\"Incorrect TZ constructed\" + \"using daylight savings\",!st.useDaylightTime()); } "
"@Override public void removeParameter(String name){   parameters.remove(name);   fireContainerEvent(\"removeParameter\",name); } "
"public static String join(String[] values,String separator){   return values != null ? StringUtil.join(separator,(Object[])values) : null; } "
"public Object send(String functionName,Object params[],String lbcookie,String cookies) throws Exception {   return (send(encodeMessage(functionName,params),lbcookie,cookies)); } "
"public boolean canView(Set permissions,String accessLevel,String realmName,boolean delegateUI){   boolean canView=false;   if (ssoToken != null) {     if (permissions.isEmpty()) {       canView=true;     }  else {       try {         DelegationEvaluator delegationEvaluator=new DelegationEvaluatorImpl();         DelegationPermission delegationPermission=new DelegationPermission();         delegationPermission.setVersion(\"*\");         delegationPermission.setSubConfigName(\"default\");         if ((accessLevel != null) && (accessLevel.trim().length() > 0)) {           delegationPermission.setConfigType(accessLevel);           delegationPermission.setOrganizationName(\"/\");         }  else {           delegationPermission.setOrganizationName(realmName);         }         if (delegateUI) {           Set actions=new HashSet();           actions.add(AMAdminConstants.PERMISSION_DELEGATE);           delegationPermission.setActions(actions);           canView=delegationEvaluator.isAllowed(ssoToken,delegationPermission,Collections.EMPTY_MAP);         }         if (!delegateUI || canView) {           for (Iterator i=permissions.iterator(); i.hasNext() && !canView; ) {             String serviceName=(String)i.next();             canView=hasPermission(delegationEvaluator,delegationPermission,serviceName,AMAdminConstants.PERMISSION_READ);           }         }       }  catch (      DelegationException e) {         AMModelBase.debug.error(\"AccessControlModelImpl.canView\",e);       } catch (      SSOException e) {         AMModelBase.debug.error(\"AccessControlModelImpl.canView\",e);       }     }   }   return canView; } "
"private JPanel createPanel(){   GridBagConstraints gbc=new GridBagConstraints();   JPanel contentPanel=new JPanel(new GridBagLayout());   contentPanel.setBackground(UIFactory.DEFAULT_BACKGROUND);   JPanel topPanel=new JPanel(new GridBagLayout());   topPanel.setBorder(UIFactory.DIALOG_PANEL_BORDER);   topPanel.setBackground(UIFactory.CURRENT_STEP_PANEL_BACKGROUND);   Insets insets=UIFactory.getCurrentStepPanelInsets();   insets.bottom=0;   gbc.insets=insets;   gbc.fill=GridBagConstraints.BOTH;   gbc.weightx=1.0;   gbc.weighty=0.0;   gbc.gridwidth=3;   gbc.gridx=0;   gbc.gridy=0;   LocalizableMessage title=INFO_JAVA_RUNTIME_SETTINGS_TITLE.get();   JLabel l=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,title,UIFactory.TextStyle.TITLE);   l.setOpaque(false);   topPanel.add(l,gbc);   JTextComponent instructionsPane=UIFactory.makeHtmlPane(message,UIFactory.INSTRUCTIONS_FONT);   instructionsPane.setOpaque(false);   instructionsPane.setEditable(false);   gbc.gridy++;   gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;   topPanel.add(instructionsPane,gbc);   gbc.gridy++;   gbc.insets.top=UIFactory.TOP_INSET_INPUT_SUBPANEL;   gbc.insets.bottom=UIFactory.TOP_INSET_INPUT_SUBPANEL;   inputContainer=new JPanel(new CardLayout());   inputContainer.setOpaque(false);   inputContainer.add(createInputPanel(),INPUT_PANEL);   JPanel checkingPanel=UIFactory.makeJPanel();   checkingPanel.setLayout(new GridBagLayout());   checkingPanel.add(UIFactory.makeJLabel(UIFactory.IconType.WAIT,INFO_GENERAL_CHECKING_DATA.get(),UIFactory.TextStyle.PRIMARY_FIELD_VALID),new GridBagConstraints());   inputContainer.add(checkingPanel,CHECKING_PANEL);   topPanel.add(inputContainer,gbc);   gbc.weighty=1.0;   gbc.gridy++;   gbc.insets=UIFactory.getEmptyInsets();   topPanel.add(Box.createVerticalGlue(),gbc);   gbc.gridx=0;   gbc.gridy=0;   contentPanel.add(topPanel,gbc);   gbc.weighty=0.0;   gbc.gridy++;   gbc.insets=UIFactory.getButtonsPanelInsets();   contentPanel.add(createButtonsPanel(),gbc);   return contentPanel; } "
"public void showContent(){   mSlidingMenu.showContent(); } "
"public static void logAbandonRequest(AbandonOperation abandonOperation){   for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {     publisher.logAbandonRequest(abandonOperation);   } } "
"void syncSummaryView(View view){   boolean useDefaultSummary=true;   if (isChecked && !isEmpty(summaryOn)) {     summaryView.setText(summaryOn);     useDefaultSummary=false;   }  else   if (!isChecked && !isEmpty(summaryOff)) {     summaryView.setText(summaryOff);     useDefaultSummary=false;   }   if (useDefaultSummary) {     CharSequence summary=getSummary();     if (!isEmpty(summary)) {       summaryView.setText(summary);       useDefaultSummary=false;     }   }   int newVisibility=View.GONE;   if (!useDefaultSummary) {     newVisibility=View.VISIBLE;   }   if (newVisibility != summaryView.getVisibility()) {     summaryView.setVisibility(newVisibility);   } } "
"public boolean canServe(URL refUrl){   if (refUrl == null || !this.getPath().equals(refUrl.getPath())) {     return false;   }   if (!ObjectUtils.equals(protocol,refUrl.protocol)) {     return false;   }   if (!StringUtils.equals(this.getParameter(URLParamType.nodeType.getName()),MotanConstants.NODE_TYPE_SERVICE)) {     return false;   }   String version=getParameter(URLParamType.version.getName(),URLParamType.version.getValue());   String refVersion=refUrl.getParameter(URLParamType.version.getName(),URLParamType.version.getValue());   if (!version.equals(refVersion)) {     return false;   }   return true; } "
"public void testCFII_ServerClosedAfterFinish_NonBlock() throws Exception {   connectServerNonBlock();   ensureServerClosed();   assertTrue(this.channel1.isOpen());   this.channel1.close();   statusChannelClosed(); } "
"public boolean canCreateRule(Policy policy,String realmName){   getSvcTypeNameToActionsMap(policy,realmName);   return !requiredResourceNameService.isEmpty() || !notRequiredResourceNameService.isEmpty(); } "
"public Component add(String title,Component component){   if (!(component instanceof UIResource)) {     addTab(title,component);   }  else {     super.add(title,component);   }   return component; } "
"public static int v(Object tag,String msg){   return isPrint ? android.util.Log.v(tag.getClass().getSimpleName(),msg) : -1; } "
"public boolean allowStartTLS(){   return currentConfig.isAllowStartTLS() && !currentConfig.isUseSSL(); } "
"@Override public void closeJDBCConn(){   if (conn != null) {     try {       System.out.println(\"StreamingQuoteDAOModeLtp.closeJDBCConn(): Closing JDBC connection for Streaming Quote...\");       conn.close();     }  catch (    SQLException e) {       System.out.println(\"StreamingQuoteDAOModeLtp.closeJDBCConn(): SQLException on conn close\");       e.printStackTrace();     }   }  else {     System.out.println(\"StreamingQuoteDAOModeLtp.closeJDBCConn(): WARNING: DB connection already null\");   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeinsertbeforenomodificationallowederr.class,args); } "
"public void paint(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).paint(a,b);   } } "
"protected void fireStateChanged(){   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == ChangeListener.class) {       if (changeEvent == null) {         changeEvent=new ChangeEvent(this);       }       ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);     }   } } "
"LogExtracts tryParse(String message){   for (  Extractor extractor : Extractor.values()) {     Matcher matcher=extractor.newMatcher(message);     if (matcher.matches()) {       return extract(extractor,matcher);     }   }   return null; } "
"public synchronized boolean contains(Object value){   if (value == null) {     throw new NullPointerException();   }   Entry tab[]=table;   for (int i=tab.length; i-- > 0; ) {     for (Entry e=tab[i]; e != null; e=e.next) {       if (e.value.equals(value)) {         return true;       }     }   }   return false; } "
"public ModelMBeanAttributeInfo(String name,String type,String description,boolean isReadable,boolean isWritable,boolean isIs){   super(name,type,description,isReadable,isWritable,isIs);   if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {     MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanAttributeInfo.class.getName(),\"ModelMBeanAttributeInfo(\" + \"String,String,String,boolean,boolean,boolean)\",\"Entry\",name);   }   attrDescriptor=validDescriptor(null); } "
"public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {   if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException(\"Null params \");   SIPResponse sipResponse=new SIPResponse();   sipResponse.setStatusCode(statusCode);   sipResponse.setCallId(callId);   sipResponse.setCSeq(cSeq);   sipResponse.setFrom(from);   sipResponse.setTo(to);   sipResponse.setVia(via);   sipResponse.setMaxForwards(maxForwards);   sipResponse.setHeader((ContentType)contentType);   sipResponse.setMessageContent(content);   if (userAgent != null) {     sipResponse.setHeader(userAgent);   }   return sipResponse; } "
"protected int findByte(byte value,int pos){   for (int i=pos; i < tail; i++) {     if (buffer[i] == value) {       return i;     }   }   return -1; } "
"public boolean isMutable(){   return mutable; } "
"public SocketSecurityException(String s){   super(s); } "
"public static boolean isValidFilter(String filter){   try {     getFilterFromString(filter);   }  catch (  IllegalArgumentException e) {     return false;   }   return true; } "
"public void reset(boolean reset){   this.reset=reset; } "
"private <T>void castAndAddValues(Collection<T> destination,Collection<?> source,PropertyDefinition<T> pd){   for (  Object o : source) {     destination.add(pd.castValue(o));   } } "
"public void initialize(Map configParams) throws PolicyException {   if (configParams == null) {     throw (new PolicyException(ResBundleUtils.rbName,\"org_initialization_failed\",null,null));   }   String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);   if (configuredLdapServer == null) {     debug.error(\"Organization.initialize(): failed to get LDAP \" + \"server name. If you enter more than one server name \" + \"in the policy config service's Primary LDAP Server \"+ \"field, please make sure the ldap server name is preceded \"+ \"with the local server name.\");     throw (new PolicyException(ResBundleUtils.rbName,\"invalid_ldap_server_host\",null,null));   }   ldapServer=configuredLdapServer.toLowerCase();   localDS=PolicyUtils.isLocalDS(ldapServer);   aliasEnabled=Boolean.valueOf((String)configParams.get(PolicyConfig.USER_ALIAS_ENABLED)).booleanValue();   authid=(String)configParams.get(PolicyConfig.LDAP_BIND_DN);   authpw=(String)configParams.get(PolicyConfig.LDAP_BIND_PASSWORD);   if (authpw != null) {     authpw=PolicyUtils.decrypt(authpw);   }   baseDN=(String)configParams.get(PolicyConfig.LDAP_BASE_DN);   userSearchFilter=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_FILTER);   String scope=(String)configParams.get(PolicyConfig.LDAP_USERS_SEARCH_SCOPE);   if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {     userSearchScope=SearchScope.BASE_OBJECT;   }  else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {     userSearchScope=SearchScope.SINGLE_LEVEL;   }  else {     userSearchScope=SearchScope.WHOLE_SUBTREE;   }   userRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_USER_SEARCH_ATTRIBUTE);   orgSearchFilter=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_FILTER);   scope=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_SCOPE);   if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {     orgSearchScope=SearchScope.BASE_OBJECT;   }  else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {     orgSearchScope=SearchScope.SINGLE_LEVEL;   }  else {     orgSearchScope=SearchScope.WHOLE_SUBTREE;   }   orgRDNAttrName=(String)configParams.get(PolicyConfig.LDAP_ORG_SEARCH_ATTRIBUTE);   try {     timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));     maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));     minPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MIN_SIZE));     maxPoolSize=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_CONNECTION_POOL_MAX_SIZE));   }  catch (  NumberFormatException nfe) {     throw (new PolicyException(nfe));   }   String ssl=(String)configParams.get(PolicyConfig.LDAP_SSL_ENABLED);   if (ssl.equalsIgnoreCase(\"true\")) {     sslEnabled=true;   }  else {     sslEnabled=false;   }   Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);   if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {     Iterator items=orgNameSet.iterator();     orgName=(String)items.next();   }   if (debug.messageEnabled()) {     debug.message(\"Organization.initialize(): getting params\" + \"\\nldapServer: \" + ldapServer + \"\\nauthid: \"+ authid+ \"\\nbaseDN: \"+ baseDN+ \"\\nuserSearchFilter: \"+ userSearchFilter+ \"\\nuserRDNAttrName: \"+ userRDNAttrName+ \"\\norgSearchFilter: \"+ orgSearchFilter+ \"\\norgRDNAttrName: \"+ orgRDNAttrName+ \"\\ntimeLimit: \"+ timeLimit+ \"\\nmaxResults: \"+ maxResults+ \"\\nminPoolSize: \"+ minPoolSize+ \"\\nmaxPoolSize: \"+ maxPoolSize+ \"\\nSSLEnabled: \"+ sslEnabled+ \"\\nOrgName: \"+ orgName);   }   LDAPConnectionPools.initConnectionPool(ldapServer,authid,authpw,sslEnabled,minPoolSize,maxPoolSize);   connPool=LDAPConnectionPools.getConnectionPool(ldapServer);   initialized=true; } "
"public com.sun.identity.wsfederation.jaxb.xmlsig.SignatureValueType createSignatureValueType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignatureValueTypeImpl(); } "
"public void clear(){   while (queue.poll() != null)   ;   modCount++;   Entry<K>[] tab=table;   for (int i=0; i < tab.length; ++i)   tab[i]=null;   size=0;   while (queue.poll() != null)   ; } "
"public static void saveAsASCII(NSDictionary root,File out) throws IOException {   File parent=out.getParentFile();   if (!parent.exists())   if (!parent.mkdirs())   throw new IOException(\"The output directory does not exist and could not be created.\");   OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),\"ASCII\");   w.write(root.toASCIIPropertyList());   w.close(); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionPropertyType createEncryptionPropertyType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionPropertyTypeImpl(); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node employeeNode;   NodeList employeeList;   Node childNode;   Node textNode;   NodeList textList;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"employee\");   employeeNode=elementList.item(2);   employeeList=employeeNode.getChildNodes();   childNode=employeeList.item(1);   textNode=childNode.getFirstChild();   textList=textNode.getChildNodes();   assertSize(\"nodelistIndexGetLengthOfEmptyListAssert\",0,textList); } "
"protected void tearDown(){   try {     br.close();   }  catch (  Exception e) {   } } "
"public static String formatDateTime(Date date){   return mSimpleDateTimeFormat.format(date); } "
"static ReplayPromise<Float> replayPromiseFloat(final Duration timeout,final long time){   return new ReplayPromiseImpl<>(timeout,time); } "
"public void rescheduling(){   rescheduled=false; } "
"public void upgrade() throws Exception {   if (!checkUpgradePreconditions()) {     return;   }   backupManager.createOpenDJBackup();   try (BufferedWriter out=new BufferedWriter(new FileWriter(upgradeMarker))){     out.write(currentVersion.toString());     out.write('\\n');   }    if (currentVersion.isOlderThan(DJ_245_VERSION)) {     backupFile(\"config/config.ldif\");     backupFile(\"config/admin-backend.ldif\");     backupFile(\"config/java.properties\");     unpackZipFile(true);     callOldDJUpgrade();   }  else {     unpackZipFile(false);     if (currentVersion.equals(DJ_246_VERSION)) {       try {         File badSchema=new File(installRoot + File.separator + \"config\"+ File.separator+ \"schema\"+ File.separator+ \"cts-add-schema.ldif\");         delete(badSchema);       }  catch (      RuntimeException e) {       }       File goodSchema=new File(servletCtx.getRealPath(File.separator + \"WEB-INF\" + File.separator+ \"template\"+ File.separator+ \"ldif\"+ File.separator+ \"sfha\"+ File.separator+ \"99-cts-add-schema-backport.ldif\"));       File moveTo=new File(installRoot + File.separator + \"config\"+ File.separator+ \"schema\"+ File.separator+ \"99-cts-add-schema-backport.ldif\");       copy(goodSchema.toPath(),moveTo.toPath());     }     int ret=callDJUpgradeMechanism();     if (ret == 0) {       message(\"Upgrade completed successfully\");       delete(upgradeMarker);       final String lockFile=LockFileManager.getServerLockFileName();       LockFileManager.releaseLock(lockFile,new StringBuilder());     }  else {       throw new UpgradeException(\"OpenDJ upgrade failed with code:  \" + ret);     }   } } "
"public static void include(ServletRequest request,ServletResponse response,String relativePath,JspWriter out,boolean flush) throws IOException, ServletException {   if (flush && !(out instanceof BodyContent))   out.flush();   String resourcePath=getContextRelativePath(request,relativePath);   RequestDispatcher rd=request.getRequestDispatcher(resourcePath);   rd.include(request,new ServletResponseWrapperInclude(response,out)); } "
"public void deregisterChangeListener(ConfigurationChangeListener<? super S> listener){   for (  ConfigChangeListener l : configRepository.getChangeListeners(configDN)) {     if (l instanceof ConfigChangeListenerAdaptor) {       ConfigChangeListenerAdaptor<?> adaptor=(ConfigChangeListenerAdaptor<?>)l;       ServerManagedObjectChangeListener<?> l2=adaptor.getServerManagedObjectChangeListener();       if (l2 instanceof ServerManagedObjectChangeListenerAdaptor<?>) {         ServerManagedObjectChangeListenerAdaptor<?> adaptor2=(ServerManagedObjectChangeListenerAdaptor<?>)l2;         if (adaptor2.getConfigurationChangeListener() == listener) {           adaptor.finalizeChangeListener();           configRepository.deregisterChangeListener(configDN,adaptor);         }       }     }   } } "
"@Override public void attributeRemoved(ServletContextAttributeEvent event){   log(\"attributeRemoved('\" + event.getName() + \"', '\"+ event.getValue()+ \"')\"); } "
"public void releaseSurface(EGLSurface eglSurface){   EGL14.eglDestroySurface(mEGLDisplay,eglSurface); } "
"public static Path resource(final String path){   final ClassLoader classloader=Thread.currentThread().getContextClassLoader();   final URL resourceUrl=classloader.getResource(path);   try {     final Path resourcePath=Paths.get(resourceUrl.toURI());     return resourcePath;   }  catch (  URISyntaxException e) {     throw new RuntimeException(e);   } } "
"private void registerJsfCdiToSpring(BeanDefinition definition){   if (definition instanceof AnnotatedBeanDefinition) {     AnnotatedBeanDefinition annDef=(AnnotatedBeanDefinition)definition;     String scopeName=null;     if (annDef.getFactoryMethodMetadata() != null) {       scopeName=JsfCdiToSpring.deduceScopeName(annDef.getFactoryMethodMetadata());     }  else {       scopeName=JsfCdiToSpring.deduceScopeName(annDef.getMetadata().getAnnotationTypes());     }     if (scopeName != null) {       definition.setScope(scopeName);       logger.debug(definition.getBeanClassName() + \" - Scope(\" + definition.getScope().toUpperCase()+ \")\");     }   } } "
"public boolean containsHeader(String name){   return this._getHttpServletResponse() != null ? this._getHttpServletResponse().containsHeader(name) : internalHeaders.containsKey(name); } "
"public String toString(int units,String unitsName){   StringBuffer result=new StringBuffer();   result.append(getCrossFeedResolution(units));   result.append('x');   result.append(getFeedResolution(units));   if (unitsName != null) {     result.append(' ');     result.append(unitsName);   }   return result.toString(); } "
"public void test_DivideBigDecimalRoundingModeHALF_UP(){   String a=\"3736186567876876578956958765675671119238118911893939591735\";   String b=\"74723342238476237823787879183470\";   RoundingMode rm=RoundingMode.HALF_UP;   String c=\"50000260373164286401361913\";   BigDecimal aNumber=new BigDecimal(new BigInteger(a));   BigDecimal bNumber=new BigDecimal(new BigInteger(b));   BigDecimal result=aNumber.divide(bNumber,rm);   assertEquals(\"incorrect value\",c,result.toString()); } "
"private static boolean isNodeAfterSibling(Node parent,Node child1,Node child2){   boolean isNodeAfterSibling=false;   short child1type=child1.getNodeType();   short child2type=child2.getNodeType();   if ((Node.ATTRIBUTE_NODE != child1type) && (Node.ATTRIBUTE_NODE == child2type)) {     isNodeAfterSibling=false;   }  else   if ((Node.ATTRIBUTE_NODE == child1type) && (Node.ATTRIBUTE_NODE != child2type)) {     isNodeAfterSibling=true;   }  else   if (Node.ATTRIBUTE_NODE == child1type) {     NamedNodeMap children=parent.getAttributes();     int nNodes=children.getLength();     boolean found1=false, found2=false;     for (int i=0; i < nNodes; i++) {       Node child=children.item(i);       if (child1 == child || isNodeTheSame(child1,child)) {         if (found2) {           isNodeAfterSibling=false;           break;         }         found1=true;       }  else       if (child2 == child || isNodeTheSame(child2,child)) {         if (found1) {           isNodeAfterSibling=true;           break;         }         found2=true;       }     }   }  else {     Node child=parent.getFirstChild();     boolean found1=false, found2=false;     while (null != child) {       if (child1 == child || isNodeTheSame(child1,child)) {         if (found2) {           isNodeAfterSibling=false;           break;         }         found1=true;       }  else       if (child2 == child || isNodeTheSame(child2,child)) {         if (found1) {           isNodeAfterSibling=true;           break;         }         found2=true;       }       child=child.getNextSibling();     }   }   return isNodeAfterSibling; } "
"static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {   SecurityManager security=System.getSecurityManager();   try {     if (security != null) {       final int lastDot=className.lastIndexOf(\".\");       String packageName=className;       if (lastDot != -1)       packageName=className.substring(0,lastDot);       security.checkPackageAccess(packageName);     }   }  catch (  SecurityException e) {     throw e;   }   Class providerClass;   if (cl == null) {     providerClass=Class.forName(className);   }  else {     try {       providerClass=cl.loadClass(className);     }  catch (    ClassNotFoundException x) {       if (doFallback) {         ClassLoader current=ObjectFactory.class.getClassLoader();         if (current == null) {           providerClass=Class.forName(className);         }  else         if (cl != current) {           cl=current;           providerClass=cl.loadClass(className);         }  else {           throw x;         }       }  else {         throw x;       }     }   }   return providerClass; } "
"public void migrateTo(DTMManager manager){   super.migrateTo(manager);   int numDTMs=m_dtmIdent.size();   int dtmId=m_mgrDefault.getFirstFreeDTMID();   int nodeIndex=0;   for (int i=0; i < numDTMs; i++) {     m_dtmIdent.setElementAt(dtmId << DTMManager.IDENT_DTM_NODE_BITS,i);     m_mgrDefault.addDTM(this,dtmId,nodeIndex);     dtmId++;     nodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);   } } "
"protected void selectNextIndex(){   int s=list.getSelectedIndex();   if ((s + 1) < list.getModel().getSize()) {     s+=1;     list.setSelectedIndex(s);     list.ensureIndexIsVisible(s);   } } "
"boolean solveConflict(){   return solveConflictFlag; } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.UriNamedClaimTypesOfferedElement createUriNamedClaimTypesOfferedElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.UriNamedClaimTypesOfferedElementImpl(); } "
"protected SimpleFileVisitor(){ } "
"static String step2Groovy(Step s) throws UnsupportedOperationException {   return object2Groovy(new StringBuilder(),s,false).toString(); } "
"public Object clone(){   try {     return super.clone();   }  catch (  CloneNotSupportedException e) {     throw new InternalError(e);   } } "
"public static int calculateEANParity(String code){   int mul=3;   int total=0;   for (int k=code.length() - 1; k >= 0; --k) {     int n=code.charAt(k) - '0';     total+=mul * n;     mul^=2;   }   return (10 - (total % 10)) % 10; } "
"@Override public long skip(long numberOfChars) throws IOException {   if (eof) {     throw new IOException(\"Skip after end of file\");   }   if (position == size) {     return doEndOfFile();   }   position+=numberOfChars;   long returnLength=numberOfChars;   if (position > size) {     returnLength=numberOfChars - (position - size);     position=size;   }   return returnLength; } "
"public ParameterBlock add(float f){   return add(new Float(f)); } "
"public com.sun.identity.wsfederation.jaxb.entityconfig.AttributeType createAttributeType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.AttributeTypeImpl(); } "
"public BigInteger(int signum,byte[] magnitude){   this.mag=stripLeadingZeroBytes(magnitude);   if (signum < -1 || signum > 1)   throw (new NumberFormatException(\"Invalid signum value\"));   if (this.mag.length == 0) {     this.signum=0;   }  else {     if (signum == 0)     throw (new NumberFormatException(\"signum-magnitude mismatch\"));     this.signum=signum;   }   if (mag.length >= MAX_MAG_LENGTH) {     checkRange();   } } "
"public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){   return getPersistence().fetchByField2_Last(field2,orderByComparator); } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(\"StandardService[\");   sb.append(getName());   sb.append(\"]\");   return (sb.toString()); } "
"public String join(String separator){   StringBuilder sb=new StringBuilder();   boolean isFirst=true;   for (  Object e : this) {     if (isFirst)     isFirst=false;  else     sb.append(separator);     sb.append(e);   }   return sb.toString(); } "
"private void extractDNs(AttributeType attributeType,SearchFilter filter,Set<DN> dnSet){ switch (filter.getFilterType()) { case AND: case OR:     for (    SearchFilter f : filter.getFilterComponents()) {       extractDNs(attributeType,f,dnSet);     }   break; case EQUALITY: if (filter.getAttributeType().equals(attributeType)) {   try {     dnSet.add(DN.valueOf(filter.getAssertionValue()));   }  catch (  LocalizedIllegalArgumentException e) {     logger.traceException(e);   } } break; } } "
"private JSONObject createJSONObject(MotionEvent motionEvent,int pos,int pointerIndex){   PointF screenXY, pageXY;   if (pos == CUR_EVENT) {     pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex);     screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex);   }  else {     pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex,pos);     screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex,pos);   }   return createJSONObject(screenXY,pageXY,(float)motionEvent.getPointerId(pointerIndex)); } "
"public final void testEqualsObject02(){   assertTrue(new ECFieldF2m(43).equals(new ECFieldF2m(43))); } "
"public static AdditionalLogItem quotedKeyValue(final Class<?> source,final String key,final Object value){   Reject.ifNull(source,key,value);   return new AdditionalLogItem(source,key,value,true); } "
"public final boolean parentOf(ThreadGroup g){   for (; g != null; g=g.parent) {     if (g == this) {       return true;     }   }   return false; } "
"public com.sun.identity.saml2.jaxb.metadata.AssertionIDRequestServiceElement createAssertionIDRequestServiceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.AssertionIDRequestServiceElementImpl(); } "
"public boolean beginStaticTextMessageDisplay(ChildDisplayEvent event){   return true; } "
"public static long nextOperationID(){   long opID=nextOperationID.getAndIncrement();   if (opID < 0) { synchronized (nextOperationID) {       if (nextOperationID.get() < 0) {         nextOperationID.set(1);         return 0;       }  else {         return nextOperationID.getAndIncrement();       }     }   }   return opID; } "
"public static ValueExp value(int val){   return new NumericValueExp((long)val); } "
"@BeforeClass public static void initClass(){   scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();   if (Misc.isDebugMode()) {     System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());   } } "
"protected void createThreads(int threadsToCreate){   if (threadsToCreate > poolSize) {     threadsToCreate=poolSize;   }   for (int i=currentThreadCount; i < threadsToCreate; i++) {     threads[i - busyThreadCount]=new WorkerThread(poolName,this);     threads[i - busyThreadCount].setDaemon(daemon);     threads[i - busyThreadCount].start();   }   currentThreadCount=threadsToCreate; } "
"public ByteMessage(byte[] data){   message=data; } "
"@Override public int read(char[] buf,int offset,int len) throws IOException {   return reader.read(buf,offset,len); } "
"private String smallToString(int radix){   if (signum == 0) {     return \"0\";   }   int maxNumDigitGroups=(4 * mag.length + 6) / 7;   String digitGroup[]=new String[maxNumDigitGroups];   BigInteger tmp=this.abs();   int numGroups=0;   while (tmp.signum != 0) {     BigInteger d=longRadix[radix];     MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(tmp.mag), b=new MutableBigInteger(d.mag);     MutableBigInteger r=a.divide(b,q);     BigInteger q2=q.toBigInteger(tmp.signum * d.signum);     BigInteger r2=r.toBigInteger(tmp.signum * d.signum);     digitGroup[numGroups++]=Long.toString(r2.longValue(),radix);     tmp=q2;   }   StringBuilder buf=new StringBuilder(numGroups * digitsPerLong[radix] + 1);   if (signum < 0) {     buf.append('-');   }   buf.append(digitGroup[numGroups - 1]);   for (int i=numGroups - 2; i >= 0; i--) {     int numLeadingZeros=digitsPerLong[radix] - digitGroup[i].length();     if (numLeadingZeros != 0) {       buf.append(zeros[numLeadingZeros]);     }     buf.append(digitGroup[i]);   }   return buf.toString(); } "
"public ByteStringBuilder appendInt(int i){   ensureAdditionalCapacity(4);   for (int j=length + 3; j >= length; j--) {     buffer[j]=(byte)i;     i>>>=8;   }   length+=4;   return this; } "
"public boolean bool() throws javax.xml.transform.TransformerException {   error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});   return false; } "
"public LDIFEntryReader(final List<String> ldifLines){   super(ldifLines); } "
"public static boolean isSigningOn(){   return signingOn; } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {   return toXMLString(includeNS,declareNS,false); } "
"@Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){   List<Foo> list=findByField2(field2,0,1,orderByComparator);   if (!list.isEmpty()) {     return list.get(0);   }   return null; } "
"public Set<Map<AdministratorProperty,Object>> readAdministratorRegistry() throws ADSContextException {   Set<Map<AdministratorProperty,Object>> result=new HashSet<>();   SearchRequest request=newSearchRequest(getAdministratorContainerDN(),SINGLE_LEVEL,objectClassPresent(),\"cn\",\"userpassword\",\"ds-privilege-name\",\"description\");   try (ConnectionEntryReader entryReader=connectionWrapper.getConnection().search(request)){     while (entryReader.hasNext()) {       SearchResultEntry sr=entryReader.readEntry();       result.add(makePropertiesFromAdministratorAttrs(sr.getName().rdn(),sr.getAllAttributes()));     }   }  catch (  EntryNotFoundException x) {     throw new ADSContextException(ErrorType.BROKEN_INSTALL);   } catch (  AuthorizationException x) {     throw new ADSContextException(ErrorType.ACCESS_PERMISSION);   } catch (  IOException x) {     throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);   }   return result; } "
"public void replaceAll(Collection<ByteString> values){   clear();   addAll(values); } "
"private static void loadFilesPath(Context context){   if (context != null) {     try {       File file=context.getFilesDir();       if (file != null) {         CrashConstants.FILES_PATH=file.getAbsolutePath();       }     }  catch (    Exception e) {       L.e(\"Exception thrown when accessing the files dir:\");       e.printStackTrace();     }   } } "
"public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {   xstr().dispatchCharactersEvents(ch); } "
"private void processHostPattern(final String rule){   final String[] s=rule.split(\"^[0-9a-zA-z-.]+\");   if (s.length > 0) {     throw genericDecodeError();   }   hostPattern=rule; } "
"public void configChanged(ConfigurationActionEvent event){   if (getDebug().messageEnabled()) {     getDebug().message(\"SystemConfigurationUtil.configChanged: \" + \"type = \" + event.getType() + \", configuration name = \"+ event.getConfigurationName()+ \", component name = \"+ event.getComponentName()+ \", realm = \"+ event.getRealm());   }   try {     update();   }  catch (  ConfigurationException ex) {     getDebug().error(\"SystemConfigurationUtil.configChanged: \",ex);   } } "
"public SAML2MetaException(String message){   super(message); } "
"public synchronized StringBuffer insert(int index,char ch){   insert0(index,ch);   return this; } "
"private MethodNode findMethod(ClassNode cn,String name,String desc){   if (cn == null) {     return null;   }   for (  MethodNode mn : cn.methods) {     if (mn.desc.equals(desc) && mn.name.equals(name)) {       return mn;     }   }   return null; } "
"public void detach(){ } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapsetnameditem.class,args); } "
"public void parse(String systemId) throws IOException, SAXException {   parse(new InputSource(systemId)); } "
"public void testSetScaleGreater(){   String a=\"1231212478987482988429808779810457634781384756794987\";   int aScale=18;   int newScale=28;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=aNumber.setScale(newScale);   assertTrue(\"incorrect scale\",bNumber.scale() == newScale);   assertEquals(\"incorrect value\",0,bNumber.compareTo(aNumber)); } "
"protected boolean isPackageSealed(String name,Manifest man){   String path=name.replace('.','/') + '/';   Attributes attr=man.getAttributes(path);   String sealed=null;   if (attr != null) {     sealed=attr.getValue(Name.SEALED);   }   if (sealed == null) {     if ((attr=man.getMainAttributes()) != null) {       sealed=attr.getValue(Name.SEALED);     }   }   return \"true\".equalsIgnoreCase(sealed); } "
"public PdfA1Checker(PdfAConformanceLevel conformanceLevel){   super(conformanceLevel); } "
"public BloomFilterBlacklist(Blacklist<T> delegate,long purgeDelayMs){   this(delegate,purgeDelayMs,BloomFilters.create(EntryFunnel.INSTANCE).withFalsePositiveProbability(FALSE_POSITIVE_PROBABILITY).withInitialCapacity(NUM_EXPECTED_BLACKLISTED_ENTRIES).withExpiryStrategy(EntryExpirationStrategy.INSTANCE).withCapacityGrowthFactor(CAPACITY_GROWTH_FACTOR).withFalsePositiveProbabilityScaleFactor(FALSE_POSITIVE_PROBABILITY_SCALE_FACTOR).withConcurrencyStrategy(ConcurrencyStrategy.ATOMIC).build()); } "
"public static void write(String data,Writer output) throws IOException {   if (data != null) {     output.write(data);   } } "
"protected synchronized void discardKeyEvents(Component comp){   if (comp == null) {     return;   }   long start=-1;   for (Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator(); iter.hasNext(); ) {     TypeAheadMarker marker=iter.next();     Component toTest=marker.untilFocused;     boolean match=(toTest == comp);     while (!match && toTest != null && !(toTest instanceof Window)) {       toTest=toTest.getParent();       match=(toTest == comp);     }     if (match) {       if (start < 0) {         start=marker.after;       }       iter.remove();     }  else     if (start >= 0) {       purgeStampedEvents(start,marker.after);       start=-1;     }   }   purgeStampedEvents(start,-1); } "
"public ObjectIdentifier(int[] oid,String name,Object oidGroup){   this(oid);   if (oidGroup == null) {     throw new NullPointerException(\"oidGroup == null\");   }   this.group=oidGroup;   this.name=name;   toOIDString(); } "
"protected boolean updateAccountInformation(NameIdentifier ni){   try {     FSUtils.debug.message(\"FSFedTerminationHandler::updateAccountInformation: start\");     String searchDomain=remoteEntityId;     String nameId=null;     String nameQualifier=null;     if (ni != null) {       nameQualifier=ni.getNameQualifier();       if (nameQualifier != null && (nameQualifier.length() != 0) && !nameQualifier.equals(remoteEntityId)) {         searchDomain=nameQualifier;       }       nameId=ni.getName();     }     if (nameId == null && acctInfo != null) {       FSUtils.debug.message(\"FSAccountManager: getnameId in accInfo\");       NameIdentifier temp=acctInfo.getLocalNameIdentifier();       if (temp != null) {         nameId=temp.getName();         nameQualifier=temp.getNameQualifier();       }  else {         temp=acctInfo.getRemoteNameIdentifier();         if (temp != null) {           nameId=temp.getName();           nameQualifier=temp.getNameQualifier();         }       }     }     FSAccountFedInfoKey fedInfoKey=new FSAccountFedInfoKey(nameQualifier,nameId);     managerInst.removeAccountFedInfo(userID,fedInfoKey,searchDomain);     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSFedTerminationHandler:: \" + \"updateAccountInformation deactivate successfully completed\");     }   }  catch (  FSAccountMgmtException e) {     FSUtils.debug.error(\"FSFedTerminationHandler::updateAccountInformation \" + FSUtils.bundle.getString(IFSConstants.TERMINATION_LOCAL_FAILED));     String[] data={userID};     LogUtil.error(Level.INFO,LogUtil.TERMINATION_FAILED,data,ssoToken);     return false;   }   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"Cleaning Session manager for user : \" + userID);     FSUtils.debug.message(\"Cleaning Session manager for remote provider: \" + remoteEntityId);     FSUtils.debug.message(\"Cleaning Session manager for hosted provider: \" + hostedEntityId);   }   FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityId,metaAlias,null);   return true; } "
"public static String showInternalInputDialog(Component parentComponent,Object message){   return showInternalInputDialog(parentComponent,message,UIManager.getString(\"OptionPane.inputDialogTitle\",parentComponent),QUESTION_MESSAGE); } "
"protected void prepareMyRecordsIfNeeded(ProtocolMessage pm){   if (pm.getRecords() != null && !pm.getRecords().isEmpty()) {     byte[] records=recordHandler.wrapData(messageBytesCollector.getProtocolMessageBytes(),pm.getProtocolMessageType(),pm.getRecords());     messageBytesCollector.appendRecordBytes(records);     messageBytesCollector.flushProtocolMessageBytes();   } } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public SQLTransientConnectionException(Throwable cause){   super(cause); } "
"private String updateMethodDesc(String desc){   Type methodType=Type.getMethodType(desc);   for (  Type arg : methodType.getArgumentTypes()) {     String argClass=arg.getClassName().replace(\".\",\"/\");     if (needsRenaming(argClass)) {       ClassNode acn=getClassNode(argClass);       desc=desc.replace(argClass,getRefactoredName(acn));     }   }   String returnClass=methodType.getReturnType().getClassName().replace(\".\",\"/\");   if (needsRenaming(returnClass)) {     ClassNode retcn=getClassNode(returnClass);     desc=desc.replace(returnClass,getRefactoredName(retcn));   }   return desc; } "
"protected static Map attrSetToMap(AttrSet attrSet,boolean fetchByteValues){   Map attributesMap=new AMHashMap(fetchByteValues);   if (attrSet == null) {     return attributesMap;   }   int attrSetSize=attrSet.size();   if (!fetchByteValues) {     for (int i=0; i < attrSetSize; i++) {       Attr attr=attrSet.elementAt(i);       String values[]=attr.getStringValues();       attributesMap.put(attr.getName(),stringArrayToSet(values));     }   }  else {     for (int i=0; i < attrSetSize; i++) {       Attr attr=attrSet.elementAt(i);       attributesMap.put(attr.getName(),attr.getByteValues());     }   }   return attributesMap; } "
"@DataProvider(name=\"entryDataProvider\") public Object[][] createTestEntryData() throws Exception {   String[][] input={{\"cn=john smith, dc=com\",\"objectclass\",\"top\",\"objectclass\",\"person\",\"cn\",\"john smith\",\"sn\",\"smith\",\"description\",\"description of john\"},{\"\",\"objectclass\",\"top\",\"objectClass\",\"ds-root-dse\"}};   List<Entry[]> entries=new LinkedList<>();   for (  String[] s : input) {     DN dn=DN.valueOf(s[0]);     Entry entry=new Entry(dn,null,null,null);     for (int i=1; i < s.length; i+=2) {       String atype=toLowerCase(s[i]);       String avalue=toLowerCase(s[i + 1]);       if (atype.equals(\"objectclass\")) {         entry.addObjectClass(DirectoryServer.getSchema().getObjectClass(avalue));       }  else {         Attribute attr=Attributes.create(atype,avalue);         entry.addAttribute(attr,null);       }     }     entries.add(new Entry[]{entry});   }   return entries.toArray(new Object[0][]); } "
"public void test_getParams() throws Exception {   DSAParams param=new DSAParameterSpec(Util.P,Util.Q,Util.G);   KeyPairGenerator gen=KeyPairGenerator.getInstance(\"DSA\");   gen.initialize((DSAParameterSpec)param);   DSAKey key=null;   key=(DSAKey)gen.generateKeyPair().getPrivate();   assertDSAParamsEquals(param,key.getParams());   key=(DSAKey)gen.generateKeyPair().getPublic();   assertDSAParamsEquals(param,key.getParams()); } "
"private boolean hasValidOffset(final String value,final int startPos,final LocalizableMessageBuilder invalidReason){   final int offsetLength=value.length() - startPos;   if (offsetLength < 2) {     final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_TOO_SHORT.get(value);     invalidReason.append(message);     return false;   } switch (value.charAt(startPos)) { case '0': case '1': switch (value.charAt(startPos + 1)) { case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':       break; default :     final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength));   invalidReason.append(message); return false; } break; case '2': switch (value.charAt(startPos + 1)) { case '0': case '1': case '2': case '3': break; default : final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength)); invalidReason.append(message); return false; } break; default : final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength)); invalidReason.append(message); return false; } if (offsetLength == 4) { switch (value.charAt(startPos + 2)) { case '0': case '1': case '2': case '3': case '4': case '5': switch (value.charAt(startPos + 3)) { case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': break; default : final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength)); invalidReason.append(message); return false; } break; default : final LocalizableMessage message=ERR_ATTR_SYNTAX_UTC_TIME_INVALID_OFFSET.get(value,value.substring(startPos,startPos + offsetLength)); invalidReason.append(message); return false; } } return true; } "
"public Set search(SSOToken token,String entryDN,String searchFilter,int searchScope) throws AMException {   Set resultSet=Collections.EMPTY_SET;   try {     PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));     SearchControl control=new SearchControl();     control.setSearchScope(searchScope);     SearchResults results=po.search(searchFilter,control);     resultSet=searchResultsToSet(results);   }  catch (  UMSException ue) {     LdapException lex=(LdapException)ue.getRootCause();     ResultCode errorCode=lex.getResult().getResultCode();     if (retryErrorCodes.contains(\"\" + errorCode)) {       throw new AMException(token,Integer.toString(errorCode.intValue()),ue);     }     if (debug.warningEnabled()) {       debug.warning(\"DirectoryServicesImpl.search(token:, entryDN: \" + entryDN + \", searchFilter: \"+ searchFilter+ \"searchScope: \"+ searchScope+ \" error occurred: \",ue);     }     processInternalException(token,ue,\"341\");   }   return resultSet; } "
"public void visitEnd(){   if (av != null) {     av.visitEnd();   } } "
"@SuppressWarnings(\"unused\") public static long parseLong(byte[] bytes){   return parseLong(bytes,0,bytes.length); } "
"private PooledSoftReference<T> findReference(final T obj){   final Iterator<PooledSoftReference<T>> iterator=allReferences.iterator();   while (iterator.hasNext()) {     final PooledSoftReference<T> reference=iterator.next();     if (reference.getObject() != null && reference.getObject().equals(obj)) {       return reference;     }   }   return null; } "
"public void updateUI(){   setUI((ScrollBarUI)UIManager.getUI(this)); } "
"public String toString(){   int modifiers=0;   if (!GraphicsEnvironment.isHeadless()) {     modifiers=Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();   }   if (usesShiftModifier()) {     modifiers|=Event.SHIFT_MASK;   }   return KeyEvent.getKeyModifiersText(modifiers) + \"+\" + KeyEvent.getKeyText(key); } "
"public boolean isUnderline(){   sync();   return underline; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodeinsertbeforerefchildnonexistent.class,args); } "
"public void startDocument() throws SAXException {   if (DEBUG)   System.out.println(\"TransformerHandlerImpl#startDocument\");   m_insideParse=true;   if (m_contentHandler != null) {     if (m_incremental) {       m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());       int cpriority=Thread.currentThread().getPriority();       m_transformer.runTransformThread(cpriority);     }     m_contentHandler.startDocument();   } } "
"public Lyrics3v2Field(ByteBuffer byteBuffer) throws InvalidTagException {   this.read(byteBuffer); } "
"private static void initQRCode(int numInputBytes,ErrorCorrectionLevel ecLevel,int desiredMinVersion,Mode mode,QRCode qrCode) throws WriterException {   qrCode.setECLevel(ecLevel);   qrCode.setMode(mode);   for (int versionNum=desiredMinVersion; versionNum <= 40; versionNum++) {     Version version=Version.getVersionForNumber(versionNum);     int numBytes=version.getTotalCodewords();     Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);     int numEcBytes=ecBlocks.getTotalECCodewords();     int numRSBlocks=ecBlocks.getNumBlocks();     int numDataBytes=numBytes - numEcBytes;     if (numDataBytes >= numInputBytes + 3) {       qrCode.setVersion(versionNum);       qrCode.setNumTotalBytes(numBytes);       qrCode.setNumDataBytes(numDataBytes);       qrCode.setNumRSBlocks(numRSBlocks);       qrCode.setNumECBytes(numEcBytes);       qrCode.setMatrixWidth(version.getDimensionForVersion());       return;     }   }   throw new WriterException(\"Cannot find proper rs block info (input data too big?)\"); } "
"public void testCertStore08() throws InvalidAlgorithmParameterException, NoSuchProviderException {   if (!initParams()) {     return;   }   for (int i=0; i < invalidValues.length; i++) {     try {       CertStore.getInstance(invalidValues[i],dParams,dName);       fail(\"NoSuchAlgorithmException must be thrown\");     }  catch (    NoSuchAlgorithmException e) {     }   }   try {     CertStore.getInstance(null,dParams,dName);     fail(\"NullPointerException or NoSuchAlgorithmException must be thrown when type is null\");   }  catch (  NullPointerException e) {   } catch (  NoSuchAlgorithmException e) {   } } "
"public void add(Permission permission){   if (isReadOnly())   throw new SecurityException(\"attempt to add a Permission to a readonly Permissions object\");   PermissionCollection pc; synchronized (this) {     pc=getPermissionCollection(permission,true);     pc.add(permission);   }   if (permission instanceof AllPermission) {     allPermission=pc;   }   if (permission instanceof UnresolvedPermission) {     hasUnresolved=true;   } } "
"public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){   paintBackground(context,g,x,y,w,h,orientation); } "
"public synchronized void evictAll() throws IOException {   initialize();   for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {     removeEntry(entry);   } } "
"public TRANSIENT(String s,int minor,CompletionStatus completed){   super(s,minor,completed); } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   CCActionTable table=(CCActionTable)getChild(TBL_PROPERTY_NAMES);   table.restoreStateData();   Integer[] selected=tblPropertyNamesModel.getSelectedRows();   SerializedField szCache=(SerializedField)getChild(SZ_CACHE);   List list=(List)szCache.getSerializedObj();   Set toInherit=new HashSet(selected.length * 2);   for (int i=0; i < selected.length; i++) {     String name=(String)list.get(selected[i].intValue());     toInherit.add(ServerEditViewBeanBase.getActualPropertyName(name));   }   Set notToInherit=new HashSet(list.size() * 2);   for (Iterator i=list.iterator(); i.hasNext(); ) {     String name=(String)i.next();     notToInherit.add(ServerEditViewBeanBase.getActualPropertyName(name));   }   notToInherit.removeAll(toInherit);   try {     ServerSiteModel model=(ServerSiteModel)getModel();     String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);     model.updateServerConfigInheritance(serverName,toInherit,notToInherit);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"servercfg.inheritance.updated\");   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());   }   forwardTo(); } "
"private void mergeCollapse(){   while (stackSize > 1) {     int n=stackSize - 2;     if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {       if (runLen[n - 1] < runLen[n + 1])       n--;       mergeAt(n);     }  else     if (runLen[n] <= runLen[n + 1]) {       mergeAt(n);     }  else {       break;     }   } } "
"@SuppressWarnings(\"unchecked\") @Override public PdfDictionary makeIndirect(PdfDocument document){   return (PdfDictionary)super.makeIndirect(document); } "
"private String parseString(){   return readInputUntil(WHITESPACE_SPACE,WHITESPACE_TAB,WHITESPACE_NEWLINE,WHITESPACE_CARRIAGE_RETURN,ARRAY_ITEM_DELIMITER_TOKEN,DICTIONARY_ITEM_DELIMITER_TOKEN,DICTIONARY_ASSIGN_TOKEN,ARRAY_END_TOKEN); } "
"@Override public void doInitBody() throws JspException { } "
"public FrameBodyTMCL(){ } "
"@LargeTest public void testCursorWindowFailureWhenTooManyCursorWindowsLeftOpen(){   mDatabase.execSQL(\"CREATE TABLE test (_id INTEGER PRIMARY KEY, data TEXT);\");   mDatabase.execSQL(\"INSERT INTO test values(1, 'test');\");   int N=1024;   ArrayList<Cursor> cursorList=new ArrayList<>();   for (int i=0; i < N; i++) {     try {       Cursor cursor=mDatabase.rawQuery(\"select * from test\",null);       cursor.getCount();       cursorList.add(cursor);     }  catch (    CursorWindowAllocationException e) {       break;     } catch (    Exception e) {       fail(\"unexpected exception: \" + e.getMessage());       e.printStackTrace();       break;     }   }   for (  Cursor c : cursorList) {     c.close();   } } "
"public static BooleanArgument usePKCS11KeystoreArgument() throws ArgumentException {   return BooleanArgument.builder(\"usePkcs11Keystore\").description(INFO_ARGUMENT_DESCRIPTION_USE_PKCS11.get()).buildArgument(); } "
"public void reset(){ synchronized (lock) {     count=0;   } } "
"@BeforeClass public static void initClass(){   scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();   if (Misc.isDebugMode()) {     System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());   } } "
"public UnderscoreDNTag(){   numComponents=0; } "
"public void fixupVariables(java.util.Vector vars,int globalsSize){ } "
"@Override public void initialize() throws UpgradeException {   if (isCurrentVersionLessThan(AM_13,true)) {     identifyApplicationsAndPoliciesRequiringUpgrade();   } } "
"public static boolean validate(String str,String regEx,Debug tmpDebug){   debug=tmpDebug;   if (str == null || str.length() == 0) {     debug.message(\"Source string is null or empty\");     return false;   }   char[] value=str.toCharArray();   int count=value.length;   Set hSet=new HashSet();   StringTokenizer st=new StringTokenizer(regEx,SEPERATOR);   while (st.hasMoreTokens()) {     hSet.add(st.nextToken());   }   Iterator itr=hSet.iterator();   while (itr.hasNext()) {     String obj=(String)itr.next();     if (process(value,obj,0,count) > -1) {       debug.message(\"detected invalid chars ...\");       return false;     }   }   return true; } "
"public boolean is_start_info(){   return start_info; } "
"public void testCertificateFactory09(){   if (!X509Support) {     fail(NotSupportMsg);     return;   }   CertificateFactory[] certFs=initCertFs();   assertNotNull(\"CertificateFactory objects were not created\",certFs);   Iterator<String> it1=certFs[0].getCertPathEncodings();   Iterator<String> it2=certFs[1].getCertPathEncodings();   assertEquals(\"Incorrect encodings\",it1.hasNext(),it2.hasNext());   while (it1.hasNext()) {     it2=certFs[1].getCertPathEncodings();     String s1=it1.next();     boolean yesNo=false;     while (it2.hasNext()) {       if (s1.equals(it2.next())) {         yesNo=true;         break;       }     }     assertTrue(\"Encoding: \".concat(s1).concat(\" does not define for certF2 CertificateFactory\"),yesNo);   }   it1=certFs[0].getCertPathEncodings();   it2=certFs[2].getCertPathEncodings();   assertEquals(\"Incorrect encodings\",it1.hasNext(),it2.hasNext());   while (it1.hasNext()) {     it2=certFs[2].getCertPathEncodings();     String s1=it1.next();     boolean yesNo=false;     while (it2.hasNext()) {       if (s1.equals(it2.next())) {         yesNo=true;         break;       }     }     assertTrue(\"Encoding: \".concat(s1).concat(\" does not define for certF3 CertificateFactory\"),yesNo);   } } "
"protected final void copyNS(final int nodeID,SerializationHandler handler,boolean inScope) throws SAXException {   if (m_namespaceDeclSetElements != null && m_namespaceDeclSetElements.size() == 1 && m_namespaceDeclSets != null && ((SuballocatedIntVector)m_namespaceDeclSets.elementAt(0)).size() == 1)   return;   SuballocatedIntVector nsContext=null;   int nextNSNode;   if (inScope) {     nsContext=findNamespaceContext(nodeID);     if (nsContext == null || nsContext.size() < 1)     return;  else     nextNSNode=makeNodeIdentity(nsContext.elementAt(0));   }  else   nextNSNode=getNextNamespaceNode2(nodeID);   int nsIndex=1;   while (nextNSNode != DTM.NULL) {     int eType=_exptype2(nextNSNode);     String nodeName=m_extendedTypes[eType].getLocalName();     int dataIndex=m_dataOrQName.elementAt(nextNSNode);     if (dataIndex < 0) {       dataIndex=-dataIndex;       dataIndex=m_data.elementAt(dataIndex + 1);     }     String nodeValue=(String)m_values.elementAt(dataIndex);     handler.namespaceAfterStartElement(nodeName,nodeValue);     if (inScope) {       if (nsIndex < nsContext.size()) {         nextNSNode=makeNodeIdentity(nsContext.elementAt(nsIndex));         nsIndex++;       }  else       return;     }  else     nextNSNode=getNextNamespaceNode2(nextNSNode);   } } "
"public static Event35Id.Builder newBuilder(Event35Id.Builder other){   return new Event35Id.Builder(other); } "
"public void removeSession(Session session){   SingleSignOnSessionKey key=new SingleSignOnSessionKey(session);   sessionKeys.remove(key); } "
"public ElemTemplateElement appendChildElem(ElemTemplateElement newChild){   int type=((ElemTemplateElement)newChild).getXSLToken(); switch (type) { case Constants.ELEMNAME_ATTRIBUTE:     break; default :   error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()}); } return super.appendChild(newChild); } "
"private boolean extractAndWriteToken(StringBuffer resultData,StringBuffer tokenQueue){   boolean written=false;   if (tokenQueue.length() > 0) {     String key=tokenQueue.substring(1);     String replaceValue=(String)getTokens().get(key);     if (replaceValue == null || replaceValue.trim().length() == 0) {       replaceValue=tokenQueue.append(TOKEN_MARKER).toString();     }     resultData.append(replaceValue);     tokenQueue.delete(0,tokenQueue.length());     written=true;   }   return written; } "
"public void paintCheckBoxBorder(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBorder(context,g,x,y,w,h,null); } "
"SOAPMessage toSOAPMessage() throws SOAPBindingException {   return Utils.DocumentToSOAPMessage(toDocument(true)); } "
"public SubjectConfirmation createSubjectConfirmation(Element elem) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION,elem);   if (obj == null) {     return new SubjectConfirmationImpl(elem);   }  else {     return (SubjectConfirmation)obj;   } } "
"public CertificateVerifier(CertificateVerifier verifier){   this.verifier=verifier; } "
"public InvalidAttributeNameException(String rbName,String errorCode,Object[] args){   super(rbName,errorCode,args); } "
"@Override public synchronized void mark(int idx) throws IOException {   try {     in.mark(idx);   }  catch (  IOException e) {     handleIOException(e);   } } "
"public int read() throws IOException {   if (pos >= 0) {     int cur=pos % BUFF_SIZE;     if (cur < bar) {       pos++;       return buff[cur];     }     if (cur != end) {       buff[cur]=inStream.read();       bar=cur + 1;       pos++;       return buff[cur];     }  else {       pos=-1;     }   }   return inStream.read(); } "
"@Override public JsonGenerator useDefaultPrettyPrinter(){   return this; } "
"public void addAttributes(AttributeSet attributes){   Enumeration names=attributes.getAttributeNames();   while (names.hasMoreElements()) {     Object name=names.nextElement();     addAttribute(name,attributes.getAttribute(name));   } } "
"public void rewind(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"rewind\",_opsClass);   DynAnyOperations $self=(DynAnyOperations)$so.servant;   try {     $self.rewind();   }   finally {     _servant_postinvoke($so);   } } "
"public static List<Challenge> parseChallenges(Headers responseHeaders,String challengeHeader){   List<Challenge> result=new ArrayList<>();   for (int i=0, size=responseHeaders.size(); i < size; i++) {     if (!challengeHeader.equalsIgnoreCase(responseHeaders.name(i))) {       continue;     }     String value=responseHeaders.value(i);     int pos=0;     while (pos < value.length()) {       int tokenStart=pos;       pos=HeaderParser.skipUntil(value,pos,\" \");       String scheme=value.substring(tokenStart,pos).trim();       pos=HeaderParser.skipWhitespace(value,pos);       if (!value.regionMatches(true,pos,\"realm=\\\"\",0,\"realm=\\\"\".length())) {         break;       }       pos+=\"realm=\\\"\".length();       int realmStart=pos;       pos=HeaderParser.skipUntil(value,pos,\"\\\"\");       String realm=value.substring(realmStart,pos);       pos++;       pos=HeaderParser.skipUntil(value,pos,\",\");       pos++;       pos=HeaderParser.skipWhitespace(value,pos);       result.add(new Challenge(scheme,realm));     }   }   return result; } "
"public static Map<String,File> filesInDirectory(File dir,String regex,boolean recursively){   return filesInDirectory(dir,Pattern.compile(regex),recursively); } "
"public void testGcdSecondZero(){   byte aBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};   byte bBytes[]={0};   int aSign=1;   int bSign=1;   byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.gcd(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public DTMIterator createDTMIterator(String xpathString,PrefixResolver presolver){   return m_dtmManager.createDTMIterator(xpathString,presolver); } "
"protected static void processCRLB2(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {   IssuingDistributionPoint idp=null;   try {     idp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(crl,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));   }  catch (  Exception e) {     throw new AnnotatedException(\"Issuing distribution point extension could not be decoded.\",e);   }   if (idp != null) {     if (idp.getDistributionPoint() != null) {       DistributionPointName dpName=IssuingDistributionPoint.getInstance(idp).getDistributionPoint();       List names=new ArrayList();       if (dpName.getType() == DistributionPointName.FULL_NAME) {         GeneralName[] genNames=GeneralNames.getInstance(dpName.getName()).getNames();         for (int j=0; j < genNames.length; j++) {           names.add(genNames[j]);         }       }       if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {         ASN1EncodableVector vec=new ASN1EncodableVector();         try {           Enumeration e=ASN1Sequence.getInstance(ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded())).getObjects();           while (e.hasMoreElements()) {             vec.add((ASN1Encodable)e.nextElement());           }         }  catch (        IOException e) {           throw new AnnotatedException(\"Could not read CRL issuer.\",e);         }         vec.add(dpName.getName());         names.add(new GeneralName(X509Name.getInstance(new DERSequence(vec))));       }       boolean matches=false;       if (dp.getDistributionPoint() != null) {         dpName=dp.getDistributionPoint();         GeneralName[] genNames=null;         if (dpName.getType() == DistributionPointName.FULL_NAME) {           genNames=GeneralNames.getInstance(dpName.getName()).getNames();         }         if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {           if (dp.getCRLIssuer() != null) {             genNames=dp.getCRLIssuer().getNames();           }  else {             genNames=new GeneralName[1];             try {               genNames[0]=new GeneralName(new X509Name((ASN1Sequence)ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded())));             }  catch (            IOException e) {               throw new AnnotatedException(\"Could not read certificate issuer.\",e);             }           }           for (int j=0; j < genNames.length; j++) {             Enumeration e=ASN1Sequence.getInstance(genNames[j].getName().toASN1Primitive()).getObjects();             ASN1EncodableVector vec=new ASN1EncodableVector();             while (e.hasMoreElements()) {               vec.add((ASN1Encodable)e.nextElement());             }             vec.add(dpName.getName());             genNames[j]=new GeneralName(new X509Name(new DERSequence(vec)));           }         }         if (genNames != null) {           for (int j=0; j < genNames.length; j++) {             if (names.contains(genNames[j])) {               matches=true;               break;             }           }         }         if (!matches) {           throw new AnnotatedException(\"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.\");         }       }  else {         if (dp.getCRLIssuer() == null) {           throw new AnnotatedException(\"Either the cRLIssuer or the distributionPoint field must \" + \"be contained in DistributionPoint.\");         }         GeneralName[] genNames=dp.getCRLIssuer().getNames();         for (int j=0; j < genNames.length; j++) {           if (names.contains(genNames[j])) {             matches=true;             break;           }         }         if (!matches) {           throw new AnnotatedException(\"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.\");         }       }     }     BasicConstraints bc=null;     try {       bc=BasicConstraints.getInstance(CertPathValidatorUtilities.getExtensionValue((X509Extension)cert,BASIC_CONSTRAINTS));     }  catch (    Exception e) {       throw new AnnotatedException(\"Basic constraints extension could not be decoded.\",e);     }     if (cert instanceof X509Certificate) {       if (idp.onlyContainsUserCerts() && (bc != null && bc.isCA())) {         throw new AnnotatedException(\"CA Cert CRL only contains user certificates.\");       }       if (idp.onlyContainsCACerts() && (bc == null || !bc.isCA())) {         throw new AnnotatedException(\"End CRL only contains CA certificates.\");       }     }     if (idp.onlyContainsAttributeCerts()) {       throw new AnnotatedException(\"onlyContainsAttributeCerts boolean is asserted.\");     }   } } "
"public JKColumnFilter(final JKTableColumn column){   this.column=column; } "
"public com.sun.identity.saml2.jaxb.metadata.RoleDescriptorElement createRoleDescriptorElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.RoleDescriptorElementImpl(); } "
"private static boolean isConfigAcceptable(TaskBackendCfg config,List<LocalizableMessage> unacceptableReasons,String taskBackingFile){   boolean configIsAcceptable=true;   try {     String tmpBackingFile=config.getTaskBackingFile();     if (taskBackingFile == null || !taskBackingFile.equals(tmpBackingFile)) {       File f=getFileForPath(tmpBackingFile);       if (f.exists()) {         if (taskBackingFile != null) {           unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_EXISTS.get(tmpBackingFile));           configIsAcceptable=false;         }       }  else {         File p=f.getParentFile();         if (p == null) {           unacceptableReasons.add(ERR_TASKBE_INVALID_BACKING_FILE_PATH.get(tmpBackingFile));           configIsAcceptable=false;         }  else         if (!p.exists()) {           unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_MISSING_PARENT.get(p.getPath(),tmpBackingFile));           configIsAcceptable=false;         }  else         if (!p.isDirectory()) {           unacceptableReasons.add(ERR_TASKBE_BACKING_FILE_PARENT_NOT_DIRECTORY.get(p.getPath(),tmpBackingFile));           configIsAcceptable=false;         }       }     }   }  catch (  Exception e) {     logger.traceException(e);     unacceptableReasons.add(ERR_TASKBE_ERROR_GETTING_BACKING_FILE.get(getExceptionMessage(e)));     configIsAcceptable=false;   }   return configIsAcceptable; } "
"public void write(String s) throws IOException {   int n=s.length();   for (int i=0; i < n; i++) {     m_os.write(s.charAt(i));   } } "
"public void testClearBitPositiveInside1(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=20;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-31,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"private void invoke(String methodName) throws LoginException {   for (int i=0; i < moduleStack.length; i++) {     ModuleInfo info=moduleStack[i];     LoginModuleControlFlag controlFlag=info.entry.getControlFlag();     AuditRequestContext.putProperty(LOGIN_MODULE_CONTROL_FLAG,getControlFlagAsString(controlFlag));     try {       int mIndex=0;       Method[] methods=null;       if (info.module != null) {         methods=info.module.getClass().getMethods();       }  else {         Class c=Class.forName(info.entry.getLoginModuleName(),true,Thread.currentThread().getContextClassLoader());         Constructor constructor=c.getConstructor(PARAMS);         Object[] args={};         info.module=constructor.newInstance(args);         methods=info.module.getClass().getMethods();         for (mIndex=0; mIndex < methods.length; mIndex++) {           if (methods[mIndex].getName().equals(INIT_METHOD))           break;         }         Object[] initArgs={subject,callbackHandler,state,info.entry.getOptions()};         methods[mIndex].invoke(info.module,initArgs);       }       for (mIndex=0; mIndex < methods.length; mIndex++) {         if (methods[mIndex].getName().equals(methodName))         break;       }       Object[] args={};       boolean status=(Boolean)methods[mIndex].invoke(info.module,args);       if (status) {         if (!requiredExceptionHolder.hasException() && controlFlag == LoginModuleControlFlag.SUFFICIENT && (methodName.equals(LOGIN_METHOD) || methodName.equals(COMMIT_METHOD))) {           if (debug.messageEnabled()) {             debug.message(methodName + \" SUFFICIENT success\");           }           return;         }         if (debug.messageEnabled()) {           debug.message(methodName + \" success\");         }         success=true;       }  else {         if (debug.messageEnabled()) {           debug.message(methodName + \" ignored\");         }       }     }  catch (    NoSuchMethodException nsme) {       throw new LoginException(\"unable to instantiate LoginModule, module, because it does \" + \"not provide a no-argument constructor:\" + info.entry.getLoginModuleName());     } catch (    InstantiationException ie) {       throw new LoginException(\"unable to instantiate LoginModule: \" + ie.getMessage());     } catch (    ClassNotFoundException cnfe) {       throw new LoginException(\"unable to find LoginModule class: \" + cnfe.getMessage());     } catch (    IllegalAccessException iae) {       throw new LoginException(\"unable to access LoginModule: \" + iae.getMessage());     } catch (    InvocationTargetException ite) {       if (ite.getTargetException() instanceof Error) {         if (debug.messageEnabled()) {           debug.message(\"LoginContext.invoke(): Handling expected java.lang.Error\");         }         throw (Error)ite.getTargetException();       }       LoginException le=null;       if (ite.getTargetException() instanceof LoginException) {         le=(LoginException)ite.getTargetException();       }  else       if (ite.getTargetException() instanceof SecurityException) {         le=new LoginException(\"Security Exception\");         if (debug.messageEnabled()) {           debug.message(\"original security exception with detail msg \" + \"replaced by new exception with empty detail msg\");           debug.message(\"original security exception: \" + ite.getTargetException().toString());         }       }  else {         StringWriter sw=new StringWriter();         ite.getTargetException().printStackTrace(new PrintWriter(sw));         sw.flush();         le=new LoginException(sw.toString());       }       if (debug.messageEnabled()) {         debug.message(String.format(\"Method %s %s failure.\",methodName,controlFlag));       }       if (controlFlag == LoginModuleControlFlag.OPTIONAL || controlFlag == LoginModuleControlFlag.SUFFICIENT) {         optionalExceptionHolder.setException(le);       }  else {         requiredExceptionHolder.setException(le);         if (controlFlag == LoginModuleControlFlag.REQUISITE && (methodName.equals(LOGIN_METHOD) || methodName.equals(COMMIT_METHOD))) {           throw requiredExceptionHolder.getException();         }       }     }  finally {       AuditRequestContext.removeProperty(LOGIN_MODULE_CONTROL_FLAG);     }   }   if (requiredExceptionHolder.hasException()) {     throw requiredExceptionHolder.getException();   }  else   if (success == false && optionalExceptionHolder.hasException()) {     throw optionalExceptionHolder.getException();   }  else   if (success == false) {     throw new LoginException(\"Login Failure: all modules ignored\");   } } "
"ParentTreeHandler(PdfStructTreeRoot structTreeRoot){   this.structTreeRoot=structTreeRoot;   parentTree=new PdfNumTree(structTreeRoot.getDocument().getCatalog(),PdfName.ParentTree);   registerAllMcrs(); } "
"public static ImageData createGifFrame(URL url,int frame){   byte[] imageType=readImageType(url);   if (imageTypeIs(imageType,gif)) {     GifImageData image=new GifImageData(url);     GifImageHelper.processImage(image,frame - 1);     return image.getFrames().get(frame - 1);   }   throw new IllegalArgumentException(\"GIF image expected.\"); } "
"public String toHexString(){   if (isEmpty()) {     return \"\";   }   StringBuilder builder=new StringBuilder(length * 2);   builder.append(StaticUtils.byteToHex(buffer[offset]));   for (int i=1; i < length; i++) {     builder.append(StaticUtils.byteToHex(buffer[offset + i]));   }   return builder.toString(); } "
"static public boolean validateCertificate(X509Certificate cert,boolean checkCAStatus){   String method=\"validateCertificate : \";   boolean certgood=true;   try {     Vector crls=new Vector();     X509CRL crl=AMCRLStore.getCRL(ldapParams,cert,crlSearchAttr);     if (crl != null) {       crls.add(crl);     }     if (debug.messageEnabled()) {       debug.message(method + \" crls size = \" + crls.size());       if (crls.size() > 0) {         debug.message(method + \"CRL = \" + crls.toString());       }  else {         debug.message(method + \"NO CRL found.\");       }     }     AMCertPath certpath=new AMCertPath(crls);     X509Certificate certs[]={cert};     if (!certpath.verify(certs,true,false)) {       debug.error(method + \"CertPath:verify failed.\");       return certgood=false;     }   }  catch (  Exception e) {     debug.error(method + \"verify failed.\",e);     return certgood=false;   }   if ((checkCAStatus == true) && (AMCertStore.isRootCA(cert) == false)) {     X509Certificate caCert=AMCertStore.getIssuerCertificate(ldapParams,cert,crlSearchAttr);     certgood=validateCertificate(caCert,checkCAStatus);   }   return certgood; } "
"public SnsPushResponseUpdater(SnsClientFactory clientFactory){   this.clientFactory=clientFactory; } "
"static final int nextSecondarySeed(){   int r;   Thread t=Thread.currentThread();   if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {     r^=r << 13;     r^=r >>> 17;     r^=r << 5;   }  else   if ((r=java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)   r=1;   UNSAFE.putInt(t,SECONDARY,r);   return r; } "
"public Separator(char character,int quote,int escape){   this.character=character;   this.quote=quote;   this.escape=escape; } "
"void bindAuditFilter(Filter filter){   auditFilter.setDelegate(filter); } "
"protected void installNormalBorders(JComponent c){   Component[] components=c.getComponents();   for (  Component component : components) {     setBorderToNormal(component);   } } "
"public IndirectionException(int offset){   super(\"\",0,org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);   this.offset=offset; } "
"public void reduce_nets_of_route_items(){   int reduce_loop_counter=0;   while (reduce_nets_of_route_items_changed()) {     if (reduce_loop_counter++ > 100) {       userPrintln(\"reduce_nets_of_route_items: Excessive loops\");       break;     }   } } "
"public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){   this.keyidentifier=new DEROctetString(keyIdentifier);   this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());   this.certserno=new ASN1Integer(serialNumber); } "
"public ECParameterSpec(EllipticCurve curve,ECPoint g,BigInteger n,int h){   if (curve == null) {     throw new NullPointerException(\"curve is null\");   }   if (g == null) {     throw new NullPointerException(\"g is null\");   }   if (n == null) {     throw new NullPointerException(\"n is null\");   }   if (n.signum() != 1) {     throw new IllegalArgumentException(\"n is not positive\");   }   if (h <= 0) {     throw new IllegalArgumentException(\"h is not positive\");   }   this.curve=curve;   this.g=g;   this.n=n;   this.h=h; } "
"public void signXML(String certAlias) throws SAMLException {   FSUtils.debug.message(\"FSNameIdentifierMappingResponse.signXML\");   if (signed) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSNameIdentifierMappingResponse.signXML:\" + \" the response is already signed.\");     }     throw new SAMLResponderException(FSUtils.BUNDLE_NAME,\"alreadySigned\",null);   }   if (certAlias == null || certAlias.length() < 1) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSNameIdentifierMappingResponse.signXML:\" + \" null certAlias\");     }     throw new SAMLResponderException(FSUtils.BUNDLE_NAME,\"cannotFindCertAlias\",null);   }   try {     XMLSignatureManager manager=XMLSignatureManager.getInstance();     signatureString=manager.signXML(this.toXMLString(true,true),certAlias,(String)null,IFSConstants.RESPONSE_ID,this.getResponseID(),false);     signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();     signed=true;   }  catch (  Exception e) {     FSUtils.debug.error(\"FSNameIdentifierMappingResponse.signXML: \" + \"unable to sign\",e);     throw new SAMLResponderException(FSUtils.BUNDLE_NAME,\"signFailed\",null);   } } "
"public void handleButton3Request(RequestInvocationEvent event){   IDRepoViewBean vb=(IDRepoViewBean)getViewBean(IDRepoViewBean.class);   backTrail();   passPgSessionMap(vb);   vb.forwardTo(getRequestContext()); } "
"public void testGetCertificateChain(){   createParams(false,false);   KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);   Certificate[] res=ksPKE.getCertificateChain();   assertEquals(\"Incorrect chain length\",testChain.length,res.length);   for (int i=0; i < res.length; i++) {     assertEquals(\"Incorrect chain element: \".concat(Integer.toString(i)),testChain[i],res[i]);   } } "
"protected PDLOverrideSupported(int value){   super(value); } "
"public PlaLineInt plaline_last_prev(){   return plaline(plaline_len(-2)); } "
"public Entry filterEntry(Set<String> attrNameList,boolean omitValues,boolean omitReal,boolean omitVirtual){   final AttributeType ocType=CoreSchema.getObjectClassAttributeType();   Map<ObjectClass,String> objectClassesCopy;   Map<AttributeType,List<Attribute>> userAttrsCopy;   Map<AttributeType,List<Attribute>> operationalAttrsCopy;   if (attrNameList == null || attrNameList.isEmpty()) {     userAttrsCopy=new LinkedHashMap<>(userAttributes.size());     operationalAttrsCopy=new LinkedHashMap<>(0);     if (omitReal) {       objectClassesCopy=new LinkedHashMap<>(0);     }  else     if (omitValues) {       objectClassesCopy=new LinkedHashMap<>(0);       userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType)));     }  else {       objectClassesCopy=new LinkedHashMap<>(objectClasses);       Attribute ocAttr=getObjectClassAttribute();       if (ocAttr != null) {         userAttrsCopy.put(ocType,newArrayList(ocAttr));       }     }     deepCopy(userAttributes,userAttrsCopy,omitValues,true,omitReal,omitVirtual,true);   }  else {     if (omitReal || omitValues) {       objectClassesCopy=new LinkedHashMap<>(0);     }  else {       objectClassesCopy=new LinkedHashMap<>(objectClasses.size());     }     userAttrsCopy=new LinkedHashMap<>(userAttributes.size());     operationalAttrsCopy=new LinkedHashMap<>(operationalAttributes.size());     for (    String attrName : attrNameList) {       if (\"*\".equals(attrName)) {         if (!omitReal) {           if (omitValues) {             userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType)));           }  else {             objectClassesCopy.putAll(objectClasses);             Attribute ocAttr=getObjectClassAttribute();             if (ocAttr != null) {               userAttrsCopy.put(ocType,newArrayList(ocAttr));             }           }         }         deepCopy(userAttributes,userAttrsCopy,omitValues,true,omitReal,omitVirtual,true);         continue;       }  else       if (\"+\".equals(attrName)) {         deepCopy(operationalAttributes,operationalAttrsCopy,omitValues,true,omitReal,omitVirtual,true);         continue;       }       final AttributeDescription attrDesc;       try {         attrDesc=AttributeDescription.valueOf(attrName);       }  catch (      LocalizedIllegalArgumentException e) {         logger.traceException(e);         continue;       }       attrName=attrDesc.getNameOrOID();       final AttributeType attrType=attrDesc.getAttributeType();       if (attrType.isPlaceHolder()) {         for (        Map.Entry<AttributeType,List<Attribute>> e : userAttributes.entrySet()) {           AttributeType t=e.getKey();           if (t.hasNameOrOID(attrType.getNameOrOID())) {             mergeAttributeLists(e.getValue(),userAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);             continue;           }         }         for (        Map.Entry<AttributeType,List<Attribute>> e : operationalAttributes.entrySet()) {           AttributeType t=e.getKey();           if (t.hasNameOrOID(attrType.getNameOrOID())) {             mergeAttributeLists(e.getValue(),operationalAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);             continue;           }         }       }  else {         if (attrType.isObjectClass()) {           if (!omitReal) {             if (omitValues) {               userAttrsCopy.put(ocType,newArrayList(Attributes.empty(ocType,attrName)));             }  else {               Attribute ocAttr=getObjectClassAttribute();               if (ocAttr != null) {                 if (!attrName.equals(ocAttr.getAttributeDescription().getNameOrOID())) {                   AttributeBuilder builder=new AttributeBuilder(AttributeDescription.create(attrName,ocType));                   builder.addAll(ocAttr);                   ocAttr=builder.toAttribute();                 }                 userAttrsCopy.put(ocType,newArrayList(ocAttr));               }             }           }         }  else {           List<Attribute> attrList=getUserAttribute(attrType);           if (!attrList.isEmpty()) {             mergeAttributeLists(attrList,userAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);           }  else {             attrList=getOperationalAttribute(attrType);             if (!attrList.isEmpty()) {               mergeAttributeLists(attrList,operationalAttrsCopy,attrDesc,omitValues,omitReal,omitVirtual);             }           }         }       }     }   }   return new Entry(dn,objectClassesCopy,userAttrsCopy,operationalAttrsCopy); } "
"public void flush() throws IOException {   if (prefix_ != -1)   bf_.writeBits(prefix_,numBits_);   bf_.writeBits(endOfInfo_,numBits_);   bf_.flush(); } "
"public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,byte[] content) throws ParseException {   if (request == null || content == null || contentType == null)   throw new NullPointerException(\"null Parameters\");   SIPRequest sipRequest=(SIPRequest)request;   SIPResponse sipResponse=sipRequest.createResponse(statusCode);   sipResponse.setHeader((ContentType)contentType);   sipResponse.setMessageContent(content);   if (server != null) {     sipResponse.setHeader(server);   }   return sipResponse; } "
"final boolean isShared(){   return nextWaiter == SHARED; } "
"private void parseQuery(Node child) throws SAMLException {   NamedNodeMap nm=child.getAttributes();   int len=nm.getLength();   String attrName;   String attrValue;   Attr attr;   boolean found=false;   for (int j=0; j < len; j++) {     attr=(Attr)nm.item(j);     attrName=attr.getLocalName();     if ((attrName != null) && (attrName.equals(\"type\"))) {       attrValue=attr.getNodeValue();       if (attrValue.equals(\"AuthenticationQueryType\")) {         if (contentType != NOT_SUPPORTED) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"Request(Element): should\" + \" contain only one AuthenticationQuery.\");           }           throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,\"wrongInput\",null);         }         contentType=AUTHENTICATION_QUERY;         query=new AuthenticationQuery((Element)child);       }  else       if (attrValue.equals(\"AuthorizationDecisionQueryType\")) {         if (contentType != NOT_SUPPORTED) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"Request(Element): should \" + \"contain one \" + \"AuthorizationDecisionQuery.\");           }           throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,\"wrongInput\",null);         }         contentType=AUTHORIZATION_DECISION_QUERY;         query=new AuthorizationDecisionQuery((Element)child);       }  else       if (attrValue.equals(\"AttributeQueryType\")) {         if (contentType != NOT_SUPPORTED) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"Request(Element): should \" + \"contain one AttributeQuery.\");           }           throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,\"wrongInput\",null);         }         contentType=ATTRIBUTE_QUERY;         query=new AttributeQuery((Element)child);       }  else {         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"Request(Element): This type of\" + \" \" + attrName + \" is not supported.\");         }         throw new SAMLResponderException(FSUtils.BUNDLE_NAME,\"queryNotSupported\",null);       }       found=true;       break;     }   }   if (!found) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"Request(Element): missing\" + \" xsi:type definition in \" + child.getLocalName());     }     throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,\"wrongInput\",null);   } } "
"private boolean isDefaultScript(ScriptConfiguration scriptConfig){   try {     int usageCount=getUsageCount(getScriptingServiceGlobalConfig(),getDefaultScriptSearchString(scriptConfig.getId()));     return usageCount > 0;   }  catch (  SSOException|SMSException e) {     logger.error(\"isDefaultScript caught exception with script {} UUID {}\",scriptConfig.getName(),scriptConfig.getId(),e);     return false;   } } "
"public void test_readWhenCharacterSpansBuffer(){   final byte[] suffix={(byte)0x93,(byte)0xa1,(byte)0x8c,(byte)0xb4,(byte)0x97,(byte)0x43,(byte)0x88,(byte)0xea,(byte)0x98,(byte)0x59};   final char[] decodedSuffix={(char)0x85e4,(char)0x539f,(char)0x4f51,(char)0x4e00,(char)0x90ce};   final int prefixLength=8189;   byte[] bytes=new byte[prefixLength + 10];   Arrays.fill(bytes,(byte)' ');   System.arraycopy(suffix,0,bytes,prefixLength,suffix.length);   ByteArrayInputStream is=new ByteArrayInputStream(bytes);   try {     InputStreamReader isr=new InputStreamReader(is,\"SHIFT_JIS\");     char[] chars=new char[8192];     int at=0;     for (; ; ) {       int amt=isr.read(chars);       if (amt <= 0) {         break;       }       for (int i=0; i < amt; i++) {         char c=chars[i];         if (at < prefixLength) {           if (c != ' ') {             fail(\"Found bad prefix character \" + (int)c + \" at \"+ at);           }         }  else {           char decoded=decodedSuffix[at - prefixLength];           if (c != decoded) {             fail(\"Found mismatched character \" + (int)c + \" at \"+ at);           }         }         at++;       }     }   }  catch (  IOException ex) {     throw new RuntimeException(\"unexpected exception\",ex);   } } "
"public static NSObject parse(Document doc) throws PropertyListFormatException, IOException, ParseException {   DocumentType docType=doc.getDoctype();   if (docType == null) {     if (!doc.getDocumentElement().getNodeName().equals(\"plist\")) {       throw new UnsupportedOperationException(\"The given XML document is not a property list.\");     }   }  else   if (!docType.getName().equals(\"plist\")) {     throw new UnsupportedOperationException(\"The given XML document is not a property list.\");   }   Node rootNode;   if (doc.getDocumentElement().getNodeName().equals(\"plist\")) {     List<Node> rootNodes=filterElementNodes(doc.getDocumentElement().getChildNodes());     if (rootNodes.isEmpty()) {       throw new PropertyListFormatException(\"The given XML property list has no root element!\");     }  else     if (rootNodes.size() == 1) {       rootNode=rootNodes.get(0);     }  else {       throw new PropertyListFormatException(\"The given XML property list has more than one root element!\");     }   }  else {     rootNode=doc.getDocumentElement();   }   return parseObject(rootNode); } "
"ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){   this.m=m; } "
"CrestNoPathDetailsAuditor(Debug debug,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,Context context,Request request){   super(debug,auditEventPublisher,auditEventFactory,context,request); } "
"public void write(int c) throws IOException { synchronized (lock) {     ensureOpen();     if (nextChar >= nChars)     flushBuffer();     cb[nextChar++]=(char)c;   } } "
"public String toString(){   StringBuffer tempSpot=new StringBuffer(\"[\");   for (int counter=0, maxCounter=getPathCount(); counter < maxCounter; counter++) {     if (counter > 0)     tempSpot.append(\", \");     tempSpot.append(getPathComponent(counter));   }   tempSpot.append(\"]\");   return tempSpot.toString(); } "
"public final TreeSet<AwtreeObject> find_overlap_objects(ShapeConvex p_shape,int p_layer,NetNosList p_ignore_net_nos){   TreeSet<AwtreeObject> risul=new TreeSet<AwtreeObject>();   Collection<AwtreeFindEntry> tree_entries=find_overlap_tree_entries(p_shape,p_layer,p_ignore_net_nos);   for (  AwtreeFindEntry curr_entry : tree_entries)   risul.add(curr_entry.object);   return risul; } "
"public boolean isUserQuestionEnabled(String realmName){   Set values=getAttributeValues(realmName,PW_RESET_PERSONAL_ANSWER,AMAdminConstants.PW_RESET_SERVICE);   return ((String)AMAdminUtils.getValue(values)).equalsIgnoreCase(\"true\"); } "
"@Override public synchronized String toString(){   if (elementCount == 0) {     return \"[]\";   }   int length=elementCount - 1;   StringBuilder buffer=new StringBuilder(elementCount * 16);   buffer.append('[');   for (int i=0; i < length; i++) {     if (elementData[i] == this) {       buffer.append(\"(this Collection)\");     }  else {       buffer.append(elementData[i]);     }     buffer.append(\", \");   }   if (elementData[length] == this) {     buffer.append(\"(this Collection)\");   }  else {     buffer.append(elementData[length]);   }   buffer.append(']');   return buffer.toString(); } "
"public Set createPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {   Iterator iter=peopleContainerNames.iterator();   Set peopleContainers=new HashSet();   while (iter.hasNext()) {     StringBuffer peopleContainerDNSB=new StringBuffer();     peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append(\"=\").append((String)iter.next()).append(\",\").append(super.entryDN);     AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());     peopleContainerImpl.create();     peopleContainers.add(peopleContainerImpl);   }   return peopleContainers; } "
"protected static byte[] valueToBuffer(int size){   byte[] buffer=new byte[4];   buffer[0]=(byte)((size & 0x0FE00000) >> 21);   buffer[1]=(byte)((size & 0x001FC000) >> 14);   buffer[2]=(byte)((size & 0x00003F80) >> 7);   buffer[3]=(byte)(size & 0x0000007F);   return buffer; } "
"protected void validateUserStatusEntry(Map data){   Set h=(Set)data.get(ATTR_USER_STATUS);   if ((h != null) && (!h.isEmpty())) {     String tmp=(String)h.iterator().next();     if (tmp.equalsIgnoreCase(STRING_ACTIVE)) {       tmp=STRING_ACTIVE;     }  else {       tmp=STRING_INACTIVE;     }     h.clear();     h.add(tmp);     data.put(ATTR_USER_STATUS,h);   } } "
"@Override public synchronized boolean allocate(){   if (state == PooledObjectState.IDLE) {     state=PooledObjectState.ALLOCATED;     lastBorrowTime=System.currentTimeMillis();     lastUseTime=lastBorrowTime;     borrowedCount++;     if (logAbandoned) {       borrowedBy=new AbandonedObjectCreatedException();     }     return true;   }  else   if (state == PooledObjectState.EVICTION) {     state=PooledObjectState.EVICTION_RETURN_TO_HEAD;     return false;   }   return false; } "
"public boolean removeAudience(java.lang.String audience){   if ((audience != null) && !(audience.length() == 0)) {     _audience.remove(audience);     return true;   }  else   return false; } "
"public XMLReaderAdapter(XMLReader xmlReader){   setup(xmlReader); } "
"public SAML2ConfigBuilder customAttributeStatementsProviderClassName(String customAttributeStatementsProviderClassName){   this.customAttributeStatementsProviderClassName=customAttributeStatementsProviderClassName;   return this; } "
"private final int _decodeExplicitLength(int lowBits) throws IOException {   if (lowBits == 31) {     return -1;   }   if (lowBits <= 23) {     return lowBits;   } switch (lowBits - 24) { case 0:     return _decode8Bits(); case 1:   return _decode16Bits(); case 2: return _decode32Bits(); case 3: long l=_decode64Bits(); if (l < 0 || l > MAX_INT_L) { throw _constructError(\"Illegal length for \" + getCurrentToken() + \": \"+ l); } return (int)l; } throw _constructError(\"Invalid length for \" + getCurrentToken() + \": 0x\"+ Integer.toHexString(lowBits)); } "
"public static void main(final String[] args){   DOMTestCase.doMain(attrsetvaluenomodificationallowederrEE.class,args); } "
"public void test_addAttributeLjava_text_AttributedCharacterIterator$AttributeLjava_lang_Object(){   AttributedString as=new AttributedString(\"123\",new WeakHashMap());   as.addAttribute(AttributedCharacterIterator.Attribute.LANGUAGE,\"english\");   as.addAttribute(AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT,\"input method\");   as.addAttribute(AttributedCharacterIterator.Attribute.READING,\"reading\");   try {     as.addAttribute(null,new TreeSet());     fail(\"should throw NullPointerException\");   }  catch (  NullPointerException e) {   }   try {     as.addAttribute(null,null);     fail(\"should throw NullPointerException\");   }  catch (  NullPointerException e) {   } } "
"protected File file(){   if (pathname == null || pathname.length() == 0) {     return null;   }   File file=new File(pathname);   if (!file.isAbsolute()) {     Context context=getContext();     ServletContext servletContext=context.getServletContext();     File tempdir=(File)servletContext.getAttribute(ServletContext.TEMPDIR);     if (tempdir != null) {       file=new File(tempdir,pathname);     }   }   return file; } "
"public static void writeLines(File file,Collection<?> lines) throws IOException {   writeLines(file,null,lines,null,false); } "
"public SocketException(String detailMessage,Throwable cause){   super(detailMessage,cause); } "
"public static String obfuscate(String s){   StringBuilder buf=new StringBuilder();   byte[] b=s.getBytes();   buf.append(__OBFUSCATE);   for (int i=0; i < b.length; i++) {     byte b1=b[i];     byte b2=b[s.length() - (i + 1)];     int i1=127 + b1 + b2;     int i2=127 + b1 - b2;     int i0=i1 * 256 + i2;     String x=Integer.toString(i0,36);     buf.append(new String(new char[4 - x.length()]).replace(\"\\0\",\"0\"));     buf.append(x);   }   return buf.toString(); } "
"public boolean isCanceled(){   return isCanceled; } "
"public synchronized void remove(String item){   int index=items.indexOf(item);   if (index < 0) {     throw new IllegalArgumentException(\"item \" + item + \" not found in list\");   }  else {     remove(index);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeprocessinginstructionnodeattributes.class,args); } "
"private static void isFractionalConfigAcceptable(ReplicationDomainCfg configuration) throws ConfigException {   FractionalConfig newFractionalConfig=FractionalConfig.toFractionalConfig(configuration);   if (!newFractionalConfig.isFractional()) {     return;   }   Map<String,Set<String>> newFractionalSpecificClassesAttributes=newFractionalConfig.getFractionalSpecificClassesAttributes();   Set<String> newFractionalAllClassesAttributes=newFractionalConfig.getFractionalAllClassesAttributes();   Schema schema=DirectoryServer.getSchema();   int fractionalMode=newFractionalConfig.fractionalConfigToInt();   for (  String className : newFractionalSpecificClassesAttributes.keySet()) {     ObjectClass fractionalClass=schema.getObjectClass(className);     if (fractionalClass.isPlaceHolder()) {       throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_OBJECT_CLASS.get(className));     }     boolean isExtensibleObjectClass=fractionalClass.isExtensible();     Set<String> attributes=newFractionalSpecificClassesAttributes.get(className);     for (    String attrName : attributes) {       if (isFractionalProhibitedAttr(attrName)) {         throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_PROHIBITED_ATTRIBUTE.get(attrName));       }       AttributeType attributeType=schema.getAttributeType(attrName);       if (!attributeType.isPlaceHolder()) {         if (!isExtensibleObjectClass && fractionalMode == FractionalConfig.EXCLUSIVE_FRACTIONAL && !fractionalClass.isOptional(attributeType)) {           throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_NOT_OPTIONAL_ATTRIBUTE.get(attrName,className));         }       }  else {         throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName));       }     }   }   for (  String attrName : newFractionalAllClassesAttributes) {     if (isFractionalProhibitedAttr(attrName)) {       throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_PROHIBITED_ATTRIBUTE.get(attrName));     }     if (schema.getAttributeType(attrName) == null) {       throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName));     }   } } "
"public Parker(CyclicBarrier barrier,boolean absolute,long parkMillis){   this.barrier=barrier;   this.absolute=absolute;   this.amount=absolute ? parkMillis : parkMillis * 1000000; } "
"private void addObjectClassToSchemaFile(String schemaFile,ObjectClass objectClass,Set<ByteString> values,Set<ObjectClass> addedClasses,int depth) throws DirectoryException {   if (depth > 20) {     LocalizableMessage message=ERR_SCHEMA_MODIFY_CIRCULAR_REFERENCE_OC.get(objectClass.getNameOrOID());     throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);   }   if (addedClasses.contains(objectClass)) {     return;   }   for (  ObjectClass superiorClass : objectClass.getSuperiorClasses()) {     if (schemaFile.equals(getElementSchemaFile(superiorClass)) && !addedClasses.contains(superiorClass)) {       addObjectClassToSchemaFile(schemaFile,superiorClass,values,addedClasses,depth + 1);     }   }   values.add(ByteString.valueOfUtf8(objectClass.toString()));   addedClasses.add(objectClass); } "
"private void writeStatusContents(ServerDescriptor desc,int maxLabelWidth){   writeLabelValue(INFO_SERVER_STATUS_LABEL.get(),getStatus(desc).toString(),maxLabelWidth); } "
"boolean elementExists(String name){   return !\"unknown\".equals(name) && (elementHash.get(name) != null); } "
"public SmAuthStatus release(String parameter,String secret){   return SmAuthStatus.SMAUTH_SUCCESS; } "
"public static void loadIdRepoSchema(SSOToken ssoToken,String idRepoName,String realm,ServletContext servletCtx) throws IdRepoException {   if (servletCtx == null) {     return;   }   try {     ServiceConfigManager svcCfgMgr=new ServiceConfigManager(IdConstants.REPO_SERVICE,ssoToken);     ServiceConfig cfg=svcCfgMgr.getOrganizationConfig(realm,null);     ServiceConfig ss=cfg.getSubConfig(idRepoName);     if (ss == null) {       if (DEBUG.messageEnabled()) {         DEBUG.message(\"IdRepoUtils.loadIdRepoSchema: data store \" + idRepoName + \" for realm \"+ realm+ \" doesn't exist.\");       }       Object args[]={idRepoName,realm};       throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.PLUGIN_DOESNT_EXIST_FOR_REALM,args);     }     String idRepoType=ss.getSchemaID();     Map attrValues=ss.getAttributes();     String schemaFiles=getSchemaFiles(idRepoType);     if ((schemaFiles == null) || (schemaFiles.trim().length() == 0)) {       if (DEBUG.messageEnabled()) {         DEBUG.message(\"IdRepoUtils.loadIdRepoSchema: data store \" + idRepoName + \" for realm \"+ realm+ \" doesn't have \"+ \"schema files.\");       }       return;     }     StringTokenizer st=new StringTokenizer(schemaFiles);     while (st.hasMoreTokens()) {       String schemaFile=st.nextToken();       tagSwapAndImportSchema(schemaFile,attrValues,servletCtx,idRepoType);     }   }  catch (  SMSException smsex) {     if (DEBUG.messageEnabled()) {       DEBUG.message(\"IdRepoUtils.loadIdRepoSchema:\",smsex);     }     Object args[]={idRepoName,realm};     throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_READ_PLUGIN_FOR_REALM,args);   } catch (  SSOException ssoex) {     if (DEBUG.messageEnabled()) {       DEBUG.message(\"IdRepoUtils.loadIdRepoSchema:\",ssoex);     }     Object args[]={idRepoName,realm};     throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_READ_PLUGING_FOR_REALM_SSOTOKEN_NOT_VALID,args);   } catch (  Exception ex) {     if (DEBUG.messageEnabled()) {       DEBUG.message(\"IdRepoUtils.loadIdRepoSchema:\",ex);     }     Object args[]={idRepoName,realm,ex.getMessage()};     throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.UNABLE_LOAD_SCHEMA_FOR_PLUGIN_FOR_REALM,args);   } } "
"public SystemConfigurationException(Throwable t){   super(t); } "
"@Override public boolean equals(Object obj){   if (!(obj instanceof Position)) {     return false;   }   if (obj == this) {     return true;   }   Position position=(Position)obj;   if (position.getLatitude() != latitude) {     return false;   }  else   if (position.getLongitude() != longitude) {     return false;   }  else   if (Double.isNaN(position.getAltitude()) != Double.isNaN(altitude)) {     return false;   }  else   if (!Double.isNaN(altitude) && position.getAltitude() != altitude) {     return false;   }   return true; } "
"@NotNull @Override @SuppressWarnings(\"unchecked\") public <T>T[] toArray(@NotNull final T[] vec){   int i=0;   ImmutableList<A> l=this;   while (l.nonEmpty() && i < vec.length) {     vec[i]=(T)l.head;     l=l.tail;     i++;   }   if (l.isEmpty()) {     if (i < vec.length) {       vec[i]=null;     }     return vec;   }   return toArray((T[])Array.newInstance(vec.getClass().getComponentType(),size())); } "
"public boolean isMember(SSOToken token) throws SSOException, PolicyException {   boolean member=false;   long currentTime=currentTimeMillis();   long[] cachedResult=null;   cachedResult=(long[])resultCache.get(token.getTokenID().toString());   if (cachedResult == null) {     cachedResult=new long[2];   }   if ((currentTime - cachedResult[0]) < resultTtl) {     member=(cachedResult[1] == 1) ? true : false;     if (PolicyManager.debug.messageEnabled()) {       PolicyManager.debug.message(\"Subjects.isMember():getting \" + \"subject evaluation results from resultCache of policy\");     }   }  else {     Iterator items=users.entrySet().iterator();     while (items.hasNext()) {       QualifiedSubject qualifiedSubject=(QualifiedSubject)((Map.Entry)items.next()).getValue();       if (qualifiedSubject.subject.isMember(token)) {         if (!qualifiedSubject.exclusive) {           member=true;           break;         }       }  else {         if (qualifiedSubject.exclusive) {           member=true;           break;         }       }     }     long memberLong=member ? 1 : 0;     cachedResult[0]=currentTime;     cachedResult[1]=memberLong;     resultCache.put(token.getTokenID().toString(),cachedResult);   }   return member; } "
"public void updateTitle(){   if (panel.getTitle() != null) {     setTitle(INFO_CTRL_PANEL_GENERIC_TITLE.get(DynamicConstants.PRODUCT_NAME,panel.getTitle()).toString());   } } "
"public boolean skipPreamble() throws IOException {   System.arraycopy(boundary,2,boundary,0,boundary.length - 2);   boundaryLength=boundary.length - 2;   computeBoundaryTable();   try {     discardBodyData();     return readBoundary();   }  catch (  MalformedStreamException e) {     return false;   }  finally {     System.arraycopy(boundary,0,boundary,2,boundary.length - 2);     boundaryLength=boundary.length;     boundary[0]=CR;     boundary[1]=LF;     computeBoundaryTable();   } } "
"public int indexOfTabComponent(Component tabComponent){   for (int i=0; i < getTabCount(); i++) {     Component c=getTabComponentAt(i);     if (c == tabComponent) {       return i;     }   }   return -1; } "
"@Override public synchronized boolean retainAll(Collection<?> collection){   return super.retainAll(collection); } "
"private boolean isPageStreaming(Method method){   Type type=apiaryConfig.getType(method.getResponseTypeUrl());   if (type == null) {     return false;   }   for (  Field field : type.getFieldsList()) {     if (field.getName().equals(NEXT_PAGE_TOKEN_FIELD_NAME)) {       return true;     }   }   return false; } "
"public String message(){   return message; } "
"protected int oldFindAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {   QName uniquePseudoVarName=null;   boolean foundFirst=false;   int numPathsFound=0;   int n=paths.size();   Expression expr1=firstOccuranceOwner.getExpression();   if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);   boolean isGlobal=(paths == m_absPaths);   LocPathIterator lpi=(LocPathIterator)expr1;   for (int j=start; j < n; j++) {     ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);     if (null != owner2) {       Expression expr2=owner2.getExpression();       boolean isEqual=expr2.deepEquals(lpi);       if (isEqual) {         LocPathIterator lpi2=(LocPathIterator)expr2;         if (!foundFirst) {           foundFirst=true;           ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,isGlobal);           if (null == var)           return 0;           uniquePseudoVarName=var.getName();           changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);           paths.setElementAt(var.getSelect(),firstOccuranceIndex);           numPathsFound++;         }         changeToVarRef(uniquePseudoVarName,owner2,paths,psuedoVarRecipient);         paths.setElementAt(null,j);         numPathsFound++;       }     }   }   if ((0 == numPathsFound) && (paths == m_absPaths)) {     ElemVariable var=createPseudoVarDecl(psuedoVarRecipient,lpi,true);     if (null == var)     return 0;     uniquePseudoVarName=var.getName();     changeToVarRef(uniquePseudoVarName,firstOccuranceOwner,paths,psuedoVarRecipient);     paths.setElementAt(var.getSelect(),firstOccuranceIndex);     numPathsFound++;   }   return numPathsFound; } "
"public static byte[] flattenBitmap(Bitmap bitmap){   int size=bitmap.getWidth() * bitmap.getHeight() * 4;   ByteArrayOutputStream out=new ByteArrayOutputStream(size);   try {     bitmap.compress(Bitmap.CompressFormat.PNG,100,out);     out.flush();     out.close();     return out.toByteArray();   }  catch (  IOException e) {     Log.w(TAG,\"Could not write bitmap\");     return null;   } } "
"public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id) throws XMLSignatureException {   return signXML(doc,certAlias,algorithm,DEF_ID_ATTRIBUTE,id,false,null); } "
"public FlavorEvent(Clipboard source){   super(source); } "
"public static String sign(String queryString,PrivateKey privateKey) throws SAML2Exception {   String classMethod=\"QuerySignatureUtil.sign: \";   if (queryString == null || queryString.length() == 0 || privateKey == null) {     SAML2Utils.debug.error(classMethod + \"Either input query string or private key is null.\");     throw new SAML2Exception(SAML2Utils.bundle.getString(\"nullInput\"));   }   if (SAML2Utils.debug.messageEnabled()) {     SAML2Utils.debug.message(classMethod + \"Input query string:\\n\" + queryString);   }   final String querySigAlg;   final String alg=privateKey.getAlgorithm(); switch (alg) { case \"RSA\":     querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_RSA,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1);   break; case \"DSA\": querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_DSA,XMLSignature.ALGO_ID_SIGNATURE_DSA); break; case \"EC\": querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_EC,XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA512); break; default : SAML2Utils.debug.error(classMethod + \"Private Key algorithm not supported: \" + alg); throw new SAML2Exception(SAML2Utils.bundle.getString(\"algorithmNotSupported\")); } Signature sig; try { sig=Signature.getInstance(JCEMapper.translateURItoJCEID(querySigAlg)); }  catch (NoSuchAlgorithmException nsae) { throw new SAML2Exception(nsae); } if (queryString.charAt(queryString.length() - 1) != '&') { queryString=queryString + \"&\"; } queryString+=SAML2Constants.SIG_ALG + \"=\" + URLEncDec.encode(querySigAlg); if (SAML2Utils.debug.messageEnabled()) { SAML2Utils.debug.message(classMethod + \"Final string to be signed:\\n\" + queryString); } byte[] sigBytes; try { sig.initSign(privateKey); sig.update(queryString.getBytes()); sigBytes=sig.sign(); }  catch (GeneralSecurityException gse) { throw new SAML2Exception(gse); } if (sigBytes == null || sigBytes.length == 0) { SAML2Utils.debug.error(classMethod + \"Generated signature is null\"); throw new SAML2Exception(SAML2Utils.bundle.getString(\"nullSigGenerated\")); } Base64 encoder=new Base64(); String encodedSig=encoder.encode(sigBytes); queryString+=\"&\" + SAML2Constants.SIGNATURE + \"=\"+ URLEncDec.encode(encodedSig); if (SAML2Utils.debug.messageEnabled()) { SAML2Utils.debug.message(classMethod + \"Signed query string:\\n\" + queryString); } return queryString; } "
"public static boolean isExtension(String filename,Collection<String> extensions){   if (filename == null) {     return false;   }   if (extensions == null || extensions.isEmpty()) {     return indexOfExtension(filename) == -1;   }   String fileExt=getExtension(filename);   for (  String extension : extensions) {     if (fileExt.equals(extension)) {       return true;     }   }   return false; } "
"public void testNegPosSameLength(){   byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};   byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   int aSign=-1;   int bSign=1;   byte rBytes[]={-1,5,79,-73,-9,-76,-3,78,-35,-17,119};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.or(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public void testGetScope() throws Exception {   Identity i=new IdentityStub(\"testGetScope\");   assertNull(i.getScope());   IdentityScope s=IdentityScope.getSystemScope();   Identity i2=new IdentityStub(\"testGetScope2\",s);   assertSame(s,i2.getScope()); } "
"public BindException(String msg){   super(msg); } "
"private int[] packTimes(){   int[] times=new int[2];   times[0]=startTime;   times[1]=endTime;   return times; } "
"public UninstallUserData createUserData(UninstallerArgumentParser args) throws UserDataException, ClientException {   parser=args;   UninstallUserData userData=new UninstallUserData();   try {     boolean isInteractive=args.isInteractive();     userData.setQuiet(args.isQuiet());     userData.setVerbose(args.isVerbose());     userData.setForceOnError(args.isForceOnError());     userData.setTrustManager(args.getTrustManager());     userData.setConnectTimeout(getConnectTimeout());     LocalizableMessageBuilder buf=new LocalizableMessageBuilder();     int v=args.validateGlobalOptions(buf);     if (v != ReturnCode.SUCCESS.get()) {       throw new UserDataException(null,buf.toMessage());     }     Set<String> outsideDbs;     Set<String> outsideLogs;     Configuration config=Installation.getLocal().getCurrentConfiguration();     try {       outsideDbs=config.getOutsideDbs();     }  catch (    IOException ioe) {       outsideDbs=Collections.emptySet();       logger.info(LocalizableMessage.raw(\"error determining outside databases\",ioe));     }     try {       outsideLogs=config.getOutsideLogs();     }  catch (    IOException ioe) {       outsideLogs=Collections.emptySet();       logger.info(LocalizableMessage.raw(\"error determining outside logs\",ioe));     }     boolean somethingSpecifiedToDelete=args.removeAll() || args.removeBackupFiles() || args.removeDatabases()|| args.removeLDIFFiles()|| args.removeConfigurationFiles()|| args.removeLogFiles()|| args.removeServerLibraries();     boolean isCanceled=false;     if (somethingSpecifiedToDelete) {       userData.setRemoveBackups(args.removeAll() || args.removeBackupFiles());       userData.setRemoveConfigurationAndSchema(args.removeAll() || args.removeConfigurationFiles());       userData.setRemoveDatabases(args.removeAll() || args.removeDatabases());       userData.setRemoveLDIFs(args.removeAll() || args.removeLDIFFiles());       userData.setRemoveLibrariesAndTools(args.removeAll() || args.removeServerLibraries());       userData.setRemoveLogs(args.removeAll() || args.removeLogFiles());       userData.setExternalDbsToRemove(outsideDbs);       userData.setExternalLogsToRemove(outsideLogs);     }  else     if (!isInteractive) {       throw new UserDataException(null,ERR_CLI_UNINSTALL_NOTHING_TO_BE_UNINSTALLED_NON_INTERACTIVE.get());     }  else {       isCanceled=askWhatToDelete(userData,outsideDbs,outsideLogs);     }     String adminUid=args.getAdministratorUID();     if (adminUid == null && !args.isInteractive()) {       adminUid=args.getDefaultAdministratorUID();     }     userData.setAdminUID(adminUid);     userData.setAdminPwd(args.getBindPassword());     String referencedHostName=args.getReferencedHostName();     if (referencedHostName == null && !args.isInteractive()) {       referencedHostName=args.getDefaultReferencedHostName();     }     try {       UninstallData d=new UninstallData(Installation.getLocal());       userData.setReplicationServer(new HostPort(referencedHostName,d.getReplicationServerPort()));     }  catch (    Throwable t) {       logger.error(LocalizableMessage.raw(\"Could not create UninstallData: \" + t,t));       userData.setReplicationServer(new HostPort(referencedHostName,8989));     }     info=ControlPanelInfo.getInstance();     info.setTrustManager(userData.getTrustManager());     info.setConnectTimeout(getConnectTimeout());     info.regenerateDescriptor();     info.setConnectionPolicy(ConnectionProtocolPolicy.USE_ADMIN);     HostPort adminConnectorHostPort=info.getAdminConnectorHostPort();     if (adminConnectorHostPort == null) {       logger.warn(LocalizableMessage.raw(\"Error retrieving a valid LDAP URL in conf file.\"));       if (!parser.isInteractive()) {         LocalizableMessage msg=ERR_COULD_NOT_FIND_VALID_LDAPURL.get();         throw new ClientException(ReturnCode.APPLICATION_ERROR,msg);       }     }     userData.setLocalServer(adminConnectorHostPort,true);     userData.setReferencedHostName(referencedHostName);     if (!isCanceled) {       isCanceled=checkServerState(userData);       if (isCanceled && !userData.isForceOnError()) {         logger.info(LocalizableMessage.raw(\"User cancelled uninstall.\"));         userData=null;       }     }     if (userData != null && !args.isQuiet()) {       println();     }   }  catch (  Throwable t) {     logger.warn(LocalizableMessage.raw(\"Exception: \" + t,t));     if (t instanceof UserDataException) {       throw (UserDataException)t;     }  else     if (t instanceof ClientException) {       throw (ClientException)t;     }  else {       throw new IllegalStateException(\"Unexpected error: \" + t,t);     }   }   logger.info(LocalizableMessage.raw(\"Successfully created user data\"));   return userData; } "
"public boolean change_layer_action(int p_new_layer){   if (interactive_state == null)   return false;   if (board_is_read_only)   return false;   return interactive_state.change_layer_action(p_new_layer); } "
"public NewID createNewID(Element value) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEWID,value);   if (obj == null) {     return new NewIDImpl(value);   }  else {     return (NewID)obj;   } } "
"public void flip(int x,int y){   int offset=y * rowSize + (x / 32);   bits[offset]^=1 << (x & 0x1f); } "
"public void testClearBitNegativeOutside1(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=-1;   int number=150;   byte rBytes[]={-65,-1,-1,-1,-1,-1,-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public RenderedImage createScaledRendering(int w,int h,RenderingHints hints){   double sx=(double)w / getWidth();   double sy=(double)h / getHeight();   if (Math.abs(sx / sy - 1.0) < 0.01) {     sx=sy;   }   AffineTransform usr2dev=AffineTransform.getScaleInstance(sx,sy);   RenderContext newRC=new RenderContext(usr2dev,hints);   return createRendering(newRC); } "
"public PlaPointInt last_corner(){   if (precalculated_last_corner != null)   return precalculated_last_corner;   if (room_touch_is_corner) {     precalculated_last_corner=room_shape.corner(touching_side_no_of_room);   }  else   if (neighbour_room_touch_is_corner) {     precalculated_last_corner=neighbour_shape.corner(touching_side_no_of_neighbour_room);   }  else {     PlaPointInt curr_last_corner=neighbour_shape.corner(touching_side_no_of_neighbour_room);     PlaLineInt next_line=room_shape.border_line(room_shape.next_no(touching_side_no_of_room));     if (next_line.side_of(curr_last_corner) == PlaSide.ON_THE_RIGHT)     precalculated_last_corner=curr_last_corner;  else     precalculated_last_corner=room_shape.corner(room_shape.next_no(touching_side_no_of_room));   }   return precalculated_last_corner; } "
"protected CellRendererPane createCellRendererPane(){   return new CellRendererPane(); } "
"public LDAPPreReadResponseControl(SearchResultEntry searchEntry){   this(false,searchEntry); } "
"public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException { } "
"private void ensureLogFileIsValid(final RecordParser<K,V> parser) throws ChangelogException {   try (final RandomAccessFile readerWriter=new RandomAccessFile(logfile,\"rws\");final BlockLogReader<K,V> reader=BlockLogReader.newReader(logfile,readerWriter,parser)){     final long lastValidPosition=reader.checkLogIsValid();     if (lastValidPosition != -1) {       readerWriter.setLength(lastValidPosition);       logger.error(INFO_CHANGELOG_LOG_FILE_RECOVERED.get(logfile.getPath()));     }   }  catch (  IOException e) {     throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_RECOVER_LOG_FILE.get(logfile.getPath(),StaticUtils.stackTraceToSingleLineString(e)));   } } "
"@Override public void init(FilterConfig fConfig) throws ServletException {   this.filterConfig=fConfig;   this.attribute=fConfig.getInitParameter(\"attribute\"); } "
"public void testNegPosFirstLonger(){   byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};   byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   int aSign=-1;   int bSign=1;   byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,72};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.andNot(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"public void start() throws IOException {   Thread thread=new Thread(this);   thread.setName(\"MessageProcessorThread-TLS-\" + getIpAddress().getHostAddress() + '/'+ getPort());   thread.setPriority(sipStack.getThreadPriority());   thread.setDaemon(true);   this.sock=sipStack.getNetworkLayer().createSSLServerSocket(this.getPort(),0,this.getIpAddress());   if (sipStack.getClientAuth() == ClientAuthType.Want || sipStack.getClientAuth() == ClientAuthType.Default) {     ((SSLServerSocket)this.sock).setWantClientAuth(true);   }  else {     ((SSLServerSocket)this.sock).setWantClientAuth(false);   }   if (sipStack.getClientAuth() == ClientAuthType.Enabled) {     ((SSLServerSocket)this.sock).setNeedClientAuth(true);   }  else {     ((SSLServerSocket)this.sock).setNeedClientAuth(false);   }   ((SSLServerSocket)this.sock).setUseClientMode(false);   String[] enabledCiphers=((SipStackImpl)sipStack).getEnabledCipherSuites();   ((SSLServerSocket)sock).setEnabledProtocols(((SipStackImpl)sipStack).getEnabledProtocols());   ((SSLServerSocket)this.sock).setEnabledCipherSuites(enabledCiphers);   if (sipStack.getClientAuth() == ClientAuthType.Want || sipStack.getClientAuth() == ClientAuthType.Default) {     ((SSLServerSocket)this.sock).setWantClientAuth(true);   }  else {     ((SSLServerSocket)this.sock).setWantClientAuth(false);   }   if (logger.isLoggingEnabled(StackLogger.TRACE_DEBUG)) {     logger.logDebug(\"SSLServerSocket want client auth \" + ((SSLServerSocket)this.sock).getWantClientAuth());     logger.logDebug(\"SSLServerSocket need client auth \" + ((SSLServerSocket)this.sock).getNeedClientAuth());   }   this.isRunning=true;   thread.start(); } "
"@Override public void close(){ } "
"public Book(){   mPages=new Vector(); } "
"public boolean implies(Permission permission){   if (!(permission instanceof FilePermission))   return false;   FilePermission fp=(FilePermission)permission;   int desired=fp.getMask();   int effective=0;   int needed=desired; synchronized (this) {     int len=perms.size();     for (int i=0; i < len; i++) {       FilePermission x=(FilePermission)perms.get(i);       if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(fp)) {         effective|=x.getMask();         if ((effective & desired) == desired)         return true;         needed=(desired ^ effective);       }     }   }   return false; } "
"public <M extends Configuration>void deregisterAddListener(OptionalRelationDefinition<?,M> d,ConfigurationAddListener<M> listener){   validateRelationDefinition(d);   DN baseDN=DNBuilder.create(path,d).parent();   deregisterAddListener(baseDN,listener); } "
"public void testCloneNodeNotNamespaceAware() throws Exception {   DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();   factory.setNamespaceAware(false);   builder=factory.newDocumentBuilder();   document=builder.parse(new InputSource(new StringReader(\"<menu \" + \"xmlns:f=\\\"http://food\\\" xmlns:a=\\\"http://addons\\\">\" + \"<f:item a:standard=\\\"strawberry\\\" deluxe=\\\"yes\\\">Waffles</f:item></menu>\")));   name=(Element)document.getFirstChild().getFirstChild();   Element clonedName=(Element)name.cloneNode(true);   assertNull(clonedName.getNamespaceURI());   assertEquals(\"f:item\",clonedName.getNodeName());   assertNull(clonedName.getLocalName());   assertNull(clonedName.getNamespaceURI());   assertEquals(\"yes\",clonedName.getAttribute(\"deluxe\"));   assertEquals(\"strawberry\",clonedName.getAttribute(\"a:standard\"));   assertEquals(\"\",clonedName.getAttributeNS(\"http://addons\",\"standard\")); } "
"public void countDown(){   sync.releaseShared(1); } "
"public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformElement createTransformElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformElementImpl(); } "
"public void removeRestrictedDomains(Collection<String> domainNames){   Lists.removeAll(restrictedDomains,domainNames); } "
"private boolean checkIsSubClass(String target){   TypeElement type=element;   while (true) {     if (type == null) {       return false;     }  else     if (target.equals(type.getQualifiedName().toString())) {       return true;     }     type=getParentClass(type);   } } "
"private java.awt.Color[] read_color_array() throws java.io.IOException {   java.util.Collection<java.awt.Color> color_list=new java.util.LinkedList<java.awt.Color>();   for (; ; ) {     java.awt.Color curr_color=read_color();     if (curr_color == null) {       break;     }     color_list.add(curr_color);   }   java.awt.Color[] result=new java.awt.Color[color_list.size()];   java.util.Iterator<java.awt.Color> it=color_list.iterator();   for (int i=0; i < result.length; ++i) {     result[i]=it.next();   }   return result; } "
"public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {   if (isSigned && signedXMLString != null) {     return signedXMLString;   }   validateData();   validateAssertionConsumerServiceIndex(assertionConsumerSvcIndex);   validateAttributeConsumingServiceIndex(attrConsumingSvcIndex);   StringBuffer xmlString=new StringBuffer(1000);   xmlString.append(SAML2Constants.START_TAG);   if (includeNSPrefix) {     xmlString.append(SAML2Constants.PROTOCOL_PREFIX);   }   xmlString.append(SAML2Constants.AUTHNREQUEST).append(SAML2Constants.SPACE);   if (declareNS) {     xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR).append(SAML2Constants.NEWLINE);   }   xmlString.append(SAML2Constants.ID).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(requestId).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.VERSION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(version).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.ISSUE_INSTANT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(DateUtils.toUTCDateFormat(issueInstant)).append(SAML2Constants.QUOTE);   if ((destinationURI != null) && (destinationURI.length() > 0)) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.DESTINATION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(destinationURI).append(SAML2Constants.QUOTE);   }   if ((consent != null) && (consent.length() > 0)) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.CONSENT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(consent).append(SAML2Constants.QUOTE);   }   if (forceAuthn != null) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.FORCEAUTHN).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(forceAuthn.toString()).append(SAML2Constants.QUOTE);   }   if (isPassive != null) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ISPASSIVE).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(isPassive.toString()).append(SAML2Constants.QUOTE);   }   if (assertionConsumerSvcIndex != null) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ASSERTION_CONSUMER_SVC_INDEX).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(assertionConsumerSvcIndex.toString()).append(SAML2Constants.QUOTE);   }  else {     if ((protocolBinding != null) && (protocolBinding.length() > 0)) {       xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.PROTOBINDING).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(protocolBinding).append(SAML2Constants.QUOTE);     }     if ((assertionConsumerServiceURL != null) && (assertionConsumerServiceURL.length() > 0)) {       xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ASSERTION_CONSUMER_SVC_URL).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(XMLUtils.escapeSpecialCharacters(assertionConsumerServiceURL)).append(SAML2Constants.QUOTE);     }   }   if (attrConsumingSvcIndex != null) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.ATTR_CONSUMING_SVC_INDEX).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(attrConsumingSvcIndex.toString()).append(SAML2Constants.QUOTE);   }   if ((providerName != null) && (providerName.length() > 0)) {     xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.PROVIDER_NAME).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(providerName).append(SAML2Constants.QUOTE);   }   xmlString.append(SAML2Constants.END_TAG);   if (nameID != null) {     String issuerString=nameID.toXMLString(includeNSPrefix,declareNS);     xmlString.append(SAML2Constants.NEWLINE).append(issuerString);   }   if ((signatureString != null) && (signatureString.length() > 0)) {     xmlString.append(SAML2Constants.NEWLINE).append(signatureString);   }   if (extensions != null) {     xmlString.append(SAML2Constants.NEWLINE).append(extensions.toXMLString(includeNSPrefix,declareNS));   }   if (subject != null) {     xmlString.append(SAML2Constants.NEWLINE).append(subject.toXMLString(includeNSPrefix,declareNS));   }   if (nameIDPolicy != null) {     xmlString.append(SAML2Constants.NEWLINE).append(nameIDPolicy.toXMLString(includeNSPrefix,declareNS));   }   if (conditions != null) {     xmlString.append(SAML2Constants.NEWLINE).append(conditions.toXMLString(includeNSPrefix,declareNS));   }   if (reqAuthnContext != null) {     xmlString.append(SAML2Constants.NEWLINE).append(reqAuthnContext.toXMLString(includeNSPrefix,declareNS));   }   if (scoping != null) {     xmlString.append(SAML2Constants.NEWLINE).append(scoping.toXMLString(includeNSPrefix,declareNS));   }   xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.AUTHNREQUEST).append(SAML2Constants.END_TAG);   return xmlString.toString(); } "
"void printCommandBuilder(CommandBuilder commandBuilder){   if (displayEquivalentArgument.isPresent()) {     println();     printlnNoWrap(INFO_DSCFG_NON_INTERACTIVE.get(commandBuilder));   }   if (equivalentCommandFileArgument.isPresent()) {     String file=equivalentCommandFileArgument.getValue();     BufferedWriter writer=null;     try {       writer=new BufferedWriter(new FileWriter(file,true));       if (!sessionStartTimePrinted) {         writer.write(SHELL_COMMENT_SEPARATOR + getSessionStartTimeMessage());         writer.newLine();         sessionStartTimePrinted=true;       }       sessionEquivalentOperationNumber++;       writer.newLine();       writer.write(SHELL_COMMENT_SEPARATOR + INFO_DSCFG_EQUIVALENT_COMMAND_LINE_SESSION_OPERATION_NUMBER.get(sessionEquivalentOperationNumber));       writer.newLine();       writer.write(SHELL_COMMENT_SEPARATOR + getCurrentOperationDateMessage());       writer.newLine();       writer.write(commandBuilder.toString());       writer.newLine();       writer.newLine();       writer.flush();     }  catch (    IOException ioe) {       errPrintln(ERR_DSCFG_ERROR_WRITING_EQUIVALENT_COMMAND_LINE.get(file,ioe));     }  finally {       closeSilently(writer);     }   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   NodeList childList;   Node childNode;   Node newChild;   Node memberNode;   String memberName;   java.util.List refreshedActual=new java.util.ArrayList();   java.util.List actual=new java.util.ArrayList();   int nodeType;   java.util.List expected=new java.util.ArrayList();   expected.add(\"strong\");   expected.add(\"code\");   expected.add(\"sup\");   expected.add(\"var\");   expected.add(\"acronym\");   expected.add(\"em\");   Node appendedChild;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"p\");   childNode=elementList.item(1);   childList=((Element)childNode).getElementsByTagName(\"*\");   newChild=childList.item(0);   appendedChild=childNode.appendChild(newChild);   for (int indexN10085=0; indexN10085 < childList.getLength(); indexN10085++) {     memberNode=(Node)childList.item(indexN10085);     memberName=memberNode.getNodeName();     actual.add(memberName);   }   assertEqualsAutoCase(\"element\",\"liveByTagName\",expected,actual);   childList=childNode.getChildNodes();   for (int indexN1009C=0; indexN1009C < childList.getLength(); indexN1009C++) {     memberNode=(Node)childList.item(indexN1009C);     nodeType=(int)memberNode.getNodeType();     if (equals(1,nodeType)) {       memberName=memberNode.getNodeName();       refreshedActual.add(memberName);     }   }   assertEqualsAutoCase(\"element\",\"refreshedChildNodes\",expected,refreshedActual); } "
"public static Finder wrap(final Class<? extends ServerResource> resource){   return wrap(Key.get(resource)); } "
"public void reStart(boolean infiniteTry){   reStart(connectedRS.get().session,infiniteTry); } "
"private void uninstall(){   uninstallListeners();   window=null;   removeAll(); } "
"static void copySubConfig(ServiceConfig from,ServiceConfig to,ServiceSchema serviceSchema) throws SMSException, SSOException {   Set subConfigNames=from.getSubConfigNames();   for (Iterator items=subConfigNames.iterator(); items.hasNext(); ) {     String subConfigName=(String)items.next();     ServiceConfig scf=from.getSubConfig(subConfigName);     ServiceSchema subSchema=serviceSchema.getSubSchema(scf.getSchemaID());     if (subSchema.isRealmCloneable()) {       to.addSubConfig(subConfigName,scf.getSchemaID(),scf.getPriority(),scf.getAttributesWithoutDefaults());       ServiceConfig sct=to.getSubConfig(subConfigName);       copySubConfig(scf,sct,subSchema);     }   } } "
"private SchemaFactory _newFactory(String schemaLanguage){   SchemaFactory sf;   String propertyName=SERVICE_CLASS.getName() + \":\" + schemaLanguage;   try {     debugPrintln(\"Looking up system property '\" + propertyName + \"'\");     String r=ss.getSystemProperty(propertyName);     if (r != null) {       debugPrintln(\"The value is '\" + r + \"'\");       sf=createInstance(r,true);       if (sf != null)       return sf;     }  else     debugPrintln(\"The property is undefined.\");   }  catch (  Throwable t) {     if (debug) {       debugPrintln(\"failed to look up system property '\" + propertyName + \"'\");       t.printStackTrace();     }   }   String javah=ss.getSystemProperty(\"java.home\");   String configFile=javah + File.separator + \"lib\"+ File.separator+ \"jaxp.properties\";   try {     if (firstTime) { synchronized (cacheProps) {         if (firstTime) {           File f=new File(configFile);           firstTime=false;           if (ss.doesFileExist(f)) {             debugPrintln(\"Read properties file \" + f);             cacheProps.load(ss.getFileInputStream(f));           }         }       }     }     final String factoryClassName=cacheProps.getProperty(propertyName);     debugPrintln(\"found \" + factoryClassName + \" in $java.home/jaxp.properties\");     if (factoryClassName != null) {       sf=createInstance(factoryClassName,true);       if (sf != null) {         return sf;       }     }   }  catch (  Exception ex) {     if (debug) {       ex.printStackTrace();     }   }   final SchemaFactory factoryImpl=findServiceProvider(schemaLanguage);   if (factoryImpl != null) {     return factoryImpl;   }   if (schemaLanguage.equals(\"http://www.w3.org/2001/XMLSchema\")) {     debugPrintln(\"attempting to use the platform default XML Schema validator\");     return createInstance(\"com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory\",true);   }   debugPrintln(\"all things were tried, but none was found. bailing out.\");   return null; } "
"private static void runCommands(String[] args) throws Exception {   String command=args[0]; switch (command) { case \"help\": case \"-help\": case \"--help\": case \"-h\": case \"/h\": case \"/help\":     System.out.println(\"\" + \"usage: -s <script-location> [arguments [,...]]\\n\" + \"       -c <source-directory> [-r] [-o <output-directory>] [-cp <classpath[:...]>]\\n\"+ \"       ClassName [-cp <classpath[:...]>]\\n\"+ \"       -gb <project-directory>\\n\"+ \"       -repl\\n\"+ \"       -v | -version\\n\"+ \"\\n\"+ \"-s       Specify the script location and run the script\\n\"+ \"-c       Specify the source file directory and compile *.lt files\\n\"+ \"-r       [option] Add sub directory files to compiling list.\\n\"+ \"-o       [option] Specify the output directory. (the source-directory/target/classes/ as default)\\n\"+ \"-cp      [option] The classpath. use ':' to separate the class-paths\\n\"+ \"-repl    Start the repl (or run the program with 0 arguments)\\n\"+ \"-gb      Generate build.lts and run.lts in the given directory\\n\"+ \"-version Show current version\\n\");   break; case \"-v\": case \"-version\": System.out.println(\"Latte-lang 0.0.5-ALPHA\"); break; case \"-s\": if (args.length < 2) { System.err.println(\"invalid command -s. the script file location should be specified\\n\" + \"see --help\"); return; } String path=args[1]; File f=new File(path); ScriptCompiler s=new ScriptCompiler(ClassLoader.getSystemClassLoader()); try { ScriptCompiler.Script script=s.compile(f); String[] scriptArgs=new String[args.length - 2]; System.arraycopy(args,2,scriptArgs,0,args.length - 2); script.run(scriptArgs); }  catch (Throwable e) { if (e instanceof SyntaxException) { System.err.println(\"[ERROR] \" + e.getMessage()); }  else { e.printStackTrace(); } } break; case \"-c\": if (args.length < 2) { System.err.println(\"invalid command -c. the source directory should be specified\\n\" + \"see --help\"); return; } String sourceDir=args[1].trim(); if (sourceDir.endsWith(File.separator)) { sourceDir=sourceDir.substring(0,sourceDir.length() - File.separator.length()); } boolean recursive=false; String outputDir=sourceDir + File.separator + \"target\"+ File.separator+ \"classes\"; List<URL> classPaths=new ArrayList<>(); for (int i=2; i < args.length; ++i) { String cmd=args[i]; switch (cmd) { case \"-r\": recursive=true; break; case \"-o\": if (args.length - 1 == i) { System.err.println(\"invalid option -o. the output directory should be specified\"); System.err.println(\"see --help\"); return; } outputDir=args[++i]; break; case \"-cp\": if (args.length - 1 == i) { System.err.println(\"invalid option -cp. the class-path should be specified\"); System.err.println(\"see --help\"); return; } String[] class_paths=args[++i].split(\":\"); for (String class_path : class_paths) { try { classPaths.add(new URL(new File(class_path).toURI().toString())); }  catch (MalformedURLException e) { System.err.println(\"[ERROR] \" + e.getMessage()); return; } } break; default : System.err.println(\"unknown option \" + cmd); System.err.println(\"see --help\"); return; } } Compiler compiler=new Compiler(); File outputDirFile=new File(outputDir); if (!outputDirFile.exists()) outputDirFile.mkdirs(); compiler.config.result.outputDir=outputDirFile; compiler.config.classpath=classPaths; try { compiler.compile(Utils.filesInDirectory(sourceDir,\".*\\\\.lt\",recursive)); }  catch (Exception e) { if (e instanceof SyntaxException) { System.err.println(\"[ERROR] \" + e.getMessage()); }  else { e.printStackTrace(); } return; } break; case \"-gb\": final List<String> theFilesToBeGenerated=Arrays.asList(\"build.lts\",\"run.lts\"); if (args.length != 2) { System.err.println(\"invalid command -gb.\"); System.err.println(\"see --help\"); return; } String projectDir=args[1].trim(); if (projectDir.endsWith(File.separator)) { projectDir=projectDir.substring(0,projectDir.length() - File.separator.length()); } String core=String.valueOf(Runtime.getRuntime().availableProcessors()); String separator=File.separator; for (String theFile : theFilesToBeGenerated) { String filePath=projectDir + File.separator + theFile; File file=new File(filePath); if (file.exists()) { System.out.println(\"[INFO] \" + filePath + \" exists\"); }  else { try { file.createNewFile(); }  catch (IOException e) { e.printStackTrace(); } } try { FileWriter fw=new FileWriter(file); BufferedReader br=new BufferedReader(new InputStreamReader(REPL.class.getClassLoader().getResourceAsStream(theFile + \".template\"))); String ss; while ((ss=br.readLine()) != null) { ss=ss.replace(\"${core}\",core).replace(\"${dir}\",projectDir.replace(\"\\\\\",\"\\\\\\\\\")).replace(\"${separator}\",separator) + \"\\n\"; fw.write(ss.toCharArray()); } fw.flush(); fw.close(); }  catch (IOException e) { e.printStackTrace(); } } break; case \"-repl\": main(new String[0]); break; default : List<URL> urls=new ArrayList<>(); try { String url=new File(\"\").toURI().toString(); urls.add(new URL(url)); }  catch (MalformedURLException e) { System.err.println(\"[ERROR] \" + e.getMessage()); return; } String[] runArgs=new String[0]; loop: for (int i=1; i < args.length; ++i) { String cmd=args[i]; switch (cmd) { case \"-cp\": if (i == args.length - 1) { System.err.println(\"invalid option -cp. the class-path should be specified\"); System.err.println(\"see --help\"); return; } String cps=args[++i]; for (String cp : cps.split(\":\")) { try { urls.add(new URL(new File(cp).toURI().toString())); }  catch (MalformedURLException e) { System.err.println(\"[ERROR] \" + e.getMessage()); return; } } break; case \"-args\": runArgs=new String[args.length - 1 - i]; System.arraycopy(args,i + 1,runArgs,0,runArgs.length); break loop; default : System.err.println(\"unknown option \" + cmd); System.err.println(\"see --help\"); return; } } try { Run run=new Run(urls,command); run.exec(runArgs); }  catch (Throwable t) { t.printStackTrace(); } } } "
"public R visitDN(DNPropertyDefinition pd,DN v,P p){   return visitUnknown(pd,v,p); } "
"@VisibleForTesting public static boolean containsUndesiredCharacters(String s){   final String[] DODGY_LDAP_CHARS={\",\",\"+\",\"\\\"\",\"\\\\\",\"<\",\">\",\";\"};   Set<String> dodgyChars=new HashSet<>(Arrays.asList(DODGY_LDAP_CHARS));   for (int i=0; i < s.length(); i++) {     String sub=s.substring(i,i + 1);     if (dodgyChars.contains(sub)) {       return true;     }   }   return false; } "
"public void start_circle(Point2D p_point){   if (board_is_read_only)   return;   PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);   set_interactive_state(StateCircleConstrut.get_instance(location,interactive_state,this,actlog)); } "
"ShapeTileSimplex remove_redundant_lines(){   ArrayList<PlaLineInt> work_arr=new ArrayList<PlaLineInt>(lines_size());   PlaLineInt prev=tline_get(0);   work_arr.add(prev);   for (int index=1; index < lines_size(); ++index) {     PlaLineInt a_line=tline_get(index);     if (a_line.equals(prev))     continue;     work_arr.add(a_line);     prev=a_line;   }   int new_length=work_arr.size();   PlaSide[] intersection_sides=new PlaSide[new_length];   boolean try_again=new_length > 2;   int index_of_last_removed_line=new_length;   while (try_again) {     try_again=false;     int prev_ind=new_length - 1;     int next_ind;     PlaLineInt prev_line=work_arr.get(prev_ind);     PlaLineInt curr_line=work_arr.get(0);     PlaLineInt next_line;     for (int cur_ind=0; cur_ind < new_length; ++cur_ind) {       if (cur_ind == new_length - 1) {         next_ind=0;       }  else {         next_ind=cur_ind + 1;       }       next_line=work_arr.get(next_ind);       boolean remove_line=false;       PlaDirection prev_dir=prev_line.direction();       PlaDirection next_dir=next_line.direction();       long det=prev_dir.determinant(next_dir);       if (det != 0) {         if (intersection_sides[cur_ind] == null) {           intersection_sides[cur_ind]=curr_line.side_of_intersection(prev_line,next_line);         }         if (det > 0) {           remove_line=(intersection_sides[cur_ind] != PlaSide.ON_THE_LEFT);         }  else {           if (intersection_sides[cur_ind] == PlaSide.ON_THE_LEFT) {             PlaDirection curr_dir=curr_line.direction();             if (prev_dir.determinant(curr_dir) > 0) {               new_length=0;               try_again=false;               break;             }           }         }       }  else {         if (prev_line.side_of(next_line.point_a) == PlaSide.ON_THE_LEFT) {           new_length=0;           try_again=false;           break;         }       }       if (remove_line) {         try_again=true;         --new_length;         work_arr.remove(cur_ind);         for (int index=cur_ind; index < new_length; ++index) {           intersection_sides[index]=intersection_sides[index + 1];         }         if (new_length < 3) {           try_again=false;           break;         }         if (cur_ind == 0) {           prev_ind=new_length - 1;         }         intersection_sides[prev_ind]=null;         if (cur_ind >= new_length) {           next_ind=0;         }  else {           next_ind=cur_ind;         }         intersection_sides[next_ind]=null;         --cur_ind;         index_of_last_removed_line=cur_ind;       }  else {         prev_line=curr_line;         prev_ind=cur_ind;       }       curr_line=next_line;       if (!try_again && cur_ind >= index_of_last_removed_line) {         break;       }     }   }   if (new_length == 2) {     if (work_arr.get(0).is_parallel(work_arr.get(1))) {       if (work_arr.get(0).direction().equals(work_arr.get(1).direction())) {         if (work_arr.get(1).side_of(work_arr.get(0).point_a) == PlaSide.ON_THE_LEFT) {           work_arr.remove(0);         }         --new_length;       }  else {         if (work_arr.get(1).side_of(work_arr.get(0).point_a) == PlaSide.ON_THE_LEFT) {           new_length=0;         }       }     }   }   if (new_length == lines_size()) {     return this;   }   if (new_length == 0) {     return ShapeTileSimplex.EMPTY;   }   return new ShapeTileSimplex(work_arr); } "
"public BeanContextServicesSupport(BeanContextServices peer){   this(peer,null,false,true); } "
"public void delete() throws AMException, SSOException {   delete(false); } "
"private boolean isBackendFractionalConfigConsistent(){   if (logger.isTraceEnabled()) {     logger.trace(\"Attempt to read the potential fractional config in domain root entry \" + getBaseDN());   }   SearchRequest request=newSearchRequest(getBaseDN(),SearchScope.BASE_OBJECT).addAttribute(REPLICATION_GENERATION_ID,REPLICATION_FRACTIONAL_EXCLUDE,REPLICATION_FRACTIONAL_INCLUDE);   InternalSearchOperation search=conn.processSearch(request);   if (search.getResultCode() != ResultCode.SUCCESS && search.getResultCode() != ResultCode.NO_SUCH_OBJECT) {     String errorMsg=search.getResultCode().getName() + \" \" + search.getErrorMessage();     logger.error(ERR_SEARCHING_GENERATION_ID,getBaseDN(),errorMsg);     return false;   }   SearchResultEntry resultEntry=findReplicationSearchResultEntry(search);   if (resultEntry == null) {     return !fractionalConfig.isFractional();   }   Iterator<ByteString> exclIt=getAttributeValueIterator(resultEntry,REPLICATION_FRACTIONAL_EXCLUDE);   Iterator<ByteString> inclIt=getAttributeValueIterator(resultEntry,REPLICATION_FRACTIONAL_INCLUDE);   return isFractionalConfigConsistent(fractionalConfig,exclIt,inclIt); } "
"public static void main(final String[] args){   if (args.length < 7) {     System.err.println(\"Usage: host port username password baseDN scope \" + \"filter [attribute ...]\");     System.exit(1);   }   final String hostName=args[0];   final int port=Integer.parseInt(args[1]);   final String userName=args[2];   final String password=args[3];   final String baseDN=args[4];   final String scopeString=args[5];   final String filter=args[6];   String[] attributes;   if (args.length > 7) {     attributes=Arrays.copyOfRange(args,7,args.length);   }  else {     attributes=new String[0];   }   final SearchScope scope=SearchScope.valueOf(scopeString);   if (scope == null) {     System.err.println(\"Unknown scope: \" + scopeString);     System.exit(ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue());     return;   }   final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);   final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);   Connection connection=null;   try {     connection=factory.getConnection();     connection.bind(userName,password.toCharArray());     final ConnectionEntryReader reader=connection.search(baseDN,scope,filter,attributes);     while (reader.hasNext()) {       if (!reader.isReference()) {         final SearchResultEntry entry=reader.readEntry();         writer.writeComment(\"Search result entry: \" + entry.getName());         writer.writeEntry(entry);       }  else {         final SearchResultReference ref=reader.readReference();         writer.writeComment(\"Search result reference: \" + ref.getURIs());       }     }     writer.flush();   }  catch (  final LdapException e) {     System.err.println(e.getMessage());     System.exit(e.getResult().getResultCode().intValue());   } catch (  final IOException e) {     System.err.println(e.getMessage());     System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());   }  finally {     if (connection != null) {       connection.close();     }   } } "
"public void skippedEntity(String name) throws SAXException { } "
"protected static void waitShortForMessage(){   sleep(MESSAGES_ARRIVE_FOR / 2); } "
"public static Boolean booleanValueOf(String value){   return new Boolean(\"true\".equalsIgnoreCase(value) || \"1\".equals(value)); } "
"private void validateSubcommandOptions(LocalizableMessageBuilder buf){   if (isEnableReplicationSubcommand()) {     validateEnableReplicationOptions(buf);   }  else   if (isDisableReplicationSubcommand()) {     validateDisableReplicationOptions(buf);   }  else   if (isStatusReplicationSubcommand()) {     validateStatusReplicationOptions(buf);   }  else   if (isInitializeReplicationSubcommand()) {     validateSourceAndDestinationServersOptions(buf);   }  else   if (isPurgeHistoricalSubcommand()) {     validatePurgeHistoricalOptions(buf);   }  else   if (isResetChangeNumber()) {     validateSourceAndDestinationServersOptions(buf);   } } "
"public void write(int b,long pos) throws IOException {   if (pos < 0) {     throw new ArrayIndexOutOfBoundsException(\"pos < 0\");   }   if (pos >= length) {     pad(pos);     length=pos + 1;   }   byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);   int offset=(int)(pos % BUFFER_LENGTH);   buf[offset]=(byte)b; } "
"public void testIsError(){   assertFalse(CoderResult.UNDERFLOW.isError());   assertFalse(CoderResult.OVERFLOW.isError());   assertTrue(CoderResult.malformedForLength(1).isError());   assertTrue(CoderResult.unmappableForLength(1).isError()); } "
"public boolean matchesDN(DN dn){   return equality != null ? equalityMatchDN(dn) : substringMatchDN(dn); } "
"@Override public void toString(StringBuilder buffer,int indent){   StringBuilder indentBuf=new StringBuilder(indent);   for (int i=0; i < indent; i++) {     indentBuf.append(' ');   }   buffer.append(indentBuf).append(\"Bind Request\").append(EOL);   buffer.append(indentBuf).append(\"  Protocol Version:  \").append(protocolVersion).append(EOL);   buffer.append(indentBuf).append(\"  DN:  \");   if (dn != null) {     buffer.append(dn);   }   buffer.append(EOL);   if (authenticationType == AuthenticationType.SIMPLE) {     buffer.append(indentBuf).append(\"  Simple Password:  \").append(simplePassword).append(EOL);   }  else {     buffer.append(indentBuf).append(\"  SASL Mechanism:  \").append(saslMechanism).append(EOL);     if (saslCredentials != null) {       buffer.append(indentBuf).append(\"  SASL Credentials:\").append(EOL);       buffer.append(saslCredentials.toHexPlusAsciiString(indent + 4));     }   } } "
"public void testPlusNegative(){   String a=\"-92948782094488478231212478987482988429808779810457634781384756794987\";   int aScale=41;   String c=\"-92948782094488478231212478987482988429808779810457634781384756794987\";   int cScale=41;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);   assertEquals(\"incorrect value\",cNumber,aNumber.plus()); } "
"static boolean criteriaIsValid(final Schema schema,final String criteria,final String valueStr,final LocalizableMessageBuilder invalidReason){   char c=criteria.charAt(0);   if (c == '!') {     return criteriaIsValid(schema,criteria.substring(1),valueStr,invalidReason);   }   if (c == '(') {     final int length=criteria.length();     int depth=1;     for (int i=1; i < length; i++) {       c=criteria.charAt(i);       if (c == ')') {         depth--;         if (depth == 0) {           final String subCriteria=criteria.substring(1,i);           if (!criteriaIsValid(schema,subCriteria,valueStr,invalidReason)) {             return false;           }           if (i == length - 1) {             return true;           }  else {             c=criteria.charAt(i + 1);             if (c == '|' || c == '&') {               return criteriaIsValid(schema,criteria.substring(i + 2),valueStr,invalidReason);             }  else {               invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,i + 1));               return false;             }           }         }       }  else       if (c == '(') {         depth++;       }     }     invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_MISSING_CLOSE_PAREN.get(valueStr,criteria));     return false;   }   if (c == '?') {     if (criteria.startsWith(\"?true\")) {       if (criteria.length() == 5) {         return true;       }  else {         c=criteria.charAt(5);         if (c == '|' || c == '&') {           return criteriaIsValid(schema,criteria.substring(6),valueStr,invalidReason);         }  else {           invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,5));           return false;         }       }     }  else     if (criteria.startsWith(\"?false\")) {       if (criteria.length() == 6) {         return true;       }  else {         c=criteria.charAt(6);         if (c == '|' || c == '&') {           return criteriaIsValid(schema,criteria.substring(7),valueStr,invalidReason);         }  else {           invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,6));           return false;         }       }     }  else {       invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_QUESTION_MARK.get(valueStr,criteria));       return false;     }   }   if (\"true\".equals(criteria) || \"false\".equals(criteria)) {     return true;   }   final int dollarPos=criteria.indexOf('$');   if (dollarPos < 0) {     invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_DOLLAR.get(valueStr,criteria));     return false;   }  else   if (dollarPos == 0) {     invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_ATTR.get(valueStr,criteria));     return false;   }  else   if (dollarPos == criteria.length() - 1) {     invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_NO_MATCH_TYPE.get(valueStr,criteria));     return false;   }  else {     try {       readOID(new SubstringReader(criteria.substring(0,dollarPos)),schema.getOption(ALLOW_MALFORMED_NAMES_AND_OPTIONS));     }  catch (    final DecodeException de) {       invalidReason.append(de.getMessageObject());       return false;     }   }   int endPos;   c=criteria.charAt(dollarPos + 1); switch (c) { case 'e':     if (criteria.startsWith(\"eq\",dollarPos + 1)) {       endPos=dollarPos + 3;       break;     }  else {       invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));       return false;     } case 's':   if (criteria.startsWith(\"substr\",dollarPos + 1)) {     endPos=dollarPos + 7;     break;   }  else {     invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));     return false;   } case 'g': if (criteria.startsWith(\"ge\",dollarPos + 1)) {   endPos=dollarPos + 3;   break; }  else {   invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1));   return false; } case 'l': if (criteria.startsWith(\"le\",dollarPos + 1)) { endPos=dollarPos + 3; break; }  else { invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1)); return false; } case 'a': if (criteria.startsWith(\"approx\",dollarPos + 1)) { endPos=dollarPos + 7; break; }  else { invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1)); return false; } default : invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_INVALID_MATCH_TYPE.get(valueStr,criteria,dollarPos + 1)); return false; } if (endPos >= criteria.length()) { return true; }  else { c=criteria.charAt(endPos); if (c == '|' || c == '&') { return criteriaIsValid(schema,criteria.substring(endPos + 1),valueStr,invalidReason); }  else { invalidReason.append(ERR_ATTR_SYNTAX_GUIDE_ILLEGAL_CHAR.get(valueStr,criteria,c,endPos)); return false; } } } "
"protected void remove(SendfileData data){   int rv=Poll.remove(sendfilePollset,data.socket);   if (rv == Status.APR_SUCCESS) {     sendfileCount--;   }   sendfileData.remove(Long.valueOf(data.socket)); } "
"public void requestAccountDisabledState(){   operations.add(PasswordPolicyStateOperationType.GET_ACCOUNT_DISABLED_STATE); } "
"public CertificateManager(String keyStorePath,String keyStoreType,char[] keyStorePassword) throws IllegalArgumentException {   ensureValid(keyStorePath,KEYSTORE_PATH_MSG);   ensureValid(keyStoreType,KEYSTORE_TYPE_MSG);   if (keyStoreType.equals(KEY_STORE_TYPE_PKCS11)) {     if (!keyStorePath.equals(KEY_STORE_PATH_PKCS11)) {       LocalizableMessage msg=ERR_CERTMGR_INVALID_PKCS11_PATH.get(KEY_STORE_PATH_PKCS11);       throw new IllegalArgumentException(msg.toString());     }   }  else   if (keyStoreType.equals(KEY_STORE_TYPE_JKS) || keyStoreType.equals(KEY_STORE_TYPE_JCEKS) || keyStoreType.equals(KEY_STORE_TYPE_PKCS12)) {     File keyStoreFile=new File(keyStorePath);     if (keyStoreFile.exists()) {       if (!keyStoreFile.isFile()) {         LocalizableMessage msg=ERR_CERTMGR_INVALID_KEYSTORE_PATH.get(keyStorePath);         throw new IllegalArgumentException(msg.toString());       }     }  else {       final File keyStoreDirectory=keyStoreFile.getParentFile();       if (keyStoreDirectory == null || !keyStoreDirectory.exists() || !keyStoreDirectory.isDirectory()) {         LocalizableMessage msg=ERR_CERTMGR_INVALID_PARENT.get(keyStorePath);         throw new IllegalArgumentException(msg.toString());       }     }   }  else {     LocalizableMessage msg=ERR_CERTMGR_INVALID_STORETYPE.get(KEY_STORE_TYPE_JKS,KEY_STORE_TYPE_JCEKS,KEY_STORE_TYPE_PKCS11,KEY_STORE_TYPE_PKCS12);     throw new IllegalArgumentException(msg.toString());   }   this.keyStorePath=keyStorePath;   this.keyStoreType=keyStoreType;   this.password=keyStorePassword;   this.keyStore=null; } "
"private static void mkdir(String dir) throws IOException {   FileUtils.createDirectory(dir); } "
"public com.sun.identity.wsfederation.jaxb.xmlsig.MgmtDataElement createMgmtDataElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.MgmtDataElementImpl(); } "
"public static String safeTruncate(final String value,final int length,final String filler){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   if (length == 0) {     return \"\";   }   if (length >= value.length()) {     return value;   }   String[] words=words(value);   StringJoiner result=new StringJoiner(\" \");   int spaceCount=0;   for (  String word : words) {     if (result.length() + word.length() + filler.length()+ spaceCount > length) {       break;     }  else {       result.add(word);       spaceCount++;     }   }   return append(result.toString(),filler); } "
"public void doPost(HttpServletRequest request,HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {   FSUtils.debug.message(\"FSSOAPReceiver.doPost: Called\");   FSUtils.checkHTTPRequestLength(request);   try {     MimeHeaders mimeHeaders=SAMLUtils.getMimeHeaders(request);     ServletInputStream sInputStream=request.getInputStream();     SOAPMessage soapMessage=msgFactory.createMessage(mimeHeaders,sInputStream);     this.onMessage(request,response,soapMessage);     return;   }  catch (  SOAPException se) {     throw new ServletException(se);   } } "
"public synchronized ContextHolder remove(String key){   return cache.remove(key); } "
"public void testCertificateFactory05() throws CertificateException, NoSuchProviderException {   if (!X509Support) {     fail(NotSupportMsg);     return;   }   CertificateFactory certF;   for (int i=0; i < validValues.length; i++) {     certF=CertificateFactory.getInstance(validValues[i],defaultProviderName);     assertEquals(\"Incorrect type\",certF.getType(),validValues[i]);     assertEquals(\"Incorrect provider name\",certF.getProvider().getName(),defaultProviderName);   } } "
"public ShortHolder(){ } "
"@Override public boolean equals(Object otherInstant){   if (this == otherInstant) {     return true;   }   if (otherInstant instanceof Instant) {     Instant other=(Instant)otherInstant;     return this.seconds == other.seconds && this.nanos == other.nanos;   }   return false; } "
"public boolean beginTextBoxDisplay(ChildDisplayEvent event){   return (curCallback != null) && (curCallback instanceof NameCallback); } "
"void reportError(String message) throws SAXException {   if (errorHandler != null)   errorHandler.error(makeException(message)); } "
"public void removeAttribute(Object name){   StyleContext context=StyleContext.this;   attributes=context.removeAttribute(attributes,name);   fireStateChanged(); } "
"public void makeImmutable(){   mutable=false; } "
"private void send(Packet packet,RADIUSServer server) throws IOException {   if (server == null) {     throw new IOException(\"No RADIUS server is online.\");   }   byte[] buffer=new byte[4096];   DatagramPacket dp=new DatagramPacket(buffer,buffer.length);   dp.setPort(server.getPort());   dp.setAddress(InetAddress.getByName(server.getHost()));   byte[] data=packet.getOctets();   dp.setLength(data.length);   dp.setData(data);   socket.send(dp);   if (debug.messageEnabled()) {     debug.message(\"Sent \" + packet);   } } "
"public StreamResult(String systemId){   this.systemId=systemId; } "
"public void addDragSourceMotionListener(DragSourceMotionListener dsml){   if (dsml != null) { synchronized (this) {       motionListener=DnDEventMulticaster.add(motionListener,dsml);     }   } } "
"public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {   StringBuffer xml=new StringBuffer(300);   String prefix=\"\";   String uri=\"\";   if (includeNS) {     prefix=IFSConstants.LIB_PREFIX;   }   if (declareNS) {     uri=IFSConstants.LIB_12_NAMESPACE_STRING;   }   xml.append(\"<\").append(prefix).append(\"Scoping\").append(uri).append(\">\\n\");   if (proxyCount >= 0) {     xml.append(\"<\").append(prefix).append(\"ProxyCount\").append(\">\").append(proxyCount).append(\"</\").append(prefix).append(\"ProxyCount\").append(\">\\n\");   }   if (idpList != null) {     xml.append(idpList.toXMLString(true,false));   }   xml.append(\"</\").append(prefix).append(\"Scoping\").append(\">\\n\");   return xml.toString(); } "
"public void addMessageDestinationRef(MessageDestinationRef mdr){   if (entries.contains(mdr.getName())) {     return;   }  else {     if (!checkResourceType(mdr)) {       throw new IllegalArgumentException(sm.getString(\"namingResources.resourceTypeFail\",mdr.getName(),mdr.getType()));     }     entries.add(mdr.getName());   } synchronized (mdrs) {     mdr.setNamingResources(this);     mdrs.put(mdr.getName(),mdr);   }   support.firePropertyChange(\"messageDestinationRef\",null,mdr); } "
"public long simpleQueryForLong(){   acquireReference();   try {     return getSession().executeForLong(getSql(),getBindArgs(),getConnectionFlags(),null);   }  catch (  SQLiteDatabaseCorruptException ex) {     onCorruption();     throw ex;   }  finally {     releaseReference();   } } "
"@SuppressWarnings(\"unused\") public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   submitCycle=true;   String subConfigName=(String)getDisplayFieldValue(TF_EVENT_HANDLER_NAME);   if (StringUtils.isBlank(subConfigName)) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,ERROR_MESSAGE,\"message.missing.name\");     forwardTo();   }   AbstractAuditModel model=(AbstractAuditModel)getModel();   try {     AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);     String schemaName=(String)getPageSessionAttribute(AUDIT_HANDLER_TYPE);     @SuppressWarnings(\"unchecked\") Map<String,Set<String>> values=ps.getAttributeValues(model.getEventHandlerAttributeNames(schemaName));     model.createEventHandler(subConfigName,schemaName,values);     backToProfileViewBean();   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,ERROR_MESSAGE,e.getMessage());     forwardTo();   } } "
"public void testIntbyInt2(){   byte aBytes[]={-1,-1,-1,-1};   byte bBytes[]={-1,-1,-1,-1};   int aSign=1;   int bSign=1;   byte rBytes[]={0,-1,-1,-1,-2,0,0,0,1};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.multiply(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"@Override public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){   throw new UnsupportedOperationException(PdfException.TwoBarcodeMustBeExternally); } "
"public Message resendRequest(String returnToURL,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws InteractionRedirectException, InteractionException, SOAPBindingException, SOAPFaultException {   return resendRequest(returnToURL,httpRequest,httpResponse,null); } "
"public String toString(boolean includeNS,boolean declareNS){   StringBuffer result=new StringBuffer(1000);   result.append(\"<\").append(WSSEConstants.TAG_SEC + \":\").append(WSSEConstants.TAG_RESOURCEACCESSSTATEMENT).append(\" \").append(WSSEConstants.TAG_XML_SEC).append(\"=\").append(\"\\\"\").append(WSSEConstants.NS_SEC).append(\"\\\"\");   result.append(\">\\n\").append(this._subject.toString(includeNS,true));   if (_resourceID != null) {     result.append(_resourceID);   }  else   if (_encryptedResourceID != null) {     result.append(_encryptedResourceID);   }   if (_proxySubject != null) {     result.append(_proxySubject.toString(includeNS,true));     if (_sessionContext != null) {       try {         result.append(_sessionContext.toXMLString(includeNS,true));       }  catch (      Exception e) {       }     }   }   result.append(\"</\").append(WSSEConstants.TAG_SEC + \":\").append(WSSEConstants.TAG_RESOURCEACCESSSTATEMENT).append(\">\\n\");   return (result.toString()); } "
"public void goToNextColor(){   mColorIndex=(mColorIndex + 1) % (mColors.length); } "
"public Builder collective(boolean isCollective){   this.isCollective=isCollective;   return this; } "
"public ZipException(){   super(); } "
"private Readers(){ } "
"public PolicyEvaluationException(String message,String reqId){   super(message);   this.reqId=reqId; } "
"public SessionNotification parseXML(){   if (document == null) {     return null;   }   Element elem=document.getDocumentElement();   sessionNotification=new SessionNotification();   String temp=elem.getAttribute(\"vers\");   sessionNotification.setNotificationVersion(temp);   temp=elem.getAttribute(\"notid\");   sessionNotification.setNotificationID(temp);   NodeList nodelist=elem.getElementsByTagName(\"Session\");   if (nodelist != null && nodelist.getLength() != 0) {     Element sess=(Element)nodelist.item(0);     if (sess != null) {       sessionNotification.setSessionInfo(SessionResponseParser.parseSessionElement(sess));     }   }   nodelist=elem.getElementsByTagName(\"Type\");   if (nodelist != null && nodelist.getLength() != 0) {     Element type=(Element)nodelist.item(0);     if (type != null) {       try {         int sType=(new Integer(SessionRequestParser.parseCDATA(type))).intValue();         sessionNotification.setNotificationType(sType);       }  catch (      Exception e) {         SessionRequestParser.debug.message(\"Session.Notif Type\",e);       }     }   }   nodelist=elem.getElementsByTagName(\"Time\");   if (nodelist != null && nodelist.getLength() != 0) {     Element time=(Element)nodelist.item(0);     if (time != null) {       try {         long sTime=(new Long(SessionRequestParser.parseCDATA(time))).longValue();         sessionNotification.setNotificationTime(sTime);       }  catch (      Exception e) {         SessionRequestParser.debug.message(\"Session.Notif Time\",e);       }     }   }   return sessionNotification; } "
"private static void processProxyAuthControls(Operation operation,String oid) throws DirectoryException {   final Entry authorizationEntry;   if (OID_PROXIED_AUTH_V1.equals(oid)) {     final ProxiedAuthV1Control proxyControlV1=operation.getRequestControl(ProxiedAuthV1Control.DECODER);     operation.addAdditionalLogItem(AdditionalLogItem.keyOnly(operation.getClass(),\"obsoleteProxiedAuthzV1Control\"));     checkPrivilegeForProxyAuthControl(operation);     authorizationEntry=proxyControlV1.getAuthorizationEntry();   }  else   if (OID_PROXIED_AUTH_V2.equals(oid)) {     final ProxiedAuthV2Control proxyControlV2=operation.getRequestControl(ProxiedAuthV2Control.DECODER);     checkPrivilegeForProxyAuthControl(operation);     authorizationEntry=proxyControlV2.getAuthorizationEntry();   }  else {     return;   }   checkAciForProxyAuthControl(operation,authorizationEntry);   operation.setAuthorizationEntry(authorizationEntry);   operation.setProxiedAuthorizationDN(authorizationEntry != null ? authorizationEntry.getName() : DN.rootDN()); } "
"public void testIntValueNegative2(){   byte aBytes[]={-12,56,100};   int result=-771996;   int aNumber=new BigInteger(aBytes).intValue();   assertTrue(aNumber == result); } "
"public void paintListBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public static void sort(byte[] array){   DualPivotQuicksort.sort(array); } "
"private void postTest() throws Exception {   debugInfo(\"Post test cleaning.\");   stop(broker2,broker3,broker4);   broker2=broker3=broker4=null;   remove(replServer1,replServer2,replServer3);   replServer1=replServer2=replServer3=null;   super.cleanRealEntries();   Arrays.fill(replServerPort,0);   TestCaseUtils.initializeTestBackend(false); } "
"public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextType createSessionContextType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextTypeImpl(); } "
"public void write() throws IOException, BadLocationException {   styleNameMapping=new Hashtable<String,String>();   writeStartTag(\"<html>\");   writeHeader();   writeBody();   writeEndTag(\"</html>\"); } "
"public void track(String path,Object marker,FileDeleteStrategy deleteStrategy){   if (path == null) {     throw new NullPointerException(\"The path must not be null\");   }   addTracker(path,marker,deleteStrategy); } "
"public void focusGained(FocusEvent e){   comboBox.repaint(); } "
"public static GSSAPISASLBindRequest newGSSAPISASLBindRequest(final String authenticationID,final byte[] password){   return new GSSAPISASLBindRequestImpl(authenticationID,password); } "
"public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {   if (p_scheme == null || p_scheme.trim().length() == 0) {     throw new MalformedURIException(\"Cannot construct URI with null/empty scheme!\");   }   if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {     throw new MalformedURIException(\"Cannot construct URI with null/empty scheme-specific part!\");   }   setScheme(p_scheme);   setPath(p_schemeSpecificPart); } "
"@Override public synchronized void close() throws SecurityException {   super.close();   if (sock != null) {     try {       sock.close();     }  catch (    IOException ix) {     }   }   sock=null; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node testEmployee;   NamedNodeMap attributes;   int length;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"address\");   testEmployee=elementList.item(2);   attributes=testEmployee.getAttributes();   length=(int)attributes.getLength();   assertEquals(\"length\",2,length); } "
"private void failOnlyForStrictEvaluation(Entry e){   try {     LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();     DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);     assertFalse(e.conformsToSchema(null,false,true,true,invalidReason),\"Entry validation succeeded with REJECT policy\");     DirectoryServer.setSingleStructuralObjectClassPolicy(WARN);     assertTrue(e.conformsToSchema(null,false,true,true,invalidReason),\"Entry validation failed with WARN policy:  \" + invalidReason);     DirectoryServer.setSingleStructuralObjectClassPolicy(ACCEPT);     assertTrue(e.conformsToSchema(null,false,true,true,invalidReason),\"Entry validation failed with ACCEPT policy:  \" + invalidReason);   }   finally {     DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);   } } "
"public void testClearBitPositiveInside3(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=45;   byte rBytes[]={1,-128,56,100,-2,-76,89,13,91,3,-15,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.clearBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"@DataProvider(name=\"validasciidata\") public Object[][] createValidASCIIData(){   return new Object[][]{{(char)1,false,-1,-1,false,false,false,false},{'-',false,-1,-1,false,false,true,true},{'_',false,-1,-1,false,false,false,true},{'.',false,-1,-1,false,false,false,true},{'+',false,-1,-1,false,false,false,false},{'=',false,-1,-1,false,false,false,true},{'a',false,10,-1,true,false,true,true},{'A',true,10,-1,true,false,true,true},{'f',false,15,-1,true,false,true,true},{'F',true,15,-1,true,false,true,true},{'z',false,-1,-1,true,false,true,true},{'Z',true,-1,-1,true,false,true,true},{'0',false,0,0,false,true,true,true},{'9',false,9,9,false,true,true,true}}; } "
"public static void addAttribute(SerializationHandler handler,int attr) throws TransformerException {   TransformerImpl transformer=(TransformerImpl)handler.getTransformer();   DTM dtm=transformer.getXPathContext().getDTM(attr);   if (SerializerUtils.isDefinedNSDecl(handler,attr,dtm))   return;   String ns=dtm.getNamespaceURI(attr);   if (ns == null)   ns=\"\";   try {     handler.addAttribute(ns,dtm.getLocalName(attr),dtm.getNodeName(attr),\"CDATA\",dtm.getNodeValue(attr),false);   }  catch (  SAXException e) {   } } "
"public void testCipherSpi06() throws BadPaddingException, ShortBufferException, IllegalBlockSizeException {   Mock_CipherSpi cSpi=new Mock_CipherSpi();   int len=10;   byte[] bbuf=new byte[len];   for (int i=0; i < bbuf.length; i++) {     bbuf[i]=(byte)i;   }   ByteBuffer bb1=ByteBuffer.wrap(bbuf);   ByteBuffer bbNull=null;   try {     cSpi.engineDoFinal(bbNull,bb1);     fail(\"NullPointerException must be thrown\");   }  catch (  NullPointerException e) {   }   try {     cSpi.engineDoFinal(bb1,bbNull);     fail(\"NullPointerException must be thrown\");   }  catch (  NullPointerException e) {   }   ByteBuffer bb2=ByteBuffer.allocate(len);   bb1.position(bb1.limit());   assertEquals(\"Incorrect result\",0,cSpi.engineDoFinal(bb1,bb2));   bb1.position(0);   bb2.position(len - 2);   try {     cSpi.engineDoFinal(bb1,bb2);     fail(\"ShortBufferException must be thrown. Output buffer remaining: \".concat(Integer.toString(bb2.remaining())));   }  catch (  ShortBufferException e) {   }   int pos=5;   bb1.position(pos);   bb2.position(0);   assertTrue(\"Incorrect result\",cSpi.engineDoFinal(bb1,bb2) > 0); } "
"public void remove(int childIndex){   MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);   children.removeElementAt(childIndex);   child.setParent(null); } "
"static public void assertEquals(Object expected,Object actual){   assertEquals(null,expected,actual); } "
"public void performPostDelete(ServerManagedObject<?> managedObject) throws ConfigException { } "
"public void addExtension(String oid,boolean critical,ASN1Encodable value){   this.addExtension(new DERObjectIdentifier(oid),critical,value); } "
"public void testSetNull_int_int() throws SQLException {   PreparedStatement ps=null;   try {     String query=\"insert into type (BoolVal, IntVal) values ('true', ?);\";     ps=conn.prepareStatement(query);     Statement st=null;     try {       ps.setNull(1,Types.INTEGER);       ps.execute();     }   finally {       try {         ps.close();       }  catch (      Exception ee) {       }     }     query=\"insert into type (BoolVal, LongVal) values ('true', ?);\";     ps=conn.prepareStatement(query);     try {       ps.setNull(1,Types.BIGINT);       ps.execute();     }   finally {       try {         ps.close();       }  catch (      Exception ee) {       }     }     query=\"insert into type (BoolVal, DecVal) values ('true', ?)\";     ps=conn.prepareStatement(query);     try {       ps.setNull(1,Types.DECIMAL);       ps.execute();     }   finally {       try {         ps.close();       }  catch (      Exception ee) {       }     }     query=\"insert into type (BoolVal, dateVal) values ('true', ?);\";     ps=conn.prepareStatement(query);     try {       ps.setNull(1,Types.DATE);       ps.execute();     }   finally {       try {         ps.close();       }  catch (      Exception ee) {       }     }     query=\"insert into type (BoolVal, BlobVal) values ('true', ?);\";     ps=conn.prepareStatement(query);     try {       ps.setNull(1,Types.BLOB);       ps.execute();     }   finally {       try {         ps.close();       }  catch (      Exception ee) {       }     }     query=\"insert into type (BoolVal, TextVal) values ('true', ?);\";     ps=conn.prepareStatement(query);     ps.setNull(1,Types.CHAR);     ps.execute();   }   finally {     try {       ps.close();     }  catch (    Exception ee) {     }   } } "
"public HashAttributeSet(AttributeSet attributes){   this(attributes,Attribute.class); } "
"private synchronized void init(String instanceRDN) throws Exception {   String srvcName=getServiceName();   if (adminToken == null) {     adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());     sManager=new ServiceManager(adminToken);     ServiceSchemaManager schemaManager=sManager.getSchemaManager(srvcName,SERVICE_VERSION);     clientServiceSchema=schemaManager.getGlobalSchema();     clientSchema=clientServiceSchema.getSubSchema(DBSTORE_SUBSCHEMA_ID);     clientSchema=clientSchema.getSubSchema(CLIENT_SUBSCHEMA_ID);     amConnection=new AMStoreConnection(adminToken);     topLevelDN=amConnection.getOrganizationDN(null,null);     initClientSchema();     initConfigurationInfo(clientServiceSchema);     clientDataDN=CLIENT_DATA_DN_PREFIX + COMMA + topLevelDN;   }   databaseDN=instanceRDN + COMMA + clientDataDN;   amClientOrg=amConnection.getOrganizationalUnit(databaseDN); } "
"public com.sun.identity.liberty.ws.interaction.jaxb.InquiryType.Confirm createInquiryTypeConfirm() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryTypeImpl.ConfirmImpl(); } "
"public void remove(int index){   Component comp=getComponent(index);   if (comp == leftComponent) {     leftComponent=null;   }  else   if (comp == rightComponent) {     rightComponent=null;   }   super.remove(index);   revalidate();   repaint(); } "
"private Class<?> findClassDalvik(String name) throws ClassNotFoundException {   if (mDexFile == null) { synchronized (FancyLoader.class) {       Constructor ctor;       try {         ctor=mDexClass.getConstructor(new Class[]{String.class});       }  catch (      NoSuchMethodException nsme) {         throw new ClassNotFoundException(\"getConstructor failed\",nsme);       }       try {         mDexFile=ctor.newInstance(DEX_FILE);       }  catch (      InstantiationException ie) {         throw new ClassNotFoundException(\"newInstance failed\",ie);       } catch (      IllegalAccessException iae) {         throw new ClassNotFoundException(\"newInstance failed\",iae);       } catch (      InvocationTargetException ite) {         throw new ClassNotFoundException(\"newInstance failed\",ite);       }     }   }   Method meth;   try {     meth=mDexClass.getMethod(\"loadClass\",new Class[]{String.class,ClassLoader.class});   }  catch (  NoSuchMethodException nsme) {     throw new ClassNotFoundException(\"getMethod failed\",nsme);   }   try {     meth.invoke(mDexFile,name,this);   }  catch (  IllegalAccessException iae) {     throw new ClassNotFoundException(\"loadClass failed\",iae);   } catch (  InvocationTargetException ite) {     throw new ClassNotFoundException(\"loadClass failed\",ite.getCause());   }   return null; } "
"public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl,FlavorMap flavorMap) throws InvalidDnDOperationException {   SunDragSourceContextPeer.setDragDropInProgress(true);   try {     if (flavorMap != null)     this.flavorMap=flavorMap;     DragSourceContextPeer dscp=Toolkit.getDefaultToolkit().createDragSourceContextPeer(trigger);     DragSourceContext dsc=createDragSourceContext(dscp,trigger,dragCursor,dragImage,imageOffset,transferable,dsl);     if (dsc == null) {       throw new InvalidDnDOperationException();     }     dscp.startDrag(dsc,dsc.getCursor(),dragImage,imageOffset);   }  catch (  RuntimeException e) {     SunDragSourceContextPeer.setDragDropInProgress(false);     throw e;   } } "
"private Template parseTemplateDefinition(String[] templateLines,int startLineNumber,Map<String,Tag> tags,Map<String,Template> definedTemplates,List<LocalizableMessage> warnings) throws InitializationException, MakeLDIFException {   String templateName=templateLines[0].substring(10).trim();   int arrayLineNumber=1;   Template parentTemplate=null;   AttributeType[] rdnAttributes=null;   ArrayList<String> subTemplateNames=new ArrayList<>();   ArrayList<Integer> entriesPerTemplate=new ArrayList<>();   for (; arrayLineNumber < templateLines.length; arrayLineNumber++) {     int lineNumber=startLineNumber + arrayLineNumber;     String line=templateLines[arrayLineNumber];     String lowerLine=toLowerCase(line);     if (lowerLine.startsWith(\"#\")) {       continue;     }  else     if (lowerLine.startsWith(\"extends: \")) {       String parentTemplateName=line.substring(9).trim();       parentTemplate=definedTemplates.get(parentTemplateName.toLowerCase());       if (parentTemplate == null) {         LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_INVALID_PARENT_TEMPLATE.get(parentTemplateName,lineNumber,templateName);         throw new MakeLDIFException(message);       }     }  else     if (lowerLine.startsWith(\"rdnattr: \")) {       ArrayList<AttributeType> attrList=new ArrayList<>();       String rdnAttrNames=lowerLine.substring(9).trim();       StringTokenizer tokenizer=new StringTokenizer(rdnAttrNames,\"+\");       while (tokenizer.hasMoreTokens()) {         attrList.add(DirectoryServer.getSchema().getAttributeType(tokenizer.nextToken()));       }       rdnAttributes=new AttributeType[attrList.size()];       attrList.toArray(rdnAttributes);     }  else     if (lowerLine.startsWith(\"subordinatetemplate: \")) {       int colonPos=line.indexOf(':',21);       if (colonPos <= 21) {         LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_TEMPLATE_NO_COLON.get(lineNumber,templateName);         throw new MakeLDIFException(message);       }       String subTemplateName=line.substring(21,colonPos).trim();       int numEntries;       try {         numEntries=Integer.parseInt(line.substring(colonPos + 1).trim());         if (numEntries < 0) {           LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_INVALID_NUM_ENTRIES.get(lineNumber,templateName,numEntries,subTemplateName);           throw new MakeLDIFException(message);         }  else         if (numEntries == 0) {           LocalizableMessage message=WARN_MAKELDIF_TEMPLATE_SUBORDINATE_ZERO_ENTRIES.get(lineNumber,templateName,subTemplateName);           warnings.add(message);         }         subTemplateNames.add(subTemplateName);         entriesPerTemplate.add(numEntries);       }  catch (      NumberFormatException nfe) {         LocalizableMessage message=ERR_MAKELDIF_TEMPLATE_SUBORDINATE_CANT_PARSE_NUMENTRIES.get(subTemplateName,lineNumber,templateName);         throw new MakeLDIFException(message);       }     }  else {       break;     }   }   String[] subordinateTemplateNames=new String[subTemplateNames.size()];   subTemplateNames.toArray(subordinateTemplateNames);   int[] numEntriesPerTemplate=new int[entriesPerTemplate.size()];   for (int i=0; i < numEntriesPerTemplate.length; i++) {     numEntriesPerTemplate[i]=entriesPerTemplate.get(i);   }   TemplateLine[] parsedLines;   if (parentTemplate == null) {     parsedLines=new TemplateLine[0];   }  else {     TemplateLine[] parentLines=parentTemplate.getTemplateLines();     parsedLines=new TemplateLine[parentLines.length];     System.arraycopy(parentLines,0,parsedLines,0,parentLines.length);   }   Template template=new Template(this,templateName,rdnAttributes,subordinateTemplateNames,numEntriesPerTemplate,parsedLines);   for (; arrayLineNumber < templateLines.length; arrayLineNumber++) {     String line=templateLines[arrayLineNumber];     String lowerLine=toLowerCase(line);     int lineNumber=startLineNumber + arrayLineNumber;     if (lowerLine.startsWith(\"#\")) {       continue;     }     template.addTemplateLine(parseTemplateLine(line,lowerLine,lineNumber,null,template,tags,warnings));   }   return template; } "
"public void testSetBitPositiveInside2(){   byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=17;   byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-13,35,26};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger result=aNumber.setBit(number);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"private JsonValue validateConnector() throws Exception {   System.out.println(\"1. Validate that the connection with the Azure connector is OK:\");   HttpResponse<String> response=Unirest.post(azureEndpoint + \"?_action=test\").header(\"x-openidm-username\",\"openidm-admin\").header(\"x-openidm-password\",\"openidm-admin\").asString();   return json(readJson(response.getBody())); } "
"public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {   return super.newInstance(javaContentInterface); } "
"public boolean hasExperienceReward(){   return experienceReward; } "
"public ShapeTileBox bounding_box(int p_from_corner_no,int p_to_corner_no){   int from_corner_no=Math.max(p_from_corner_no,0);   int to_corner_no=Math.min(p_to_corner_no,plaline_len(-2));   double llx=Integer.MAX_VALUE;   double lly=llx;   double urx=Integer.MIN_VALUE;   double ury=urx;   for (int i=from_corner_no; i <= to_corner_no; ++i) {     PlaPointFloat curr_corner=corner_approx(i);     llx=Math.min(llx,curr_corner.v_x);     lly=Math.min(lly,curr_corner.v_y);     urx=Math.max(urx,curr_corner.v_x);     ury=Math.max(ury,curr_corner.v_y);   }   PlaPointInt lower_left=new PlaPointInt(Math.floor(llx),Math.floor(lly));   PlaPointInt upper_right=new PlaPointInt(Math.ceil(urx),Math.ceil(ury));   return new ShapeTileBox(lower_left,upper_right); } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.TokenTypesOfferedType createTokenTypesOfferedType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenTypesOfferedTypeImpl(); } "
"private void readID() throws IOException, ClassFormatException {   if (dataInputStream.readInt() != MAGIC) {     throw new ClassFormatException(\"It is not a Java .class file\");   } } "
"protected final void implAccept(Socket s) throws IOException {   SocketImpl si=null;   try {     if (s.impl == null)     s.setImpl();  else {       s.impl.reset();     }     si=s.impl;     s.impl=null;     si.address=new InetAddress();     si.fd=new FileDescriptor();     getImpl().accept(si);     SecurityManager security=System.getSecurityManager();     if (security != null) {       security.checkAccept(si.getInetAddress().getHostAddress(),si.getPort());     }   }  catch (  IOException e) {     if (si != null)     si.reset();     s.impl=si;     throw e;   } catch (  SecurityException e) {     if (si != null)     si.reset();     s.impl=si;     throw e;   }   s.impl=si;   s.postAccept(); } "
"@Override public boolean removeOperationInProgress(int messageID){   Operation operation=operationsInProgress.remove(messageID);   if (operation == null) {     return false;   }   if (operation.getOperationType() == OperationType.ABANDON && keepStats && operation.getResultCode() == ResultCode.CANCELLED) {     statTracker.updateAbandonedOperation();   }   lastCompletionTime.set(TimeThread.getTime());   return true; } "
"public static String decode(String s){   String str=null;   try {     str=decode(s,\"UTF8\");   }  catch (  UnsupportedEncodingException e) {   }   return str; } "
"private void webServerStop(){   mAppManager.startService(WebServerService.class,WEB_SERVER_SERVICE_STOP); } "
"public static KeyStore loadCacertsKeyStore(){   return loadCacertsKeyStore(null); } "
"ByteString entryToDatabase(Entry entry,DataConfig dataConfig) throws DirectoryException {   EntryCodec codec=acquireEntryCodec();   try {     return codec.encode(entry,dataConfig);   }   finally {     codec.release();   } } "
"public Policy(String policyName) throws InvalidNameException {   this(policyName,null); } "
"public void resetOriginals(){   mStartingStartTrim=0;   mStartingEndTrim=0;   mStartingRotation=0;   setStartTrim(0);   setEndTrim(0);   setRotation(0); } "
"public static boolean verifyTimestampCertificates(TimeStampToken ts,KeyStore keystore,String provider){   try {     for (    X509Certificate certStoreX509 : SignUtils.getCertificates(keystore)) {       try {         SignUtils.isSignatureValid(ts,certStoreX509,provider);         return true;       }  catch (      Exception ex) {       }     }   }  catch (  Exception e) {   }   return false; } "
"public FAMRecord(String svc,String op,String pKey,long eDate,String secKey,int st,String ax,byte[] serializedInternalSessionBlob){   this.setService(svc);   this.setOperation(op);   this.setPrimaryKey(pKey);   this.setExpDate(eDate);   this.setSecondaryKey(secKey);   this.setState(st);   this.setAuxData(ax);   this.setSerializedInternalSessionBlob(serializedInternalSessionBlob); } "
"public static PolicyListenerRequest parseXML(Node pNode) throws PolicyEvaluationException {   PolicyListenerRequest policyListenerReq=new PolicyListenerRequest();   String attr=XMLUtils.getNodeAttributeValue(pNode,SERVICE_NAME);   if (attr == null) {     debug.error(\"PolicyListenerRequest: missing attribute \" + SERVICE_NAME);     String objs[]={SERVICE_NAME};     throw new PolicyEvaluationException(ResBundleUtils.rbName,\"missing_attribute\",objs,null);   }   policyListenerReq.setServiceName(attr);   attr=XMLUtils.getNodeAttributeValue(pNode,NOTIFICATION_URL);   if (attr == null) {     debug.error(\"PolicyListenerRequest: missing attribute \" + NOTIFICATION_URL);     String objs[]={NOTIFICATION_URL};     throw new PolicyEvaluationException(ResBundleUtils.rbName,\"missing_attribute\",objs,null);   }   policyListenerReq.setNotificationURL(attr);   return policyListenerReq; } "
"private Diffs(){ } "
"public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {   String prefixLIB=\"\";   String uriLIB=\"\";   String uriSAML=\"\";   if (includeNS) {     prefixLIB=IFSConstants.LIB_PREFIX;   }   if (declareNS) {     uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;     uriSAML=IFSConstants.assertionDeclareStr;   }   String instantString=null;   try {     instantString=DateUtils.toUTCDateFormat(issueInstant);   }  catch (  Exception e) {     FSUtils.debug.error(\"FSNameIdentifierMappingResponse.toXMLString:\" + \" could not convert issueInstant to String.\",e);   }   StringBuffer xml=new StringBuffer(1000);   if (includeHeader) {     xml.append(IFSConstants.XML_PREFIX).append(SAMLConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);   }   xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.NAMEID_MAPPING_RESPONSE).append(uriLIB).append(uriSAML).append(IFSConstants.SPACE).append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(responseID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(inResponseTo).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(instantString).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.RIGHT_ANGLE);   if (signed) {     if (signatureString != null) {       xml.append(signatureString);     }  else     if (signature != null) {       signatureString=XMLUtils.print(signature);       xml.append(signatureString);     }   }   xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerID).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(status.toString(includeNS,true));   if (nameIdentifier != null) {     xml.append(nameIdentifier.toString());   }   xml.append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.NAMEID_MAPPING_RESPONSE).append(IFSConstants.RIGHT_ANGLE);   return xml.toString(); } "
"protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {   Attributes mainAttributes=manifest.getMainAttributes();   String dirName=packageName.replace('.','/') + \"/\";   Attributes packageAttributes=manifest.getAttributes(dirName);   boolean noEntry=false;   if (packageAttributes == null) {     noEntry=true;     packageAttributes=mainAttributes;   }   String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);   if (specificationTitle == null && !noEntry) {     specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);   }   String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);   if (specificationVersion == null && !noEntry) {     specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);   }   String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);   if (specificationVendor == null && !noEntry) {     specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);   }   String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);   if (implementationTitle == null && !noEntry) {     implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);   }   String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);   if (implementationVersion == null && !noEntry) {     implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);   }   String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);   if (implementationVendor == null && !noEntry) {     implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);   }   return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null); } "
"public LookAndFeelInfo(String name,String className){   this.name=name;   this.className=className; } "
"public static ByteBuffer expand(ByteBuffer in,int newSize){   if (in.capacity() >= newSize) {     return in;   }   ByteBuffer out;   boolean direct=false;   if (in.isDirect()) {     out=ByteBuffer.allocateDirect(newSize);     direct=true;   }  else {     out=ByteBuffer.allocate(newSize);   }   in.flip();   out.put(in);   if (direct) {     cleanDirectBuffer(in);   }   return out; } "
"private static final <T>boolean removeMap(MapElement<T>[] oldMap,MapElement<T>[] newMap,String name){   int pos=find(oldMap,name);   if ((pos != -1) && (name.equals(oldMap[pos].name))) {     System.arraycopy(oldMap,0,newMap,0,pos);     System.arraycopy(oldMap,pos + 1,newMap,pos,oldMap.length - pos - 1);     return true;   }   return false; } "
"public void testPosPosFirstLonger(){   String numA=\"2837462783428374767845648748973847593874837948575684767\";   String numB=\"293478573489347658763745839457637\";   String res=\"2837462783428374767845615168483972194300564226167553530\";   BigInteger aNumber=new BigInteger(numA);   BigInteger bNumber=new BigInteger(numB);   BigInteger result=aNumber.xor(bNumber);   assertTrue(res.equals(result.toString())); } "
"public final boolean hasContended(){   return head != null; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateattribute.class,args); } "
"public void rotate(){   if (rotatable) {     long systime=System.currentTimeMillis();     if ((systime - rotationLastChecked) > 1000) { synchronized (this) {         if ((systime - rotationLastChecked) > 1000) {           rotationLastChecked=systime;           String tsDate;           tsDate=fileDateFormatter.format(new Date(systime));           if (!dateStamp.equals(tsDate)) {             close(true);             dateStamp=tsDate;             open();           }         }       }     }   } } "
"public void test_indexOfSubList2(){   ArrayList sub=new ArrayList();   sub.add(new Integer(1));   sub.add(new Integer(2));   sub.add(new Integer(3));   ArrayList sub2=new ArrayList();   sub2.add(new Integer(7));   sub2.add(new Integer(8));   ArrayList src=new ArrayList();   src.addAll(sub);   src.addAll(sub);   src.addAll(sub);   src.add(new Integer(5));   src.add(new Integer(6));   sub=new ArrayList(src.subList(3,11));   assertEquals(\"TestA : Returned wrong indexOfSubList, \",3,Collections.indexOfSubList(src,sub));   sub=new ArrayList(src.subList(6,11));   assertEquals(\"TestB : Returned wrong indexOfSubList, \",6,Collections.indexOfSubList(src,sub));   sub=new ArrayList(src.subList(0,3));   assertEquals(\"TestCC : Returned wrong indexOfSubList, \",0,Collections.indexOfSubList(src,sub));   sub=new ArrayList(src.subList(9,11));   assertEquals(\"TestD : Returned wrong indexOfSubList, \",9,Collections.indexOfSubList(src,sub));   sub=new ArrayList(src.subList(10,11));   assertEquals(\"TestE : Returned wrong indexOfSubList, \",10,Collections.indexOfSubList(src,sub));   sub=new ArrayList(src.subList(0,11));   assertEquals(\"TestH : Returned wrong indexIndexOfSubList, \",0,Collections.indexOfSubList(src,sub));   assertEquals(\"TestI : Returned wrong indexOfSubList, \",-1,Collections.indexOfSubList(src,sub2)); } "
"public Branch(TemplateFile templateFile,DN branchDN){   this(templateFile,branchDN,new String[0],new int[0],new TemplateLine[0]); } "
"@Override public void write(int b) throws IOException {   if (debug > 1) {     System.out.println(\"write \" + b + \" in CompressionResponseStream \");   }   if (closed)   throw new IOException(\"Cannot write to a closed output stream\");   if (bufferCount >= buffer.length) {     flushToGZip();   }   buffer[bufferCount++]=(byte)b; } "
"@Override public synchronized void reset() throws IOException {   if (!markSupported) {     throw new UnsupportedOperationException(\"Mark not supported\");   }   if (mark < 0) {     throw new IOException(\"No position has been marked\");   }   if (position > mark + readlimit) {     throw new IOException(\"Marked position [\" + mark + \"] is no longer valid - passed the read limit [\"+ readlimit+ \"]\");   }   position=mark;   eof=false; } "
"void add(JScrollPane scroll,Point p){   scrolls.add(scroll);   points.add(p); } "
"public Image scaleToFit(float fitWidth,float fitHeight){   float horizontalScaling=fitWidth / xObject.getWidth();   float verticalScaling=fitHeight / xObject.getHeight();   return scale(Math.min(horizontalScaling,verticalScaling),Math.min(horizontalScaling,verticalScaling)); } "
"ProductVersion(String version,String revision){   this.version=new ComparableVersion(version);   this.revision=revision; } "
"public ScrollBar(int orientation){   super(orientation);   this.putClientProperty(\"JScrollBar.fastWheelScrolling\",Boolean.TRUE); } "
"public static String decrypt(String encrypted){   String tmp;   try {     tmp=(Crypt.decode(encrypted));   }  catch (  Exception ex) {     tmp=encrypted;   }   if (tmp == null) {     tmp=encrypted;   }   return tmp; } "
"public static SimplePropertyMapper simple(final String attribute){   return simple(AttributeDescription.valueOf(attribute)); } "
"public static boolean containsAll(final String value,final String[] needles){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   return Arrays.stream(needles).allMatch(null); } "
"public SelectConditionTypeViewBean(){   super(\"SelectConditionType\",DEFAULT_DISPLAY_URL); } "
"public T linkQualifier(String linkQualifier){   jsonValue.put(LINK_QUALIFIER,linkQualifier);   return self(); } "
"public void testRemainderKnuth1(){   byte aBytes[]={-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1};   byte bBytes[]={0,1,2,3,4,5,6,7,8,9,10};   int aSign=1;   int bSign=1;   byte rBytes[]={1,2,3,4,5,6,7,7,18,-89};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.remainder(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public void runTest() throws Throwable {   Document doc;   Element newElement;   String newElementName;   int newElementType;   String newElementValue;   doc=(Document)load(\"hc_staff\",true);   newElement=doc.createElement(\"acronym\");   newElementName=newElement.getNodeName();   assertEqualsAutoCase(\"element\",\"strong\",\"acronym\",newElementName);   newElementType=(int)newElement.getNodeType();   assertEquals(\"type\",1,newElementType);   newElementValue=newElement.getNodeValue();   assertNull(\"valueInitiallyNull\",newElementValue); } "
"private void initializeBackGroundProcessing(){   if (backgroundThread == null) {     DirectoryServer.registerShutdownListener(this);     stopRequested=false;     backgroundThread=new BackGroundThread();     backgroundThread.start();   } } "
"public final void testGetEncoded04() throws IOException {   boolean performed=false;   for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {     try {       EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.algName0[i][0],EncryptedPrivateKeyInfoData.encryptedData);       byte[] ec1=epki.getEncoded();       byte[] ec2=epki.getEncoded();       byte[] ec3=epki.getEncoded();       assertNotSame(ec1,ec2);       assertNotSame(ec2,ec3);       assertNotSame(ec1,ec3);       performed=true;     }  catch (    NoSuchAlgorithmException allowedFailure) {     }   }   assertTrue(\"Test not performed\",performed); } "
"private final void dispatachChars(Node node) throws org.xml.sax.SAXException {   if (m_Serializer != null) {     this.m_Serializer.characters(node);   }  else {     String data=((Text)node).getData();     this.m_contentHandler.characters(data.toCharArray(),0,data.length());   } } "
"public boolean containsKey(Object key){   return map.containsKey(key); } "
"protected final void openSession(){   openSessionForRead(null,null); } "
"public static ComponentUI createUI(JComponent a){   ComponentUI mui=new MultiScrollBarUI();   return MultiLookAndFeel.createUIs(mui,((MultiScrollBarUI)mui).uis,a); } "
"public Set searchSubOrgNames(SSOToken token,String pattern,boolean recursive) throws SMSException, SSOException {   SMSEntry.validateToken(token);   if (debug.messageEnabled()) {     debug.message(\"CachedSubEntries: reading subOrgNames DN: \" + cachedEntry.getDN() + \" pattern: \"+ pattern);   }   return (cachedEntry.getSMSEntry().searchSubOrgNames(token,pattern,0,!recursive,!recursive,recursive)); } "
"public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {   java.security.cert.Certificate cert;   List certs=new ArrayList();   while ((cert=engineGenerateCertificate(inStream)) != null) {     certs.add(cert);   }   return certs; } "
"public static TempLogFile newTempLogFile(final String prefix){   try {     return new TempLogFile(File.createTempFile(prefix,\".log\"));   }  catch (  final IOException e) {     localizedLogger.error(LocalizableMessage.raw(\"Unable to create temp log file because: \" + e.getMessage()),e);     return new TempLogFile();   } } "
"@Override public void reset(){   if (included) {     return;   }   getCoyoteResponse().reset();   outputBuffer.reset();   usingOutputStream=false;   usingWriter=false;   isCharacterEncodingSet=false; } "
"private void searchChangelogForOneChangeNumber(long changeNumber,CSN expectedCsn) throws Exception {   String testName=\"searchOneChangeNumber/\" + changeNumber;   debugInfo(testName,\"Starting search\\n\\n\");   InternalSearchOperation searchOp=searchChangelog(\"(changenumber=\" + changeNumber + \")\",1,SUCCESS,testName);   SearchResultEntry entry=searchOp.getSearchEntries().get(0);   String uncheckedUid=null;   assertEntryCommonAttributes(entry,uncheckedUid,USER1_ENTRY_UUID,changeNumber,expectedCsn);   debugInfo(testName,\"Ending search with success\"); } "
"@DataProvider(name=\"createIsChildOfTestData\") public Object[][] createIsChildOfTestData(){   return new Object[][]{{\"\",\"\",false},{\"\",\"dc=org\",false},{\"\",\"dc=opendj,dc=org\",false},{\"\",\"dc=foo,dc=opendj,dc=org\",false},{\"dc=org\",\"\",true},{\"dc=org\",\"dc=org\",false},{\"dc=org\",\"dc=opendj,dc=org\",false},{\"dc=org\",\"dc=foo,dc=opendj,dc=org\",false},{\"dc=opendj,dc=org\",\"\",false},{\"dc=opendj,dc=org\",\"dc=org\",true},{\"dc=opendj,dc=org\",\"dc=opendj,dc=org\",false},{\"dc=opendj,dc=org\",\"dc=foo,dc=opendj,dc=org\",false},{\"dc=foo,dc=opendj,dc=org\",\"\",false},{\"dc=foo,dc=opendj,dc=org\",\"dc=org\",false},{\"dc=foo,dc=opendj,dc=org\",\"dc=opendj,dc=org\",true},{\"dc=foo,dc=opendj,dc=org\",\"dc=foo,dc=opendj,dc=org\",false},{\"dc=org\",\"dc=com\",false},{\"dc=opendj,dc=org\",\"dc=foo,dc=org\",false},{\"dc=opendj,dc=org\",\"dc=opendj,dc=com\",false}}; } "
"protected boolean validatePendingRemove(Object targetChild){   return true; } "
"public void onSwitcher(){   this.on=true; } "
"public void addNotify(){ synchronized (getTreeLock()) {     if (parent != null && !(parent instanceof Component)) {       super.addNotify();     }  else {       if (peer == null)       peer=Toolkit.getDefaultToolkit().createPopupMenu(this);       int nitems=getItemCount();       for (int i=0; i < nitems; i++) {         MenuItem mi=getItem(i);         mi.parent=this;         mi.addNotify();       }     }   } } "
"public final void readConfiguration() throws IOException, SecurityException {   String[] xlogData=null;   try {     Logger.rwLock.writeRequest(); synchronized (Logger.class) {       Enumeration loggerNames=getLoggerNames();       LogManagerUtil.setupEnv();       if (didFirstReadConfig && SystemProperties.isServerMode()) {         oldLocation=getProperty(LogConstants.LOG_LOCATION);         oldLevel=getProperty(LogConstants.LOGGING_LEVEL);         oldSecurityStatus=getProperty(LogConstants.SECURITY_STATUS);         oldBackend=getProperty(LogConstants.BACKEND);         oldStatus=getProperty(LogConstants.LOG_STATUS_ATTR);       }       try {         if (SystemProperties.isServerMode()) {           LogConfigReader logConfigReader=new LogConfigReader();         }  else {           super.readConfiguration();         }         didFirstReadConfig=true;       }  catch (      Exception ex) {       }  finally {         LogManagerUtil.resetEnv();       }       if (isLocal) {         securityStatus=false;         readAllFields();         readSelectedFieldSet();         if (SystemProperties.isServerMode()) {           newLocation=getProperty(LogConstants.LOG_LOCATION);           newLevel=getProperty(LogConstants.LOGGING_LEVEL);           newSecurityStatus=getProperty(LogConstants.SECURITY_STATUS);           newBackend=getProperty(LogConstants.BACKEND);           newStatus=getProperty(LogConstants.LOG_STATUS_ATTR);         }         String[] logData={oldLocation,newLocation,oldBackend,newBackend,oldSecurityStatus,newSecurityStatus,oldStatus,newStatus,oldLevel,newLevel};         if (getProperty(LogConstants.BACKEND).equals(\"DB\")) {           HANDLER=getProperty(LogConstants.DB_HANDLER);           FORMATTER=getProperty(LogConstants.DB_FORMATTER);           String driver=getProperty(LogConstants.DB_DRIVER);         }  else         if (getProperty(LogConstants.BACKEND).equals(\"Syslog\")) {           HANDLER=getProperty(LogConstants.SYSLOG_HANDLER);           FORMATTER=getProperty(LogConstants.SYSLOG_FORMATTER);         }  else         if (getProperty(LogConstants.SECURITY_STATUS).equalsIgnoreCase(\"ON\")) {           securityStatus=true;           HANDLER=getProperty(LogConstants.SECURE_FILE_HANDLER);           FORMATTER=getProperty(LogConstants.SECURE_ELF_FORMATTER);         }  else {           HANDLER=getProperty(LogConstants.FILE_HANDLER);           FORMATTER=getProperty(LogConstants.ELF_FORMATTER);         }         if (getProperty(LogConstants.BACKEND).equals(\"File\")) {           if (SystemProperties.isServerMode() && (newLocation != null) && (oldLocation != null)&& !oldLocation.equals(newLocation)) {             File dir=new File(newLocation);             if (!dir.exists()) {               if (!dir.mkdirs()) {                 Debug.error(\"LogManager:readConfiguration:\" + \"Unable to create the new log \" + \"directory. Verify that the \"+ \"process has necessary permissions\");               }             }           }         }         boolean loggingInactive=(getProperty(LogConstants.LOG_STATUS_ATTR).equals(inactive));         String strLogLevel=getProperty(LogConstants.LOGGING_LEVEL);         try {           loggingLevel=Level.parse(strLogLevel);         }  catch (        IllegalArgumentException iaex) {           loggingLevel=Level.INFO;           Debug.error(\"LogManager:readConfiguration:\" + \"Log level '\" + strLogLevel + \"' unknown; setting to Level.INFO.\");         }         if (loggingInactive) {           loggingLevel=Level.OFF;         }         xlogData=logData;       }  else {         HANDLER=getProperty(LogConstants.REMOTE_HANDLER);         if (HANDLER == null) {           HANDLER=LogConstants.DEFAULT_REMOTE_HANDER;         }         FORMATTER=getProperty(LogConstants.REMOTE_FORMATTER);         if (FORMATTER == null) {           FORMATTER=LogConstants.DEFAULT_REMOTE_FORMATTER;         }       }       Logger.resolveHostName=Boolean.valueOf(getProperty(LogConstants.LOG_RESOLVE_HOSTNAME_ATTR)).booleanValue();       loggerNames=getLoggerNames();       while (loggerNames.hasMoreElements()) {         String curEl=(String)loggerNames.nextElement();         if (!curEl.isEmpty() && !curEl.equals(\"global\")) {           if (Debug.messageEnabled()) {             Debug.message(\"LogManager:readConfiguration:\" + \"Processing Logger: \" + curEl);           }           Logger l=(Logger)Logger.getLogger(curEl);           Handler[] handlers=l.getHandlers();           for (int i=0; i < handlers.length; i++) {             handlers[i].close();             l.removeHandler(handlers[i]);           }           String handlerClass=LogManager.HANDLER;           Class clz=null;           Class[] parameters={String.class};           Object[] parameterObjects={l.getName()};           Constructor cons=null;           Handler h=null;           try {             clz=Class.forName(handlerClass);           }  catch (          Exception e) {             Debug.error(\"LogManager.readConfiguration:could not load \" + handlerClass,e);           }           try {             cons=clz.getDeclaredConstructor(parameters);           }  catch (          Exception e) {             Debug.error(\"LogManager.readConfiguration:could not\" + \" instantiate\" + handlerClass,e);           }           try {             h=(Handler)cons.newInstance(parameterObjects);           }  catch (          Exception e) {             Debug.error(\"LogManager.readConfiguration:could not\" + \" instantiate\" + handlerClass,e);           }           String formatterClass=LogManager.FORMATTER;           Formatter f=null;           try {             f=(Formatter)Class.forName(formatterClass).newInstance();           }  catch (          Exception e) {             Debug.error(\"LogManager.readConfiguration:could not\" + \" instantiate Formatter \" + formatterClass,e);           }           h.setFormatter(f);           l.addHandler(h);           Level tlevel=loggingLevel;           if (loggingLevel != Level.OFF) {             String levelProp=LogConstants.LOG_PROP_PREFIX + \".\" + l.getName()+ \".level\";             String lvlStr=SystemProperties.get(levelProp);             if ((lvlStr != null) && (lvlStr.length() > 0)) {               try {                 tlevel=Level.parse(lvlStr);               }  catch (              IllegalArgumentException iaex) {               }             }           }           if (loggingLevel != null) {             l.setLevel(tlevel);           }         }       }     }   }   finally {     Logger.rwLock.writeDone();   }   if (SystemProperties.isServerMode() && isLocal) {     checkStartLogs(xlogData);     updateMonitConfigForLogService();   } } "
"public XMLString concat(String str){   return new XString(str().concat(str)); } "
"public boolean addLogger(java.util.logging.Logger logger){   String name=logger.getName();   if (name != null && name.length() != 0 && !name.equals(\"global\")) {     String rbName=logger.getResourceBundleName();     logger=new Logger(name,rbName);   }   boolean addSuccess=super.addLogger(logger);   if (loggersTable == null) {     loggersTable=new Hashtable();   }   loggersTable.put(name,logger);   if (addSuccess) {     Enumeration loggerNames=getLoggerNames();     int lcnt=0;     while (loggerNames.hasMoreElements()) {       String curEl=(String)loggerNames.nextElement();       if (curEl.length() != 0 && curEl.length() != 0 && !curEl.equals(\"global\")) {         lcnt++;       }     }     loggerCount=lcnt;     if (SystemProperties.isServerMode() && MonitoringUtil.isRunning()) {       if (logServiceImplForMonitoring == null) {         logServiceImplForMonitoring=Agent.getLoggingSvcMBean();       }       if (logServiceImplForMonitoring != null) {         logServiceImplForMonitoring.setSsoServerLoggingLoggers(new Integer(loggerCount));       }     }   }   return addSuccess; } "
"public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBorder(context,g,x,y,w,h,null); } "
"@Override public String toString(){   return super.toString() + \"(\" + filter.toString()+ \")\"; } "
"public void invalidateSession(Object session,HttpServletRequest request,HttpServletResponse response) throws SessionException {   try {     SSOToken token=(SSOToken)session;     AuthUtils.logout(token.getTokenID().toString(),request,response);     if ((request != null) && (response != null)) {       AuthUtils.clearAllCookies(request,response);     }   }  catch (  SSOException se) {     throw new SessionException(se);   } } "
"public void modify(SSOToken token,String dn,ModificationItem mods[]) throws SMSException, SSOException {   int retry=0;   ModifyRequest request=copyModItemsToModifyRequest(DN.valueOf(dn),mods);   while (retry <= connNumRetry) {     debug.message(\"SMSLdapObject.modify() retry: {}\",retry);     try (Connection conn=getConnection(token.getPrincipal())){       conn.modify(request);       debug.message(\"SMSLdapObject.modify(): Successfully modified entry: {}\",dn);       break;     }  catch (    LdapException e) {       ResultCode errorCode=e.getResult().getResultCode();       if (!retryErrorCodes.contains(errorCode) || retry == connNumRetry) {         debug.error(\"SMSLdapObject.modify(): Error modifying: {} By Principal {}\",dn,token.getPrincipal().getName(),e);         throw new SMSException(e,\"sms-entry-cannot-modify\");       }       retry++;       try {         Thread.sleep(connRetryInterval);       }  catch (      InterruptedException ex) {       }     }   } } "
"public AuditEvent auditAccessAttempt(){   return accessEvent().forHttpServletRequest(request).timestamp(startTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_ATTEMPT).component(component).toEvent(); } "
"public int size(){   return size; } "
"public final void yyclose() throws java.io.IOException {   zzAtEOF=true;   zzEndRead=zzStartRead;   if (zzReader != null)   zzReader.close(); } "
"public boolean containsKey(Object key){   checkKey(key);   return map.containsKey(key); } "
"public Client addClient(SSOToken token,String clientType,Map cMap,boolean store) throws AMClientCapException {   Client client=null;   if ((cMap == null) || (cMap.isEmpty())) {     return client;   }   if (debug.messageEnabled()) {     debug.message(CLASS + \"Adding new Client: \" + cMap);   }   if (store) { synchronized (internalClientData) {       intCapInstance.addClient(token,cMap);       cMap=mergeWithParent(cMap);       internalClientData.put(clientType,cMap);     }   }  else {     cMap=mergeWithParent(cMap);   }   client=addToIndexes(clientType,cMap,store);   if (!store) {     loadedClientsMap.put(clientType,client);   }   return client; } "
"public static boolean containsObjectClass(final Entry entry,final ObjectClass objectClass){   return containsObjectClass(entry,Schema.getDefaultSchema(),objectClass); } "
"private void fillBumpBuffer(){   Graphics g=image.getGraphics();   g.setColor(backColor);   g.fillRect(0,0,IMAGE_SIZE,IMAGE_SIZE);   g.setColor(topColor);   for (int x=0; x < IMAGE_SIZE; x+=4) {     for (int y=0; y < IMAGE_SIZE; y+=4) {       g.drawLine(x,y,x,y);       g.drawLine(x + 2,y + 2,x + 2,y + 2);     }   }   g.setColor(shadowColor);   for (int x=0; x < IMAGE_SIZE; x+=4) {     for (int y=0; y < IMAGE_SIZE; y+=4) {       g.drawLine(x + 1,y + 1,x + 1,y + 1);       g.drawLine(x + 3,y + 3,x + 3,y + 3);     }   }   g.dispose(); } "
"public void runTest() throws Throwable {   Document doc;   Document aNewDoc;   DocumentType doc1Type;   NamedNodeMap notationList;   Notation notation;   Notation aNode;   Document ownerDocument;   DocumentType docType;   String system;   String publicVal;   doc=(Document)load(\"staffNS\",true);   aNewDoc=(Document)load(\"staffNS\",true);   doc1Type=aNewDoc.getDoctype();   notationList=doc1Type.getNotations();   assertNotNull(\"notationsNotNull\",notationList);   notation=(Notation)notationList.getNamedItem(\"notation1\");   aNode=(Notation)doc.importNode(notation,false);   ownerDocument=aNode.getOwnerDocument();   docType=ownerDocument.getDoctype();   system=docType.getSystemId();   assertURIEquals(\"systemId\",null,null,null,\"staffNS.dtd\",null,null,null,null,system);   publicVal=aNode.getPublicId();   assertEquals(\"publicId\",\"notation1File\",publicVal);   system=aNode.getSystemId();   assertNull(\"notationSystemId\",system); } "
"public int process(Callback[] callbacks,int state) throws AuthLoginException {   int returnState=-1; switch (state) { case 1:     returnState=processState1(callbacks);   break; case 2: returnState=processState2(callbacks); break; case 3: returnState=processState3(callbacks); break; case 4: returnState=processState4(callbacks); break; default : throw new AuthLoginException(\"Invalid state : \" + state); } return returnState; } "
"public static MBeanServerConnection createJMXConnection(String url,String host,String port,String username,String password) throws MalformedURLException, IOException {   String urlForJMX;   if (url != null)   urlForJMX=url;  else   urlForJMX=JMX_SERVICE_PREFIX + host + \":\"+ port+ JMX_SERVICE_SUFFIX;   Map<String,String[]> environment=null;   if (username != null && password != null) {     String[] credentials=new String[2];     credentials[0]=username;     credentials[1]=password;     environment=new HashMap<>();     environment.put(JMXConnector.CREDENTIALS,credentials);   }   return JMXConnectorFactory.connect(new JMXServiceURL(urlForJMX),environment).getMBeanServerConnection(); } "
"public SOAPMessage secureRequest(ResourceOffering offering,List credentials,String serviceType,SOAPMessage soapMessage,Map sharedData) throws SOAPBindingException {   Utils.debug.message(\"MessageProcessor.secureRequest:Init\");   try {     SOAPHeader header=addCorrelationHeader(soapMessage,null);     QueryResponse discoResponse=getWebserviceOffering(offering,credentials,serviceType);     if (Utils.debug.messageEnabled()) {       Utils.debug.message(\"MessageProcessor.secureRequest: \" + \"Discovery Response: \" + discoResponse.toString());     }     ResourceOffering serviceOffering=(ResourceOffering)discoResponse.getResourceOffering().get(0);     List creds=discoResponse.getCredentials();     String securityProfile=processResourceOffering(serviceOffering);     SecurityAssertion securityAssertion=null;     if (securityProfile.equals(Message.NULL_SAML) || securityProfile.equals(Message.TLS_SAML) || securityProfile.equals(Message.CLIENT_TLS_SAML)|| securityProfile.equals(Message.NULL_BEARER)|| securityProfile.equals(Message.TLS_BEARER)|| securityProfile.equals(Message.CLIENT_TLS_BEARER)|| securityProfile.equals(Message.NULL_SAML_WSF11)|| securityProfile.equals(Message.TLS_SAML_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_SAML_WSF11)|| securityProfile.equals(Message.NULL_BEARER_WSF11)|| securityProfile.equals(Message.TLS_BEARER_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_BEARER_WSF11)) {       if (creds != null && creds.size() != 0) {         securityAssertion=(SecurityAssertion)creds.get(0);         securityAssertion.addToParent(header);       }     }     if (securityProfile.equals(Message.NULL_SAML) || securityProfile.equals(Message.TLS_SAML) || securityProfile.equals(Message.CLIENT_TLS_SAML)|| securityProfile.equals(Message.NULL_X509)|| securityProfile.equals(Message.TLS_X509)|| securityProfile.equals(Message.CLIENT_TLS_X509)|| securityProfile.equals(Message.NULL_SAML_WSF11)|| securityProfile.equals(Message.TLS_SAML_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_SAML_WSF11)|| securityProfile.equals(Message.NULL_X509_WSF11)|| securityProfile.equals(Message.TLS_X509_WSF11)|| securityProfile.equals(Message.CLIENT_TLS_X509_WSF11)) {       soapMessage=signMessage(soapMessage,securityProfile,securityAssertion);     }     if (Utils.debug.messageEnabled()) {       Utils.debug.message(\"MessageProcessor.secureRequest: \" + XMLUtils.print(soapMessage.getSOAPPart().getEnvelope()));     }     return soapMessage;   }  catch (  Exception ex) {     Utils.debug.error(\"MessageProcessor.secureRequest: Failure in \" + \"Securing the request.\",ex);     throw new SOAPBindingException(Utils.bundle.getString(\"secureRequestFailed\"));   } } "
"private void initFromCollection(Collection<? extends E> c){   initElementsFromCollection(c);   heapify(); } "
"public void error(String msg){   print(\"[ERROR] \" + msg,out.err); } "
"public String sendRestCommand(SSOTokenID ssoTokenID,URL url,String requestMethod,Map<String,String> headers,String data) throws IOException {   headers.put(SystemProperties.get(Constants.AM_COOKIE_NAME,\"iPlanetDirectoryPro\"),ssoTokenID.toString());   return sendRestCommand(url,requestMethod,headers,data); } "
"public boolean isActive(@StringRes int resId,FlagContextInterface flagContext){   return isActive(context.getString(resId),flagContext); } "
"public void put(String uri) throws IOException {   put(uri,null,null); } "
"public Polygon(){   xpoints=new int[MIN_LENGTH];   ypoints=new int[MIN_LENGTH]; } "
"private void analyzeResultingTlsContextAndWriteFile(TlsContext tlsContext,String folder,String fieldName,String workflowName,long phase) throws JAXBException, IOException {   if (TlsContextAnalyzer.containsFullWorkflowWithMissingMessage(tlsContext) || TlsContextAnalyzer.containsServerFinishedWithModifiedHandshake(tlsContext) || TlsContextAnalyzer.containsFullWorkflowWithModifiedMessage(tlsContext)) {     String fileNameBasic=createFileName(folder,phase,tlsContext,fieldName);     FileOutputStream fos=new FileOutputStream(fileNameBasic + workflowName + \".xml\");     WorkflowTraceSerializer.write(fos,tlsContext.getWorkflowTrace());   } } "
"public static synchronized String[][] read(String logName,String logType,String timeStamp,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {   queryResult=read(logName,logType,timeStamp,null,userCrdential);   return queryResult; } "
"Parsed copy(){   Parsed cloned=new Parsed();   cloned.fieldValues.putAll(this.fieldValues);   cloned.zone=this.zone;   cloned.chrono=this.chrono;   cloned.leapSecond=this.leapSecond;   return cloned; } "
"public static void moveDirectory(File srcDir,File destDir) throws IOException {   if (srcDir == null) {     throw new NullPointerException(\"Source must not be null\");   }   if (destDir == null) {     throw new NullPointerException(\"Destination must not be null\");   }   if (!srcDir.exists()) {     throw new FileNotFoundException(\"Source '\" + srcDir + \"' does not exist\");   }   if (!srcDir.isDirectory()) {     throw new IOException(\"Source '\" + srcDir + \"' is not a directory\");   }   if (destDir.exists()) {     throw new FileExistsException(\"Destination '\" + destDir + \"' already exists\");   }   boolean rename=srcDir.renameTo(destDir);   if (!rename) {     if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {       throw new IOException(\"Cannot move directory: \" + srcDir + \" to a subdirectory of itself: \"+ destDir);     }     copyDirectory(srcDir,destDir);     deleteDirectory(srcDir);     if (srcDir.exists()) {       throw new IOException(\"Failed to delete original directory '\" + srcDir + \"' after copy to '\"+ destDir+ \"'\");     }   } } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(\"Transaction[\");   sb.append(\"]\");   return (sb.toString()); } "
"public boolean isRenameOnRotate(){   return renameOnRotate; } "
"private void processSynchPostOperationPlugins(){   for (  SynchronizationProvider<?> provider : DirectoryServer.getSynchronizationProviders()) {     try {       provider.doPostOperation(this);     }  catch (    DirectoryException de) {       logger.traceException(de);       logger.error(ERR_MODDN_SYNCH_POSTOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));       setResponseData(de);       return;     }   } } "
"private void releaseReader(BlockLogReader<K,V> reader){   readerPool.release(reader); } "
"public void add(RxAction action,Subscription subscription){   Pair<Integer,Subscription> old=mMap.put(action.getType(),getPair(action,subscription));   if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe(); } "
"public final void testSetSeedbyteArray03() throws NoSuchFieldException, SecurityException, IllegalAccessException {   byte[] seed=new byte[LENGTH];   byte[] bytes1;   byte[] bytes2;   for (int i=0; i < seed.length; i++) {     seed[i]=(byte)i;   }   for (int i=0; i < LENGTH; i++) {     bytes1=new byte[i];     bytes2=new byte[i];     sr.setSeed(seed);     sr.setSeed(new byte[0]);     sr.nextBytes(bytes1);     sr2.setSeed(seed);     sr2.nextBytes(bytes2);     for (int j=0; j < bytes1.length; j++) {       assertEquals(\"bytes1[j] != bytes2[j] :: j=\" + j,bytes1[j],bytes2[j]);     }   }   for (int i=1; i < LENGTH; i++) {     bytes1=new byte[i];     bytes2=new byte[i];     sr.setSeed(seed);     sr.nextBytes(bytes1);     sr.setSeed(new byte[0]);     sr.nextBytes(bytes2);     boolean b=true;     for (int j=0; j < bytes1.length; j++) {       b&=bytes1[j] == bytes2[j];     }     assertFalse(\"sequences are equal i=\" + i,b);   } } "
"public CMMException(String s){   super(s); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_namednodemapsetnameditemwithnewvalue.class,args); } "
"public boolean hasUserAttributeSchema(String serviceName){   return hasAttributeSchema(serviceName,SchemaType.USER); } "
"public static <T>void removeAll(Collection<T> collection,Collection<T> elements){   if (CollectionUtils.isEmpty(collection) || CollectionUtils.isEmpty(elements)) {     return;   }   for (  T element : elements) {     collection.remove(element);   } } "
"private void parse_oneVarPostOperation() throws SyntaxException {   Element opNode=(Element)current;   String op=opNode.getContent();   parsedExpsNotEmpty(opNode);   Expression e=parsedExps.pop();   OneVariableOperation ovo=new OneVariableOperation(op,e,opNode.getLineCol());   parsedExps.push(ovo);   nextNode(true);   parse_expression(); } "
"public AclEntryType type(){   return type; } "
"public static IntegerArgument ldapVersionArgument() throws ArgumentException {   return IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildArgument(); } "
"public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {   super.compose(sroot);   java.util.Vector vnames=sroot.getComposeState().getVariableNames();   if (null != m_test)   m_test.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize()); } "
"public LoginLATNodeAttribute(String latNode){   super(OctetUtils.toOctets(AttributeType.LOGIN_LAT_NODE,latNode));   this.latNode=new String(super.getOctets(),2,super.getOctets().length - 2); } "
"@NonNull public final Closeable consume(@NonNull Runnable run){   RunnableUpdatable ru=new RunnableUpdatable(this,run);   addUpdatable(ru);   return ru; } "
"@Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {   return _fooLocalService.deleteFoo(fooId); } "
"public static String convertFrameID22To23(String identifier){   if (identifier.length() < 3) {     return null;   }   return ID3Frames.convertv22Tov23.get((String)identifier.subSequence(0,3)); } "
"public boolean isDeclared(String qName){   int index=getIndex(qName);   if (index < 0)   throw new IllegalArgumentException(\"No such attribute: \" + qName);   return declared[index]; } "
"public Object clone(){   IPv4Condition theClone=null;   try {     theClone=(IPv4Condition)super.clone();   }  catch (  CloneNotSupportedException e) {     throw new InternalError();   }   theClone.dnsList=(ArrayList)dnsList.clone();   theClone.ipList=(ArrayList)ipList.clone();   if (properties != null) {     theClone.properties=new HashMap();     Iterator it=properties.keySet().iterator();     while (it.hasNext()) {       Object o=it.next();       Set values=new HashSet();       values.addAll((Set)properties.get(o));       theClone.properties.put(o,values);     }   }   return theClone; } "
"public static void main(final String[] args){   DOMTestCase.doMain(attrspecifiedvalueremove.class,args); } "
"public void flush(){   lock.readLock().lock();   try {     map.clear();   }   finally {     lock.readLock().unlock();   } } "
"public static DN makeChildDN(DN parentDN,AttributeType rdnAttrType,String rdnStringValue){   ByteString attrValue=ByteString.valueOfUtf8(rdnStringValue);   return parentDN.child(new RDN(rdnAttrType,attrValue)); } "
"@Override public boolean isPowered(){   return (getData() & 0x8) != 0; } "
"public void beginEntry(JarEntry je,ManifestEntryVerifier mev) throws IOException {   if (je == null)   return;   if (debug != null) {     debug.println(\"beginEntry \" + je.getName());   }   String name=je.getName();   if (parsingMeta) {     String uname=name.toUpperCase(Locale.ENGLISH);     if ((uname.startsWith(\"META-INF/\") || uname.startsWith(\"/META-INF/\"))) {       if (je.isDirectory()) {         mev.setEntry(null,je);         return;       }       if (uname.equals(JarFile.MANIFEST_NAME) || uname.equals(JarIndex.INDEX_NAME)) {         return;       }       if (SignatureFileVerifier.isBlockOrSF(uname)) {         parsingBlockOrSF=true;         baos.reset();         mev.setEntry(null,je);         return;       }     }   }   if (parsingMeta) {     doneWithMeta();   }   if (je.isDirectory()) {     mev.setEntry(null,je);     return;   }   if (name.startsWith(\"./\"))   name=name.substring(2);   if (name.startsWith(\"/\"))   name=name.substring(1);   if (sigFileSigners.get(name) != null || verifiedSigners.get(name) != null) {     mev.setEntry(name,je);     return;   }   mev.setEntry(null,je);   return; } "
"@Override public void contextInitialized(ServletContextEvent event){   this.context=event.getServletContext();   log(\"contextInitialized()\"); } "
"public static void saveAsJar(Map<String,byte[]> outBytes,String fileName){   try {     JarOutputStream out=new JarOutputStream(new java.io.FileOutputStream(fileName));     for (    String entry : outBytes.keySet()) {       String ext=entry.contains(\".\") ? \"\" : \".class\";       out.putNextEntry(new ZipEntry(entry + ext));       out.write(outBytes.get(entry));       out.closeEntry();     }     out.close();   }  catch (  IOException e) {     e.printStackTrace();   } } "
"public List<String> command(){   return command; } "
"public void addListener(final FileAlterationListener listener){   if (listener != null) {     listeners.add(listener);   } } "
"public void writeString(byte[] str){   int max=uncompData.length - dstIndex;   if (str.length < max)   max=str.length;   System.arraycopy(str,0,uncompData,dstIndex,max);   dstIndex+=max; } "
"public BasicPoolEntryRef(BasicPoolEntry entry,ReferenceQueue<Object> queue){   super(entry,queue);   if (entry == null) {     throw new IllegalArgumentException(\"Pool entry must not be null.\");   }   route=entry.getPlannedRoute(); } "
"@Override public void checkServerTrusted(X509Certificate[] chain,String authType){ } "
"protected void CreateKeys(OffsetItem fdarrayRef,OffsetItem fdselectRef,OffsetItem charsetRef,OffsetItem charstringsRef){   OutputList.addLast(fdarrayRef);   OutputList.addLast(new UInt8Item((char)12));   OutputList.addLast(new UInt8Item((char)36));   OutputList.addLast(fdselectRef);   OutputList.addLast(new UInt8Item((char)12));   OutputList.addLast(new UInt8Item((char)37));   OutputList.addLast(charsetRef);   OutputList.addLast(new UInt8Item((char)15));   OutputList.addLast(charstringsRef);   OutputList.addLast(new UInt8Item((char)17)); } "
"public ExtendedKeyUsage(byte[] encoding){   super(encoding); } "
"public void makeVisible(TreePath path){   if (path != null) {     TreePath parentPath=path.getParentPath();     if (parentPath != null) {       expandPath(parentPath);     }   } } "
"private static CompareResponseProtocolOp readCompareResponse(ASN1Reader reader) throws LDAPException {   try {     reader.readStartSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   int resultCode;   try {     resultCode=(int)reader.readInteger();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   DN matchedDN;   try {     String dnString=reader.readOctetStringAsString();     if (dnString.length() == 0) {       matchedDN=null;     }  else {       matchedDN=DN.valueOf(dnString);     }   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   LocalizableMessage errorMessage;   try {     errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());     if (errorMessage.length() == 0) {       errorMessage=null;     }   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   ArrayList<String> referralURLs=null;   try {     if (reader.hasNextElement()) {       reader.readStartSequence();       referralURLs=new ArrayList<>();       while (reader.hasNextElement()) {         referralURLs.add(reader.readOctetStringAsString());       }       reader.readEndSequence();     }   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   try {     reader.readEndSequence();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);     throw new LDAPException(PROTOCOL_ERROR,message,e);   }   return new CompareResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs); } "
"public void testToBigIntegerNeg3(){   String a=\"-123809648392384754573567356745735.63567890295784902768787678287E+45\";   BigInteger bNumber=new BigInteger(\"-123809648392384754573567356745735635678902957849027687876782870000000000000000\");   BigDecimal aNumber=new BigDecimal(a);   BigInteger result=aNumber.toBigInteger();   assertTrue(\"incorrect value\",result.equals(bNumber)); } "
"public void forwardTo(RequestContext rc){   HttpServletRequest req=rc.getRequest();   String location=req.getParameter(\"Location\");   if ((location != null) && (location.trim().length() > 0)) {     handleRealmOperationRequest(hexToString(location),rc);   }  else {     String user=req.getParameter(\"User\");     if ((user != null) && (user.trim().length() > 0)) {       handleUserOperationRequest(location,hexToString(user),rc);     }  else {       super.forwardTo(rc);     }   } } "
"public void writeControl(final Control control) throws IOException {   writer.writeStartSequence(); {     writer.writeOctetString(control.getOID());     if (control.isCritical()) {       writer.writeBoolean(control.isCritical());     }     if (control.getValue() != null) {       writer.writeOctetString(control.getValue());     }   }   writer.writeEndSequence(); } "
"public String createGroup(String groupname,String description){   UserDatabase database=(UserDatabase)this.resource;   Group group=database.createGroup(groupname,description);   try {     MBeanUtils.createMBean(group);   }  catch (  Exception e) {     IllegalArgumentException iae=new IllegalArgumentException(\"Exception creating group [\" + groupname + \"] MBean\");     iae.initCause(e);     throw iae;   }   return (findGroup(groupname)); } "
"protected void add(HttpServletRequest request,PrintWriter writer,String name,boolean htmlMode,StringManager smClient){   String aliases=request.getParameter(\"aliases\");   String appBase=request.getParameter(\"appBase\");   boolean manager=booleanParameter(request,\"manager\",false,htmlMode);   boolean autoDeploy=booleanParameter(request,\"autoDeploy\",true,htmlMode);   boolean deployOnStartup=booleanParameter(request,\"deployOnStartup\",true,htmlMode);   boolean deployXML=booleanParameter(request,\"deployXML\",true,htmlMode);   boolean unpackWARs=booleanParameter(request,\"unpackWARs\",true,htmlMode);   boolean copyXML=booleanParameter(request,\"copyXML\",false,htmlMode);   add(writer,name,aliases,appBase,manager,autoDeploy,deployOnStartup,deployXML,unpackWARs,copyXML,smClient); } "
"public static void e(String tag,String msg){   if (sLevel > LEVEL_ERROR) {     return;   }   Log.e(tag,msg); } "
"public StringReader(String s){   this.str=s;   this.length=s.length(); } "
"MultistepExprHolder unlink(MultistepExprHolder itemToRemove){   MultistepExprHolder first=this;   MultistepExprHolder next=this;   MultistepExprHolder prev=null;   while (null != next) {     if (next == itemToRemove) {       if (null == prev)       first=next.m_next;  else       prev.m_next=next.m_next;       next.m_next=null;       return first;     }     prev=next;     next=next.m_next;   }   assertion(false,\"unlink failed!!!\");   return null; } "
"public void trimToSize(){   if (n < array.length) {     byte[] aux=new byte[n];     System.arraycopy(array,0,aux,0,n);     array=aux;   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodedocumentnodename.class,args); } "
"public boolean isMetaphoneEqual(String str1,String str2){   return metaphone(str1).equals(metaphone(str2)); } "
"public static void main(String[] args){   LocalizableMessage description=INFO_EMAIL_TOOL_DESCRIPTION.get();   ArgumentParser argParser=new ArgumentParser(EMailMessage.class.getName(),description,false);   BooleanArgument showUsage=null;   StringArgument attachFile=null;   StringArgument bodyFile=null;   StringArgument host=null;   StringArgument from=null;   StringArgument subject=null;   StringArgument to=null;   try {     host=StringArgument.builder(\"host\").shortIdentifier('h').description(INFO_EMAIL_HOST_DESCRIPTION.get()).multiValued().required().defaultValue(\"127.0.0.1\").valuePlaceholder(INFO_HOST_PLACEHOLDER.get()).buildAndAddToParser(argParser);     from=StringArgument.builder(\"from\").shortIdentifier('f').description(INFO_EMAIL_FROM_DESCRIPTION.get()).required().valuePlaceholder(INFO_ADDRESS_PLACEHOLDER.get()).buildAndAddToParser(argParser);     to=StringArgument.builder(\"to\").shortIdentifier('t').description(INFO_EMAIL_TO_DESCRIPTION.get()).multiValued().required().valuePlaceholder(INFO_ADDRESS_PLACEHOLDER.get()).buildAndAddToParser(argParser);     subject=StringArgument.builder(\"subject\").shortIdentifier('s').description(INFO_EMAIL_SUBJECT_DESCRIPTION.get()).required().valuePlaceholder(INFO_SUBJECT_PLACEHOLDER.get()).buildAndAddToParser(argParser);     bodyFile=StringArgument.builder(\"body\").shortIdentifier('b').description(INFO_EMAIL_BODY_DESCRIPTION.get()).multiValued().required().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);     attachFile=StringArgument.builder(\"attach\").shortIdentifier('a').description(INFO_EMAIL_ATTACH_DESCRIPTION.get()).multiValued().valuePlaceholder(INFO_PATH_PLACEHOLDER.get()).buildAndAddToParser(argParser);     showUsage=showUsageArgument();     argParser.addArgument(showUsage);     argParser.setUsageArgument(showUsage);   }  catch (  ArgumentException ae) {     System.err.println(ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage()));     System.exit(1);   }   try {     argParser.parseArguments(args);   }  catch (  ArgumentException ae) {     argParser.displayMessageAndUsageReference(System.err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));     System.exit(1);   }   if (showUsage.isPresent()) {     return;   }   LinkedList<Properties> mailServerProperties=new LinkedList<>();   for (  String s : host.getValues()) {     Properties p=new Properties();     p.setProperty(SMTP_PROPERTY_HOST,s);     mailServerProperties.add(p);   }   EMailMessage message=new EMailMessage(from.getValue(),to.getValues(),subject.getValue());   for (  String s : bodyFile.getValues()) {     try {       File f=new File(s);       if (!f.exists()) {         System.err.println(ERR_EMAIL_NO_SUCH_BODY_FILE.get(s));         System.exit(1);       }       BufferedReader reader=new BufferedReader(new FileReader(f));       while (true) {         String line=reader.readLine();         if (line == null) {           break;         }         message.appendToBody(line);         message.appendToBody(\"\\r\\n\");       }       reader.close();     }  catch (    Exception e) {       System.err.println(ERR_EMAIL_CANNOT_PROCESS_BODY_FILE.get(s,getExceptionMessage(e)));       System.exit(1);     }   }   if (attachFile.isPresent()) {     for (    String s : attachFile.getValues()) {       File f=new File(s);       if (!f.exists()) {         System.err.println(ERR_EMAIL_NO_SUCH_ATTACHMENT_FILE.get(s));         System.exit(1);       }       try {         message.addAttachment(f);       }  catch (      Exception e) {         System.err.println(ERR_EMAIL_CANNOT_ATTACH_FILE.get(s,getExceptionMessage(e)));       }     }   }   try {     message.send(mailServerProperties);   }  catch (  Exception e) {     System.err.println(ERR_EMAIL_CANNOT_SEND_MESSAGE.get(getExceptionMessage(e)));     System.exit(1);   } } "
"private void initializeBackendSet(){   backendSet=new TreeSet<>();   DN theDN=null;   for (  String baseDN : baseDNs) {     try {       theDN=DN.valueOf(baseDN);     }  catch (    Throwable t) {       throw new IllegalArgumentException(\"Could not decode dn \" + baseDN,t);     }     BackendDescriptor backend=findBackendByID(theDN);     if (backend != null) {       backendSet.add(backend.getBackendID());     }   } } "
"public FSBrowserPostConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,FSAuthnRequest authnRequest,boolean doFederate,String relayState){   super(request,response,idpDescriptor,idpEntityId,authnRequest,doFederate,relayState); } "
"public synchronized void childChanged(ChildState cs){   if (lastValidOffset == null) {     lastValidOffset=cs;   }  else   if (cs.getChildView().getStartOffset() < lastValidOffset.getChildView().getStartOffset()) {     lastValidOffset=cs;   } } "
"public boolean hasRealAliases() throws KeyStoreException {   if (realAliases == null) {     String[] aliases=getCertificateAliases();     if (aliases == null || aliases.length == 0) {       realAliases=Boolean.FALSE;     }  else     if (aliases.length > 1) {       realAliases=Boolean.TRUE;     }  else {       CertificateManager certManager2=new CertificateManager(keyStorePath,keyStoreType,password);       String[] aliases2=certManager2.getCertificateAliases();       if (aliases2 != null && aliases2.length == 1) {         realAliases=aliases[0].equalsIgnoreCase(aliases2[0]);       }  else {         realAliases=Boolean.FALSE;       }     }   }   return realAliases; } "
"public void on(boolean on){   isOn=on; } "
"public static boolean isRunningAsWindowsService(){   return OperatingSystem.isWindows() && serviceState() == SERVICE_STATE_ENABLED; } "
"protected boolean scrollRight(TextView widget,Spannable buffer,int amount){   final int maxScrollX=getScrollBoundsRight(widget) - getInnerWidth(widget);   int scrollX=widget.getScrollX();   if (scrollX < maxScrollX) {     scrollX=Math.min(scrollX + getCharacterWidth(widget) * amount,maxScrollX);     widget.scrollTo(scrollX,widget.getScrollY());     return true;   }   return false; } "
"public com.sun.identity.saml2.jaxb.assertion.ConditionElement createConditionElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionElementImpl(); } "
"@Override public void stopInternal(){   releaseConnectionLatch();   if (!paused) {     pause();   }   if (running) {     running=false;     unlockAccept();     for (int i=0; pollers != null && i < pollers.length; i++) {       if (pollers[i] == null)       continue;       pollers[i].destroy();       pollers[i]=null;     }     try {       stopLatch.await(selectorTimeout + 100,TimeUnit.MILLISECONDS);     }  catch (    InterruptedException ignore) {     }     shutdownExecutor();     eventCache.clear();     nioChannels.clear();     processorCache.clear();   } } "
"public boolean matches(Line.Info info){   if (!(super.matches(info))) {     return false;   }   if (!(name.equals(((Info)info).getName()))) {     return false;   }   if (!(isSource == ((Info)info).isSource())) {     return false;   }   return true; } "
"public static int flashCount(){   return info().flashCount; } "
"protected Transferable createTransferable(JComponent c){   if (c instanceof JTable) {     JTable table=(JTable)c;     int[] rows;     int[] cols;     if (!table.getRowSelectionAllowed() && !table.getColumnSelectionAllowed()) {       return null;     }     if (!table.getRowSelectionAllowed()) {       int rowCount=table.getRowCount();       rows=new int[rowCount];       for (int counter=0; counter < rowCount; counter++) {         rows[counter]=counter;       }     }  else {       rows=table.getSelectedRows();     }     if (!table.getColumnSelectionAllowed()) {       int colCount=table.getColumnCount();       cols=new int[colCount];       for (int counter=0; counter < colCount; counter++) {         cols[counter]=counter;       }     }  else {       cols=table.getSelectedColumns();     }     if (rows == null || cols == null || rows.length == 0 || cols.length == 0) {       return null;     }     StringBuffer plainBuf=new StringBuffer();     StringBuffer htmlBuf=new StringBuffer();     htmlBuf.append(\"<html>\\n<body>\\n<table>\\n\");     for (int row=0; row < rows.length; row++) {       htmlBuf.append(\"<tr>\\n\");       for (int col=0; col < cols.length; col++) {         Object obj=table.getValueAt(rows[row],cols[col]);         String val=((obj == null) ? \"\" : obj.toString());         plainBuf.append(val + \"\\t\");         htmlBuf.append(\"  <td>\" + val + \"</td>\\n\");       }       plainBuf.deleteCharAt(plainBuf.length() - 1).append(\"\\n\");       htmlBuf.append(\"</tr>\\n\");     }     plainBuf.deleteCharAt(plainBuf.length() - 1);     htmlBuf.append(\"</table>\\n</body>\\n</html>\");     return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());   }   return null; } "
"public void process(String name,Vector elems,Hashtable atts,String pcdata){   _name=name;   _elems=elems;   _atts=atts;   _pcdata=pcdata; } "
"public boolean equals(Object other){   if (this == other) {     return true;   }   if (other instanceof ECPoint) {     if (this.affineX != null) {       ECPoint otherPoint=(ECPoint)other;       return this.affineX.equals(otherPoint.affineX) && this.affineY.equals(otherPoint.affineY);     }  else {       return other == POINT_INFINITY;     }   }   return false; } "
"private int constrainY(JTextComponent target,int y,int vis){   if (y < 0) {     y=0;   }  else   if (y + vis > target.getHeight()) {     y=Math.max(0,target.getHeight() - vis);   }   return y; } "
"public void mousePressed(MouseEvent event){   hideTipWindow();   enterTimer.stop();   showImmediately=false;   insideComponent=null;   mouseEvent=null; } "
"public ZoneRulesException(String message){   super(message); } "
"public double num(){   return m_val ? 1.0 : 0.0; } "
"@Inject public PushNotificationServiceConfigHelperFactory(@Named(\"PushNotificationService\") ServiceConfigManager serviceConfigManager,@Named(\"frPush\") Debug debug){   this.serviceConfigManager=serviceConfigManager;   this.debug=debug; } "
"public final double check_trace(PlaPointInt p_from_point,PlaPointInt p_to_point,int p_layer,NetNosList p_net_no_arr,int p_trace_half_width,int p_cl_class_no,boolean p_only_not_shovable_obstacles){   if (p_from_point.equals(p_to_point))   return 0;   PlaSegmentInt curr_line_segment=new PlaSegmentInt(p_from_point,p_to_point);   return check_trace(curr_line_segment,p_layer,p_net_no_arr,p_trace_half_width,p_cl_class_no,p_only_not_shovable_obstacles); } "
"@Override public int compareTo(LibPackage p_other){   return pkg_name.compareToIgnoreCase(p_other.pkg_name); } "
"public static boolean isXMLNameNS(String name){   if (name.length() > 0 && (!isNameStartChar(name.charAt(0)) || name.charAt(0) == ':')) {     return false;   }   for (int i=1; i < name.length(); i++) {     if (!isNameChar(name.charAt(i)) || name.charAt(i) == ':') {       return false;     }   }   return true; } "
"private String openFile(String file){   BufferedReader br=null;   try {     br=new BufferedReader(new FileReader(file));     StringBuffer sb=new StringBuffer(5000);     String temp;     while ((temp=br.readLine()) != null) {       sb.append(temp);     }     return sb.toString();   }  catch (  FileNotFoundException fnf) {     debug.error(\"FedletConfigurationImpl.getConfiguration: \" + file + \" for component \"+ componentName,fnf);     return null;   } catch (  IOException ioe) {     debug.error(\"FedletConfigurationImpl.getConfiguration:\" + file + \" for component \"+ componentName,ioe);     return null;   }  finally {     if (br != null) {       try {         br.close();       }  catch (      IOException ioe) {       }     }   } } "
"public void putAll(Map t){   rwlock.writeLock().lock();   try {     for (Iterator i=t.entrySet().iterator(); i.hasNext(); ) {       Map.Entry e=(Map.Entry)i.next();       put(e.getKey(),e.getValue());     }   }   finally {     rwlock.writeLock().unlock();   } } "
"public IdentitySubjectEditViewBean(){   super(\"IdentitySubjectEdit\",DEFAULT_DISPLAY_URL); } "
"private static String fileName(String host,int port){   if (host == null) {     throw new NullPointerException(\"host == null\");   }   return host + \".\" + port; } "
"public static boolean checkImageFile(final FileItem item){   BufferedImage bi;   InputStream is=null;   try {     is=item.getInputStream();     bi=ImageIO.read(is);   }  catch (  IOException e) {     return false;   }  finally {     if (is != null) {       try {         is.close();       }  catch (      Exception e) {       }     }   }   return (bi != null); } "
"void delete(ByteString val,AttributeType attrType,CSN csn){   update(csn,new AttrValueHistorical(val,attrType,null,csn)); } "
"protected void initCDATA(){ } "
"@Override public int addListener(SSOToken token,IdRepoListener idRepoListener){   if (DEBUG.messageEnabled()) {     DEBUG.message(\"addListener invoked\");   }   if (this.idRepoListener != null) {     throw new IllegalStateException(\"There is an idRepoListener already registered within this IdRepo\");   }   this.idRepoListener=idRepoListener;   String psearchBaseDN=CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_BASE_DN);   if (StringUtils.isEmpty(psearchBaseDN)) {     if (DEBUG.warningEnabled()) {       DEBUG.warning(\"Persistent search base DN is missing, persistent search is disabled.\");     }     return 0;   }   String pSearchId=getPSearchId(); synchronized (pSearchMap) {     DJLDAPv3PersistentSearch pSearch=pSearchMap.get(pSearchId);     if (pSearch == null) {       String username=CollectionHelper.getMapAttr(configMap,LDAP_SERVER_USER_NAME);       char[] password=CollectionHelper.getMapAttr(configMap,LDAP_SERVER_PASSWORD,\"\").toCharArray();       pSearch=new DJLDAPv3PersistentSearch(configMap,createConnectionFactory(username,password,1));       if (dnCacheEnabled) {         pSearch.addMovedOrRenamedListener(this);       }       pSearch.addListener(idRepoListener,getSupportedTypes());       pSearch.startQuery();       pSearchMap.put(pSearchId,pSearch);     }  else {       pSearch.addListener(idRepoListener,getSupportedTypes());       if (dnCacheEnabled) {         pSearch.addMovedOrRenamedListener(this);       }     }   }   return 0; } "
"public ConcurrentHashMap(int initialCapacity,float loadFactor){   this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL); } "
"public boolean remove(AccessibleRelation relation){   if (relations == null) {     return false;   }  else {     return relations.removeElement(relation);   } } "
"public static ComponentUI createUI(JComponent a){   ComponentUI mui=new MultiViewportUI();   return MultiLookAndFeel.createUIs(mui,((MultiViewportUI)mui).uis,a); } "
"boolean merge(final ClassWriter cw,final Frame frame,final int edge){   boolean changed=false;   int i, s, dim, kind, t;   int nLocal=inputLocals.length;   int nStack=inputStack.length;   if (frame.inputLocals == null) {     frame.inputLocals=new int[nLocal];     changed=true;   }   for (i=0; i < nLocal; ++i) {     if (outputLocals != null && i < outputLocals.length) {       s=outputLocals[i];       if (s == 0) {         t=inputLocals[i];       }  else {         dim=s & DIM;         kind=s & KIND;         if (kind == BASE) {           t=s;         }  else {           if (kind == LOCAL) {             t=dim + inputLocals[s & VALUE];           }  else {             t=dim + inputStack[nStack - (s & VALUE)];           }           if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {             t=TOP;           }         }       }     }  else {       t=inputLocals[i];     }     if (initializations != null) {       t=init(cw,t);     }     changed|=merge(cw,t,frame.inputLocals,i);   }   if (edge > 0) {     for (i=0; i < nLocal; ++i) {       t=inputLocals[i];       changed|=merge(cw,t,frame.inputLocals,i);     }     if (frame.inputStack == null) {       frame.inputStack=new int[1];       changed=true;     }     changed|=merge(cw,edge,frame.inputStack,0);     return changed;   }   int nInputStack=inputStack.length + owner.inputStackTop;   if (frame.inputStack == null) {     frame.inputStack=new int[nInputStack + outputStackTop];     changed=true;   }   for (i=0; i < nInputStack; ++i) {     t=inputStack[i];     if (initializations != null) {       t=init(cw,t);     }     changed|=merge(cw,t,frame.inputStack,i);   }   for (i=0; i < outputStackTop; ++i) {     s=outputStack[i];     dim=s & DIM;     kind=s & KIND;     if (kind == BASE) {       t=s;     }  else {       if (kind == LOCAL) {         t=dim + inputLocals[s & VALUE];       }  else {         t=dim + inputStack[nStack - (s & VALUE)];       }       if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {         t=TOP;       }     }     if (initializations != null) {       t=init(cw,t);     }     changed|=merge(cw,t,frame.inputStack,nInputStack + i);   }   return changed; } "
"private void prefixMask(int prefix){   int i;   for (i=0; prefix > 8; i++) {     this.prefixMask[i]=(byte)0xff;     prefix-=8;   }   this.prefixMask[i]=(byte)(0xff << 8 - prefix); } "
"public static void main(final String[] args){   DOMTestCase.doMain(getAttributeNS01.class,args); } "
"public XPathException(String message,ExpressionNode ex){   super(message);   this.setLocator(ex);   setStylesheetNode(getStylesheetNode(ex)); } "
"protected String sessions(ContextName cn,int idle,StringManager smClient){   StringWriter stringWriter=new StringWriter();   PrintWriter printWriter=new PrintWriter(stringWriter);   super.sessions(printWriter,cn,idle,smClient);   return stringWriter.toString(); } "
"public boolean equals(Object anObject){   return m_str.equals(anObject); } "
"public SubCommand(SubCommandArgumentParser parser,String name,LocalizableMessage description) throws ArgumentException {   this(parser,name,false,0,0,null,description); } "
"private int divadd(int[] a,int[] result,int offset){   long carry=0;   for (int j=a.length - 1; j >= 0; j--) {     long sum=(a[j] & LONG_MASK) + (result[j + offset] & LONG_MASK) + carry;     result[j + offset]=(int)sum;     carry=sum >>> 32;   }   return (int)carry; } "
"public static ValidatingUnmarshaller create(Grammar grammar,SAXUnmarshallerHandler _core,Locator locator){   Verifier v=new Verifier(new REDocumentDeclaration(grammar),new ErrorHandlerAdaptor(_core,locator));   v.setPanicMode(true);   return new ValidatingUnmarshaller(new VerifierFilter(v),_core); } "
"private static Exception extractException(Exception e){   while (e instanceof PrivilegedActionException) {     e=((PrivilegedActionException)e).getException();   }   return e; } "
"public static Subject createAuthenticatedUsersSubject(PolicyManager pm) throws PolicyException {   SubjectTypeManager mgr=pm.getSubjectTypeManager();   Subject subject=mgr.getSubject(\"AuthenticatedUsers\");   return subject; } "
"protected SetOfIntegerSyntax(String members){   this.members=parse(members); } "
"private Map mergeWithInternal(String ct,Map dMap){   Map rMap=null;   Map sMap=(Map)internalClientData.get(ct);   if (sMap != null) {     rMap=mergeMap(sMap,dMap);   }   return rMap; } "
"@Override public int countByUuid_C(String uuid,long companyId){   FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_C;   Object[] finderArgs=new Object[]{uuid,companyId};   Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);   if (count == null) {     StringBundler query=new StringBundler(3);     query.append(_SQL_COUNT_FOO_WHERE);     boolean bindUuid=false;     if (uuid == null) {       query.append(_FINDER_COLUMN_UUID_C_UUID_1);     }  else     if (uuid.equals(StringPool.BLANK)) {       query.append(_FINDER_COLUMN_UUID_C_UUID_3);     }  else {       bindUuid=true;       query.append(_FINDER_COLUMN_UUID_C_UUID_2);     }     query.append(_FINDER_COLUMN_UUID_C_COMPANYID_2);     String sql=query.toString();     Session session=null;     try {       session=openSession();       Query q=session.createQuery(sql);       QueryPos qPos=QueryPos.getInstance(q);       if (bindUuid) {         qPos.add(uuid);       }       qPos.add(companyId);       count=(Long)q.uniqueResult();       finderCache.putResult(finderPath,finderArgs,count);     }  catch (    Exception e) {       finderCache.removeResult(finderPath,finderArgs);       throw processException(e);     }  finally {       closeSession(session);     }   }   return count.intValue(); } "
"public FileAlterationMonitor(long interval,FileAlterationObserver... observers){   this(interval);   if (observers != null) {     for (    FileAlterationObserver observer : observers) {       addObserver(observer);     }   } } "
"public KeyAlreadyExistsException(String msg){   super(msg); } "
"public JsonValue update(String location,String resourceId,JsonValue payload,Context context) throws ResourceException {   Reject.ifTrue(StringUtils.isEmpty(location),\"The endpoint destination may not be null or empty.\");   Reject.ifTrue(StringUtils.isEmpty(resourceId),\"The resourceId to update may not be null or empty.\");   Reject.ifNull(payload,\"The payload object to create must not be null.\");   final Router rootRouter=router.get();   final UpdateRequest updateRequest=Requests.newUpdateRequest(location,resourceId,payload);   return rootRouter.handleUpdate(context,updateRequest).getOrThrowUninterruptibly().getContent(); } "
"public static MethodHandle identity(Class<?> type){   Wrapper btw=(type.isPrimitive() ? Wrapper.forPrimitiveType(type) : Wrapper.OBJECT);   int pos=btw.ordinal();   MethodHandle ident=IDENTITY_MHS[pos];   if (ident == null) {     ident=setCachedMethodHandle(IDENTITY_MHS,pos,makeIdentity(btw.primitiveType()));   }   if (ident.type().returnType() == type)   return ident;   assert (btw == Wrapper.OBJECT);   return makeIdentity(type); } "
"public static Completion of(String value,String message){   return new SimpleCompletion(value,message); } "
"protected void handleFile(File file,int depth,Collection<T> results) throws IOException { } "
"public static PdfAction createLaunch(PdfFileSpec fileSpec,boolean newWindow){   return createLaunch(fileSpec,null,newWindow); } "
"public String encode(){   return encode(new StringBuilder()).toString(); } "
"public static void removeAttributeDefaultValues(String serviceName,String schemaType,String attrName,Set defaultValues,boolean isOrgAttrSchema) throws UpgradeException {   String classMethod=\"UpgradeUtils:removeAttributeDefaultValues : \";   ServiceSchema ss=null;   if (debug.messageEnabled()) {     debug.message(classMethod + \"serviceName : \" + serviceName);     debug.message(classMethod + \"schemaTpe :\" + schemaType);     debug.message(classMethod + \"attrName : \" + attrName);     debug.message(classMethod + \"defaltValues :\" + defaultValues);     debug.message(classMethod + \"isOrgAttrSchema :\" + isOrgAttrSchema);   }   try {     if (isOrgAttrSchema) {       ServiceSchemaManager sm=getServiceSchemaManager(serviceName);       ss=sm.getOrganizationCreationSchema();     }  else {       ss=getServiceSchema(serviceName,null,schemaType);     }     if (ss != null) {       AttributeSchema attrSchema=ss.getAttributeSchema(attrName);       for (Iterator i=defaultValues.iterator(); i.hasNext(); ) {         String defaultValue=(String)i.next();         attrSchema.removeDefaultValue(defaultValue);       }     }   }  catch (  SMSException sme) {     debug.error(classMethod + \"Error removing default values \",sme);   } catch (  SSOException ssoe) {     debug.error(classMethod + \"Invalid SSO Token\",ssoe);   } } "
"public R visitString(StringPropertyDefinition pd,P p){   return visitUnknown(pd,p); } "
"public String formatErrors(){   String errorMessage=error.getMessage();   if (errorMessage == null)   errorMessage=\"\";   StringBuilder message=new StringBuilder(errorMessage);   if (message.length() > 0)   message.append(' ').append('(').append(status).append(')');  else   message.append(status);   List<FieldError> errors=error.getErrors();   if (errors != null && errors.size() > 0) {     message.append(':');     for (    FieldError fieldError : errors)     message.append(' ').append(format(fieldError)).append(',');     message.deleteCharAt(message.length() - 1);   }   return message.toString(); } "
"public DefaultCompressedSchema(ServerContext serverContext){   super(serverContext);   load(); } "
"public void runTest() throws Throwable {   Document doc;   NodeList genderList;   Node genderNode;   CharacterData entText;   EntityReference entReference;   doc=(Document)load(\"staff\",true);   genderList=doc.getElementsByTagName(\"gender\");   genderNode=genderList.item(2);   entReference=doc.createEntityReference(\"ent3\");   assertNotNull(\"createdEntRefNotNull\",entReference);   entText=(CharacterData)entReference.getFirstChild();   assertNotNull(\"entTextNotNull\",entText); {     boolean success=false;     try {       entText.insertData(1,\"newArg\");     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"throw_NO_MODIFICATION_ALLOWED_ERR\",success);   } } "
"private BigInteger(long val){   if (val < 0) {     val=-val;     signum=-1;   }  else {     signum=1;   }   int highWord=(int)(val >>> 32);   if (highWord == 0) {     mag=new int[1];     mag[0]=(int)val;   }  else {     mag=new int[2];     mag[0]=highWord;     mag[1]=(int)val;   } } "
"public HostPort hostPort(boolean allowWS) throws ParseException {   if (debug)   dbg_enter(\"hostPort\");   try {     Host host=this.host();     HostPort hp=new HostPort();     hp.setHost(host);     if (allowWS)     lexer.SPorHT();     if (lexer.hasMoreChars()) {       char la=lexer.lookAhead(0); switch (la) { case ':':         lexer.consume(1);       if (allowWS)       lexer.SPorHT();     try {       String port=lexer.number();       hp.setPort(Integer.parseInt(port));     }  catch (    NumberFormatException nfe) {       throw new ParseException(lexer.getBuffer() + \" :Error parsing port \",lexer.getPtr());     }   break; case ',': case ';': case '?': case '>': case ' ': case '\\t': case '\\r': case '\\n': case '/': break; case '%': if (stripAddressScopeZones) { break; } default : if (!allowWS) { throw new ParseException(lexer.getBuffer() + \" Illegal character in hostname:\" + lexer.lookAhead(0),lexer.getPtr()); } } } return hp; }   finally { if (debug) dbg_leave(\"hostPort\"); } } "
"public ItemStack(final Material type){   this(type,1); } "
"protected XMLPropertyListParser(){ } "
"public static CancelExtendedRequest copyOfCancelExtendedRequest(final CancelExtendedRequest request){   return new CancelExtendedRequestImpl(request); } "
"private void initDsTables(){   initializeDsTable();   initializeDsApplIfOpsTable();   try {     ObjectName name=new ObjectName(\"JMImplementation:type=MBeanServerDelegate\");     this.server.addNotificationListener(name,this,null,null);   }  catch (  Exception ex) {     logger.traceException(ex);   } } "
"private boolean handleOverwrite(final File sourceFile,final File destFile) throws IOException {   return FileUtils.delete(destFile) && FileUtils.copyFromSourceToDestFile(sourceFile,destFile,true,configuration); } "
"public SAML2ConfigBuilder idpId(String idpId){   this.idpId=idpId;   return this; } "
"public static Executor createTaskDistributor(){   return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,\"uil-pool-d-\")); } "
"private void ensureOpen() throws IOException {   if (closed) {     throw new IOException(\"Stream closed\");   } } "
"private static void log(final String message){   System.out.println(message); } "
"ConfigurationError(String msg,Exception x){   super(msg);   this.exception=x; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node testEmployee;   NamedNodeMap attributes;   int length;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"acronym\");   testEmployee=elementList.item(2);   attributes=testEmployee.getAttributes();   length=(int)attributes.getLength();   if ((\"text/html\".equals(getContentType()))) {     assertEquals(\"htmlLength\",2,length);   }  else {     assertEquals(\"length\",3,length);   } } "
"@Override public void sendRedirect(String location) throws IOException {   this._getHttpServletResponse().sendRedirect(location); } "
"void releaseParentSubtreeReadLock(){   for (DNLockHolder lock=parent; lock != null; lock=lock.parent) {     lock.subtreeLock.readLock().unlock();   } } "
"public SetupParameters backendType(String backendType){   this.backendType=backendType;   return this; } "
"public GetEffectiveRightsRequestControl(boolean isCritical,String authzDN,List<String> attrs){   super(OID_GET_EFFECTIVE_RIGHTS,isCritical);   this.rawAuthzDN=authzDN;   this.rawAttrs=attrs; } "
"public String encodeBody(){   return encodeBody(new StringBuilder()).toString(); } "
"@Override public boolean equals(Object obj){   return (obj instanceof MethodExpressionImpl && obj.hashCode() == this.hashCode()); } "
"public void testTestBitException(){   byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=-7;   BigInteger aNumber=new BigInteger(aSign,aBytes);   try {     aNumber.testBit(number);     fail(\"ArithmeticException has not been caught\");   }  catch (  ArithmeticException e) {   } } "
"private void addTestEntries(String suffix) throws Exception {   TestCaseUtils.addEntries(\"dn: ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: dept\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: ou=moved dept,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: moved dept\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: ou=groups,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: groups\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: ou=unique Groups,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: unique Groups\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: People\",\"\",\"dn: ou=Special People,\" + suffix,\"objectClass: top\",\"objectClass: organizationalUnit\",\"ou: Special People\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: cn=special person, ou=Special People,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 1\",\"givenName: User\",\"sn: 1\",\"cn: special person\",\"userPassword: password\",\"mail: user1\" + \"@test\",\"employeeNumber: 1\",\"mobile: 1-111-1234\",\"pager: 1-111-5678\",\"description: Use for seeAlso attribute\",\"\",\"dn: cn=group, ou=groups,\" + suffix,\"objectClass: top\",\"objectClass: groupOfNames\",\"cn: group\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: cn=group, ou=unique groups,\" + suffix,\"objectClass: top\",\"objectClass: groupOfUniqueNames\",\"cn: group\",\"aci: (targetattr= \\\"*\\\")\" + \"(version 3.0; acl \\\"allow all\\\";\" + \"allow(all) userdn=\\\"ldap:///anyone\\\";)\",\"\",\"dn: uid=user.1, ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 1\",\"givenName: User\",\"sn: 1\",\"cn: User 1\",\"userPassword: password\",\"mail: user1\" + \"@test\",\"employeeNumber: 1\",\"mobile: 1-111-1234\",\"pager: 1-111-5678\",\"telephoneNumber: 1-111-9012\",\"\",\"dn: uid=user.2, ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 2\",\"givenName: User\",\"sn: 2\",\"cn: User 2\",\"mail: user2\" + \"@test\",\"userPassword: password\",\"employeeNumber: 2\",\"mobile: 1-222-1234\",\"pager: 1-222-5678\",\"telephoneNumber: 1-222-9012\",\"\",\"dn: uid=user.3, ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 3\",\"givenName: User\",\"sn: 3\",\"cn: User 3\",\"mail: user3\" + \"@test\",\"userPassword: password\",\"employeeNumber: 3\",\"mobile: 1-333-1234\",\"pager: 1-333-5678\",\"telephoneNumber: 1-333-9012\",\"\",\"dn: uid=user.4, ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 4\",\"givenName: User\",\"sn: 4\",\"cn: User 4\",\"mail: user4\" + \"@test\",\"userPassword: password\",\"employeeNumber: 4\",\"mobile: 1-444-1234\",\"pager: 1-444-5678\",\"telephoneNumber: 1-444-9012\",\"\",\"dn: uid=user.5, ou=People, ou=dept,\" + suffix,\"objectClass: top\",\"objectClass: person\",\"objectClass: organizationalPerson\",\"objectClass: inetOrgPerson\",\"uid: 5\",\"givenName: User\",\"sn: 5\",\"cn: User 5\",\"mail: user5\" + \"@test\",\"userPassword: password\",\"employeeNumber: 5\",\"mobile: 1-555-1234\",\"pager: 1-555-5678\",\"telephoneNumber: 1-555-9012\"); } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   String s1=m_arg0.execute(xctxt).str();   String s2=m_arg1.execute(xctxt).str();   int index=s1.indexOf(s2);   return (-1 == index) ? XString.EMPTYSTRING : new XString(s1.substring(0,index)); } "
"public Value parseValueFromRegex(RegexLiteral exp) throws SyntaxException {   SMethodDef compile=getPattern_compile();   Ins.InvokeStatic invokeStatic=new Ins.InvokeStatic(compile,exp.line_col());   String regexStr=CompileUtil.getRegexStr(exp.literal());   Pattern p;   try {     p=Pattern.compile(regexStr);   }  catch (  PatternSyntaxException e) {     err.SyntaxException(\"Invalid regular expression \" + regexStr + \" : \"+ e.getMessage(),exp.line_col());     return null;   }   StringConstantValue theRegex=new StringConstantValue(p.pattern());   theRegex.setType((SClassDef)getTypeWithName(\"java.lang.String\",LineCol.SYNTHETIC));   invokeStatic.arguments().add(theRegex);   return invokeStatic; } "
"public static String toString(InputStream input,Charset encoding) throws IOException {   StringBuilderWriter sw=new StringBuilderWriter();   copy(input,sw,encoding);   return sw.toString(); } "
"public CodeException(String msg){   super(msg); } "
"public static XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {   XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);   XPathContext xpathSupport=new XPathContext(false);   int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);   return xpath.execute(xpathSupport,ctxtNode,prefixResolver); } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   logger.info(\"Got an INVITE  \" + request);   try {     logger.info(\"shootme: got an Invite sending OK\");     Response response=protocolObjects.messageFactory.createResponse(180,request);     ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     Address address=protocolObjects.addressFactory.createAddress(\"Shootme <sip:\" + myAddress + \":\"+ myPort+ \">\");     ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);     response.addHeader(contactHeader);     ServerTransaction st=requestEvent.getServerTransaction();     if (st == null) {       st=sipProvider.getNewServerTransaction(request);       logger.info(\"Server transaction created!\" + request);       logger.info(\"Dialog = \" + st.getDialog());       if (st.getDialog().getApplicationData() == null) {         st.getDialog().setApplicationData(new ApplicationData());       }     }  else {       logger.info(\"This is a RE INVITE \");       ReInviteTest.assertSame(\"Dialog mismatch \",st.getDialog(),this.dialog);     }     logger.info(\"got a server tranasaction \" + st);     byte[] content=request.getRawContent();     if (content != null) {       logger.info(\" content = \" + new String(content));       ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader(\"application\",\"sdp\");       logger.info(\"response = \" + response);       response.setContent(content,contentTypeHeader);     }     dialog=st.getDialog();     if (dialog != null) {       logger.info(\"Dialog \" + dialog);       logger.info(\"Dialog state \" + dialog.getState());     }     st.sendResponse(response);     response=protocolObjects.messageFactory.createResponse(200,request);     toHeader=(ToHeader)response.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     response.addHeader(contactHeader);     st.sendResponse(response);     logger.info(\"TxState after sendResponse = \" + st.getState());     this.inviteTid=st;   }  catch (  Exception ex) {     String s=\"unexpected exception\";     logger.error(s,ex);     ReInviteTest.fail(s);   } } "
"public static boolean isJavaValidName(String str){   if (str.isEmpty())   return false;   if (javaKeys.contains(str))   return false;   char first=str.charAt(0);   if (isValidNameStartChar(first)) {     for (int i=1; i < str.length(); ++i) {       char c=str.charAt(i);       if (!isValidNameChar(c))       return false;     }     return true;   }  else {     return false;   } } "
"public void initialize(Map configurationMap){ } "
"public void write(final char chars[],final int start,final int length) throws java.io.IOException {   if (m_writer != null)   m_writer.write(chars,start,length);   int lengthx3=(length << 1) + length;   if (lengthx3 >= buf_length) {     flushBuffer();     setBufferSize(2 * lengthx3);   }   if (lengthx3 > buf_length - count) {     flushBuffer();   }   final int n=length + start;   for (int i=start; i < n; i++) {     final char c=chars[i];     if (c < 0x80)     buf[count++]=(byte)(c);  else     if (c < 0x800) {       buf[count++]=(byte)(0xc0 + (c >> 6));       buf[count++]=(byte)(0x80 + (c & 0x3f));     }  else {       buf[count++]=(byte)(0xe0 + (c >> 12));       buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));       buf[count++]=(byte)(0x80 + (c & 0x3f));     }   } } "
"@Post public Representation verify(Representation body) throws ServerException, NotFoundException, InvalidGrantException, OAuth2RestletException {   final Request restletRequest=getRequest();   OAuth2Request request=requestFactory.create(restletRequest);   DeviceCode deviceCode;   try {     deviceCode=tokenStore.readDeviceCode(request.<String>getParameter(OAuth2Constants.DeviceCode.USER_CODE),request);   }  catch (  InvalidGrantException e) {     return getTemplateRepresentation(FORM,request,\"not_found\");   }   if (deviceCode == null || deviceCode.isIssued()) {     return getTemplateRepresentation(FORM,request,\"not_found\");   }   addRequestParamsFromDeviceCode(restletRequest,deviceCode);   try {     final String decision=request.getParameter(\"decision\");     if (StringUtils.isNotEmpty(decision)) {       if (csrfProtection.isCsrfAttack(request)) {         logger.debug(\"Session id from consent request does not match users session\");         throw new OAuth2RestletException(400,\"bad_request\",null,request.<String>getParameter(\"state\"));       }       final boolean consentGiven=\"allow\".equalsIgnoreCase(decision);       final boolean saveConsent=\"on\".equalsIgnoreCase(request.<String>getParameter(\"save_consent\"));       if (saveConsent) {         saveConsent(request);       }       if (consentGiven) {         ResourceOwner resourceOwner=resourceOwnerSessionValidator.validate(request);         deviceCode.setResourceOwnerId(resourceOwner.getId());         deviceCode.setAuthorized(true);         tokenStore.updateDeviceCode(deviceCode,request);       }  else {         tokenStore.deleteDeviceCode(deviceCode.getClientId(),deviceCode.getDeviceCode(),request);       }     }  else {       authorizationService.authorize(request);     }   }  catch (  IllegalArgumentException e) {     if (e.getMessage().contains(\"client_id\")) {       throw new OAuth2RestletException(400,\"invalid_request\",e.getMessage(),request.<String>getParameter(\"state\"));     }     throw new OAuth2RestletException(400,\"invalid_request\",e.getMessage(),request.<String>getParameter(\"redirect_uri\"),request.<String>getParameter(\"state\"));   } catch (  ResourceOwnerAuthenticationRequired e) {     throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),e.getRedirectUri().toString(),null);   } catch (  ResourceOwnerConsentRequired e) {     return representation.getRepresentation(getContext(),request,\"authorize.ftl\",getDataModel(e,request));   } catch (  InvalidClientException|RedirectUriMismatchException e) {     throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter(\"state\"));   } catch (  OAuth2Exception e) {     throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),request.<String>getParameter(\"redirect_uri\"),request.<String>getParameter(\"state\"),e.getParameterLocation());   }   return getTemplateRepresentation(THANKS_PAGE,request,null); } "
"@Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException {   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(DEBUG_SUCCESS_MSG + ClientUtils.getClientIPAddress(request));   }   FSUtils.checkHTTPRequestLength(request);   super.doPost(request,response); } "
"@Override public List<Foo> findAll(){   return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null); } "
"public static Entry addObjectClass(Entry entry){   Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);   if (attribute == null) {     entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);   }   return entry; } "
"private void updateLaunchLaterErrorMessages(Collection<LocalizableMessage> errorMessages){   setPrimaryValid(lTime);   setPrimaryValid(lDay);   setPrimaryValid(lMonth);   setPrimaryValid(lYear);   int previousErrorNumber=errorMessages.size();   int y=Integer.parseInt(year.getSelectedItem().toString());   int d=-1;   int m=month.getSelectedIndex();   int[] h={-1};   int[] min={-1};   checkTime(time,lTime,h,min,errorMessages);   try {     d=Integer.parseInt(day.getText().trim());     if (d < 0 || d > 31) {       errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY.get());       setPrimaryInvalid(lDay);     }   }  catch (  Exception ex) {     errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY.get());     setPrimaryInvalid(lDay);   }   if (errorMessages.size() == previousErrorNumber) {     GregorianCalendar calendar=new GregorianCalendar(y,m,d,h[0],min[0]);     Date date=calendar.getTime();     if (calendar.get(Calendar.MONTH) != m) {       errorMessages.add(ERR_CTRL_PANEL_INVALID_DAY_IN_MONTH.get(d,month.getSelectedItem()));       setPrimaryInvalid(lDay);       setPrimaryInvalid(lMonth);     }  else     if (date.before(new Date())) {       errorMessages.add(ERR_CTRL_PANEL_DATE_ALREADY_PASSED.get());       setPrimaryInvalid(lTime);       setPrimaryInvalid(lDay);       setPrimaryInvalid(lMonth);       setPrimaryInvalid(lYear);     }   } } "
"public boolean isNavigationAtBottom(){   return (mSmallestWidthDp >= 600 || mInPortrait); } "
"public static BooleanArgument generateSelfSignedArgument() throws ArgumentException {   return BooleanArgument.builder(\"generateSelfSignedCertificate\").description(INFO_ARGUMENT_DESCRIPTION_USE_SELF_SIGNED_CERTIFICATE.get()).buildArgument(); } "
"protected void stopAutoScrolling(){   isAutoScrolling=false;   if (autoscrollTimer != null) {     autoscrollTimer.stop();     autoscrollTimer=null;   } } "
"public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls,Calendar calendar){   if (SignUtils.hasUnsupportedCriticalExtension(cert))   return \"Has unsupported critical extension\";   try {     cert.checkValidity(calendar.getTime());   }  catch (  Exception e) {     return e.getMessage();   }   if (crls != null) {     for (    CRL crl : crls) {       if (crl.isRevoked(cert))       return \"Certificate revoked\";     }   }   return null; } "
"public AuthenticationNotSupportedException(){   super(); } "
"public SQLException(Throwable cause){   super(cause);   if (!(this instanceof SQLWarning)) {     if (DriverManager.getLogWriter() != null) {       printStackTrace(DriverManager.getLogWriter());     }   } } "
"public boolean is_inside(PlaPointFloat begin,PlaPointFloat end,double margin){   if (is_nan || begin.is_nan || end.is_nan)   return false;   double d_begin_this=begin.distance_square(this);   double d_end_this=end.distance_square(this);   double d_begin_end=begin.distance_square(end);   if (d_begin_end >= d_begin_this + margin) {     if (d_begin_end >= d_end_this + margin) {       return true;     }  else {       return false;     }   }  else {     if (d_begin_end >= d_end_this + margin) {       return false;     }  else {       return false;     }   } } "
"public void delete() throws SMSException, SSOException {   if (readOnly) {     if (debug.warningEnabled()) {       debug.warning(\"SMSEntry: Attempted to delete an entry that \" + \"is marked as read-only: \" + dn);     }     throw (new SMSException(SMSException.STATUS_NO_PERMISSION,\"sms-INSUFFICIENT_ACCESS_RIGHTS\"));   }   delete(ssoToken); } "
"public FileExistsException(File file){   super(\"File \" + file + \" exists\"); } "
"@Override public int read(byte[] b) throws IOException {   return this.read(b,0,b.length); } "
"final Node predecessor() throws NullPointerException {   Node p=prev;   if (p == null)   throw new NullPointerException();  else   return p; } "
"@SuppressWarnings({\"unchecked\",\"rawtypes\"}) private static int countRunAndMakeAscending(Object[] a,int lo,int hi){   assert lo < hi;   int runHi=lo + 1;   if (runHi == hi)   return 1;   if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {     while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;     reverseRange(a,lo,runHi);   }  else {     while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;   }   return runHi - lo; } "
"public void generateUUID(){   byte[] data=new byte[16];   UUIDGenerator.randomUUID(USE_SECURE_RANDOM_FOR_UUID,data,0);   setUniqueId(data); } "
"public void printSet(Set set,int indentLevel){   Iterator itr=set.iterator();   while (itr.hasNext()) {     printIndent(indentLevel);     writer.println(itr.next().toString());   }   writer.flush(); } "
"public static MenuResult<Void> modifyManagedObject(ConsoleApplication app,ManagementContext context,ManagedObject<?> mo,SubCommandHandler handler) throws ClientException {   ManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();   LocalizableMessage ufn=d.getUserFriendlyName();   PropertyValueEditor editor=new PropertyValueEditor(app,context);   while (true) {     if (app.isInteractive()) {       SortedSet<PropertyDefinition<?>> properties=new TreeSet<>();       for (      PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {         if (cannotDisplay(app,pd)) {           continue;         }         properties.add(pd);       }       MenuResult<Void> result=editor.edit(mo,properties,false);       if (result.isSuccess()) {         result=checkReferences(app,context,mo,handler);         if (result.isAgain()) {           continue;         }       }       if (result.isQuit()) {         if (!app.isMenuDrivenMode()) {           app.println();           app.println(INFO_DSCFG_CONFIRM_MODIFY_FAIL.get(ufn));         }         return MenuResult.quit();       }  else       if (result.isCancel()) {         return MenuResult.cancel();       }     }     try {       if (mo.isModified()) {         mo.commit();         if (app.isVerbose() || app.isInteractive()) {           app.println();           app.println(INFO_DSCFG_CONFIRM_MODIFY_SUCCESS.get(ufn));         }         for (        PropertyEditorModification<?> mod : editor.getModifications()) {           try {             handler.getCommandBuilder().addArgument(createArgument(mod));           }  catch (          ArgumentException ae) {             throw new RuntimeException(\"Unexpected error generating the command builder: \" + ae,ae);           }         }         handler.setCommandBuilderUseful(true);       }       return MenuResult.success();     }  catch (    MissingMandatoryPropertiesException e) {       if (app.isInteractive()) {         app.errPrintln();         displayMissingMandatoryPropertyException(app,e);         app.errPrintln();         if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {           return MenuResult.cancel();         }       }  else {         throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);       }     } catch (    AuthorizationException e) {       LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_AUTHZ.get(ufn);       throw new ClientException(ReturnCode.INSUFFICIENT_ACCESS_RIGHTS,msg);     } catch (    ConcurrentModificationException e) {       LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CME.get(ufn);       throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,msg);     } catch (    OperationRejectedException e) {       if (app.isInteractive()) {         app.errPrintln();         displayOperationRejectedException(app,e);         app.errPrintln();         if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {           return MenuResult.cancel();         }       }  else {         throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);       }     } catch (    LdapException e) {       LocalizableMessage msg=ERR_DSCFG_ERROR_MODIFY_CE.get(ufn,e.getMessage());       throw new ClientException(ReturnCode.OTHER,msg);     } catch (    ManagedObjectAlreadyExistsException e) {       throw new IllegalStateException(e);     }   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node testEmployee;   String employeeLocalName;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagName(\"employee\");   testEmployee=elementList.item(0);   employeeLocalName=testEmployee.getLocalName();   assertEquals(\"lname\",\"employee\",employeeLocalName); } "
"@Override public void shutdown(){   processServerShutdown(null);   try {     writer.flush();     writer.close();   }  catch (  Exception e) {     errorHandler.handleCloseError(e);   } } "
"protected Expression visitChildren(final ExpressionVisitor visitor){   if (!canReduce()) {     throw Error.mustBeReducible();   }   return visitor.visit(reduceAndCheck()); } "
"public int length(){   return mText.length - mGapLength; } "
"public final void testDEFAULTmgfName(){   assertEquals(\"MGF1\",PSSParameterSpec.DEFAULT.getMGFAlgorithm()); } "
"boolean writeStyle(String name,Style style,boolean outputStyle) throws IOException {   boolean didOutputStyle=false;   Enumeration attributes=style.getAttributeNames();   if (attributes != null) {     while (attributes.hasMoreElements()) {       Object attribute=attributes.nextElement();       if (attribute instanceof CSS.Attribute) {         String value=style.getAttribute(attribute).toString();         if (value != null) {           if (!outputStyle) {             writeStyleStartTag();             outputStyle=true;           }           if (!didOutputStyle) {             didOutputStyle=true;             indentSmart();             write(name);             write(\" {\");           }  else {             write(\";\");           }           write(' ');           write(attribute.toString());           write(\": \");           write(value);         }       }     }   }   if (didOutputStyle) {     write(\" }\");     writeLineSeparator();   }   return didOutputStyle; } "
"public void testToBigIntegerZero(){   String a=\"-123809648392384754573567356745735.63567890295784902768787678287E-500\";   BigInteger bNumber=new BigInteger(\"0\");   BigDecimal aNumber=new BigDecimal(a);   BigInteger result=aNumber.toBigInteger();   assertTrue(\"incorrect value\",result.equals(bNumber)); } "
"public BAD_OPERATION(int minor,CompletionStatus completed){   this(\"\",minor,completed); } "
"public static float readSwappedFloat(byte[] data,int offset){   return Float.intBitsToFloat(readSwappedInteger(data,offset)); } "
"public static int unsafeArrayOffset(ByteBuffer b){   return ((ByteArrayBuffer)b).arrayOffset; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Element testAddr;   String attrValue;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagName(\"emp:address\");   testAddr=(Element)elementList.item(0);   assertNotNull(\"empAddrNotNull\",testAddr);   attrValue=testAddr.getAttributeNS(\"http://www.nist.gov\",\"domestic\");   assertEquals(\"attrValue\",\"Yes\",attrValue); } "
"public Observable<InputStream> open(DriveId driveId){   return open(driveId,null); } "
"public WordIterator(Locale locale){   mIterator=BreakIterator.getWordInstance(locale); } "
"public void removeEventListener(SIPDialogEventListener oldListener){   eventListeners.remove(oldListener); } "
"private static void putDecodedValue(Map<String,String> data,String name,String value,String encoding){   if (value == null || value.isEmpty()) {     if (utilDebug.messageEnabled()) {       utilDebug.message(\"AuthUtils::putDecodedValue the '\" + name + \"' value is null or empty'\");     }     return;   }   String decodedValue=getCharDecodedField(value,encoding);   if (decodedValue.isEmpty()) {     if (utilDebug.messageEnabled()) {       utilDebug.message(\"AuthUtils::putDecodedValue decoding with encoding '\" + encoding + \"' is empty\");     }     return;   }   data.put(name,decodedValue); } "
"protected void createDomain(SSOToken token,Guid orgGuid,String domainName,AttrSet attrSet) throws AMException {   if (DCTREE_START_DN == null) {     throw new AMException(AMSDKBundle.getString(\"355\"),\"355\");   }   if ((domainName != null) && (!domainName.equals(\"\"))) {     try {       DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));       dcTree.addDomain(domainName);       dcTree.setDomainMapping(domainName,orgGuid);       String status=attrSet.getValue(INET_DOMAIN_STATUS_ATTR);       if (status != null) {         dcTree.setDomainStatus(domainName,status);       }     }  catch (    InvalidDCRootException ie) {       debug.error(\"DCTree.createDomain(): \",ie);       throw new AMException(AMSDKBundle.getString(\"343\"),\"343\");     } catch (    UMSException ue) {       debug.error(\"DCTree.createDomain(): \",ue);       throw new AMException(AMSDKBundle.getString(\"344\"),\"344\");     }   } } "
"@KnownFailure(\" Ticket 91 : relies on not supported features: getCatalog, keys\") public void test_getPrimaryKeysLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {   ResultSet rs=meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);   ResultSetMetaData rsmd=rs.getMetaData();   assertTrue(\"Rows not obtained\",rs.next());   int col=rsmd.getColumnCount();   assertEquals(\"Incorrect number of columns\",6,col);   String[] columnNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};   for (int c=1; c <= col; ++c) {     assertEquals(\"Incorrect column name\",columnNames[c - 1],rsmd.getColumnName(c));   }   assertEquals(\"Incorrect table catalogue\",conn.getCatalog(),rs.getString(\"TABLE_CAT\").toLowerCase());   assertEquals(\"Incorrect table schema\",\"\",rs.getString(\"TABLE_SCHEM\"));   assertEquals(\"Incorrect table name\",DatabaseCreator.TEST_TABLE1,rs.getString(\"TABLE_NAME\").toLowerCase());   assertEquals(\"Incorrect column name\",\"id\",rs.getString(\"COLUMN_NAME\").toLowerCase());   assertEquals(\"Incorrect sequence number\",1,rs.getShort(\"KEY_SEQ\"));   assertEquals(\"Incorrect primary key name\",\"primary\",rs.getString(\"PK_NAME\").toLowerCase());   rs.close();   conn.close();   try {     meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);     fail(\"SQLException not thrown\");   }  catch (  SQLException e) {   } } "
"public static JsonValue toJsonValue(String alias,Key key) throws Exception {   JsonValue content=json(object());   content.put(ResourceResponse.FIELD_CONTENT_ID,alias);   if (key instanceof PrivateKey) {     content.put(\"privateKey\",getKeyMap(key).asMap());   }  else   if (key instanceof SecretKey) {     content.put(\"secret\",getSecretKeyMap(key).asMap());   }   return content; } "
"public static CRAMMD5SASLBindRequest newCRAMMD5SASLBindRequest(final String authenticationID,final char[] password){   return new CRAMMD5SASLBindRequestImpl(authenticationID,getBytes(password)); } "
"protected void isCommentWellFormed(String data){   if (data == null || (data.length() == 0)) {     return;   }   char[] dataarray=data.toCharArray();   int datalength=dataarray.length;   if (fIsXMLVersion11) {     int i=0;     while (i < datalength) {       char c=dataarray[i++];       if (XML11Char.isXML11Invalid(c)) {         if (XMLChar.isHighSurrogate(c) && i < datalength) {           char c2=dataarray[i++];           if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {             continue;           }         }         String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));         }       }  else       if (c == '-' && i < datalength && dataarray[i] == '-') {         String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));         }       }     }   }  else {     int i=0;     while (i < datalength) {       char c=dataarray[i++];       if (XMLChar.isInvalid(c)) {         if (XMLChar.isHighSurrogate(c) && i < datalength) {           char c2=dataarray[i++];           if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {             continue;           }         }         String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));         }       }  else       if (c == '-' && i < datalength && dataarray[i] == '-') {         String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);         if (fErrorHandler != null) {           fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));         }       }     }   }   return; } "
"@Override public void recycle(){   compressionStream=null; } "
"@Override public void onClick(DialogInterface dialog,int which){   ArrayList<Integer> values=new ArrayList<Integer>();   for (int i=0; i < mValues.length; i++) {     if (mCheckedItems[i]) {       values.add(mValues[i]);     }   }   if (values.size() < 2) {     return;   }   mPrefs.edit().putString(TimeoutTracker.KEY,TextUtils.join(\",\",values)).commit(); } "
"public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException { } "
"protected DialogTypeSelection(int value){   super(value); } "
"public Furnace(BlockFace direction){   this();   setFacingDirection(direction); } "
"public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {   reset(in);   LinkedList statusStack=new LinkedList();   LinkedList valueStack=new LinkedList();   try {     do {       nextToken(); switch (status) { case S_INIT: switch (token.type) { case Yytoken.TYPE_VALUE:           status=S_IN_FINISHED_VALUE;         statusStack.addFirst(new Integer(status));       valueStack.addFirst(token.value);     break; case Yytoken.TYPE_LEFT_BRACE:   status=S_IN_OBJECT; statusStack.addFirst(new Integer(status)); valueStack.addFirst(createObjectContainer(containerFactory)); break; case Yytoken.TYPE_LEFT_SQUARE: status=S_IN_ARRAY; statusStack.addFirst(new Integer(status)); valueStack.addFirst(createArrayContainer(containerFactory)); break; default : status=S_IN_ERROR; } break; case S_IN_FINISHED_VALUE: if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst();  else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token); case S_IN_OBJECT: switch (token.type) { case Yytoken.TYPE_COMMA: break; case Yytoken.TYPE_VALUE: if (token.value instanceof String) { String key=(String)token.value; valueStack.addFirst(key); status=S_PASSED_PAIR_KEY; statusStack.addFirst(new Integer(status)); }  else { status=S_IN_ERROR; } break; case Yytoken.TYPE_RIGHT_BRACE: if (valueStack.size() > 1) { statusStack.removeFirst(); valueStack.removeFirst(); status=peekStatus(statusStack); }  else { status=S_IN_FINISHED_VALUE; } break; default : status=S_IN_ERROR; break; } break; case S_PASSED_PAIR_KEY: switch (token.type) { case Yytoken.TYPE_COLON: break; case Yytoken.TYPE_VALUE: statusStack.removeFirst(); String key=(String)valueStack.removeFirst(); Map parent=(Map)valueStack.getFirst(); parent.put(key,token.value); status=peekStatus(statusStack); break; case Yytoken.TYPE_LEFT_SQUARE: statusStack.removeFirst(); key=(String)valueStack.removeFirst(); parent=(Map)valueStack.getFirst(); List newArray=createArrayContainer(containerFactory); parent.put(key,newArray); status=S_IN_ARRAY; statusStack.addFirst(new Integer(status)); valueStack.addFirst(newArray); break; case Yytoken.TYPE_LEFT_BRACE: statusStack.removeFirst(); key=(String)valueStack.removeFirst(); parent=(Map)valueStack.getFirst(); Map newObject=createObjectContainer(containerFactory); parent.put(key,newObject); status=S_IN_OBJECT; statusStack.addFirst(new Integer(status)); valueStack.addFirst(newObject); break; default : status=S_IN_ERROR; } break; case S_IN_ARRAY: switch (token.type) { case Yytoken.TYPE_COMMA: break; case Yytoken.TYPE_VALUE: List val=(List)valueStack.getFirst(); val.add(token.value); break; case Yytoken.TYPE_RIGHT_SQUARE: if (valueStack.size() > 1) { statusStack.removeFirst(); valueStack.removeFirst(); status=peekStatus(statusStack); }  else { status=S_IN_FINISHED_VALUE; } break; case Yytoken.TYPE_LEFT_BRACE: val=(List)valueStack.getFirst(); Map newObject=createObjectContainer(containerFactory); val.add(newObject); status=S_IN_OBJECT; statusStack.addFirst(new Integer(status)); valueStack.addFirst(newObject); break; case Yytoken.TYPE_LEFT_SQUARE: val=(List)valueStack.getFirst(); List newArray=createArrayContainer(containerFactory); val.add(newArray); status=S_IN_ARRAY; statusStack.addFirst(new Integer(status)); valueStack.addFirst(newArray); break; default : status=S_IN_ERROR; } break; case S_IN_ERROR: throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token); } if (status == S_IN_ERROR) { throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token); } }  while (token.type != Yytoken.TYPE_EOF); }  catch (IOException ie) { throw ie; } throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token); } "
"public void testSHAProvider(){   MessageDigest md=null;   try {     md=MessageDigest.getInstance(\"SHA\");   }  catch (  NoSuchAlgorithmException e) {     fail(\"unexpected exception: \" + e);   }   byte[] bytes=new byte[]{1,1,1,1,1};   try {     md.update(bytes,-1,1);     fail(\"No expected IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     md.update(bytes,1,-1);     fail(\"No expected IndexOutOfBoundsException\");   }  catch (  IndexOutOfBoundsException e) {   }   try {     md=MessageDigest.getInstance(\"SHA\");   }  catch (  NoSuchAlgorithmException e) {     fail(\"unexpected exception: \" + e);   }   try {     md.digest(bytes,0,-1);     fail(\"No expected DigestException\");   }  catch (  DigestException e) {   }   try {     md.digest(bytes,-1,0);     fail(\"No expected DigestException\");   }  catch (  DigestException e) {   }   try {     md=MessageDigest.getInstance(\"UnknownDigest\");     fail(\"expected NoSuchAlgorithmException\");   }  catch (  NoSuchAlgorithmException e) {   } } "
"public void testZeroZero(){   byte aBytes[]={0};   byte bBytes[]={0};   int aSign=0;   int bSign=0;   byte rBytes[]={0};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.and(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",0,result.signum()); } "
"protected void paintDoubleBuffered(JComponent c,Image image,Graphics g,int clipX,int clipY,int clipW,int clipH){   Graphics osg=image.getGraphics();   int bw=Math.min(clipW,image.getWidth(null));   int bh=Math.min(clipH,image.getHeight(null));   int x, y, maxx, maxy;   try {     for (x=clipX, maxx=clipX + clipW; x < maxx; x+=bw) {       for (y=clipY, maxy=clipY + clipH; y < maxy; y+=bh) {         osg.translate(-x,-y);         osg.setClip(x,y,bw,bh);         if (volatileBufferType != Transparency.OPAQUE && osg instanceof Graphics2D) {           final Graphics2D g2d=(Graphics2D)osg;           final Color oldBg=g2d.getBackground();           g2d.setBackground(c.getBackground());           g2d.clearRect(x,y,bw,bh);           g2d.setBackground(oldBg);         }         c.paintToOffscreen(osg,x,y,bw,bh,maxx,maxy);         g.setClip(x,y,bw,bh);         if (volatileBufferType != Transparency.OPAQUE && g instanceof Graphics2D) {           final Graphics2D g2d=(Graphics2D)g;           final Composite oldComposite=g2d.getComposite();           g2d.setComposite(AlphaComposite.Src);           g2d.drawImage(image,x,y,c);           g2d.setComposite(oldComposite);         }  else {           g.drawImage(image,x,y,c);         }         osg.translate(x,y);       }     }   }   finally {     osg.dispose();   } } "
"protected StreamBitratePropertiesReader(){ } "
"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){   mAdapter.swapCursor(data); } "
"public Set keySet(){   if (keySet == null)   keySet=new SynchronizedSet(new KeySet(),this);   return keySet; } "
"public String toURLEncodedQueryString() throws FSMsgException {   if (proxyCount == -1) {     FSUtils.debug.error(\"FSScoping.toURLEncodedQueryString: \" + \"proxyCount is not defined.\");     throw new FSMsgException(\"proxyCountNotDefined\",null);   }   StringBuffer sb=new StringBuffer(100);   sb.append(\"ProxyCount=\").append(proxyCount).append(\"&\");   if (idpList != null) {     IDPEntries entries=idpList.getIDPEntries();     if (entries != null) {       List idps=entries.getIDPEntryList();       if (idps != null && idps.size() != 0) {         Iterator iter=idps.iterator();         StringBuffer strProviders=new StringBuffer(100);         String space=\"\";         while (iter.hasNext()) {           IDPEntry entry=(IDPEntry)iter.next();           String providerID=entry.getProviderID();           strProviders.append(space).append(providerID);           space=\" \";         }         sb.append(\"IDPEntries=\").append(URLEncDec.encode(strProviders.toString()));       }     }   }   sb.append(IFSConstants.AMPERSAND);   return sb.toString(); } "
"public BootstrapData(String basedir) throws IOException {   this.basedir=basedir;   String bootstrapFile=basedir + \"/\" + BOOTSTRAP;   if (new File(bootstrapFile).exists()) {     readFile(bootstrapFile);   }  else {     readBootJson(basedir);   } } "
"public TagField createField(ID3v24FieldKey id3Key,String value) throws KeyNotFoundException, FieldDataInvalidException {   if (id3Key == null) {     throw new KeyNotFoundException();   }   return super.doCreateTagField(new FrameAndSubId(id3Key.getFrameId(),id3Key.getSubId()),value); } "
"public int dimCheck(Pnt p){   int len=this.coordinates.length;   if (len != p.coordinates.length)   throw new IllegalArgumentException(\"Dimension mismatch\");   return len; } "
"public FacebookDialogException(String message,int errorCode,String failingUrl){   super(message);   this.errorCode=errorCode;   this.failingUrl=failingUrl; } "
"public void testGetInstanceString02() throws NoSuchAlgorithmException {   if (!DEFSupported) {     fail(NotSupportMsg);     return;   }   KeyAgreement keyA;   for (int i=0; i < validValues.length; i++) {     keyA=KeyAgreement.getInstance(validValues[i]);     assertEquals(\"Incorrect algorithm\",keyA.getAlgorithm(),validValues[i]);   } } "
"public void componentResized(ComponentEvent e){ } "
"public Object parseObject(String text,ParsePosition status){   return parse(text); } "
"public void testCodeSigner_00(){   try {     new CodeSigner(null,ts);     fail(\"must not accept null\");   }  catch (  NullPointerException ex) {   } } "
"protected void failAndClearBuffer(){   for (  Tuple t : buffer) {     collector.fail(t);   }   buffer.clear(); } "
"private void initialize(URI p_other){   m_scheme=p_other.getScheme();   m_userinfo=p_other.getUserinfo();   m_host=p_other.getHost();   m_port=p_other.getPort();   m_path=p_other.getPath();   m_queryString=p_other.getQueryString();   m_fragment=p_other.getFragment(); } "
"public boolean isChar(StringLiteral literal,LineCol lineCol,boolean testSymbol) throws SyntaxException {   String str=literal.literal();   str=str.substring(1);   str=str.substring(0,str.length() - 1);   if (testSymbol && !literal.literal().startsWith(\"\\'\"))   return false;   String s=unescape(str,lineCol);   assert s != null;   return s.length() == 1; } "
"public static void createFileLicenseApproved(final String installationPath){   if (getApproval() && installationPath != null) {     String instanceDirname=Utils.getInstancePathFromInstallPath(installationPath);     String instanceLegalDirName=instanceDirname + File.separator + LEGAL_FOLDER_NAME;     File instanceLegalDir=new File(instanceLegalDirName);     try {       if (!instanceLegalDir.exists()) {         instanceLegalDir.mkdir();       }       new File(instanceLegalDir,ACCEPTED_LICENSE_FILE_NAME).createNewFile();     }  catch (    IOException e) {     }   } } "
"@Override public BasicSplitPaneDivider createDefaultDivider(){   SynthSplitPaneDivider divider=new SynthSplitPaneDivider(this);   divider.setDividerSize(splitPane.getDividerSize());   return divider; } "
"InterfaceAddress(Inet6Address address,short prefixLength){   this.address=address;   this.broadcastAddress=null;   this.prefixLength=prefixLength; } "
"public double noise(double x,double y,double z,double w,double frequency,double amplitude,boolean normalized){   double result=0;   double amp=1;   double freq=1;   double max=0;   x*=xScale;   y*=yScale;   z*=zScale;   w*=wScale;   for (  NoiseGenerator octave : octaves) {     result+=((SimplexNoiseGenerator)octave).noise(x * freq,y * freq,z * freq,w * freq) * amp;     max+=amp;     freq*=frequency;     amp*=amplitude;   }   if (normalized) {     result/=max;   }   return result; } "
"protected static final boolean isWhiteSpaceExceptSpace(char ch){   if (ch >= 0x20)   return false;   return ch == 0x9 || ch == 0xA || ch == 0xD; } "
"public final void test_verify() throws Exception {   mySSLSession session=new mySSLSession(\"localhost\",1080,null);   HostnameVerifier hv=HttpsURLConnection.getDefaultHostnameVerifier();   assertFalse(hv.verify(\"localhost\",session)); } "
"private void buildStatements(StringBuilder sb,List<Statement> statements,int indentation) throws SyntaxException {   for (  Statement stmt : statements) {     buildStatement(sb,stmt,indentation);     if (sb.charAt(sb.length() - 1) != '\\n') {       sb.append(\";\\n\");     }   } } "
"public boolean seek(final File seekFile,long startByte) throws IOException {   ByteBuffer header;   long filePointerCount;   final FileInputStream fis=new FileInputStream(seekFile);   final FileChannel fc=fis.getChannel();   ByteBuffer bb=ByteBuffer.allocateDirect(FILE_BUFFER_SIZE);   fc.position(startByte);   filePointerCount=startByte;   fc.read(bb,startByte);   bb.flip();   boolean syncFound=false;   try {     do {       if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) {         bb.clear();         fc.position(filePointerCount);         fc.read(bb,fc.position());         bb.flip();         if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) {           return false;         }       }       if (MPEGFrameHeader.isMPEGFrame(bb)) {         try {           if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {             MP3AudioHeader.logger.finest(\"Found Possible header at:\" + filePointerCount);           }           mp3FrameHeader=MPEGFrameHeader.parseMPEGHeader(bb);           syncFound=true;           if ((header=XingFrame.isXingFrame(bb,mp3FrameHeader)) != null) {             if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {               MP3AudioHeader.logger.finest(\"Found Possible XingHeader\");             }             try {               mp3XingFrame=XingFrame.parseXingFrame(header);             }  catch (            InvalidAudioFrameException ex) {             }             break;           }  else           if ((header=VbriFrame.isVbriFrame(bb,mp3FrameHeader)) != null) {             if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {               MP3AudioHeader.logger.finest(\"Found Possible VbriHeader\");             }             try {               mp3VbriFrame=VbriFrame.parseVBRIFrame(header);             }  catch (            InvalidAudioFrameException ex) {             }             break;           }  else {             syncFound=isNextFrameValid(seekFile,filePointerCount,bb,fc);             if (syncFound) {               break;             }           }         }  catch (        InvalidAudioFrameException ex) {         }       }       bb.position(bb.position() + 1);       filePointerCount++;     }  while (!syncFound);   }  catch (  EOFException ex) {     MP3AudioHeader.logger.log(Level.WARNING,\"Reached end of file without finding sync match\",ex);     syncFound=false;   } catch (  IOException iox) {     MP3AudioHeader.logger.log(Level.SEVERE,\"IOException occurred whilst trying to find sync\",iox);     syncFound=false;     throw iox;   }  finally {     if (fc != null) {       fc.close();     }     if (fis != null) {       fis.close();     }   }   if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {     MP3AudioHeader.logger.finer(\"Return found matching mp3 header starting at\" + filePointerCount);   }   setFileSize(seekFile.length());   setMp3StartByte(filePointerCount);   setTimePerFrame();   setNumberOfFrames();   setTrackLength();   setBitRate();   setEncoder();   return syncFound; } "
"private NullOutputStream(){ } "
"public com.sun.identity.saml2.jaxb.metadata.ContactPersonElement createContactPersonElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.ContactPersonElementImpl(); } "
"public java.sql.Date readDate() throws SQLException {   return (java.sql.Date)getNextAttribute(); } "
"public List<Attribute> toAttributeList() throws IllegalStateException {   return CollectionUtils.newArrayList(toAttribute()); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionType createSecretKeyProtectionType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionTypeImpl(); } "
"public void sendReInvite() throws Exception {   Request inviteRequest=dialog.createRequest(Request.INVITE);   MaxForwardsHeader mf=ProtocolObjects.headerFactory.createMaxForwardsHeader(10);   inviteRequest.setHeader(mf);   inviteRequest.setHeader(this.contactHeader);   ClientTransaction ct=provider.getNewClientTransaction(inviteRequest);   dialog.sendRequest(ct); } "
"public void handleMBeanUnregistration(ObjectName objectName,String roleName) throws IllegalArgumentException, RoleNotFoundException, InvalidRoleValueException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RelationNotFoundException {   if (objectName == null || roleName == null) {     String excMsg=\"Invalid parameter.\";     throw new IllegalArgumentException(excMsg);   }   RELATION_LOGGER.entering(RelationSupport.class.getName(),\"handleMBeanUnregistration\",new Object[]{objectName,roleName});   handleMBeanUnregistrationInt(objectName,roleName,false,null);   RELATION_LOGGER.exiting(RelationSupport.class.getName(),\"handleMBeanUnregistration\");   return; } "
"public LoginModuleSample() throws LoginException {   System.out.println(\"LoginModuleSample()\"); } "
"public boolean isValidDay(int dayOfMonth){   return dayOfMonth >= 1 && dayOfMonth <= lengthOfMonth(); } "
"@Override public synchronized void stop(int svc) throws ChannelException {   if (hbthread != null) {     hbthread.stopHeartbeat();     hbthread=null;   }   super.stop(svc); } "
"public void startCDATA() throws SAXException {   m_handler.startCDATA(); } "
"public static ValueRange of(long min,long maxSmallest,long maxLargest){   return of(min,min,maxSmallest,maxLargest); } "
"public DelegatingConnection(final C c){   super();   _conn=c; } "
"public static CertPath genCertPath(int howMany,int startID){   Certificate[] certs=new Certificate[howMany];   for (int i=0; i < howMany; i++) {     certs[i]=new TestCertificate(Integer.toString(startID + i));   }   return new TestCertPath(certs); } "
"public void testCertStore06() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {   if (!initParams()) {     return;   }   String provider=null;   for (int i=0; i < dValid.length; i++) {     try {       CertStore.getInstance(dValid[i],dParams,provider);       fail(\"IllegalArgumentException must be thrown\");     }  catch (    IllegalArgumentException e) {     }     try {       CertStore.getInstance(dValid[i],dParams,\"\");       fail(\"IllegalArgumentException must be thrown\");     }  catch (    IllegalArgumentException e) {     }   } } "
"public static Border createBevelBorder(int type,Color highlight,Color shadow){   return new BevelBorder(type,highlight,shadow); } "
"@Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){   String fullCode=code;   float fontX=0;   if (font != null) {     if (generateChecksum && checksumText)     fullCode+=getChecksum(fullCode);     fontX=font.getWidth(fullCode=altText != null ? altText : fullCode,size);   }   String bCode=keepNumbers(code);   if (generateChecksum)   bCode+=getChecksum(bCode);   int len=bCode.length();   float fullWidth=len * (3 * x + 2 * x * n) + (6 + n) * x;   float barStartX=0;   float textStartX=0; switch (textAlignment) { case ALIGN_LEFT:     break; case ALIGN_RIGHT:   if (fontX > fullWidth) {     barStartX=fontX - fullWidth;   }  else {     textStartX=fullWidth - fontX;   } break; default : if (fontX > fullWidth) { barStartX=(fontX - fullWidth) / 2; }  else { textStartX=(fullWidth - fontX) / 2; } break; } float barStartY=0; float textStartY=0; if (font != null) { if (baseline <= 0) { textStartY=barHeight - baseline; }  else { textStartY=-getDescender(); barStartY=textStartY + baseline; } } byte[] bars=getBarsInter25(bCode); boolean print=true; if (barColor != null) canvas.setFillColor(barColor); for (int k=0; k < bars.length; ++k) { float w=(bars[k] == 0 ? x : x * n); if (print) { canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight); } print=!print; barStartX+=w; } canvas.fill(); if (font != null) { if (textColor != null) { canvas.setFillColor(textColor); } canvas.beginText(); canvas.setFontAndSize(font,size); canvas.setTextMatrix(textStartX,textStartY); canvas.showText(fullCode); canvas.endText(); } return getBarcodeSize(); } "
"public BindOperation processSimpleBind(ByteString rawBindDN,ByteString password){   return processSimpleBind(rawBindDN,password,null); } "
"public InvalidParameterException(String msg){   super(msg); } "
"private static SSOToken ldapLoginInternal(String bindUser,String bindPwd){   String classMethod=\"UpgradeUtils:ldapLoginInternal : \";   SSOToken ssoToken=null;   try {     com.sun.identity.authentication.internal.AuthContext ac=getLDAPAuthContext(bindUser,bindPwd);     if (ac.getLoginStatus() == AUTH_SUCCESS) {       ssoToken=ac.getSSOToken();     }  else {       ssoToken=null;     }   }  catch (  LoginException le) {     debug.error(classMethod + \"Error creating SSOToken\",le);   } catch (  InvalidAuthContextException iace) {     ssoToken=null;     debug.error(classMethod + \"Error creating SSOToken\",iace);   }   return ssoToken; } "
"public boolean isShowing(){   return true; } "
"protected void reportWrongNumberArgs() throws WrongNumberArgsException {   throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ZERO_OR_ONE,null)); } "
"public CertificateVerify(byte[] hash){   if (hash == null || hash.length == 0) {     fatalAlert(AlertProtocol.INTERNAL_ERROR,\"INTERNAL ERROR: incorrect certificate verify hash\");   }   this.signedHash=hash;   length=hash.length + 2; } "
"public synchronized AttributeSet addAttribute(AttributeSet old,Object name,Object value){   if ((old.getAttributeCount() + 1) <= getCompressionThreshold()) {     search.removeAttributes(search);     search.addAttributes(old);     search.addAttribute(name,value);     reclaim(old);     return getImmutableUniqueSet();   }   MutableAttributeSet ma=getMutableAttributeSet(old);   ma.addAttribute(name,value);   return ma; } "
"public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {   return super.newInstance(javaContentInterface); } "
"public void hasValidAnnotations(){   assertThatAnnotatedClassHasValidI18n();   assertThatAnnotatedClassHasAnnotatedMethods();   assertThatAllSchemasAreValid(); } "
"public SubjectLocality(org.w3c.dom.Element localityElement) throws SAMLException {   Element elt=(Element)localityElement;   String eltName=elt.getLocalName();   if (eltName == null) {     if (SAMLUtilsCommon.debug.messageEnabled()) {       SAMLUtilsCommon.debug.message(\"SubjectLocality: local name \" + \"missing\");     }     throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString(\"nullInput\"));   }   if (!(eltName.equals(\"SubjectLocality\")))   throw new SAMLException(\"invalidElement\");   String read=elt.getAttribute(\"IPAddress\");   if ((read != null) && (read.length() != 0)) {     _ipAddress=read;   }   read=elt.getAttribute(\"DNSAddress\");   if ((read != null) && (read.length() != 0)) {     _dnsAddress=read;   } } "
"private static int addAciAttributeList(DITCacheMap<List<Aci>> aciList,DN dn,DN configDN,List<Attribute> attributeList,List<LocalizableMessage> failedACIMsgs){   if (attributeList.isEmpty()) {     return 0;   }   int validAcis=0;   List<Aci> acis=new ArrayList<>();   for (  Attribute attribute : attributeList) {     for (    ByteString value : attribute) {       try {         acis.add(Aci.decode(value,dn));         validAcis++;       }  catch (      AciException ex) {         DN msgDN=dn;         if (dn == DN.rootDN()) {           msgDN=configDN;         }         failedACIMsgs.add(WARN_ACI_ADD_LIST_FAILED_DECODE.get(value,msgDN,ex.getMessage()));       }     }   }   addAci(aciList,dn,acis);   return validAcis; } "
"@Override public boolean equals(Object otherRules){   if (this == otherRules) {     return true;   }   if (otherRules instanceof ZoneRules) {     ZoneRules other=(ZoneRules)otherRules;     return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules);   }   return false; } "
"public Map modifyDiscoEntries(String userID,List removes,List inserts){   DiscoEntryHandlerImplUtils.debug.message(\"in UserDiscoEntryHandler.modifyDiscoEntries\");   Map result=new HashMap();   result.put(STATUS_CODE,DiscoConstants.STATUS_FAILED);   Map discoEntries=new HashMap();   DataStoreProvider store=null;   try {     store=DataStoreProviderManager.getInstance().getDataStoreProvider(DISCO);     DiscoEntryHandlerImplUtils.getUserDiscoEntries(store,userID,USER_ATTR_NAME,discoEntries);   }  catch (  Exception e) {     DiscoEntryHandlerImplUtils.debug.error(\"UserDiscoEntryHandler.modifyDiscoEntries: Exception:\",e);     return result;   }   if ((removes != null) && !removes.isEmpty()) {     if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {       DiscoEntryHandlerImplUtils.debug.message(\"UserDiscoEntryHandler.modifyDiscoEntries: handling \" + removes.size() + \" removes.\");     }     if (!DiscoEntryHandlerImplUtils.handleRemoves(discoEntries,removes)) {       return result;     }   }   Set results=new HashSet();   results.addAll(discoEntries.values());   List newEntryIDs=null;   if ((inserts != null) && (inserts.size() != 0)) {     if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {       DiscoEntryHandlerImplUtils.debug.message(\"UserDiscoEntryHandler.modifyDiscoEntries: handling \" + inserts.size() + \" inserts.\");     }     Map insertResults=DiscoEntryHandlerImplUtils.handleInserts(results,inserts);     if (!((String)insertResults.get(STATUS_CODE)).equals(DiscoConstants.STATUS_OK)) {       return result;     }     newEntryIDs=(List)insertResults.get(NEW_ENTRY_IDS);   }   if (!DiscoEntryHandlerImplUtils.setUserDiscoEntries(store,userID,USER_ATTR_NAME,results)) {     DiscoEntryHandlerImplUtils.debug.error(\"UserDiscoEntryHandler.modifyDiscoEntries: \" + \"couldn't set DiscoEntries through DiscoEntryHandler.\");     return result;   }  else {     if (DiscoEntryHandlerImplUtils.debug.messageEnabled()) {       DiscoEntryHandlerImplUtils.debug.message(\"UserDiscoEntryHandler.modifyDisco\" + \"Entries: set DiscoEntries through DiscoEntryHandler \" + \"successfully.\");     }     result.put(STATUS_CODE,DiscoConstants.STATUS_OK);     if ((newEntryIDs != null) && (newEntryIDs.size() != 0)) {       result.put(NEW_ENTRY_IDS,newEntryIDs);     }     return result;   } } "
"@BeforeClass public void beforeClass() throws Exception {   TestCaseUtils.startServer();   policyDN=DN.valueOf(policyDNString); } "
"protected void fireVetoableChange(String propertyName,Object oldValue,Object newValue) throws java.beans.PropertyVetoException {   if (vetoableChangeSupport == null) {     return;   }   vetoableChangeSupport.fireVetoableChange(propertyName,oldValue,newValue); } "
"public DefaultClientConnectionOperator(SchemeRegistry schemes){   if (schemes == null) {     throw new IllegalArgumentException(\"Scheme registry must not be null.\");   }   schemeRegistry=schemes; } "
"public Object clone() throws CloneNotSupportedException {   NodeSet clone=(NodeSet)super.clone();   if ((null != this.m_map) && (this.m_map == clone.m_map)) {     clone.m_map=new Node[this.m_map.length];     System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);   }   return clone; } "
"public static boolean isServerMode(){   return IsServerModeHolder.isServerMode; } "
"private void finishCompletion(){   for (WaitNode q; (q=waiters) != null; ) {     if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {       for (; ; ) {         Thread t=q.thread;         if (t != null) {           q.thread=null;           LockSupport.unpark(t);         }         WaitNode next=q.next;         if (next == null)         break;         q.next=null;         q=next;       }       break;     }   }   done();   callable=null; } "
"public static NSObject parse(File f) throws IOException, PropertyListFormatException {   return parse(new FileInputStream(f)); } "
"private static Transform tokenizeTransformation(String transformation) throws NoSuchAlgorithmException {   if (transformation == null) {     throw new NoSuchAlgorithmException(\"No transformation given.\");   }   String[] parts=new String[3];   int count=0;   StringTokenizer parser=new StringTokenizer(transformation,\"/\");   while (parser.hasMoreTokens() && count < 3) {     parts[count++]=parser.nextToken().trim();   }   if (count != 3 || parser.hasMoreTokens()) {     throw new NoSuchAlgorithmException(\"Invalid transformation format: \" + transformation);   }   return new Transform(parts[0],parts[1],parts[2]); } "
"public static String resolveIpAddress(String domainName){   try {     InetAddress[] addresses=InetAddress.getAllByName(domainName);     if (addresses == null || addresses.length == 0) {       throw new UnknownHostException(domainName);     }     for (    InetAddress address : addresses) {       if (address instanceof Inet4Address) {         return address.getHostAddress();       }     }     return addresses[0].getHostAddress();   }  catch (  Exception ex) {     LOG.debug(\"Cannot resolve host {} due to {}\",domainName,ex.getClass().getName() + \": \" + ex.getMessage());     return null;   } } "
"public static PdfAction createGoToR(String filename,int pageNum){   return createGoToR(filename,pageNum,false); } "
"public static boolean atleast(String name,int majorVersion,int minorVersion){   return osName.equalsIgnoreCase(name) && (osMajorVersion >= majorVersion) && (osMinorVersion >= minorVersion); } "
"public boolean isAcceptable(GeneralName gname){   if (this.tag != gname.getTag()) {     return false;   } switch (this.tag) { case RFC822_NAME:     return ((String)gname.getName()).toLowerCase(Locale.US).endsWith(((String)name).toLowerCase(Locale.US)); case DNS_NAME:   String dns=(String)name; String _dns=(String)gname.getName(); if (dns.equalsIgnoreCase(_dns)) { return true; }  else { return _dns.toLowerCase(Locale.US).endsWith(\".\" + dns.toLowerCase(Locale.US)); } case UR_ID: String uri=(String)name; int begin=uri.indexOf(\"://\") + 3; int end=uri.indexOf('/',begin); String host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end); uri=(String)gname.getName(); begin=uri.indexOf(\"://\") + 3; end=uri.indexOf('/',begin); String _host=(end == -1) ? uri.substring(begin) : uri.substring(begin,end); if (host.startsWith(\".\")) { return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US)); }  else { return host.equalsIgnoreCase(_host); } case IP_ADDR: byte[] address=(byte[])name; byte[] _address=(byte[])gname.getName(); int length=address.length; if (length != 4 && length != 8 && length != 16 && length != 32) { return false; } int _length=_address.length; if (length == _length) { return Arrays.equals(address,_address); }  else if (length == 2 * _length) { for (int i=0; i < _address.length; i++) { int octet=_address[i] & 0xff; int min=address[i] & 0xff; int max=address[i + _length] & 0xff; if ((octet < min) || (octet > max)) { return false; } } return true; }  else { return false; } case DIR_NAME: case X400_ADDR: case OTHER_NAME: case EDIP_NAME: case REG_ID: return Arrays.equals(getEncoded(),gname.getEncoded()); default : } return true; } "
"public static String convertTime(int time){   time/=1000;   int minute=time / 60;   int second=time % 60;   minute%=60;   return String.format(\"%02d:%02d\",minute,second); } "
"private String computeExpectedRootElements(){   String r=\"\";   String[] probePoints=grammarInfo.getProbePoints();   for (int i=0; i < probePoints.length; i+=2) {     if (grammarInfo.recognize(probePoints[i],probePoints[i + 1])) {       if (r.length() != 0)       r+=',';       r+=\"<{\" + probePoints[i] + \"}\"+ probePoints[i + 1]+ \">\";     }   }   return r; } "
"protected boolean removeSpecial(String name){   for (int i=0; i < specials.length; i++) {     if (specials[i].equals(name)) {       specialAttributes[i]=null;       return true;     }   }   return false; } "
"public void runtimeInit(TransformerImpl transformer) throws TransformerException { } "
"protected void paint(SynthContext context,Graphics g){   SynthContext subcontext=getContext(scrollbar,Region.SCROLL_BAR_TRACK);   paintTrack(subcontext,g,getTrackBounds());   subcontext.dispose();   subcontext=getContext(scrollbar,Region.SCROLL_BAR_THUMB);   paintThumb(subcontext,g,getThumbBounds());   subcontext.dispose(); } "
"private static StepPattern createDefaultStepPattern(Compiler compiler,int opPos,MatchPatternIterator mpi,int analysis,StepPattern tail,StepPattern head) throws javax.xml.transform.TransformerException {   int stepType=compiler.getOp(opPos);   boolean simpleInit=false;   boolean prevIsOneStepDown=true;   int whatToShow=compiler.getWhatToShow(opPos);   StepPattern ai=null;   int axis, predicateAxis; switch (stepType) { case OpCodes.OP_VARIABLE: case OpCodes.OP_EXTFUNCTION: case OpCodes.OP_FUNCTION: case OpCodes.OP_GROUP:     prevIsOneStepDown=false;   Expression expr; switch (stepType) { case OpCodes.OP_VARIABLE: case OpCodes.OP_EXTFUNCTION: case OpCodes.OP_FUNCTION: case OpCodes.OP_GROUP:   expr=compiler.compile(opPos); break; default : expr=compiler.compile(opPos + 2); } axis=Axis.FILTEREDLIST; predicateAxis=Axis.FILTEREDLIST; ai=new FunctionPattern(expr,axis,predicateAxis); simpleInit=true; break; case OpCodes.FROM_ROOT: whatToShow=DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT; axis=Axis.ROOT; predicateAxis=Axis.ROOT; ai=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,axis,predicateAxis); break; case OpCodes.FROM_ATTRIBUTES: whatToShow=DTMFilter.SHOW_ATTRIBUTE; axis=Axis.PARENT; predicateAxis=Axis.ATTRIBUTE; break; case OpCodes.FROM_NAMESPACE: whatToShow=DTMFilter.SHOW_NAMESPACE; axis=Axis.PARENT; predicateAxis=Axis.NAMESPACE; break; case OpCodes.FROM_ANCESTORS: axis=Axis.DESCENDANT; predicateAxis=Axis.ANCESTOR; break; case OpCodes.FROM_CHILDREN: axis=Axis.PARENT; predicateAxis=Axis.CHILD; break; case OpCodes.FROM_ANCESTORS_OR_SELF: axis=Axis.DESCENDANTORSELF; predicateAxis=Axis.ANCESTORORSELF; break; case OpCodes.FROM_SELF: axis=Axis.SELF; predicateAxis=Axis.SELF; break; case OpCodes.FROM_PARENT: axis=Axis.CHILD; predicateAxis=Axis.PARENT; break; case OpCodes.FROM_PRECEDING_SIBLINGS: axis=Axis.FOLLOWINGSIBLING; predicateAxis=Axis.PRECEDINGSIBLING; break; case OpCodes.FROM_PRECEDING: axis=Axis.FOLLOWING; predicateAxis=Axis.PRECEDING; break; case OpCodes.FROM_FOLLOWING_SIBLINGS: axis=Axis.PRECEDINGSIBLING; predicateAxis=Axis.FOLLOWINGSIBLING; break; case OpCodes.FROM_FOLLOWING: axis=Axis.PRECEDING; predicateAxis=Axis.FOLLOWING; break; case OpCodes.FROM_DESCENDANTS_OR_SELF: axis=Axis.ANCESTORORSELF; predicateAxis=Axis.DESCENDANTORSELF; break; case OpCodes.FROM_DESCENDANTS: axis=Axis.ANCESTOR; predicateAxis=Axis.DESCENDANT; break; default : throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)})); } if (null == ai) { whatToShow=compiler.getWhatToShow(opPos); ai=new StepPattern(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos),axis,predicateAxis); } if (false || DEBUG_PATTERN_CREATION) { System.out.print(\"new step: \" + ai); System.out.print(\", axis: \" + Axis.getNames(ai.getAxis())); System.out.print(\", predAxis: \" + Axis.getNames(ai.getAxis())); System.out.print(\", what: \"); System.out.print(\"    \"); ai.debugWhatToShow(ai.getWhatToShow()); } int argLen=compiler.getFirstPredicateOpPos(opPos); ai.setPredicates(compiler.getCompiledPredicates(argLen)); return ai; } "
"public void uninstallUI(JComponent c){ } "
"public static boolean isValidSetter(Method method){   if (method.getName().startsWith(\"set\") && method.getName().length() > 3 && method.getParameterTypes().length == 1 && method.getReturnType().getName().equals(\"void\")) {     return true;   }   return false; } "
"public void store() throws Exception {   BufferedWriter writer=null;   try {     writer=new BufferedWriter(new FileWriter(getDocumentFile()));     ArrayList rawTokens=getRawTokens();     for (int i=0; i < rawTokens.size(); i++) {       writer.write(((Token)rawTokens.get(i)).toString());     }     writer.flush();     writer.close();   }  catch (  Exception ex) {     throw ex;   }  finally {     if (writer != null) {       writer.close();     }   } } "
"public AttributeSet parseDeclaration(String string){   try {     return parseDeclaration(new StringReader(string));   }  catch (  IOException ioe) {   }   return null; } "
"public static URL toURL(URI uri){   if (uri == null)   throw new NullPointerException(\"`uri' must not be null\");   try {     return uri.toURL();   }  catch (  MalformedURLException e) {     throw new IllegalArgumentException(uri + \" is not a valid URL\",e);   } } "
"public void mouseMoved(MouseEvent e){ } "
"private Object stringToValue(String value,boolean completeMatch) throws ParseException {   int errorOffset;   if ((errorOffset=getInvalidOffset(value,completeMatch)) == -1) {     if (!getValueContainsLiteralCharacters()) {       value=stripLiteralChars(value);     }     return super.stringToValue(value);   }   throw new ParseException(\"stringToValue passed invalid value\",errorOffset); } "
"public final boolean is_net_dependent(){   return room_is_net_dependent; } "
"public static int countAll(){   return getPersistence().countAll(); } "
"public Object extFunction(FuncExtFunction extFunction,Vector argVec) throws javax.xml.transform.TransformerException {   try {     String namespace=extFunction.getNamespace();     String functionName=extFunction.getFunctionName();     int arity=extFunction.getArgCount();     javax.xml.namespace.QName myQName=new javax.xml.namespace.QName(namespace,functionName);     if (extensionInvocationDisabled) {       String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});       throw new XPathFunctionException(fmsg);     }     XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);     ArrayList argList=new ArrayList(arity);     for (int i=0; i < arity; i++) {       Object argument=argVec.elementAt(i);       if (argument instanceof XNodeSet) {         argList.add(i,((XNodeSet)argument).nodelist());       }  else       if (argument instanceof XObject) {         Object passedArgument=((XObject)argument).object();         argList.add(i,passedArgument);       }  else {         argList.add(i,argument);       }     }     return (xpathFunction.evaluate(argList));   }  catch (  XPathFunctionException xfe) {     throw new org.apache.xml.utils.WrappedRuntimeException(xfe);   } catch (  Exception e) {     throw new javax.xml.transform.TransformerException(e);   } } "
"private static void doSort(float[] a,int left,int right,float[] work,int workBase,int workLen){   if (right - left < QUICKSORT_THRESHOLD) {     sort(a,left,right,true);     return;   }   int[] run=new int[MAX_RUN_COUNT + 1];   int count=0;   run[0]=left;   for (int k=left; k < right; run[count]=k) {     if (a[k] < a[k + 1]) {       while (++k <= right && a[k - 1] <= a[k])       ;     }  else     if (a[k] > a[k + 1]) {       while (++k <= right && a[k - 1] >= a[k])       ;       for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {         float t=a[lo];         a[lo]=a[hi];         a[hi]=t;       }     }  else {       for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {         if (--m == 0) {           sort(a,left,right,true);           return;         }       }     }     if (++count == MAX_RUN_COUNT) {       sort(a,left,right,true);       return;     }   }   if (run[count] == right++) {     run[++count]=right;   }  else   if (count == 1) {     return;   }   byte odd=0;   for (int n=1; (n<<=1) < count; odd^=1)   ;   float[] b;   int ao, bo;   int blen=right - left;   if (work == null || workLen < blen || workBase + blen > work.length) {     work=new float[blen];     workBase=0;   }   if (odd == 0) {     System.arraycopy(a,left,work,workBase,blen);     b=a;     bo=0;     a=work;     ao=workBase - left;   }  else {     b=work;     ao=0;     bo=workBase - left;   }   for (int last; count > 1; count=last) {     for (int k=(last=0) + 2; k <= count; k+=2) {       int hi=run[k], mi=run[k - 1];       for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {         if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {           b[i + bo]=a[p++ + ao];         }  else {           b[i + bo]=a[q++ + ao];         }       }       run[++last]=hi;     }     if ((count & 1) != 0) {       for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;       run[++last]=right;     }     float[] t=a;     a=b;     b=t;     int o=ao;     ao=bo;     bo=o;   } } "
"public void closeAllSubpaths(){   for (  Subpath subpath : subpaths) {     subpath.setClosed(true);   } } "
"private static LocalizableMessage createMessage(String illegalName,PropertyDefinition<?> namingPropertyDefinition){   if (illegalName.length() == 0) {     return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_EMPTY.get();   }  else   if (illegalName.trim().length() == 0) {     return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_BLANK.get();   }  else   if (namingPropertyDefinition != null) {     try {       namingPropertyDefinition.decodeValue(illegalName);     }  catch (    PropertyException e) {       PropertyDefinitionUsageBuilder builder=new PropertyDefinitionUsageBuilder(true);       return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_SYNTAX.get(illegalName,namingPropertyDefinition.getName(),builder.getUsage(namingPropertyDefinition));     }   }   return ERR_ILLEGAL_MANAGED_OBJECT_NAME_EXCEPTION_OTHER.get(illegalName); } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   String realm=getStringOptionValue(IArgument.REALM_NAME);   boolean incMandatory=isOptionSet(IArgument.MANDATORY);   String strMandatory=(incMandatory) ? \"include mandatory\" : \"exclude mandatory\";   String[] params={realm,strMandatory};   writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_GET_ASSIGNED_SERVICES_OF_REALM\",params);   try {     OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);     Set serviceNames=ocm.getAssignedServices(incMandatory);     Set dynamicServiceNames=getAssignedDynamicServiceNames(adminSSOToken,realm);     if ((dynamicServiceNames != null) && !dynamicServiceNames.isEmpty()) {       if ((serviceNames != null) && !serviceNames.isEmpty()) {         serviceNames.addAll(dynamicServiceNames);       }  else {         serviceNames=dynamicServiceNames;       }     }     IOutput outputWriter=getOutputWriter();     if ((serviceNames != null) && !serviceNames.isEmpty()) {       String msg=getResourceString(\"realm-get-assigned-services-results\");       outputWriter.printlnMessage(FormatUtils.printServiceNames(serviceNames,msg,adminSSOToken));       outputWriter.printlnMessage(getResourceString(\"realm-get-assigned-services-succeed\"));     }  else {       outputWriter.printlnMessage(getResourceString(\"realm-get-assigned-services-no-services\"));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_GET_ASSIGNED_SERVICES_OF_REALM\",params);   }  catch (  SSOException e) {     String[] args={realm,e.getMessage()};     debugError(\"RealmGetAssignedServices.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ASSIGNED_SERVICES_OF_REALM\",args);   } catch (  IdRepoException e) {     String[] args={realm,e.getMessage()};     debugError(\"RealmGetAssignedServices.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ASSIGNED_SERVICES_OF_REALM\",args);   } catch (  SMSException e) {     String[] args={realm,e.getMessage()};     debugError(\"RealmGetAssignedServices.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_GET_ASSIGNED_SERVICES_OF_REALM\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {   try {     writeNormalizedChars(ch,start,length,m_lineSepUse);   }  catch (  IOException ioe) {     throw new SAXException(ioe);   } } "
"@Override public void close() throws IOException { } "
"public TreeModelEvent(Object source,Object[] path,int[] childIndices,Object[] children){   this(source,(path == null) ? null : new TreePath(path),childIndices,children); } "
"public com.sun.identity.liberty.ws.soapbinding.jaxb11.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.EmptyTypeImpl(); } "
"public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType) throws HeadlessException {   return showConfirmDialog(parentComponent,message,title,optionType,messageType,null); } "
"public CancelException(File file,int depth){   this(\"Operation Cancelled\",file,depth); } "
"public RequestLine parseSIPRequestLine(String requestLine) throws ParseException {   requestLine+=\"\\n\";   return new RequestLineParser(requestLine).parse(); } "
"public PdfStream(byte[] bytes){   this(bytes,CompressionConstants.UNDEFINED_COMPRESSION); } "
"@SuppressWarnings(\"deprecation\") protected void processStyledAttributes(@NonNull TypedArray a){   float targetAspectRatioX=Math.abs(a.getFloat(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_aspect_ratio_x,DEFAULT_ASPECT_RATIO));   float targetAspectRatioY=Math.abs(a.getFloat(R.styleable.gallery_ucrop_UCropView_gallery_ucrop_aspect_ratio_y,DEFAULT_ASPECT_RATIO));   if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) {     mTargetAspectRatio=SOURCE_IMAGE_ASPECT_RATIO;   }  else {     mTargetAspectRatio=targetAspectRatioX / targetAspectRatioY;   } } "
"private static void hexEncode(char c,StringBuilder buffer){   if ((c & (byte)0xFF) == c) {     buffer.append('%');     buffer.append(byteToHex((byte)c));   }  else {     buffer.append('%');     byte b1=(byte)((c >>> 8) & 0xFF);     buffer.append(byteToHex(b1));     buffer.append('%');     byte b2=(byte)(c & 0xFF);     buffer.append(byteToHex(b2));   } } "
"@Override public String toString(){   String s=null;   try {     s=toJSONObject().toString(2);   }  catch (  JSONException e) {     PrivilegeManager.debug.error(\"EntitlementSubjectImpl.toString\",e);   }   return s; } "
"@Override public void storeChildren(PrintWriter aWriter,int indent,Object aService,StoreDescription parentDesc) throws Exception {   if (aService instanceof StandardService) {     StandardService service=(StandardService)aService;     LifecycleListener listeners[]=((Lifecycle)service).findLifecycleListeners();     storeElementArray(aWriter,indent,listeners);     Executor[] executors=service.findExecutors();     storeElementArray(aWriter,indent,executors);     Connector connectors[]=service.findConnectors();     storeElementArray(aWriter,indent,connectors);     Engine container=service.getContainer();     if (container != null) {       StoreDescription elementDesc=getRegistry().findDescription(container.getClass());       if (elementDesc != null) {         IStoreFactory factory=elementDesc.getStoreFactory();         factory.store(aWriter,indent,container);       }     }   } } "
"public static String responseAttributesToXMLString(Set attrs){   StringBuilder xmlSB=new StringBuilder(1000);   xmlSB.append(\"<\" + GET_RESPONSE_DECISIONS + \">\"+ CRLF);   Iterator names=attrs.iterator();   while (names.hasNext()) {     String name=(String)names.next();     xmlSB.append(\"<\").append(ATTRIBUTE).append(\" \").append(ATTRIBUTE_NAME).append(\"=\\\"\").append(XMLUtils.escapeSpecialCharacters(name)).append(\"\\\"/>\").append(CRLF);   }   xmlSB.append(\"</\" + GET_RESPONSE_DECISIONS + \">\"+ CRLF);   return xmlSB.toString(); } "
"public static void createAgentLocal(SSOToken ssoToken,String realm,String agentName,String agentType,Map attrValues,String agentURL) throws IdRepoException, SSOException, SMSException, MalformedURLException, ConfigurationException {   if ((agentURL == null) || (agentURL.trim().length() == 0)) {     throw new ConfigurationException(\"create.agent.invalid.agent.url\",null);   }   createAgentEx(ssoToken,realm,agentName,agentType,attrValues,null,new FQDNUrl(agentURL)); } "
"public void reset(){   for (int i=0; i < mAnimators.size(); i++) {     mAnimators.get(mAnimators.keyAt(i)).cancel();   }   mAnimators.clear();   mFirstAnimatedPosition=-1;   mLastAnimatedPosition=-1;   mAnimationStartMillis=-1;   mShouldAnimate=true; } "
"public void addAll(List<T> items){ synchronized (lock) {     this.items.addAll(identifiedItemFactory.createList(items));   }   itemPositionChangeChecked=new SparseBooleanArray(this.items.size());   notifyDataSetChanged(); } "
"public void warning(SAXParseException e) throws SAXException {   if (errorHandler != null) {     errorHandler.warning(e);   } } "
"public final boolean isQueued(Thread thread){   if (thread == null)   throw new NullPointerException();   for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;   return false; } "
"public ItemSelectionFilter(){   Arrays.fill(sel_array,true);   sel_array[ItemSelectionChoice.KEEPOUT.ordinal()]=false;   sel_array[ItemSelectionChoice.VIA_KEEPOUT.ordinal()]=false;   sel_array[ItemSelectionChoice.COMPONENT_KEEPOUT.ordinal()]=false;   sel_array[ItemSelectionChoice.CONDUCTION.ordinal()]=false;   sel_array[ItemSelectionChoice.BOARD_OUTLINE.ordinal()]=false; } "
"private static CookieOrigin adjustEffectiveHost(final CookieOrigin origin){   String host=origin.getHost();   boolean isLocalHost=true;   for (int i=0; i < host.length(); i++) {     char ch=host.charAt(i);     if (ch == '.' || ch == ':') {       isLocalHost=false;       break;     }   }   if (isLocalHost) {     host+=\".local\";     return new CookieOrigin(host,origin.getPort(),origin.getPath(),origin.isSecure());   }  else {     return origin;   } } "
"public final void testClone() throws Exception {   TrustAnchor ta=TestUtils.getTrustAnchor();   if (ta == null) {     fail(getName() + \": not performed (could not create test TrustAnchor)\");   }   PKIXCertPathValidatorResult vr1=new PKIXCertPathValidatorResult(ta,TestUtils.getPolicyTree(),testPublicKey);   PKIXCertPathValidatorResult vr2=(PKIXCertPathValidatorResult)vr1.clone();   assertNotSame(\"notSame\",vr1,vr2);   assertSame(\"trustAncor\",vr1.getTrustAnchor(),vr2.getTrustAnchor());   assertSame(\"policyTree\",vr1.getPolicyTree(),vr2.getPolicyTree());   assertSame(\"publicKey\",vr1.getPublicKey(),vr2.getPublicKey());   byte[] encoding={0x01};   MyPKIXCertPathBuilderResult my=new MyPKIXCertPathBuilderResult(ta,TestUtils.getPolicyTree(),testPublicKey,encoding);   MyPKIXCertPathBuilderResult myClone=(MyPKIXCertPathBuilderResult)my.clone();   assertSame(my.getPolicyTree(),myClone.getPolicyTree());   assertSame(my.getPublicKey(),myClone.getPublicKey());   assertSame(my.getTrustAnchor(),myClone.getTrustAnchor());   assertSame(my.enc,myClone.enc); } "
"public void compactBuffer(){   if (offset != buffer.length) {     byte[] newBuffer=new byte[offset];     System.arraycopy(buffer,0,newBuffer,0,offset);     buffer=newBuffer;   } } "
"public void addChild(XMPNode node) throws XMPException {   assertChildNotExisting(node.getName());   node.setParent(this);   getChildren().add(node); } "
"private Node addWaiter(Node mode){   Node node=new Node(Thread.currentThread(),mode);   Node pred=tail;   if (pred != null) {     node.prev=pred;     if (compareAndSetTail(pred,node)) {       pred.next=node;       return node;     }   }   enq(node);   return node; } "
"public void organizationConfigChanged(String serviceName,String version,String orgName,String groupName,String serviceComponent,int type){   String certModulePortNumber=null;   String certModuleLevel=null;   if (orgName == null) {     orgName=SMSEntry.getRootSuffix();   }   try {     ServiceConfig config=sConfigMgr.getOrganizationConfig(orgName,null);     Map configAttrs=config.getAttributes();     if (debug.messageEnabled()) {       debug.message(\"GatewayServlet:configAttrs :  \" + configAttrs.toString());     }     Set attrs=(Set)configAttrs.get(CERT_PORT_ATTR);     if (attrs == null) {       return;     }     Iterator values=attrs.iterator();     if (values.hasNext()) {       certModulePortNumber=(String)values.next();     }     attrs=(Set)configAttrs.get(AMAuthConfigUtils.getAuthLevelAttribute(configAttrs,moduleName));     if (attrs == null) {       return;     }     values=attrs.iterator();     if (values.hasNext()) {       certModuleLevel=(String)values.next();     }     AuthServiceConfigInfo info=new AuthServiceConfigInfo(orgName,moduleName,certModulePortNumber,certModuleLevel);     AuthConfigMap.put(orgName,info);   }  catch (  Exception e) {     debug.error(\"GatewayServletUtils : \" + \"Unable to get Cert Module Level and/or Port Number\",e);   } } "
"public void removePort(){   if (hostPort != null)   hostPort.removePort(); } "
"@Override public void destroy(){ } "
"public void runTest() throws Throwable {   Document doc;   Node newNode;   String newValue;   doc=(Document)load(\"staff\",true);   newNode=doc.createComment(\"This is a new Comment node\");   newValue=newNode.getNodeValue();   assertEquals(\"initial\",\"This is a new Comment node\",newValue);   newNode.setNodeValue(\"This should have an effect\");   newValue=newNode.getNodeValue();   assertEquals(\"afterChange\",\"This should have an effect\",newValue); } "
"public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {   return spiImpl.engineTranslateKey(key); } "
"private static boolean isReferralEntry(SearchResultEntry entry){   for (  String value : asSetOfString(entry,\"objectClass\")) {     if (\"referral\".equalsIgnoreCase(value)) {       return firstValueAsString(entry,\"ref\") != null;     }   }   return false; } "
"public void test_MultipleOperationsInSeveralTables() throws SQLException {   int id1=numOfRecords - 1;   threadPool.runTask(createTask4(id1));   int id2=numOfRecords + 1;   threadPool.runTask(createTask5(id2));   int oldID=5;   int newID=100;   threadPool.runTask(createTask6(oldID,newID));   threadPool.join();   Statement statement=conn.createStatement();   String selectQuery=\"SELECT * FROM \" + DatabaseCreator.TEST_TABLE1 + \" WHERE id=\";   ResultSet result=statement.executeQuery(selectQuery + id1);   assertFalse(\"The record was not deleted\",result.next());   result=statement.executeQuery(selectQuery + id2);   assertTrue(\"The record was not inserted\",result.next());   assertEquals(\"Wrong value of field1\",DatabaseCreator.defaultString + id2,result.getString(\"field1\"));   assertEquals(\"Wrong value of field2\",Integer.valueOf(id2).intValue(),result.getInt(\"field2\"));   assertEquals(\"Wrong value of field3\",Integer.valueOf(id2).intValue(),result.getInt(\"field3\"));   result.close();   result=statement.executeQuery(selectQuery + oldID);   assertFalse(\"The record was not deleted\",result.next());   result.close();   result=statement.executeQuery(selectQuery + newID);   assertTrue(\"The record was not updated\",result.next());   assertEquals(\"Wrong value of field1\",DatabaseCreator.defaultString + newID,result.getString(\"field1\"));   assertEquals(\"Wrong value of field2\",Integer.valueOf(newID).intValue(),result.getInt(\"field2\"));   assertEquals(\"Wrong value of field3\",Integer.valueOf(newID).intValue(),result.getInt(\"field3\"));   result.close(); } "
"public void logEvent(String eventName,double valueToSum){   logEvent(eventName,valueToSum,null); } "
"private Backupable buildBackupableForMultipleDirectoriesCase(Path sourceDirectory,int numberOfFiles) throws Exception {   List<Path> files=createFilesInDirectoryToBackup(sourceDirectory,numberOfFiles);   Path subdir=sourceDirectory.resolve(\"subdir\");   Files.createDirectory(subdir);   List<Path> subdirFiles=createFilesInDirectoryToBackup(subdir,numberOfFiles);   files.addAll(subdirFiles);   Backupable backupable=mock(Backupable.class);   when(backupable.getDirectory()).thenReturn(sourceDirectory.toFile());   when(backupable.getFilesToBackup()).thenReturn(files.listIterator());   return backupable; } "
"XPathFactory createInstance(String className){   try {     if (debug)     debugPrintln(\"instantiating \" + className);     Class clazz;     if (classLoader != null)     clazz=classLoader.loadClass(className);  else     clazz=Class.forName(className);     if (debug)     debugPrintln(\"loaded it from \" + which(clazz));     Object o=clazz.newInstance();     if (o instanceof XPathFactory)     return (XPathFactory)o;     if (debug)     debugPrintln(className + \" is not assignable to \" + SERVICE_CLASS.getName());   }  catch (  VirtualMachineError vme) {     throw vme;   } catch (  ThreadDeath td) {     throw td;   } catch (  Throwable t) {     if (debug) {       debugPrintln(\"failed to instantiate \" + className);       t.printStackTrace();     }   }   return null; } "
"private FSLogoutStatus doHttpRedirect(String entityId){   try {     FSUtils.debug.message(\"In HTTP Redirect profile\");     isHttpRedirect=true;     FSSessionManager sMgr=FSSessionManager.getInstance(metaAlias);     if (ssoToken == null) {       try {         ssoToken=SessionManager.getProvider().getSession(request);       }  catch (      SessionException ex) {         FSUtils.debug.error(\"FSSLOHandler.doHttpRedirect: null ssoToken:\",ex);       }     }     FSSession session=sMgr.getSession(ssoToken);     FSAccountFedInfo acctObj=null;     if (session != null) {       acctObj=session.getAccountFedInfo();     }     if (acctObj == null && session != null && !session.getOneTime()) {       acctObj=FSLogoutUtil.getCurrentWorkingAccount(userID,entityId,metaAlias);     }     if (acctObj == null) {       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSSingleLogoutHandler.doHttp\" + \"Redirect: Account might have been terminated.\");       }       return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);     }     FSLogoutNotification reqLogout=createSingleLogoutRequest(acctObj,sessionIndex);     if (this.relayState != null) {       reqLogout.setRelayState(this.relayState);     }     if (reqLogout == null) {       FSUtils.debug.message(\"Logout Request is null\");       return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);     }     reqLogout.setMinorVersion(getMinorVersion(remoteDescriptor));     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSSingleLogoutHandler::doHttpRedirect \" + remoteDescriptor.getSingleLogoutServiceURL() + \"\\nLogout request: \"+ reqLogout.toXMLString());     }     String urlEncodedRequest=reqLogout.toURLEncodedQueryString();     if (FSServiceUtils.isSigningOn()) {       String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"Retrieving self certalias  : \" + certAlias);       }       if (certAlias == null || certAlias.length() == 0) {         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"FSSingleLogoutHandler::\" + \" doHttpRedirect: couldn't obtain \" + \"this site's cert alias.\");         }         return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);       }       urlEncodedRequest=FSSignatureUtil.signAndReturnQueryString(urlEncodedRequest,certAlias);     }     StringBuffer redirectURL=new StringBuffer();     String retURL=remoteDescriptor.getSingleLogoutServiceURL();     FSUtils.debug.message(\"Encoded Redirect URL \" + urlEncodedRequest);     redirectURL.append(retURL);     if (retURL.indexOf(QUESTION_MARK) == -1) {       redirectURL.append(QUESTION_MARK);     }  else {       redirectURL.append(AMPERSAND);     }     redirectURL.append(urlEncodedRequest);     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"FSSingleLogoutHandler::doHttpRedirect\" + \" URL is \" + redirectURL.toString());     }     response.sendRedirect(redirectURL.toString());     return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);   }  catch (  FSMsgException e) {     FSUtils.debug.error(\"FSSingleLogoutHandler::\" + \" doHttpRedirect FSMsgException:\",e);   } catch (  IOException e) {     FSUtils.debug.error(\"FSSingleLogoutHandler::\" + \"doHttpRedirect IOException:\",e);   }   return new FSLogoutStatus(IFSConstants.SAML_RESPONDER); } "
"private void insertLocationData(Intent intent){   LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);   Location location=null;   String bestProvider=locationManager.getBestProvider(new Criteria(),true);   String locationData;   try {     location=locationManager.getLastKnownLocation(bestProvider);     OmniArea newLocation=new OmniArea(null,location.getLatitude(),location.getLongitude(),location.getAccuracy());     locationData=newLocation.toString();   }  catch (  Exception e) {     locationData=\"\";     if (location == null) {       Log.i(TAG,getString(R.string.location_not_available));     }  else     if (bestProvider == null) {       Logger.w(TAG,getString(R.string.location_no_provider));     }  else {       Logger.w(TAG,getString(R.string.location_unknown_error),e);     }   }   intent.putExtra(Event.ATTRIBUTE_LOCATION,locationData); } "
"public boolean useSecureConnection(){   return connectionType == LDAPS; } "
"public ObjectInUseException(String rbName,String errCode,Object[] args,String name,Object user){   super(rbName,errCode,args,null);   this.name=name;   this.user=user; } "
"static boolean shouldReconfigure(PropertyChangeEvent e){   if (e.getPropertyName() == null) { synchronized (AbstractAction.class) {       if (RECONFIGURE_ON_NULL == null) {         RECONFIGURE_ON_NULL=Boolean.valueOf(AccessController.doPrivileged(new GetPropertyAction(\"swing.actions.reconfigureOnNull\",\"false\")));       }       return RECONFIGURE_ON_NULL;     }   }   return false; } "
"public static boolean isBase64(final byte octet){   return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); } "
"public Segment(){   this(null,0,0); } "
"protected void returnAfterCompletion(){   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\"Entered FSSingleLogoutHandler::returnAC: \" + \"PROTOCOL=\" + this.singleLogoutProtocol + \", relayState=\"+ this.relayState);   }   try {     String returnProviderId=\"\";     String relayState=\"\";     String logoutStatusString=\"\";     String inResponseTo=\"\";     FSReturnSessionManager mngInst=FSReturnSessionManager.getInstance(metaAlias);     HashMap providerMap=new HashMap();     if (mngInst != null) {       providerMap=mngInst.getUserProviderInfo(userID);     }     if (providerMap != null) {       returnProviderId=(String)providerMap.get(IFSConstants.PROVIDER);       relayState=(String)providerMap.get(IFSConstants.LOGOUT_RELAY_STATE);       logoutStatusString=(String)providerMap.get(IFSConstants.LOGOUT_STATUS);       if (logoutStatusString == null || logoutStatusString.length() == 0) {         logoutStatusString=IFSConstants.SAML_SUCCESS;       }       inResponseTo=(String)providerMap.get(IFSConstants.RESPONSE_TO);       mngInst.removeUserProviderInfo(userID);       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"Deleted \" + returnProviderId + \" from return list\");       }       ProviderDescriptorType descriptor=null;       if (hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {         descriptor=metaManager.getSPDescriptor(realm,returnProviderId);       }  else {         descriptor=metaManager.getIDPDescriptor(realm,returnProviderId);       }       String retURL=descriptor.getSingleLogoutServiceReturnURL();       if (retURL != null) {         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"Getting provider \" + returnProviderId + \" IDP Return URL = \"+ retURL);         }         FSLogoutResponse responseLogout=new FSLogoutResponse();         responseLogout.setResponseTo(inResponseTo);         responseLogout.setRelayState(relayState);         responseLogout.setProviderId(hostedEntityId);         responseLogout.setStatus(logoutStatusString);         responseLogout.setID(IFSConstants.LOGOUTID);         responseLogout.setMinorVersion(getMinorVersion(descriptor));         responseLogout.setResponseID(FSUtils.generateID());         callPostSingleLogoutSuccess(responseLogout,IFSConstants.LOGOUT_IDP_REDIRECT_PROFILE);         if (MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.IDFF) && hostedRole.equalsIgnoreCase(IFSConstants.IDP) && !MultiProtocolUtils.isMultiProtocolRelayState(relayState)) {           int retStatus=handleMultiProtocolLogout(false,responseLogout.toXMLString(true,true),returnProviderId);           if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {             return;           }  else {             if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {               responseLogout.setStatus(IFSConstants.SAML_RESPONDER);             }           }         }         String urlEncodedResponse=responseLogout.toURLEncodedQueryString();         if (FSServiceUtils.isSigningOn()) {           String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);           if (certAlias == null || certAlias.length() == 0) {             if (FSUtils.debug.messageEnabled()) {               FSUtils.debug.message(\"FSBrowserArtifactConsumerHandler:: \" + \"signSAMLRequest:\" + \"couldn't obtain this site's cert alias.\");             }             throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));           }           urlEncodedResponse=FSSignatureUtil.signAndReturnQueryString(urlEncodedResponse,certAlias);         }         StringBuffer redirectURL=new StringBuffer();         redirectURL.append(retURL);         if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {           redirectURL.append(IFSConstants.QUESTION_MARK);         }  else {           redirectURL.append(IFSConstants.AMPERSAND);         }         redirectURL.append(urlEncodedResponse);         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"Response to be sent : \" + redirectURL.toString());         }         String[] data={userID};         LogUtil.access(Level.INFO,LogUtil.LOGOUT_SUCCESS,data);         response.sendRedirect(redirectURL.toString());         return;       }     }  else {       FSUtils.debug.message(\"no source provider. return to local status page\");       if ((this.singleLogoutProtocol != null) && this.singleLogoutProtocol.equals(IFSConstants.LOGOUT_IDP_SOAP_PROFILE) && (this.relayState != null)&& MultiProtocolUtils.isMultiProtocolRelayState(this.relayState)) {         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"FSSingleLogoutHandler::returnAC:\" + \" this is multiProto for IDP initiated SOAP\");         }         return;       }       if (MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.IDFF) && hostedRole.equalsIgnoreCase(IFSConstants.IDP) && !MultiProtocolUtils.isMultiProtocolRelayState(relayState)) {         boolean isSOAPInitiated=false;         if ((singleLogoutProtocol.equals(IFSConstants.LOGOUT_IDP_SOAP_PROFILE)) || (singleLogoutProtocol.equals(IFSConstants.LOGOUT_SP_SOAP_PROFILE))) {           isSOAPInitiated=true;         }         int retStatus=handleMultiProtocolLogout(isSOAPInitiated,null,remoteEntityId);         if (retStatus == SingleLogoutManager.LOGOUT_REDIRECTED_STATUS) {           return;         }  else {           if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {             logoutStatus=false;           }         }       }       if (logoutStatus) {         FSServiceUtils.returnLocallyAfterOperation(response,LOGOUT_DONE_URL,true,IFSConstants.LOGOUT_SUCCESS,IFSConstants.LOGOUT_FAILURE);       }       return;     }   }  catch (  IDFFMetaException e) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"Unable to get LRURL. \" + \"No location to redirect. processing completed\");     }     String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REDIRECT_FAILED)};     LogUtil.error(Level.INFO,LogUtil.LOGOUT_REDIRECT_FAILED,data,ssoToken);   } catch (  Exception ex) {     String[] data={FSUtils.bundle.getString(IFSConstants.LOGOUT_REDIRECT_FAILED)};     LogUtil.error(Level.INFO,LogUtil.LOGOUT_REDIRECT_FAILED,data,ssoToken);   } } "
"public UNKNOWN(String s){   this(s,0,CompletionStatus.COMPLETED_NO); } "
"public AMConsoleException(Throwable t){   this(t.getMessage(),t); } "
"public boolean after(Timestamp ts){   return compareTo(ts) > 0; } "
"public PlaPointInt round_to_the_left(PlaDirection p_dir){   PlaPointFloat dir=p_dir.to_float();   double rounded_x;   if (dir.v_y > 0) {     rounded_x=Math.floor(v_x);   }  else   if (dir.v_y < 0) {     rounded_x=Math.ceil(v_x);   }  else {     rounded_x=Math.round(v_x);   }   double rounded_y;   if (dir.v_x > 0) {     rounded_y=Math.ceil(v_y);   }  else   if (dir.v_x < 0) {     rounded_y=Math.floor(v_y);   }  else {     rounded_y=Math.round(v_y);   }   return new PlaPointInt(rounded_x,rounded_y); } "
"public FrameBodyTLEN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {   super(byteBuffer,frameSize); } "
"public GSERParser readStartSequence() throws DecodeException {   next(GSER_SEQUENCE_START);   skip(GSER_SP);   return this; } "
"public void logSearchResultDone(SearchOperation searchOperation){ } "
"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){   shove_fail_clear();   changed_area_clear();   boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);   if (!r_ok)   return false;   NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;   TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);   changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);   return true; } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   String bundleName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_NAME);   String fileName=getStringOptionValue(ARGUMENT_RESOURCE_BUNDLE_FILE_NAME);   String localeName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_LOCALE);   try {     String[] params={bundleName,fileName,localeName};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_ADD_RESOURCE_BUNDLE\",params);     CommandManager mgr=getCommandManager();     String url=mgr.getWebEnabledURL();     if (url != null) {       params[1]=CLIConstants.WEB_INPUT;     }     Map mapStrings=(url != null) ? getResourceStringsMap(new StringReader(fileName)) : getResourceStringsMap(new FileReader(fileName));     ISResourceBundle.storeResourceBundle(adminSSOToken,bundleName,localeName,mapStrings);     getOutputWriter().printlnMessage(getResourceString(\"resourcebundle-added\"));     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_ADD_RESOURCE_BUNDLE\",params);   }  catch (  SSOException e) {     String[] args={bundleName,fileName,localeName,e.getMessage()};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"FAILED_ADD_RESOURCE_BUNDLE\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  IOException e) {     String[] args={bundleName,fileName,localeName,e.getMessage()};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"FAILED_ADD_RESOURCE_BUNDLE\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={bundleName,fileName,localeName,e.getMessage()};     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"FAILED_ADD_RESOURCE_BUNDLE\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"private static void loadDefaultKitsIfNecessary(){   if (SwingUtilities.appContextGet(kitTypeRegistryKey) == null) { synchronized (defaultEditorKitMap) {       if (defaultEditorKitMap.size() == 0) {         defaultEditorKitMap.put(\"text/plain\",\"javax.swing.JEditorPane$PlainEditorKit\");         defaultEditorKitMap.put(\"text/html\",\"javax.swing.text.html.HTMLEditorKit\");         defaultEditorKitMap.put(\"text/rtf\",\"javax.swing.text.rtf.RTFEditorKit\");         defaultEditorKitMap.put(\"application/rtf\",\"javax.swing.text.rtf.RTFEditorKit\");       }     }     Hashtable ht=new Hashtable();     SwingUtilities.appContextPut(kitTypeRegistryKey,ht);     ht=new Hashtable();     SwingUtilities.appContextPut(kitLoaderRegistryKey,ht);     for (    String key : defaultEditorKitMap.keySet()) {       registerEditorKitForContentType(key,defaultEditorKitMap.get(key));     }   } } "
"private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){   Enumeration keys=from.getAttributeNames();   String value=\"\";   while (keys.hasMoreElements()) {     Object key=keys.nextElement();     if (key instanceof CSS.Attribute) {       value=value + \" \" + key+ \"=\"+ from.getAttribute(key)+ \";\";     }  else {       to.addAttribute(key,from.getAttribute(key));     }   }   if (value.length() > 0) {     to.addAttribute(HTML.Attribute.STYLE,value);   } } "
"public MenuKeyEvent(Component source,int id,long when,int modifiers,int keyCode,char keyChar,MenuElement p[],MenuSelectionManager m){   super(source,id,when,modifiers,keyCode,keyChar);   path=p;   manager=m; } "
"boolean mustCheckUnsavedChanges(){   return index != null && saveChanges.isVisible() && saveChanges.isEnabled(); } "
"public void makeImmutable(){   if (!mutable) {     return;   }   super.makeImmutable();   if ((keyInfo != null) && (!keyInfo.isEmpty())) {     keyInfo=Collections.unmodifiableList(keyInfo);   } } "
"@Override public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {   return cipher.update(input,inputOffset,inputLen,output,outputOffset); } "
"public boolean remove_items(Collection<BrdItem> p_item_list,boolean with_delete_fixed){   boolean all_deleted=true;   for (  BrdItem curr_item : p_item_list) {     if (!curr_item.can_delete(with_delete_fixed)) {       all_deleted=false;       continue;     }     remove_item(curr_item);   }   return all_deleted; } "
"public void runtimeInit(TransformerImpl transformer) throws TransformerException { } "
"private void doubleCapacity(){   int p=head;   int n=elements.length;   int r=n - p;   int newCapacity=n << 1;   if (newCapacity < 0)   throw new IllegalStateException(\"Sorry, deque too big\");   Object[] a=new Object[newCapacity];   System.arraycopy(elements,p,a,0,r);   System.arraycopy(elements,0,a,r,p);   elements=a;   head=0;   tail=n; } "
"private static void reverseRange(Object[] a,int lo,int hi){   hi--;   while (lo < hi) {     Object t=a[lo];     a[lo++]=a[hi];     a[hi--]=t;   } } "
"public int read() throws IOException {   return (read(scratch,0,1) != -1) ? scratch[0] & 0xff : -1; } "
"public void fileRotated(){ } "
"public static <K,V>void prefill(final KeyedObjectPool<K,V> keyedPool,final K key,final int count) throws Exception, IllegalArgumentException {   if (keyedPool == null) {     throw new IllegalArgumentException(\"keyedPool must not be null.\");   }   if (key == null) {     throw new IllegalArgumentException(\"key must not be null.\");   }   for (int i=0; i < count; i++) {     keyedPool.addObject(key);   } } "
"public INV_POLICY(int minor,CompletionStatus completed){   this(\"\",minor,completed); } "
"@KnownFailure(\"Fixed on DonutBurger, Wrong Exception thrown\") public void test_unwrap_ByteBuffer$ByteBuffer_03(){   String host=\"new host\";   int port=8080;   ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};   ByteBuffer[] bbN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};   ByteBuffer[] bbAN=null;   ByteBuffer bb=ByteBuffer.allocate(10);   ByteBuffer bN=null;   SSLEngine sse=getEngine(host,port);   sse.setUseClientMode(true);   try {     sse.unwrap(bN,bbA);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bb,bbAN);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bb,bbN);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   }   try {     sse.unwrap(bN,bbAN);     fail(\"IllegalArgumentException wasn't thrown\");   }  catch (  IllegalArgumentException iobe) {   } catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(e + \" was thrown instead of IllegalArgumentException\");   } } "
"public String toXMLString() throws FSMsgException {   return this.toXMLString(true,true); } "
"public DashedBorder(float width){   super(width); } "
"private void handlePrivilegeUpdates() throws SSOException, SMSException {   for (  ChangeSet<String,Set<String>> change : privilegeUpdates) {     final String configName=change.getIdentifier();     final Set<String> newPermissions=change.getData();     final ServiceConfig privilegeConfig=privilegesConfig.getSubConfig(configName);     privilegeConfig.addAttribute(LIST_OF_PERMISSIONS,newPermissions);   } } "
"public void _read(InputStream input){   value=input.read_char(); } "
"public void addConnector(String address,int port,boolean isAjp,boolean isSSL) throws MBeanException {   Service service;   try {     service=(Service)getManagedResource();   }  catch (  InstanceNotFoundException e) {     throw new MBeanException(e);   } catch (  RuntimeOperationsException e) {     throw new MBeanException(e);   } catch (  InvalidTargetObjectTypeException e) {     throw new MBeanException(e);   }   String protocol=isAjp ? \"AJP/1.3\" : \"HTTP/1.1\";   Connector connector=new Connector(protocol);   if ((address != null) && (address.length() > 0)) {     connector.setProperty(\"address\",address);   }   connector.setPort(port);   connector.setSecure(isSSL);   connector.setScheme(isSSL ? \"https\" : \"http\");   service.addConnector(connector); } "
"public static void processImage(GifImageData image,int lastFrameNumber){   GifParameters gif=new GifParameters(image);   InputStream gifStream;   try {     if (image.getData() == null) {       image.loadData();     }     gifStream=new ByteArrayInputStream(image.getData());     process(gifStream,gif,lastFrameNumber);   }  catch (  java.io.IOException e) {     throw new IOException(IOException.GifImageException,e);   } } "
"public void testEqualsNull(){   String a=\"92948782094488478231212478987482988429808779810457634781384756794987\";   int aScale=-24;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   assertFalse(aNumber.equals(null)); } "
"public void testCertPathValidator05() throws NoSuchAlgorithmException {   if (!PKIXSupport) {     fail(NotSupportMsg);     return;   }   for (int t=0; t < validValues.length; t++) {     for (int i=1; i < invalidValues.length; i++) {       try {         CertPathValidator.getInstance(validValues[t],invalidValues[i]);         fail(\"NoSuchProviderException must be thrown\");       }  catch (      NoSuchProviderException e1) {       }     }   } } "
"@Override public void clearUserRules(){   SharedPreferences.Editor editor=sharedPreferences.edit();   editor.remove(KEY_USER_RULES);   editor.commit(); } "
"@Override public void createDaysStreamingQuoteTable(String date){   if (conn != null) {     Statement stmt;     try {       stmt=conn.createStatement();       quoteTable=ZStreamingConfig.getStreamingQuoteTbNameAppendFormat(date);       String sql=\"CREATE TABLE \" + quoteTable + \" \"+ \"(Time time NOT NULL, \"+ \" InstrumentToken varchar(32) NOT NULL, \"+ \" LastTradedPrice DECIMAL(20,4) NOT NULL, \"+ \" LastTradedQty BIGINT NOT NULL, \"+ \" AvgTradedPrice DECIMAL(20,4) NOT NULL, \"+ \" Volume BIGINT NOT NULL, \"+ \" BuyQty BIGINT NOT NULL, \"+ \" SellQty BIGINT NOT NULL, \"+ \" OpenPrice DECIMAL(20,4) NOT NULL, \"+ \" HighPrice DECIMAL(20,4) NOT NULL, \"+ \" LowPrice DECIMAL(20,4) NOT NULL, \"+ \" ClosePrice DECIMAL(20,4) NOT NULL, \"+ \" PRIMARY KEY (InstrumentToken, Time)) \"+ \" ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\";       stmt.executeUpdate(sql);       System.out.println(\"StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): SQL table for Streaming quote created, table name: [\" + quoteTable + \"]\");     }  catch (    SQLException e) {       System.out.println(\"StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): ERROR: SQLException on creating Table, cause: \" + e.getMessage());     }   }  else {     System.out.println(\"StreamingQuoteDAOModeQuote.createDaysStreamingQuoteTable(): ERROR: DB conn is null !!!\");   } } "
"void updateMnemonicBinding(AbstractButton b){   int m=b.getMnemonic();   if (m != 0) {     InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);     if (map == null) {       map=new ComponentInputMapUIResource(b);       SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);     }     map.clear();     map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),false),\"pressed\");     map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),true),\"released\");     map.put(KeyStroke.getKeyStroke(m,0,true),\"released\");   }  else {     InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);     if (map != null) {       map.clear();     }   } } "
"private static void filterServersWithSameGroupId(RSEvaluations evals,int localServerId,byte groupId){   final LocalEvaluation eval=new LocalEvaluation();   for (  Entry<Integer,ReplicationServerInfo> entry : evals.bestRSs.entrySet()) {     final Integer rsId=entry.getKey();     final ReplicationServerInfo rsInfo=entry.getValue();     if (rsInfo.getGroupId() == groupId) {       eval.accept(rsId,rsInfo);     }  else {       eval.reject(rsInfo,NOTE_RS_HAS_DIFFERENT_GROUP_ID_THAN_DS.get(rsId,rsInfo.getGroupId(),localServerId,groupId));     }   }   evals.keepBest(eval); } "
"public IRandomAccessSource createSourceView(){   return new IndependentRandomAccessSource(byteSource); } "
"public void mark(int readAheadLimit) throws IOException {   throw new IOException(\"mark/reset not supported\"); } "
"public synchronized int read(byte b[],int off,int len){   if (b == null) {     throw new NullPointerException();   }  else   if (off < 0 || len < 0 || len > b.length - off) {     throw new IndexOutOfBoundsException();   }   if (pos >= count) {     return -1;   }   int avail=count - pos;   if (len > avail) {     len=avail;   }   if (len <= 0) {     return 0;   }   System.arraycopy(buf,pos,b,off,len);   pos+=len;   return len; } "
"public MethodHandleValue(SMethodDef method,int mode,STypeDef type){   this.method=method;   this.mode=mode;   this.type=type; } "
"public void write(Writer out,Document doc,int pos,int len) throws IOException, BadLocationException {   throw new IOException(\"RTF is an 8-bit format\"); } "
"public int compare(Object o1,Object o2){   AttributeSchema attr1=(AttributeSchema)o1;   AttributeSchema attr2=(AttributeSchema)o2;   return (collator != null) ? collator.compare(attr1.getI18NKey(),attr2.getI18NKey()) : attr1.getI18NKey().compareTo(attr2.getI18NKey()); } "
"public static AnalyzerResponse containsAlertAfterUnexpectedMessage(TlsContext tlsContext){   int position=getUnexpectedMessagePosition(tlsContext);   if (position == -1) {     return AnalyzerResponse.NO_MODIFICATION;   }  else {     ProtocolMessage pm=getNextProtocolMessageFromPeer(tlsContext,position);     if (pm != null && pm.getProtocolMessageType() == ProtocolMessageType.ALERT) {       return AnalyzerResponse.ALERT;     }  else {       return AnalyzerResponse.NO_ALERT;     }   } } "
"public Set listCircleOfTrustMember(String realm,String cotName,String protocolType) throws COTException {   String classMethod=\"COTManager.listCircleOfTrustMember: \";   if ((cotName == null) || (cotName.trim().length() == 0)) {     String[] data={realm};     LogUtil.error(Level.INFO,LogUtil.NULL_COT_NAME_LIST_COT,data);     throw new COTException(\"invalidCOTName\",null);   }   if (realm == null) {     realm=\"/\";   }   Set trustedProviders=new HashSet();   try {     CircleOfTrustDescriptor cotDesc=null;     Map attrs=configInst.getConfiguration(realm,cotName);     if (attrs == null) {       return null;     }  else {       isValidProtocolType(protocolType);       cotDesc=new CircleOfTrustDescriptor(cotName,realm,attrs);       trustedProviders=cotDesc.getTrustedProviders(protocolType);     }   }  catch (  ConfigurationException e) {     debug.error(classMethod,e);     String[] data={e.getMessage(),cotName,realm};     LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_LIST_COT_MEMBER,data);     throw new COTException(e);   }   return trustedProviders; } "
"public void handleParentagepathHrefRequest(RequestInvocationEvent event){   String path=(String)getDisplayFieldValue(PARENTAGE_PATH_HREF);   setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,path);   setCurrentLocation(path);   unlockPageTrailForSwapping();   forwardTo(); } "
"public void updatedDoctypeString(String newDoctypeString) throws Exception {   DoctypeToken dctoken=getDoctypeToken();   if (dctoken != null) {     dctoken.updateDoctypeString(newDoctypeString);   }  else {     throw new Exception(\"FAILED to update DOCTYPE - no such element\");   } } "
"public Builder withFade(Color... colors) throws IllegalArgumentException {   Validate.notNull(colors,\"Cannot have null colors\");   if (colors.length == 0) {     return this;   }   ImmutableList.Builder<Color> list=this.fadeColors;   if (list == null) {     list=this.fadeColors=ImmutableList.builder();   }   for (  Color color : colors) {     Validate.notNull(color,\"Color cannot be null\");     list.add(color);   }   return this; } "
"public boolean hasSeenEntry(){   return this.seenEntry; } "
"MutableBigInteger(int val){   value=new int[1];   intLen=1;   value[0]=val; } "
"public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {   return super.newInstance(javaContentInterface); } "
"public Text replaceWholeText(String content) throws DOMException {   return null; } "
"public void removeListener(CircularProgressViewListener listener){   listeners.remove(listener); } "
"protected boolean updateNextIndex(){   if (nextIndex == -1 && !parent.isExpanded()) {     return false;   }   if (childCount == 0) {     return false;   }  else   if (++nextIndex >= childCount) {     return false;   }   FHTreeStateNode child=parent.getChildAtModelIndex(nextIndex);   if (child != null && child.isExpanded()) {     parent=child;     nextIndex=-1;     childCount=treeModel.getChildCount(child.getUserObject());   }   return true; } "
"public BasicPermissionCollection(Class<?> clazz){   perms=new HashMap<String,Permission>(11);   all_allowed=false;   permClass=clazz; } "
"public boolean markSupported(){   return true; } "
"public static SearchFilter createORFilter(Collection<SearchFilter> filterComponents){   return new SearchFilter(FilterType.OR,filterComponents,null,null,null,null,null,null,null,false); } "
"public String patchFixIds(){   return properties.getProperty(\"patch.fix.ids\"); } "
"public JavaClass parse() throws IOException, ClassFormatException {   readID();   readVersion();   readConstantPool();   readClassInfo();   readInterfaces();   readFields();   readMethods();   readAttributes();   return new JavaClass(class_name,superclass_name,access_flags,constant_pool,interface_names,runtimeVisibleAnnotations); } "
"public com.sun.identity.saml2.jaxb.metadata.EmailAddressElement createEmailAddressElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.EmailAddressElementImpl(); } "
"public void destroy(){   config=null; } "
"public List<String> methodDocComment(MessageType msg){   StringBuilder attributesBuilder=new StringBuilder();   for (  Field field : msg.getFields()) {     attributesBuilder.append(fieldAttributeComment(field));   }   String attributes=attributesBuilder.toString().trim();   List<String> content=defaultComments(msg);   if (!Strings.isNullOrEmpty(attributes)) {     return ImmutableList.<String>builder().addAll(content).addAll(convertToCommentedBlock(attributes)).build();   }   return content; } "
"private void hideBothNavigationBarAndStatusBar(){   View decorView=getWindow().getDecorView();   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {     int uiOptions=View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;     decorView.setSystemUiVisibility(uiOptions);   } } "
"public DoneMsg(int serverID,int i){   super(serverID,i); } "
"public final void testGetMGFParameters02(){   PSSParameterSpec pssps=new PSSParameterSpec(\"SHA-1\",\"MGF1\",null,20,1);   assertNull(pssps.getMGFParameters()); } "
"public void logCompareResponse(CompareOperation compareOperation){ } "
"public void addFocusListener(FocusListener l){   getTextComponent().addFocusListener(l); } "
"public void testDivideToIntegralValueMathContextDOWN(){   String a=\"3736186567876876578956958769675785435673453453653543654354365435675671119238118911893939591735\";   int aScale=45;   String b=\"134432345432345748766876876723342238476237823787879183470\";   int bScale=70;   int precision=75;   RoundingMode rm=RoundingMode.DOWN;   MathContext mc=new MathContext(precision,rm);   String c=\"2.7792318551469036747477068339450205874992634417590178670822889E+62\";   int resScale=-1;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result=aNumber.divideToIntegralValue(bNumber,mc);   assertEquals(\"incorrect value\",c,result.toString());   assertEquals(\"incorrect scale\",resScale,result.scale()); } "
"public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public void visitEnum(String name,String desc,String value){   if (av != null) {     av.visitEnum(name,desc,value);   } } "
"private void examineCompletedOperation(SearchOperation searchOperation){   assertTrue(searchOperation.getProcessingStartTime() > 0);   assertTrue(searchOperation.getProcessingStopTime() > 0);   assertTrue(searchOperation.getProcessingTime() >= 0);   ensurePostReponseHasRun(); } "
"public OrSubject(Set<EntitlementSubject> eSubjects){   super(eSubjects); } "
"public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){   try {     TrustManagerFactory.getInstance(null,getDefaultProvider());     fail(\"\");   }  catch (  NoSuchAlgorithmException expected) {   } catch (  NullPointerException expected) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       TrustManagerFactory.getInstance(invalidValues[i],getDefaultProvider());       fail(\"NoSuchAlgorithmException must be thrown (algorithm: \".concat(invalidValues[i]).concat(\")\"));     }  catch (    NoSuchAlgorithmException e) {     }   } } "
"public void deleteDynamicGroups(Set groupDNs) throws AMException, SSOException {   Iterator iter=groupDNs.iterator();   while (iter.hasNext()) {     String groupDN=(String)iter.next();     AMDynamicGroup group=new AMDynamicGroupImpl(token,groupDN);     group.delete();   } } "
"public Status(Installation installation){   this.installation=installation; } "
"private boolean checkOTP(String otp) throws AuthLoginException {   AMIdentity id=null;   id=getIdentity(userName);   if (id == null) {     throw new AuthLoginException(amAuthOATH,\"authFailed\",null);   }   byte[] secretKeyBytes=getSharedSecret(id);   String otpGen=null;   try {     if (algorithm == HOTP) {       int counter=0;       Set<String> counterSet=null;       try {         if (StringUtils.isEmpty(counterAttrName)) {           debug.error(\"OATH\" + \".checkOTP() : \" + \"invalid counter attribute name : \");           throw new AuthLoginException(amAuthOATH,\"authFailed\",null);         }         counterSet=id.getAttribute(counterAttrName);       }  catch (      IdRepoException e) {         debug.error(\"OATH\" + \".checkOTP() : \" + \"error getting counter attribute : \",e);         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       } catch (      SSOException e) {         debug.error(\"OATH\" + \".checkOTP() : \" + \"error invalid repo id : \"+ id,e);         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       }       if (counterSet == null || counterSet.isEmpty()) {         debug.error(\"OATH\" + \".checkOTP() : \" + \"Counter value is empty or null\");         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       }       try {         counter=Integer.parseInt((String)(counterSet.iterator().next()));       }  catch (      NumberFormatException e) {         debug.error(\"OATH\" + \".checkOTP() : \" + \"Counter is not a valid number\",e);         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       }       if (windowSize < 0) {         debug.error(\"OATH\" + \".checkOTP() : \" + \"Window size is not valid\");         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       }       counter++;       for (int i=0; i <= windowSize; i++) {         otpGen=HOTPAlgorithm.generateOTP(secretKeyBytes,counter + i,passLen,checksum,truncationOffset);         if (isEqual(otpGen,otp)) {           setCounterAttr(id,counter + i);           return true;         }       }     }  else     if (algorithm == TOTP) {       validateTOTPParameters();       clockDriftCheckEnabled=!StringUtils.isEmpty(observedClockDriftAttrName);       Set attrNames=new HashSet();       String lastLoginTimeAttrValue=\"\";       String lastObservedClockDriftAttr=null;       Map<String,Set<String>> totpAttributeValues=null;       long lastClockDriftInSeconds=0;       long lastLoginTimeInSeconds=0;       attrNames.add(loginTimeAttrName);       if (clockDriftCheckEnabled) {         attrNames.add(observedClockDriftAttrName);       }       try {         totpAttributeValues=id.getAttributes(attrNames);         if (!totpAttributeValues.isEmpty()) {           lastLoginTimeAttrValue=CollectionHelper.getMapAttr(totpAttributeValues,loginTimeAttrName);           if (lastLoginTimeAttrValue != null && !lastLoginTimeAttrValue.isEmpty()) {             lastLoginTimeInSeconds=Long.parseLong(lastLoginTimeAttrValue);           }           if (lastLoginTimeInSeconds < 0) {             debug.error(\"OATH.checkOTP(): invalid login time value: \" + lastLoginTimeInSeconds);             throw new AuthLoginException(amAuthOATH,\"authFailed\",null);           }           if (clockDriftCheckEnabled) {             lastObservedClockDriftAttr=CollectionHelper.getMapAttr(totpAttributeValues,observedClockDriftAttrName);             if (!StringUtils.isEmpty(lastObservedClockDriftAttr)) {               lastClockDriftInSeconds=Long.parseLong(lastObservedClockDriftAttr);             }  else {               if (debug.messageEnabled()) {                 debug.message(\"OATH.checkOTP(): last observed time drift Set was empty\");               }             }           }         }  else {           debug.error(\"OATH.checkOTP(): error TOTP attributes were empty\");           throw new AuthLoginException(amAuthOATH,\"authFailed\",null);         }       }  catch (      IdRepoException e) {         debug.error(\"OATH.checkOTP(): error getting TOTP attributes : \",e);         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       } catch (      SSOException e) {         debug.error(\"OATH.checkOTP(): error invalid repo id : \" + id,e);         throw new AuthLoginException(amAuthOATH,\"authFailed\",null);       }       long lastLoginTimeStep=lastLoginTimeInSeconds / totpTimeStep;       long currentTimeStep=(timeInSeconds / totpTimeStep) + (lastClockDriftInSeconds / totpTimeStep);       if (lastLoginTimeStep == currentTimeStep) {         debug.error(\"OATH.checkOTP(): Login failed attempting to use the same OTP in same Time Step: \" + currentTimeStep);         throw new InvalidPasswordException(amAuthOATH,\"authFailed\",null,userName,null);       }       boolean sameWindow=false;       if (lastLoginTimeStep >= (currentTimeStep - totpStepsInWindow) && lastLoginTimeStep <= (currentTimeStep + totpStepsInWindow)) {         if (debug.messageEnabled()) {           debug.message(\"OATH.checkOTP(): Login in the same TOTP window\");         }         sameWindow=true;       }       if (debug.messageEnabled()) {         debug.message(\"OATH.checkOTP(): values lastLoginTimeInSeconds: \" + lastLoginTimeInSeconds + \" lastLoginTimeStep: \"+ lastLoginTimeStep+ \" sameWindow:\"+ sameWindow+ \" \\n clockDriftSeconds:  \"+ lastClockDriftInSeconds+ \" clockDriftCheckEnabled:  \"+ clockDriftCheckEnabled);       }       String passLenStr=Integer.toString(passLen);       otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(currentTimeStep),passLenStr);       if (isEqual(otpGen,otp)) {         setLoginTime(id,currentTimeStep);         return true;       }       for (int curTimeStepOffSet=1; curTimeStepOffSet <= totpStepsInWindow; curTimeStepOffSet++) {         long timeInFutureStep=currentTimeStep + curTimeStepOffSet;         long timeInPastStep=currentTimeStep - curTimeStepOffSet;         otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(timeInFutureStep),passLenStr);         if (isEqual(otpGen,otp)) {           setLoginTime(id,timeInFutureStep);           return true;         }         otpGen=TOTPAlgorithm.generateTOTP(secretKeyBytes,Long.toHexString(timeInPastStep),passLenStr);         if (isEqual(otpGen,otp) && sameWindow) {           debug.error(\"OATH.checkOTP(): \" + \"Login the same window with a OTP that is older than the current OTP\");           return false;         }  else         if (isEqual(otpGen,otp) && !sameWindow) {           setLoginTime(id,timeInPastStep);           return true;         }       }     }  else {       debug.error(\"OATH.checkOTP(): No OTP algorithm selected\");       throw new AuthLoginException(amAuthOATH,\"authFailed\",null);     }   }  catch (  AuthLoginException e) {     throw e;   } catch (  Exception e) {     debug.error(\"OATH.checkOTP(): checkOTP process failed : \",e);     throw new AuthLoginException(amAuthOATH,\"authFailed\",null);   }   return false; } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"public void writeSearchResult(final int messageID,final Result result) throws IOException {   logger.trace(\"ENCODE LDAP SEARCH RESULT(messageID=%d, result=%s)\",messageID,result);   writeMessageHeader(messageID); {     writeResultHeader(LDAP.OP_TYPE_SEARCH_RESULT_DONE,result);     writeResultFooter(writer);   }   writeMessageFooter(result.getControls()); } "
"public void removeEditActionListener(ActionListener listener){   editButton.removeActionListener(listener);   iconButton.removeActionListener(listener); } "
"public long longValue(){   if (val instanceof Long || val instanceof Integer) {     return val.longValue();   }   return (long)(val.doubleValue()); } "
"@Override public LocalDate dateYearDay(Era era,int yearOfEra,int dayOfYear){   return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear); } "
"@Override public void reset(){   if (!included || getResponse().isCommitted())   getResponse().reset(); } "
"String[] toCommandLineArgumentsInitialize(String configurationFile,ConnectionParameters connParams){   return new String[]{\"initialize\",\"--no-prompt\",\"--configFile\",configurationFile,\"--hostSource\",connParams.getHostName(),\"--portSource\",s(connParams.getAdminPort()),\"--hostDestination\",connParamsForDestination.getHostName(),\"--portDestination\",s(connParamsForDestination.getAdminPort()),\"--adminUID\",connParams.getAdminUid(),\"--adminPassword\",connParams.getAdminPassword(),\"--baseDN\",baseDn,\"--trustAll\",\"--noPropertiesFile\"}; } "
"public void initialize_manual_trace_half_widths(){   for (int i=0; i < itera_settings.manual_trace_half_width_arr.length; ++i) {     itera_settings.manual_trace_half_width_arr[i]=r_board.brd_rules.get_default_net_class().get_trace_half_width(i);   } } "
"public void draw(Graphics p_graphics,GdiContext p_graphics_context,double p_intensity){   if (expansion_room_arr == null)   return;   for (  ExpandRoomObstacle curr_room : expansion_room_arr) {     if (curr_room == null)     continue;     curr_room.draw(p_graphics,p_graphics_context,p_intensity);   } } "
"DNLock writeLockEntry(DN entryDN){   DNLock lock=null;   while (lock == null) {     lock=DirectoryServer.getLockManager().tryWriteLockEntry(entryDN);   }   return lock; } "
"public String toString(){   if (userObject == null) {     return \"\";   }  else {     return userObject.toString();   } } "
"public String[] listChildren(SetRelationDefinition<?,?> d){   validateRelationDefinition(d);   return serverContext.listManagedObjects(path,d); } "
"public NoSuchElementException(String s){   super(s); } "
"public void testIsUnmappable(){   assertFalse(CoderResult.UNDERFLOW.isUnmappable());   assertFalse(CoderResult.OVERFLOW.isUnmappable());   assertFalse(CoderResult.malformedForLength(1).isUnmappable());   assertTrue(CoderResult.unmappableForLength(1).isUnmappable()); } "
"public void paint(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).paint(a,b);   } } "
"public boolean isValidRealm(){   return validRealm; } "
"static Throwable loadLibrary(){   try {     File nativeLibFile=findNativeLibrary();     if (nativeLibFile != null) {       System.load(nativeLibFile.getAbsolutePath());     }  else {       System.loadLibrary(\"commons-crypto\");     }     return null;   }  catch (  Exception t) {     return t;   } catch (  UnsatisfiedLinkError t) {     return t;   } } "
"private final void addOrder(int ch,int anOrder){   int order=mapping.elementAt(ch);   if (order >= RBCollationTables.CONTRACTCHARINDEX) {     int length=1;     if (Character.isSupplementaryCodePoint(ch)) {       length=Character.toChars(ch,keyBuf,0);     }  else {       keyBuf[0]=(char)ch;     }     addContractOrder(new String(keyBuf,0,length),anOrder);   }  else {     mapping.setElementAt(ch,anOrder);   } } "
"public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthorizationDecisionQueryType createAuthorizationDecisionQueryType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthorizationDecisionQueryTypeImpl(); } "
"public void deleteDynamicGroups(Set dynamicGroupDNs) throws AMException, SSOException {   Iterator iter=dynamicGroupDNs.iterator();   while (iter.hasNext()) {     String dynamicGroupDN=(String)iter.next();     AMDynamicGroup dynamicGroup=new AMDynamicGroupImpl(super.token,dynamicGroupDN);     dynamicGroup.delete();   } } "
"public void initNodeTest(int whatToShow){   m_whatToShow=whatToShow;   calcScore(); } "
"public void test_DivideBigDecimalRoundingModeCEILING(){   String a=\"3736186567876876578956958765675671119238118911893939591735\";   String b=\"74723342238476237823787879183470\";   RoundingMode rm=RoundingMode.CEILING;   String c=\"50000260373164286401361914\";   BigDecimal aNumber=new BigDecimal(new BigInteger(a));   BigDecimal bNumber=new BigDecimal(new BigInteger(b));   BigDecimal result=aNumber.divide(bNumber,rm);   assertEquals(\"incorrect value\",c,result.toString()); } "
"public AuthorizationDeclinedException(){   super(403,\"authorization_declined\",\"The user has declined authorization\"); } "
"public SearchResultEntryProtocolOp(SearchResultEntry searchEntry,int ldapVersion){   this(searchEntry.getName(),null,searchEntry,ldapVersion); } "
"public double num() throws javax.xml.transform.TransformerException {   error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});   return 0.0; } "
"public void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator(){   final int rSize=myReversedLinkedList.size();   ReversedMyIntComparator comp=new ReversedMyIntComparator();   try {     Collections.binarySearch(null,new Object(),comp);     fail(\"Expected NullPointerException for null list parameter\");   }  catch (  NullPointerException e) {   }   for (int counter=0; counter < rSize; counter++) {     assertTrue(\"Returned incorrect binary search item position using custom comparator\",myReversedLinkedList.get(Collections.binarySearch(myReversedLinkedList,myReversedLinkedList.get(counter),comp)) == myReversedLinkedList.get(counter));   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(importNode03.class,args); } "
"public final void signalAll(){   if (!isHeldExclusively())   throw new IllegalMonitorStateException();   Node first=firstWaiter;   if (first != null)   doSignalAll(first); } "
"public void processMouseEvent(MouseEvent event,MenuElement path[],MenuSelectionManager manager){ } "
"public Conditions(java.util.Date notBefore,java.util.Date notOnOrAfter,Condition condition,AudienceRestrictionCondition arc,DoNotCacheCondition doNotCacheCnd) throws SAMLException {   this(notBefore,notOnOrAfter,condition,arc);   if (doNotCacheCnd != null) {     doNotCache=doNotCacheCnd;   } } "
"private void generateJspFragment(Node n,String tagHandlerVar) throws JasperException {   FragmentHelperClass.Fragment fragment=fragmentHelperClass.openFragment(n,methodNesting);   ServletWriter outSave=out;   out=fragment.getGenBuffer().getOut();   String tmpParent=parent;   parent=\"_jspx_parent\";   boolean isSimpleTagParentSave=isSimpleTagParent;   isSimpleTagParent=true;   boolean tmpIsFragment=isFragment;   isFragment=true;   String pushBodyCountVarSave=pushBodyCountVar;   if (pushBodyCountVar != null) {     pushBodyCountVar=\"_jspx_push_body_count\";   }   visitBody(n);   out=outSave;   parent=tmpParent;   isSimpleTagParent=isSimpleTagParentSave;   isFragment=tmpIsFragment;   pushBodyCountVar=pushBodyCountVarSave;   fragmentHelperClass.closeFragment(fragment,methodNesting);   out.print(\"new \" + fragmentHelperClass.getClassName() + \"( \"+ fragment.getId()+ \", _jspx_page_context, \"+ tagHandlerVar+ \", \"+ pushBodyCountVar+ \")\"); } "
"public void processListenerEvent(String name){ synchronized (jaasConfig) {     if (debug.messageEnabled()) {       debug.message(\"pLE, remove config \" + name);     }     jaasConfig.remove(name);   } } "
"public Encoding(String name){   this.name=name; } "
"public static void main(final String[] args){   DOMTestCase.doMain(createDocument01.class,args); } "
"public static String replacePart(String self){   return replacePart(self,\"\"); } "
"public boolean equals(Object obj){   if (obj == this)   return true;   return (obj instanceof DialogState) && ((DialogState)obj).m_dialogState == m_dialogState; } "
"public com.sun.identity.saml2.jaxb.assertion.ConditionsType createConditionsType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.ConditionsTypeImpl(); } "
"public void handleTblDataActionHrefRequest(RequestInvocationEvent event){   EntitiesModel model=(EntitiesModel)getModel();   String universalId=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));   setPageSessionAttribute(EntityEditViewBean.UNIVERSAL_ID,universalId);   try {     AMIdentity amid=IdUtils.getIdentity(model.getUserSSOToken(),universalId);     String idType=amid.getType().getName();     AMViewBeanBase vb=(AMViewBeanBase)getViewBean(EntityEditViewBean.class);     setPageSessionAttribute(EntityOpViewBeanBase.ENTITY_NAME,amid.getName());     setPageSessionAttribute(EntityOpViewBeanBase.ENTITY_TYPE,idType);     unlockPageTrail();     passPgSessionMap(vb);     vb.forwardTo(getRequestContext());   }  catch (  IdRepoException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",model.getErrorString(e));     forwardTo();   } } "
"public boolean isSkipLastFooter(){   return skipLastFooter; } "
"private byte[] encodeParameters(Map<String,String> params,String paramsEncoding){   StringBuilder encodedParams=new StringBuilder();   try {     for (    Map.Entry<String,String> entry : params.entrySet()) {       encodedParams.append(URLEncoder.encode(entry.getKey(),paramsEncoding));       encodedParams.append('=');       encodedParams.append(URLEncoder.encode(entry.getValue(),paramsEncoding));       encodedParams.append('&');     }     return encodedParams.toString().getBytes(paramsEncoding);   }  catch (  UnsupportedEncodingException uee) {     throw new RuntimeException(\"Encoding not supported: \" + paramsEncoding,uee);   } } "
"@Override public void startIntentSenderFromFragment(final Fragment fragment,final IntentSender intent,final int requestCode,@Nullable final Intent fillInIntent,final int flagsMask,final int flagsValues,final int extraFlags,final Bundle options) throws IntentSender.SendIntentException {   super.startIntentSenderFromFragment(fragment,intent,requestCode,fillInIntent,flagsMask,flagsValues,extraFlags,options); } "
"final int compare(MutableBigInteger b){   int blen=b.intLen;   if (intLen < blen)   return -1;   if (intLen > blen)   return 1;   int[] bval=b.value;   for (int i=offset, j=b.offset; i < intLen + offset; i++, j++) {     int b1=value[i] + 0x80000000;     int b2=bval[j] + 0x80000000;     if (b1 < b2)     return -1;     if (b1 > b2)     return 1;   }   return 0; } "
"public static boolean isOEMVersion(){   return !isClassAvailable(\"org.opends.server.backends.jeb.JEBackend\"); } "
"public Set createOrganizationalUnits(Set organizationalUnits) throws AMException, SSOException {   Iterator iter=organizationalUnits.iterator();   Set orgUnits=new HashSet();   while (iter.hasNext()) {     String orgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + \"=\" + ((String)iter.next())+ \",\"+ super.entryDN;     AMOrganizationalUnitImpl orgUnitImpl=new AMOrganizationalUnitImpl(super.token,orgUnitDN);     orgUnitImpl.create();     orgUnits.add(orgUnitImpl);   }   return orgUnits; } "
"public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {   if (isSigned && signedXMLString != null) {     return signedXMLString;   }   Set namespaces=new HashSet();   StringBuffer attrs=new StringBuffer();   StringBuffer childElements=new StringBuffer();   getXMLString(namespaces,attrs,childElements,includeNSPrefix,declareNS);   StringBuffer xmlString=new StringBuffer(1000);   xmlString.append(SAML2Constants.START_TAG);   if (includeNSPrefix) {     xmlString.append(SAML2Constants.PROTOCOL_PREFIX);   }   xmlString.append(elementName);   if (!namespaces.isEmpty()) {     for (Iterator iter=namespaces.iterator(); iter.hasNext(); ) {       xmlString.append(SAML2Constants.SPACE).append((String)iter.next());     }   }   xmlString.append(attrs).append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(childElements).append(SAML2Constants.START_TAG).append(\"/\");   if (includeNSPrefix) {     xmlString.append(SAML2Constants.PROTOCOL_PREFIX);   }   xmlString.append(elementName).append(SAML2Constants.END_TAG);   return xmlString.toString(); } "
"public static boolean isName(int c){   return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0; } "
"public void runTest() throws Throwable {   Document doc;   DocumentType docType;   String name;   doc=(Document)load(\"staff\",false);   docType=doc.getDoctype();   assertNotNull(\"docTypeNotNull\",docType);   name=docType.getName();   if ((\"image/svg+xml\".equals(getContentType()))) {     assertEquals(\"doctypeName\",\"svg\",name);   }  else {     assertEquals(\"documenttypeGetDocTypeAssert\",\"staff\",name);   } } "
"public SIPHeader parse() throws ParseException {   RecordRouteList recordRouteList=new RecordRouteList();   if (debug)   dbg_enter(\"RecordRouteParser.parse\");   try {     this.lexer.match(TokenTypes.RECORD_ROUTE);     this.lexer.SPorHT();     this.lexer.match(':');     this.lexer.SPorHT();     while (true) {       RecordRoute recordRoute=new RecordRoute();       super.parse(recordRoute);       recordRouteList.add(recordRoute);       this.lexer.SPorHT();       char la=lexer.lookAhead(0);       if (la == ',') {         this.lexer.match(',');         this.lexer.SPorHT();       }  else       if (la == '\\n')       break;  else       throw createParseException(\"unexpected char\");     }     return recordRouteList;   }   finally {     if (debug)     dbg_leave(\"RecordRouteParser.parse\");   } } "
"private ResourceResponse readResource(Context context,String resourceId) throws ResourceException {   ReadRequest readRequest=Requests.newReadRequest(resourceId);   return connectionFactory.getConnection().read(context,readRequest); } "
"public SampleModel createCompatibleSampleModel(int w,int h){   int[] bandOffsets=new int[numComponents];   for (int i=0; i < numComponents; i++) {     bandOffsets[i]=i;   } switch (transferType) { case DataBuffer.TYPE_BYTE: case DataBuffer.TYPE_USHORT:     return new PixelInterleavedSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets); default :   return new ComponentSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets); } } "
"public void deleteFilteredRoles(Set roleDNs) throws AMException, SSOException {   Iterator iter=roleDNs.iterator();   while (iter.hasNext()) {     String roleDN=(String)iter.next();     AMFilteredRole role=new AMFilteredRoleImpl(token,roleDN);     role.delete();   } } "
"public static void ping(ConnectionWrapper connWrapper){   SearchRequest request=newSearchRequest(\"\",BASE_OBJECT,\"objectClass=*\",NO_ATTRIBUTES).setSizeLimit(0).setTimeLimit(0).setDereferenceAliasesPolicy(NEVER);   connWrapper.getConnection().search(request).close(); } "
"private void execScript(JsonValue input) throws ExecutionException, ResourceException {   ScriptEntry script=taskScannerContext.getScriptEntry();   if (script != null) {     String resourceID=taskScannerContext.getObjectID();     Context context=taskScannerContext.getContext();     try {       Script scope=script.getScript(context);       scope.put(\"input\",input.getObject());       scope.put(\"objectID\",retrieveFullID(resourceID,input));       Object returnedValue=scope.eval();       JsonValue _input=retrieveUpdatedObject(resourceID,input);       logger.debug(\"After script execution: {}\",_input);       if (returnedValue == Boolean.TRUE) {         _input=updateValueWithObject(resourceID,_input,taskScannerContext.getCompletedField(),DATE_UTIL.now());         taskScannerContext.getStatistics().taskSucceded();         logger.debug(\"Updated CompletedField: {}\",_input);       }  else {         taskScannerContext.getStatistics().taskFailed();       }     }  catch (    ScriptException se) {       taskScannerContext.getStatistics().taskFailed();       String msg=taskScannerContext.getScriptName() + \" script invoked by \" + taskScannerContext.getInvokerName()+ \" encountered exception\";       logger.debug(msg,se);       throw new ExecutionException(msg,se);     }   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(documentgetelementsbytagnameNS04.class,args); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String substring;   doc=(Document)load(\"hc_staff\",false);   elementList=doc.getElementsByTagName(\"strong\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   substring=child.substringData(0,8);   assertEquals(\"characterdataSubStringValueAssert\",\"Margaret\",substring); } "
"protected Constraint(){ } "
"public void validateToken(SSOToken token) throws SSOException {   try {     SSOTokenImpl tokenImpl=(SSOTokenImpl)token;     tokenImpl.validate();   }  catch (  Exception e) {     if (debug.messageEnabled()) {       debug.message(\"validateToken: \",e);     }     throw new SSOException(SSOProviderBundle.rbName,\"invalidtoken\",null);   } } "
"protected void check(){   if (host.getAutoDeploy()) {     DeployedApplication[] apps=deployed.values().toArray(new DeployedApplication[0]);     for (int i=0; i < apps.length; i++) {       if (!isServiced(apps[i].name))       checkResources(apps[i],false);     }     if (host.getUndeployOldVersions()) {       checkUndeploy();     }     deployApps();   } } "
"public static synchronized Registry createRegistry(){   if (registry == null) {     registry=Registry.getRegistry(null,null);     ClassLoader cl=MBeanUtils.class.getClassLoader();     registry.loadDescriptors(\"org.apache.catalina.mbeans\",cl);     registry.loadDescriptors(\"org.apache.catalina.authenticator\",cl);     registry.loadDescriptors(\"org.apache.catalina.core\",cl);     registry.loadDescriptors(\"org.apache.catalina\",cl);     registry.loadDescriptors(\"org.apache.catalina.deploy\",cl);     registry.loadDescriptors(\"org.apache.catalina.loader\",cl);     registry.loadDescriptors(\"org.apache.catalina.realm\",cl);     registry.loadDescriptors(\"org.apache.catalina.session\",cl);     registry.loadDescriptors(\"org.apache.catalina.startup\",cl);     registry.loadDescriptors(\"org.apache.catalina.users\",cl);     registry.loadDescriptors(\"org.apache.catalina.ha\",cl);     registry.loadDescriptors(\"org.apache.catalina.connector\",cl);     registry.loadDescriptors(\"org.apache.catalina.valves\",cl);     registry.loadDescriptors(\"org.apache.catalina.storeconfig\",cl);     registry.loadDescriptors(\"org.apache.tomcat.util.descriptor.web\",cl);   }   return (registry); } "
"public ChatsPresenter(String conversationId,String userObjectId,@NonNull ChatsDataSource chatsRepository,@NonNull ConversationsDataSource conversationsRepository,@NonNull ChatsContract.View chatsView){   mConversationId=conversationId;   mUserObjectId=userObjectId;   mCurrentUser=SupportUser.getCurrentUser();   mChatsRepository=checkNotNull(chatsRepository,\"chatsRepository cannot be null\");   mConversationsRepository=checkNotNull(conversationsRepository,\"chatsRepository cannot be null\");   mChatsView=checkNotNull(chatsView,\"chatsView cannot be null!\");   mChatsView.setPresenter(this); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeelementnodeattributes.class,args); } "
"private XSDateTimeValidator(){ } "
"@Override public void write(ASN1Writer stream) throws IOException {   stream.writeInteger(OP_TYPE_ABANDON_REQUEST,idToAbandon); } "
"public ModelMBeanNotificationInfo(ModelMBeanNotificationInfo inInfo){   this(inInfo.getNotifTypes(),inInfo.getName(),inInfo.getDescription(),inInfo.getDescriptor()); } "
"public void increment(int[] currentOffset){   myOffset=currentOffset[0]; } "
"public void init(Instrumentation inst,QueryReporter queryReporter,ConnectorConfiguration configuration){   queryProcessorWrapper=new QueryProcessorWrapper(queryReporter,configuration);   setQueryProcessorIntercepter(inst);   setCassandraDaemonIntercepter(inst); } "
"public void testBaseUriResolutionWithHashes() throws Exception {   document=builder.parse(new InputSource(new StringReader(\"<a xml:base=\\\"http://a1/a2\\\">\" + \"  <b xml:base=\\\"b1#b2\\\"/>\" + \"  <c xml:base=\\\"#c1\\\">\"+ \"    <d xml:base=\\\"\\\"/>\"+ \"  </c>\"+ \"  <e xml:base=\\\"\\\"/>\"+ \"</a>\")));   Element a=document.getDocumentElement();   assertEquals(\"http://a1/a2\",a.getBaseURI());   String message=\"This implementation's getBaseURI() doesn't handle \" + \"relative URIs with hashes\";   Element b=(Element)a.getChildNodes().item(1);   Element c=(Element)a.getChildNodes().item(3);   Element d=(Element)c.getChildNodes().item(1);   Element e=(Element)a.getChildNodes().item(5);   assertEquals(message,\"http://a1/b1#b2\",b.getBaseURI());   assertEquals(message,\"http://a1/a2#c1\",c.getBaseURI());   assertEquals(message,\"http://a1/a2#c1\",d.getBaseURI());   assertEquals(message,\"http://a1/a2\",e.getBaseURI()); } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String realm=getStringOptionValue(IArgument.REALM_NAME);   String idName=getStringOptionValue(ARGUMENT_ID_NAME);   String type=getStringOptionValue(ARGUMENT_ID_TYPE);   List privileges=(List)rc.getOption(IArgument.PRIVILEGES);   IdType idType=convert2IdType(type);   String[] params={realm,type,idName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_IDREPO_ADD_PRIVILEGES\",params);     DelegationManager mgr=new DelegationManager(adminSSOToken,realm);     Set privilegeObjects=mgr.getPrivileges();     AMIdentity amid;     if (idType.equals(IdType.ROLE) && idName.equalsIgnoreCase(ALL_AUTHENTICATED_USERS)) {       amid=new AMIdentity(adminSSOToken,idName,idType,\"/\",null);     }  else {       amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);       if (!amid.isExists()) {         Object[] p={idName,type};         throw new CLIException(MessageFormat.format(getResourceString(\"idrepo-add-privileges-do-not-exist\"),p),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);       }     }     String uid=amid.getUniversalId();     DelegationPrivilege newDp=null;     for (Iterator i=privileges.iterator(); i.hasNext(); ) {       String name=(String)i.next();       DelegationPrivilege dp=getDelegationPrivilege(name,privilegeObjects);       if (dp != null) {         Set subjects=dp.getSubjects();         if (!subjects.contains(uid)) {           subjects.add(uid);           newDp=new DelegationPrivilege(name,subjects,realm);           mgr.addPrivilege(newDp);         }  else {           String[] args={idName,name};           String msg=MessageFormat.format(getResourceString(\"delegation-already-has-privilege\"),(Object[])args);           throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);         }       }  else {         Set subjects=new HashSet(2);         subjects.add(uid);         newDp=new DelegationPrivilege(name,subjects,realm);         mgr.addPrivilege(newDp);       }     }     outputWriter.printlnMessage(MessageFormat.format(getResourceString(\"idrepo-add-privileges-succeed\"),(Object[])params));     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_IDREPO_ADD_PRIVILEGES\",params);   }  catch (  IdRepoException e) {     String[] args={realm,type,idName,e.getMessage()};     debugError(\"AddPrivileges.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IDREPO_ADD_PRIVILEGES\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  DelegationException e) {     String[] args={realm,type,idName,e.getMessage()};     debugError(\"AddPrivileges.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IDREPO_ADD_PRIVILEGES\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={realm,type,idName,e.getMessage()};     debugError(\"AddPrivileges.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IDREPO_ADD_PRIVILEGES\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public static PdfAction createHide(PdfAnnotation annotation,boolean hidden){   return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,annotation.getPdfObject()).put(PdfName.H,new PdfBoolean(hidden)); } "
"public void replaceURI(String uri){   if ((namingTable != null) && !namingTable.isEmpty()) {     Hashtable newNamingTable=new Hashtable();     Enumeration e=namingTable.keys();     while (e.hasMoreElements()) {       String name=e.nextElement().toString();       String value=namingTable.get(name).toString();       if (value.indexOf(\"%uri\") != -1) {         value=value.replaceAll(\"%uri\",uri);       }  else {         try {           Integer.parseInt(name);           int li=value.lastIndexOf(uri);           if (li != -1 && value.endsWith(uri)) {             value=value.substring(0,li);           }         }  catch (        NumberFormatException ex) {         }       }       newNamingTable.put(name,value);     }     namingTable=newNamingTable;   } } "
"public byte[] encodePassword(IdType type,byte[][] binaryValues){   if (type.equals(IdType.USER)) {     if (binaryValues != null && binaryValues.length > 0) {       return binaryValues[0];     }   }   return null; } "
"public static String encode(String s){   String str=null;   try {     str=encode(s,\"UTF8\");   }  catch (  UnsupportedEncodingException e) {   }   return str; } "
"public LinkedHashMapEntry(final String name){   this(DN.valueOf(name)); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   CharacterData child;   String childData;   doc=(Document)load(\"hc_staff\",true);   elementList=doc.getElementsByTagName(\"acronym\");   nameNode=elementList.item(0);   child=(CharacterData)nameNode.getFirstChild();   child.deleteData(4,50);   childData=child.getData();   assertEquals(\"characterdataDeleteDataExceedsLengthAssert\",\"1230\",childData); } "
"public static NameIDInfo parse(String info) throws SAML2Exception {   if (info == null) {     throw new SAML2Exception(SAML2Utils.bundle.getString(\"nullNameIDInfo\"));   }   StringTokenizer st=new StringTokenizer(info,DELIM);   if (st.countTokens() != 9) {     throw new SAML2Exception(SAML2Utils.bundle.getString(\"inValidNameIDInfo\"));   }   String hostEntityID=st.nextToken();   String remoteEntityID=st.nextToken();   String nameIDValue=st.nextToken();   String nameQualifier=st.nextToken();   String format=st.nextToken();   String spNameIDValue=st.nextToken();   String spNameQualifier=st.nextToken();   String role=st.nextToken();   boolean isAffiliation=Boolean.valueOf(st.nextToken()).booleanValue();   NameID nameID=AssertionFactory.getInstance().createNameID();   nameID.setValue(nameIDValue);   if (nameQualifier != null && !NULL.equals(nameQualifier)) {     nameID.setNameQualifier(nameQualifier);   }   if (spNameIDValue != null && !NULL.equals(spNameIDValue)) {     nameID.setSPProvidedID(spNameIDValue);   }   if (spNameQualifier != null && !NULL.equals(spNameQualifier)) {     nameID.setSPNameQualifier(spNameQualifier);   }   if (format != null && !NULL.equals(format)) {     nameID.setFormat(format);   }   return new NameIDInfo(hostEntityID,remoteEntityID,nameID,role,isAffiliation); } "
"public void reset(){   super.reset();   H1=0x6a09e667f3bcc908L;   H2=0xbb67ae8584caa73bL;   H3=0x3c6ef372fe94f82bL;   H4=0xa54ff53a5f1d36f1L;   H5=0x510e527fade682d1L;   H6=0x9b05688c2b3e6c1fL;   H7=0x1f83d9abfb41bd6bL;   H8=0x5be0cd19137e2179L; } "
"public Enumeration<Permission> elements(){ synchronized (this) {     return Collections.enumeration(perms);   } } "
"public void insert_obstacle(PlaArea p_area,int p_layer,int p_clearance_class,ItemFixState p_fixed_state){   if (p_area == null) {     System.out.println(\"BasicBoard.insert_obstacle: p_area is null\");     return;   }   BrdArea obs=new BrdArea(p_area,p_layer,PlaVectorInt.ZERO,0,false,p_clearance_class,0,0,null,p_fixed_state,this);   insert_item(obs); } "
"private XPathFactory loadFromServicesFile(String uri,String resourceName,InputStream in){   if (debug)   debugPrintln(\"Reading \" + resourceName);   BufferedReader rd;   try {     rd=new BufferedReader(new InputStreamReader(in,\"UTF-8\"),DEFAULT_LINE_LENGTH);   }  catch (  java.io.UnsupportedEncodingException e) {     rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);   }   String factoryClassName;   XPathFactory resultFactory=null;   while (true) {     try {       factoryClassName=rd.readLine();     }  catch (    IOException x) {       break;     }     if (factoryClassName != null) {       int hashIndex=factoryClassName.indexOf('#');       if (hashIndex != -1) {         factoryClassName=factoryClassName.substring(0,hashIndex);       }       factoryClassName=factoryClassName.trim();       if (factoryClassName.length() == 0) {         continue;       }       try {         XPathFactory foundFactory=createInstance(factoryClassName);         if (foundFactory.isObjectModelSupported(uri)) {           resultFactory=foundFactory;           break;         }       }  catch (      Exception ignored) {       }     }  else {       break;     }   }   IoUtils.closeQuietly(rd);   return resultFactory; } "
"public Origin createOrigin(String userName,String address) throws SdpException {   OriginField originImpl=new OriginField();   originImpl.setUsername(userName);   originImpl.setAddress(address);   originImpl.setNetworkType(SDPKeywords.IN);   originImpl.setAddressType(SDPKeywords.IPV4);   return originImpl; } "
"public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {   XObject bestScore=null;   int n=m_patterns.length;   for (int i=0; i < n; i++) {     XObject score=m_patterns[i].execute(xctxt);     if (score != NodeTest.SCORE_NONE) {       if (null == bestScore)       bestScore=score;  else       if (score.num() > bestScore.num())       bestScore=score;     }   }   if (null == bestScore) {     bestScore=NodeTest.SCORE_NONE;   }   return bestScore; } "
"public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   try {     System.out.println(myPort + \"  got a bye sending OK.\");     Response response=messageFactory.createResponse(200,request);     serverTransactionId.sendResponse(response);     System.out.println(\"Dialog State is \" + serverTransactionId.getDialog().getState());   }  catch (  Exception ex) {     ex.printStackTrace();     System.exit(0);   } } "
"public DataBuffer createDataBuffer(){   DataBuffer dataBuffer=null;   int size=scanlineStride * height; switch (dataType) { case DataBuffer.TYPE_BYTE:     dataBuffer=new DataBufferByte(size,numBanks);   break; case DataBuffer.TYPE_USHORT: dataBuffer=new DataBufferUShort(size,numBanks); break; case DataBuffer.TYPE_SHORT: dataBuffer=new DataBufferShort(size,numBanks); break; case DataBuffer.TYPE_INT: dataBuffer=new DataBufferInt(size,numBanks); break; case DataBuffer.TYPE_FLOAT: dataBuffer=new DataBufferFloat(size,numBanks); break; case DataBuffer.TYPE_DOUBLE: dataBuffer=new DataBufferDouble(size,numBanks); break; default : throw new IllegalArgumentException(\"dataType is not one \" + \"of the supported types.\"); } return dataBuffer; } "
"public PERSIST_STORE(){   this(\"\"); } "
"public boolean equals(Object object){   if (!(object instanceof ObjectInstance)) {     return false;   }   ObjectInstance val=(ObjectInstance)object;   if (!name.equals(val.getObjectName()))   return false;   if (className == null)   return (val.getClassName() == null);   return className.equals(val.getClassName()); } "
"public Builder removeAllOptionalAttributes(){   this.optionalAttributes.clear();   return this; } "
"List<String> performCommand(String[] cmdAttribs,int max,long timeout) throws IOException {   List<String> lines=new ArrayList<String>(20);   Process proc=null;   InputStream in=null;   OutputStream out=null;   InputStream err=null;   BufferedReader inr=null;   try {     Thread monitor=ThreadMonitor.start(timeout);     proc=openProcess(cmdAttribs);     in=proc.getInputStream();     out=proc.getOutputStream();     err=proc.getErrorStream();     inr=new BufferedReader(new InputStreamReader(in));     String line=inr.readLine();     while (line != null && lines.size() < max) {       line=line.toLowerCase(Locale.ENGLISH).trim();       lines.add(line);       line=inr.readLine();     }     proc.waitFor();     ThreadMonitor.stop(monitor);     if (proc.exitValue() != 0) {       throw new IOException(\"Command line returned OS error code '\" + proc.exitValue() + \"' for command \"+ Arrays.asList(cmdAttribs));     }     if (lines.isEmpty()) {       throw new IOException(\"Command line did not return any info \" + \"for command \" + Arrays.asList(cmdAttribs));     }     return lines;   }  catch (  InterruptedException ex) {     throw new IOExceptionWithCause(\"Command line threw an InterruptedException \" + \"for command \" + Arrays.asList(cmdAttribs) + \" timeout=\"+ timeout,ex);   }  finally {     IOUtils.closeQuietly(in);     IOUtils.closeQuietly(out);     IOUtils.closeQuietly(err);     IOUtils.closeQuietly(inr);     if (proc != null) {       proc.destroy();     }   } } "
"public static Token newToken(int ofKind,String image){ switch (ofKind) { default :     return new Token(ofKind,image); } } "
"private SAXUnmarshallerHandler createUnmarshallerHandler(Locator locator){   SAXUnmarshallerHandler unmarshaller=new SAXUnmarshallerHandlerImpl(this,grammarInfo);   try {     if (isValidating()) {       unmarshaller=ValidatingUnmarshaller.create(context.getGrammar(),unmarshaller,locator);     }   }  catch (  JAXBException e) {     e.printStackTrace();   }   return unmarshaller; } "
"@SuppressWarnings(\"fallthrough\") public void applyPattern(String pattern){   StringBuilder[] segments=new StringBuilder[4];   segments[SEG_RAW]=new StringBuilder();   int part=SEG_RAW;   int formatNumber=0;   boolean inQuote=false;   int braceStack=0;   maxOffset=-1;   for (int i=0; i < pattern.length(); ++i) {     char ch=pattern.charAt(i);     if (part == SEG_RAW) {       if (ch == '\\'') {         if (i + 1 < pattern.length() && pattern.charAt(i + 1) == '\\'') {           segments[part].append(ch);           ++i;         }  else {           inQuote=!inQuote;         }       }  else       if (ch == '{' && !inQuote) {         part=SEG_INDEX;         if (segments[SEG_INDEX] == null) {           segments[SEG_INDEX]=new StringBuilder();         }       }  else {         segments[part].append(ch);       }     }  else {       if (inQuote) {         segments[part].append(ch);         if (ch == '\\'') {           inQuote=false;         }       }  else { switch (ch) { case ',':           if (part < SEG_MODIFIER) {             if (segments[++part] == null) {               segments[part]=new StringBuilder();             }           }  else {             segments[part].append(ch);           }         break; case '{':       ++braceStack;     segments[part].append(ch);   break; case '}': if (braceStack == 0) {   part=SEG_RAW;   makeFormat(i,formatNumber,segments);   formatNumber++;   segments[SEG_INDEX]=null;   segments[SEG_TYPE]=null;   segments[SEG_MODIFIER]=null; }  else {   --braceStack;   segments[part].append(ch); } break; case ' ': if (part != SEG_TYPE || segments[SEG_TYPE].length() > 0) { segments[part].append(ch); } break; case '\\'': inQuote=true; default : segments[part].append(ch); break; } } } } if (braceStack == 0 && part != 0) { maxOffset=-1; throw new IllegalArgumentException(\"Unmatched braces in the pattern.\"); } this.pattern=segments[0].toString(); } "
"void sendPendingStatusMessages(){   final PendingStatusMessages savedState; synchronized (pendingStatusMessagesLock) {     savedState=pendingStatusMessages;     pendingStatusMessages=new PendingStatusMessages();   }   sendPendingChangeTimeHeartbeatMsgs(savedState);   sendPendingTopologyMsgs(savedState);   sendPendingMonitorMsgs(savedState); } "
"protected Color(PdfColorSpace colorSpace,float[] colorValue){   this.colorSpace=colorSpace;   if (colorValue == null)   this.colorValue=new float[colorSpace.getNumberOfComponents()];  else   this.colorValue=colorValue; } "
"public static void register(AbstractMatcher<String> matcher){   matchers.add(matcher); } "
"public String encodeBody(){   return encodeBody(new StringBuilder()).toString(); } "
"private void join_connected_sets(IteraNetItem[] p_net_items,Collection<BrdItem> p_from_connected_set,Collection<BrdItem> p_to_connected_set){   for (int i=0; i < p_net_items.length; ++i) {     IteraNetItem curr_item=p_net_items[i];     if (curr_item.connected_set == p_from_connected_set) {       p_to_connected_set.add(curr_item.item);       curr_item.connected_set=p_to_connected_set;     }   } } "
"private void arrayToAttributeTypes(String[] attributeArray,String attrStr) throws AciException {   for (  String attr : attributeArray) {     String attribute=attr.toLowerCase();     if (attribute.equals(\"*\")) {       if (!allUserAttributes) {         allUserAttributes=true;       }  else {         LocalizableMessage message=WARN_ACI_TARGETATTR_INVALID_ATTR_TOKEN.get(attrStr);         throw new AciException(message);       }     }  else     if (attribute.equals(\"+\")) {       if (!allOpAttributes) {         allOpAttributes=true;       }  else {         LocalizableMessage message=WARN_ACI_TARGETATTR_INVALID_ATTR_TOKEN.get(attrStr);         throw new AciException(message);       }     }  else {       AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attribute);       if (attrType.isOperational()) {         opAttributes.add(attrType);       }  else {         attributes.add(attrType);       }     }   } } "
"public net.aimeizi.person.QueryParameter.Builder clearAgeStart(){   fieldSetFlags()[0]=false;   return this; } "
"public boolean toLDIF(LDIFExportConfig exportConfig) throws IOException, LDIFException {   try {     if (!exportConfig.includeEntry(this)) {       if (logger.isTraceEnabled()) {         logger.trace(\"Skipping entry %s because of the export configuration.\",dn);       }       return false;     }   }  catch (  Exception e) {     logger.traceException(e);     throw new LDIFException(ERR_LDIF_COULD_NOT_EVALUATE_FILTERS_FOR_EXPORT.get(dn,e),e);   }   if (exportConfig.invokeExportPlugins()) {     PluginResult.ImportLDIF pluginResult=getPluginConfigManager().invokeLDIFExportPlugins(exportConfig,this);     if (!pluginResult.continueProcessing()) {       return false;     }   }   BufferedWriter writer=exportConfig.getWriter();   int wrapColumn=exportConfig.getWrapColumn();   boolean wrapLines=wrapColumn > 1;   StringBuilder dnLine=new StringBuilder(\"dn\");   appendLDIFSeparatorAndValue(dnLine,ByteString.valueOfUtf8(dn.toString()));   LDIFWriter.writeLDIFLine(dnLine,writer,wrapLines,wrapColumn);   final boolean typesOnly=exportConfig.typesOnly();   if (exportConfig.includeObjectClasses()) {     if (typesOnly) {       StringBuilder ocLine=new StringBuilder(\"objectClass:\");       LDIFWriter.writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);     }  else {       for (      String s : objectClasses.values()) {         StringBuilder ocLine=new StringBuilder(\"objectClass: \").append(s);         LDIFWriter.writeLDIFLine(ocLine,writer,wrapLines,wrapColumn);       }     }   }  else {     if (logger.isTraceEnabled()) {       logger.trace(\"Skipping objectclasses for entry %s because of the export configuration.\",dn);     }   }   writeLDIFLines(userAttributes,typesOnly,\"user\",exportConfig,writer,wrapColumn,wrapLines);   if (exportConfig.includeOperationalAttributes()) {     writeLDIFLines(operationalAttributes,typesOnly,\"operational\",exportConfig,writer,wrapColumn,wrapLines);   }  else {     if (logger.isTraceEnabled()) {       logger.trace(\"Skipping all operational attributes for entry %s \" + \"because of the export configuration.\",dn);     }   }   if (!exportConfig.includeVirtualAttributes()) {     for (    AttributeType t : suppressedAttributes.keySet()) {       if (exportConfig.includeAttribute(t)) {         for (        Attribute a : suppressedAttributes.get(t)) {           writeLDIFLine(a,typesOnly,writer,wrapLines,wrapColumn);         }       }     }   }   writer.newLine();   return true; } "
"public ASN1InputStream(byte[] input){   this(new ByteArrayInputStream(input),input.length); } "
"private static boolean clearance_equals(freert.rules.ClearanceMatrix p_cl_matrix,int p_layer_1,int p_layer_2){   if (p_layer_1 == p_layer_2) {     return true;   }   for (int i=1; i < p_cl_matrix.get_class_count(); ++i) {     for (int j=i; j < p_cl_matrix.get_class_count(); ++j) {       if (p_cl_matrix.value_at(i,j,p_layer_1) != p_cl_matrix.value_at(i,j,p_layer_2)) {         return false;       }     }   }   return true; } "
"public ElementAdapterSet(){   super(comparator); } "
"public SQLWarning(Throwable cause){   super(cause);   DriverManager.println(\"SQLWarning\"); } "
"public Set createSubPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {   Iterator iter=peopleContainerNames.iterator();   Set peopleContainers=new HashSet();   while (iter.hasNext()) {     StringBuffer peopleContainerDNSB=new StringBuffer();     peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append(\"=\").append((String)iter.next()).append(\",\").append(super.entryDN);     AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());     peopleContainerImpl.create();     peopleContainers.add(peopleContainerImpl);   }   return peopleContainers; } "
"@Override public void write(int oneByte) throws IOException {   mSingleByteArray[0]=(byte)(0xff & oneByte);   write(mSingleByteArray); } "
"public String lookupNamespace(String prefix){   String uri=null;   final Stack stack=getPrefixStack(prefix);   if (stack != null && !stack.isEmpty()) {     uri=((MappingRecord)stack.peek()).m_uri;   }   if (uri == null)   uri=EMPTYSTRING;   return uri; } "
"private static void ImportSubtree(Preferences prefsNode,Element xmlNode){   NodeList xmlKids=xmlNode.getChildNodes();   int numXmlKids=xmlKids.getLength();   Preferences[] prefsKids; synchronized (((AbstractPreferences)prefsNode).lock) {     if (((AbstractPreferences)prefsNode).isRemoved())     return;     Element firstXmlKid=(Element)xmlKids.item(0);     ImportPrefs(prefsNode,firstXmlKid);     prefsKids=new Preferences[numXmlKids - 1];     for (int i=1; i < numXmlKids; i++) {       Element xmlKid=(Element)xmlKids.item(i);       prefsKids[i - 1]=prefsNode.node(xmlKid.getAttribute(\"name\"));     }   }   for (int i=1; i < numXmlKids; i++)   ImportSubtree(prefsKids[i - 1],(Element)xmlKids.item(i)); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.PasswordType createPasswordType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordTypeImpl(); } "
"private static JsonValue toThreadDumpJson(RecordProperties recordProperties){   JsonObject threadsDumpsProperties=JsonValueBuilder.jsonValue();   threadsDumpsProperties.put(RecordConstants.THREAD_DUMP_ENABLE_LABEL,recordProperties.threadDumpEnable);   if (recordProperties.threadDumpEnable) {     JsonObject threadsDumpsDelayProperties=JsonValueBuilder.jsonValue();     threadsDumpsDelayProperties.put(RecordConstants.THREAD_DUMP_DELAY_TIME_UNIT_LABEL,TimeUnit.SECONDS.toString());     threadsDumpsDelayProperties.put(RecordConstants.THREAD_DUMP_DELAY_VALUE_LABEL,recordProperties.threadDumpDelayInSeconds);     threadsDumpsProperties.put(RecordConstants.THREAD_DUMP_DELAY_LABEL,threadsDumpsDelayProperties.build().asMap());   }   return threadsDumpsProperties.build(); } "
"public boolean isPaintable(){   return false; } "
"public SMethodDef findMethodWithSameSignature(SMethodDef method,List<SMethodDef> methodList,boolean onlyCheckSignature) throws SyntaxException {   outer:   for (  SMethodDef m : methodList) {     if (m.name().equals(method.name())) {       if (m.getParameters().size() == method.getParameters().size()) {         for (int i=0; i < m.getParameters().size(); ++i) {           SParameter p=m.getParameters().get(i);           SParameter param=method.getParameters().get(i);           if (!p.type().equals(param.type())) {             continue outer;           }         }         if (!onlyCheckSignature) {           if (m.modifiers().contains(SModifier.PRIVATE))           continue;           if ((m.modifiers().contains(SModifier.PUBLIC) && !method.modifiers().contains(SModifier.PUBLIC)) || (m.modifiers().contains(SModifier.PROTECTED) && !m.modifiers().contains(SModifier.PUBLIC) && !m.modifiers().contains(SModifier.PROTECTED)) || (!m.modifiers().contains(SModifier.PUBLIC) && !m.modifiers().contains(SModifier.PROTECTED) && !m.modifiers().contains(SModifier.PRIVATE)&& (method.modifiers().contains(SModifier.PRIVATE) || !m.declaringType().pkg().equals(method.declaringType().pkg())))) {             err.SyntaxException(method + \" cannot override \" + m,method.line_col());             return null;           }           if (!m.getReturnType().isAssignableFrom(method.getReturnType()) && !method.getReturnType().isAssignableFrom(m.getReturnType())) {             err.SyntaxException(m + \" return type should be assignable from \" + method+ \" 's\",method.line_col());             return null;           }         }         return m;       }     }   }   return null; } "
"public boolean isVisible(){   return false; } "
"public void paintText(SynthContext ss,Graphics g,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,int iconTextGap,int mnemonicIndex,int textOffset){   if ((icon == null) && (text == null)) {     return;   }   JComponent c=ss.getComponent();   FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);   Insets insets=SynthLookAndFeel.getPaintingInsets(ss,paintInsets);   paintViewR.x=insets.left;   paintViewR.y=insets.top;   paintViewR.width=c.getWidth() - (insets.left + insets.right);   paintViewR.height=c.getHeight() - (insets.top + insets.bottom);   paintIconR.x=paintIconR.y=paintIconR.width=paintIconR.height=0;   paintTextR.x=paintTextR.y=paintTextR.width=paintTextR.height=0;   String clippedText=layoutText(ss,fm,text,icon,hAlign,vAlign,hTextPosition,vTextPosition,paintViewR,paintIconR,paintTextR,iconTextGap);   if (icon != null) {     Color color=g.getColor();     if (ss.getStyle().getBoolean(ss,\"TableHeader.alignSorterArrow\",false) && \"TableHeader.renderer\".equals(c.getName())) {       paintIconR.x=paintViewR.width - paintIconR.width;     }  else {       paintIconR.x+=textOffset;     }     paintIconR.y+=textOffset;     SynthIcon.paintIcon(icon,ss,g,paintIconR.x,paintIconR.y,paintIconR.width,paintIconR.height);     g.setColor(color);   }   if (text != null) {     View v=(View)c.getClientProperty(BasicHTML.propertyKey);     if (v != null) {       v.paint(g,paintTextR);     }  else {       paintTextR.x+=textOffset;       paintTextR.y+=textOffset;       paintText(ss,g,clippedText,paintTextR,mnemonicIndex);     }   } } "
"public MBeanParameterInfo(String name,String type,String description){   this(name,type,description,(Descriptor)null); } "
"@Post public Representation createClient(Representation entity) throws OAuth2RestletException {   final OAuth2Request request=requestFactory.create(getRequest());   final ChallengeResponse authHeader=getRequest().getChallengeResponse();   final String accessToken=authHeader != null ? authHeader.getRawValue() : null;   try {     final String deploymentUrl=getRequest().getHostRef().toString() + \"/\" + getRequest().getResourceRef().getSegments().get(0);     final JsonValue registration=clientRegistrationService.createRegistration(accessToken,deploymentUrl,request);     setStatus(Status.SUCCESS_CREATED);     return jacksonRepresentationFactory.create(registration.asMap());   }  catch (  OAuth2Exception e) {     throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);   } } "
"public final void testRead05(){   InputStream is=new ByteArrayInputStream(myMessage);   DigestInputStream dis=new DigestInputStream(is,null);   try {     for (int i=0; i < MY_MESSAGE_LEN; i++) {       dis.read();     }     fail(\"read() must not work when digest functionality is on\");   }  catch (  Exception e) {   } } "
"public MBeanException(java.lang.Exception e,String message){   super(message);   exception=e; } "
"public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return getService().deleteFoo(foo); } "
"public void deleteRules(List<? extends Rule> rules){   for (  Rule rule : rules) {     deleteRule(rule.getDatabaseId());   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodehaschildnodesfalse.class,args); } "
"public void removeTargetFilter(){   _targetFilter=null; } "
"protected Expression and(int opPos) throws TransformerException {   return compileOperation(new And(),opPos); } "
"public static ArgumentException unknownCategory(String categoryName){   LocalizableMessage msg=ERR_DSCFG_ERROR_CATEGORY_UNRECOGNIZED.get(categoryName);   return new ArgumentException(msg); } "
"protected Object clone() throws CloneNotSupportedException {   AbstractAction newAction=(AbstractAction)super.clone(); synchronized (this) {     if (arrayTable != null) {       newAction.arrayTable=(ArrayTable)arrayTable.clone();     }   }   return newAction; } "
"public void insertElementAt(int value,int at){   if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));   super.insertElementAt(value,at); } "
"@Override public int compare(File o1,File o2){   if (o1 == o2) {     return 0;   }   if (o1.lastModified() > o2.lastModified()) {     return -1;   }  else   if (o1.lastModified() < o2.lastModified()) {     return 1;   }  else {     return 0;   } } "
"public Bounds(){   super(); } "
"public void testOneOne(){   String numA=\"1\";   String numB=\"1\";   String res=\"0\";   BigInteger aNumber=new BigInteger(numA);   BigInteger bNumber=new BigInteger(numB);   BigInteger result=aNumber.xor(bNumber);   assertTrue(res.equals(result.toString())); } "
"private static void validate(int hours,int minutes,int seconds){   if (hours < -18 || hours > 18) {     throw new DateTimeException(\"Zone offset hours not in valid range: value \" + hours + \" is not in the range -18 to 18\");   }   if (hours > 0) {     if (minutes < 0 || seconds < 0) {       throw new DateTimeException(\"Zone offset minutes and seconds must be positive because hours is positive\");     }   }  else   if (hours < 0) {     if (minutes > 0 || seconds > 0) {       throw new DateTimeException(\"Zone offset minutes and seconds must be negative because hours is negative\");     }   }  else   if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {     throw new DateTimeException(\"Zone offset minutes and seconds must have the same sign\");   }   if (Math.abs(minutes) > 59) {     throw new DateTimeException(\"Zone offset minutes not in valid range: abs(value) \" + Math.abs(minutes) + \" is not in the range 0 to 59\");   }   if (Math.abs(seconds) > 59) {     throw new DateTimeException(\"Zone offset seconds not in valid range: abs(value) \" + Math.abs(seconds) + \" is not in the range 0 to 59\");   }   if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {     throw new DateTimeException(\"Zone offset not in valid range: -18:00 to +18:00\");   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node nameNode;   Node psNode;   String psName;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"name\");   nameNode=elementList.item(1);   psNode=nameNode.getPreviousSibling();   psName=psNode.getNodeName();   if (equals(\"#text\",psName)) {     psNode=psNode.getPreviousSibling();     psName=psNode.getNodeName();   }   assertEquals(\"nodeName\",\"employeeId\",psName); } "
"public static void discover(String filename) throws IOException {   int fileIdx=filename.lastIndexOf('/');   String baseDir=(fileIdx == -1) ? \"./\" : filename.substring(0,fileIdx + 1);   String content=getFileContent(filename);   StringBuffer buff=new StringBuffer();   discover(content,ADDED,TAG_ADDED,buff);   discover(content,REMOVED,TAG_REMOVED,buff);   discover(content,MODIFIED,TAG_MODIFIED,buff);   writeToFile(baseDir + \"stat\",buff.toString()); } "
"private String constructInputStream(){   StringBuilder sbuffer=new StringBuilder(2000);   String key=null;   String value=null;   Set set;   Iterator it;   StringBuilder tempBuffer=new StringBuilder();   boolean fileBackend=false;   String basedir=null;   String famuri=null;   try {     famuri=SystemProperties.get(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR);     famuri=famuri.replace('\\\\','/');     basedir=SystemProperties.get(SystemProperties.CONFIG_PATH);     basedir=basedir.replace('\\\\','/');     if (famuri.startsWith(\"/\")) {       byte[] btmp=famuri.getBytes();       famuri=new String(btmp,1,(btmp.length - 1));     }     if (basedir.endsWith(\"/\")) {       byte[] btmp=basedir.getBytes();       basedir=new String(btmp,0,(btmp.length - 1));     }     logAttributes=smsLogSchema.getAttributeDefaults();     key=LogConstants.BACKEND;     value=CollectionHelper.getMapAttr(logAttributes,key);     if ((value == null) || (value.length() == 0)) {       debug.warning(\"LogConfigReader: Backend string is null\");     }  else {       sbuffer.append(key).append(\"=\").append(value).append(LogConstants.CRLF);       fileBackend=value.equals(\"File\");     }   }  catch (  Exception e) {     debug.error(\"LogConfigReader: Could not read Backend \",e);   }   copyConfigOption(sbuffer,LogConstants.DB_DRIVER,logAttributes,\"DB driver\");   copyConfigOption(sbuffer,LogConstants.DB_PASSWORD,logAttributes,\"DB password\");   copyConfigOption(sbuffer,LogConstants.DB_USER,logAttributes,\"DB user\");   try {     key=LogConstants.ALL_FIELDS;     tempBuffer.append(\"time, Data, \");     set=(Set)logAttributes.get(key);     if (!useOldLogFormat) {       it=set.iterator();     }  else {       TreeSet orderedHeaders=new TreeSet(new LogHeaderComparator());       orderedHeaders.addAll(set);       it=orderedHeaders.descendingIterator();     }     String headerValue=(String)it.next();     if (headerValue.contains(Constants.COLON)) {       headerValue=headerValue.substring(headerValue.indexOf(Constants.COLON) + 1);     }     tempBuffer.append(headerValue);     while (it.hasNext()) {       headerValue=(String)it.next();       if (headerValue.contains(Constants.COLON)) {         headerValue=headerValue.substring(headerValue.indexOf(Constants.COLON) + 1);       }       tempBuffer.append(\", \").append(headerValue);     }     sbuffer.append(key).append(Constants.EQUALS).append(tempBuffer).append(LogConstants.CRLF);   }  catch (  Exception ex) {     debug.error(\"LogConfigReader: Could not read all field  \",ex);   }   try {     key=LogConstants.LOG_FIELDS;     set=(Set)logAttributes.get(key);     if ((set != null) && (!set.isEmpty())) {       it=set.iterator();       tempBuffer=new StringBuilder();       tempBuffer.append((String)it.next());       while (it.hasNext()) {         tempBuffer.append(\", \").append((String)it.next());       }       sbuffer.append(key).append(\"=\").append(tempBuffer).append(LogConstants.CRLF);     }   }  catch (  Exception e) {     debug.error(\"LogConfigReader: Could not read log-field \",e);   }   copyConfigOption(sbuffer,LogConstants.ENABLE_ROTATION,logAttributes,\"Enable Logfile rotation\");   copyConfigOption(sbuffer,LogConstants.MAX_FILE_SIZE,logAttributes,\"Max File Size\");   copyConfigOption(sbuffer,LogConstants.LOGFILE_PREFIX,logAttributes,\"Logfile prefix string\");   copyConfigOption(sbuffer,LogConstants.LOGFILE_SUFFIX,logAttributes,\"Logfile suffix string\");   copyConfigOption(sbuffer,LogConstants.LOGFILE_ROTATION,logAttributes,\"Logfile rotation interval\");   copyConfigOption(sbuffer,LogConstants.NUM_HISTORY_FILES,logAttributes,\"Num history files\");   copyConfigOption(sbuffer,LogConstants.ARCHIVER,logAttributes,\"Archiver class\");   copyConfigOption(sbuffer,LogConstants.FILE_HANDLER,logAttributes,\"File handler class\");   copyConfigOption(sbuffer,LogConstants.SECURE_FILE_HANDLER,logAttributes,\"Secure File handler class\");   copyConfigOption(sbuffer,LogConstants.DB_HANDLER,logAttributes,\"DB handler class\");   copyConfigOption(sbuffer,LogConstants.REMOTE_HANDLER,logAttributes,\"Remote handler class\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_HANDLER,logAttributes,\"Syslog handler class\");   copyConfigOption(sbuffer,LogConstants.ELF_FORMATTER,logAttributes,\"ELF Formatter class\");   copyConfigOption(sbuffer,LogConstants.SECURE_ELF_FORMATTER,logAttributes,\"Secure ELF Formatter class\");   copyConfigOption(sbuffer,LogConstants.DB_FORMATTER,logAttributes,\"DB Formatter class\");   copyConfigOption(sbuffer,LogConstants.REMOTE_FORMATTER,logAttributes,\"Remote Formatter class\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_FORMATTER,logAttributes,\"Syslog Formatter class\");   copyConfigOption(sbuffer,LogConstants.AUTHZ,logAttributes,\"Authz class\");   getLoggingDirectory(fileBackend,basedir,famuri,sbuffer);   copyConfigOption(sbuffer,LogConstants.SECURITY_STATUS,logAttributes,\"Security status\");   copyConfigOption(sbuffer,LogConstants.SECURITY_SIGNING_ALGORITHM,logAttributes,\"Secure log signing algorithm\");   copyConfigOption(sbuffer,LogConstants.SECURE_LOG_HELPER,logAttributes,\"Secure log helper class\");   try {     key=LogConstants.LOGGER_CERT_STORE;     value=CollectionHelper.getMapAttr(logAttributes,key);     if ((value == null) || (value.length() == 0)) {       debug.warning(\"LogConfigReader: secure logger \" + \"certificate store is null\");     }  else {       value=value.replace('\\\\','/');       if (value.contains(\"%BASE_DIR%\") || value.contains(\"%SERVER_URI%\")) {         value=value.replace(\"%BASE_DIR%\",basedir);         value=value.replace(\"%SERVER_URI%\",famuri);       }       sbuffer.append(key).append(\"=\").append(value).append(LogConstants.CRLF);     }   }  catch (  Exception e) {     debug.error(\"LogConfigReader: Could not read secure \" + \"logger certificate store \",e);   }   copyConfigOption(sbuffer,LogConstants.LOGVERIFY_PERIODINSECONDS,logAttributes,\"Log verify period\");   copyConfigOption(sbuffer,LogConstants.LOGSIGN_PERIODINSECONDS,logAttributes,\"Log sign period\");   copyConfigOption(sbuffer,LogConstants.FILE_READ_HANDLER,logAttributes,\"File read handler\");   copyConfigOption(sbuffer,LogConstants.DB_READ_HANDLER,logAttributes,\"DB read handler\");   copyConfigOption(sbuffer,LogConstants.MAX_RECORDS,logAttributes,\"Max records string\");   copyConfigOption(sbuffer,LogConstants.FILES_PER_KEYSTORE,logAttributes,\"Files per keystore\");   copyConfigOption(sbuffer,LogConstants.TOKEN_PROVIDER,logAttributes,\"Token provider class\");   copyConfigOption(sbuffer,LogConstants.SECURE_TIMESTAMP_GENERATOR,logAttributes,\"Secure timestamp generator class\");   copyConfigOption(sbuffer,LogConstants.VERIFIER_ACTION_CLASS,logAttributes,\"Verifier action class\");   copyConfigOption(sbuffer,LogConstants.FILTER_CLASS_NAME,logAttributes,\"Filter class\");   copyConfigOption(sbuffer,LogConstants.DEBUG_IMPL_CLASS,logAttributes,\"Debug impl class\");   copyConfigOption(sbuffer,LogConstants.BUFFER_SIZE,logAttributes,\"Buffer size\");   copyConfigOption(sbuffer,LogConstants.DB_MEM_MAX_RECS,logAttributes,\"Max DB mem buffer size\");   copyConfigOption(sbuffer,LogConstants.BUFFER_TIME,logAttributes,\"Buffer time\");   copyConfigOption(sbuffer,LogConstants.TIME_BUFFERING_STATUS,logAttributes,\"Time buffering status\");   copyConfigOption(sbuffer,LogConstants.ORA_DBDATA_FIELDTYPE,logAttributes,\"Oracle DB data type\");   copyConfigOption(sbuffer,LogConstants.MYSQL_DBDATA_FIELDTYPE,logAttributes,\"MySQL DB data type\");   copyConfigOption(sbuffer,LogConstants.ORA_DBDATETIME_FORMAT,logAttributes,\"Oracle DB date/time format\");   copyConfigOption(sbuffer,LogConstants.MYSQL_DBDATETIME_FORMAT,logAttributes,\"MySQL DB date/time format\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_PROTOCOL,logAttributes,\"Syslog protocol\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_HOST,logAttributes,\"Syslog host\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_PORT,logAttributes,\"Syslog port\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_FACILITY,logAttributes,\"Syslog facility\");   copyConfigOption(sbuffer,LogConstants.SYSLOG_CONNECTION_TIMEOUT,logAttributes,\"Syslog connection timeout\");   try {     key=LogConstants.LOG_STATUS_ATTR;     value=CollectionHelper.getMapAttr(logAttributes,key);     if ((value == null) || (value.length() == 0)) {       debug.warning(\"LogConfigReader:reading from SystemProperties\");       value=SystemProperties.get(LogConstants.LOG_STATUS);       if (debug.messageEnabled()) {         debug.message(\"####### SystemProperties logStatus is: \" + value);       }       if ((value == null) || (value.length() == 0)) {         value=\"ACTIVE\";       }     }     sbuffer.append(key).append(\"=\").append(value).append(LogConstants.CRLF);   }  catch (  Exception e) {     debug.error(\"LogConfigReader:Could not read Log Status attribute\");   }   copyConfigOption(sbuffer,LogConstants.LOGGING_LEVEL,logAttributes,\"Logging level\");   copyConfigOption(sbuffer,LogConstants.LOCALE,smsPlatformSchema.getAttributeDefaults(),\"Locale string\");   copyConfigOption(sbuffer,LogConstants.LOGGING_SERVICE_URL,smsNamingSchema.getAttributeDefaults(),\"Logging service URL\");   try {     key=LogConstants.LOG_RESOLVE_HOSTNAME_ATTR;     value=CollectionHelper.getMapAttr(logAttributes,key);     if ((value == null) || (value.length() == 0)) {       debug.warning(\"LogConfigReader: \" + \"Log Resolve Hostname attribute is null\");       value=SystemProperties.get(LogConstants.LOG_RESOLVE_HOSTNAME);       if (debug.messageEnabled()) {         debug.message(\"####### SystemProperties resolveHostName is: \" + value);       }       if ((value == null) || (value.length() == 0)) {         value=\"false\";       }     }     sbuffer.append(key).append(\"=\").append(value).append(LogConstants.CRLF);   }  catch (  Exception e) {     debug.error(\"LogConfigReader: could not get from DS\",e);   }   return sbuffer.toString(); } "
"public final void testEqualsObject01(){   CertPath cp1=new MyCertPath(testEncoding);   assertTrue(cp1.equals(cp1)); } "
"@Deprecated public static String openUrl(String url,String method,Bundle params) throws MalformedURLException, IOException {   String strBoundary=\"3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f\";   String endLine=\"\\r\\n\";   OutputStream os;   if (method.equals(\"GET\")) {     url=url + \"?\" + encodeUrl(params);   }   Utility.logd(\"Facebook-Util\",method + \" URL: \" + url);   HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();   conn.setRequestProperty(\"User-Agent\",System.getProperties().getProperty(\"http.agent\") + \" FacebookAndroidSDK\");   if (!method.equals(\"GET\")) {     Bundle dataparams=new Bundle();     for (    String key : params.keySet()) {       Object parameter=params.get(key);       if (parameter instanceof byte[]) {         dataparams.putByteArray(key,(byte[])parameter);       }     }     if (!params.containsKey(\"method\")) {       params.putString(\"method\",method);     }     if (params.containsKey(\"access_token\")) {       String decoded_token=URLDecoder.decode(params.getString(\"access_token\"));       params.putString(\"access_token\",decoded_token);     }     conn.setRequestMethod(\"POST\");     conn.setRequestProperty(\"Content-Type\",\"multipart/form-data;boundary=\" + strBoundary);     conn.setDoOutput(true);     conn.setDoInput(true);     conn.setRequestProperty(\"Connection\",\"Keep-Alive\");     conn.connect();     os=new BufferedOutputStream(conn.getOutputStream());     try {       os.write((\"--\" + strBoundary + endLine).getBytes());       os.write((encodePostBody(params,strBoundary)).getBytes());       os.write((endLine + \"--\" + strBoundary+ endLine).getBytes());       if (!dataparams.isEmpty()) {         for (        String key : dataparams.keySet()) {           os.write((\"Content-Disposition: form-data; filename=\\\"\" + key + \"\\\"\"+ endLine).getBytes());           os.write((\"Content-Type: content/unknown\" + endLine + endLine).getBytes());           os.write(dataparams.getByteArray(key));           os.write((endLine + \"--\" + strBoundary+ endLine).getBytes());         }       }       os.flush();     }   finally {       os.close();     }   }   String response=\"\";   try {     response=read(conn.getInputStream());   }  catch (  FileNotFoundException e) {     response=read(conn.getErrorStream());   }   return response; } "
"public synchronized void init(JsonValue config,String... reservedFieldNames) throws HeapException {   this.config=config;   this.properties.bind(config.get(\"properties\").defaultTo(emptyMap()).as(resolvedLocation()).expect(Map.class).as(bindings(getProperties())));   JsonValue heap=config.get(\"heap\").defaultTo(emptyList());   if (heap.isMap()) {     heap=heap.get(\"objects\").required();     logger.warn(\"The configuration field heap/objects has been deprecated. Heap objects \" + \"should now be listed directly in the top level \\\"heap\\\" field, \" + \"e.g. { \\\"heap\\\" : [ objects... ] }.\");   }   for (  JsonValue object : heap.expect(List.class)) {     addDeclaration(object);   }   for (  JsonValue value : defaults) {     String name=value.get(\"name\").required().asString();     if (heaplets.get(name) == null) {       addDeclaration(value);     }   }   int sz=reservedFieldNames.length;   String[] allReservedFieldNames=Arrays.copyOf(reservedFieldNames,sz + 1);   allReservedFieldNames[sz]=\"heap\";   topLevelHandlerDecorator=new GlobalDecorator(null,config,allReservedFieldNames);   if (config.isDefined(\"globalDecorators\")) {     Decorator parentGlobalDecorator=parent != null ? parent.get(GLOBAL_DECORATOR_HEAP_KEY,Decorator.class) : null;     put(GLOBAL_DECORATOR_HEAP_KEY,new GlobalDecorator(parentGlobalDecorator,config.get(\"globalDecorators\").expect(Map.class)));   }   for (  String name : new ArrayList<>(heaplets.keySet())) {     get(name,Object.class);   } } "
"public void addRequest(Request request){   requestSet.add(request); } "
"public DirectColorModel(int bits,int rmask,int gmask,int bmask,int amask){   super(ColorSpace.getInstance(ColorSpace.CS_sRGB),bits,rmask,gmask,bmask,amask,false,amask == 0 ? Transparency.OPAQUE : Transparency.TRANSLUCENT,ColorModel.getDefaultTransferType(bits));   setFields(); } "
"public EventException(){   cause=null; } "
"@Override public void write(int c) throws IOException {   ensureOpen();   if (bufferSize == 0) {     initOut();     out.write(c);   }  else {     if (nextChar >= bufferSize)     if (autoFlush)     flushBuffer();  else     bufferOverflow();     cb[nextChar++]=(char)c;   } } "
"public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode){   super(reason,sqlState,vendorCode); } "
"public final boolean peek(){   return m_values[m_index]; } "
"public final void writeBoolean(boolean val) throws IOException {   out.write(val ? 1 : 0);   written++; } "
"private TextRenderInfo(TextRenderInfo parent,PdfString string,float horizontalOffset){   this.string=string;   this.textToUserSpaceTransformMatrix=new Matrix(horizontalOffset,0).multiply(parent.textToUserSpaceTransformMatrix);   this.gs=parent.gs;   this.canvasTagHierarchy=parent.canvasTagHierarchy;   this.fontMatrix=gs.getFont().getFontMatrix(); } "
"public void testNegPos(){   byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   byte bBytes[]={0};   int aSign=-1;   int bSign=0;   byte rBytes[]={0};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.and(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",0,result.signum()); } "
"public void testCase6(){   byte aBytes[]={1,2,3,4,5,6,7};   byte bBytes[]={3,4,5,6,7,8,9};   byte rBytes[]={2,2,2,2,2,2,2};   int aSign=-1;   int bSign=1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.add(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"public Set createPeopleContainers(Set peopleContainerNames) throws AMException, SSOException {   Iterator iter=peopleContainerNames.iterator();   Set peopleContainers=new HashSet();   while (iter.hasNext()) {     String peopleContainerDN=AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER) + \"=\" + ((String)iter.next())+ \",\"+ super.entryDN;     AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDN);     peopleContainerImpl.create();     peopleContainers.add(peopleContainerImpl);   }   return peopleContainers; } "
"public ValidationException(String msg){   super(msg); } "
"@DataProvider(name=\"byteSequenceProvider\") public Object[][] byteSequenceProvider() throws Exception {   byte[] testBytes=new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08};   return new Object[][]{{ByteString.empty(),new byte[0]},{ByteString.valueOfBase64(\"AAA=\"),new byte[]{0x00,0x00}},{ByteString.valueOfBase64(\"AAAA\"),new byte[]{0x00,0x00,0x00}},{ByteString.valueOfBase64(\"AAAAAA==\"),new byte[]{0x00,0x00,0x00,0x00}},{ByteString.valueOfInt(1),new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01}},{ByteString.valueOfInt(Integer.MAX_VALUE),new byte[]{(byte)0x7F,(byte)0xFF,(byte)0xFF,(byte)0xFF}},{ByteString.valueOfInt(Integer.MIN_VALUE),new byte[]{(byte)0x80,(byte)0x00,(byte)0x00,(byte)0x00}},{ByteString.valueOfLong(Long.MAX_VALUE),new byte[]{(byte)0x7F,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF}},{ByteString.valueOfLong(Long.MIN_VALUE),new byte[]{(byte)0x80,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00}},{ByteString.valueOfUtf8(\"cn=testvalue\"),\"cn=testvalue\".getBytes(\"UTF-8\")},{ByteString.valueOfObject(\"cn=testvalue\"),\"cn=testvalue\".getBytes(\"UTF-8\")},{ByteString.valueOfUtf8(\"cn=testvalue\".toCharArray()),\"cn=testvalue\".getBytes(\"UTF-8\")},{ByteString.valueOfObject(\"cn=testvalue\".toCharArray()),\"cn=testvalue\".getBytes(\"UTF-8\")},{ByteString.valueOfBytes(new byte[0]),new byte[0]},{ByteString.valueOfBytes(testBytes),testBytes},{ByteString.valueOfObject(testBytes),testBytes},{ByteString.valueOfObject(ByteString.valueOfUtf8(\"cn=testvalue\")),\"cn=testvalue\".getBytes(\"UTF-8\")},{ByteString.wrap(new byte[0]),new byte[0]},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}),new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},0,8),new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},1,8),new byte[]{(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},2,8),new byte[]{(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08},3,0),new byte[0]}}; } "
"public AlreadyBoundException(){ } "
"public static JTextArea createTextAreaWithBorder(LocalizableMessage text,int rows,int cols){   JTextArea ta=createTextArea(text,rows,cols);   if (ColorAndFontConstants.textAreaBorder != null) {     setBorder(ta,ColorAndFontConstants.textAreaBorder);   }   return ta; } "
"public void put(byte[] buffer){   put(buffer,0,buffer.length); } "
"private void addFonts(char[] chars,Map<? extends Attribute,?> attributes,int start,int limit){   FontResolver resolver=FontResolver.getInstance();   CodePointIterator iter=CodePointIterator.create(chars,start,limit);   for (int runStart=iter.charIndex(); runStart < limit; runStart=iter.charIndex()) {     int fontIndex=resolver.nextFontRunIndex(iter);     addFont(resolver.getFont(fontIndex,attributes),runStart);   } } "
"public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws Exception {   for (  String validValue : getValidValues()) {     TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue,getDefaultProviderName());     assertTrue(\"Not TrustManagerFactory object\",trustMF instanceof TrustManagerFactory);     assertEquals(\"Invalid algorithm\",trustMF.getAlgorithm(),validValue);     assertEquals(\"Invalid provider\",trustMF.getProvider(),getDefaultProvider());   } } "
"public boolean validateFileFormat(Path location,Configuration conf){   FileSystem fileSystem;   try {     fileSystem=FileSystem.get(location.toUri(),conf);     FileStatus[] items=fileSystem.listStatus(location);     for (    FileStatus item : items) {       if (item.getPath().getName().startsWith(\"_\")) {         continue;       }  else       if (item.getPath().getName().contains(\".avro\")) {         logger.debug(item.getPath().getName());         logger.info(\"Created File format is AVRO !\");         return true;       }  else       logger.debug(item.getPath().getName());       logger.error(\"Created File Format is not correct\");     }   }  catch (  IOException e) {     logger.trace(e.getMessage());   }   return false; } "
"public com.sun.identity.saml2.jaxb.assertion.IssuerElement createIssuerElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.IssuerElementImpl(); } "
"public String group(){   return group(0); } "
"public ModifyMsg(CSN csn,DN dn,List<Modification> mods,String entryUUID){   super(new ModifyContext(csn,entryUUID),dn);   this.encodedMods=encodeMods(mods); } "
"public void printStackTrace(PrintStream s){   super.printStackTrace(s); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_noderemovechildoldchildnonexistent.class,args); } "
"public MissingFormatWidthException(String s){   if (s == null)   throw new NullPointerException();   this.s=s; } "
"public static void deregisterBackendInitializationListener(BackendInitializationListener listener){   directoryServer.backendInitializationListeners.remove(listener); } "
"public DeleteOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,ByteString rawEntryDN){   super(clientConnection,operationID,messageID,requestControls);   this.rawEntryDN=rawEntryDN; } "
"public Class<?> loadClass(String name) throws ClassNotFoundException {   int dimensions=0;   if (name.startsWith(\"[\") && name.endsWith(\";\")) {     int i=0;     char[] chars=name.toCharArray();     for (; i < chars.length; ++i) {       if (chars[i] == '[') {         ++dimensions;       }  else {         break;       }     }     name=name.substring(i + 1);     name=name.substring(0,name.length() - 1);   }   Class<?> cls;   try {     cls=Class.forName(name);   }  catch (  ClassNotFoundException e) {     cls=classLoader.loadClass(name);   }   if (dimensions == 0) {     return cls;   }  else {     int[] d=new int[dimensions];     return Array.newInstance(cls,d).getClass();   } } "
"public static int convertDpToPixel(final float dp,final Context context){   Resources resources=context.getResources();   DisplayMetrics metrics=resources.getDisplayMetrics();   return (int)(dp * (metrics.densityDpi / 160f)); } "
"public static byte[] copyOf(byte[] original,int newLength){   byte[] copy=new byte[newLength];   System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));   return copy; } "
"public static boolean equals(int[] array1,int[] array2){   if (array1 == array2) {     return true;   }   if (array1 == null || array2 == null || array1.length != array2.length) {     return false;   }   for (int i=0; i < array1.length; i++) {     if (array1[i] != array2[i]) {       return false;     }   }   return true; } "
"@Override public int delete(Uri uri,String selection,String[] selectionArgs){   Log.d(TAG,\"FmRadioContentProvider.delete\");   int rows=0;   mSqlDb=mDbHelper.getWritableDatabase(); switch (URI_MATCHER.match(uri)) { case STATION_FREQ:     rows=mSqlDb.delete(TABLE_NAME,selection,selectionArgs);   getContext().getContentResolver().notifyChange(uri,null); break; case STATION_FREQ_ID: String stationID=uri.getPathSegments().get(1); rows=mSqlDb.delete(TABLE_NAME,FmRadioStation.Station._ID + \"=\" + stationID+ (TextUtils.isEmpty(selection) ? \"\" : \" AND (\" + selection + \")\"),selectionArgs); getContext().getContentResolver().notifyChange(uri,null); break; default : Log.e(TAG,\"Error: Unkown URI to delete: \" + uri); break; } return rows; } "
"public Response createResponse(String xml) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.RESPONSE,xml);   if (obj == null) {     return new ResponseImpl(xml);   }  else {     return (Response)obj;   } } "
"public Component componentForPoint(Component source,Point sourcePoint){   int screenX, screenY;   Point p=sourcePoint;   int i, c, j, d;   Component mc;   Rectangle r2;   int cWidth, cHeight;   MenuElement menuElement;   MenuElement subElements[];   Vector<MenuElement> tmp;   int selectionSize;   SwingUtilities.convertPointToScreen(p,source);   screenX=p.x;   screenY=p.y;   tmp=(Vector<MenuElement>)selection.clone();   selectionSize=tmp.size();   for (i=selectionSize - 1; i >= 0; i--) {     menuElement=(MenuElement)tmp.elementAt(i);     subElements=menuElement.getSubElements();     for (j=0, d=subElements.length; j < d; j++) {       if (subElements[j] == null)       continue;       mc=subElements[j].getComponent();       if (!mc.isShowing())       continue;       if (mc instanceof JComponent) {         cWidth=mc.getWidth();         cHeight=mc.getHeight();       }  else {         r2=mc.getBounds();         cWidth=r2.width;         cHeight=r2.height;       }       p.x=screenX;       p.y=screenY;       SwingUtilities.convertPointFromScreen(p,mc);       if (p.x >= 0 && p.x < cWidth && p.y >= 0 && p.y < cHeight) {         return mc;       }     }   }   return null; } "
"public boolean addGpsTags(double latitude,double longitude){   ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));   ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));   ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);   ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);   if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {     return false;   }   setTag(latTag);   setTag(longTag);   setTag(latRefTag);   setTag(longRefTag);   return true; } "
"public void testGenerateCertificate() throws Exception {   CertificateFactory[] certFs=initCertFs();   assertNotNull(\"CertificateFactory objects were not created\",certFs);   Certificate[] certs=new Certificate[3];   for (int i=0; i < certFs.length; i++) {     certs[i]=certFs[i].generateCertificate(new ByteArrayInputStream(TestUtils.getEncodedX509Certificate()));   }   assertEquals(certs[0],certs[1]);   assertEquals(certs[0],certs[2]); } "
"public void preSingleSignOnProcess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest,Response ssoResponse,String profile) throws SAML2Exception {   return; } "
"public void runTest() throws Throwable {   Document doc;   NodeList acronymList;   Node testNode;   NamedNodeMap attributes;   Attr titleAttr;   String value;   Text textNode;   NodeList childNodes;   Node retval;   doc=(Document)load(\"hc_staff\",true);   acronymList=doc.getElementsByTagName(\"acronym\");   testNode=acronymList.item(3);   attributes=testNode.getAttributes();   titleAttr=(Attr)attributes.getNamedItem(\"title\");   childNodes=titleAttr.getChildNodes();   textNode=doc.createTextNode(\"terday\");   retval=titleAttr.appendChild(textNode);   assertSize(\"childNodesSize\",2,childNodes);   textNode=(Text)childNodes.item(0);   value=textNode.getNodeValue();   assertEquals(\"child1IsYes\",\"Yes\",value);   textNode=(Text)childNodes.item(1);   value=textNode.getNodeValue();   assertEquals(\"child2IsTerday\",\"terday\",value);   textNode=(Text)childNodes.item(2);   assertNull(\"thirdItemIsNull\",textNode); } "
"public static FileBasedArgument rootDNPwdFileArgument() throws ArgumentException {   return FileBasedArgument.builder(\"rootUserPasswordFile\").shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_ARGUMENT_DESCRIPTION_ROOTPWFILE.get()).valuePlaceholder(INFO_ROOT_USER_PWD_FILE_PLACEHOLDER.get()).buildArgument(); } "
"boolean inSubroutine(final long id){   if ((status & Label.VISITED) != 0) {     return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;   }   return false; } "
"public static String realmNameToAMSDKName(String realmName){   String dn=orgNameToDN(realmName);   String dnlc=dn.toLowerCase();   if (debug.messageEnabled()) {     debug.message(\"DNMapper.realmNameToAMSDKName realmName =\" + realmName);     debug.message(\"DNMapper.realmNameToAMSDKName orgDN =\" + dn);   }   if ((dnlc.equals(SMSEntry.baseDN)) && (!dnlc.equals(SMSEntry.amsdkbaseDN))) {     return (SMSEntry.amsdkbaseDN);   }   if (dnlc.equals(SMSEntry.baseDN) || dnlc.startsWith(SMSEntry.SUN_INTERNAL_REALM_PREFIX)) {     return (SMSEntry.baseDN);   }   StringBuilder buf=new StringBuilder(dn.length());   String orgAttr=OrgConfigViaAMSDK.getNamingAttrForOrg();   if (orgAttr == null || orgAttr.equalsIgnoreCase(SMSEntry.ORGANIZATION_RDN)) {     String answer=replaceString(dn,\",ou=services,\",\",\");     if (debug.messageEnabled()) {       debug.message(\"DNMapper.realmNameToAMSDKName sdkName =\" + answer);     }     return (answer);   }   int index=dnlc.indexOf(serviceDN);   if (index == -1) {     index=dnlc.indexOf(SMSEntry.baseDN);   }   String answer=(index == -1) ? dn : dn.substring(0,index - 1);   DN answerDN=DN.valueOf(answer);   for (  RDN rdn : answerDN) {     buf.append(orgAttr).append(SMSEntry.EQUALS).append(rdnValue(rdn));     buf.append(',');   }   buf.append(SMSEntry.baseDN);   if (debug.messageEnabled()) {     debug.message(\"DNMapper.realmNameToAMSDKName sdkName =\" + buf.toString());   }   return (buf.toString()); } "
"public JKException(){   super(); } "
"public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){   System.out.println(\"shootmeA: got an ACK! \");   System.out.println(\"Dialog State = \" + dialog.getState());   new Timer().schedule(new MyTimerTask(this,true),4000); } "
"public ReplicationCliReturnCode execute(){   boolean applyTimeout=uData.getMaximumDuration() > 0;   long startTime=TimeThread.getTime();   long purgeMaxTime=getTimeoutInSeconds() * 1000L;   long endMaxTime=startTime + purgeMaxTime;   app.print(formatter.getFormattedProgress(INFO_REPLICATION_PURGE_HISTORICAL_LOCAL_ENVIRONMENT.get()));   PointAdder pointAdder=new PointAdder(app);   pointAdder.start();   try {     EmbeddedDirectoryServer server=manageEmbeddedDirectoryServerForRestrictedOps(configParams().configurationFile(configFile).disableConnectionHandlers(true));     server.start();   }  catch (  OpenDsException ode) {     pointAdder.stop();     app.println(ode.getMessageObject());     logger.error(LocalizableMessage.raw(\"Error starting server with file \" + configFile + \": \"+ ode,ode));     return ReplicationCliReturnCode.ERROR_LOCAL_PURGE_HISTORICAL_SERVER_START;   }   pointAdder.stop();   app.print(formatter.getFormattedDone());   app.println();   app.println();   app.print(formatter.getFormattedProgress(INFO_REPLICATION_PURGE_HISTORICAL_LOCAL_STARTING.get()));   app.println();   if (applyTimeout && timeoutOccurred(endMaxTime)) {     return handleTimeout();   }   try {     for (    DN baseDN : uData.getBaseDNs()) {       LDAPReplicationDomain domain=LDAPReplicationDomain.retrievesReplicationDomain(baseDN);       domain.purgeConflictsHistorical(null,startTime + purgeMaxTime);     }   }  catch (  DirectoryException de) {     if (de.getResultCode() == ResultCode.ADMIN_LIMIT_EXCEEDED) {       return handleTimeout();     }  else {       return handleGenericExecuting(de);     }   }   return ReplicationCliReturnCode.SUCCESSFUL; } "
"public com.sun.identity.saml2.jaxb.assertion.AuthenticatingAuthorityElement createAuthenticatingAuthorityElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.assertion.impl.AuthenticatingAuthorityElementImpl(); } "
"public ArtifactResponse createArtifactResponse(String xml) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESPONSE,xml);   if (obj == null) {     return new ArtifactResponseImpl(xml);   }  else {     return (ArtifactResponse)obj;   } } "
"public void read_design(ObjectInputStream p_design) throws ClassNotFoundException, IOException {   r_board=(RoutingBoard)p_design.readObject();   r_board.set_transient_item(this);   itera_settings=(IteraSettings)p_design.readObject();   itera_settings.set_transient_fields(r_board,actlog);   coordinate_transform=(PlaCoordTransform)p_design.readObject();   gdi_context=(GdiContext)p_design.readObject();   gdi_context.set_transient_field(stat);   screen_messages.show_layer_name(itera_settings.get_layer()); } "
"public static MetricsConfiguration create(Map<String,Object> options) throws ConfigurationException {   MetricsConfiguration conf=new MetricsConfiguration();   Yaml yaml=new Yaml();   String str=yaml.dumpAsMap(options);   conf.values=yaml.loadAs(str,MetricsConfiguration.Values.class);   return conf; } "
"private String dive(int depth,int iteration){   String str0;   String str1;   String str2;   String str3;   String str4;   String str5;   String str6;   String str7;   String funStr;   funStr=\"\"; switch (iteration % 8) { case 0:     funStr=str0=makeString(iteration);   break; case 1: funStr=str1=makeString(iteration); break; case 2: funStr=str2=makeString(iteration); break; case 3: funStr=str3=makeString(iteration); break; case 4: funStr=str4=makeString(iteration); break; case 5: funStr=str5=makeString(iteration); break; case 6: funStr=str6=makeString(iteration); break; case 7: funStr=str7=makeString(iteration); break; } strong[depth]=funStr; weak[depth]=new WeakReference(funStr); if (depth + 1 < MAX_DEPTH) dive(depth + 1,iteration + 1);  else Main.sleep(100); return funStr; } "
"@Override public int hashCode(){   int code=0;   if (propertyName != null) {     code+=propertyName.hashCode();   }   if (propertyValues != null) {     code+=propertyValues.hashCode();   }   if (pResponseProviderName != null) {     code+=pResponseProviderName.hashCode();   }   return code; } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionElement createMobileNetworkEndToEndEncryptionElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionElementImpl(); } "
"protected DecodeException newUnexpectedResponseException(final int messageID,final Response response){   return DecodeException.fatalError(LocalizableMessage.raw(\"Unexpected LDAP response: id=%d, message=%s\",messageID,response)); } "
"protected EventListener remove(EventListener oldl){   if (oldl == a)   return b;   if (oldl == b)   return a;   EventListener a2=removeInternal(a,oldl);   EventListener b2=removeInternal(b,oldl);   if (a2 == a && b2 == b) {     return this;   }   return addInternal(a2,b2); } "
"private static boolean isPropertyElementName(int term){   if (term == RDFTERM_DESCRIPTION || isOldTerm(term)) {     return false;   }  else {     return (!isCoreSyntaxTerm(term));   } } "
"private static String URLencodedCompositeAdvice(String queryParams){   StringBuilder sb=new StringBuilder(400);   StringTokenizer st=new StringTokenizer(queryParams,\"&\");   String adviceString=null;   while (st.hasMoreTokens()) {     String str=st.nextToken();     if (str.indexOf(COMPOSITE_ADVICE) != -1) {       adviceString=str;     }  else {       sb.append(str).append(\"&\");     }   }   int index=adviceString.indexOf(\"=\");   String value=adviceString.substring(index + 1);   sb.append(COMPOSITE_ADVICE).append(\"=\");   sb.append(URLEncDec.encode(value));   return sb.toString(); } "
"public boolean useSASLExternal(){   return saslExternal; } "
"public static boolean isLECPProfile(HttpServletRequest request){   java.util.Enumeration headerNames=request.getHeaderNames();   while (headerNames.hasMoreElements()) {     String hn=headerNames.nextElement().toString();     String hv=request.getHeader(hn);     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"header \" + hn + \" val \"+ hv);     }   }   String lecpHeaderValue=(String)request.getHeader(IFSConstants.LECP_HEADER_NAME);   if (FSUtils.debug.messageEnabled()) {     FSUtils.debug.message(\" value of lecp in header \" + lecpHeaderValue);   }   if (lecpHeaderValue == null) {     lecpHeaderValue=(String)request.getHeader((IFSConstants.LECP_HEADER_NAME).toLowerCase());   }   if (lecpHeaderValue != null) {     return true;   }  else {     return false;   } } "
"public Validator createValidator() throws JAXBException {   return new ValidatorImpl(this); } "
"protected Expression variable(int opPos) throws TransformerException {   Variable var=new Variable();   opPos=getFirstChildPos(opPos);   int nsPos=getOp(opPos);   java.lang.String namespace=(OpCodes.EMPTY == nsPos) ? null : (java.lang.String)getTokenQueue().elementAt(nsPos);   java.lang.String localname=(java.lang.String)getTokenQueue().elementAt(getOp(opPos + 1));   QName qname=new QName(namespace,localname);   var.setQName(qname);   return var; } "
"public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"public short nextShort() throws DataFormatException {   try {     return bytes.readShort();   }  catch (  IndexOutOfBoundsException e) {     throw new DataFormatException(e.getMessage());   } } "
"RuleBasedCollationKey(String source,String key){   super(source);   this.key=key; } "
"protected static void clearCache(){   attributeMappings=new CaseInsensitiveHashMap();   reverseAttributeMappings=new CaseInsensitiveHashMap();   amsdkdn2realmname=new CaseInsensitiveHashMap();   amsdkConfiguredRealms=new CaseInsensitiveHashMap(); } "
"public void testConnect_Unresolved() throws IOException {   assertFalse(this.channel1.isConnected());   InetSocketAddress unresolved=new InetSocketAddress(\"unresolved address\",1080);   try {     this.channel1.connect(unresolved);     fail(\"Should throw an UnresolvedAddressException here.\");   }  catch (  UnresolvedAddressException e) {   } } "
"public boolean isStatusBarTintEnabled(){   return mStatusBarTintEnabled; } "
"public void parse(InputSource source) throws TransformerException {   try {     DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();     builderFactory.setNamespaceAware(true);     builderFactory.setValidating(true);     DocumentBuilder parser=builderFactory.newDocumentBuilder();     parser.setErrorHandler(new org.apache.xml.utils.DefaultErrorHandler());     setDocument(parser.parse(source));   }  catch (  org.xml.sax.SAXException se) {     throw new TransformerException(se);   } catch (  ParserConfigurationException pce) {     throw new TransformerException(pce);   } catch (  IOException ioe) {     throw new TransformerException(ioe);   } } "
"public static int[] transformIntArray(Integer[] source){   int[] destin=new int[source.length];   for (int i=0; i < source.length; i++) {     destin[i]=source[i];   }   return destin; } "
"protected void runSQL(String sql){   try {     DataSource dataSource=fooPersistence.getDataSource();     DB db=DBManagerUtil.getDB();     sql=db.buildSQL(sql);     sql=PortalUtil.transformSQL(sql);     SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);     sqlUpdate.update();   }  catch (  Exception e) {     throw new SystemException(e);   } } "
"public static int findWordStart(CharSequence line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace,boolean eatOnlyAfterWord){   char ch=line.charAt(pos);   if (noWordSep == null)   noWordSep=\"\";   int type=getCharType(ch,noWordSep);   for (int i=pos; i >= 0; i--) {     char lastCh=ch;     ch=line.charAt(i); switch (type) { case WHITESPACE:       if (Character.isWhitespace(ch))       break;  else       if (!eatOnlyAfterWord) {         return i + 1;       }  else       if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {         type=WORD_CHAR;       }  else       type=SYMBOL;     break; case WORD_CHAR:   if (camelCasedWords && Character.isUpperCase(ch) && !Character.isUpperCase(lastCh)&& Character.isLetterOrDigit(lastCh)) {     return i;   }  else   if (camelCasedWords && !Character.isUpperCase(ch) && Character.isUpperCase(lastCh)) {     return i + 1;   }  else   if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {     break;   }  else   if (Character.isWhitespace(ch) && eatWhitespace && !eatOnlyAfterWord) {     type=WHITESPACE;     break;   }  else   return i + 1; case SYMBOL: if (!joinNonWordChars && pos != i) return i + 1; if (Character.isWhitespace(ch)) { if (eatWhitespace && !eatOnlyAfterWord) {   type=WHITESPACE;   break; }  else return i + 1; }  else if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) { return i + 1; }  else { break; } } } return 0; } "
"@Override public void memberDisappeared(Member member){   table.dataModel.getValueAt(-1,-1); } "
"public boolean isProtected(){   return Modifier.isProtected(flags); } "
"@Override public void onPause(){   if (mAdView != null) {     mAdView.pause();   }   super.onPause(); } "
"public BaseViewHolder addOnLongClickListener(int viewId){   itemChildLongClickViewIds.add(viewId);   return this; } "
"public List<Integer> findCheapestPath(int begin,int end,float[][] matrix){   init(matrix);   floyd(matrix);   result.add(begin);   findPath(begin,end);   result.add(end);   return result; } "
"public QuickAdapter(Context context,int layoutResId,List<T> data){   super(context,layoutResId,data); } "
"public void tearDown() throws java.lang.Exception {   int tries=0;   for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {     try {       riSipStack.deleteSipProvider(riSipProvider);     }  catch (    ObjectInUseException ex) {       sleep(RETRY_OBJECT_DELETES_AFTER);       continue;     }     break;   }   if (tries >= RETRY_OBJECT_DELETES)   throw new TckInternalError(\"Failed to delete riSipProvider!\");   for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {     try {       riSipStack.deleteListeningPoint(riListeningPoint);     }  catch (    ObjectInUseException ex) {       sleep(RETRY_OBJECT_DELETES_AFTER);       continue;     }     break;   }   if (tries >= RETRY_OBJECT_DELETES)   throw new TckInternalError(\"Failed to delete riListeningPoint!\");   riSipProvider=null;   riListeningPoint=null;   for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {     try {       tiSipStack.deleteSipProvider(tiSipProvider);     }  catch (    ObjectInUseException ex) {       sleep(RETRY_OBJECT_DELETES_AFTER);       continue;     }     break;   }   if (tries >= RETRY_OBJECT_DELETES)   throw new TiUnexpectedError(\"Failed to delete tiSipProvider!\");   for (tries=0; tries < RETRY_OBJECT_DELETES; tries++) {     try {       tiSipStack.deleteListeningPoint(tiListeningPoint);     }  catch (    ObjectInUseException ex) {       sleep(RETRY_OBJECT_DELETES_AFTER);       continue;     }     break;   }   if (tries >= RETRY_OBJECT_DELETES)   throw new TiUnexpectedError(\"Failed to delete tiListeningPoint!\");   riSipStack.stop();   tiSipStack.stop();   tiSipProvider=null;   tiListeningPoint=null;   sleep(STACKS_SHUT_DOWN_FOR); } "
"public void paintDirtyRegions(){ synchronized (this) {     Map<Component,Rectangle> tmp=tmpDirtyComponents;     tmpDirtyComponents=dirtyComponents;     dirtyComponents=tmp;     dirtyComponents.clear();   }   paintDirtyRegions(tmpDirtyComponents); } "
"private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {   BigInteger result=BigInteger.ZERO;   for (int i=0; i < count; i++) {     result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));   }   String resultString=result.toString();   if (resultString.charAt(0) != '1') {     throw FormatException.getFormatInstance();   }   return resultString.substring(1); } "
"protected void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {   String fmsg=XSLMessages.createXPATHMessage(msg,args); {     throw new XPathException(fmsg,this);   } } "
"public void runTest() throws Throwable {   Document doc;   DOMImplementation docImpl;   boolean xmlstate;   boolean htmlstate;   doc=(Document)load(\"hc_staff\",false);   docImpl=doc.getImplementation();   xmlstate=docImpl.hasFeature(\"XML\",\"1.0\");   htmlstate=docImpl.hasFeature(\"HTML\",\"1.0\");   if ((\"text/html\".equals(getContentType()))) {     assertTrue(\"supports_HTML_1.0\",htmlstate);   }  else {     assertTrue(\"supports_XML_1.0\",xmlstate);   } } "
"public void startEditingAtPath(JTree a,TreePath b){   for (int i=0; i < uis.size(); i++) {     ((TreeUI)(uis.elementAt(i))).startEditingAtPath(a,b);   } } "
"public LDAPRequestHandler(LDAPConnectionHandler connectionHandler,int requestHandlerID) throws InitializationException {   super(\"LDAP Request Handler \" + requestHandlerID + \" for connection handler \"+ connectionHandler);   handlerName=getName();   try {     selector=Selector.open();   }  catch (  Exception e) {     logger.traceException(e);     LocalizableMessage message=ERR_LDAP_REQHANDLER_OPEN_SELECTOR_FAILED.get(handlerName,e);     throw new InitializationException(message,e);   }   try {     selector.selectNow();   }  catch (  IOException ioe) {     StackTraceElement[] stackElements=ioe.getStackTrace();     if (stackElements != null && stackElements.length > 0) {       StackTraceElement ste=stackElements[0];       if (ste.getClassName().equals(\"sun.nio.ch.DevPollArrayWrapper\") && ste.getMethodName().contains(\"poll\") && ioe.getMessage().equalsIgnoreCase(\"Invalid argument\")) {         LocalizableMessage message=ERR_LDAP_REQHANDLER_DETECTED_JVM_ISSUE_CR6322825.get(ioe);         throw new InitializationException(message,ioe);       }     }   } } "
"public int hashCode(){   return name.hashCode(); } "
"public void unlockRead(long stamp){   long s, m;   WNode h;   for (; ; ) {     if (((s=state) & SBITS) != (stamp & SBITS) || (stamp & ABITS) == 0L || (m=s & ABITS) == 0L || m == WBIT)     throw new IllegalMonitorStateException();     if (m < RFULL) {       if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {         if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);         break;       }     }  else     if (tryDecReaderOverflow(s) != 0L)     break;   } } "
"public PluginResult.PostOperation invokePostOperationSearchPlugins(PostOperationSearchOperation searchOperation){   PluginResult.PostOperation result=null;   PluginResult.PostOperation finalResult=null;   ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(searchOperation);   for (  DirectoryServerPlugin p : postOperationSearchPlugins) {     if (isInternalOperation(searchOperation,p) || isSkipped(skippedPlugins,p)) {       continue;     }     try {       result=p.doPostOperation(searchOperation);     }  catch (    Exception e) {       logException(searchOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);     }     if (result == null) {       logNullResult(searchOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);     }  else     if (!result.continueProcessing()) {       finalResult=result;     }   }   if (result == null) {     finalResult=PluginResult.PostOperation.continueOperationProcessing();   }  else   if (finalResult == null) {     finalResult=result;   }   return finalResult; } "
"public BindResult bind(BindRequest request) throws LdapException {   addTransactionIdControl(request);   return connection.bind(request); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodevalue08.class,args); } "
"@SuppressWarnings(\"fallthrough\") public int read(char cbuf[],int off,int len) throws IOException { synchronized (lock) {     int n=super.read(cbuf,off,len);     for (int i=off; i < off + n; i++) {       int c=cbuf[i];       if (skipLF) {         skipLF=false;         if (c == '\\n')         continue;       } switch (c) { case '\\r':         skipLF=true; case '\\n':       lineNumber++;     break; } } return n; } } "
"public void testPosZero(){   byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   byte bBytes[]={0};   int aSign=1;   int bSign=0;   byte rBytes[]={0,-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.or(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",1,result.signum()); } "
"@VisibleForTesting protected Set<String> calculateDeletedServerDefaults(Map<String,String> existingDefaults,Map<String,String> validServerProperties){   Set<String> deletedValues=new HashSet<String>();   for (  String existingAttr : existingDefaults.keySet()) {     int startBracket=existingAttr.indexOf('[');     if (startBracket != -1) {       existingAttr=existingAttr.substring(0,startBracket);     }     if (!validServerProperties.containsKey(existingAttr)) {       deletedValues.add(existingAttr);     }   }   return deletedValues; } "
"public void startScroll(int startX,int startY,int dx,int dy){   startScroll(startX,startY,dx,dy,DEFAULT_DURATION); } "
"public RemoteObjectInvocationHandler(RemoteRef ref){   super(ref);   if (ref == null) {     throw new NullPointerException();   } } "
"public Duration withNanos(int nanoOfSecond){   NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);   return create(seconds,nanoOfSecond); } "
"private static JsonValue toDebugLogsJson(RecordProperties recordProperties){   JsonObject debugLogsProperties=JsonValueBuilder.jsonValue();   debugLogsProperties.put(RecordConstants.DEBUG_LOGS_DEBUG_LEVEL_LABEL,recordProperties.debugLevel.toString());   if (recordProperties.autoStopEnable) {     JsonObject autoStopProperties=JsonValueBuilder.jsonValue();     if (recordProperties.autoStopTimeEnable) {       JsonObject timeProperties=JsonValueBuilder.jsonValue();       timeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_UNIT_LABEL,TimeUnit.MILLISECONDS.toString());       timeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_VALUE_LABEL,recordProperties.autoStopTimeInMS);       autoStopProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_TIME_LABEL,timeProperties.build().asMap());     }     if (recordProperties.autoStopFileSizeEnable) {       JsonObject fileSizeProperties=JsonValueBuilder.jsonValue();       fileSizeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_SIZEUNIT_LABEL,FileSizeUnit.KB.toString());       fileSizeProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_VALUE_LABEL,recordProperties.autoStopFileSizedInKB);       autoStopProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_FILESIZE_LABEL,fileSizeProperties.build().asMap());     }     debugLogsProperties.put(RecordConstants.DEBUG_LOGS_AUTOSTOP_LABEL,autoStopProperties.build().asMap());   }   return debugLogsProperties.build(); } "
"public static void checkStringLengthNullSafe(String value) throws IllegalArgumentException {   if (value != null) {     if (value.length() > MAXIMUM_STRING_LENGTH_ALLOWED) {       throw new IllegalArgumentException(ErrorMessage.WMA_LENGTH_OF_STRING_IS_TOO_LARGE.getMsg((value.length() * 2)));     }   } } "
"public final void testToString() throws Exception {   Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();   if (taSet == null) {     fail(getName() + \": not performed (could not create test TrustAnchor set)\");   }   PKIXParameters p=new PKIXParameters(taSet);   assertNotNull(p.toString());   PKIXParameters p1=null;   try {     p1.toString();     fail(\"NullPointerException expected\");   }  catch (  NullPointerException e) {   } } "
"static Promise<String> promiseString(){   return new BasePromise<>(); } "
"public boolean isUserRegistrationEnabled(){   return userRegistrationEnabled; } "
"private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){   encode3to4(threeBytes,0,numSigBytes,b4,0,options);   return b4; } "
"public com.sun.identity.wsfederation.jaxb.wsse.TransformationParametersType createTransformationParametersType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsse.impl.TransformationParametersTypeImpl(); } "
"private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {   if (interruptMode == THROW_IE)   throw new InterruptedException();  else   if (interruptMode == REINTERRUPT)   selfInterrupt(); } "
"Branch(final TemplateFile templateFile,final DN branchDN,final Schema schema,final List<String> subordinateTemplateNames,final List<Integer> numEntriesPerTemplate,final List<TemplateLine> extraLines) throws DecodeException {   this.branchDN=branchDN;   this.subordinateTemplateNames=subordinateTemplateNames;   this.numEntriesPerTemplate=numEntriesPerTemplate;   this.extraLines=extraLines;   final List<LocalizableMessage> warnings=new ArrayList<>();   rdnLines=new ArrayList<>();   for (  final AVA ava : branchDN.rdn()) {     final Attribute attribute=ava.toAttribute();     for (    final ByteString value : attribute.toArray()) {       final List<TemplateTag> tags=buildTagListForValue(value.toString(),templateFile,schema,warnings);       rdnLines.add(new TemplateLine(attribute.getAttributeDescription().getAttributeType(),0,tags));     }   } } "
"public final boolean pop(){   return m_values[m_index--]; } "
"public static String rtrimWildcardTokens(String input){   return rtrimWildcardTokens(input,DEFAULT_PATH_SEPARATOR); } "
"public boolean isInSphere(Vector origin,double radius){   return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius); } "
"public void updateEntityConfig(String realm,String name,String entityId) throws SAML2MetaException, JAXBException {   String classMethod=\"SAML2COTUtils.updateEntityConfig: \";   SAML2MetaManager metaManager=null;   if (callerSession == null) {     metaManager=new SAML2MetaManager();   }  else {     metaManager=new SAML2MetaManager(callerSession);   }   ObjectFactory objFactory=new ObjectFactory();   EntityDescriptorElement edes=metaManager.getEntityDescriptor(realm,entityId);   if (edes == null) {     debug.error(classMethod + \"No such entity: \" + entityId);     String[] data={realm,entityId};     throw new SAML2MetaException(\"entityid_invalid\",data);   }   boolean isAffiliation=false;   if (metaManager.getAffiliationDescriptor(realm,entityId) != null) {     isAffiliation=true;   }   if (debug.messageEnabled()) {     debug.message(classMethod + \"is \" + entityId+ \" in realm \"+ realm+ \" an affiliation? \"+ isAffiliation);   }   EntityConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);   if (eConfig == null) {     BaseConfigType bctype=null;     AttributeType atype=objFactory.createAttributeType();     atype.setName(SAML2Constants.COT_LIST);     atype.getValue().add(name);     EntityConfigElement ele=objFactory.createEntityConfigElement();     ele.setEntityID(entityId);     ele.setHosted(false);     if (isAffiliation) {       bctype=objFactory.createAffiliationConfigElement();       bctype.getAttribute().add(atype);       ele.setAffiliationConfig(bctype);     }  else {       List ll=ele.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();       List list=edes.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();       for (Iterator iter=list.iterator(); iter.hasNext(); ) {         Object obj=iter.next();         if (obj instanceof SPSSODescriptorElement) {           bctype=objFactory.createSPSSOConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof IDPSSODescriptorElement) {           bctype=objFactory.createIDPSSOConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof XACMLPDPDescriptorElement) {           bctype=objFactory.createXACMLPDPConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof XACMLAuthzDecisionQueryDescriptorElement) {           bctype=objFactory.createXACMLAuthzDecisionQueryConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof AttributeAuthorityDescriptorElement) {           bctype=objFactory.createAttributeAuthorityConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof AttributeQueryDescriptorElement) {           bctype=objFactory.createAttributeQueryConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }  else         if (obj instanceof AuthnAuthorityDescriptorElement) {           bctype=objFactory.createAuthnAuthorityConfigElement();           bctype.getAttribute().add(atype);           ll.add(bctype);         }       }     }     metaManager.setEntityConfig(realm,ele);   }  else {     boolean needToSave=true;     List elist=null;     if (isAffiliation) {       AffiliationConfigElement affiliationCfgElm=metaManager.getAffiliationConfig(realm,entityId);       elist=new ArrayList();       elist.add(affiliationCfgElm);     }  else {       elist=eConfig.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();     }     for (Iterator iter=elist.iterator(); iter.hasNext(); ) {       boolean foundCOT=false;       BaseConfigType bConfig=(BaseConfigType)iter.next();       List list=bConfig.getAttribute();       for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {         AttributeType avp=(AttributeType)iter2.next();         if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {           foundCOT=true;           List avpl=avp.getValue();           if (avpl.isEmpty() || !containsValue(avpl,name)) {             avpl.add(name);             needToSave=true;             break;           }         }       }       if (!foundCOT) {         AttributeType atype=objFactory.createAttributeType();         atype.setName(SAML2Constants.COT_LIST);         atype.getValue().add(name);         list.add(atype);         needToSave=true;       }     }     if (needToSave) {       metaManager.setEntityConfig(realm,eConfig);     }   } } "
"private int crossCheckGetColumnsAndResultSetMetaData(ResultSet rs,boolean partial) throws SQLException {   Statement s=conn.createStatement();   while (rs.next()) {     String schema=rs.getString(\"TABLE_SCHEM\");     String table=rs.getString(\"TABLE_NAME\");     ResultSet rst=s.executeQuery(\"SELECT * FROM \" + schema + \".\"+ table);     ResultSetMetaData rsmdt=rst.getMetaData();     for (int col=1; col <= rsmdt.getColumnCount(); col++) {       if (!partial) {         if (col != 1)         assertTrue(rs.next());         assertEquals(\"ORDINAL_POSITION\",col,rs.getInt(\"ORDINAL_POSITION\"));       }       assertEquals(\"TABLE_CAT\",\"\",rs.getString(\"TABLE_CAT\"));       assertEquals(\"TABLE_SCHEM\",schema,rs.getString(\"TABLE_SCHEM\"));       assertEquals(\"TABLE_NAME\",table,rs.getString(\"TABLE_NAME\"));       crossCheckGetColumnRowAndResultSetMetaData(rs,rsmdt);       if (partial)       break;     }     rst.close();   }   int count=rs.getRow();   rs.close();   s.close();   return count; } "
"public String toString(){   StringBuilder buf=new StringBuilder(getClass().getName());   String message=getLocalizedMessage();   if (publicId != null)   buf.append(\"publicId: \").append(publicId);   if (systemId != null)   buf.append(\"; systemId: \").append(systemId);   if (lineNumber != -1)   buf.append(\"; lineNumber: \").append(lineNumber);   if (columnNumber != -1)   buf.append(\"; columnNumber: \").append(columnNumber);   if (message != null)   buf.append(\"; \").append(message);   return buf.toString(); } "
"public MessagePromise(PromiseImpl<JsonValue,Exception> promise,Set<Predicate> predicates){   Reject.ifNull(predicates);   Reject.ifNull(promise);   this.predicates.addAll(predicates);   this.promise=promise; } "
"public void save(InternalSession session) throws CoreTokenException {   coreTokenService.update(tokenAdapter.toToken(session)); } "
"public String colorize(final String message){   if (SUPPORTED) {     final StringBuilder buff=new StringBuilder(start.length() + message.length() + END.length());     buff.append(start).append(message).append(END);     return buff.toString();   }  else {     return message;   } } "
"public SQLNonTransientConnectionException(){ } "
"public final int yylength(){   return zzMarkedPos - zzStartRead; } "
"public static boolean isDualRole(String hostEntityId,String realm){   try {     SPSSOConfigElement spConfig=saml2MetaManager.getSPSSOConfig(realm,hostEntityId);     if (spConfig == null) {       return false;     }     IDPSSOConfigElement idpConfig=saml2MetaManager.getIDPSSOConfig(realm,hostEntityId);     return idpConfig != null;   }  catch (  Exception e) {     return false;   } } "
"public DataBufferShort(int size){   super(STABLE,TYPE_SHORT,size);   data=new short[size];   bankdata=new short[1][];   bankdata[0]=data; } "
"private TargetFilter(EnumTargetOperator op,SearchFilter filter){   this.op=op;   this.filter=filter; } "
"public void paintSplitPaneDividerForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){ } "
"public NotIdentifiableEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){   super(_severity,_message,_locator,_linkedException); } "
"public HttpEntityWrapper(HttpEntity wrapped){   super();   if (wrapped == null) {     throw new IllegalArgumentException(\"wrapped entity must not be null\");   }   wrappedEntity=wrapped; } "
"boolean verifyDeveloperPayload(Purchase p){   String payload=p.getDeveloperPayload();   return true; } "
"public void stopRecord(){   if (recordStatus != RecordStatus.RUNNING) {     return;   }   recordHistory.put(newDate(),STOPPED);   recordStatus=RecordStatus.STOPPED; } "
"@SuppressWarnings(\"unused\") public float dipToPixel(float dip){   DisplayMetrics metrics=this.getDisplayMetrics(this.getContext());   return dip * metrics.density; } "
"void auditAccessSuccess(JsonValue responseDetail){   if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_OUTCOME)) {     final long endTime=currentTimeMillis();     final long elapsedTime=endTime - startTime;     AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent(realm).forHttpRequest(context,request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_OUTCOME).component(component);     if (responseDetail == null) {       builder.response(SUCCESSFUL,\"\",elapsedTime,MILLISECONDS);     }  else {       builder.responseWithDetail(SUCCESSFUL,\"\",elapsedTime,MILLISECONDS,responseDetail);     }     addSessionDetailsFromSSOTokenContextIfNotNull(builder,context);     if (ipAddressHeaderPropertyIsSet()) {       setClientFromHttpContextHeaderIfExists(builder,context);     }     AuditEvent auditEvent=builder.toEvent();     postProcessEvent(auditEvent);     auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);   } } "
"public void updateUI(){   setUI((ButtonUI)UIManager.getUI(this)); } "
"public synchronized int size(){   return elementCount; } "
"public void write(ByteArrayOutputStream tagBuffer){   setTextEncoding(ID3TextEncodingConversion.getTextEncoding(getHeader(),getTextEncoding()));   if (!((TextEncodedStringSizeTerminated)getObject(DataTypes.OBJ_TEXT)).canBeEncoded()) {     this.setTextEncoding(ID3TextEncodingConversion.getUnicodeTextEncoding(getHeader()));   }   super.write(tagBuffer); } "
"protected final void invokePostResponseCallbacks(){   if (postResponseCallbacks != null) {     for (    Runnable callback : postResponseCallbacks) {       try {         callback.run();       }  catch (      Exception e) {         logger.traceException(e);       }     }   } } "
"public Object clone(){   SipUri retval=(SipUri)super.clone();   if (this.authority != null)   retval.authority=(Authority)this.authority.clone();   if (this.uriParms != null)   retval.uriParms=(NameValueList)this.uriParms.clone();   if (this.qheaders != null)   retval.qheaders=(NameValueList)this.qheaders.clone();   if (this.telephoneSubscriber != null)   retval.telephoneSubscriber=(TelephoneNumber)this.telephoneSubscriber.clone();   return retval; } "
"private void readObject(ObjectInputStream s) throws ObjectStreamException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public static Fragment3 newInstance(int sectionNumber){   Fragment3 fragment=new Fragment3();   Bundle args=new Bundle();   args.putInt(ARG_SECTION_NUMBER,sectionNumber);   fragment.setArguments(args);   return fragment; } "
"@Inject public OAuth2RouterProvider(AuditEventPublisher eventPublisher,AuditEventFactory eventFactory,OAuth2RequestFactory requestFactory,JacksonRepresentationFactory jacksonRepresentationFactory){   this.eventPublisher=eventPublisher;   this.eventFactory=eventFactory;   this.requestFactory=requestFactory;   this.jacksonRepresentationFactory=jacksonRepresentationFactory; } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"private PorterDuffColorFilter createTintFilter(ColorStateList tint,PorterDuff.Mode tintMode){   if (tint == null || tintMode == null) {     return null;   }   final int color=tint.getColorForState(getState(),Color.TRANSPARENT);   return new PorterDuffColorFilter(color,tintMode); } "
"public NumberFormatter(NumberFormat format){   super(format);   setFormat(format);   setAllowsInvalid(true);   setCommitsOnValidEdit(false);   setOverwriteMode(false); } "
"public ImageIcon(Image image){   this.image=image;   Object o=image.getProperty(\"comment\",imageObserver);   if (o instanceof String) {     description=(String)o;   }   loadImage(image); } "
"public T eval(){   return eval(bindings()); } "
"public MARSHAL(String s){   this(s,0,CompletionStatus.COMPLETED_NO); } "
"protected final Entry createEntry(DN entryDN,Set<ObjectClass> objectClasses){   HashMap<ObjectClass,String> map=new HashMap<>();   for (  ObjectClass oc : objectClasses) {     if (oc != null) {       map.put(oc,oc.getNameOrOID());     }   }   return new Entry(entryDN,map,null,null); } "
"public final Signum negate(){   if (this == POSITIVE) {     return NEGATIVE;   }  else   if (this == NEGATIVE) {     return POSITIVE;   }  else {     return this;   } } "
"@Override protected void finalize() throws Throwable {   super.finalize();   server.shutdown();   restExpressRunning=false; } "
"public int countTokens(){   int count=0;   int currpos=currentPosition;   while (currpos < maxPosition) {     int start=currpos;     while ((currpos < maxPosition) && Character.isLetterOrDigit(str.charAt(currpos))) {       currpos++;     }     if ((start == currpos) && (Character.isLetterOrDigit(str.charAt(currpos)) == false)) {       currpos++;     }     count++;   }   return count; } "
"public void testPosNegFirstLonger(){   byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};   byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};   int aSign=1;   int bSign=-1;   byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};   BigInteger aNumber=new BigInteger(aSign,aBytes);   BigInteger bNumber=new BigInteger(bSign,bBytes);   BigInteger result=aNumber.or(bNumber);   byte resBytes[]=new byte[rBytes.length];   resBytes=result.toByteArray();   for (int i=0; i < resBytes.length; i++) {     assertTrue(resBytes[i] == rBytes[i]);   }   assertEquals(\"incorrect sign\",-1,result.signum()); } "
"boolean isSpacePreserve(){   return m_spacePreserveStack.peek(); } "
"public static String loadFileContent(String path,Context context){   StringBuilder builder;   try {     InputStream in=context.getAssets().open(path);     builder=new StringBuilder(in.available() + 10);     BufferedReader localBufferedReader=new BufferedReader(new InputStreamReader(in));     char[] data=new char[2048];     int len=-1;     while ((len=localBufferedReader.read(data)) > 0) {       builder.append(data,0,len);     }     localBufferedReader.close();     if (in != null) {       try {         in.close();       }  catch (      IOException e) {         WXLogUtils.e(\"WXFileUtils loadFileContent: \" + WXLogUtils.getStackTrace(e));       }     }     return builder.toString();   }  catch (  IOException e) {     e.printStackTrace();   }   return \"\"; } "
"@Override public void run(){   long maintainTime=0;   while (sendfileRunning) {     while (sendfileRunning && paused) {       try {         Thread.sleep(1000);       }  catch (      InterruptedException e) {       }     }     while (sendfileRunning && sendfileCount < 1 && addS.size() < 1) {       maintainTime=0;       try { synchronized (this) {           this.wait();         }       }  catch (      InterruptedException e) {       }     }     if (!sendfileRunning) {       break;     }     try {       if (addS.size() > 0) { synchronized (this) {           for (int i=(addS.size() - 1); i >= 0; i--) {             SendfileData data=addS.get(i);             int rv=Poll.add(sendfilePollset,data.socket,Poll.APR_POLLOUT);             if (rv == Status.APR_SUCCESS) {               sendfileData.put(Long.valueOf(data.socket),data);               sendfileCount++;             }  else {               getLog().warn(sm.getString(\"endpoint.sendfile.addfail\",Integer.valueOf(rv),Error.strerror(rv)));               closeSocket(data.socket);             }           }           addS.clear();         }       }       maintainTime+=pollTime;       int rv=Poll.poll(sendfilePollset,pollTime,desc,false);       if (rv > 0) {         for (int n=0; n < rv; n++) {           SendfileData state=sendfileData.get(Long.valueOf(desc[n * 2 + 1]));           if (((desc[n * 2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP) || ((desc[n * 2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)) {             remove(state);             closeSocket(state.socket);             continue;           }           long nw=Socket.sendfilen(state.socket,state.fd,state.pos,state.length,0);           if (nw < 0) {             remove(state);             closeSocket(state.socket);             continue;           }           state.pos+=nw;           state.length-=nw;           if (state.length == 0) {             remove(state);             if (state.keepAlive) {               Pool.destroy(state.fdpool);               Socket.timeoutSet(state.socket,getSoTimeout() * 1000);               getPoller().add(state.socket,getKeepAliveTimeout(),Poll.APR_POLLIN);             }  else {               closeSocket(state.socket);             }           }         }       }  else       if (rv < 0) {         int errn=-rv;         if ((errn != Status.TIMEUP) && (errn != Status.EINTR)) {           if (errn > Status.APR_OS_START_USERERR) {             errn-=Status.APR_OS_START_USERERR;           }           getLog().error(sm.getString(\"endpoint.apr.pollError\",Integer.valueOf(errn),Error.strerror(errn))); synchronized (this) {             destroy();             init();           }           continue;         }       }       if (getSoTimeout() > 0 && maintainTime > 1000000L && sendfileRunning) {         rv=Poll.maintain(sendfilePollset,desc,false);         maintainTime=0;         if (rv > 0) {           for (int n=0; n < rv; n++) {             SendfileData state=sendfileData.get(Long.valueOf(desc[n]));             remove(state);             closeSocket(state.socket);           }         }       }     }  catch (    Throwable t) {       ExceptionUtils.handleThrowable(t);       getLog().error(sm.getString(\"endpoint.poll.error\"),t);     }   } synchronized (this) {     this.notifyAll();   } } "
"public void removeAttribute(String name) throws DOMException {   error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED); } "
"public int size(){   if (arrayTable == null) {     return 0;   }   return arrayTable.size(); } "
"public String toXMLString() throws SAML2Exception {   return toXMLString(true,false); } "
"public SCServiceProfileViewBean(){   super(PAGE_NAME,DEFAULT_DISPLAY_URL,null);   initService(); } "
"private void remove_incomplete_expansion_room(ExpandRoomFreespaceIncomplete p_room){   if (p_room == null)   return;   remove_all_doors(p_room);   incomplete_expansion_rooms.remove(p_room); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Element testEmployee;   Attr domesticAttr;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"address\");   testEmployee=(Element)elementList.item(0);   domesticAttr=testEmployee.getAttributeNode(\"invalidAttribute\");   assertNull(\"elementGetAttributeNodeNullAssert\",domesticAttr); } "
"public static NSObject parse(byte[] bytes) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException { switch (determineType(bytes)) { case TYPE_BINARY:     return BinaryPropertyListParser.parse(bytes); case TYPE_XML:   return XMLPropertyListParser.parse(bytes); case TYPE_ASCII: return ASCIIPropertyListParser.parse(bytes); default : throw new PropertyListFormatException(\"The given data is not a property list of a supported format.\"); } } "
"private boolean hasSubstring(final String value,final int start,final String substring){   try {     if (start < 0) {       return false;     }     final int end=start + substring.length();     if (end > value.length()) {       return false;     }     for (int i=0, pos=start; pos < end; i++, pos++) {       if (value.charAt(pos) != substring.charAt(i)) {         return false;       }     }     return true;   }  catch (  final Exception e) {     logger.debug(LocalizableMessage.raw(\"Unable to check that '%s' has substring '%s' at position %d: %s\",value,substring,start,e));     return false;   } } "
"public double noise(double x,double y,double z,double frequency,double amplitude,boolean normalized){   double result=0;   double amp=1;   double freq=1;   double max=0;   x*=xScale;   y*=yScale;   z*=zScale;   for (  NoiseGenerator octave : octaves) {     result+=octave.noise(x * freq,y * freq,z * freq) * amp;     max+=amp;     freq*=frequency;     amp*=amplitude;   }   if (normalized) {     result/=max;   }   return result; } "
"public static void reset(){   instance.setAttributes.clear();   instance.removeAttributes.clear();   instance.addObjectClasses.clear();   instance.removeObjectClasses.clear();   instance.modifications.clear(); } "
"public T exception(Exception exception){   jsonValue.put(EXCEPTION,exception);   return self(); } "
"public static String catenateArrayItems(XMPMeta xmp,String schemaNS,String arrayName,String separator,String quotes,boolean allowCommas) throws XMPException {   return XMPUtilsImpl.catenateArrayItems(xmp,schemaNS,arrayName,separator,quotes,allowCommas); } "
"public int addAllAbsent(Collection<? extends E> c){   Object[] cs=c.toArray();   if (cs.length == 0)   return 0;   final ReentrantLock lock=this.lock;   lock.lock();   try {     Object[] elements=getArray();     int len=elements.length;     int added=0;     for (int i=0; i < cs.length; ++i) {       Object e=cs[i];       if (indexOf(e,elements,0,len) < 0 && indexOf(e,cs,0,added) < 0)       cs[added++]=e;     }     if (added > 0) {       Object[] newElements=Arrays.copyOf(elements,len + added);       System.arraycopy(cs,0,newElements,len,added);       setArray(newElements);     }     return added;   }   finally {     lock.unlock();   } } "
"public Object clone() throws CloneNotSupportedException {   return (ObjectStack)super.clone(); } "
"public EventException(Throwable throwable){   cause=throwable; } "
"public void testAddItalicSpan(){   mRichTextView.formatSpan(0,5,RichTextView.FormatType.ITALIC);   Object[] spans=mRichTextView.getSpans();   assertEquals(1,spans.length);   Object firstSpan=spans[0];   assertTrue(firstSpan instanceof StyleSpan);   assertTrue(((StyleSpan)firstSpan).getStyle() == Typeface.ITALIC); } "
"public NamePath withUpperPieces(){   List<String> newPathPieces=new ArrayList<>();   for (  String piece : pathPieces) {     String newPiece=(piece.isEmpty()) ? piece : new StringBuilder(piece.length()).append(Ascii.toUpperCase(piece.charAt(0))).append(piece.substring(1)).toString();     newPathPieces.add(newPiece);   }   return new NamePath(newPathPieces); } "
"public boolean equals(Object object){   return (super.equals(object) && object instanceof NumberOfDocuments); } "
"protected MessageDigest(String algorithm){   this.algorithm=algorithm; } "
"public HttpCallback(String authorizationHeader,String negotiationHeader,String errorCode){   this.tokenHeader=authorizationHeader;   try {     this.errorCode=Integer.parseInt(errorCode);   }  catch (  Exception e) {   }   int index=negotiationHeader.indexOf(\":\");   if (index != -1) {     this.negoHeader=negotiationHeader.substring(0,index);     this.negoValue=negotiationHeader.substring(index + 1);   }  else {     this.negoHeader=negotiationHeader;   } } "
"protected int checkLastLogin(){   DateFormat formatter=new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\");   Date now=newDate();   Date loginTime=null;   String lastLoginEnc=null;   String lastLogin=null;   String savedUserName=null;   int retVal=0;   if (timeSinceLastLoginAttribute != null) {     HttpServletRequest req=getHttpServletRequest();     if (req != null) {       Cookie cookie=CookieUtils.getCookieFromReq(req,timeSinceLastLoginAttribute);       if (cookie != null) {         if (debug.messageEnabled()) {           debug.message(\"{}.checkLastLogin: Found Cookie : {}\",ADAPTIVE,timeSinceLastLoginAttribute);         }         lastLoginEnc=CookieUtils.getCookieValue(cookie);         lastLogin=AccessController.doPrivileged(new DecodeAction(lastLoginEnc));       }       if (lastLogin != null) {         String[] tokens=lastLogin.split(\"\\\\|\");         if (tokens.length == 3) {           lastLogin=tokens[1];           savedUserName=tokens[2];         }         if (!userName.equalsIgnoreCase(savedUserName)) {           lastLogin=null;         }         if (lastLogin != null) {           try {             loginTime=formatter.parse(lastLogin);             if ((now.getTime() - loginTime.getTime()) < timeSinceLastLoginValue * 1000 * 60* 60* 24L) {               retVal=timeSinceLastLoginScore;             }           }  catch (          ParseException pe) {             if (debug.messageEnabled()) {               debug.message(\"{}.checkLastLogin: lastLogin '{}' can't be parsed\",ADAPTIVE,lastLogin,pe);             }           }         }       }     }     if (timeSinceLastLoginSave) {       postAuthNMap.put(\"LOGINNAME\",timeSinceLastLoginAttribute);       lastLogin=formatter.format(now);       lastLogin=UUID.randomUUID() + \"|\" + lastLogin+ \"|\"+ userName;       lastLoginEnc=AccessController.doPrivileged(new EncodeAction(lastLogin));       postAuthNMap.put(\"LOGINVALUE\",lastLoginEnc);     }   }   if (!timeSinceLastLoginInvert) {     retVal=timeSinceLastLoginScore - retVal;   }   return retVal; } "
"void commitEdit() throws ParseException {   JFormattedTextField ftf=getFormattedTextField();   if (ftf != null) {     ftf.commitEdit();   } } "
"public SessionPropertyCondition(){   this(PrivilegeManager.debug,new CoreWrapper()); } "
"public static void registerAlternateRootDN(DN actualRootEntryDN,DN alternateRootBindDN) throws DirectoryException {   DN existingRootEntryDN=directoryServer.alternateRootBindDNs.putIfAbsent(alternateRootBindDN,actualRootEntryDN);   if (existingRootEntryDN != null && !existingRootEntryDN.equals(actualRootEntryDN)) {     LocalizableMessage message=ERR_CANNOT_REGISTER_DUPLICATE_ALTERNATE_ROOT_BIND_DN.get(alternateRootBindDN,existingRootEntryDN);     throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);   } } "
"protected static String removeQuotes(String quotedString,boolean quotesRequired){   if (quotedString.length() > 0 && quotedString.charAt(0) != '\"' && !quotesRequired) {     return quotedString;   }  else   if (quotedString.length() > 2) {     return quotedString.substring(1,quotedString.length() - 1);   }  else {     return \"\";   } } "
"public DecimalStyle withPositiveSign(char positiveSign){   if (positiveSign == this.positiveSign) {     return this;   }   return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator); } "
"public Lyrics3Image(String identifier,AbstractTagFrameBody frameBody){   super(identifier,frameBody); } "
"public PartOfSetValue(Integer count,Integer total){   this.count=count;   this.rawCount=count.toString();   this.total=total;   this.rawTotal=total.toString();   resetValueFromCounts(); } "
"protected void removeAttributeInternal(String name,boolean notify){   if (name == null)   return;   Object value=attributes.remove(name);   if (!notify || (value == null)) {     return;   }   HttpSessionBindingEvent event=null;   if (value instanceof HttpSessionBindingListener) {     event=new HttpSessionBindingEvent(getSession(),name,value);     ((HttpSessionBindingListener)value).valueUnbound(event);   }   Context context=manager.getContext();   Object listeners[]=context.getApplicationEventListeners();   if (listeners == null)   return;   for (int i=0; i < listeners.length; i++) {     if (!(listeners[i] instanceof HttpSessionAttributeListener))     continue;     HttpSessionAttributeListener listener=(HttpSessionAttributeListener)listeners[i];     try {       context.fireContainerEvent(\"beforeSessionAttributeRemoved\",listener);       if (event == null) {         event=new HttpSessionBindingEvent(getSession(),name,value);       }       listener.attributeRemoved(event);       context.fireContainerEvent(\"afterSessionAttributeRemoved\",listener);     }  catch (    Throwable t) {       ExceptionUtils.handleThrowable(t);       try {         context.fireContainerEvent(\"afterSessionAttributeRemoved\",listener);       }  catch (      Exception e) {       }       manager.getContext().getLogger().error(sm.getString(\"standardSession.attributeEvent\"),t);     }   } } "
"public void startParse(InputSource source) throws SAXException {   if (fNoMoreEvents)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INCRSAXSRCFILTER_NOT_RESTARTABLE,null));   if (fXMLReader == null)   throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_XMLRDR_NOT_BEFORE_STARTPARSE,null));   fXMLReaderInputSource=source;   ThreadControllerWrapper.runThread(this,-1); } "
"@SuppressWarnings(\"unchecked\") private <T>void addPropertyValue(ManagedObjectDefinition<?,?> d,PropertyDefinition<T> pd,String s) throws ArgumentException {   T value;   try {     value=pd.decodeValue(s);   }  catch (  PropertyException e) {     throw ArgumentExceptionFactory.adaptPropertyException(e,d);   }   Collection<T> values=(Collection<T>)properties.get(pd);   if (values == null) {     values=new LinkedList<>();   }   values.add(value);   if (values.size() > 1 && !pd.hasOption(PropertyOption.MULTI_VALUED)) {     PropertyException e=PropertyException.propertyIsSingleValuedException(pd);     throw ArgumentExceptionFactory.adaptPropertyException(e,d);   }   properties.put(pd,values); } "
"public final PlaSide side_of(PlaDirection p_other){   return PlaSide.get_side_of(determinant(p_other)); } "
"public void removeCOSAttribute(String attrName){   modify(new Attr(ICOSDefinition.COSATTRIBUTE,attrName),ModificationType.DELETE); } "
"private static void checkFromToBounds(int arrayLength,int origin,int fence){   if (origin > fence) {     throw new ArrayIndexOutOfBoundsException(\"origin(\" + origin + \") > fence(\"+ fence+ \")\");   }   if (origin < 0) {     throw new ArrayIndexOutOfBoundsException(origin);   }   if (fence > arrayLength) {     throw new ArrayIndexOutOfBoundsException(fence);   } } "
"public String toStringImpl(){   return theClass; } "
"@Hidden static Object invoke__V(MethodHandle mh,Object[] a) throws Throwable {   assert (arityCheck(0,void.class,mh,a));   mh.invokeBasic();   return null; } "
"protected void handleIOException(IOException e) throws IOException {   throw e; } "
"public void runTest() throws Throwable {   Document doc;   NodeList genderList;   Node genderNode;   Node entText;   EntityReference entReference;   Node appendedChild;   doc=(Document)load(\"staff\",true);   genderList=doc.getElementsByTagName(\"gender\");   genderNode=genderList.item(2);   entReference=doc.createEntityReference(\"ent3\");   assertNotNull(\"createdEntRefNotNull\",entReference);   appendedChild=genderNode.appendChild(entReference);   entText=entReference.getFirstChild();   assertNotNull(\"entTextNotNull\",entText); {     boolean success=false;     try {       ((CharacterData)entText).deleteData(1,3);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"throw_NO_MODIFICATION_ALLOWED_ERR\",success);   } } "
"public boolean equals(Object thatObject){   if (!(thatObject instanceof MimeType)) {     return false;   }   MimeType that=(MimeType)thatObject;   boolean isIt=((this.primaryType.equals(that.primaryType)) && (this.subType.equals(that.subType)) && (this.parameters.equals(that.parameters)));   return isIt; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_elementretrievetagname.class,args); } "
"@Deprecated public Set<Map.Entry<Long,V>> entrySet(){   HashSet<Map.Entry<Long,V>> set=new HashSet<Map.Entry<Long,V>>();   for (  long key : keySet()) {     set.add(new Entry(key,get(key)));   }   return set; } "
"public void fatalError(SAXParseException e) throws SAXException {   if (null != m_errorHandler) {     try {       m_errorHandler.fatalError(e);     }  catch (    SAXParseException se) {     }   }   javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();   if (errorListener instanceof ErrorHandler) {     ((ErrorHandler)errorListener).fatalError(e);     if (null != m_errorHandler)     m_errorHandler.fatalError(e);   }  else {     try {       errorListener.fatalError(new javax.xml.transform.TransformerException(e));       if (null != m_errorHandler)       m_errorHandler.fatalError(e);     }  catch (    javax.xml.transform.TransformerException te) {       throw e;     }   } } "
"protected void adjustChildIndexs(int index,int amount){   for (int counter=index, maxCounter=getChildCount(); counter < maxCounter; counter++) {     ((FHTreeStateNode)getChildAt(counter)).childIndex+=amount;   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_characterdatagetlength.class,args); } "
"public void runTest() throws Throwable {   Document doc;   Document aNewDoc;   EntityReference entRef;   Node aNode;   String name;   Node child;   String childValue;   doc=(Document)load(\"staff\",true);   aNewDoc=(Document)load(\"staff\",true);   entRef=aNewDoc.createEntityReference(\"ent3\");   assertNotNull(\"createdEntRefNotNull\",entRef);   aNode=doc.importNode(entRef,true);   name=aNode.getNodeName();   assertEquals(\"entityName\",\"ent3\",name);   child=aNode.getFirstChild();   assertNotNull(\"child\",child);   childValue=child.getNodeValue();   assertEquals(\"childValue\",\"Texas\",childValue); } "
"protected static void cleanDomainMap(String canonOrgDN){ synchronized (canonicalDomainMap) {     canonicalDomainMap.remove(canonOrgDN);   } synchronized (domainMap) {     domainMap.remove(canonOrgDN);   } } "
"public void menuKeyTyped(MenuKeyEvent e){   if (!crossMenuMnemonic && BasicPopupMenuUI.getLastPopup() != null) {     return;   }   if (BasicPopupMenuUI.getPopups().size() != 0) {     return;   }   char key=Character.toLowerCase((char)menuItem.getMnemonic());   MenuElement path[]=e.getPath();   if (key == Character.toLowerCase(e.getKeyChar())) {     JPopupMenu popupMenu=((JMenu)menuItem).getPopupMenu();     ArrayList newList=new ArrayList(Arrays.asList(path));     newList.add(popupMenu);     MenuElement subs[]=popupMenu.getSubElements();     MenuElement sub=BasicPopupMenuUI.findEnabledChild(subs,-1,true);     if (sub != null) {       newList.add(sub);     }     MenuSelectionManager manager=e.getMenuSelectionManager();     MenuElement newPath[]=new MenuElement[0];     ;     newPath=(MenuElement[])newList.toArray(newPath);     manager.setSelectedPath(newPath);     e.consume();   } } "
"public DirectoryEnvironmentConfig(boolean checkIfServerIsRunning){   this(System.getProperties(),checkIfServerIsRunning); } "
"public static void verify(final ClassReader cr,final boolean dump,final PrintWriter pw){   verify(cr,null,dump,pw); } "
"public TreeMapEntry(final String name){   this(DN.valueOf(name)); } "
"public JTextField(int columns){   this(null,null,columns); } "
"public Image loadImage(final String resourceName){   try {     final URL url=getClass().getResource(resourceName);     if (url != null) {       final ImageProducer ip=(ImageProducer)url.getContent();       if (ip != null) {         return Toolkit.getDefaultToolkit().createImage(ip);       }     }   }  catch (  final Exception ignored) {   }   return null; } "
"public void test_ConstructorIF(){   whm=new WeakHashMap(50,0.5f);   for (int i=0; i < 100; i++)   whm.put(keyArray[i],valueArray[i]);   for (int i=0; i < 100; i++)   assertTrue(\"Incorrect value retrieved\",whm.get(keyArray[i]) == valueArray[i]);   WeakHashMap empty=new WeakHashMap(0,0.75f);   assertNull(\"Empty hashtable access\",empty.get(\"nothing\"));   empty.put(\"something\",\"here\");   assertTrue(\"cannot get element\",empty.get(\"something\") == \"here\");   try {     new WeakHashMap(50,-0.5f);     fail(\"IllegalArgumentException expected\");   }  catch (  IllegalArgumentException e) {   }   try {     new WeakHashMap(-50,0.5f);     fail(\"IllegalArgumentException expected\");   }  catch (  IllegalArgumentException e) {   } } "
"public TimeLimitExceededException(String explanation){   super(explanation); } "
"private void createTunnel() throws IOException, InterruptedException {   while (true) {     MockResponse connect=responseQueue.peek();     if (!processOneRequest(raw.getInputStream(),raw.getOutputStream(),raw)) {       throw new IllegalStateException(\"Tunnel without any CONNECT!\");     }     if (connect.getSocketPolicy() == SocketPolicy.UPGRADE_TO_SSL_AT_END) {       return;     }   } } "
"public static boolean isEqualTo(String s1,String s2){   return CollectionUtils.genericCompare(s1,s2); } "
"public void assignService(Map map) throws AMConsoleException {   String[] params={currentRealm,serviceName};   logEvent(\"ATTEMPT_ASSIGN_SERVICE_TO_REALM\",params);   try {     AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),currentRealm);     AMIdentity realmIdentity=repo.getRealmIdentity();     Set servicesFromIdRepo=realmIdentity.getAssignableServices();     if (servicesFromIdRepo.contains(serviceName)) {       realmIdentity.assignService(serviceName,map);     }  else {       OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(getUserSSOToken(),currentRealm);       orgCfgMgr.assignService(serviceName,map);     }     logEvent(\"SUCCEED_ASSIGN_SERVICE_TO_REALM\",params);   }  catch (  SSOException e) {     String strError=getErrorString(e);     String[] paramsEx={currentRealm,serviceName,strError};     logEvent(\"SSO_EXCEPTION_ASSIGN_SERVICE_TO_REALM\",paramsEx);     throw new AMConsoleException(strError);   } catch (  IdRepoException e) {     String strError=getErrorString(e);     String[] paramsEx={currentRealm,serviceName,strError};     logEvent(\"IDREPO_EXCEPTION_ASSIGN_SERVICE_TO_REALM\",paramsEx);     throw new AMConsoleException(strError);   } catch (  SMSException e) {     String strError=getErrorString(e);     String[] paramsEx={currentRealm,serviceName,strError};     logEvent(\"SMS_EXCEPTION_ASSIGN_SERVICE_TO_REALM\",paramsEx);     throw new AMConsoleException(strError);   } } "
"public final void testWriteReplace(){   try {     MyCertPath cp1=new MyCertPath(testEncoding);     Object obj=cp1.writeReplace();     assertTrue(obj.toString().contains(\"java.security.cert.CertPath$CertPathRep\"));   }  catch (  ObjectStreamException e) {     fail(\"Unexpected ObjectStreamException \" + e.getMessage());   } } "
"public PlaLineIntAlist alist_copy(int extra_space){   if (extra_space < 0)   extra_space=0;   PlaLineIntAlist risul=new PlaLineIntAlist(plaline_len() + extra_space);   risul.addAll(lines_list);   return risul; } "
"static FractionalConfig toFractionalConfig(ReplicationDomainCfg configuration) throws ConfigException {   Iterator<String> exclIt=configuration.getFractionalExclude().iterator();   Iterator<String> inclIt=configuration.getFractionalInclude().iterator();   Map<String,Set<String>> newFractionalSpecificClassesAttributes=new HashMap<>();   Set<String> newFractionalAllClassesAttributes=new HashSet<>();   int newFractionalMode=parseFractionalConfig(exclIt,inclIt,newFractionalSpecificClassesAttributes,newFractionalAllClassesAttributes);   FractionalConfig result=new FractionalConfig(configuration.getBaseDN()); switch (newFractionalMode) { case NOT_FRACTIONAL:     result.setFractional(false);   result.setFractionalExclusive(true); break; case EXCLUSIVE_FRACTIONAL: case INCLUSIVE_FRACTIONAL: result.setFractional(true); result.setFractionalExclusive(newFractionalMode == EXCLUSIVE_FRACTIONAL); break; } result.setFractionalSpecificClassesAttributes(newFractionalSpecificClassesAttributes); result.setFractionalAllClassesAttributes(newFractionalAllClassesAttributes); return result; } "
"@BeforeClass public static void initClass(){   scenario=Scenarios.s5_several_branches();   if (Misc.isDebugMode()) {     System.out.println(\"git repository created under: \" + scenario.getRepositoryLocation());   } } "
"synchronized void loadMapper() throws SMSException {   String fileName=mRootDir + File.separator + DIR_TREE_FILENAME;   File fileHandle=new File(fileName);   if (fileHandle.isFile()) {     if (!fileHandle.canRead()) {       String errmsg=\"SMSEnhancedFlatFileObject.initialize: cannot read file \" + fileName;       mDebug.error(errmsg);       throw new SMSException(errmsg);     }     parseDirectoryTreeXML(fileName);   }  else {     try {       fileHandle.createNewFile();     }  catch (    IOException e) {       String errmsg=\"SMSEnhancedFlatFileObject.initialize: \" + \"cannot create file, \" + fileName + \". Exception \"+ e.getMessage();       mDebug.error(\"SMSEnhancedFlatFileObject.initialize\",e);       throw new SMSException(errmsg);     } catch (    SecurityException e) {       String errmsg=\"SMSEnhancedFlatFileObject.initialize: \" + \"cannot create file, \" + fileName + \". Exception \"+ e.getMessage();       mDebug.error(\"SMSEnhancedFlatFileObject.initialize\",e);       throw new SMSException(errmsg);     }     root=new SMSFlatFileTreeNode(mRootDN);     try {       Map map=new HashMap(2);       Set set=new HashSet(4);       set.add(\"top\");       set.add(\"organizationalunit\");       map.put(\"objectclass\",set);       create(null,\"ou=services,\" + mRootDN,map);       saveDirectoryTree();     }  catch (    SSOException e) {     } catch (    ServiceAlreadyExistsException e) {       mDebug.message(\"SMSEnhancedFlatFileObject.initialize\",e);     }   } } "
"public void update(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).update(a,b);   } } "
"public List<LocalizableMessage> deregisterBaseDN(DN baseDN) throws DirectoryException {   ifNull(baseDN);   Backend<?> backend=baseDNs.get(baseDN);   if (backend == null) {     LocalizableMessage message=ERR_DEREGISTER_BASEDN_NOT_REGISTERED.get(baseDN);     throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);   }   Backend<?> superiorBackend=backend.getParentBackend();   LinkedList<Backend<?>> subordinateBackends=new LinkedList<>();   if (backend.getSubordinateBackends() != null) {     for (    Backend<?> b : backend.getSubordinateBackends()) {       for (      DN dn : b.getBaseDNs()) {         if (dn.isSubordinateOrEqualTo(baseDN)) {           subordinateBackends.add(b);           break;         }       }     }   }   LinkedList<DN> otherBaseDNs=new LinkedList<>();   for (  DN dn : baseDNs.keySet()) {     if (dn.equals(baseDN)) {       continue;     }     Backend<?> b=baseDNs.get(dn);     if (backend.equals(b)) {       otherBaseDNs.add(dn);     }   }   baseDNs.remove(baseDN);   publicNamingContexts.remove(baseDN);   allPublicNamingContexts.remove(baseDN);   privateNamingContexts.remove(baseDN);   final LinkedList<LocalizableMessage> errors=new LinkedList<>();   if (superiorBackend == null) {     for (    Backend<?> b : subordinateBackends) {       if (!testOnly) {         b.setParentBackend(null);         backend.removeSubordinateBackend(b);       }       for (      DN dn : b.getBaseDNs()) {         if (b.isPrivateBackend()) {           privateNamingContexts.put(dn,b);         }  else {           publicNamingContexts.put(dn,b);         }       }     }   }  else {     if (otherBaseDNs.isEmpty() && !testOnly) {       superiorBackend.removeSubordinateBackend(backend);     }     if (!subordinateBackends.isEmpty()) {       if (!DirectoryServer.getInstance().isShuttingDown()) {         errors.add(WARN_DEREGISTER_BASEDN_MISSING_HIERARCHY.get(baseDN,backend.getBackendID()));       }       if (!testOnly) {         for (        Backend<?> b : subordinateBackends) {           backend.removeSubordinateBackend(b);           superiorBackend.addSubordinateBackend(b);           b.setParentBackend(superiorBackend);         }       }     }   }   return errors; } "
"@Override public void recycle(){   input=null; } "
"public int corner_count(){   return plaline_len() - 1; } "
"public boolean hasCredentials(){   return _hasCredentials; } "
"public static String hexDecode(final String value){   return decode(value,4,16); } "
"public static String retrieveCurrentVersion(){   return VersionCheck.class.getPackage().getImplementationVersion(); } "
"public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){   DebugGraphicsInfo info=info();   if (debugLog()) {     info().log(toShortString() + \" Drawing round rect: \" + new Rectangle(x,y,width,height)+ \" arcWidth: \"+ arcWidth+ \" archHeight: \"+ arcHeight);   }   if (isDrawingBuffer()) {     if (debugBuffered()) {       Graphics debugGraphics=debugGraphics();       debugGraphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);       debugGraphics.dispose();     }   }  else   if (debugFlash()) {     Color oldColor=getColor();     int i, count=(info.flashCount * 2) - 1;     for (i=0; i < count; i++) {       graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);       graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight);       Toolkit.getDefaultToolkit().sync();       sleep(info.flashTime);     }     graphics.setColor(oldColor);   }   graphics.drawRoundRect(x,y,width,height,arcWidth,arcHeight); } "
"protected ReplyToParser(Lexer lexer){   super(lexer); } "
"public int doAfterBody() throws JspException {   return SKIP_BODY; } "
"private void updateRelationshipFields(Context context,String resourceId,Set<JsonPointer> relationshipFields,JsonValue oldObject,JsonValue newObject) throws ResourceException {   final Set<JsonPointer> systemRelationships=relationshipProviders.keySet();   if (!relationshipFields.containsAll(systemRelationships)) {     final JsonValue diff=JsonPatch.diff(oldObject,newObject);     for (    JsonValue diffElement : diff) {       Map<String,Object> diffOp=diffElement.asMap();       JsonPointer pathPointer=new JsonPointer((String)diffOp.get(JsonPatch.PATH_PTR.leaf()));       if (systemRelationships.contains(pathPointer) && !relationshipFields.contains(pathPointer)) {         relationshipFields.add(pathPointer);         logger.info(\"In updateRelationshipFields, adding onUpdate-script-modified relationship to \" + \"processed relationship set: {}\",pathPointer);         if (\"add\".equals(diffOp.get(JsonPatch.OP_PTR.leaf()))) {           try {             final JsonValue relationships=fetchRelationshipFields(context,resourceId,Collections.singletonList(pathPointer));             oldObject.asMap().putAll(relationships.asMap());             logger.info(\"In updateRelationshipFields, adding relationships {} to managed object {}.\",relationships.toString(),resourceId);           }  catch (          ExecutionException|InterruptedException e) {             throw new InternalServerErrorException(e.getMessage(),e);           }         }       }     }   } } "
"private boolean itera_connect(PlaPointInt p_from_point,PlaPointInt p_to_point){   ArrayList<PlaPointInt> corners=angled_connection(p_from_point,p_to_point);   boolean connection_succeeded=true;   for (int index=1; index < corners.size(); ++index) {     PlaPointInt from_corner=corners.get(index - 1);     PlaPointInt to_corner=corners.get(index);     TimeLimit time_limit=new TimeLimit(s_CHECK_FORCED_TRACE_TIME_MAX);     while (!from_corner.equals(to_corner)) {       PlaPointInt curr_ok_point=r_board.insert_trace(from_corner,to_corner,pen_half_width_arr[layer_active_no],layer_active_no,net_nos,clearance_class,max_shove_trace_recursion_depth,max_shove_via_recursion_depth,max_spring_over_recursion_depth,itera_settings.trace_pullt_min_move,!is_stitch_mode,time_limit);       if (curr_ok_point == null) {         r_board.undo(null);         return true;       }       if (curr_ok_point.equals(from_corner) && itera_settings.is_automatic_neckdown()) {         curr_ok_point=try_neckdown_at_end(from_corner,to_corner);       }       if (curr_ok_point.equals(from_corner)) {         prev_corner=from_corner;         connection_succeeded=false;         break;       }       from_corner=curr_ok_point;     }   }   return connection_succeeded; } "
"public void replaceAttributeValue(String attrName,String oldValue,String newValue) throws SMSException, SSOException {   validatePluginConfig();   Map attributes=getAttributes();   Set newVals=new HashSet();   Set oldVals=(Set)attributes.get(attrName);   if (oldVals != null) {     newVals.addAll(oldVals);     newVals.remove(oldValue);   }   newVals.add(newValue);   ps.validateAttrValues(token,attrName,newVals,true,pc.getOrganizationName());   SMSEntry e=pc.getSMSEntry();   SMSUtils.replaceAttributeValue(e,attrName,oldValue,newValue,ps.getSearchableAttributeNames());   saveSMSEntry(e); } "
"private void testLockDir(File lockDir) throws IOException {   if (!lockDir.exists()) {     throw new IOException(\"Could not find lockDir: \" + lockDir.getAbsolutePath());   }   if (!lockDir.canWrite()) {     throw new IOException(\"Could not write to lockDir: \" + lockDir.getAbsolutePath());   } } "
"public void paintPopupMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ } "
"private void remove(ThreadGroup g){ synchronized (groups) {     for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {       ThreadGroup threadGroup=i.next();       if (threadGroup.equals(g)) {         i.remove();         break;       }     }   }   destroyIfEmptyDaemon(); } "
"public int signal_layer_count(){   int found_signal_layers=0;   for (int index=0; index < size(); ++index) {     if (get(index).is_signal)     found_signal_layers++;   }   return found_signal_layers; } "
"public String encode(){   String addressStr=null;   if (address != null) {     addressStr=address.encode();     if (Host.isIPv6Reference(addressStr)) {       addressStr=addressStr.substring(1,addressStr.length() - 1);     }   }   return ORIGIN_FIELD + username + Separators.SP+ sessIdString+ Separators.SP+ sessVersionString+ Separators.SP+ nettype+ Separators.SP+ addrtype+ Separators.SP+ addressStr+ Separators.NEWLINE; } "
"@Override public boolean equals(final Object o){   if (this == o) {     return true;   }  else   if (o instanceof ByteSequence) {     final ByteSequence other=(ByteSequence)o;     return other.equals(buffer,0,length);   }  else {     return false;   } } "
"public static int parseRuleID(String definition) throws DirectoryException {   return Integer.parseInt(parseOID(definition,ERR_PARSING_DIT_STRUCTURE_RULE_RULEID)); } "
"public void mergeObjects(GenericObjectList mergeList){   if (mergeList == null)   return;   Iterator it1=this.listIterator();   Iterator it2=mergeList.listIterator();   while (it1.hasNext()) {     GenericObject outerObj=(GenericObject)it1.next();     while (it2.hasNext()) {       Object innerObj=it2.next();       outerObj.merge(innerObj);     }   } } "
"private Entry createTestEntry(AttributeType type,String[] values){   DN entryDN=DN.valueOf(\"dc=example, dc=com\");   ObjectClass top=CoreSchema.getTopObjectClass();   ObjectClass extensible=CoreSchema.getExtensibleObjectObjectClass();   HashMap<ObjectClass,String> objectClasses=new HashMap<>();   objectClasses.put(top,top.getNameOrOID());   objectClasses.put(extensible,extensible.getNameOrOID());   Entry testEntry=new Entry(entryDN,objectClasses,null,null);   Attribute attr=Attributes.create(type.getNameOrOID(),values);   testEntry.putAttribute(type,newArrayList(attr));   return testEntry; } "
"private boolean containsNullValue(){   Entry<K,V>[] tab=getTable();   for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (e.value == null)   return true;   return false; } "
"public JMXMBean(DN configEntryDN){   this.configEntryDN=configEntryDN;   alertGenerators=new CopyOnWriteArrayList<>();   monitorProviders=new CopyOnWriteArrayList<>();   MBeanServer mBeanServer=DirectoryServer.getJMXMBeanServer();   if (mBeanServer != null) {     try {       objectName=new ObjectName(getJmxName(configEntryDN));       try {         if (mBeanServer.isRegistered(objectName)) {           mBeanServer.unregisterMBean(objectName);         }       }  catch (      Exception e) {         logger.traceException(e);       }       mBeanServer.registerMBean(this,objectName);     }  catch (    Exception e) {       logger.traceException(e);       logger.error(ERR_CONFIG_JMX_CANNOT_REGISTER_MBEAN,configEntryDN,e);     }   } } "
"public void testGetInstance01() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {   try {     AlgorithmParameterGenerator.getInstance(null);     fail(\"NullPointerException or NoSuchAlgorithmException should be thrown\");   }  catch (  NullPointerException e) {   } catch (  NoSuchAlgorithmException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       AlgorithmParameterGenerator.getInstance(invalidValues[i]);       fail(\"NoSuchAlgorithmException must be thrown (algorithm: \".concat(invalidValues[i]).concat(\")\"));     }  catch (    NoSuchAlgorithmException e) {     }   }   AlgorithmParameterGenerator apG;   for (int i=0; i < validValues.length; i++) {     apG=AlgorithmParameterGenerator.getInstance(validValues[i]);     assertEquals(\"Incorrect algorithm\",apG.getAlgorithm(),validValues[i]);     assertEquals(\"Incorrect provider\",apG.getProvider(),mProv);     checkResult(apG);   } } "
"public int hashCode(){   return name.hashCode() ^ (value == null ? 0 : value.hashCode()); } "
"OkHttpClient copyWithDefaults(){   OkHttpClient result=new OkHttpClient(this);   if (result.proxySelector == null) {     result.proxySelector=ProxySelector.getDefault();   }   if (result.cookieHandler == null) {     result.cookieHandler=CookieHandler.getDefault();   }   if (result.socketFactory == null) {     result.socketFactory=SocketFactory.getDefault();   }   if (result.sslSocketFactory == null) {     result.sslSocketFactory=getDefaultSSLSocketFactory();   }   if (result.hostnameVerifier == null) {     result.hostnameVerifier=OkHostnameVerifier.INSTANCE;   }   if (result.certificatePinner == null) {     result.certificatePinner=CertificatePinner.DEFAULT;   }   if (result.authenticator == null) {     result.authenticator=AuthenticatorAdapter.INSTANCE;   }   if (result.connectionPool == null) {     result.connectionPool=ConnectionPool.getDefault();   }   if (result.protocols == null) {     result.protocols=DEFAULT_PROTOCOLS;   }   if (result.connectionSpecs == null) {     result.connectionSpecs=DEFAULT_CONNECTION_SPECS;   }   if (result.dns == null) {     result.dns=Dns.SYSTEM;   }   return result; } "
"private void initialSearchFromChangeNumber(final ChangeNumberEntrySender entrySender) throws ChangelogException, DirectoryException {   if (!sendBaseChangelogEntry(entrySender.searchOp)) {     return;   }   final AtomicReference<MultiDomainDBCursor> replicaUpdatesCursor=new AtomicReference<>();   try (DBCursor<ChangeNumberIndexRecord> cnIndexDBCursor=getCNIndexDBCursor(entrySender.lowestChangeNumber)){     final MultiDomainServerState cookie=new MultiDomainServerState();     if (sendChangeNumberEntriesFromCursors(entrySender,cnIndexDBCursor,replicaUpdatesCursor,cookie)) {       entrySender.transitioningToPersistentSearchPhase();       sendChangeNumberEntriesFromCursors(entrySender,cnIndexDBCursor,replicaUpdatesCursor,cookie);     }   }   finally {     entrySender.finalizeInitialSearch();     StaticUtils.close(replicaUpdatesCursor.get());   } } "
"public Writer(){   this.stream=new ByteArrayOutputStream();   this.config=new LDIFExportConfig(stream);   try {     this.writer=new LDIFWriter(config);   }  catch (  IOException e) {     throw new RuntimeException(e);   } } "
"@Override public int read(char[] array,int offset,int length){   if (idx >= charSequence.length()) {     return -1;   }   if (array == null) {     throw new NullPointerException(\"Character array is missing\");   }   if (length < 0 || offset < 0 || offset + length > array.length) {     throw new IndexOutOfBoundsException(\"Array Size=\" + array.length + \", offset=\"+ offset+ \", length=\"+ length);   }   int count=0;   for (int i=0; i < length; i++) {     int c=read();     if (c == -1) {       return count;     }     array[offset + i]=(char)c;     count++;   }   return count; } "
"public static void deleteRealmPrivileges(SSOToken token,String realmName) throws SSOException, DelegationException {   DelegationManager dm=new DelegationManager(token,realmName);   Set privs=dm.getPrivileges();   if ((privs == null) || privs.isEmpty()) {     return;   }   Iterator it=privs.iterator();   while (it.hasNext()) {     DelegationPrivilege dp=(DelegationPrivilege)it.next();     String privName=dp.getName();     dm.removePrivilege(privName);     if (debug.messageEnabled()) {       debug.message(\"removed \" + privName + \" privilege from realm \"+ realmName);     }   } } "
"public void sendHeader(MessageBytes name,MessageBytes value){   write(name);   headerBuffer[pos++]=Constants.COLON;   headerBuffer[pos++]=Constants.SP;   write(value);   headerBuffer[pos++]=Constants.CR;   headerBuffer[pos++]=Constants.LF; } "
"public int next(){   final int result=_currentNode;   int nodeType=_nodeType;   _currentNode=END;   if (nodeType >= DTM.NTYPES) {     if (getExpandedTypeID(result) == nodeType) {       return returnNode(result);     }   }  else {     if (getNodeType(result) == nodeType) {       return returnNode(result);     }   }   return NULL; } "
"private static String parse(JsonValue base){   if (!base.isString()) {     return null;   }   return buildString(base.asString()); } "
"@Override public void destroy(){ } "
"private void registerWithKeyboardManager(boolean onlyIfNew){   InputMap inputMap=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);   KeyStroke[] strokes;   Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);   if (inputMap != null) {     strokes=inputMap.allKeys();     if (strokes != null) {       for (int counter=strokes.length - 1; counter >= 0; counter--) {         if (!onlyIfNew || registered == null || registered.get(strokes[counter]) == null) {           registerWithKeyboardManager(strokes[counter]);         }         if (registered != null) {           registered.remove(strokes[counter]);         }       }     }   }  else {     strokes=null;   }   if (registered != null && registered.size() > 0) {     Enumeration<KeyStroke> keys=registered.keys();     while (keys.hasMoreElements()) {       KeyStroke ks=keys.nextElement();       unregisterWithKeyboardManager(ks);     }     registered.clear();   }   if (strokes != null && strokes.length > 0) {     if (registered == null) {       registered=new Hashtable<KeyStroke,KeyStroke>(strokes.length);       putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,registered);     }     for (int counter=strokes.length - 1; counter >= 0; counter--) {       registered.put(strokes[counter],strokes[counter]);     }   }  else {     putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null);   } } "
"@AfterClass public void enableLogging(){   TestCaseUtils.setDefaultLogLevel(Level.INFO); } "
"public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {   removePageSessionAttribute(PAGE_MODIFIED);   super.handleButton2Request(event); } "
"public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBackground(context,g,x,y,w,h,null); } "
"private boolean loadSectionOrder(String fileName){   InputStream is=getClass().getClassLoader().getResourceAsStream(fileName);   if (is == null) {     if (debug.messageEnabled()) {       debug.message(\"loadSectionOrder: no section for service\" + serviceName);     }     return false;   }   Map<String,List<String>> map=new HashMap<String,List<String>>();   BufferedReader reader=new BufferedReader(new InputStreamReader(is));   try {     String line=reader.readLine();     while (line != null) {       if (!line.startsWith(\"#\") && (line.trim().length() > 0)) {         int idx=line.indexOf('=');         String key=line.substring(0,idx).trim();         String value=line.substring(idx + 1).trim();         List<String> list=map.get(key);         if (list == null) {           list=new ArrayList<String>();           map.put(key,list);         }         list.add(value);       }       line=reader.readLine();     }   }  catch (  IOException ioe) {     if (debug.messageEnabled()) {       debug.message(\"PropertyXMLBuilder:loadSectionOrder\",ioe);     }   }  finally {     if (reader != null) {       try {         reader.close();       }  catch (      IOException ioe) {       }     }   }   sectionOrder=map;   if (debug.messageEnabled()) {     debug.message(\"loadSectionOrder: \" + sectionOrder);   }   return true; } "
"public com.sun.identity.saml2.jaxb.metadata.EntityDescriptorType createEntityDescriptorType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadata.impl.EntityDescriptorTypeImpl(); } "
"public synchronized int hashCode(){   return super.hashCode(); } "
"public PWResetUncaughtExceptionModelImpl(){   super(); } "
"public void publish(ReplicationMsg msg){   publish(msg,false,true); } "
"private ByteString unixCryptEncodePassword(ByteSequence plaintext) throws DirectoryException {   byte[] plaintextBytes=null;   byte[] digestBytes;   try {     plaintextBytes=plaintext.toByteArray();     digestBytes=crypt.crypt(plaintextBytes,randomSalt());   }  catch (  Exception e) {     LocalizableMessage message=ERR_PWSCHEME_CANNOT_ENCODE_PASSWORD.get(CLASS_NAME,stackTraceToSingleLineString(e));     throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);   }  finally {     if (plaintextBytes != null) {       Arrays.fill(plaintextBytes,(byte)0);     }   }   return ByteString.wrap(digestBytes); } "
"public AttributeFilter(final Collection<String> attributeDescriptions){   this(attributeDescriptions,Schema.getDefaultSchema()); } "
"private String attributeValue(Node.JspAttribute attr,boolean encode,Class<?> expectedType){   String v=attr.getValue();   if (!attr.isNamedAttribute() && (v == null))   return \"\";   if (attr.isExpression()) {     if (encode) {       return \"org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(\" + v + \"), request.getCharacterEncoding())\";     }     return v;   }  else   if (attr.isELInterpreterInput()) {     v=elInterpreter.interpreterCall(ctxt,this.isTagFile,v,expectedType,attr.getEL().getMapName());     if (encode) {       return \"org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\" + v + \", request.getCharacterEncoding())\";     }     return v;   }  else   if (attr.isNamedAttribute()) {     return attr.getNamedAttributeNode().getTemporaryVariableName();   }  else {     if (encode) {       return \"org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(\" + quote(v) + \", request.getCharacterEncoding())\";     }     return quote(v);   } } "
"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){   Insets nextInsets;   int px, py, pw, ph;   px=x;   py=y;   pw=width;   ph=height;   if (outsideBorder != null) {     outsideBorder.paintBorder(c,g,px,py,pw,ph);     nextInsets=outsideBorder.getBorderInsets(c);     px+=nextInsets.left;     py+=nextInsets.top;     pw=pw - nextInsets.right - nextInsets.left;     ph=ph - nextInsets.bottom - nextInsets.top;   }   if (insideBorder != null)   insideBorder.paintBorder(c,g,px,py,pw,ph); } "
"public PlaLineInt plaline_first(){   return plaline(0); } "
"public void addChildElementAt(XMLElement child,int index,boolean addAfterNewLine) throws Exception {   failIfDeleted();   boolean addOuterWhitespace=true;   if (getEndToken() == null) {     insertEndToken();     addOuterWhitespace=false;   }   ArrayList childElements=getChildElements();   if (childElements == null) {     childElements=new ArrayList();     addOuterWhitespace=false;   }   if (index == -1) {     index=childElements.size();     addOuterWhitespace=false;   }   BoundedToken addAfterToken=null;   if (index == 0) {     addAfterToken=getStartToken();   }  else   if (index <= childElements.size()) {     XMLElement lastChildElement=(XMLElement)childElements.get(index - 1);     if (lastChildElement.getEndToken() != null) {       addAfterToken=lastChildElement.getEndToken();     }  else {       addAfterToken=lastChildElement.getStartToken();     }   }   if (addAfterToken != null) {     getDocument().addXMLElementAfterTokenIndex(addAfterToken.getTokenIndex(),child,addAfterNewLine,addOuterWhitespace);   }  else {     throw new Exception(\"Failed to add child element: no such index: \" + index + \", element: \"+ this);   }   childElements.add(index,child);   setChildElements(childElements); } "
"public void ensureExceptionThrownIfOptionIsUnsupportedOnOS(int option){   if (!getOptionIsSupported(option)) {     fail(\"Failed to throw exception for unsupported socket option: \" + getSocketOptionString(option));   } } "
"public static void access(Level level,String msgId,String data[]){   access(level,msgId,data,null); } "
"public String toXML(){   StringBuilder stringBuilder=new StringBuilder();   return stringBuilder.toString(); } "
"public EncryptedAttribute createEncryptedAttribute(org.w3c.dom.Element elem) throws SAML2Exception {   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ATTRIBUTE,elem);   if (obj == null) {     return new EncryptedAttributeImpl(elem);   }  else {     return (EncryptedAttribute)obj;   } } "
"public FSLoginHelperException(String msg){   super(msg); } "
"public static String escapeXML(String value,boolean forAttribute,boolean escapeWhitespaces){   boolean needsEscaping=false;   for (int i=0; i < value.length(); i++) {     char c=value.charAt(i);     if (c == '<' || c == '>' || c == '&' || (escapeWhitespaces && (c == '\\t' || c == '\\n' || c == '\\r')) || (forAttribute && c == '\"')) {       needsEscaping=true;       break;     }   }   if (!needsEscaping) {     return value;   }  else {     StringBuffer buffer=new StringBuffer(value.length() * 4 / 3);     for (int i=0; i < value.length(); i++) {       char c=value.charAt(i);       if (!(escapeWhitespaces && (c == '\\t' || c == '\\n' || c == '\\r'))) { switch (c) { case '<':           buffer.append(\"&lt;\");         continue; case '>':       buffer.append(\"&gt;\");     continue; case '&':   buffer.append(\"&amp;\"); continue; case '\"': buffer.append(forAttribute ? \"&quot;\" : \"\\\"\"); continue; default : buffer.append(c); continue; } }  else { buffer.append(\"&#x\"); buffer.append(Integer.toHexString(c).toUpperCase()); buffer.append(';'); } } return buffer.toString(); } } "
"public SIPRequest createCancelRequest() throws SipException {   if (!this.getMethod().equals(Request.INVITE))   throw new SipException(\"Attempt to create CANCEL for \" + this.getMethod());   SIPRequest cancel=new SIPRequest();   cancel.setRequestLine((RequestLine)this.requestLine.clone());   cancel.setMethod(Request.CANCEL);   cancel.setHeader((Header)this.callIdHeader.clone());   cancel.setHeader((Header)this.toHeader.clone());   cancel.setHeader((Header)cSeqHeader.clone());   try {     cancel.getCSeq().setMethod(Request.CANCEL);   }  catch (  ParseException e) {     e.printStackTrace();   }   cancel.setHeader((Header)this.fromHeader.clone());   cancel.addFirst((Header)this.getTopmostVia().clone());   cancel.setHeader((Header)this.maxForwardsHeader.clone());   if (this.getRouteHeaders() != null) {     cancel.setHeader((SIPHeaderList<?>)this.getRouteHeaders().clone());   }   if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {     cancel.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());   }   return cancel; } "
"private ChangeRecordEntry parseAddChangeRecordEntry(DN entryDN,List<StringBuilder> lines) throws LDIFException {   Map<ObjectClass,String> objectClasses=new HashMap<>();   Map<AttributeType,List<AttributeBuilder>> attrBuilders=new HashMap<>();   for (  StringBuilder line : lines) {     readAttribute(lines,line,entryDN,objectClasses,attrBuilders,attrBuilders,importConfig.validateSchema());   }   AttributeType ocType=CoreSchema.getObjectClassAttributeType();   AttributeBuilder builder=new AttributeBuilder(ocType);   builder.addAllStrings(objectClasses.values());   Map<AttributeType,List<Attribute>> attributes=toAttributesMap(attrBuilders);   if (attributes.get(ocType) == null) {     attributes.put(ocType,builder.toAttributeList());   }   return new AddChangeRecordEntry(entryDN,attributes); } "
"public synchronized StringBuffer append(char[] chars){   append0(chars);   return this; } "
"public com.sun.identity.liberty.ws.common.jaxb.security.SessionContextStatementType createSessionContextStatementType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.security.impl.SessionContextStatementTypeImpl(); } "
"public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,InstantiableRelationDefinition<C,S> r) throws ArgumentException {   return new CreateSubCommandHandler<>(parser,p,r,r.getNamingPropertyDefinition(),p.child(r,\"DUMMY\")); } "
"public void test_getServerAliases(){   init(SERVER);   assertNull(manager.getServerAliases(null,null));   assertNull(manager.getServerAliases(\"\",null));   String[] resArray=manager.getServerAliases(TYPE_RSA,null);   assertNotNull(resArray);   assertEquals(\"Incorrect length\",1,resArray.length);   assertEquals(\"Incorrect aliase\",\"serverkey_00\",resArray[0].toLowerCase()); } "
"public int size(){   return size; } "
"public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {   if (workingDirectory != null && !workingDirectory.exists()) {     throw new IOException(workingDirectory + \" doesn't exist.\");   }   return executeInternal(command,environment,workingDirectory,streamHandler,null); } "
"public KeyStore build(){   try {     KeyStore keyStore=provider != null ? KeyStore.getInstance(type.toString(),provider) : KeyStore.getInstance(type.toString());     keyStore.load(inputStream,password);     return keyStore;   }  catch (  CertificateException|NoSuchAlgorithmException|IOException|KeyStoreException e) {     DEBUG.error(\"KeyStoreBuilder.build(): Error loading keystore\",e);     throw new IllegalStateException(\"Unable to load keystore\");   }  finally {     if (password != null) {       Arrays.fill(password,'\\0');     }     IOUtils.closeIfNotNull(inputStream);   } } "
"protected static EventListener removeInternal(EventListener l,EventListener oldl){   if (l == oldl || l == null) {     return null;   }  else   if (l instanceof DnDEventMulticaster) {     return ((DnDEventMulticaster)l).remove(oldl);   }  else {     return l;   } } "
"@Override protected void fill_list(){   BrdComponents components=board_frame.board_panel.itera_board.get_routing_board().brd_components;   BrdComponent[] sorted_arr=new BrdComponent[components.count()];   for (int i=0; i < sorted_arr.length; ++i) {     sorted_arr[i]=components.get(i + 1);   }   java.util.Arrays.sort(sorted_arr);   for (int i=0; i < sorted_arr.length; ++i) {     add_to_list(sorted_arr[i]);   }   gui_list.setVisibleRowCount(Math.min(components.count(),DEFAULT_TABLE_SIZE)); } "
"private static float[] RGBtoHSV(float[] rgb,float[] hsv){   if (hsv == null) {     hsv=new float[3];   }   float max=ColorModelHSL.max(rgb[0],rgb[1],rgb[2]);   float min=ColorModelHSL.min(rgb[0],rgb[1],rgb[2]);   float saturation=max - min;   if (saturation > 0.0f) {     saturation/=max;   }   hsv[0]=ColorModelHSL.getHue(rgb[0],rgb[1],rgb[2],max,min);   hsv[1]=saturation;   hsv[2]=max;   return hsv; } "
"private void registerDeleteListener(DN baseDN,ConfigDeleteListener adaptor) throws ConfigException {   if (configRepository.hasEntry(baseDN)) {     configRepository.registerDeleteListener(baseDN,adaptor);   }  else {     ConfigAddListener delayedListener=new DelayedConfigAddListener(baseDN,adaptor,configRepository);     registerDelayedListener(baseDN,delayedListener);   } } "
"private void init(ComponentContext context) throws ServletException, NamespaceException {   JsonValue config=enhancedConfig.getConfigurationAsJson(context);   if (!config.get(CONFIG_ENABLED).isNull() && Boolean.FALSE.equals(config.get(CONFIG_ENABLED).asBoolean())) {     logger.info(\"UI is disabled - not registering UI servlet\");     return;   }  else   if (config.get(CONFIG_CONTEXT_ROOT) == null || config.get(CONFIG_CONTEXT_ROOT).isNull()) {     logger.info(\"UI does not specify contextRoot - unable to register servlet\");     return;   }  else   if (config.get(CONFIG_DEFAULT_DIR) == null || config.get(CONFIG_DEFAULT_DIR).isNull()) {     logger.info(\"UI does not specify default directory - unable to register servlet\");     return;   }  else   if (config.get(CONFIG_EXTENSION_DIR) == null || config.get(CONFIG_EXTENSION_DIR).isNull()) {     logger.info(\"UI does not specify extension directory - unable to register servlet\");     return;   }   defaultDir=config.get(CONFIG_DEFAULT_DIR).asString();   extensionDir=config.get(CONFIG_EXTENSION_DIR).asString();   contextRoot=prependSlash(config.get(CONFIG_CONTEXT_ROOT).asString());   Dictionary<String,Object> props=new Hashtable<>();   webContainer.registerServlet(contextRoot,this,props,webContainer.getDefaultSharedHttpContext());   logger.debug(\"Registered UI servlet at {}\",contextRoot); } "
"public long timestamp(){   if (version != 1) {     throw new UnsupportedOperationException();   }   return timestamp; } "
"protected static int bufferToValue(ByteBuffer buffer){   byte byteBuffer[]=new byte[INTEGRAL_SIZE];   buffer.get(byteBuffer,0,INTEGRAL_SIZE);   return bufferToValue(byteBuffer); } "
"public int compare(Object s1,Object s2){   int result=0;   String str1=(String)s1;   String str2=(String)s2;   int len1=((String)s1).length();   int len2=((String)s2).length();   if (len1 > len2) {     result=-1;   }  else   if (len1 < len2) {     result=1;   }   return result; } "
"public TransportNotSupportedException(String message,Throwable cause){   super(message,cause); } "
"public int read() throws IOException {   int c=in.read();   if (c >= 0)   monitor.setProgress(++nread);   if (monitor.isCanceled()) {     InterruptedIOException exc=new InterruptedIOException(\"progress\");     exc.bytesTransferred=nread;     throw exc;   }   return c; } "
"public SessionException(Throwable rootCause){   super(rootCause); } "
"public MonitoredCTSConnectionFactory(ConnectionFactory<C> connectionFactory,CTSConnectionMonitoringStore monitorStore){   this.connectionFactory=connectionFactory;   this.monitorStore=monitorStore; } "
"public DirectoryNotEmptyException(String dir){   super(dir); } "
"public Method element(){   return this.element; } "
"public final void testHashCode01(){   ECPoint f=new ECPoint(BigInteger.valueOf(-23457L),BigInteger.ONE);   int hc=f.hashCode();   assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());   hc=ECPoint.POINT_INFINITY.hashCode();   assertTrue(hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode() && hc == ECPoint.POINT_INFINITY.hashCode()); } "
"public com.sun.identity.liberty.ws.common.jaxb.ac.AlphabetType createAlphabetType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AlphabetTypeImpl(); } "
"private static QueryResponseHandler createPagingHandler(QueryResourceHandler handler,QueryRequest request){   if (isPagingRequested(request)) {     return new PagingQueryResponseHandler(new QueryResponseHandler(handler),Math.max(0,request.getPageSize()),Math.max(0,request.getPagedResultsOffset()));   }  else {     return new QueryResponseHandler(handler);   } } "
"void checkDSDegradedStatus(){   final int degradedStatusThreshold=localReplicationServer.getDegradedStatusThreshold();   if (degradedStatusThreshold > 0) {     for (    DataServerHandler serverHandler : connectedDSs.values()) {       final int nChanges=serverHandler.getRcvMsgQueueSize();       if (logger.isTraceEnabled()) {         logger.trace(\"In RS \" + getLocalRSServerId() + \", for baseDN=\"+ getBaseDN()+ \": \"+ \"Status analyzer: DS \"+ serverHandler.getServerId()+ \" has \"+ nChanges+ \" message(s) in writer queue.\");       }       if (nChanges >= degradedStatusThreshold) {         if (serverHandler.getStatus() == NORMAL_STATUS && changeStatus(serverHandler,TO_DEGRADED_STATUS_EVENT)) {           break;         }       }  else {         if (serverHandler.getStatus() == DEGRADED_STATUS && changeStatus(serverHandler,TO_NORMAL_STATUS_EVENT)) {           break;         }       }     }   } } "
"public void testMinUnequal1(){   String a=\"92948782094488478231212478987482988429808779810457634781384756794987\";   int aScale=24;   String b=\"92948782094488478231212478987482988429808779810457634781384756794987\";   int bScale=41;   String c=\"92948782094488478231212478987482988429808779810457634781384756794987\";   int cScale=41;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);   assertEquals(\"incorrect value\",cNumber,aNumber.min(bNumber)); } "
"public boolean equals(Object other){   if (this == other)   return (true);   if (other instanceof Oid)   return this.oid.equals((Object)((Oid)other).oid);  else   if (other instanceof ObjectIdentifier)   return this.oid.equals(other);  else   return false; } "
"public Object decode(Object value) throws DecoderException {   if (value == null) {     return null;   }  else   if (value instanceof String) {     return decode((String)value);   }  else {     throw new DecoderException(\"Objects of type \" + value.getClass().getName() + \" cannot be decoded using BCodec\");   } } "
"private Support_TestWebData(String path,String type){   File file=new File(path);   testLength=file.length();   testLastModified=file.lastModified();   testName=file.getName();   testType=type;   testDir=file.isDirectory();   ByteArrayOutputStream out=new ByteArrayOutputStream();   FileInputStream in=null;   try {     in=new FileInputStream(file);     while (in.available() > 0) {       out.write(in.read());     }     in.close();     out.flush();     test0Data=out.toByteArray();     out.close();     test0DataAvailable=true;     return;   }  catch (  Exception e) {     e.printStackTrace();   }  finally {     try {       if (in != null) {         in.close();       }       if (out != null) {         out.close();       }     }  catch (    IOException e) {     }   } } "
"public StringValueExp(String val){   this.val=val; } "
"protected String toUrlStr(String base,Filter filter,SearchScope scope){   StringBuilder urlBuf=new StringBuilder();   urlBuf.append(\"ldap:///\").append(base).append(\"?\");   if (SearchScope.BASE_OBJECT.equals(scope)) {     urlBuf.append(\"?base\");   }  else   if (SearchScope.SINGLE_LEVEL.equals(scope)) {     urlBuf.append(\"?one\");   }  else {     urlBuf.append(\"?sub\");   }   if (filter != null && !filter.toString().isEmpty()) {     urlBuf.append(\"?\").append(filter);   }  else {     urlBuf.append(\"?\");   }   return urlBuf.toString(); } "
"public int component_count(){   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"component_count\",_opsClass);   DynUnionOperations $self=(DynUnionOperations)$so.servant;   try {     return $self.component_count();   }   finally {     _servant_postinvoke($so);   } } "
"protected CanReadFileFilter(){ } "
"public void updateEntityConfig(String realm,String name,String entityId) throws WSFederationMetaException, JAXBException {   String classMethod=\"WSFederationCOTUtils.updateEntityConfig: \";   WSFederationMetaManager metaManager=null;   if (callerSession != null) {     metaManager=new WSFederationMetaManager(callerSession);   }  else {     metaManager=new WSFederationMetaManager();   }   ObjectFactory objFactory=new ObjectFactory();   FederationElement edes=metaManager.getEntityDescriptor(realm,entityId);   if (edes == null) {     debug.error(classMethod + \"No such entity: \" + entityId);     String[] data={realm,entityId};     throw new WSFederationMetaException(\"entityid_invalid\",data);   }   FederationConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);   if (eConfig == null) {     BaseConfigType bctype=null;     AttributeType atype=objFactory.createAttributeType();     atype.setName(SAML2Constants.COT_LIST);     atype.getValue().add(name);     FederationConfigElement ele=objFactory.createFederationConfigElement();     ele.setFederationID(entityId);     ele.setHosted(false);     List ll=ele.getIDPSSOConfigOrSPSSOConfig();     if (metaManager.getUriNamedClaimTypesOffered(edes) != null) {       bctype=objFactory.createIDPSSOConfigElement();       bctype.getAttribute().add(atype);       ll.add(bctype);     }  else {       bctype=objFactory.createSPSSOConfigElement();       bctype.getAttribute().add(atype);       ll.add(bctype);     }     metaManager.setEntityConfig(realm,ele);   }  else {     List elist=eConfig.getIDPSSOConfigOrSPSSOConfig();     for (Iterator iter=elist.iterator(); iter.hasNext(); ) {       BaseConfigType bConfig=(BaseConfigType)iter.next();       List list=bConfig.getAttribute();       boolean foundCOT=false;       for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {         AttributeType avp=(AttributeType)iter2.next();         if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {           foundCOT=true;           List avpl=avp.getValue();           if (avpl.isEmpty() || !containsValue(avpl,name)) {             avpl.add(name);             metaManager.setEntityConfig(realm,eConfig);             break;           }         }       }       if (!foundCOT) {         AttributeType atype=objFactory.createAttributeType();         atype.setName(SAML2Constants.COT_LIST);         atype.getValue().add(name);         list.add(atype);         metaManager.setEntityConfig(realm,eConfig);       }     }   } } "
"public static SQLiteConnectionPool open(SQLiteDatabaseConfiguration configuration){   if (configuration == null) {     throw new IllegalArgumentException(\"configuration must not be null.\");   }   SQLiteConnectionPool pool=new SQLiteConnectionPool(configuration);   pool.open();   return pool; } "
"public EntryEncodeConfig(){   excludeDN=false;   compressAttrDescriptions=false;   compressObjectClassSets=false;   compressedSchema=DirectoryServer.getDefaultCompressedSchema();   encodedRepresentation=0x00; } "
"public String toString(){   return SSOSessionID.toString(); } "
"@Override public void error(SAXParseException exception) throws SAXException {   log.error(\"Parse Error at line \" + exception.getLineNumber() + \" column \"+ exception.getColumnNumber()+ \": \"+ exception.getMessage(),exception);   if (errorHandler != null) {     errorHandler.error(exception);   } } "
"public static Component createHorizontalGlue(){   return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(Short.MAX_VALUE,0)); } "
"void writeComment(String string) throws IOException {   write(\"<!--\");   if (string != null) {     write(string);   }   write(\"-->\");   writeLineSeparator();   indentSmart(); } "
"public static String buildTimeString(int year,int month,int day,int hour,int minute,int second){   return String.format(\"%04d-%02d-%02d %02d:%02d:%02d\",year,month,day,hour,minute,second); } "
"@Override public Modification toModification() throws LDAPException {   return new Modification(modificationType,attribute.toAttribute()); } "
"public NSDate(byte[] bytes,final int startIndex,final int endIndex){   date=new Date(EPOCH + (long)(1000 * BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex))); } "
"private boolean checkAttribute(String servAlg,String attribute,String val){   String attributeValue=getPropertyIgnoreCase(servAlg + ' ' + attribute);   if (attributeValue != null) {     if (attribute.equalsIgnoreCase(\"KeySize\")) {       if (Integer.parseInt(attributeValue) >= Integer.parseInt(val)) {         return true;       }     }  else {       if (attributeValue.equalsIgnoreCase(val)) {         return true;       }     }   }   return false; } "
"private void initH2Console(ServletContext servletContext){   log.debug(\"Initialize H2 console\");   ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet(\"H2Console\",new org.h2.server.web.WebServlet());   h2ConsoleServlet.addMapping(\"/h2-console/*\");   h2ConsoleServlet.setInitParameter(\"-properties\",\"src/main/resources/\");   h2ConsoleServlet.setLoadOnStartup(1); } "
"private void deregister(final K k){   ObjectDeque<T> objectDeque;   objectDeque=poolMap.get(k);   final long numInterested=objectDeque.getNumInterested().decrementAndGet();   if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {     final Lock writeLock=keyLock.writeLock();     writeLock.lock();     try {       if (objectDeque.getCreateCount().get() == 0 && objectDeque.getNumInterested().get() == 0) {         poolMap.remove(k);         poolKeyList.remove(k);       }     }   finally {       writeLock.unlock();     }   } } "
"public void test_read_writeChar() throws IOException {   RandomAccessFile raf=new java.io.RandomAccessFile(fileName,\"rw\");   raf.writeChar(Character.MIN_VALUE);   raf.writeChar('T');   raf.writeChar(Character.MAX_VALUE);   raf.writeChar(Character.MIN_VALUE - 1);   raf.writeChar(Character.MAX_VALUE + 1);   raf.seek(0);   assertEquals(\"Test 1: Incorrect value written or read;\",Character.MIN_VALUE,raf.readChar());   assertEquals(\"Test 2: Incorrect value written or read;\",'T',raf.readChar());   assertEquals(\"Test 3: Incorrect value written or read;\",Character.MAX_VALUE,raf.readChar());   assertEquals(\"Test 4: Incorrect value written or read;\",0xffff,raf.readChar());   assertEquals(\"Test 5: Incorrect value written or read;\",0,raf.readChar());   try {     raf.readChar();     fail(\"Test 6: EOFException expected.\");   }  catch (  EOFException e) {   }   raf.close();   try {     raf.writeChar('E');     fail(\"Test 7: IOException expected.\");   }  catch (  IOException e) {   }   try {     raf.readChar();     fail(\"Test 8: IOException expected.\");   }  catch (  IOException e) {   } } "
"public void signXML() throws SAMLException {   throw new SAMLException(FSUtils.BUNDLE_NAME,\"unsupportedOperation\",null); } "
"public QCharset(String name,float q){   if (name == null) {     throw new IllegalArgumentException(\"QCharset::charset name can't be\" + \"NULL\");   }   this.name=name;   qFactor=q; } "
"@Inject public PrivilegeValidator(RealmValidator realmValidator){   this.realmValidator=realmValidator; } "
"@Override public void addLocaleEncodingMappingParameter(String locale,String encoding){   getCharsetMapper().addCharsetMappingFromDeploymentDescriptor(locale,encoding); } "
"private boolean complete_expansion_room(ExpandRoomFreespaceIncomplete p_incomplete_room){   Collection<ExpandRoomFreespaceComplete> completed_rooms=autoroute_engine.complete_expansion_room(p_incomplete_room);   return (completed_rooms.size() > 0); } "
"public PathFileComparator(){   this.caseSensitivity=IOCase.SENSITIVE; } "
"public void keyPressed(KeyEvent e){   ((KeyListener)a).keyPressed(e);   ((KeyListener)b).keyPressed(e); } "
"@SuppressWarnings(\"unused\") public static long parseUnsignedInt(byte[] bytes){   return parseUnsignedInt(bytes,0,bytes.length); } "
"public ProviderDoesNotExistException(){   super(); } "
"public final void testPSSParameterSpec0204(){   try {     new PSSParameterSpec(\"SHA-1\",\"MGF1\",MGF1ParameterSpec.SHA1,-20,1);     fail(\"Expected IAE not thrown\");   }  catch (  IllegalArgumentException e) {   } } "
"public void test_PBKDF2_rfc3211_192() throws Exception {   char[] password=(\"All n-entities must communicate with other \" + \"n-entities via n-1 entiteeheehees\").toCharArray();   byte[] salt=new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x78,(byte)0x56,(byte)0x34,(byte)0x12};   int iterations=500;   int keyLength=192;   byte[] expected=new byte[]{(byte)0x6a,(byte)0x89,(byte)0x70,(byte)0xbf,(byte)0x68,(byte)0xc9,(byte)0x2c,(byte)0xae,(byte)0xa8,(byte)0x4a,(byte)0x8d,(byte)0xf2,(byte)0x85,(byte)0x10,(byte)0x85,(byte)0x86,(byte)0x07,(byte)0x12,(byte)0x63,(byte)0x80,(byte)0xcc,(byte)0x47,(byte)0xab,(byte)0x2d};   test_PBKDF2_UTF8(password,salt,iterations,keyLength,expected);   test_PBKDF2_8BIT(password,salt,iterations,keyLength,expected); } "
"public int find(char[] key,int start){   int d;   char p=root;   int i=start;   char c;   while (p != 0) {     if (sc[p] == 0xFFFF) {       if (strcmp(key,i,kv.getArray(),lo[p]) == 0) {         return eq[p];       }  else {         return -1;       }     }     c=key[i];     d=c - sc[p];     if (d == 0) {       if (c == 0) {         return eq[p];       }       i++;       p=eq[p];     }  else     if (d < 0) {       p=lo[p];     }  else {       p=hi[p];     }   }   return -1; } "
"public static void deleteEntry(DN dn) throws Exception {   DeleteOperation deleteOperation=getRootConnection().processDelete(dn);   assertEquals(deleteOperation.getResultCode(),ResultCode.SUCCESS); } "
"public GetMaxIdleTimeActionHandler(SessionResourceUtil sessionResourceUtil){   this.sessionResourceUtil=sessionResourceUtil; } "
"private void copyACls(final List<AccessControlLevel> accessControlLevels2){   for (  AccessControlLevel acl : this.accessControlLevels) {     accessControlLevels2.add(new AccessControlLevel(acl));   } } "
"public boolean visitVariableRef(ExpressionOwner owner,Variable var){   m_isAbs=false;   return true; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_attrappendchild6.class,args); } "
"public NamingException(String explanation){   super(explanation);   resolvedName=remainingName=null;   resolvedObj=null; } "
"public void write(String s){   write(s,0,s.length()); } "
"private BackupProtos.Key backupKeyToKey(String backupKey) throws InvalidBackupException {   try {     BackupProtos.Key key=BackupProtos.Key.parseFrom(Base64.decode(backupKey,Base64.DEFAULT));     if (key.checksum != checkKey(key)) {       key=null;       throw new InvalidBackupException(\"invalid key read from stream\" + backupKey);     }     return key;   }  catch (  InvalidProtocolBufferNanoException e) {     throw new InvalidBackupException(e);   } catch (  IllegalArgumentException e) {     throw new InvalidBackupException(e);   } } "
"public StringDateTime(String identifier,AbstractTagFrameBody frameBody){   super(identifier,frameBody); } "
"public ArrayList<PlaLineInt> intersection(PlaSegmentInt p_other){   ArrayList<PlaLineInt> risul=new ArrayList<PlaLineInt>(3);   if (!bounding_box().intersects(p_other.bounding_box())) {     return risul;   }   PlaSide start_point_side=start_point().side_of(p_other.middle);   PlaSide end_point_side=end_point().side_of(p_other.middle);   if (start_point_side == PlaSide.COLLINEAR && end_point_side == PlaSide.COLLINEAR) {     PlaSegmentInt this_sorted=sort_endpoints_in_x_y();     PlaSegmentInt other_sorted=p_other.sort_endpoints_in_x_y();     PlaSegmentInt left_line;     PlaSegmentInt right_line;     if (this_sorted.start_point().compare_x_y(other_sorted.start_point()) <= 0) {       left_line=this_sorted;       right_line=other_sorted;     }  else {       left_line=other_sorted;       right_line=this_sorted;     }     int cmp=left_line.end_point().compare_x_y(right_line.start_point());     if (cmp < 0) {       return risul;     }     if (cmp == 0) {       risul.add(left_line.end);       return risul;     }     risul.add(right_line.start);     if (right_line.end_point().compare_x_y(left_line.end_point()) >= 0)     risul.add(left_line.end);  else     risul.add(right_line.end);     return risul;   }   if (start_point_side == end_point_side || p_other.start_point().side_of(middle) == p_other.end_point().side_of(middle)) {     return risul;   }   risul.add(p_other.middle);   return risul; } "
"void decodeHeader(final ByteArrayScanner scanner,byte... allowedTypes) throws DataFormatException {   final byte msgType=scanner.nextByte();   if (!isTypeAllowed(allowedTypes,msgType)) {     throw new DataFormatException(\"byte[] is not a valid start msg: \" + msgType);   }   final byte version=scanner.nextByte();   if (msgType == MSG_TYPE_REPL_SERVER_START_V1) {     if (version != ProtocolVersion.REPLICATION_PROTOCOL_V1_REAL) {       throw new DataFormatException(\"Not a valid message: type is \" + msgType + \" but protocol version byte is \"+ version+ \" instead of \"+ ProtocolVersion.REPLICATION_PROTOCOL_V1_REAL);     }     protocolVersion=ProtocolVersion.REPLICATION_PROTOCOL_V1;     scanner.skipZeroSeparator();     generationId=scanner.nextLongUTF8();   }  else {     if (version < ProtocolVersion.REPLICATION_PROTOCOL_V2) {       throw new DataFormatException(\"Not a valid message: type is \" + msgType + \" but protocol version byte is \"+ version+ \" instead of \"+ ProtocolVersion.getCurrentVersion());     }     protocolVersion=version;     generationId=scanner.nextLongUTF8();     groupId=scanner.nextByte();   } } "
"@Override public HijrahDate dateEpochDay(long epochDay){   return HijrahDate.ofEpochDay(this,epochDay); } "
"public boolean canSetParameter(String name,Object value){   if (value instanceof Boolean) {     if (name.equalsIgnoreCase(DOMConstants.DOM_CDATA_SECTIONS) || name.equalsIgnoreCase(DOMConstants.DOM_COMMENTS) || name.equalsIgnoreCase(DOMConstants.DOM_ENTITIES)|| name.equalsIgnoreCase(DOMConstants.DOM_INFOSET)|| name.equalsIgnoreCase(DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACES)|| name.equalsIgnoreCase(DOMConstants.DOM_NAMESPACE_DECLARATIONS)|| name.equalsIgnoreCase(DOMConstants.DOM_SPLIT_CDATA)|| name.equalsIgnoreCase(DOMConstants.DOM_WELLFORMED)|| name.equalsIgnoreCase(DOMConstants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(DOMConstants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(DOMConstants.DOM_XMLDECL)) {       return true;     }  else     if (name.equalsIgnoreCase(DOMConstants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(DOMConstants.DOM_CHECK_CHAR_NORMALIZATION) || name.equalsIgnoreCase(DOMConstants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE_IF_SCHEMA)|| name.equalsIgnoreCase(DOMConstants.DOM_VALIDATE)) {       return !((Boolean)value).booleanValue();     }  else     if (name.equalsIgnoreCase(DOMConstants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {       return ((Boolean)value).booleanValue();     }   }  else   if (name.equalsIgnoreCase(DOMConstants.DOM_ERROR_HANDLER) && value == null || value instanceof DOMErrorHandler) {     return true;   }   return false; } "
"private void doAcquireInterruptibly(int arg) throws InterruptedException {   final Node node=addWaiter(Node.EXCLUSIVE);   boolean failed=true;   try {     for (; ; ) {       final Node p=node.predecessor();       if (p == head && tryAcquire(arg)) {         setHead(node);         p.next=null;         failed=false;         return;       }       if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();     }   }   finally {     if (failed)     cancelAcquire(node);   } } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodedocumentnodename.class,args); } "
"public static GitHubClient createClient(String url){   try {     String host=new URL(url).getHost();     if (HOST_DEFAULT.equals(host) || HOST_GISTS.equals(host))     host=HOST_API;     return new GitHubClient(host);   }  catch (  IOException e) {     throw new IllegalArgumentException(e);   } } "
"synchronized boolean testAndSetIsDialogTerminatedEventDelivered(){   boolean retval=this.dialogTerminatedEventDelivered;   this.dialogTerminatedEventDelivered=true;   return retval; } "
"public boolean equals(Object obj){   if (this == obj)   return true;   if (obj instanceof ECFieldFp) {     return (p.equals(((ECFieldFp)obj).p));   }   return false; } "
"@BeforeClass public void startServer() throws Exception {   TestCaseUtils.startServer(); } "
"public String translatePrimaryID(String primaryID,String siteID){   return update(new ResolvedServer(primaryID,siteID)).getPrimaryID(); } "
"public static String readFile(File file) throws IOException {   return new String(readFileBytes(file)); } "
"public boolean isFiltered(String requestUrl,boolean thirdParty){   return isFiltered(requestUrl,thirdParty,EnumSet.of(ContentType.detectContentType(requestUrl))); } "
"public static int copy(InputStream input,OutputStream output) throws IOException {   long count=copyLarge(input,output);   if (count > Integer.MAX_VALUE) {     return -1;   }   return (int)count; } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   logger.info(\"Got an INVITE  \" + request);   timer.schedule(new DelayedInviteResponsesTask(requestEvent,sipProvider),100); } "
"@Override public void clear(){   Arrays.fill(elements,null);   size=0; } "
"public String to_url(String addr,String sn) throws org.omg.CosNaming.NamingContextExtPackage.InvalidAddress, org.omg.CosNaming.NamingContextPackage.InvalidName {   org.omg.CORBA.portable.InputStream $in=null;   try {     org.omg.CORBA.portable.OutputStream $out=_request(\"to_url\",true);     org.omg.CosNaming.NamingContextExtPackage.AddressHelper.write($out,addr);     org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.write($out,sn);     $in=_invoke($out);     String $result=org.omg.CosNaming.NamingContextExtPackage.URLStringHelper.read($in);     return $result;   }  catch (  org.omg.CORBA.portable.ApplicationException $ex) {     $in=$ex.getInputStream();     String _id=$ex.getId();     if (_id.equals(\"IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0\"))     throw org.omg.CosNaming.NamingContextExtPackage.InvalidAddressHelper.read($in);  else     if (_id.equals(\"IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0\"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in);  else     throw new org.omg.CORBA.MARSHAL(_id);   } catch (  org.omg.CORBA.portable.RemarshalException $rm) {     return to_url(addr,sn);   }  finally {     _releaseReply($in);   } } "
"@Override public int hashCode(){   return mainAttributes.hashCode() ^ getEntries().hashCode(); } "
"private OptionalLong(long value){   this.isPresent=true;   this.value=value; } "
"public String toXML(){   StringBuilder stringBuilder=new StringBuilder();   return stringBuilder.toString(); } "
"public Hyphenation hyphenate(String word){   return hyphenator != null ? hyphenator.hyphenate(word) : null; } "
"public void move_selected_items(Point2D p_from_location){   if (board_is_read_only)   return;   if (!is_StateSelectedItem())   return;   StateSelectedItem curr_state=(StateSelectedItem)interactive_state;   Collection<BrdItem> item_list=curr_state.get_item_list();   PlaPointFloat from_location=gdi_context.coordinate_transform.screen_to_board(p_from_location);   StateInteractive new_state=StateMoveItem.get_instance(from_location,item_list,interactive_state,this,actlog);   set_interactive_state(new_state);   repaint(); } "
"@Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {   return decode(image,null); } "
"public LazyReplicatedMap(MapOwner owner,Channel channel,long timeout,String mapContextName,int initialCapacity,float loadFactor,ClassLoader[] cls){   super(owner,channel,timeout,mapContextName,initialCapacity,loadFactor,Channel.SEND_OPTIONS_DEFAULT,cls,true); } "
"private static void deleteDirectoryOnExit(File directory) throws IOException {   if (!directory.exists()) {     return;   }   directory.deleteOnExit();   if (!isSymlink(directory)) {     cleanDirectoryOnExit(directory);   } } "
"public Vector add(Vector vec){   x+=vec.x;   y+=vec.y;   z+=vec.z;   return this; } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node childNode;   Node newChild;   Node lchild;   Node fchild;   String lchildName;   String fchildName;   Node appendedChild;   String initialName;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"employee\");   childNode=elementList.item(1);   newChild=childNode.getFirstChild();   initialName=newChild.getNodeName();   appendedChild=childNode.appendChild(newChild);   fchild=childNode.getFirstChild();   fchildName=fchild.getNodeName();   lchild=childNode.getLastChild();   lchildName=lchild.getNodeName();   if (equals(\"employeeId\",initialName)) {     assertEquals(\"assert1_nowhitespace\",\"name\",fchildName);     assertEquals(\"assert2_nowhitespace\",\"employeeId\",lchildName);   }  else {     assertEquals(\"assert1\",\"employeeId\",fchildName);     assertEquals(\"assert2\",\"#text\",lchildName);   } } "
"protected View createChild(String name){   if (name.equals(VALUE_TEXTFIELD)) {     if (model.getValueOptionList() == null) {       return new TextField(this,name,null);     }  else {       return new CCSelect(this,name,(Object)null,model.getValueOptionList());     }   }  else {     return super.createChild(name);   } } "
"public void testClearBitException(){   byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};   int aSign=1;   int number=-7;   BigInteger aNumber=new BigInteger(aSign,aBytes);   try {     aNumber.clearBit(number);     fail(\"ArithmeticException has not been caught\");   }  catch (  ArithmeticException e) {   } } "
"public Hyphenator(String lang,String country,int leftMin,int rightMin,Map<String,String> hyphPathNames){   this(lang,country,leftMin,rightMin);   this.hyphPathNames=hyphPathNames; } "
"public static int createImageTexture(ByteBuffer data,int width,int height,int format){   int[] textureHandles=new int[1];   int textureHandle;   GLES20.glGenTextures(1,textureHandles,0);   textureHandle=textureHandles[0];   GlUtil.checkGlError(\"glGenTextures\");   GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle);   GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);   GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);   GlUtil.checkGlError(\"loadImageTexture\");   GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,format,width,height,0,format,GLES20.GL_UNSIGNED_BYTE,data);   GlUtil.checkGlError(\"loadImageTexture\");   return textureHandle; } "
"public Builder structuralObjectClassOID(final String nameOrOID){   this.structuralObjectClassOID=nameOrOID;   return this; } "
"public static int resetPostDisconnectCount(){   return postDisconnectCounter.getAndSet(0); } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(name);   if (hasDescription()) {     sb.append(\" (\");     sb.append(description);     sb.append(\")\");   }   return sb.toString(); } "
"public void propertyChange(PropertyChangeEvent e){   if (e.getSource() == noteLabel && e.getPropertyName() == \"text\") {     firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);   } } "
"public int available() throws IOException {   ensureOpen();   if (reachEOF) {     return 0;   }  else {     return 1;   } } "
"private AuditService buildAuditService(JsonValue config) throws AuditException {   final JsonValue auditServiceConfig=config.get(\"config\");   final AuditServiceConfiguration auditServiceConfiguration;   if (auditServiceConfig.isNotNull()) {     auditServiceConfiguration=AuditJsonConfig.parseAuditServiceConfiguration(auditServiceConfig);   }  else {     auditServiceConfiguration=new AuditServiceConfiguration();   }   AuditServiceBuilder auditServiceBuilder=newAuditService();   auditServiceBuilder.withConfiguration(auditServiceConfiguration);   auditServiceBuilder.withDependencyProvider(new GatewayDependencyProvider(heap));   final ClassLoader classLoader=this.getClass().getClassLoader();   for (  final JsonValue handlerConfig : config.get(\"event-handlers\")) {     try {       registerHandlerToService(handlerConfig,auditServiceBuilder,classLoader);     }  catch (    Exception ex) {       logger.error(\"Unable to register handler defined by config: \" + handlerConfig,ex);     }   }   return auditServiceBuilder.build(); } "
"public Mp4BoxHeader(ByteBuffer headerData){   update(headerData); } "
"public static boolean isWeakKey(byte[] key,int offset){   return isWeakKey(key,offset,key.length - offset); } "
"@Override public String toString(){   return getClass().getName() + \"[index=\" + currentPosition+ \", errorIndex=\"+ errorIndex+ \"]\"; } "
"private void addMethod(MappedClass clazz,String[] parts){   String original=\"\";   String newName=\"\";   String desc=\"\";   if (parts.length == 3) {     original=parts[1];     newName=parts[1];     desc=parts[2];   }  else   if (parts.length == 4) {     original=parts[1];     newName=parts[2];     desc=parts[3];   }  else {     return;   }   if (desc.contains(\"Lnone/\")) {     desc=desc.replace(\"Lnone/\",\"L\");   }   MappedMember mm=new MappedMember(clazz,findMethod(clazz.getNode(),original,desc),-1,desc,original);   mm.setNewName(newName);   clazz.addMethod(mm); } "
"@Override public ShapeTileSimplex intersection(ShapeTileBox p_box){   return intersection(p_box.to_Simplex()); } "
"public static <T>void fill(List<? super T> list,T object){   ListIterator<? super T> it=list.listIterator();   while (it.hasNext()) {     it.next();     it.set(object);   } } "
"private boolean isConfigBackend(String id){   return \"tasks\".equalsIgnoreCase(id) || \"schema\".equalsIgnoreCase(id) || \"config\".equalsIgnoreCase(id)|| \"monitor\".equalsIgnoreCase(id)|| \"backup\".equalsIgnoreCase(id)|| ADSContext.getDefaultBackendName().equalsIgnoreCase(id)|| \"ads-truststore\".equalsIgnoreCase(id); } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   try {     serverTransaction=sipProvider.getNewServerTransaction(request);     dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);     dialog.disableSequenceNumberValidation();   }  catch (  Exception e) {     e.printStackTrace();   }   try {     Response okResponse=messageFactory.createResponse(Response.OK,request);     FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);     from.removeParameter(\"tag\");     Address address=addressFactory.createAddress(\"Shootme <sip:\" + myAddress + \":\"+ myPort+ \">\");     ContactHeader contactHeader=headerFactory.createContactHeader(address);     ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);     fromHeader.setTag(\"12345\");     okResponse.addHeader(contactHeader);     serverTransaction.sendResponse(okResponse);   }  catch (  Exception ex) {     ex.printStackTrace();     System.exit(0);   } } "
"protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){   propertyChangeSupport.firePropertyChange(propertyName,oldValue,newValue); } "
"private Map handleLogoutRequest(Element elt,FSLogoutNotification logoutRequest,SOAPMessage msgLogout,HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String providerAlias,String realm,String hostedEntityId,String hostedRole){   try {     String remoteEntityId=logoutRequest.getProviderId();     ProviderDescriptorType remoteDesc=getRemoteProviderDescriptor(hostedRole,remoteEntityId,realm);     if (remoteDesc == null) {       return null;     }     boolean isIDP=false;     if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {       isIDP=true;     }     X509Certificate remoteCert=KeyUtil.getVerificationCert(remoteDesc,remoteEntityId,isIDP);     if (!FSServiceUtils.isSigningOn() || verifyRequestSignature(elt,msgLogout,remoteCert)) {       FSUtils.debug.message(\"Logout Signature successfully verified\");       if (providerAlias == null || providerAlias.length() < 1) {         FSUtils.debug.message(\"Unable to retrieve alias, \" + \"Hosted Provider Cannot process logout request\");         return null;       }       if (FSUtils.debug.messageEnabled()) {         FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest: \" + \"Completed forming request FSLogoutNotification\");       }       IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();       if (metaManager.isTrustedProvider(realm,hostedEntityId,remoteEntityId)) {         String userID=FSLogoutUtil.getUserFromRequest(logoutRequest,realm,hostedEntityId,hostedRole,hostedConfig,providerAlias);         if (FSUtils.debug.messageEnabled()) {           FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest\" + \" found user Id = \" + userID);         }         if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {           FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);           if (spAdapter != null) {             if (FSUtils.debug.messageEnabled()) {               FSUtils.debug.message(\"FSSOAPReceiver, \" + \"call preSingleLogoutProcess, IDP/SOAP\");             }             try {               spAdapter.preSingleLogoutProcess(hostedEntityId,request,response,userID,logoutRequest,null,IFSConstants.LOGOUT_IDP_SOAP_PROFILE);             }  catch (            Exception e) {               FSUtils.debug.error(\"preSingleLogoutProcess.\" + \"IDP/SOAP\",e);             }           }         }         if (!isUserExists(userID,providerAlias)) {           if (FSUtils.debug.messageEnabled()) {             FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest: User \" + \"does not exist locally. Finding remotely\");           }           List platformList=null;           try {             platformList=SystemConfigurationUtil.getServerList();           }  catch (          SystemConfigurationException se) {             if (FSUtils.debug.messageEnabled()) {               FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest: \" + \"Couldn't find remote server:\",se);             }           }           if (platformList == null) {             if (FSUtils.debug.messageEnabled()) {               FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest\" + \"platformList is null\");             }             return null;           }           Iterator iter=platformList.iterator();           while (iter.hasNext()) {             String remoteServerURL=(String)iter.next();             StringBuffer tmpremoteURL=new StringBuffer(remoteServerURL);             tmpremoteURL.append(SystemConfigurationUtil.getProperty(\"com.iplanet.am.services.\" + \"deploymentDescriptor\"));             if (FSUtils.debug.messageEnabled()) {               FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest\" + \"remoteServerURL = \" + remoteServerURL + \" and self serverUrl =\"+ FSServiceUtils.getBaseURL());             }             if ((FSServiceUtils.getBaseURL()).equalsIgnoreCase(remoteServerURL.toString())) {               continue;             }             FSAssertionManagerClient amc=new FSAssertionManagerClient(providerAlias,getFullServiceURL(remoteServerURL));             if (amc.isUserExists(userID)) {               if (FSUtils.debug.messageEnabled()) {                 FSUtils.debug.message(\"FSSOAPReceiver:handleLogoutRequest\" + \"user found here =\" + remoteServerURL);               }               StringBuffer remoteURL=new StringBuffer();               remoteURL.append(remoteServerURL.toString()).append(SystemConfigurationUtil.getProperty(\"com.iplanet.am.services.\" + \"deploymentDescriptor\")).append(IFSConstants.SOAP_END_POINT_VALUE).append(\"/\").append(IFSConstants.META_ALIAS).append(providerAlias);               FSSOAPService instSOAP=FSSOAPService.getInstance();               SOAPMessage retSOAPMessage=null;               if (instSOAP != null) {                 try {                   if (FSUtils.debug.messageEnabled()) {                     FSUtils.debug.message(\"Forward logout request to \" + remoteURL.toString());                   }                   retSOAPMessage=instSOAP.sendMessage(msgLogout,remoteURL.toString());                   if (retSOAPMessage != null) {                     Map map=new HashMap();                     map.put(MESSAGE,retSOAPMessage);                     if (userID != null) {                       map.put(USERID,userID);                     }                     return map;                   }  else {                     return null;                   }                 }  catch (                SOAPException e) {                   FSUtils.debug.error(\"FSSOAPException in doSOAPProfile\" + \" Cannot send request\",e);                   return null;                 }               }  else {                 return null;               }             }           }         }         FSServiceManager instService=FSServiceManager.getInstance();         if (instService != null) {           FSPreLogoutHandler logoutHandler=instService.getPreLogoutHandler();           if (logoutHandler != null) {             logoutHandler.setHostedDescriptor(hostedProviderDesc);             logoutHandler.setHostedDescriptorConfig(hostedConfig);             logoutHandler.setHostedEntityId(hostedEntityId);             logoutHandler.setHostedProviderRole(hostedRole);             logoutHandler.setMetaAlias(providerAlias);             logoutHandler.setRealm(realm);             logoutHandler.setRemoteDescriptor(remoteDesc);             logoutHandler.setRemoteEntityId(remoteEntityId);             logoutHandler.setLogoutRequest(logoutRequest);             FSLogoutStatus bProcessStatus=logoutHandler.processSingleLogoutRequest(logoutRequest);             if (bProcessStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {               MessageFactory factory=MessageFactory.newInstance();               SOAPMessage successSOAP=factory.createMessage();               if (successSOAP != null) {                 Map map=new HashMap();                 map.put(MESSAGE,successSOAP);                 if (userID != null) {                   map.put(USERID,userID);                 }                 return map;               }  else {                 return null;               }             }  else             if (bProcessStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_UNSUPPORTED)) {               SOAPMessage retSOAPMessage=soapService.formSOAPError(\"Server\",\"cannotProcessRequest\",null);               if (retSOAPMessage != null) {                 Map map=new HashMap();                 map.put(MESSAGE,retSOAPMessage);                 if (userID != null) {                   map.put(USERID,userID);                 }                 return map;               }  else {                 return null;               }             }  else {               return null;             }           }  else {             FSUtils.debug.error(\"Unable to get PreLogoutHandler\");             FSUtils.debug.error(\"Cannot process request\");             return null;           }         }  else {           FSUtils.debug.message(\"FSServiceManager instance is\" + \"null. Cannot process logout request\");           return null;         }       }       FSUtils.debug.message(\"Remote provider not in trusted list\");       return null;     }  else {       FSUtils.debug.error(\"Logout Signature failed verification\");       return null;     }   }  catch (  Exception se) {     FSUtils.debug.error(\"FSSOAPService::handleLogoutRequest failed\",se);     return null;   } } "
"public void mousePressed(MouseEvent e){   isBeingPressed=true; } "
"protected boolean onBackPressed(){   return true; } "
"public static String HTMLEncode(String srcStr,char ch){   if (srcStr == null) {     return null;   }   int fromIndex=0;   int toIndex;   StringBuffer dstSB=new StringBuffer();   while ((toIndex=srcStr.indexOf(ch,fromIndex)) != -1) {     dstSB.append(srcStr.substring(fromIndex,toIndex)).append(\"&#\" + (int)ch + \";\");     fromIndex=toIndex + 1;   }   dstSB.append(srcStr.substring(fromIndex));   return dstSB.toString(); } "
"public synchronized ContextHolder createCachedContextHolder(){   updateCacheSize();   while (true) {     final String key=UUID.randomUUID().toString();     if (!cache.containsKey(key)) {       final ContextHolder holder=new ContextHolder(key);       cache.put(key,holder);       return holder;     }   } } "
"@Override public boolean isMonitoringRunning(){   return MonitoringUtil.isRunning(); } "
"public static List<Entry> entriesFromLdifString(String ldif) throws Exception {   LDIFImportConfig ldifImportConfig=new LDIFImportConfig(new StringReader(ldif));   ldifImportConfig.setValidateSchema(false);   try (LDIFReader reader=new LDIFReader(ldifImportConfig)){     List<Entry> entries=new ArrayList<>();     Entry entry;     while ((entry=reader.readEntry()) != null) {       entries.add(entry);     }     return entries;   }  } "
"@Override public void close(){   IOUtils.closeIfNotNull(connection); } "
"public String str(){   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_STR_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null)); } "
"InvalidClientAuthZHeaderException(final String message,final String challengeScheme,final String challengeRealm){   super(401,\"invalid_client\",message);   this.challengeScheme=challengeScheme;   this.challengeRealm=challengeRealm; } "
"public static String downloadString(URL url){   return downloadString(url,null,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,\"utf-8\"); } "
"public void remove(){   throw new UnsupportedOperationException(); } "
"public String listSessionIds(){   StringBuilder sb=new StringBuilder();   Iterator<String> keys=sessions.keySet().iterator();   while (keys.hasNext()) {     sb.append(keys.next()).append(\" \");   }   return sb.toString(); } "
"public R visitInteger(IntegerPropertyDefinition pd,Integer v,P p){   return visitUnknown(pd,v,p); } "
"public MarshalException(String message,String errorCode,Throwable exception){   super(message,errorCode,exception); } "
"ProfilePersister(int maxProfilesAllowed,DevicePrintDao devicePrintDao,AMIdentityWrapper amIdentity){   this.maxProfilesAllowed=maxProfilesAllowed;   this.devicePrintDao=devicePrintDao;   this.amIdentity=amIdentity; } "
"private CartEvent wrapCartEvent(JsonObject raw){   return new CartEvent(raw).setUserId(raw.getString(\"user_id\")).setProductId(raw.getString(\"product_id\")).setCreatedAt(raw.getLong(\"created_at\")).setCartEventType(CartEventType.valueOf(raw.getString(\"type\"))); } "
"public boolean isPolygonal(){   Enumeration enum_=curves.elements();   while (enum_.hasMoreElements()) {     if (((Curve)enum_.nextElement()).getOrder() > 1) {       return false;     }   }   return true; } "
"public void clear(){   match=\"\";   bodyTexts.clear();   params.clear();   publicId=null;   stack.clear();   log=null;   saxLog=null;   configured=false; } "
"public static JRadioButton makeJRadioButton(LocalizableMessage text,LocalizableMessage tooltip,TextStyle style){   JRadioButton rb=new JRadioButton();   rb.setOpaque(false);   if (text != null) {     rb.setText(text.toString());   }   if (tooltip != null) {     rb.setToolTipText(tooltip.toString());   }   setTextStyle(rb,style);   return rb; } "
"public FrameBodyTIME(){ } "
"private boolean isDisplayedEntryRemote(BasicNode node){   if (isFollowReferrals()) {     if (node == rootNode) {       return false;     }     if (node.getRemoteUrl() != null) {       return true;     }     final BasicNode parent=(BasicNode)node.getParent();     if (parent != null) {       return isDisplayedEntryRemote(parent);     }   }   return false; } "
"private void fill() throws IOException {   int dst;   if (markedChar <= UNMARKED) {     dst=0;   }  else {     int delta=nextChar - markedChar;     if (delta >= readAheadLimit) {       markedChar=INVALIDATED;       readAheadLimit=0;       dst=0;     }  else {       if (readAheadLimit <= cb.length) {         System.arraycopy(cb,markedChar,cb,0,delta);         markedChar=0;         dst=delta;       }  else {         char ncb[]=new char[readAheadLimit];         System.arraycopy(cb,markedChar,ncb,0,delta);         cb=ncb;         markedChar=0;         dst=delta;       }       nextChar=nChars=delta;     }   }   int n;   do {     n=in.read(cb,dst,cb.length - dst);   }  while (n == 0);   if (n > 0) {     nChars=dst + n;     nextChar=dst;   } } "
"public void runTest() throws Throwable {   Document doc;   EntityReference entRef;   Element entElement;   Node attrNode;   Text textNode;   Node removedNode;   Node newChild;   doc=(Document)load(\"staff\",true);   entRef=doc.createEntityReference(\"ent4\");   assertNotNull(\"createdEntRefNotNull\",entRef);   entElement=(Element)entRef.getFirstChild();   assertNotNull(\"entElementNotNull\",entElement);   attrNode=entElement.getAttributeNode(\"domestic\");   textNode=(Text)attrNode.getFirstChild();   assertNotNull(\"attrChildNotNull\",textNode);   newChild=doc.createTextNode(\"Yesterday\"); {     boolean success=false;     try {       removedNode=attrNode.replaceChild(newChild,textNode);     }  catch (    DOMException ex) {       success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);     }     assertTrue(\"setValue_throws_NO_MODIFICATION_ERR\",success);   } } "
"private void deactivateSecurityConfigurators(ComponentContext context,HttpContext httpContext){   for (  SecurityConfigurator configurator : securityConfigurators) {     configurator.deactivate(httpService,httpContext,context);     logger.debug(\"Deactivated security configurator {}\",configurator.getClass().getName());   } } "
"public JRadioButtonMenuItem(Icon icon){   this(null,icon,false); } "
"public PWResetUserValidationModelImpl(){   super(); } "
"public SystemLogHandler(PrintStream wrapped){   super(wrapped);   this.wrapped=wrapped; } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeinsertbeforerefchildnonexistent.class,args); } "
"private static boolean addConstantsToGenerator(StringArgument constants,EntryGenerator generator,final ConsoleApplication app){   for (  final String constant : constants.getValues()) {     final String[] chunks=constant.split(\"=\");     if (chunks.length != 2) {       app.errPrintln(ERR_CONSTANT_ARG_CANNOT_DECODE.get(constant));       return false;     }     generator.setConstant(chunks[0],chunks[1]);   }   return true; } "
"private void afterTest(String testCase) throws Exception {   if (replDomain != null) {     for (int i=0; i < 10; i++) {       if (!replDomain.ieRunning()) {         break;       }       sleep(500);     }     assertFalse(replDomain.ieRunning(),\"ReplicationDomain: Import/Export is not expected to be running\");   }   super.cleanConfigEntries();   replDomain=null;   stop(server2,server3);   sleep(100);   server2=server3=null;   entriesToCleanup.removeAll(Arrays.asList(baseDN,DN.valueOf(\"ou=people,\" + EXAMPLE_DN)));   super.cleanRealEntries();   remove(replServer1,replServer2,replServer3);   replServer1=replServer2=replServer3=null;   Arrays.fill(replServerPort,0);   log(\"Successfully cleaned \" + testCase); } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodeattributenodevalue.class,args); } "
"public LDAPResult doOperation(ObjectFactory objFactory,CompareRequest compareRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {   LDAPResult compareResponse=objFactory.createLDAPResult();   compareResponse.setRequestID(compareRequest.getRequestID());   AttributeValueAssertion attrValAssertion=compareRequest.getAssertion();   String attrName=attrValAssertion.getName();   Object assertion=attrValAssertion.getValue();   ByteString attrValue=ByteStringUtility.convertValue(assertion);   ByteString dnStr=ByteString.valueOfUtf8(compareRequest.getDn());   ProtocolOp op=new CompareRequestProtocolOp(dnStr,attrName,attrValue);   LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);   connection.getLDAPWriter().writeMessage(msg);   LDAPMessage responseMessage=connection.getLDAPReader().readMessage();   CompareResponseProtocolOp compareOp=responseMessage.getCompareResponseProtocolOp();   int resultCode=compareOp.getResultCode();   LocalizableMessage errorMessage=compareOp.getErrorMessage();   compareResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);   ResultCode code=ResultCodeFactory.create(objFactory,resultCode);   compareResponse.setResultCode(code);   if (compareOp.getMatchedDN() != null) {     compareResponse.setMatchedDN(compareOp.getMatchedDN().toString());   }   return compareResponse; } "
"public void write(byte[] b) throws IOException {   write(b,0,b.length); } "
"public static AccessToken createFromExistingAccessToken(String accessToken,Date expirationTime,Date lastRefreshTime,AccessTokenSource accessTokenSource,List<String> permissions){   if (expirationTime == null) {     expirationTime=DEFAULT_EXPIRATION_TIME;   }   if (lastRefreshTime == null) {     lastRefreshTime=DEFAULT_LAST_REFRESH_TIME;   }   if (accessTokenSource == null) {     accessTokenSource=DEFAULT_ACCESS_TOKEN_SOURCE;   }   return new AccessToken(accessToken,expirationTime,permissions,null,accessTokenSource,lastRefreshTime); } "
"private void rehash(){   int oldCapacity=m_capacity;   HashEntry[] oldTable=m_table;   int newCapacity=2 * oldCapacity + 1;   m_capacity=newCapacity;   m_threshold=(int)(newCapacity * m_loadFactor);   m_table=new HashEntry[newCapacity];   for (int i=oldCapacity - 1; i >= 0; i--) {     for (HashEntry old=oldTable[i]; old != null; ) {       HashEntry e=old;       old=old.next;       int newIndex=e.hash % newCapacity;       if (newIndex < 0)       newIndex=-newIndex;       e.next=m_table[newIndex];       m_table[newIndex]=e;     }   } } "
"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){   SipProvider sipProvider=(SipProvider)requestEvent.getSource();   Request request=requestEvent.getRequest();   try {     Response okResponse=messageFactory.createResponse(Response.OK,request);     FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);     from.removeParameter(\"tag\");     Address address=addressFactory.createAddress(\"Shootme <sip:\" + myAddress + \":\"+ myPort+ \">\");     ContactHeader contactHeader=headerFactory.createContactHeader(address);     ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);     toHeader.setTag(\"4321\");     okResponse.addHeader(contactHeader);     sipProvider.sendResponse(okResponse);   }  catch (  Exception ex) {     ex.printStackTrace();     System.exit(0);   } } "
"public static void putStringSet(String key,Set<String> values){   if (mSharedPreferences == null) {     return;   }   Editor editor=mSharedPreferences.edit();   editor.putStringSet(key,values);   editor.apply(); } "
"public String toString(){   StringBuffer buf=new StringBuffer();   String nl=System.getProperty(\"line.separator\");   buf.append(\"              Version: \").append(this.getVersion()).append(nl);   buf.append(\"             IssuerDN: \").append(this.getIssuerDN()).append(nl);   buf.append(\"          This update: \").append(this.getThisUpdate()).append(nl);   buf.append(\"          Next update: \").append(this.getNextUpdate()).append(nl);   buf.append(\"  Signature Algorithm: \").append(this.getSigAlgName()).append(nl);   byte[] sig=this.getSignature();   buf.append(\"            Signature: \").append(new String(Hex.encode(sig,0,20))).append(nl);   for (int i=20; i < sig.length; i+=20) {     if (i < sig.length - 20) {       buf.append(\"                       \").append(new String(Hex.encode(sig,i,20))).append(nl);     }  else {       buf.append(\"                       \").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);     }   }   Extensions extensions=c.getTBSCertList().getExtensions();   if (extensions != null) {     Enumeration e=extensions.oids();     if (e.hasMoreElements()) {       buf.append(\"           Extensions: \").append(nl);     }     while (e.hasMoreElements()) {       ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();       Extension ext=extensions.getExtension(oid);       if (ext.getExtnValue() != null) {         byte[] octs=ext.getExtnValue().getOctets();         ASN1InputStream dIn=new ASN1InputStream(octs);         buf.append(\"                       critical(\").append(ext.isCritical()).append(\") \");         try {           if (oid.equals(Extension.cRLNumber)) {             buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);           }  else           if (oid.equals(Extension.deltaCRLIndicator)) {             buf.append(\"Base CRL: \" + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);           }  else           if (oid.equals(Extension.issuingDistributionPoint)) {             buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);           }  else           if (oid.equals(Extension.cRLDistributionPoints)) {             buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);           }  else           if (oid.equals(Extension.freshestCRL)) {             buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);           }  else {             buf.append(oid.getId());             buf.append(\" value = \").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);           }         }  catch (        Exception ex) {           buf.append(oid.getId());           buf.append(\" value = \").append(\"*****\").append(nl);         }       }  else {         buf.append(nl);       }     }   }   Set set=getRevokedCertificates();   if (set != null) {     Iterator it=set.iterator();     while (it.hasNext()) {       buf.append(it.next());       buf.append(nl);     }   }   return buf.toString(); } "
"public Boolean isMustUnderstand(){   return mustUnderstand; } "
"ClientHandshakeImpl(Object owner){   super(owner); } "
"public FrameBodyTIT2(byte textEncoding,String text){   super(textEncoding,text); } "
"public void addLineData(int inputStartLine,String inputFileName,int inputLineCount,int outputStartLine,int outputLineIncrement){   int fileIndex=filePathList.indexOf(inputFileName);   if (fileIndex == -1)   throw new IllegalArgumentException(\"inputFileName: \" + inputFileName);   if (outputStartLine == 0)   return;   LineInfo li=new LineInfo();   li.setInputStartLine(inputStartLine);   li.setInputLineCount(inputLineCount);   li.setOutputStartLine(outputStartLine);   li.setOutputLineIncrement(outputLineIncrement);   if (fileIndex != lastFileID)   li.setLineFileID(fileIndex);   lastFileID=fileIndex;   lineData.add(li); } "
"private void zzScanError(int errorCode){   String message;   try {     message=ZZ_ERROR_MSG[errorCode];   }  catch (  ArrayIndexOutOfBoundsException e) {     message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];   }   throw new Error(message); } "
"public boolean isDone(){   return (index > 1); } "
"protected boolean copy(File from,File to){   try {     if (!to.exists()) {       if (!to.createNewFile()) {         log.error(sm.getString(\"fileNewFail\",to));         return false;       }     }   }  catch (  IOException e) {     log.error(sm.getString(\"farmWarDeployer.fileCopyFail\",from,to),e);     return false;   }   try (java.io.FileInputStream is=new java.io.FileInputStream(from);java.io.FileOutputStream os=new java.io.FileOutputStream(to,false)){     byte[] buf=new byte[4096];     while (true) {       int len=is.read(buf);       if (len < 0)       break;       os.write(buf,0,len);     }   }  catch (  IOException e) {     log.error(sm.getString(\"farmWarDeployer.fileCopyFail\",from,to),e);     return false;   }   return true; } "
"public PasswordPolicyException(ResultCode resultCode,String errorCode,Object... args){   super(IdRepoBundle.BUNDLE_NAME,errorCode,String.valueOf(resultCode.intValue()),args); } "
"Promise<URI,DiscoveryException> performOpenIdIssuerDiscovery(final Context context,final AccountIdentifier account){   return discoveryHandler.handle(context,buildWebFingerRequest(account)).then(extractWellKnownUri(),Responses.<URI,DiscoveryException>noopExceptionFunction()); } "
"public void keyReleased(KeyEvent e){   ((KeyListener)a).keyReleased(e);   ((KeyListener)b).keyReleased(e); } "
"public Response createResponse(String responseString) throws java.text.ParseException {   if (responseString == null)   return new SIPResponse();   StringMsgParser smp=new StringMsgParser();   SIPMessage sipMessage=smp.parseSIPMessage(responseString.getBytes(),true,false,null);   if (!(sipMessage instanceof SIPResponse))   throw new ParseException(responseString,0);   return (SIPResponse)sipMessage; } "
"public static String parseLastModifDate(final File file){   Date date=new Date(file.lastModified());   DateFormat dateFormat=new SimpleDateFormat(\"yyyyMMddHHmm\");   return dateFormat.format(date); } "
"public static int dpToPx(Context context,float dp){   DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();   return (int)((dp * displayMetrics.density) + 0.5); } "
"@Override public synchronized void flush() throws IOException {   checkNotClosed();   flushInternal();   out.flush(); } "
"public com.sun.identity.wsfederation.jaxb.xmlsig.DigestMethodType createDigestMethodType() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestMethodTypeImpl(); } "
"public NSNumber(byte[] bytes,int type){   this(bytes,0,bytes.length,type); } "
"boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName){   boolean processed=false;   ResourceMatch resourceMatch=resourceType.compare(this.resourceName,resourceName,false);   if (resourceMatch.equals(ResourceMatch.EXACT_MATCH)) {     policyNames.add(policyName);     processed=true;   }  else   if (resourceMatch.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {     Iterator iter=childEntries.iterator();     while (!processed && (iter.hasNext())) {       ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();       if (resourceIndexEntry.addIndexEntry(resourceType,resourceName,policyName)) {         processed=true;       }     }     if (!processed) {       ResourceIndexEntry resourceIndexEntry=new ResourceIndexEntry(resourceName,policyName);       Set children=new HashSet();       children.addAll(childEntries);       Iterator iter1=children.iterator();       while (iter1.hasNext()) {         ResourceIndexEntry rie=(ResourceIndexEntry)iter1.next();         ResourceMatch rm=resourceType.compare(resourceName,rie.resourceName,false);         if (rm.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {           rie.setParent(resourceIndexEntry);         }       }       childEntries.add(resourceIndexEntry);       processed=true;     }   }   return processed; } "
"private String proxyToString(Object proxy){   Class<?>[] interfaces=proxy.getClass().getInterfaces();   if (interfaces.length == 0) {     return \"Proxy[\" + this + \"]\";   }   String iface=interfaces[0].getName();   if (iface.equals(\"java.rmi.Remote\") && interfaces.length > 1) {     iface=interfaces[1].getName();   }   int dot=iface.lastIndexOf('.');   if (dot >= 0) {     iface=iface.substring(dot + 1);   }   return \"Proxy[\" + iface + \",\"+ this+ \"]\"; } "
"public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {   int len34=len * 3 / 4;   byte[] outBuff=new byte[2 + len34];   int outBuffPosn=0;   byte[] b4=new byte[4];   int b4Posn=0;   int i=0;   byte sbiCrop=0;   byte sbiDecode=0;   for (i=0; i < len; i++) {     sbiCrop=(byte)(source[i + off] & 0x7f);     sbiDecode=decodabet[sbiCrop];     if (sbiDecode >= WHITE_SPACE_ENC) {       if (sbiDecode >= EQUALS_SIGN_ENC) {         if (sbiCrop == EQUALS_SIGN) {           int bytesLeft=len - i;           byte lastByte=(byte)(source[len - 1 + off] & 0x7f);           if (b4Posn == 0 || b4Posn == 1) {             throw new Base64DecoderException(\"invalid padding byte '=' at byte offset \" + i);           }  else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {             throw new Base64DecoderException(\"padding byte '=' falsely signals end of encoded value \" + \"at offset \" + i);           }  else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {             throw new Base64DecoderException(\"encoded value has invalid trailing byte\");           }           break;         }         b4[b4Posn++]=sbiCrop;         if (b4Posn == 4) {           outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);           b4Posn=0;         }       }     }  else {       throw new Base64DecoderException(\"Bad Base64 input character at \" + i + \": \"+ source[i + off]+ \"(decimal)\");     }   }   if (b4Posn != 0) {     if (b4Posn == 1) {       throw new Base64DecoderException(\"single trailing character at offset \" + (len - 1));     }     b4[b4Posn++]=EQUALS_SIGN;     outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);   }   byte[] out=new byte[outBuffPosn];   System.arraycopy(outBuff,0,out,0,outBuffPosn);   return out; } "
"void clear(){   children.clear(); } "
"private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {   String providerAlias=FSServiceUtils.getMetaAlias(request);   if (providerAlias == null || providerAlias.length() < 1) {     if (FSUtils.debug.messageEnabled()) {       FSUtils.debug.message(\"Unable to retrieve alias, Hosted \" + \"Provider. Cannot process request\");     }     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(\"aliasNotFound\"));     return;   }   if (metaManager == null) {     FSUtils.debug.error(\"Cannot retrieve hosted descriptor. Cannot process request\");     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));     return;   }   ProviderDescriptorType hostedProviderDesc=null;   BaseConfigType hostedConfig=null;   String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);   String hostedEntityId=null;   String hostedProviderRole=null;   try {     hostedProviderRole=metaManager.getProviderRoleByMetaAlias(providerAlias);     hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);     if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.IDP)) {       hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);       hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);     }  else     if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {       hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);       hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);     }     if (hostedProviderDesc == null) {       throw new IDFFMetaException((String)null);     }   }  catch (  IDFFMetaException eam) {     FSUtils.debug.error(\"Unable to find Hosted Provider. not process request\");     response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));     return;   }   this.request=request;   setTerminationURL(hostedConfig,providerAlias);   FSFederationTerminationNotification fedTermObj=new FSFederationTerminationNotification();   try {     fedTermObj=FSFederationTerminationNotification.parseURLEncodedRequest(request);   }  catch (  FSMsgException e) {     FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);     return;   } catch (  SAMLException e) {     FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);     return;   }   if (fedTermObj == null) {     FSServiceUtils.showErrorPage(response,commonErrorPage,IFSConstants.TERMINATION_REQUEST_IMPROPER,IFSConstants.TERMINATION_LOCAL_FAILED);   }  else {     doRequestProcessing(request,response,hostedProviderDesc,hostedConfig,hostedProviderRole,realm,hostedEntityId,providerAlias,fedTermObj);   }   return; } "
"public CryptoManagerException(LocalizableMessage message,Exception cause){   super(message,cause); } "
"public StandardSession(Manager manager){   super();   this.manager=manager;   if (ACTIVITY_CHECK) {     accessCount=new AtomicInteger();   } } "
"public boolean isMenuDrivenMode(){   return false; } "
"public Set searchSubPeopleContainers(String wildcard,int level) throws AMException, SSOException {   return searchSubPeopleContainers(wildcard,null,level); } "
"protected void initializeGlobalArguments(Collection<Argument> args,ArgumentGroup argGroup) throws ArgumentException {   for (  Argument arg : args) {     addGlobalArgument(arg,argGroup);   }   setFilePropertiesArgument(propertiesFileArg); } "
"public TaskClientException(LocalizableMessage message){   super(message); } "
"public boolean isHumanReadable(){   return impl.isHumanReadable(); } "
"public void testSet_authorizer() throws Exception {   TableResult resPriv=null;   TableResult resPub=null;   TableResult emptyTable=new TableResult();   String insertPublic=\"insert into public_table values(1,2)\";   String insertPrivate=\"insert into private_table values(1,2)\";   db.exec(\"create table public_table(c1 integer, c2 integer);\",null);   db.exec(\"create table private_table(c1 integer, c2 integer);\",null);   db.exec(insertPublic,null);   db.exec(insertPrivate,null);   resPriv=db.get_table(\"select * from private_table\");   resPub=db.get_table(\"select * from public_table\");   AuthorizerCallback cb=new AuthorizerCallback();   db.set_authorizer(cb);   db.exec(\"select * from private_table\",cb);   assertTrue(cb.wasCalled());   try {     db.exec(insertPublic,null);     fail(\"authorization failed\");   }  catch (  Exception e) {   }   try {     db.exec(insertPrivate,null);     fail(\"authorization failed\");   }  catch (  Exception e1) {   } } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.IssuerNamesOfferedElement createIssuerNamesOfferedElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.IssuerNamesOfferedElementImpl(); } "
"public void displayMultiple(){   ((CardLayout)mainPanel.getLayout()).show(mainPanel,MULTIPLE_SELECTED); } "
"private void handleActionFoo(String param1,String param2){   String text=\"Foo: \" + param1 + \", \"+ param2;   Log.v(TAG,text); } "
"@Override public void bind() throws Exception {   serverSock=ServerSocketChannel.open();   socketProperties.setProperties(serverSock.socket());   InetSocketAddress addr=(getAddress() != null ? new InetSocketAddress(getAddress(),getPort()) : new InetSocketAddress(getPort()));   serverSock.socket().bind(addr,getBacklog());   serverSock.configureBlocking(true);   serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());   if (acceptorThreadCount == 0) {     acceptorThreadCount=1;   }   if (pollerThreadCount <= 0) {     pollerThreadCount=1;   }   stopLatch=new CountDownLatch(pollerThreadCount);   initialiseSsl();   selectorPool.open(); } "
"public java.lang.String toString(){   StringBuffer sb=new StringBuffer(2000);   sb.append(\"<QueryResponse xmlns=\\\"\").append(DiscoConstants.DISCO_NS).append(\"\\\"\");   if ((id != null) && id.length() != 0) {     sb.append(\" id=\\\"\").append(id).append(\"\\\"\");   }   sb.append(\">\");   if (status != null) {     sb.append(status.toString());   }   if (offerings != null) {     Iterator iter=offerings.iterator();     while (iter.hasNext()) {       sb.append(((ResourceOffering)iter.next()).toString());     }   }   if (creds != null) {     sb.append(\"<Credentials xmlns=\\\"\").append(DiscoConstants.DISCO_NS).append(\"\\\">\");     Iterator iter2=creds.iterator();     while (iter2.hasNext()) {       sb.append(iter2.next().toString());     }     sb.append(\"</Credentials>\");   }   sb.append(\"</QueryResponse>\");   return sb.toString(); } "
"public void testCase05_PowerUpPerformance() throws Exception {   if (mButtonDecrease.isEnabled()) {     makeFMPowerDown();   }   long startTime=System.currentTimeMillis();   Log.i(TAG,\"[Performance test][FmRadio] power up start [\" + startTime + \"]\");   mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_power,0);   sleep(WAIT_UI_STATE_CHANGE); } "
"public boolean addSASLProperty(String property){   int idx=property.indexOf(\"=\");   if (idx == -1) {     System.err.println(\"Invalid SASL property format:\" + property);     return false;   }   String key=property.substring(0,idx);   String value=property.substring(idx + 1,property.length());   List<String> valList=saslProperties.get(key);   if (valList == null) {     valList=new ArrayList<>();   }   valList.add(value);   saslProperties.put(key,valList);   return true; } "
"private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {   in.defaultReadObject();   reexport(); } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder(\"ContextResourceEnvRef[\");   sb.append(\"name=\");   sb.append(getName());   if (getType() != null) {     sb.append(\", type=\");     sb.append(getType());   }   sb.append(\", override=\");   sb.append(override);   sb.append(\"]\");   return (sb.toString()); } "
"@Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){   return _fooLocalService.updateFoo(foo); } "
"public void test_getInstanceLjava_lang_StringLjava_security_Provider(){   String[] alg={\"\",\"qwertyu\",\"!@#$%^&*()\"};   Provider pp=null;   try {     AlgorithmParameters ap=AlgorithmParameters.getInstance(\"ABC\",p);     checkUnititialized(ap);     ap.init(new byte[6],\"aaa\");     checkAP(ap,p);   }  catch (  Exception e) {     fail(\"Unexpected exception\");   }   for (int i=0; i < alg.length; i++) {     try {       AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],p);       fail(\"NoSuchAlgorithmException was not thrown for parameter \" + alg[i]);     }  catch (    NoSuchAlgorithmException nsae) {     } catch (    Exception e) {       fail(\"Incorrect exception \" + e + \" was thrown for \"+ alg[i]);     }   }   try {     AlgorithmParameters ap=AlgorithmParameters.getInstance(\"ABC\",pp);     fail(\"IllegalArgumentException was not thrown for NULL provider\");   }  catch (  IllegalArgumentException iae) {   } catch (  Exception e) {     fail(\"Incorrect exception \" + e + \" was thrown\");   } } "
"public void releaseConnection(Connection ldapConnection,Exception lastLDAPException){   releaseConnection(ldapConnection); } "
"public void incrementAttribute(Attribute attribute) throws DirectoryException {   AttributeDescription attrDesc=attribute.getAttributeDescription();   Attribute a=getAttribute(attrDesc);   if (a == null) {     LocalizableMessage message=ERR_ENTRY_INCREMENT_NO_SUCH_ATTRIBUTE.get(attrDesc);     throw new DirectoryException(ResultCode.NO_SUCH_ATTRIBUTE,message);   }   Iterator<ByteString> i=attribute.iterator();   if (!i.hasNext()) {     LocalizableMessage message=ERR_ENTRY_INCREMENT_INVALID_VALUE_COUNT.get(attrDesc);     throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);   }   String incrementValue=i.next().toString();   long increment=parseLong(incrementValue,attrDesc);   if (i.hasNext()) {     LocalizableMessage message=ERR_ENTRY_INCREMENT_INVALID_VALUE_COUNT.get(attrDesc);     throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,message);   }   AttributeBuilder builder=new AttributeBuilder(a.getAttributeDescription());   for (  ByteString v : a) {     long currentValue=parseLong(v.toString(),attrDesc);     long newValue=currentValue + increment;     builder.add(String.valueOf(newValue));   }   replaceAttribute(builder.toAttribute()); } "
"private static void extractLineItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){   logger.log(Level.FINE,\"line found\" + currentGroupNode.getTextContent());   if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {     float x1=0;     float y1=0;     float x2=0;     float y2=0;     NamedNodeMap a=currentGroupNode.getAttributes();     int len=a.getLength();     boolean pureTransparent=false;     for (int j=0; j < len; j++) {       Node n=a.item(j);       String name=n.getNodeName();       String value=n.getNodeValue();       if (name.equals(SVG_STYLE)) {         addStyleToPath(child,value);         if (value.contains(\"opacity:0;\")) {           pureTransparent=true;         }       }  else       if (presentationMap.containsKey(name)) {         child.fillPresentationAttributes(name,value);       }  else       if (name.equals(\"clip-path\") && value.startsWith(\"url(#SVGID_\")) {       }  else       if (name.equals(\"x1\")) {         x1=Float.parseFloat(value);       }  else       if (name.equals(\"y1\")) {         y1=Float.parseFloat(value);       }  else       if (name.equals(\"x2\")) {         x2=Float.parseFloat(value);       }  else       if (name.equals(\"y2\")) {         y2=Float.parseFloat(value);       }     }     if (!pureTransparent && avg != null && !Float.isNaN(x1) && !Float.isNaN(y1) && !Float.isNaN(x2) && !Float.isNaN(y2)) {       PathBuilder builder=new PathBuilder();       builder.absoluteMoveTo(x1,y1);       builder.absoluteLineTo(x2,y2);       child.setPathData(builder.toString());     }   } } "
"private static byte[] hmac_sha(String crypto,byte[] keyBytes,byte[] text){   try {     Mac hmac;     hmac=Mac.getInstance(crypto);     SecretKeySpec macKey=new SecretKeySpec(keyBytes,\"RAW\");     hmac.init(macKey);     return hmac.doFinal(text);   }  catch (  GeneralSecurityException gse) {     throw new UndeclaredThrowableException(gse);   } } "
"public JCheckBox(Icon icon,boolean selected){   this(null,icon,selected); } "
"static String guidToDN(String guid){   return guid; } "
"public ReplicationRepairRequestControl(){   super(OID_REPLICATION_REPAIR_CONTROL,false); } "
"private void assertNormalisation(String untreatedResource,String treatedResource){   try {     assertThat(resourceName.canonicalize(untreatedResource)).isEqualTo(treatedResource);   }  catch (  Exception e) {     String message=\"Normalisation failed: \" + e.getMessage();     throw ComparisonFailureFactory.comparisonFailure(message,treatedResource,\"\");   } } "
"private byte[] convertToVorbisCommentPacket(OggPageHeader startVorbisCommentPage,RandomAccessFile raf) throws IOException, CannotReadException {   ByteArrayOutputStream baos=new ByteArrayOutputStream();   byte[] b=new byte[startVorbisCommentPage.getPacketList().get(0).getLength() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH)];   raf.read(b);   baos.write(b);   if (startVorbisCommentPage.getPacketList().size() > 1) {     logger.config(\"Comments finish on 2nd Page because there is another packet on this page\");     return baos.toByteArray();   }   if (!startVorbisCommentPage.isLastPacketIncomplete()) {     logger.config(\"Comments finish on 2nd Page because this packet is complete\");     return baos.toByteArray();   }   while (true) {     logger.config(\"Reading next page\");     OggPageHeader nextPageHeader=OggPageHeader.read(raf);     b=new byte[nextPageHeader.getPacketList().get(0).getLength()];     raf.read(b);     baos.write(b);     if (nextPageHeader.getPacketList().size() > 1) {       logger.config(\"Comments finish on Page because there is another packet on this page\");       return baos.toByteArray();     }     if (!nextPageHeader.isLastPacketIncomplete()) {       logger.config(\"Comments finish on Page because this packet is complete\");       return baos.toByteArray();     }   } } "
"protected void paintDeterminate(Graphics g,JComponent c){   if (!(g instanceof Graphics2D)) {     return;   }   Insets b=progressBar.getInsets();   int barRectWidth=progressBar.getWidth() - (b.right + b.left);   int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);   if (barRectWidth <= 0 || barRectHeight <= 0) {     return;   }   int cellLength=getCellLength();   int cellSpacing=getCellSpacing();   int amountFull=getAmountFull(b,barRectWidth,barRectHeight);   Graphics2D g2=(Graphics2D)g;   g2.setColor(progressBar.getForeground());   if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {     if (cellSpacing == 0 && amountFull > 0) {       g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));     }  else {       g2.setStroke(new BasicStroke((float)barRectHeight,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0.f,new float[]{cellLength,cellSpacing},0.f));     }     if (BasicGraphicsUtils.isLeftToRight(c)) {       g2.drawLine(b.left,(barRectHeight / 2) + b.top,amountFull + b.left,(barRectHeight / 2) + b.top);     }  else {       g2.drawLine((barRectWidth + b.left),(barRectHeight / 2) + b.top,barRectWidth + b.left - amountFull,(barRectHeight / 2) + b.top);     }   }  else {     if (cellSpacing == 0 && amountFull > 0) {       g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL));     }  else {       g2.setStroke(new BasicStroke((float)barRectWidth,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0f,new float[]{cellLength,cellSpacing},0f));     }     g2.drawLine(barRectWidth / 2 + b.left,b.top + barRectHeight,barRectWidth / 2 + b.left,b.top + barRectHeight - amountFull);   }   if (progressBar.isStringPainted()) {     paintString(g,b.left,b.top,barRectWidth,barRectHeight,amountFull,b);   } } "
"private void declareUsedNamespaces(XMPNode node,Set<String> usedPrefixes,int indent) throws IOException {   if (node.getOptions().isSchemaNode()) {     String prefix=node.getValue().substring(0,node.getValue().length() - 1);     declareNamespace(prefix,node.getName(),usedPrefixes,indent);   }  else   if (node.getOptions().isStruct()) {     for (Iterator it=node.iterateChildren(); it.hasNext(); ) {       XMPNode field=(XMPNode)it.next();       declareNamespace(field.getName(),null,usedPrefixes,indent);     }   }   for (Iterator it=node.iterateChildren(); it.hasNext(); ) {     XMPNode child=(XMPNode)it.next();     declareUsedNamespaces(child,usedPrefixes,indent);   }   for (Iterator it=node.iterateQualifier(); it.hasNext(); ) {     XMPNode qualifier=(XMPNode)it.next();     declareNamespace(qualifier.getName(),null,usedPrefixes,indent);     declareUsedNamespaces(qualifier,usedPrefixes,indent);   } } "
"public BundleHandler(BundleContext systemBundleContext,final String archiveExtension,final LogHandler updateLogger){   this.systemBundleContext=systemBundleContext;   this.archiveExtension=archiveExtension;   this.updateLogger=updateLogger; } "
"public void testSendAck(){   this.doTestSendAck(false); } "
"public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm) throws XMLSignatureException {   return sp.signXML(doc,certAlias,algorithm); } "
"TransferHandler.DropLocation dropLocationForPoint(Point p){   return null; } "
"public SIPHeader parse() throws ParseException {   if (debug)   dbg_enter(\"parse\");   try {     headerName(TokenTypes.WWW_AUTHENTICATE);     WWWAuthenticate wwwAuthenticate=new WWWAuthenticate();     super.parse(wwwAuthenticate);     return wwwAuthenticate;   }   finally {     if (debug)     dbg_leave(\"parse\");   } } "
"public static JLabel createPrimaryLabel(){   return createPrimaryLabel(LocalizableMessage.EMPTY); } "
"final boolean isRunningOrShutdown(boolean shutdownOK){   int rs=runStateOf(ctl.get());   return rs == RUNNING || (rs == SHUTDOWN && shutdownOK); } "
"public ValidationEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){   setSeverity(_severity);   this.message=_message;   this.locator=_locator;   this.linkedException=_linkedException; } "
"private void readExtendedHeader(ByteBuffer byteBuffer,int size) throws InvalidTagException {   byte[] buffer;   int extendedHeaderSize=byteBuffer.getInt();   if (extendedHeaderSize <= TAG_EXT_HEADER_LENGTH) {     throw new InvalidTagException(ErrorMessage.ID3_EXTENDED_HEADER_SIZE_TOO_SMALL.getMsg(getLoggingFilename(),extendedHeaderSize));   }   byteBuffer.get();   byte extFlag=byteBuffer.get();   updateTag=(extFlag & MASK_V24_TAG_UPDATE) != 0;   crcDataFlag=(extFlag & MASK_V24_CRC_DATA_PRESENT) != 0;   tagRestriction=(extFlag & MASK_V24_TAG_RESTRICTIONS) != 0;   if (updateTag) {     byteBuffer.get();   }   if (crcDataFlag) {     byteBuffer.get();     buffer=new byte[TAG_EXT_HEADER_CRC_DATA_LENGTH];     byteBuffer.get(buffer,0,TAG_EXT_HEADER_CRC_DATA_LENGTH);     crcData=0;     for (int i=0; i < TAG_EXT_HEADER_CRC_DATA_LENGTH; i++) {       crcData<<=8;       crcData+=buffer[i];     }   }   if (tagRestriction) {     byteBuffer.get();     buffer=new byte[1];     byteBuffer.get(buffer,0,1);     tagSizeRestriction=(byte)((buffer[0] & MASK_V24_TAG_SIZE_RESTRICTIONS) >> 6);     textEncodingRestriction=(byte)((buffer[0] & MASK_V24_TEXT_ENCODING_RESTRICTIONS) >> 5);     textFieldSizeRestriction=(byte)((buffer[0] & MASK_V24_TEXT_FIELD_SIZE_RESTRICTIONS) >> 3);     imageEncodingRestriction=(byte)((buffer[0] & MASK_V24_IMAGE_ENCODING) >> 2);     imageSizeRestriction=(byte)(buffer[0] & MASK_V24_IMAGE_SIZE_RESTRICTIONS);   } } "
"@DataProvider(name=\"testSafeDataFromRSProvider\") private Object[][] testSafeDataFromRSProvider(){   List<List<Object>> objectArrayList=new ArrayList<>();   objectArrayList=addPossibleParameters(objectArrayList,1,2,3);   objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GID,OTHER_GID);   objectArrayList=addPossibleParameters(objectArrayList,DEFAULT_GENID,OTHER_GENID);   objectArrayList=addPossibleParameters(objectArrayList,true,false);   return toDataProvider(objectArrayList); } "
"private long reconcileState(){   final Phaser root=this.root;   long s=state;   if (root != this) {     int phase, p;     while ((phase=(int)(root.state >>> PHASE_SHIFT)) != (int)(s >>> PHASE_SHIFT) && !UNSAFE.compareAndSwapLong(this,stateOffset,s,s=(((long)phase << PHASE_SHIFT) | ((phase < 0) ? (s & COUNTS_MASK) : (((p=(int)s >>> PARTIES_SHIFT) == 0) ? EMPTY : ((s & PARTIES_MASK) | p))))))     s=state;   }   return s; } "
"@SuppressWarnings(\"unused\") public void draw(Canvas canvas){   if (!this.mVisible || this.mPath == null)   return;   if (this.mColors != null && this.mColors.length == 1) {     this.mPaint.setColor(this.mColors[0]);   }   this.onDraw(canvas); } "
"public void createEntityDescriptor(String realm,EntityDescriptorElement descriptor) throws SAML2MetaException {   debug.message(\"SAML2MetaManager.createEntityDescriptor: called.\");   createEntity(realm,descriptor,null); } "
"@Override public void close() throws IOException {   try {     super.close();   }   finally {     this.branch.close();   } } "
"public void runTest() throws Throwable {   Document doc;   Element element;   String qualifiedName;   java.util.List qualifiedNames=new java.util.ArrayList();   qualifiedNames.add(\"/\");   qualifiedNames.add(\"//\");   qualifiedNames.add(\"\\\\\");   qualifiedNames.add(\";\");   qualifiedNames.add(\"&\");   qualifiedNames.add(\"*\");   qualifiedNames.add(\"]]\");   qualifiedNames.add(\">\");   qualifiedNames.add(\"<\");   doc=(Document)load(\"staffNS\",true);   element=doc.createElementNS(\"http://www.w3.org/DOM/Test/L2\",\"dom:elem\");   for (int indexN10058=0; indexN10058 < qualifiedNames.size(); indexN10058++) {     qualifiedName=(String)qualifiedNames.get(indexN10058); {       boolean success=false;       try {         element.setAttributeNS(\"http://www.w3.org/DOM/Test/L2\",qualifiedName,\"test\");       }  catch (      DOMException ex) {         success=(ex.code == DOMException.INVALID_CHARACTER_ERR);       }       assertTrue(\"elementsetattributens04\",success);     }   } } "
"public boolean isNamespaceDeclUris(){   return namespaceDeclUris; } "
"public DurationStatistics(){   deltaCount=new AtomicLong();   deltaSum=new AtomicLong();   deltaMax=new AtomicLong();   deltaMin=new AtomicLong(INITIAL_DELTA_MIN);   deltaMean=new AtomicDouble();   deltaStdDev=new AtomicDouble(); } "
"public static short[] copyOf(short[] original,int newLength){   short[] copy=new short[newLength];   System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));   return copy; } "
"public void preDeregister() throws java.lang.Exception { } "
"public static void orderBestPatterns(ResultPoint[] patterns){   float zeroOneDistance=distance(patterns[0],patterns[1]);   float oneTwoDistance=distance(patterns[1],patterns[2]);   float zeroTwoDistance=distance(patterns[0],patterns[2]);   ResultPoint pointA;   ResultPoint pointB;   ResultPoint pointC;   if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {     pointB=patterns[0];     pointA=patterns[1];     pointC=patterns[2];   }  else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {     pointB=patterns[1];     pointA=patterns[0];     pointC=patterns[2];   }  else {     pointB=patterns[2];     pointA=patterns[0];     pointC=patterns[1];   }   if (crossProductZ(pointA,pointB,pointC) < 0.0f) {     ResultPoint temp=pointA;     pointA=pointC;     pointC=temp;   }   patterns[0]=pointA;   patterns[1]=pointB;   patterns[2]=pointC; } "
"@SuppressWarnings(\"unchecked\") @Override public PdfNull copyTo(PdfDocument document,boolean allowDuplicating){   return (PdfNull)super.copyTo(document,allowDuplicating); } "
"@Override public void addBatch() throws SQLException {   super.addBatch();   batchAdded=true; } "
"public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {   if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();   while (m_nextCoroutine != thisCoroutine) {     try {       wait();     }  catch (    java.lang.InterruptedException e) {     }   }   return m_yield; } "
"public boolean validate(String value,String rule){   return validate(value); } "
"public JOptionPane(Object message){   this(message,PLAIN_MESSAGE); } "
"public SchemaFactoryConfigurationError(){ } "
"public void testGetInstanceString01() throws NoSuchAlgorithmException {   try {     KeyAgreement.getInstance(null);     fail(\"NullPointerException or NoSuchAlgorithmException should be thrown if algorithm is null\");   }  catch (  NullPointerException e) {   } catch (  NoSuchAlgorithmException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       KeyAgreement.getInstance(invalidValues[i]);       fail(\"NoSuchAlgorithmException must be thrown\");     }  catch (    NoSuchAlgorithmException e) {     }   } } "
"private void removeInvalidServices(Map<ServiceKey,Service> map){   for (Iterator<Map.Entry<ServiceKey,Service>> t=map.entrySet().iterator(); t.hasNext(); ) {     Service s=t.next().getValue();     if (s.isValid() == false) {       t.remove();     }   } } "
"void updateLabelsForNewResourceSet(ResourceSetDescription resourceSet){   JsonValue labels=resourceSet.getDescription().get(OAuth2Constants.ResourceSets.LABELS);   if (!labels.isNull() && labels.size() > 0) {     updateLabels(resourceSet,labels.asCollection(String.class),Collections.<String>emptySet());   } } "
"public void shrink(int maximumCapacity){   if (maximumCapacity < 0)   throw new IllegalArgumentException(\"maximumCapacity must be >= 0: \" + maximumCapacity);   if (size > maximumCapacity)   maximumCapacity=size;   if (capacity <= maximumCapacity)   return;   maximumCapacity=nextPowerOfTwo(maximumCapacity);   resize(maximumCapacity); } "
"public void runTest() throws Throwable {   Document doc;   Element rootNode;   int nodeType;   doc=(Document)load(\"hc_staff\",false);   rootNode=doc.getDocumentElement();   nodeType=(int)rootNode.getNodeType();   assertEquals(\"nodeElementNodeTypeAssert1\",1,nodeType); } "
"public void start(int scenario){   this.scenario=scenario;   if (scenario == SENDER_RS_SCENARIO) {     return;   }   start(); } "
"@DataProvider(name=\"illegalRDNs\") public Object[][] createIllegalData(){   return new Object[][]{{null},{\"\"},{\" \"},{\"=\"},{\"manager\"},{\"manager \"},{\"cn+\"},{\"cn+Jim\"},{\"cn=Jim+\"},{\"cn=Jim +\"},{\"cn=Jim+ \"},{\"cn=Jim+cn=John\"},{\"cn=Jim+sn\"},{\"cn=Jim+sn \"},{\"cn=Jim+sn equals\"},{\"cn=Jim,\"},{\"cn=Jim;\"},{\"cn=Jim,  \"},{\"cn=Jim+sn=a,\"},{\"cn=Jim, sn=Jam \"},{\"cn+uid=Jim\"},{\"-cn=Jim\"},{\"/tmp=a\"},{\"\\\\tmp=a\"},{\"cn;lang-en=Jim\"},{\"@cn=Jim\"},{\"_name_=Jim\"},{\"\\u03c0=pi\"},{\"v1.0=buggy\"},{\"cn=Jim+sn=Bob++\"},{\"cn=Jim+sn=Bob+,\"},{\"1.3.6.1.4.1.1466..0=#04024869\"}}; } "
"public PAOSResponse(String xmlString) throws PAOSException {   Document xmlDocument=XMLUtils.toDOMDocument(xmlString,PAOSUtils.debug);   if (xmlDocument == null) {     throw new PAOSException(PAOSUtils.bundle.getString(\"errorPAOSResponseElement\"));   }   parseElement(xmlDocument.getDocumentElement()); } "
"public void handleButton2Request(RequestInvocationEvent event){   backTrail();   RMRealmViewBean vb=(RMRealmViewBean)getViewBean(RMRealmViewBean.class);   passPgSessionMap(vb);   vb.forwardTo(getRequestContext()); } "
"static int readInt(final byte[] b,final int index){   return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF); } "
"@Override public void run(){   while (!shutdown) {     try {       CacheEntry freedEntry=referenceQueue.remove().get();       if (freedEntry != null) {         Reference<CacheEntry> ref=dnMap.remove(freedEntry.getDN());         if (ref != null) {           CacheEntry removedEntry=ref.get();           if (removedEntry != freedEntry) {             dnMap.putIfAbsent(freedEntry.getDN(),ref);           }  else {             ref.clear();             final String backendID=freedEntry.getBackendID();             final ConcurrentMap<Long,Reference<CacheEntry>> map=idMap.get(backendID);             if (map != null) {               ref=map.remove(freedEntry.getEntryID());               if (ref != null) {                 ref.clear();               }               if (map.isEmpty()) {                 idMap.remove(backendID);               }             }           }         }       }     }  catch (    Exception e) {       logger.traceException(e);     }   } } "
"public boolean hasTag(){   return hasParameter(ParameterNames.TAG); } "
"public void testConstructorStringException1(){   String value=\"9234853876401\";   int radix=45;   try {     new BigInteger(value,radix);     fail(\"NumberFormatException has not been caught\");   }  catch (  NumberFormatException e) {   } } "
"public void parse(InputStream inputStream,DefaultSynthStyleFactory factory,URL urlResourceBase,Class<?> classResourceBase,Map<String,Object> defaultsMap) throws ParseException, IllegalArgumentException {   if (inputStream == null || factory == null || (urlResourceBase == null && classResourceBase == null)) {     throw new IllegalArgumentException(\"You must supply an InputStream, StyleFactory and Class or URL\");   }   assert (!(urlResourceBase != null && classResourceBase != null));   _factory=factory;   _classResourceBase=classResourceBase;   _urlResourceBase=urlResourceBase;   _defaultsMap=defaultsMap;   try {     try {       SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();       saxParser.parse(new BufferedInputStream(inputStream),this);     }  catch (    ParserConfigurationException e) {       throw new ParseException(\"Error parsing: \" + e,0);     } catch (    SAXException se) {       throw new ParseException(\"Error parsing: \" + se + \" \"+ se.getException(),0);     } catch (    IOException ioe) {       throw new ParseException(\"Error parsing: \" + ioe,0);     }   }   finally {     reset();   } } "
"public void update(Graphics a,JComponent b){   for (int i=0; i < uis.size(); i++) {     ((ComponentUI)(uis.elementAt(i))).update(a,b);   } } "
"protected void paintTabBorder(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){   g.setColor(lightHighlight); switch (tabPlacement) { case LEFT:     g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);   g.drawLine(x,y + 2,x,y + h - 3); g.drawLine(x + 1,y + 1,x + 1,y + 1); g.drawLine(x + 2,y,x + w - 1,y); g.setColor(shadow); g.drawLine(x + 2,y + h - 2,x + w - 1,y + h - 2); g.setColor(darkShadow); g.drawLine(x + 2,y + h - 1,x + w - 1,y + h - 1); break; case RIGHT: g.drawLine(x,y,x + w - 3,y); g.setColor(shadow); g.drawLine(x,y + h - 2,x + w - 3,y + h - 2); g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 3); g.setColor(darkShadow); g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1); g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2); g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 3); g.drawLine(x,y + h - 1,x + w - 3,y + h - 1); break; case BOTTOM: g.drawLine(x,y,x,y + h - 3); g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2); g.setColor(shadow); g.drawLine(x + 2,y + h - 2,x + w - 3,y + h - 2); g.drawLine(x + w - 2,y,x + w - 2,y + h - 3); g.setColor(darkShadow); g.drawLine(x + 2,y + h - 1,x + w - 3,y + h - 1); g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2); g.drawLine(x + w - 1,y,x + w - 1,y + h - 3); break; case TOP: default : g.drawLine(x,y + 2,x,y + h - 1); g.drawLine(x + 1,y + 1,x + 1,y + 1); g.drawLine(x + 2,y,x + w - 3,y); g.setColor(shadow); g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 1); g.setColor(darkShadow); g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 1); g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1); } } "
"public CssFilterRule(String ruleText){   super(ruleText);   String mask;   boolean styleInject=false;   boolean whiteListRule=false;   if (StringUtils.contains(ruleText,MASK_CSS_INJECT_EXCEPTION_RULE)) {     mask=MASK_CSS_INJECT_EXCEPTION_RULE;     whiteListRule=true;     styleInject=true;   }  else   if (StringUtils.contains(ruleText,MASK_CSS_INJECT_RULE)) {     mask=MASK_CSS_INJECT_RULE;     styleInject=true;   }  else   if (StringUtils.contains(ruleText,MASK_CSS_EXCEPTION_RULE)) {     mask=MASK_CSS_EXCEPTION_RULE;     whiteListRule=true;   }  else   if (StringUtils.contains(ruleText,MASK_CSS_RULE)) {     mask=MASK_CSS_RULE;   }  else {     throw new IllegalArgumentException(\"ruleText\");   }   int indexOfMask=StringUtils.indexOf(ruleText,mask);   if (indexOfMask > 0) {     String domains=StringUtils.substring(ruleText,0,indexOfMask);     loadDomains(domains);   }   this.styleInject=styleInject;   this.whiteListRule=whiteListRule;   cssContent=ruleText.substring(indexOfMask + mask.length()); } "
"boolean isValidProtocolType(String protocolType) throws COTException {   String classMethod=\"COTManager:isValidProtocolType\";   if (!COTUtils.isValidProtocolType(protocolType)) {     debug.error(classMethod + \"Invalid protocol Type \" + protocolType);     String[] data={protocolType};     throw new COTException(\"invalidProtocolType\",data);   }   return true; } "
"public boolean isEmpty(){   return type == EMPTY; } "
"public static Point fromJson(String json){   GsonBuilder gson=new GsonBuilder();   gson.registerTypeAdapter(Position.class,new PositionDeserializer());   return gson.create().fromJson(json,Point.class); } "
"public static void main(final String[] args){   DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetnegative.class,args); } "
"public static boolean isPrintingAllowed(int permissions){   return (EncryptionConstants.ALLOW_PRINTING & permissions) == EncryptionConstants.ALLOW_PRINTING; } "
"public void identityRenamed(String universalId){   if (DelegationManager.debug.messageEnabled()) {     DelegationManager.debug.message(\"DelegationPolicyImpl: renamed universalId=\" + universalId);   }   cleanupCache(); } "
"public static void unlockOrientation(Activity activity){   activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED); } "
"public PluginResult.PostResponse invokePostResponseExtendedPlugins(PostResponseExtendedOperation extendedOperation){   PluginResult.PostResponse result=null;   for (  DirectoryServerPlugin p : postResponseExtendedPlugins) {     if (isInternalOperation(extendedOperation,p)) {       continue;     }     try {       result=p.doPostResponse(extendedOperation);     }  catch (    Exception e) {       logException(extendedOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);     }     if (result == null) {       logNullResult(extendedOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);     }  else     if (!result.continuePluginProcessing()) {       return result;     }   }   if (result == null) {     result=PluginResult.PostResponse.continueOperationProcessing();   }   return result; } "
"public boolean equals(Object object){   return (super.equals(object) && object instanceof PagesPerMinute); } "
"protected Object engineGetParameter(String param) throws InvalidParameterException {   if (param == null) {     throw new NullPointerException(\"param == null\");   }   return null; } "
"public void addAll(ResourceSearchIndexes other){   this.hostIndexes.addAll(other.hostIndexes);   this.pathIndexes.addAll(other.pathIndexes);   this.parentPathIndexes.addAll(other.parentPathIndexes); } "
"public double length(){   return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z)); } "
"protected JButton createIncreaseButton(int orientation){   increaseButton=new MetalScrollButton(orientation,scrollBarWidth,isFreeStanding);   return increaseButton; } "
"public void mouseEntered(MouseEvent e){   JMenu menu=(JMenu)menuItem;   if (!menu.isEnabled() && !UIManager.getBoolean(\"MenuItem.disabledAreNavigable\")) {     return;   }   MenuSelectionManager manager=MenuSelectionManager.defaultManager();   MenuElement selectedPath[]=manager.getSelectedPath();   if (!menu.isTopLevelMenu()) {     if (!(selectedPath.length > 0 && selectedPath[selectedPath.length - 1] == menu.getPopupMenu())) {       if (menu.getDelay() == 0) {         appendPath(getPath(),menu.getPopupMenu());       }  else {         manager.setSelectedPath(getPath());         setupPostTimer(menu);       }     }   }  else {     if (selectedPath.length > 0 && selectedPath[0] == menu.getParent()) {       MenuElement newPath[]=new MenuElement[3];       newPath[0]=(MenuElement)menu.getParent();       newPath[1]=menu;       if (BasicPopupMenuUI.getLastPopup() != null) {         newPath[2]=menu.getPopupMenu();       }       manager.setSelectedPath(newPath);     }   } } "
"private void checkScrollableParameters(Rectangle visibleRect,int orientation){   if (visibleRect == null) {     throw new IllegalArgumentException(\"visibleRect must be non-null\");   } switch (orientation) { case SwingConstants.VERTICAL: case SwingConstants.HORIZONTAL:     break; default :   throw new IllegalArgumentException(\"orientation must be one of: VERTICAL, HORIZONTAL\"); } } "
"public void runTest() throws Throwable {   Document doc;   NodeList addressList;   Node testNode;   NamedNodeMap attributes;   Attr streetAttr;   String value;   doc=(Document)load(\"staff\",true);   addressList=doc.getElementsByTagName(\"address\");   testNode=addressList.item(3);   attributes=testNode.getAttributes();   streetAttr=(Attr)attributes.getNamedItem(\"street\");   value=streetAttr.getValue();   assertEquals(\"streetYes\",\"Yes\",value); } "
"public AbstractScriptEngine(){   context=new SimpleScriptContext(); } "
"public ObjectInUseException(String rbName,String errCode,Object[] args,Throwable t,String name,Object user){   super(rbName,errCode,args,t);   this.name=name;   this.user=user; } "
"private int matchString(String text,int start,int field,Map<String,Integer> data,CalendarBuilder calb){   if (data != null) {     if (data instanceof SortedMap) {       for (      String name : data.keySet()) {         if (text.regionMatches(true,start,name,0,name.length())) {           calb.set(field,data.get(name));           return start + name.length();         }       }       return -start;     }     String bestMatch=null;     for (    String name : data.keySet()) {       int length=name.length();       if (bestMatch == null || length > bestMatch.length()) {         if (text.regionMatches(true,start,name,0,length)) {           bestMatch=name;         }       }     }     if (bestMatch != null) {       calb.set(field,data.get(bestMatch));       return start + bestMatch.length();     }   }   return -start; } "
"public static List<SearchResultEntry> findChildrenOfClass(String name){   List<SearchResultEntry> results=new ArrayList<SearchResultEntry>();   for (  ClassNode cn : VisualizerWindow.instance.getNodes().values()) {     if (cn.superName.toLowerCase().contains(name.toLowerCase())) {       results.add(new SearchResultEntry(cn));     }  else {       for (      String inter : cn.interfaces) {         if (inter.toLowerCase().contains(name.toLowerCase())) {           results.add(new SearchResultEntry(cn));           break;         }       }     }   }   return results; } "
"public Option(AttributeSet attr){   this.attr=attr.copyAttributes();   selected=(attr.getAttribute(HTML.Attribute.SELECTED) != null); } "
"public void removeAccessibleSelection(int i){   List.this.deselect(i); } "
"public BAD_OPERATION(String s,int minor,CompletionStatus completed){   super(s,minor,completed); } "
"@Override public boolean isStretchWidth(){   return true; } "
"private static int determineType(String dataBeginning){   dataBeginning=dataBeginning.trim();   if (dataBeginning.length() == 0) {     return TYPE_ERROR_BLANK;   }   if (dataBeginning.startsWith(\"bplist\")) {     return TYPE_BINARY;   }   if (dataBeginning.startsWith(\"(\") || dataBeginning.startsWith(\"{\") || dataBeginning.startsWith(\"/\")) {     return TYPE_ASCII;   }   if (dataBeginning.startsWith(\"<\")) {     return TYPE_XML;   }   return TYPE_ERROR_UNKNOWN; } "
"public com.sun.identity.saml2.jaxb.metadataextquery.ActionNamespaceElement createActionNamespaceElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.metadataextquery.impl.ActionNamespaceElementImpl(); } "
"public boolean supportsPreStripping(){   return false; } "
"public static int dayOfWeek(long day){   long[] remainder=new long[1];   floorDivide(day + Calendar.THURSDAY,7,remainder);   int dayOfWeek=(int)remainder[0];   dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;   return dayOfWeek; } "
"public static void createTable(SQLiteDatabase db,boolean ifNotExists){   String constraint=ifNotExists ? \"IF NOT EXISTS \" : \"\";   db.execSQL(\"CREATE TABLE \" + constraint + \"\\\"SAVED_STORY\\\" (\"+ \"\\\"_id\\\" INTEGER PRIMARY KEY ,\"+ \"\\\"IMAGE\\\" TEXT,\"+ \"\\\"TITLE\\\" TEXT,\"+ \"\\\"DATE\\\" TEXT,\"+ \"\\\"POSITION\\\" INTEGER);\"); } "
"protected int baseCharactersCount(){   int count=0;   for (  IRenderer child : childRenderers) {     if (child instanceof TextRenderer) {       count+=((TextRenderer)child).baseCharactersCount();     }   }   return count; } "
"public Cursor fetchAllOrdered(){   return database.query(DATABASE_TABLE,KEYS,null,null,null,null,KEY_EVENTNAME + \" ASC\"); } "
"public static void addConstraint(Constraint constraint){   TestChildCfgDefn.getInstance().registerConstraint(constraint); } "
"public static void clearBlock(){ synchronized (monitor) {     BlockingPojo.block=false;     monitor.notifyAll();   } } "
"private void determineSuperclasses(){   superclasses=new TIntHashSet(2);   Classfile clazz=this;   while (clazz != null) {     ClassInfo superInfo=clazz.getSuperclassInfo();     if (superInfo != null)     superclasses.add(superInfo.getName().getID());     clazz=clazz.getSuperclass();   }   superclasses.trimToSize(); } "
"public boolean isAbsolute(){   return fs.isAbsolute(this); } "
"public WindowProbeMsg(byte[] in) throws DataFormatException {   if (in[0] != MSG_TYPE_WINDOW_PROBE) {     throw new DataFormatException(\"input is not a valid WindowProbeMsg\");   } } "
"private void rangeCheck(int index){   if (index >= size)   throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } "
"public void traverse(int pos) throws org.xml.sax.SAXException {   int top=pos;   while (DTM.NULL != pos) {     startNode(pos);     int nextNode=m_dtm.getFirstChild(pos);     while (DTM.NULL == nextNode) {       endNode(pos);       if (top == pos)       break;       nextNode=m_dtm.getNextSibling(pos);       if (DTM.NULL == nextNode) {         pos=m_dtm.getParent(pos);         if ((DTM.NULL == pos) || (top == pos)) {           if (DTM.NULL != pos)           endNode(pos);           nextNode=DTM.NULL;           break;         }       }     }     pos=nextNode;   } } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Node employeeNode;   Node clonedNode;   Node parentNode;   doc=(Document)load(\"staff\",true);   elementList=doc.getElementsByTagName(\"employee\");   employeeNode=elementList.item(1);   clonedNode=employeeNode.cloneNode(false);   parentNode=clonedNode.getParentNode();   assertNull(\"nodeCloneGetParentNullAssert1\",parentNode); } "
"public RC2ParameterSpec(int effectiveKeyBits){   this.effectiveKeyBits=effectiveKeyBits;   iv=null; } "
"public void timeout(){   if (timedOutAt <= 0) {     timedOutAt=currentTimeMillis() / 1000;   } } "
"@Deprecated public void _INVALID_setAmount(int amount){   setAmount(amount); } "
"private boolean sendEventToListeners(ClusterEvent event){   boolean success=true;   for (  String listenerId : Collections.unmodifiableSet(listeners.keySet())) {     logger.debug(\"Notifying listener {} of event {} for instance {}\",listenerId,event.getType(),instanceId);     ClusterEventListener listener=listeners.get(listenerId);     if (listener != null && !listener.handleEvent(event)) {       success=false;     }   }   return success; } "
"private boolean tryKillThisWorkerThread(TraditionalWorkerThread workerThread){   queueReadLock.unlock();   queueWriteLock.lock();   try {     if (shutdownRequested) {       return true;     }     int currentThreads=workerThreads.size();     if (currentThreads > numWorkerThreads) {       if (workerThreads.remove(Thread.currentThread())) {         currentThreads--;       }       if (currentThreads <= numWorkerThreads) {         killThreads=false;       }       workerThread.setStoppedByReducedThreadNumber();       return true;     }   }   finally {     queueWriteLock.unlock();     queueReadLock.lock();     if (shutdownRequested) {       return true;     }   }   return false; } "
"public void entering(String sourceClass,String sourceMethod,Object params[]){   String msg=\"ENTRY\";   if (params == null) {     logp(Level.FINER,sourceClass,sourceMethod,msg);     return;   }   if (!isLoggable(Level.FINER))   return;   for (int i=0; i < params.length; i++) {     msg=msg + \" {\" + i+ \"}\";   }   logp(Level.FINER,sourceClass,sourceMethod,msg,params); } "
"public void destroy(){ synchronized (SyncOp) {     rtmpSender.destroy();     videoClient.destroy();     audioClient.destroy();     rtmpSender=null;     videoClient=null;     audioClient=null;     LogTools.d(\"RESClient,destroy()\");   } } "
"public static String encodeBase64URLSafeString(final byte[] binaryData){   return StringUtils.newStringUtf8(encodeBase64(binaryData,false,true)); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapgetnameditemns05.class,args); } "
"public static final double previousDouble(double value){   if (value == Double.NEGATIVE_INFINITY) {     return value;   }   long bits;   if (value == 0) {     bits=0x8000000000000000L;   }  else {     bits=Double.doubleToLongBits(value);   }   return Double.longBitsToDouble(value <= 0 ? bits + 1 : bits - 1); } "
"private void removeAbandoned(final AbandonedConfig ac){   final long now=System.currentTimeMillis();   final long timeout=now - (ac.getRemoveAbandonedTimeout() * 1000L);   final ArrayList<PooledObject<T>> remove=new ArrayList<>();   final Iterator<PooledObject<T>> it=allObjects.values().iterator();   while (it.hasNext()) {     final PooledObject<T> pooledObject=it.next(); synchronized (pooledObject) {       if (pooledObject.getState() == PooledObjectState.ALLOCATED && pooledObject.getLastUsedTime() <= timeout) {         pooledObject.markAbandoned();         remove.add(pooledObject);       }     }   }   final Iterator<PooledObject<T>> itr=remove.iterator();   while (itr.hasNext()) {     final PooledObject<T> pooledObject=itr.next();     if (ac.getLogAbandoned()) {       pooledObject.printStackTrace(ac.getLogWriter());     }     try {       invalidateObject(pooledObject.getObject());     }  catch (    final Exception e) {       e.printStackTrace();     }   } } "
"public String toURLEncodedQueryString() throws FSMsgException {   if ((providerId == null) || (providerId.length() == 0)) {     FSUtils.debug.error(\"FSLogoutResponse.\" + \"toURLEncodedQueryString: providerId is null in \" + \"the response \");     throw new FSMsgException(\"nullProviderIdInRequest\",null);   }   if ((responseID == null) || (responseID.length() == 0)) {     responseID=FSUtils.generateID();     if (responseID == null) {       FSUtils.debug.error(\"FSNameRegistrationRequest.\" + \"toURLEncodedQueryString: couldn't generate \" + \"responseID.\");       throw new FSMsgException(\"errorGenerateID\",null);     }   }   StringBuffer urlEncodedAuthnReq=new StringBuffer(300);   urlEncodedAuthnReq.append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(responseID)).append(IFSConstants.AMPERSAND);   if ((inResponseTo != null) && (inResponseTo.length() > 0)) {     urlEncodedAuthnReq.append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(inResponseTo)).append(IFSConstants.AMPERSAND);   }   urlEncodedAuthnReq.append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(majorVersion).append(IFSConstants.AMPERSAND).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(minorVersion).append(IFSConstants.AMPERSAND);   if (issueInstant != null) {     urlEncodedAuthnReq.append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);   }  else {     FSUtils.debug.error(\"FSLogoutResponse.\" + \"toURLEncodedQueryString: issueInstant missing\");     String[] args={IFSConstants.ISSUE_INSTANT};     throw new FSMsgException(\"missingAttribute\",args);   }   if (providerId != null && providerId.length() != 0) {     urlEncodedAuthnReq.append(IFSConstants.PROVIDER_ID).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);   }   if (relayState != null && relayState.length() != 0) {     urlEncodedAuthnReq.append(IFSConstants.RELAY_STATE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);   }   if (status != null) {     urlEncodedAuthnReq.append(IFSConstants.VALUE).append(IFSConstants.EQUAL_TO).append(URLEncDec.encode(status.getStatusCode().getValue())).append(IFSConstants.AMPERSAND);   }   return urlEncodedAuthnReq.toString(); } "
"@Override public void onDrawFrame(GL10 gl10){   GLES20.glClearColor(1.0f,0.0f,0.0f,1.0f);   GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);   GLES20.glEnable(GLES20.GL_DEPTH_TEST);   GLES20.glEnable(GLES20.GL_CULL_FACE);   GLES20.glEnable(GLES20.GL_BLEND);   GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);   long currentTimeMillis=System.currentTimeMillis();   updateWithDelta(currentTimeMillis - lastTimeMillis);   lastTimeMillis=currentTimeMillis; } "
"public LogoutRequestImpl(Element element) throws SAML2Exception {   parseElement(element);   if (isSigned) {     signedXMLString=XMLUtils.print(element);   } } "
"public EasyIdMod(final Context context){   this.context=context; } "
"boolean addRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL,boolean reRegister){   boolean status=false;   if (debug.messageEnabled()) {     debug.message(\"ResourceResultCache.addRemotePolicyListener():\" + \"serviceName=\" + serviceName + \":notificationURL=\"+ notificationURL);   }   if (remotePolicyListeners.contains(serviceName) && !reRegister) {     if (debug.messageEnabled()) {       debug.message(\"ResourceResultCache.addRemotePolicyListener():\" + \"serviceName=\" + serviceName + \":notificationURL=\"+ notificationURL+ \":is already registered\");     }     return status;   }   URL policyServiceURL=null;   if (appToken != null) {     try {       policyServiceURL=getPolicyServiceURL(appToken);     }  catch (    PolicyException pe) {       debug.error(\"ResourceResultCache.addRemotePolicyListener():\" + \"Can not add policy listner\",pe);     }   }   if ((appToken != null) && (policyServiceURL != null)) {     PolicyListenerRequest listenerReq=new PolicyListenerRequest();     listenerReq.setServiceName(serviceName);     listenerReq.setNotificationURL(notificationURL);     PolicyRequest policyReq=new PolicyRequest();     policyReq.setAppSSOToken(appToken.getTokenID().toString());     policyReq.setMethodID(PolicyRequest.POLICY_REQUEST_ADD_POLICY_LISTENER);     policyReq.setPolicyListenerRequest(listenerReq);     try {       PolicyService ps=sendPLLRequest(policyServiceURL,policyReq);       if (ps != null) {         if (debug.messageEnabled()) {           debug.message(\"ResourceResultCache.\" + \"addRemotePolicyListener():\" + \"result=\"+ ps.toXMLString());         }         PolicyResponse psres=ps.getPolicyResponse();         if (psres.getMethodID() == PolicyResponse.POLICY_ADD_LISTENER_RESPONSE) {           status=true;           remotePolicyListeners.add(serviceName);           if (debug.messageEnabled()) {             debug.message(\"ResourceResultCache.\" + \"addRemotePolicyListener():\" + \"serviceName=\" + serviceName + \":notificationURL=\"+ notificationURL+ \":policyServiceURL=\"+ policyServiceURL+ \":add succeeded\");           }         }       }  else {         debug.error(\"ResourceResultCache.addRemotePolicyListener():\" + \" no result\");       }     }  catch (    Exception e) {       debug.error(\"ResourceResultCache.addRemotePolicyListener():\",e);     }   }   return status; } "
"protected MultipleDocumentHandling(int value){   super(value); } "
"public boolean isAPKFile(JecFile file){   return !file.isDirectory() && isAPKFile(file.getName()); } "
"public static String generateKey(String imageUri,ImageSize targetSize){   return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString(); } "
"public Arg(QName qname,XObject val,boolean isFromWithParam){   m_qname=qname;   m_val=val;   m_isFromWithParam=isFromWithParam;   m_isVisible=!isFromWithParam;   m_expression=null; } "
"public Bidi(String paragraph,int flags){   if (paragraph == null) {     throw new IllegalArgumentException(\"paragraph is null\");   }   bidiBase=new BidiBase(paragraph.toCharArray(),0,null,0,paragraph.length(),flags); } "
"public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){   final BitmapFactory.Options options=new BitmapFactory.Options();   options.inJustDecodeBounds=true;   BitmapFactory.decodeFile(filename,options);   options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);   if (Utils.hasHoneycomb()) {     addInBitmapOptions(options,cache);   }   options.inJustDecodeBounds=false;   return BitmapFactory.decodeFile(filename,options); } "
"public String doubleMetaphone(String value){   return doubleMetaphone(value,false); } "
"public boolean beginHasButtonDisplay(ChildDisplayEvent event){   return (buttonOptions != null) && (buttonOptions.length > 0); } "
"public static void deregisterShortCircuit(OperationType operation,String section){   shortCircuits.remove(operation + \"/\" + section.toLowerCase()); } "
"public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {   org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke(\"insert_any\",_opsClass);   DynSequenceOperations $self=(DynSequenceOperations)$so.servant;   try {     $self.insert_any(value);   }   finally {     _servant_postinvoke($so);   } } "
"private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){   BitMatrix image=this.image;   int maxI=image.getHeight();   int[] stateCount=crossCheckStateCount;   stateCount[0]=0;   stateCount[1]=0;   stateCount[2]=0;   int i=startI;   while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {     stateCount[1]++;     i--;   }   if (i < 0 || stateCount[1] > maxCount) {     return Float.NaN;   }   while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {     stateCount[0]++;     i--;   }   if (stateCount[0] > maxCount) {     return Float.NaN;   }   i=startI + 1;   while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {     stateCount[1]++;     i++;   }   if (i == maxI || stateCount[1] > maxCount) {     return Float.NaN;   }   while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {     stateCount[2]++;     i++;   }   if (stateCount[2] > maxCount) {     return Float.NaN;   }   int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];   if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {     return Float.NaN;   }   return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN; } "
"private String searchUserAccount(String attributeValue,String organization) throws AuthLoginException {   String classMethod=\"WindowsDesktopSSO.searchUserAccount: \";   if (organization.isEmpty()) {     organization=\"/\";   }   if (debug.messageEnabled()) {     debug.message(classMethod + \" searching for user \" + attributeValue+ \" in the organization =\"+ organization);   }   IdSearchControl searchControl=new IdSearchControl();   searchControl.setMaxResults(1);   searchControl.setTimeOut(3000);   searchControl.setSearchModifiers(IdSearchOpModifier.OR,buildSearchControl(attributeValue));   searchControl.setAllReturnAttributes(false);   try {     AMIdentityRepository amirepo=new AMIdentityRepository(getSSOSession(),organization);     IdSearchResults searchResults=amirepo.searchIdentities(IdType.USER,\"*\",searchControl);     if (searchResults.getErrorCode() == IdSearchResults.SUCCESS && searchResults != null) {       Set<AMIdentity> results=searchResults.getSearchResults();       if (!results.isEmpty()) {         if (debug.messageEnabled()) {           debug.message(classMethod + results.size() + \" result(s) obtained\");         }         AMIdentity userDNId=results.iterator().next();         if (userDNId != null) {           if (debug.messageEnabled()) {             debug.message(classMethod + \"user = \" + userDNId.getUniversalId());             debug.message(classMethod + \"attrs =\" + userDNId.getAttributes(getUserAliasList()));           }           return attributeValue.trim();         }       }     }   }  catch (  IdRepoException idrepoex) {     String data[]={attributeValue,organization};     throw new AuthLoginException(amAuthWindowsDesktopSSO,\"idRepoSearch\",data,idrepoex);   } catch (  SSOException ssoe) {     String data[]={attributeValue,organization};     throw new AuthLoginException(amAuthWindowsDesktopSSO,\"ssoSearch\",data,ssoe);   }   if (debug.messageEnabled()) {     debug.message(classMethod + \" No results were found !\");   }   return null; } "
"public static ConnectionFactory newPrioritizedFailoverConnectionPool(Set<String> servers,String hostServerId,String hostSiteId,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){   return newFailoverConnectionPool(prioritizeServers(servers,hostServerId,hostSiteId),username,password,maxSize,heartBeatInterval,heartBeatTimeUnit,ldapOptions); } "
"@SuppressWarnings(\"unchecked\") @Override public PdfString copyTo(PdfDocument document){   return (PdfString)super.copyTo(document,true); } "
"public UNKNOWN(){   this(\"\"); } "
"public void completePendingPageChanges(){   if (!mPendingAnimations.isEmpty()) {     HashMap<View,Runnable> pendingViews=new HashMap<>(mPendingAnimations);     for (    Map.Entry<View,Runnable> e : pendingViews.entrySet()) {       e.getKey().animate().cancel();       e.getValue().run();     }   } } "
"private void runSolveReferral() throws SearchAbandonException, LdapException {   int hopCount=0;   String[] referral=getNode().getReferral();   while (referral != null && hopCount < 10) {     readRemoteEntry(referral);     referral=BrowserController.getReferral(remoteEntry);     hopCount++;   }   if (referral != null) {     throwAbandonIfNeeded(newLdapException(CLIENT_SIDE_REFERRAL_LIMIT_EXCEEDED,AdminToolMessages.ERR_REFERRAL_LIMIT_EXCEEDED.get(hopCount)));   } } "
"protected void clearToggledPaths(){   expandedState.clear(); } "
"public TestInternalSearchListener(){   searchEntries=new ArrayList<>();   searchReferences=new ArrayList<>(); } "
"protected AbstractSpliterator(long est,int additionalCharacteristics){   this.est=est;   this.characteristics=((additionalCharacteristics & Spliterator.SIZED) != 0) ? additionalCharacteristics | Spliterator.SUBSIZED : additionalCharacteristics; } "
"public InflaterInputStream(InputStream in){   this(in,new Inflater());   usesDefaultInflater=true; } "
"public boolean isVerbose(){   return (environment.get(CLIConstants.ARGUMENT_VERBOSE) != null); } "
"private int runSubCommand(SubCommandHandler handler){   try {     final MenuResult<Integer> result=handler.run(this,factory);     if (result.isSuccess()) {       if (isInteractive() && handler.isCommandBuilderUseful()) {         printCommandBuilder(getCommandBuilder(handler));       }       return result.getValue();     }  else {       return ReturnCode.ERROR_UNEXPECTED.get();     }   }  catch (  ArgumentException e) {     errPrintln(e.getMessageObject());     return ReturnCode.ERROR_UNEXPECTED.get();   } catch (  ClientException e) {     Throwable cause=e.getCause();     errPrintln();     if (cause instanceof ManagedObjectDecodingException) {       displayManagedObjectDecodingException(this,(ManagedObjectDecodingException)cause);     }  else     if (cause instanceof MissingMandatoryPropertiesException) {       displayMissingMandatoryPropertyException(this,(MissingMandatoryPropertiesException)cause);     }  else     if (cause instanceof OperationRejectedException) {       displayOperationRejectedException(this,(OperationRejectedException)cause);     }  else {       errPrintln(e.getMessageObject());     }     errPrintln();     return ReturnCode.ERROR_UNEXPECTED.get();   } catch (  Exception e) {     errPrintln(LocalizableMessage.raw(stackTraceToSingleLineString(e,true)));     return ReturnCode.ERROR_UNEXPECTED.get();   } } "
"public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {   removePageSessionAttribute(PAGE_MODIFIED);   super.handleButton2Request(event); } "
"public boolean isInboundOffhook(){   return (currentState == inboundOffHookState); } "
"public boolean deleteAll(){   return database.delete(DATABASE_TABLE,null,null) > 0; } "
"private void loadAndInstallNotificationHandler(String className,AccountStatusNotificationHandlerCfg configuration) throws InitializationException {   AccountStatusNotificationHandler<? extends AccountStatusNotificationHandlerCfg> handlerClass;   handlerClass=loadNotificationHandler(className,configuration,true);   DN configEntryDN=configuration.dn();   notificationHandlers.put(configEntryDN,handlerClass);   DirectoryServer.registerAccountStatusNotificationHandler(configEntryDN,handlerClass); } "
"public boolean isADDOperation(){   return attrTypeIsNull && !isModDN; } "
"public ProguardLoader(Map<String,ClassNode> nodes){   super(nodes); } "
"public static void cleanSearchedStations(Context context){   Log.d(TAG,\"FmRadioStation.cleanSearchedStations start\");   context.getContentResolver().delete(Station.CONTENT_URI,Station.COLUMN_STATION_TYPE + \"=\" + String.valueOf(STATION_TYPE_SEARCHED),null);   Log.d(TAG,\"FmRadioStation.cleanSearchedStations end\"); } "
"private void applyTextAdjust(float tj){   float adjustBy=-tj / 1000f * getGraphicsState().getFontSize() * (getGraphicsState().getHorizontalScaling() / 100f);   textMatrix=new Matrix(adjustBy,0).multiply(textMatrix); } "
"public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {   boolean satified=false;   Set publicCreds=subject.getPublicCredentials();   if ((publicCreds != null) && !publicCreds.isEmpty()) {     Map<String,Set<String>> attributes=(Map<String,Set<String>>)publicCreds.iterator().next();     Set<String> values=attributes.get(SubjectAttributesCollector.NAMESPACE_IDENTITY + GROUP_NAME);     satified=(values != null) ? values.contains(getID()) : false;   }   satified=satified ^ isExclusive();   return new SubjectDecision(satified,Collections.EMPTY_MAP); } "
"public Set searchSubOrganizationalUnits(String wildcard,int level) throws AMException, SSOException {   return searchSubOrganizationalUnits(wildcard,null,level); } "
"public RuntimePermission(String name,String actions){   super(name,actions); } "
"public void testGetSubjectDN(){   if (this.cert == null) {     return;   }   assertEquals(\"The subject DN is not correct.\",tbt_cert.getSubjectDN(),cert.getSubjectDN()); } "
"public void disableVertexAttribute(String name){   int location=fetchAttributeLocation(name);   if (location == -1)   return;   GLES20.glDisableVertexAttribArray(location); } "
"private Class<?> validateClassInterfaces(String className,boolean initialize){   Class<?> theClass=loadClassForValidation(className,className,initialize);   for (  String i : instanceOfInterfaces) {     Class<?> instanceOfClass=loadClassForValidation(className,i,initialize);     if (!instanceOfClass.isAssignableFrom(theClass)) {       throw PropertyException.illegalPropertyValueException(this,className);     }   }   return theClass; } "
"public ArrayStack(int initialSize){   super(initialSize); } "
"public Node item(int i){   int count=0;   for (int n=dtm.getFirstAttribute(element); n != -1; n=dtm.getNextAttribute(n)) {     if (count == i)     return dtm.getNode(n);  else     ++count;   }   return null; } "
"private AST.Throw parse_throw() throws SyntaxException {   LineCol lineCol=current.getLineCol();   Expression exp=next_exp(false);   return new AST.Throw(exp,lineCol); } "
"public void addAttribute(String attrName,String value) throws SMSException {   Set attrValues=null;   if (attrSet == null) {     attrSet=new CaseInsensitiveHashMap();   }  else   if (attrSet.containsKey(attrName)) {     attrValues=(Set)attrSet.get(attrName);     if (attrValues.contains(value)) {       if (debug.messageEnabled()) {         debug.message(\"SMSEntry: Duplicate value for addition\");       }       throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),\"sms-ATTR_OR_VAL_EXISTS\"));     }   }   if (attrValues == null) {     attrValues=new HashSet();   }   attrValues.add(value);   attrSet.put(attrName,attrValues);   if (modSet == null) {     modSet=new HashSet();   }   modSet.add(new ModificationItem(DirContext.ADD_ATTRIBUTE,new BasicAttribute(attrName,value))); } "
"private int compareMagnitude(BigDecimal val){   long ys=val.intCompact;   long xs=this.intCompact;   if (xs == 0)   return (ys == 0) ? 0 : -1;   if (ys == 0)   return 1;   long sdiff=(long)this.scale - val.scale;   if (sdiff != 0) {     long xae=(long)this.precision() - this.scale;     long yae=(long)val.precision() - val.scale;     if (xae < yae)     return -1;     if (xae > yae)     return 1;     BigInteger rb=null;     if (sdiff < 0) {       if (sdiff > Integer.MIN_VALUE && (xs == INFLATED || (xs=longMultiplyPowerTen(xs,(int)-sdiff)) == INFLATED) && ys == INFLATED) {         rb=bigMultiplyPowerTen((int)-sdiff);         return rb.compareMagnitude(val.intVal);       }     }  else {       if (sdiff <= Integer.MAX_VALUE && (ys == INFLATED || (ys=longMultiplyPowerTen(ys,(int)sdiff)) == INFLATED) && xs == INFLATED) {         rb=val.bigMultiplyPowerTen((int)sdiff);         return this.intVal.compareMagnitude(rb);       }     }   }   if (xs != INFLATED)   return (ys != INFLATED) ? longCompareMagnitude(xs,ys) : -1;  else   if (ys != INFLATED)   return 1;  else   return this.intVal.compareMagnitude(val.intVal); } "
"@Override public boolean equals(Object obj){   if (!(obj instanceof NSNumber))   return false;   NSNumber n=(NSNumber)obj;   return type == n.type && longValue == n.longValue && doubleValue == n.doubleValue && boolValue == n.boolValue; } "
"public boolean isRecordingEnabled(){   return enableRecording; } "
"@Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {   Token previous=adapter.read(token.getTokenId());   Token updated;   if (previous == null) {     updated=adapter.create(token);   }  else {     updated=adapter.update(previous,token);   }   handler.processResults(updated); } "
"protected ComboPopup createPopup(){   return new BasicComboPopup(comboBox); } "
"public void testKeyPairGenerator01() throws NoSuchAlgorithmException {   try {     KeyPairGenerator.getInstance(null);     fail(\"NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null\");   }  catch (  NoSuchAlgorithmException e) {   } catch (  NullPointerException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       KeyPairGenerator.getInstance(invalidValues[i]);       fail(\"NoSuchAlgorithmException must be thrown when algorithm is not available: \".concat(invalidValues[i]));     }  catch (    NoSuchAlgorithmException e) {     }   } } "
"private static Collection<List<?>> decodeGeneralNames(Extension extension) throws IOException {   if (extension == null) {     return null;   }   Collection<List<?>> collection=((GeneralNames)GeneralNames.ASN1.decode(extension.getExtnValue())).getPairsList();   if (collection.size() == 0) {     return null;   }   return Collections.unmodifiableCollection(collection); } "
"public void stop(){   end=currentTimeMillis(); } "
"protected ErodingKeyedObjectPool(final KeyedObjectPool<K,V> keyedPool,final ErodingFactor erodingFactor){   if (keyedPool == null) {     throw new IllegalArgumentException(\"keyedPool must not be null.\");   }   this.keyedPool=keyedPool;   this.erodingFactor=erodingFactor; } "
"private void parse(String rawdata) throws MimeTypeParseException {   int slashIndex=rawdata.indexOf('/');   int semIndex=rawdata.indexOf(';');   if ((slashIndex < 0) && (semIndex < 0)) {     throw new MimeTypeParseException(\"Unable to find a sub type.\");   }  else   if ((slashIndex < 0) && (semIndex >= 0)) {     throw new MimeTypeParseException(\"Unable to find a sub type.\");   }  else   if ((slashIndex >= 0) && (semIndex < 0)) {     primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);     subType=rawdata.substring(slashIndex + 1).trim().toLowerCase(Locale.ENGLISH);     parameters=new MimeTypeParameterList();   }  else   if (slashIndex < semIndex) {     primaryType=rawdata.substring(0,slashIndex).trim().toLowerCase(Locale.ENGLISH);     subType=rawdata.substring(slashIndex + 1,semIndex).trim().toLowerCase(Locale.ENGLISH);     parameters=new MimeTypeParameterList(rawdata.substring(semIndex));   }  else {     throw new MimeTypeParseException(\"Unable to find a sub type.\");   }   if (!isValidToken(primaryType)) {     throw new MimeTypeParseException(\"Primary type is invalid.\");   }   if (!isValidToken(subType)) {     throw new MimeTypeParseException(\"Sub type is invalid.\");   } } "
"public synchronized void removeObject(NSObject obj){   set.remove(obj); } "
"public static String escapeXml(String buffer){   String result=escapeXml(buffer.toCharArray(),buffer.length());   if (result == null) {     return buffer;   }  else {     return result;   } } "
"TemplateFile(Schema schema,Map<String,String> constants,String resourcePath,Random random,boolean generateBranches) throws IOException {   Reject.ifNull(schema,random);   this.generateBranches=generateBranches;   this.schema=schema;   this.constants=constants != null ? constants : new HashMap<String,String>();   this.resourcePath=resourcePath;   this.random=random;   registerDefaultTags();   retrieveFirstAndLastNames(); } "
"protected void parsePathParameters(org.apache.coyote.Request req,Request request){   req.decodedURI().toBytes();   ByteChunk uriBC=req.decodedURI().getByteChunk();   int semicolon=uriBC.indexOf(';',0);   if (semicolon == -1) {     return;   }   String enc=connector.getURIEncodingLower();   if (enc == null) {     enc=\"iso-8859-1\";   }   Charset charset=null;   try {     charset=B2CConverter.getCharsetLower(enc);   }  catch (  UnsupportedEncodingException e1) {     log.warn(sm.getString(\"coyoteAdapter.parsePathParam\",enc));   }   if (log.isDebugEnabled()) {     log.debug(sm.getString(\"coyoteAdapter.debug\",\"uriBC\",uriBC.toString()));     log.debug(sm.getString(\"coyoteAdapter.debug\",\"semicolon\",String.valueOf(semicolon)));     log.debug(sm.getString(\"coyoteAdapter.debug\",\"enc\",enc));   }   while (semicolon > -1) {     int start=uriBC.getStart();     int end=uriBC.getEnd();     int pathParamStart=semicolon + 1;     int pathParamEnd=ByteChunk.findBytes(uriBC.getBuffer(),start + pathParamStart,end,new byte[]{';','/'});     String pv=null;     if (pathParamEnd >= 0) {       if (charset != null) {         pv=new String(uriBC.getBuffer(),start + pathParamStart,pathParamEnd - pathParamStart,charset);       }       byte[] buf=uriBC.getBuffer();       for (int i=0; i < end - start - pathParamEnd; i++) {         buf[start + semicolon + i]=buf[start + i + pathParamEnd];       }       uriBC.setBytes(buf,start,end - start - pathParamEnd + semicolon);     }  else {       if (charset != null) {         pv=new String(uriBC.getBuffer(),start + pathParamStart,(end - start) - pathParamStart,charset);       }       uriBC.setEnd(start + semicolon);     }     if (log.isDebugEnabled()) {       log.debug(sm.getString(\"coyoteAdapter.debug\",\"pathParamStart\",String.valueOf(pathParamStart)));       log.debug(sm.getString(\"coyoteAdapter.debug\",\"pathParamEnd\",String.valueOf(pathParamEnd)));       log.debug(sm.getString(\"coyoteAdapter.debug\",\"pv\",pv));     }     if (pv != null) {       int equals=pv.indexOf('=');       if (equals > -1) {         String name=pv.substring(0,equals);         String value=pv.substring(equals + 1);         request.addPathParameter(name,value);         if (log.isDebugEnabled()) {           log.debug(sm.getString(\"coyoteAdapter.debug\",\"equals\",String.valueOf(equals)));           log.debug(sm.getString(\"coyoteAdapter.debug\",\"name\",name));           log.debug(sm.getString(\"coyoteAdapter.debug\",\"value\",value));         }       }     }     semicolon=uriBC.indexOf(';',semicolon);   } } "
"public CompositeName(String n) throws InvalidNameException {   impl=new NameImpl(null,n); } "
"public void requestSecondsUntilAccountExpiration(){   operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION); } "
"public LdapConnection connect(final String host,final int port,final Options options) throws LdapException {   final ConnectionFactory factory=getConnectionFactory(host,port,options);   return new LdapConnection(factory.getConnection(),options.get(TRANSACTIONID_OPTION)); } "
"public void rewindInputPosition(int position){   this.ptr=position; } "
"private void processGlobalAcis(DseeCompatAccessControlHandlerCfg configuration) throws InitializationException {   try {     final SortedSet<Aci> globalAcis=new TreeSet<>();     for (    String value : configuration.getGlobalACI()) {       globalAcis.add(Aci.decode(ByteString.valueOfUtf8(value),DN.rootDN()));     }     if (!globalAcis.isEmpty()) {       aciList.addAci(DN.rootDN(),globalAcis);       logger.debug(INFO_ACI_ADD_LIST_GLOBAL_ACIS,globalAcis.size());     }   }  catch (  Exception e) {     logger.traceException(e);     throw new InitializationException(INFO_ACI_HANDLER_FAIL_PROCESS_GLOBAL_ACI.get(configuration.dn()),e);   } } "
"public String[] findLifecycleListenerNames() throws MBeanException {   Container container=null;   List<String> result=new ArrayList<>();   try {     container=(Container)getManagedResource();   }  catch (  InstanceNotFoundException e) {     throw new MBeanException(e);   } catch (  RuntimeOperationsException e) {     throw new MBeanException(e);   } catch (  InvalidTargetObjectTypeException e) {     throw new MBeanException(e);   }   LifecycleListener[] listeners=container.findLifecycleListeners();   for (  LifecycleListener listener : listeners) {     result.add(listener.getClass().getName());   }   return result.toArray(new String[result.size()]); } "
"public void notify_deleted(BrdItem p_item){ } "
"public FrameBodyTDRC(FrameBodyTYER body){   originalID=ID3v23Frames.FRAME_ID_V3_TYER;   year=body.getText();   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);   setObjectValue(DataTypes.OBJ_TEXT,getFormattedText()); } "
"private ArrayList<String> addAttributeValues(String attrId,Attributes attrs,ArrayList<String> values) throws NamingException {   if (containerLog.isTraceEnabled())   containerLog.trace(\"  retrieving values for attribute \" + attrId);   if (attrId == null || attrs == null)   return values;   if (values == null)   values=new ArrayList<>();   Attribute attr=attrs.get(attrId);   if (attr == null)   return values;   NamingEnumeration<?> e=attr.getAll();   try {     while (e.hasMore()) {       String value=(String)e.next();       values.add(value);     }   }  catch (  PartialResultException ex) {     if (!adCompat)     throw ex;   }  finally {     e.close();   }   return values; } "
"public static Border createGrayLineBorder(){   if (grayLine == null) {     grayLine=new LineBorder(Color.gray,1);   }   return grayLine; } "
"public ServerConfigXMLAddServerViewBean(){   super(\"ServerConfigXMLAddServer\");   setDefaultDisplayURL(DEFAULT_DISPLAY_URL);   createPageTitleModel();   createPropertyModel();   registerChildren(); } "
"private static Object maskNull(Object key){   return (key == null) ? NULL_KEY : key; } "
"protected void writeAppData(byte[] data,int offset,int len) throws IOException {   if (!handshake_started) {     startHandshake();   }   if (logger != null) {     logger.println(\"SSLSocket.writeAppData: \" + len + \" \"+ SSLRecordProtocol.MAX_DATA_LENGTH);   }   try {     if (len < SSLRecordProtocol.MAX_DATA_LENGTH) {       output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));     }  else {       while (len >= SSLRecordProtocol.MAX_DATA_LENGTH) {         output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,SSLRecordProtocol.MAX_DATA_LENGTH));         offset+=SSLRecordProtocol.MAX_DATA_LENGTH;         len-=SSLRecordProtocol.MAX_DATA_LENGTH;       }       if (len > 0) {         output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));       }     }   }  catch (  AlertException e) {     reportFatalAlert(e.getDescriptionCode(),e.getReason());   } } "
"public static ValueExpression createValueException(final String value){   return JKJsfUtil.createValueException(value,Object.class); } "
"public SQLTimeoutException(String reason,String sqlState,int vendorCode){   super(reason,sqlState,vendorCode); } "
"public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {   this.m_contentHandler.startDocument();   while (null != pos) {     startNode(pos);     Node nextNode=pos.getFirstChild();     while (null == nextNode) {       endNode(pos);       if ((null != top) && top.equals(pos))       break;       nextNode=pos.getNextSibling();       if (null == nextNode) {         pos=pos.getParentNode();         if ((null == pos) || ((null != top) && top.equals(pos))) {           nextNode=null;           break;         }       }     }     pos=nextNode;   }   this.m_contentHandler.endDocument(); } "
"public void treeStructureChanged(TreeModelEvent e){   if (e != null) {     TreePath changedPath=SwingUtilities2.getTreePath(e,getModel());     FHTreeStateNode changedNode=getNodeForPath(changedPath,false,false);     if (changedNode == root || (changedNode == null && ((changedPath == null && treeModel != null && treeModel.getRoot() == null) || (changedPath != null && changedPath.getPathCount() <= 1)))) {       rebuild(true);     }  else     if (changedNode != null) {       boolean wasExpanded, wasVisible;       FHTreeStateNode parent=(FHTreeStateNode)changedNode.getParent();       wasExpanded=changedNode.isExpanded();       wasVisible=changedNode.isVisible();       int index=parent.getIndex(changedNode);       changedNode.collapse(false);       parent.remove(index);       if (wasVisible && wasExpanded) {         int row=changedNode.getRow();         parent.resetChildrenRowsFrom(row,index,changedNode.getChildIndex());         changedNode=getNodeForPath(changedPath,false,true);         changedNode.expand();       }       if (treeSelectionModel != null && wasVisible && wasExpanded)       treeSelectionModel.resetRowSelection();       if (wasVisible)       this.visibleNodesChanged();     }   } } "
"@Override public int compare(ConnectionHandlerDescriptor desc1,ConnectionHandlerDescriptor desc2){   int result=0;   if (sortColumn == 0) {     if (desc1.getAddresses().equals(desc2.getAddresses())) {       Integer port1=Integer.valueOf(desc1.getPort());       Integer port2=Integer.valueOf(desc2.getPort());       result=port1.compareTo(port2);     }  else {       result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));     }     if (result == 0) {       result=getProtocolString(desc1).compareTo(getProtocolString(desc2));     }     if (result == 0) {       result=desc1.getState().compareTo(desc2.getState());     }   }  else   if (sortColumn == 1) {     result=getProtocolString(desc1).compareTo(getProtocolString(desc2));     if (result == 0) {       result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));     }     if (result == 0) {       result=desc1.getState().compareTo(desc2.getState());     }   }  else {     result=desc1.getState().compareTo(desc2.getState());     if (result == 0) {       result=getAddressPortString(desc1).compareTo(getAddressPortString(desc2));     }     if (result == 0) {       result=getProtocolString(desc1).compareTo(getProtocolString(desc2));     }   }   if (!sortAscending) {     result=-result;   }   return result; } "
"public final void pushCurrentNodeAndExpression(int cn,int en){   m_currentNodes.push(cn);   m_currentExpressionNodes.push(cn); } "
"public String toString(){   StringBuilder sb=new StringBuilder(200);   sb.append(\"DelegationPrivilege Object:\");   sb.append(\"\\nname=\");   sb.append(name);   sb.append(\"\\npermissions=\");   sb.append(permissions);   sb.append(\"\\nsubject=\");   sb.append(subjects);   return sb.toString(); } "
"@Override public AvroGenerator createGenerator(OutputStream out) throws IOException {   IOContext ctxt=_createContext(out,false);   return _createGenerator(_decorate(out,ctxt),ctxt); } "
"public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {   this.m_contentHandler.startDocument();   while (null != pos) {     startNode(pos);     Node nextNode=pos.getFirstChild();     while (null == nextNode) {       endNode(pos);       if ((null != top) && top.equals(pos))       break;       nextNode=pos.getNextSibling();       if (null == nextNode) {         pos=pos.getParentNode();         if ((null == pos) || ((null != top) && top.equals(pos))) {           nextNode=null;           break;         }       }     }     pos=nextNode;   }   this.m_contentHandler.endDocument(); } "
"@Override public synchronized void delete(AudioFile af) throws CannotReadException, CannotWriteException {   ((MP3File)af).setID3v1Tag(null);   ((MP3File)af).setID3v2Tag(null);   af.commit(); } "
"public synchronized boolean isEmpty(){   return elementCount == 0; } "
"public PrivacyHeader createPrivacyHeader(String privacyType){   if (privacyType == null)   throw new NullPointerException(\"null privacyType arg\");   Privacy privacy=new Privacy(privacyType);   return privacy; } "
"ADSContextException(ErrorType error,LocalizableMessage msg,Throwable cause){   super(msg,cause);   this.error=error;   toString=\"ADSContextException: error type \" + error + \".\"+ (cause != null ? \"  Root cause: \" + cause : \"\"); } "
"public void endPrefixMapping(String prefix) throws SAXException {   if (DEBUG)   System.out.println(\"endPrefixMapping: prefix: \" + prefix);   if (null == prefix)   prefix=\"\";   int index=m_contextIndexes.peek() - 1;   do {     index=m_prefixMappings.indexOf(prefix,++index);   }  while ((index >= 0) && ((index & 0x01) == 0x01));   if (index > -1) {     m_prefixMappings.setElementAt(\"%@$#^@#\",index);     m_prefixMappings.setElementAt(\"%@$#^@#\",index + 1);   } } "
"public void message(String msg){   getDebugServiceInstance().message(msg,null); } "
"public boolean isAccessToUnderlyingConnectionAllowed(){   return this.accessToUnderlyingConnectionAllowed; } "
"public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){   if (api < Opcodes.ASM5) {     throw new RuntimeException();   }   if (mv != null) {     return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);   }   return null; } "
"public ByteVector putLong(final long l){   int length=this.length;   if (length + 8 > data.length) {     enlarge(8);   }   byte[] data=this.data;   int i=(int)(l >>> 32);   data[length++]=(byte)(i >>> 24);   data[length++]=(byte)(i >>> 16);   data[length++]=(byte)(i >>> 8);   data[length++]=(byte)i;   i=(int)l;   data[length++]=(byte)(i >>> 24);   data[length++]=(byte)(i >>> 16);   data[length++]=(byte)(i >>> 8);   data[length++]=(byte)i;   this.length=length;   return this; } "
"public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){   firePropertyChange(propertyName,Boolean.valueOf(oldValue),Boolean.valueOf(newValue)); } "
"public static Border createRaisedBevelBorder(){   return createSharedBevel(BevelBorder.RAISED); } "
"public ID3v23Tag(ByteBuffer buffer) throws TagException {   this(buffer,\"\"); } "
"public void parseAttributeTag(NodeList attributes){   int len=attributes.getLength();   for (int i=0; i < len; i++) {     Element tempElem=(Element)attributes.item(i);     String name=tempElem.getAttribute(\"name\");     if (name != null) {       String value=tempElem.getAttribute(\"value\");       namingResponse.setAttribute(name,value);     }   } } "
"private static LocalDate create(int year,int month,int dayOfMonth){   if (dayOfMonth > 28) {     int dom=31; switch (month) { case 2:       dom=(IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);     break; case 4: case 6: case 9: case 11:   dom=30; break; } if (dayOfMonth > dom) { if (dayOfMonth == 29) { throw new DateTimeException(\"Invalid date 'February 29' as '\" + year + \"' is not a leap year\"); }  else { throw new DateTimeException(\"Invalid date '\" + Month.of(month).name() + \" \"+ dayOfMonth+ \"'\"); } } } return new LocalDate(year,month,dayOfMonth); } "
"public void removeNode(Node n){   if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));   this.removeElement(n); } "
"public com.sun.identity.liberty.ws.idpp.jaxb.LStElement createLStElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LStElementImpl(); } "
"@Override public Promise<ResourceResponse,ResourceException> filterRead(Context context,ReadRequest request,RequestHandler next){   final String resource=ServerContextUtils.getResourceId(request,context);   final String action=ServerContextUtils.getReadString(request);   logAccess(resource,action,context);   return next.handleRead(context,request); } "
"@Override protected void doCatch(Throwable throwable){   exceptionHandler.handle(throwable,getResponse()); } "
"public static void notifyRestoreBeginning(Backend<?> backend,RestoreConfig config){   for (  RestoreTaskListener listener : directoryServer.restoreTaskListeners) {     try {       listener.processRestoreBegin(backend,config);     }  catch (    Exception e) {       logger.traceException(e);     }   } } "
"public IllformedLocaleException(String message,int errorIndex){   super(message + ((errorIndex < 0) ? \"\" : \" [at index \" + errorIndex + \"]\"));   _errIdx=errorIndex; } "
"public boolean equals(Object other){   if (other instanceof DerInputBuffer)   return equals((DerInputBuffer)other);  else   return false; } "
"private void interruptIdleWorkers(boolean onlyOne){   final ReentrantLock mainLock=this.mainLock;   mainLock.lock();   try {     for (    Worker w : workers) {       Thread t=w.thread;       if (!t.isInterrupted() && w.tryLock()) {         try {           t.interrupt();         }  catch (        SecurityException ignore) {         }  finally {           w.unlock();         }       }       if (onlyOne)       break;     }   }   finally {     mainLock.unlock();   } } "
"public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){   this(Method.GET,url,listener,errorListener); } "
"public BoardFrame(DesignFile p_design,Stat p_stat){   stat=p_stat;   design_file=p_design;   item_id_no_generator=new IdGenerator();   resources=new GuiResources(p_stat,\"gui.resources.BoardFrame\");   gui_help=new GuiHelp(stat);   work_frame=new JFrame();   menubar=new BoardMenuBar(p_stat,this);   work_frame.setJMenuBar(menubar);   toolbar_panel=new BoardToolbar(p_stat,this);   work_frame.add(toolbar_panel,java.awt.BorderLayout.NORTH);   message_panel=new BoardPanelStatus(p_stat);   work_frame.add(message_panel,BorderLayout.SOUTH);   select_toolbar=new BoardToolbarSelectedItem(p_stat,this);   screen_messages=new ScreenMessages(message_panel,p_stat);   scroll_pane=new JScrollPane();   scroll_pane.setPreferredSize(new Dimension(1150,800));   scroll_pane.setVerifyInputWhenFocusTarget(false);   work_frame.add(scroll_pane,BorderLayout.CENTER);   board_panel=new BoardPanel(screen_messages,this,p_stat);   scroll_pane.setViewportView(board_panel);   work_frame.setTitle(resources.getString(\"title\"));   work_frame.addWindowListener(new WindowStateListener());   work_frame.pack(); } "
"public AbsoluteInheritedDefaultBehaviorProvider(String pathString,String propertyName){   this.pathString=pathString;   this.propertyName=propertyName; } "
"void addParamsFromSuccessfulTests(Object[] testParams){   if (testParams != null) {     successfulTestParams.put(testParams,testParams);   } } "
"public InternalFrameEvent(JInternalFrame source,int id){   super(source,id); } "
"public Collection<ResourceSetDescription> filterPolicies(Set<ResourceSetDescription> resourceSets,ResourceSetWithPolicyQuery query){   Collection<ResourceSetDescription> filteredResourceSets=new HashSet<>();   filteredResourceSets.addAll(query.getResourceSetQuery().accept(RESOURCE_SET_QUERY_EVALUATOR,resourceSets));   return filteredResourceSets; } "
"public R visitIPAddress(IPAddressPropertyDefinition pd,P p){   return visitUnknown(pd,p); } "
"public Builder names(final Collection<String> names){   this.names.addAll(names);   return this; } "
"public IfPresentTag(){   attributeType=null;   assertionValue=null; } "
"public static String removeSpaces(final String value){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   return value.replaceAll(\"\\\\s\",\"\"); } "
"public void testBitLengthNegative1(){   byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};   int aSign=-1;   BigInteger aNumber=new BigInteger(aSign,aBytes);   assertEquals(108,aNumber.bitLength()); } "
"private boolean rehash(){   if (tombstones + size < maximumLoad) {     return false;   }   int capacity=table.length >> 1;   int newCapacity=capacity;   if (size > (capacity >> 1)) {     newCapacity=capacity * 2;   }   Object[] oldTable=this.table;   initializeTable(newCapacity);   this.tombstones=0;   if (size == 0) {     return true;   }   for (int i=oldTable.length - 2; i >= 0; i-=2) {     Object k=oldTable[i];     if (k == null || k == TOMBSTONE) {       continue;     }     @SuppressWarnings(\"unchecked\") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;     ThreadLocal<?> key=reference.get();     if (key != null) {       add(key,oldTable[i + 1]);     }  else {       size--;     }   }   return true; } "
"public void testDivideAndRemainderMathContextDOWN(){   String a=\"3736186567876876578956958765675671119238118911893939591735\";   int aScale=45;   String b=\"134432345432345748766876876723342238476237823787879183470\";   int bScale=20;   int precision=15;   RoundingMode rm=RoundingMode.DOWN;   MathContext mc=new MathContext(precision,rm);   String res=\"0E-25\";   int resScale=25;   String rem=\"3736186567876.876578956958765675671119238118911893939591735\";   int remScale=45;   BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);   BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);   BigDecimal result[]=aNumber.divideAndRemainder(bNumber,mc);   assertEquals(\"incorrect quotient value\",res,result[0].toString());   assertEquals(\"incorrect quotient scale\",resScale,result[0].scale());   assertEquals(\"incorrect remainder value\",rem,result[1].toString());   assertEquals(\"incorrect remainder scale\",remScale,result[1].scale()); } "
"public static void validateRootDirectory(File rootDirectory) throws IllegalArgumentException {   LocalizableMessage failureReason=null;   if (rootDirectory == null) {     failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NULL.get();   }  else   if (!rootDirectory.exists()) {     failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NO_EXIST.get(Utils.getPath(rootDirectory));   }  else   if (!rootDirectory.isDirectory()) {     failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NOT_DIR.get(Utils.getPath(rootDirectory));   }  else {     String[] children=rootDirectory.list();     if (children != null) {       Set<String> childrenSet=CollectionUtils.newHashSet(children);       for (      String dir : REQUIRED_DIRECTORIES) {         if (!childrenSet.contains(dir)) {           failureReason=INFO_ERROR_INSTALL_ROOT_DIR_NO_DIR.get(Utils.getPath(rootDirectory),dir);         }       }     }  else {       failureReason=INFO_ERROR_INSTALL_ROOT_DIR_EMPTY.get(Utils.getPath(rootDirectory));     }   }   if (failureReason != null) {     throw new IllegalArgumentException(failureReason.toString());   } } "
"@Override public void put(String name,boolean value){   emulatedFields.put(name,value); } "
"public static InternalSession newSession(final String domain,final boolean stateless){   return getSessionService().newInternalSession(domain,stateless); } "
"public Object clone(){   try {     ZipEntry e=(ZipEntry)super.clone();     e.extra=(extra == null) ? null : extra.clone();     return e;   }  catch (  CloneNotSupportedException e) {     throw new InternalError(e);   } } "
"@Override public void fileModified(File newWar){   try {     File deployWar=new File(getDeployDirFile(),newWar.getName());     ContextName cn=new ContextName(deployWar.getName(),true);     if (deployWar.exists() && deployWar.lastModified() > newWar.lastModified()) {       if (log.isInfoEnabled())       log.info(sm.getString(\"farmWarDeployer.alreadyDeployed\",cn.getName()));       return;     }     if (log.isInfoEnabled())     log.info(sm.getString(\"farmWarDeployer.modInstall\",cn.getName(),deployWar.getAbsolutePath()));     if (!isServiced(cn.getName())) {       addServiced(cn.getName());       try {         copy(newWar,deployWar);         check(cn.getName());       }   finally {         removeServiced(cn.getName());       }     }  else {       log.error(sm.getString(\"farmWarDeployer.servicingDeploy\",cn.getName(),deployWar.getName()));     }     install(cn.getName(),deployWar);   }  catch (  Exception x) {     log.error(sm.getString(\"farmWarDeployer.modInstallFail\"),x);   } } "
"public boolean passed(){   boolean passed=true;   for (Iterator i=tests.iterator(); i.hasNext() && passed; ) {     Test t=(Test)i.next();     passed=t.passed();   }   return passed; } "
"public ReflectionException(java.lang.Exception e){   super();   exception=e; } "
"public static void reportEnd(String str,Object[] param){   writeProgressText(str,param); } "
"protected TableCellRenderer createDefaultRenderer(){   return new DefaultTableCellHeaderRenderer(); } "
"public void addLanguage(final String language){   if (language.length() < MetadataDescriptor.MAX_LANG_INDEX) {     if (!this.languages.contains(language)) {       this.languages.add(language);     }   }  else {     throw new IllegalArgumentException(ErrorMessage.WMA_LENGTH_OF_LANGUAGE_IS_TOO_LARGE.getMsg(language.length() * 2 + 2));   } } "
"public void close() throws IOException {   out.close(); } "
"public static void verifyGooglePlayService(Context context) throws DeviceUnsupportedException, GooglePlayServicesOutDatedException, GooglePlayServicesNotInstalledException, UnknownErrorException {   GoogleApiAvailability googleAPI=GoogleApiAvailability.getInstance();   int status=googleAPI.isGooglePlayServicesAvailable(context);   if (status == ConnectionResult.SUCCESS) {     return;   }   if (googleAPI.isUserResolvableError(status)) { switch (status) { case ConnectionResult.SERVICE_MISSING: {         throw new GooglePlayServicesNotInstalledException(context.getString(R.string.google_play_service_not_installed));       } case ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED: {       throw new GooglePlayServicesOutDatedException(context.getString(R.string.google_play_service_out_date));     } default : {     throw new UnknownErrorException(context.getString(R.string.google_play_service_unknown_error,status));   } } }  else { throw new DeviceUnsupportedException(context.getString(R.string.google_play_service_unsupported_device)); } } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"private String updateMethodName(MethodInsnNode min){   ClassNode methodOwner=getClassNode(min.owner);   while (!methodOwner.name.equals(\"java/lang/Object\")) {     MethodNode method=getMethod(methodOwner,min.name,min.desc);     if (method != null) {       String renamed=getRefactoredName(method);       if (!renamed.equals(min.name)) {         return renamed;       }     }     methodOwner=getClassNode(methodOwner.superName);   }   return min.name; } "
"@Override public Map<String,Object> generate(Method method){   Map<String,Object> fieldPatternMap=new LinkedHashMap<String,Object>();   for (  CollectionPattern collectionPattern : CollectionPattern.getCollectionPatternsFromMethod(method)) {     String resourceNameString=collectionPattern.getTemplatizedResourcePath();     fieldPatternMap.put(collectionPattern.getFieldPath(),nameMap.get(resourceNameString));   }   if (fieldPatternMap.size() > 0) {     Map<String,Object> result=new LinkedHashMap<String,Object>();     result.put(CONFIG_KEY_FIELD_NAME_PATTERNS,fieldPatternMap);     return result;   }  else {     return null;   } } "
"public Tag read(RandomAccessFile raf) throws CannotReadException, IOException {   logger.config(\"Starting to read ogg vorbis tag from file:\");   byte[] rawVorbisCommentData=readRawPacketData(raf);   VorbisCommentTag tag=vorbisCommentReader.read(rawVorbisCommentData,true);   logger.fine(\"CompletedReadCommentTag\");   return tag; } "
"public com.sun.identity.liberty.ws.idpp.jaxb.AltCNElement createAltCNElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltCNElementImpl(); } "
"public long skip(long n) throws IOException {   if (n < 0L)   throw new IllegalArgumentException(\"skip value is negative\"); synchronized (lock) {     ensureOpen();     int avail=buf.length - pos;     if (avail > 0) {       if (n <= avail) {         pos+=n;         return n;       }  else {         pos=buf.length;         n-=avail;       }     }     return avail + super.skip(n);   } } "
"public void removeAttribute(String name){ synchronized (names) {     names.remove(name);   } } "
"public Attribute createAttribute(){   Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE);   if (obj == null) {     return new AttributeImpl();   }  else {     return (Attribute)obj;   } } "
"public SoftReference(T r){   super(r,null); } "
"public Document create(String database,String table,String json) throws IndexParseException {   verifyTable(database,table);   Document doc=new Document();   doc.setTable(database,table);   doc.setObjectAsString(json);   doc.setUuid(UUID.randomUUID());   ValidationEngine.validateAndThrow(doc);   try {     Document created=docRepo.create(doc);     notifyAllPlugins(NotifierPlugin.MutateType.CREATE,created);     return created;   }  catch (  RuntimeException e) {     if (e.getCause() != null && e.getCause() instanceof IndexParseException) {       throw (IndexParseException)e.getCause();     }  else {       throw e;     }   } } "
"public void clearParameters(){   if (null == m_params)   return;   m_params.clear(); } "
"public static void write(byte[] data,OutputStream output) throws IOException {   if (data != null) {     output.write(data);   } } "
"@Override public String toString(){   StringBuilder sb=new StringBuilder();   sb.append(\"CGIEnvironment Info:\");   sb.append(System.lineSeparator());   if (isValid()) {     sb.append(\"Validity: [true]\");     sb.append(System.lineSeparator());     sb.append(\"Environment values:\");     sb.append(System.lineSeparator());     for (    Entry<String,String> entry : env.entrySet()) {       sb.append(\"  \");       sb.append(entry.getKey());       sb.append(\": [\");       sb.append(blanksToString(entry.getValue(),\"will be set to blank\"));       sb.append(\"]\");       sb.append(System.lineSeparator());     }     sb.append(\"Derived Command :[\");     sb.append(nullsToBlanks(command));     sb.append(\"]\");     sb.append(System.lineSeparator());     sb.append(\"Working Directory: [\");     if (workingDirectory != null) {       sb.append(workingDirectory.toString());     }     sb.append(\"]\");     sb.append(System.lineSeparator());     sb.append(\"Command Line Params:\");     sb.append(System.lineSeparator());     for (    String param : cmdLineParameters) {       sb.append(\"  [\");       sb.append(param);       sb.append(\"]\");       sb.append(System.lineSeparator());     }   }  else {     sb.append(\"Validity: [false]\");     sb.append(System.lineSeparator());     sb.append(\"CGI script not found or not specified.\");     sb.append(System.lineSeparator());     sb.append(\"Check the HttpServletRequest pathInfo property to see if it is what \");     sb.append(System.lineSeparator());     sb.append(\"you meant it to be. You must specify an existant and executable file \");     sb.append(System.lineSeparator());     sb.append(\"as part of the path-info.\");     sb.append(System.lineSeparator());   }   return sb.toString(); } "
"public PdfCanvasProcessor(IEventListener eventListener,Map<String,IContentOperator> additionalContentOperators){   this(eventListener);   for (  Map.Entry<String,IContentOperator> entry : additionalContentOperators.entrySet()) {     registerContentOperator(entry.getKey(),entry.getValue());   } } "
"private synchronized boolean extendDirtyRegion(Component c,int x,int y,int w,int h){   Rectangle r=dirtyComponents.get(c);   if (r != null) {     SwingUtilities.computeUnion(x,y,w,h,r);     return true;   }   return false; } "
"public void testCertPathValidator09() throws NoSuchAlgorithmException, NoSuchProviderException {   if (!PKIXSupport) {     fail(NotSupportMsg);     return;   }   try {     CertPathValidator.getInstance(null,defaultProvider);     fail(\"NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null\");   }  catch (  NullPointerException e) {   } catch (  NoSuchAlgorithmException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       CertPathValidator.getInstance(invalidValues[i],defaultProvider);       fail(\"NoSuchAlgorithm must be thrown\");     }  catch (    NoSuchAlgorithmException e1) {     }   } } "
"public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {   try {     if (!useHashedPassword) {       String userpasswd=request.getParameter(PASSWORD_TOKEN);       if (userpasswd != null) {         ssoToken.setProperty(\"EncryptedUserPassword\",Crypt.encrypt(userpasswd));       }     }  else {       String userName=ssoToken.getPrincipal().getName();       String universalID=ssoToken.getProperty(\"sun.am.UniversalIdentifier\");       if (debug.messageEnabled()) {         debug.message(\"WSSReplayPassword:Authenticated user : \" + userName);         debug.message(\"WSSReplayPassword:Authenticated UUID : \" + universalID);       }       AMIdentity amId=new AMIdentity(getAdminToken(),universalID);       Set tmp=amId.getAttribute(\"userPassword\");       if (tmp != null && !tmp.isEmpty()) {         String userPassword=(String)tmp.iterator().next();         ssoToken.setProperty(\"HashedUserPassword\",userPassword);       }     }   }  catch (  SSOException sse) {     debug.warning(\"WSSReplayPasswd.onLoginSuccess: \" + \"sso exception\",sse);   } catch (  IdRepoException ire) {     if (debug.warningEnabled()) {       debug.warning(\"WSSReplayPassword.onLoginSuccess: \",ire);     }   } } "
"public Set<ResourceSetLabel> forResourceSet(String realm,String username,String resourceSetId,boolean includeResourceSets) throws ResourceException {   return query(realm,username,and(equality(\"objectClass\",OBJECT_CLASS),equality(RESOURCE_SET_ATTR,resourceSetId)),includeResourceSets); } "
"private void readObject(ObjectInputStream s) throws InvalidObjectException {   throw new InvalidObjectException(\"Deserialization via serialization delegate\"); } "
"public void destroySession(Session requester,SessionID sessionToDestroy) throws SessionException {   if (sessionToDestroy == null) {     return;   }   sessionOperationStrategy.getOperation(sessionToDestroy).destroy(requester,resolveSession(sessionToDestroy)); } "
"public static boolean areDnsEqual(String dn1,String dn2){   try {     LdapName name1=new LdapName(dn1);     LdapName name2=new LdapName(dn2);     return name1.equals(name2);   }  catch (  Exception ignored) {     return false;   } } "
"private void sendRegistrationToServer(String token){ } "
"public BindOperation processSASLBind(ByteString rawBindDN,String saslMechanism,ByteString saslCredentials){   return processSASLBind(rawBindDN,saslMechanism,saslCredentials,null); } "
"public static String serialize(Serializable object) throws JobPersistenceException {   try {     ByteArrayOutputStream baos=new ByteArrayOutputStream();     ObjectOutputStream oos=new ObjectOutputStream(baos);     oos.writeObject(object);     oos.flush();     oos.close();     return Base64.encode(baos.toByteArray());   }  catch (  Exception e) {     e.printStackTrace();     throw new JobPersistenceException(e.getMessage());   } } "
"public static String insert(final String value,final String substr,final int index){   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   validate(substr,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);   if (index > value.length()) {     return value;   }   return append(value.substring(0,index),substr,value.substring(index)); } "
"public NullKeyManagerProvider(){ } "
"public static void registerAlertGenerator(AlertGenerator alertGenerator){   DN componentDN=alertGenerator.getComponentEntryDN();   JMXMBean mBean=directoryServer.mBeans.get(componentDN);   if (mBean == null) {     mBean=new JMXMBean(componentDN);     mBean.addAlertGenerator(alertGenerator);     directoryServer.mBeans.put(componentDN,mBean);   }  else {     mBean.addAlertGenerator(alertGenerator);   } } "
"public MP3Player(final String filename) throws FileNotFoundException {   this(JKIOUtil.getInputStream(filename));   this.filename=filename; } "
"@Override public String encodeURL(String url){   return this._getHttpServletResponse().encodeURL(url); } "
"private void lastChanceElection(char searchTerm,TreeNode child,List<TreeNode> candidates,SearchContext context){   if (context.has(ContextKey.LAST_CHARACTER)) {     while (child != null) {       electWildcard(searchTerm,child,candidates,context);       child=child.getSibling();     }   } } "
"private static void validateValue(TypeRef type,String value){   Type descType=type.getKind(); switch (descType) { case TYPE_BOOL:     String lowerCaseValue=value.toLowerCase();   if (lowerCaseValue.equals(\"true\") || lowerCaseValue.equals(\"false\")) {     return;   } break; case TYPE_DOUBLE: case TYPE_FLOAT: if (Pattern.matches(\"[+-]?([0-9]*[.])?[0-9]+\",value)) { return; } break; case TYPE_INT64: case TYPE_UINT64: case TYPE_SINT64: case TYPE_FIXED64: case TYPE_SFIXED64: case TYPE_INT32: case TYPE_UINT32: case TYPE_SINT32: case TYPE_FIXED32: case TYPE_SFIXED32: if (Pattern.matches(\"[+-]?[0-9]+\",value)) { return; } break; case TYPE_STRING: case TYPE_BYTES: Matcher matcher=Pattern.compile(\"([^\\\\\\\"']*)\").matcher(value); if (matcher.matches()) { return; } break; default : throw new IllegalArgumentException(\"Tried to assign value for unsupported type \" + type + \"; value \"+ value); } throw new IllegalArgumentException(\"Could not assign value '\" + value + \"' to type \"+ type); } "
"protected void uninstallListeners(){   if (propertyChangeListener != null) {     splitPane.removePropertyChangeListener(propertyChangeListener);     propertyChangeListener=null;   }   if (focusListener != null) {     splitPane.removeFocusListener(focusListener);     focusListener=null;   }   keyboardUpLeftListener=null;   keyboardDownRightListener=null;   keyboardHomeListener=null;   keyboardEndListener=null;   keyboardResizeToggleListener=null;   handler=null; } "
"public MetaState(MetaState state){   setMetaState(state); } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodeattributenodevalue.class,args); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagNameNS(\"http://www.nomatch.com\",\"address\");   assertSize(\"matchSize\",0,elementList); } "
"public com.sun.identity.saml2.jaxb.entityconfig.AttributeQueryConfigElement createAttributeQueryConfigElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeQueryConfigElementImpl(); } "
"@Override public Principal authenticate(String username){   Principal authenticatedUser=null;   for (  Realm realm : realms) {     if (log.isDebugEnabled()) {       log.debug(sm.getString(\"combinedRealm.authStart\",username,realm.getClass().getName()));     }     authenticatedUser=realm.authenticate(username);     if (authenticatedUser == null) {       if (log.isDebugEnabled()) {         log.debug(sm.getString(\"combinedRealm.authFail\",username,realm.getClass().getName()));       }     }  else {       if (log.isDebugEnabled()) {         log.debug(sm.getString(\"combinedRealm.authSuccess\",username,realm.getClass().getName()));       }       break;     }   }   return authenticatedUser; } "
"public Object clone(){   UserSelfCheckCondition theClone=null;   try {     theClone=(UserSelfCheckCondition)super.clone();     theClone.properties=Collections.unmodifiableMap(com.sun.identity.sm.SMSUtils.copyAttributes(properties));   }  catch (  CloneNotSupportedException e) {     throw new InternalError();   }   return theClone; } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapremovenameditemns08.class,args); } "
"public Set createEntity(String entityName,String entityType,Map attributes) throws EntityException, SSOException {   try {     Object[] objs={tokenString,entityName,entityType,entityLocation,attributes};     return ((Set)client.send(client.encodeMessage(\"createEntity\",objs),sessionCookies.getLBCookie(token.getTokenID().toString()),null));   }  catch (  RemoteException rex) {     EntityUtils.debug.warning(\"EntityObject:createEntity->RemoteException\",rex);     throw new EntityException(rex.getMessage(),\"1000\");   } catch (  Exception ex) {     EntityUtils.debug.warning(\"EntityObject:createEntity->Exception\",ex);     throw new EntityException(ex.getMessage(),\"1000\");   } } "
"public void test_ConstructorLjava_lang_StringLjava_security_IdentityScope(){   String nameNull=null;   String[] str={\"test\",\"\",\"!@#$%^&*()\",\"identity name\"};   IdentityScope is;   IdentityScope iss=new IdentityScopeSubclass(\"test scope\");   for (int i=0; i < str.length; i++) {     try {       is=new IdentityScopeSubclass(str[i],new IdentityScopeSubclass());       assertNotNull(is);       assertTrue(is instanceof IdentityScope);     }  catch (    Exception e) {       fail(\"Unexpected exception for parameter \" + str[i]);     }   }   try {     is=new IdentityScopeSubclass(nameNull,new IdentityScopeSubclass());   }  catch (  NullPointerException npe) {   } catch (  Exception e) {     fail(\"Incorrect exception \" + e + \" was thrown\");   }   try {     is=new IdentityScopeSubclass(\"test\",iss);     is=new IdentityScopeSubclass(\"test\",iss);     fail(\"KeyManagementException was not thrown\");   }  catch (  KeyManagementException npe) {   } catch (  Exception e) {     fail(\"Incorrect exception \" + e + \" was thrown instead of KeyManagementException\");   } } "
"public boolean isAuthenticated(){   return isAuthenticated; } "
"public void handleRequest(RequestContext rc) throws CLIException {   super.handleRequest(rc);   ldapLogin();   SSOToken adminSSOToken=getAdminSSOToken();   IOutput outputWriter=getOutputWriter();   String serverName=getStringOptionValue(IArgument.SERVER_NAME);   String xmlFile=getStringOptionValue(IArgument.XML_FILE);   String[] params={serverName};   try {     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"ATTEMPT_IMPORT_SERVER\",params);     if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {       ServerConfiguration.importServerInstance(adminSSOToken,serverName,xmlFile);       outputWriter.printlnMessage(getResourceString(\"import-server-succeeded\"));     }  else {       outputWriter.printlnMessage(getResourceString(\"import-server-already-exists\"));     }     writeLog(LogWriter.LOG_ACCESS,Level.INFO,\"SUCCEED_IMPORT_SERVER\",params);   }  catch (  ConfigurationException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  ParserConfigurationException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SAXException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SSOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  IOException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } catch (  SMSException e) {     String[] args={serverName,e.getMessage()};     debugError(\"CreateServer.handleRequest\",e);     writeLog(LogWriter.LOG_ERROR,Level.INFO,\"FAILED_IMPORT_SERVER\",args);     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);   } } "
"public Set createOrganizationalUnits(Map organizationalUnitsMap) throws AMException, SSOException {   Iterator iter=organizationalUnitsMap.keySet().iterator();   Set orgUnits=new HashSet();   while (iter.hasNext()) {     String orgUnitName=(String)iter.next();     String orgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + \"=\" + orgUnitName+ \",\"+ super.entryDN;     Map attributes=(Map)organizationalUnitsMap.get(orgUnitName);     AMOrganizationalUnitImpl orgUnitImpl=new AMOrganizationalUnitImpl(super.token,orgUnitDN);     orgUnitImpl.setAttributes(attributes);     orgUnitImpl.create();     orgUnits.add(orgUnitImpl);   }   return orgUnits; } "
"static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {   int capacity=numDataBytes * 8;   if (bits.getSize() > capacity) {     throw new WriterException(\"data bits cannot fit in the QR Code\" + bits.getSize() + \" > \"+ capacity);   }   for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {     bits.appendBit(false);   }   int numBitsInLastByte=bits.getSize() & 0x07;   if (numBitsInLastByte > 0) {     for (int i=numBitsInLastByte; i < 8; i++) {       bits.appendBit(false);     }   }   int numPaddingBytes=numDataBytes - bits.getSizeInBytes();   for (int i=0; i < numPaddingBytes; ++i) {     bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);   }   if (bits.getSize() != capacity) {     throw new WriterException(\"Bits size does not equal capacity\");   } } "
"public static void writeLDIFLine(StringBuilder line,BufferedWriter writer,boolean wrapLines,int wrapColumn) throws IOException {   ifNull(line,writer);   int length=line.length();   if (wrapLines && length > wrapColumn) {     writer.write(line.substring(0,wrapColumn));     writer.newLine();     int pos=wrapColumn;     while (pos < length) {       int writeLength=Math.min(wrapColumn - 1,length - pos);       writer.write(' ');       writer.write(line.substring(pos,pos + writeLength));       writer.newLine();       pos+=wrapColumn - 1;     }   }  else {     writer.write(line.toString());     writer.newLine();   } } "
"public boolean containsKey(Object o){ synchronized (children) {     return children.containsKey(o);   } } "
"public SuffixFileFilter(List<String> suffixes,IOCase caseSensitivity){   if (suffixes == null) {     throw new IllegalArgumentException(\"The list of suffixes must not be null\");   }   this.suffixes=suffixes.toArray(new String[suffixes.size()]);   this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity; } "
"public void mouseMoved(MouseEvent e){   ((MouseMotionListener)a).mouseMoved(e);   ((MouseMotionListener)b).mouseMoved(e); } "
"public void addQualifier(XMPNode qualNode) throws XMPException {   assertQualifierNotExisting(qualNode.getName());   qualNode.setParent(this);   qualNode.getOptions().setQualifier(true);   getOptions().setHasQualifiers(true);   if (qualNode.isLanguageNode()) {     options.setHasLanguage(true);     getQualifier().add(0,qualNode);   }  else   if (qualNode.isTypeNode()) {     options.setHasType(true);     getQualifier().add(!options.getHasLanguage() ? 0 : 1,qualNode);   }  else {     getQualifier().add(qualNode);   } } "
"public ClientFaultException(final SAML2IdentityProviderAdapter idpAdapter,final String messageCode,final String detail){   super(idpAdapter,messageCode,detail); } "
"private void putBackDefaultAggregationDefinitionFromTargetAndSourceEnabled(){   TestCfg.removeConstraint(aggregationPropertyDefinitionTargetAndSourceMustBeEnabled.getSourceConstraint());   TestCfg.addPropertyDefinition(aggregationPropertyDefinitionDefault);   TestCfg.addConstraint(aggregationPropertyDefinitionDefault.getSourceConstraint()); } "
"public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {   retrieveCommonProperties();   IDFFModel model=(IDFFModel)getModel();   try {     CCAddRemove addRemoveList=(CCAddRemove)getChild(model.ATTR_AFFILIATE_MEMBERS);     addRemoveList.restoreStateData();     CCAddRemoveModel addRemoveModel=(CCAddRemoveModel)addRemoveList.getModel();     Set members=new HashSet(getSelectedValues(addRemoveModel));     AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTES);     Map orig=model.getAffiliateProfileAttributeValues(realm,entityName);     Map values=ps.getAttributeValues(orig,false,model);     model.updateAffiliateProfile(realm,entityName,values,members);     setInlineAlertMessage(CCAlert.TYPE_INFO,\"message.information\",\"idff.entityDescriptor.Affiliate.updated\");   }  catch (  AMConsoleException e) {     setInlineAlertMessage(CCAlert.TYPE_ERROR,\"message.error\",e.getMessage());     debug.warning(\"IDFFAffiliateViewBean.handleButton1Request\",e);   }   forwardTo(); } "
"@Override public Animation onCreateAnimation(final int transit,final boolean enter,final int nextAnim){   return delegate.onCreateAnimation(transit,enter,nextAnim); } "
"public JLayeredPane(){   setLayout(null); } "
"@Override public void onCreate(SQLiteDatabase db){   addHistoryTable(db); } "
"public boolean beginTabCommonDisplay(ChildDisplayEvent event){   return (tabModel.getNodeCount() > 1); } "
"private static byte[] readClass(final InputStream is,boolean close) throws IOException {   if (is == null) {     throw new IOException(\"Class not found\");   }   try {     byte[] b=new byte[is.available()];     int len=0;     while (true) {       int n=is.read(b,len,b.length - len);       if (n == -1) {         if (len < b.length) {           byte[] c=new byte[len];           System.arraycopy(b,0,c,0,len);           b=c;         }         return b;       }       len+=n;       if (len == b.length) {         int last=is.read();         if (last < 0) {           return b;         }         byte[] c=new byte[b.length + 1000];         System.arraycopy(b,0,c,0,len);         c[len++]=(byte)last;         b=c;       }     }   }   finally {     if (close) {       is.close();     }   } } "
"public static double readSwappedDouble(byte[] data,int offset){   return Double.longBitsToDouble(readSwappedLong(data,offset)); } "
"public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {   ElemParam v=(ElemParam)handler.getElemTemplateElement();   handler.getStylesheet().appendChild(v);   handler.getStylesheet().setParam(v);   super.endElement(handler,uri,localName,rawName); } "
"public static StringArgument proxyAuthIdArgument() throws ArgumentException {   return StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_DESCRIPTION_PROXYAUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildArgument(); } "
"@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static Map toSimpleModel(Map<String,Object> mapToClean){   for (  Map.Entry<String,Object> entry : mapToClean.entrySet()) {     entry.setValue(asSimpleBinding(entry.getValue()));   }   return mapToClean; } "
"protected Type(String name){   super(name); } "
"private static final boolean subPartMatchNS(String p,String t){   return (p == t) || ((null != p) && ((p.length() > 0) ? ((t == WILD) || p.equals(t)) : null == t)); } "
"private static void guessLetter(int offset,char[] solution) throws IOException {   for (char c=0; c < 256; c++) {     if (validChars[c]) {       solution[offset]=c;       checkAndSolve(solution,false);     }   }   solution[offset]=0; } "
"public void layoutContainer(Container target){ synchronized (target.getTreeLock()) {     Insets insets=target.getInsets();     int maxwidth=target.width - (insets.left + insets.right + hgap * 2);     int nmembers=target.getComponentCount();     int x=0, y=insets.top + vgap;     int rowh=0, start=0;     boolean ltr=target.getComponentOrientation().isLeftToRight();     boolean useBaseline=getAlignOnBaseline();     int[] ascent=null;     int[] descent=null;     if (useBaseline) {       ascent=new int[nmembers];       descent=new int[nmembers];     }     for (int i=0; i < nmembers; i++) {       Component m=target.getComponent(i);       if (m.isVisible()) {         Dimension d=m.getPreferredSize();         m.setSize(d.width,d.height);         if (useBaseline) {           int baseline=m.getBaseline(d.width,d.height);           if (baseline >= 0) {             ascent[i]=baseline;             descent[i]=d.height - baseline;           }  else {             ascent[i]=-1;           }         }         if ((x == 0) || ((x + d.width) <= maxwidth)) {           if (x > 0) {             x+=hgap;           }           x+=d.width;           rowh=Math.max(rowh,d.height);         }  else {           rowh=moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,i,ltr,useBaseline,ascent,descent);           x=d.width;           y+=vgap + rowh;           rowh=d.height;           start=i;         }       }     }     moveComponents(target,insets.left + hgap,y,maxwidth - x,rowh,start,nmembers,ltr,useBaseline,ascent,descent);   } } "
"public void uninstallingUI(){   if (propertyChangeListener != null) {     comboBox.removePropertyChangeListener(propertyChangeListener);   }   if (itemListener != null) {     comboBox.removeItemListener(itemListener);   }   uninstallComboBoxModelListeners(comboBox.getModel());   uninstallKeyboardActions();   uninstallListListeners();   uninstallScrollerListeners();   list.setModel(EmptyListModel); } "
"final int hash(Object k){   int h=k.hashCode();   h^=(h >>> 20) ^ (h >>> 12);   return h ^ (h >>> 7) ^ (h >>> 4); } "
"private void reset(){   _handler=null;   _depth=0;   _mapping.clear();   _stateInfos.clear();   _colorTypes.clear();   _statePainters.clear();   _stylePainters.clear(); } "
"public Support_StringReader(String str){   super(str);   this.str=str;   this.count=str.length(); } "
"public void test_getInstanceLjava_lang_String() throws Exception {   try {     TrustManagerFactory.getInstance(null);     fail(\"NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null\");   }  catch (  NoSuchAlgorithmException e) {   } catch (  NullPointerException e) {   }   for (int i=0; i < invalidValues.length; i++) {     try {       TrustManagerFactory.getInstance(invalidValues[i]);       fail(\"NoSuchAlgorithmException must be thrown (algorithm: \".concat(invalidValues[i]).concat(\")\"));     }  catch (    NoSuchAlgorithmException e) {     }   }   TrustManagerFactory tmf;   for (int i=0; i < validValues.length; i++) {     tmf=TrustManagerFactory.getInstance(validValues[i]);     assertTrue(\"Not instanceof TrustManagerFactory object\",tmf instanceof TrustManagerFactory);     assertEquals(\"Incorrect algorithm\",tmf.getAlgorithm(),validValues[i]);     assertEquals(\"Incorrect provider\",tmf.getProvider(),mProv);     checkResult(tmf);   } } "
"private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {   s.defaultReadObject();   Throwable cause=super.getCause();   if (!(cause instanceof IOException))   throw new InvalidObjectException(\"Cause must be an IOException\"); } "
"public static Map<String,Set<String>> parse(CommandManager mgr,String fileName,List listAttributeValues) throws CLIException {   Map<String,Set<String>> results=null;   if (fileName != null) {     results=parse(mgr,fileName);   }   if ((listAttributeValues != null) && !listAttributeValues.isEmpty()) {     if (results != null) {       results.putAll(parse(mgr,listAttributeValues));     }  else {       results=parse(mgr,listAttributeValues);     }   }   return (results == null) ? new HashMap<String,Set<String>>() : results; } "
"public XMLString xstr(){   return XMLStringFactoryImpl.getFactory().newstr(str()); } "
"public void clear(){   elements=0; } "
"public final boolean equals(Object node){   try {     return equals((Node)node);   }  catch (  ClassCastException cce) {     return false;   } } "
"private AST.Access parse_cls_for_type_spec() throws SyntaxException {   AST.Access a;   int arrayDepth=0;   while (((Element)current).getContent().equals(\"[\")) {     nextNode(false);     expecting(\"]\",current.previous(),current,err);     nextNode(false);     ++arrayDepth;   }   if (isPackage((Element)current)) {     parse_package(false);     while (current instanceof Element && ((Element)current).getContent().equals(\".\")) {       parse_access(false);     }     a=(AST.Access)parsedExps.pop();   }  else   if (current.getTokenType() == TokenType.VALID_NAME || isPrimitive(((Element)current).getContent())) {     AST.Access access=new AST.Access(null,((Element)current).getContent(),current.getLineCol());     parsedExps.push(access);     nextNode(true);     while (current instanceof Element && ((Element)current).getContent().equals(\".\")) {       parse_access(false);     }     a=(AST.Access)parsedExps.pop();   }  else {     err.UnexpectedTokenException(\"type\",((Element)current).getContent(),current.getLineCol());     err.debug(\"assume that the token is Object\");     a=new AST.Access(null,\"Object\",LineCol.SYNTHETIC);   }   for (int i=0; i < arrayDepth; ++i) {     a=new AST.Access(a,\"[]\",a.line_col());   }   return a; } "
"public void resetChoosableFileFilters(){   FileFilter[] oldValue=getChoosableFileFilters();   setFileFilter(null);   filters.removeAllElements();   if (isAcceptAllFileFilterUsed()) {     addChoosableFileFilter(getAcceptAllFileFilter());   }   firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY,oldValue,getChoosableFileFilters()); } "
"@Suppress @MediumTest public void testCollateLocalizedForJapanese() throws Exception {   final String testName=\"DatabaseGeneralTest#testCollateLocalizedForJapanese()\";   final Locale[] localeArray=Locale.getAvailableLocales();   final String japanese=Locale.JAPANESE.getLanguage();   final String english=Locale.ENGLISH.getLanguage();   Locale japaneseLocale=null;   Locale englishLocale=null;   for (  Locale locale : localeArray) {     if (locale != null) {       final String language=locale.getLanguage();       if (language == null) {         continue;       }  else       if (language.equals(japanese)) {         japaneseLocale=locale;       }  else       if (language.equals(english)) {         englishLocale=locale;       }     }     if (japaneseLocale != null && englishLocale != null) {       break;     }   }   if (japaneseLocale == null || englishLocale == null) {     Log.d(TAG,testName + \"n is silently skipped since \" + (englishLocale == null ? (japaneseLocale == null ? \"Both English and Japanese locales do not exist.\" : \"English locale does not exist.\") : (japaneseLocale == null ? \"Japanese locale does not exist.\" : \"...why?\")));     return;   }   Locale originalLocale=Locale.getDefault();   try {     final String dbName=\"collate_localized_test\";     mDatabase.execSQL(\"CREATE TABLE \" + dbName + \" (\"+ \"_id INTEGER PRIMARY KEY, \"+ \"s TEXT COLLATE LOCALIZED) \");     ContentValues cv=new ContentValues();     cv=new ContentValues();     cv.put(\"s\",\"\\uFF75\\uFF77\\uFF85\\uFF9C\");     cv=new ContentValues();     cv.put(\"s\",\"\\u306B\\u307B\\u3093\");     cv=new ContentValues();     cv.put(\"s\",\"\\u30A2\\u30E1\\u30EA\\u30AB\");     Locale.setDefault(englishLocale);     Locale.setDefault(japaneseLocale);     Cursor cur=mDatabase.rawQuery(\"SELECT * FROM \" + dbName + \" ORDER BY s\",null);     assertTrue(cur.moveToFirst());     assertEquals(\"\\u30A2\\u30E1\\u30EA\\u30AB\",cur.getString(1));     assertTrue(cur.moveToNext());     assertEquals(\"\\uFF75\\uFF77\\uFF85\\uFF9C\",cur.getString(1));     assertTrue(cur.moveToNext());     assertEquals(\"\\u306B\\u307B\\u3093\",cur.getString(1));   }   finally {     if (originalLocale != null) {       try {         Locale.setDefault(originalLocale);       }  catch (      Exception ignored) {       }     }   } } "
"public ConditionDecision(boolean allowed){   this.allowed=allowed; } "
"public double[] board_to_dsn_rel(PlaPointFloat p_point){   double[] result=new double[2];   result[0]=board_to_dsn(p_point.v_x);   result[1]=board_to_dsn(p_point.v_y);   return result; } "
"private void savepostLogout(String postLocation,String postRespLocation,List logList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {   if (postLocation != null && postLocation.length() > 0) {     SingleLogoutServiceElement slsElemPost=objFact.createSingleLogoutServiceElement();     slsElemPost.setBinding(httpPostBinding);     slsElemPost.setLocation(postLocation);     slsElemPost.setResponseLocation(postRespLocation);     logList.add(slsElemPost);   } } "
"public Set searchOrgNames(SSOToken token,String serviceName,String attrName,Set values) throws SMSException, SSOException {   SMSEntry.validateToken(token);   if (debug.messageEnabled()) {     debug.message(\"CachedSubEntries: reading orgNames DN: \" + cachedEntry.getDN() + \" attrName: \"+ attrName);   }   return (cachedEntry.getSMSEntry().searchOrganizationNames(token,0,true,true,serviceName,attrName,values)); } "
"boolean isEmpty(){   return (referrals.isEmpty()); } "
"public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode) throws Throwable {   return doInteraction(clientConnection,serverSocket,responseCode,false); } "
"public static void write(File file,CharSequence data) throws IOException {   write(file,data,Charset.defaultCharset(),false); } "
"public NodeSetDTM(DTMManager dtmManager){   super();   m_manager=dtmManager; } "
"@DataProvider(name=\"createDeleteData\") public Object[][] createDeleteData(){   List<Attribute> entryAttrList=getEntryAttributes();   return new Object[][]{{\"dc=com\",entryAttrList,false},{\"dc=delete,dc=an,dc=entry,dc=with,dc=a,dc=long dn\",null,true}}; } "
"private void writeObject(java.io.ObjectOutputStream s) throws IOException {   s.writeObject(thisX500Name.getEncodedInternal()); } "
"private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {   mySyntax=(Properties)s.readObject();   impl=new NameImpl(mySyntax);   int n=s.readInt();   try {     while (--n >= 0) {       add((String)s.readObject());     }   }  catch (  InvalidNameException e) {     throw (new java.io.StreamCorruptedException(\"Invalid name\"));   } } "
"public void clear(){   if (data != null) {     for (int i=0; i < (length * 5); i++)     data[i]=null;   }   length=0; } "
"public void paintRadioButtonMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){   paintBorder(context,g,x,y,w,h,null); } "
"public static int countByUuid_C(java.lang.String uuid,long companyId){   return getPersistence().countByUuid_C(uuid,companyId); } "
"public void startDTD(String name,String publicId,String systemId) throws SAXException {   m_handler.startDTD(name,publicId,systemId); } "
"public PluginResult.SubordinateDelete invokeSubordinateDeletePlugins(DeleteOperation deleteOperation,Entry entry){   PluginResult.SubordinateDelete result=null;   for (  DirectoryServerPlugin p : subordinateDeletePlugins) {     if (deleteOperation.isInternalOperation() && !p.invokeForInternalOperations()) {       continue;     }     try {       result=p.processSubordinateDelete(deleteOperation,entry);     }  catch (    Exception e) {       logger.traceException(e);       LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_DELETE_PLUGIN_EXCEPTION.get(p.getPluginEntryDN(),deleteOperation.getConnectionID(),deleteOperation.getOperationID(),stackTraceToSingleLineString(e));       logger.error(message);       return PluginResult.SubordinateDelete.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);     }     if (result == null) {       LocalizableMessage message=ERR_PLUGIN_SUBORDINATE_DELETE_PLUGIN_RETURNED_NULL.get(p.getPluginEntryDN(),deleteOperation.getConnectionID(),deleteOperation.getOperationID());       logger.error(message);       return PluginResult.SubordinateDelete.stopProcessing(DirectoryServer.getServerErrorResultCode(),message);     }  else     if (!result.continuePluginProcessing()) {       return result;     }   }   if (result == null) {     result=PluginResult.SubordinateDelete.continueOperationProcessing();   }   return result; } "
"public AMAuthenticationAuditEventBuilder principal(String principal){   if (isNotEmpty(principal)) {     principal(singletonList(principal));   }   return this; } "
"public static void sort(int[] a){   DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0); } "
"public static boolean isSurrogatePair(String text,int idx){   return !(idx < 0 || idx > text.length() - 2) && isSurrogateHigh(text.charAt(idx)) && isSurrogateLow(text.charAt(idx + 1)); } "
"static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {   Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);   if (factoryClass == null) {     throw new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\",null);   }   try {     Object instance=factoryClass.newInstance();     debugPrintln(\"created new instance of factory \" + factoryId);     return instance;   }  catch (  Exception x) {     throw new ConfigurationError(\"Provider for factory \" + factoryId + \" could not be instantiated: \"+ x,x);   } } "
"void importCipherKeyEntry(Entry entry) throws CryptoManagerException {   if (!entry.hasObjectClass(ocCipherKey)) {     return;   }   try {     String keyID=entry.parseAttribute(ATTR_CRYPTO_KEY_ID).asString();     int ivLengthBits=entry.parseAttribute(ATTR_CRYPTO_INIT_VECTOR_LENGTH_BITS).asInteger();     int keyLengthBits=entry.parseAttribute(ATTR_CRYPTO_KEY_LENGTH_BITS).asInteger();     String transformation=entry.parseAttribute(ATTR_CRYPTO_CIPHER_TRANSFORMATION_NAME).asString();     String compromisedTime=entry.parseAttribute(ATTR_CRYPTO_KEY_COMPROMISED_TIME).asString();     boolean isCompromised=compromisedTime != null;     Set<String> symmetricKeys=entry.parseAttribute(ATTR_CRYPTO_SYMMETRIC_KEY).asSetOfString();     SecretKey secretKey=decodeSymmetricKeyAttribute(symmetricKeys);     if (null != secretKey) {       cipherCryptoManager.importCipherKeyEntry(keyID,transformation,secretKey,keyLengthBits,ivLengthBits,isCompromised);       return;     }     String symmetricKey=getSymmetricKey(symmetricKeys);     if (symmetricKey == null) {       throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_TO_DECODE.get(entry.getName()));     }     secretKey=decodeSymmetricKeyAttribute(symmetricKey);     cipherCryptoManager.importCipherKeyEntry(keyID,transformation,secretKey,keyLengthBits,ivLengthBits,isCompromised);     writeValueToEntry(entry,symmetricKey);   }  catch (  CryptoManagerException e) {     throw e;   } catch (  Exception ex) {     logger.traceException(ex);     throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_OTHER.get(entry.getName(),ex.getMessage()),ex);   } } "
"public Boolean isMustUnderstand(){   return mustUnderstand; } "
"public static ComponentUI createUI(JComponent a){   ComponentUI mui=new MultiDesktopIconUI();   return MultiLookAndFeel.createUIs(mui,((MultiDesktopIconUI)mui).uis,a); } "
"public boolean visitUnionPattern(ExpressionOwner owner,UnionPattern pattern){   return true; } "
"public void removeTabAt(int index){   checkIndex(index);   Component component=getComponentAt(index);   boolean shouldChangeFocus=false;   int selected=getSelectedIndex();   String oldName=null;   if (component == visComp) {     shouldChangeFocus=(SwingUtilities.findFocusOwner(visComp) != null);     visComp=null;   }   if (accessibleContext != null) {     if (index == selected) {       pages.get(index).firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.SELECTED,null);       oldName=accessibleContext.getAccessibleName();     }     accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,component,null);   }   setTabComponentAt(index,null);   pages.remove(index);   putClientProperty(\"__index_to_remove__\",Integer.valueOf(index));   if (selected > index) {     setSelectedIndexImpl(selected - 1,false);   }  else   if (selected >= getTabCount()) {     setSelectedIndexImpl(selected - 1,false);     Page newSelected=(selected != 0) ? pages.get(selected - 1) : null;     changeAccessibleSelection(null,oldName,newSelected);   }  else   if (index == selected) {     fireStateChanged();     changeAccessibleSelection(null,oldName,pages.get(index));   }   if (component != null) {     Component components[]=getComponents();     for (int i=components.length; --i >= 0; ) {       if (components[i] == component) {         super.remove(i);         component.setVisible(true);         break;       }     }   }   if (shouldChangeFocus) {     SwingUtilities2.tabbedPaneChangeFocusTo(getSelectedComponent());   }   revalidate();   repaint(); } "
"public void runTest() throws Throwable {   Document doc;   Element element;   boolean state;   NodeList elementList;   doc=(Document)load(\"staffNS\",false);   elementList=doc.getElementsByTagName(\"emp:employee\");   element=(Element)elementList.item(0);   assertNotNull(\"empEmployeeNotNull\",element);   state=element.hasAttribute(\"defaultAttr\");   assertTrue(\"elementhasattribute02\",state); } "
"private final String _findDecodedLong(int len,int q1,int q2) throws IOException { {     int bufLen=(len + 3) >> 2;     if (bufLen > _quadBuffer.length) {       _quadBuffer=_growArrayTo(_quadBuffer,bufLen);     }   }   _quadBuffer[0]=q1;   _quadBuffer[1]=q2;   int offset=2;   int inPtr=_inputPtr + 8;   len-=8;   final byte[] inBuf=_inputBuffer;   do {     int q=(inBuf[inPtr++] & 0xFF);     q=(q << 8) | inBuf[inPtr++] & 0xFF;     q=(q << 8) | inBuf[inPtr++] & 0xFF;     q=(q << 8) | inBuf[inPtr++] & 0xFF;     _quadBuffer[offset++]=q;   }  while ((len-=4) > 3);   if (len > 0) {     int q=inBuf[inPtr] & 0xFF;     if (len > 1) {       q=(q << 8) + (inBuf[++inPtr] & 0xFF);       if (len > 2) {         q=(q << 8) + (inBuf[++inPtr] & 0xFF);       }     }     _quadBuffer[offset++]=q;   }   return _symbols.findName(_quadBuffer,offset); } "
"public FrameBodyTYER(FrameBodyTDRC body){   setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);   setObjectValue(DataTypes.OBJ_TEXT,body.getText()); } "
"public void updateUI(){   setUI((PopupMenuUI)UIManager.getUI(this)); } "
"public boolean isDisabled(){   return this.disabled; } "
"@Override public void handle(long now){   player.update();   for (  StageBlock tile : SpriteHandler.getStageElements()) {     tile.update();   }   for (int i=0; i < SpriteHandler.getPlayerPowerList().size(); i++) {     PlayerPower power=SpriteHandler.getPlayerPowerList().get(i);     if (power.isReadyForRemoval()) {       SpriteHandler.getPlayerPowerList().remove(power);       break;     }     power.update();   }   for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {     Enemy e=SpriteHandler.getEnemyCast().get(i);     if (e.getCycleStatus()) {       e.destroy();       SpriteHandler.getEnemyCast().remove(e);       SpriteHandler.getAllEnemyCast().remove(e);       i--;       break;     }     e.update();   } } "
"public CompareOperation processCompare(String rawEntryDN,String attributeType,String assertionValue){   return processCompare(ByteString.valueOfUtf8(rawEntryDN),attributeType,ByteString.valueOfUtf8(assertionValue),null); } "
"public boolean isTrustAll(){   return trustAllArg.isPresent(); } "
"public GridLayout(int rows,int cols){   this(rows,cols,0,0); } "
"public void write(RandomAccessFile file) throws IOException {   logger.config(\"Saving ID3v1 tag to file\");   byte[] buffer=new byte[TAG_LENGTH];   int i;   String str;   delete(file);   file.seek(file.length());   System.arraycopy(TAG_ID,FIELD_TAGID_POS,buffer,FIELD_TAGID_POS,TAG_ID.length);   int offset=FIELD_TITLE_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveTitle()) {     str=ID3Tags.truncate(title,FIELD_TITLE_LENGTH);     for (i=0; i < str.length(); i++) {       buffer[i + offset]=(byte)str.charAt(i);     }   }   offset=FIELD_ARTIST_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveArtist()) {     str=ID3Tags.truncate(artist,FIELD_ARTIST_LENGTH);     for (i=0; i < str.length(); i++) {       buffer[i + offset]=(byte)str.charAt(i);     }   }   offset=FIELD_ALBUM_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveAlbum()) {     str=ID3Tags.truncate(album,FIELD_ALBUM_LENGTH);     for (i=0; i < str.length(); i++) {       buffer[i + offset]=(byte)str.charAt(i);     }   }   offset=FIELD_YEAR_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveYear()) {     str=ID3Tags.truncate(year,AbstractID3v1Tag.FIELD_YEAR_LENGTH);     for (i=0; i < str.length(); i++) {       buffer[i + offset]=(byte)str.charAt(i);     }   }   offset=FIELD_COMMENT_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveComment()) {     str=ID3Tags.truncate(comment,FIELD_COMMENT_LENGTH);     for (i=0; i < str.length(); i++) {       buffer[i + offset]=(byte)str.charAt(i);     }   }   offset=FIELD_GENRE_POS;   if (TagOptionSingleton.getInstance().isId3v1SaveGenre()) {     buffer[offset]=genre;   }   file.write(buffer);   logger.config(\"Saved ID3v1 tag to file\"); } "
"public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){   final Request request=requestEvent.getRequest();   final Dialog dialog=requestEvent.getDialog();   try {     final Response response=messageFactory.createResponse(200,request);     if (serverTransactionId == null) {       serverTransactionId=((SipProvider)requestEvent.getSource()).getNewServerTransaction(request);     }     serverTransactionId.sendResponse(response);   }  catch (  Exception ex) {     ex.printStackTrace();   } } "
"public Cursor fetchAll(String dataFilterName,String dataFilterDisplayName,Long filterOnDataTypeID,Long compareWithDataTypeID){   SQLiteQueryBuilder qb=new SQLiteQueryBuilder();   qb.setTables(DATABASE_TABLE);   qb.appendWhere(\"1=1\");   if (dataFilterName != null) {     qb.appendWhere(\" AND \" + KEY_DATAFILTERNAME + \" = \");     qb.appendWhereEscapeString(dataFilterName);   }   if (dataFilterDisplayName != null) {     qb.appendWhere(\" AND \" + KEY_DATAFILTERDISPLAYNAME + \" = \");     qb.appendWhereEscapeString(dataFilterDisplayName);   }   if (filterOnDataTypeID != null) {     qb.appendWhere(\" AND \" + KEY_FILTERONDATATYPEID + \" = \"+ filterOnDataTypeID);   }   if (compareWithDataTypeID != null) {     qb.appendWhere(\" AND \" + KEY_COMPAREWITHDATATYPEID + \" = \"+ compareWithDataTypeID);   }   return qb.query(database,KEYS,null,null,null,null,null); } "
"public static Map<String,MappedClass> mappingsFromNodesNoLinking(Map<String,ClassNode> nodes){   Map<String,MappedClass> mappings=new HashMap<String,MappedClass>();   for (  ClassNode node : nodes.values()) {     mappings=generateClassMapping(node,nodes,mappings);   }   return mappings; } "
"public void shutdown(){   if (shutdown.compareAndSet(false,true)) {     final RSUpdater rsUpdater=this.rsUpdater.get();     if (rsUpdater != null) {       rsUpdater.initiateShutdown();     }     if (flushThread != null) {       flushThread.initiateShutdown(); synchronized (flushThread) {         flushThread.notify();       }     }     DirectoryServer.deregisterAlertGenerator(this);     DirectoryServer.deregisterBackendInitializationListener(this);     DirectoryServer.deregisterShutdownListener(this);     disableService();   }   try {     while (!done) {       Thread.sleep(50);     }   }  catch (  InterruptedException e) {     Thread.currentThread().interrupt();   } } "
"public LibPadstack add(String p_name,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){   int pad_no=count() + 1;   LibPadstack new_padstack=new LibPadstack(p_name,pad_no,p_shapes,p_attach_allowed,p_placed_absolute);   padstack_list.add(new_padstack);   return new_padstack; } "
"public void save(Bundle bundle){   Validate.notNull(bundle,\"bundle\");   SharedPreferences.Editor editor=cache.edit();   for (  String key : bundle.keySet()) {     try {       serializeKey(key,bundle,editor);     }  catch (    JSONException e) {       Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,\"Error processing value for key: '\" + key + \"' -- \"+ e);       return;     }   }   editor.apply(); } "
"void publish(FakeReplicationDomain domain,byte[] msg){   UpdateMsg updateMsg; synchronized (this) {     updateMsg=new UpdateMsg(domain.getGenerator().newCSN(),msg);     domain.prepareWaitForAckIfAssuredEnabled(updateMsg);     domain.publish(updateMsg);   }   try {     domain.waitForAckIfAssuredEnabled(updateMsg);   }  catch (  TimeoutException ex) {     logger.info(NOTE_DS_ACK_TIMEOUT,domain.getBaseDN(),domain.getAssuredTimeout(),updateMsg);   } } "
"@Override public void processServerShutdown(LocalizableMessage reason){   stopRequested=true;   while (rotaterThread != null && rotaterThread.isAlive()) {     try {       rotaterThread.interrupt();       rotaterThread.join();     }  catch (    InterruptedException ex) {     }   }   DirectoryServer.deregisterShutdownListener(this);   removeAllRotationPolicies();   removeAllRetentionPolicies(); } "
"private void testEntriesInDb() throws Exception {   log(\"TestEntriesInDb\");   short found=0;   for (  String entry : updatedEntries) {     int dns=entry.indexOf(\"dn: \");     int dne=entry.indexOf(EXAMPLE_DN);     String dn=entry.substring(dns + 4,dne + EXAMPLE_DN.length());     log(\"Search Entry: \" + dn);     DN entryDN=DN.valueOf(dn);     Entry resultEntry=getEntry(entryDN,1000,true);     if (resultEntry == null) {       log(\"Entry not found <\" + dn + \">\");     }  else {       log(\"Entry found <\" + dn + \">\");       found++;     }   }   assertEquals(found,updatedEntries.length,\" Entries present in DB :\" + found + \" Expected entries :\"+ updatedEntries.length); } "
"private TrustAnchor findTrustAnchorBySubjectAndPublicKey(X509Certificate cert){   TrustAnchor trustAnchor=trustedCertificateIndex.findBySubjectAndPublicKey(cert);   if (trustAnchor != null) {     return trustAnchor;   }   if (trustedCertificateStore == null) {     return null;   }   if (trustedCertificateStore.isTrustAnchor(cert)) {     return trustedCertificateIndex.index(cert);   }   return null; } "
"public void updateBlur(){   invalidate(); } "
"public boolean startCellEditing(EventObject anEvent){   return true; } "
"public static void main(final String[] args){   DOMTestCase.doMain(nodetextnodename.class,args); } "
"protected void fireMenuKeyPressed(MenuKeyEvent event){   if (DEBUG) {     System.out.println(\"in JMenuItem.fireMenuKeyPressed for \" + getText() + \"  \"+ KeyStroke.getKeyStrokeForEvent(event));   }   Object[] listeners=listenerList.getListenerList();   for (int i=listeners.length - 2; i >= 0; i-=2) {     if (listeners[i] == MenuKeyListener.class) {       ((MenuKeyListener)listeners[i + 1]).menuKeyPressed(event);     }   } } "
"public void update(VLVIndexDescriptor index){   ignoreCheckSave=true;   readOnlyName.setText(index.getName());   titlePanel.setDetails(LocalizableMessage.raw(index.getName()));   if (index.getBackend() != null) {     updateBaseDNCombo(index.getBackend());     backendName.setText(index.getBackend().getBackendID());   }   final String dn=Utilities.unescapeUtf8(index.getBaseDN().toString());   if (((DefaultComboBoxModel)baseDNs.getModel()).getIndexOf(dn) != -1) {     baseDN.setText(\"\");     baseDNs.setSelectedItem(dn);   }  else {     baseDN.setText(dn);     baseDNs.setSelectedItem(OTHER_BASE_DN);   }   selectScopeRadioButton(index.getScope());   filter.setText(index.getFilter());   final int indexes[]=new int[sortOrderModel.getSize()];   for (int i=0; i < indexes.length; i++) {     indexes[i]=i;   }   sortOrder.setSelectedIndices(indexes);   remove.doClick();   final DefaultComboBoxModel model=(DefaultComboBoxModel)attributes.getModel();   for (  final VLVSortOrder s : index.getSortOrder()) {     sortOrderModel.addElement(s);     for (int i=0; i < model.getSize(); i++) {       final CategorizedComboBoxElement o=(CategorizedComboBoxElement)model.getElementAt(i);       if (o.getType() == CategorizedComboBoxElement.Type.REGULAR && o.getValue().equals(s.getAttributeName())) {         model.removeElementAt(i);         break;       }     }   }   if (model.getSize() > 1) {     attributes.setSelectedIndex(1);   }   if (getInfo() != null) {     if (getInfo().mustReindex(index)) {       setWarningLabel(warning,INDEX_MODIFIED);       warning.setVisible(true);       warning.setVerticalTextPosition(SwingConstants.TOP);     }  else {       warning.setVisible(false);     }   }   this.index=index;   ignoreCheckSave=false;   checkSaveButton();   scrollListener.updateBorder(); } "
"public void handle(Exception ex){ } "
"public static HostPort allAddresses(int port){   return new HostPort(WILDCARD_ADDRESS,port); } "
"public RealmRuleSet(){   this(\"\"); } "
"public static boolean delete(File dir){   return delete(dir,true); } "
"public com.sun.identity.wsfederation.jaxb.wsfederation.FreshnessElement createFreshnessElement() throws javax.xml.bind.JAXBException {   return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FreshnessElementImpl(); } "
"public void logMessage(SIPMessage message,String from,String to,boolean sender,long time){   checkLogFile();   if (message.getFirstLine() == null)   return;   CallID cid=(CallID)message.getCallId();   String callId=null;   if (cid != null)   callId=cid.getCallId();   String firstLine=message.getFirstLine().trim();   String inputText=(logContent ? message.encode() : message.encodeMessage(new StringBuilder()).toString());   String tid=message.getTransactionId();   TimeStampHeader tsHdr=(TimeStampHeader)message.getHeader(TimeStampHeader.NAME);   long tsval=tsHdr == null ? 0 : tsHdr.getTime();   logMessage(inputText,from,to,sender,callId,firstLine,null,tid,time,tsval); } "
"static void clearRootClientConnectionAtShutdown(){   rootConnection=null; } "
"public static void main(final String[] args){   DOMTestCase.doMain(hc_nodechildnodes.class,args); } "
"public void scroll(int itemsToScroll,int time){   int distance=itemsToScroll * getItemHeight() - scrollingOffset;   scroller.scroll(distance,time); } "
"public void runTest() throws Throwable {   Document doc;   NodeList elementList;   Element testAddr;   Attr addrAttr;   int nodeType;   doc=(Document)load(\"staff\",false);   elementList=doc.getElementsByTagName(\"address\");   testAddr=(Element)elementList.item(0);   addrAttr=testAddr.getAttributeNode(\"domestic\");   nodeType=(int)addrAttr.getNodeType();   assertEquals(\"nodeAttrNodeTypeAssert1\",2,nodeType); } "
"@Override public int compareTo(Object o) throws ClassCastException {   ProfileStackFrame f=(ProfileStackFrame)o;   long thisCount=getTotalCount();   long thatCount=f.getTotalCount();   if (thisCount > thatCount) {     return -1;   }  else   if (thisCount < thatCount) {     return 1;   }   int value=className.compareTo(f.className);   if (value == 0) {     value=methodName.compareTo(f.methodName);   }   return value; } "
"private void initializeInternal(TemplateFile templateFile,String[] arguments,int lineNumber) throws InitializationException { switch (arguments.length) { case 0:     initialValue=0;   nextValue=0; resetOnNewParents=true; break; case 1: try { initialValue=Integer.parseInt(arguments[0]); }  catch (NumberFormatException nfe) { LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[0],getName(),lineNumber); throw new InitializationException(message); } nextValue=initialValue; resetOnNewParents=true; break; case 2: try { initialValue=Integer.parseInt(arguments[0]); }  catch (NumberFormatException nfe) { LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[0],getName(),lineNumber); throw new InitializationException(message); } if (arguments[1].equalsIgnoreCase(\"true\")) { resetOnNewParents=true; }  else if (arguments[1].equalsIgnoreCase(\"false\")) { resetOnNewParents=false; }  else { LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_BOOLEAN.get(arguments[1],getName(),lineNumber); throw new InitializationException(message); } nextValue=initialValue; break; default : LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,0,2,arguments.length); throw new InitializationException(message); } } "
"public byte[] nextByteArray(final int length){   final byte[] result=new byte[length];   System.arraycopy(byteArray,bytes.position(),result,0,length);   bytes.skip(length);   return result; } "
"private void put(final Item i){   if (index + typeCount > threshold) {     int ll=items.length;     int nl=ll * 2 + 1;     Item[] newItems=new Item[nl];     for (int l=ll - 1; l >= 0; --l) {       Item j=items[l];       while (j != null) {         int index=j.hashCode % newItems.length;         Item k=j.next;         j.next=newItems[index];         newItems[index]=j;         j=k;       }     }     items=newItems;     threshold=(int)(nl * 0.75);   }   int index=i.hashCode % items.length;   i.next=items[index];   items[index]=i; } "
"private static boolean isJRE11(){   try {     Class c=Class.forName(\"java.security.AccessController\");     return false;   }  catch (  Exception ex) {   }   return true; } "
"public static void push(Context request){   stack.get().push(request); } "
"public void makeImmutable(){   isMutable=false; } "
"@Override public void onDestroy(){   Log.d(TAG,\"start FmRadioActivity.onDestroy\");   unregisterSdcardReceiver();   mHandler.removeCallbacksAndMessages(null);   if (mService != null) {     mService.unregisterFmRadioListener(mFmRadioListener);   }   mFmRadioListener=null;   if (null != mPopupMenu) {     mPopupMenu.dismiss();     mPopupMenu=null;   }   Log.d(TAG,\"end FmRadioActivity.onDestroy\");   super.onDestroy(); } "
"public static void main(final String[] args){   DOMTestCase.doMain(namednodemapsetnameditemns02.class,args); } "
"public Set createPeopleContainers(Map peopleContainersMap) throws AMException, SSOException {   Iterator iter=peopleContainersMap.keySet().iterator();   Set peopleContainers=new HashSet();   while (iter.hasNext()) {     String peopleContainerName=(String)iter.next();     String peopleContainerDN=AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER) + \"=\" + peopleContainerName+ \",\"+ super.entryDN;     Map attributes=(Map)peopleContainersMap.get(peopleContainerName);     AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDN);     peopleContainerImpl.setAttributes(attributes);     peopleContainerImpl.create();     peopleContainers.add(peopleContainerImpl);   }   return peopleContainers; } "
"public static JPasswordField makeJPasswordField(LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle style){   JPasswordField f=new JPasswordField();   updateTextFieldComponent(f,text,tooltip,size,style);   f.addFocusListener(new TextFieldFocusListener(f));   return f; } "
